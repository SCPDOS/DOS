     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro rets 0
    81                              <1> cret s
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro retns 0
    85                              <1> cret ns
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro breakpoint 0
    89                              <1> xchg bx, bx
    90                              <1> %endmacro
     5                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     drvMAXCMD       equ 24
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn     equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut    equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev    equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev  equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut   equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL     equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvIOCTLQ    equ 80h ;If set, IOCTL Query supported (21h/4410h, 4411h)
    69                              <1>     devDrvOpClRem   equ 800h ;If set, Open, Close and Rem media supported
    70                              <1>     devDrvNotIBM    equ 2000h ;If set, media byte is meaningful for disk comps
    71                              <1>     devDrvOutToBsy  equ 2000h ;If set, char dev supports output until busy
    72                              <1>     devDrvIOCTLCtl  equ 4000h ;If set, IOCTL control strings supported
    73                              <1>     devDrvChar      equ 8000h ;If set, Char device
    74                              <1> ;Bit 0 1=Console input
    75                              <1> ;    1 1=Console output (character devices)
    76                              <1> ;    2 1=NUL device
    77                              <1> ;    3 1=CLOCK device
    78                              <1> ;    4 1=Int 29 output (CON)
    79                              <1> ;    6 1=Generic IOCTL and GET/SET logical drive supported (13,17,18) (3.2+)
    80                              <1> ;    7 1=Query IOCTL function supported (19) (5.0+)
    81                              <1> ;   11 1=Open/close/removable media supported (3.0+)
    82                              <1> ;   13 1=Output until busy supported (character devices) (3.0+)
    83                              <1> ;      1=Media descriptor in FAT required (block devices)
    84                              <1> ;   14 1=IOCTL read and write control strings supported
    85                              <1> ;   15 0=Block device
    86                              <1> ;      1=Character device
    87                              <1> 
    88                              <1> ;Driver structures
    89                              <1> 
    90                              <1> %macro drvReqPktM 0 ;Driver Request Header Macro
    91                              <1> 
    92                              <1>     .hdrlen db ?  ;Length of the request header
    93                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    94                              <1>     .cmdcde db ?  ;Command code
    95                              <1>     .status dw ?  ;Status word
    96                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    97                              <1> 
    98                              <1> %endmacro
    99                              <1> 
   100                              <1> struc drvReqPkt
   101                              <1>     drvReqPktM
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   102                              <1> endstruc
   103                              <1> 
   104                              <1> struc initReqPkt  ;Init Request Packet
   105                              <1> 
   106                              <1>     drvReqPktM   ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   107 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   108 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   109 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   110 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   111                              <1> 
   112                              <1> endstruc
   113                              <1> 
   114                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   115                              <1> 
   116                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   117 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   118 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   119 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   120                              <1> 
   121                              <1> endstruc
   122                              <1> 
   123                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   124                              <1> 
   125                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   126 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   127 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   128 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   129                              <1> 
   130                              <1> endstruc
   131                              <1> 
   132                              <1> struc ioReqPkt   ;IO Request Packet
   133                              <1> 
   134                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   135 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   136 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   137 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   138 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   139 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   140                              <1> 
   141                              <1> endstruc
   142                              <1> 
   143                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   144                              <1>     
   145                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   146 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   147                              <1> 
   148                              <1> endstruc
   149                              <1> 
   150                              <1> struc statusReqPkt   ;Status Request Packet
   151                              <1> 
   152                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   153                              <1> 
   154                              <1> endstruc
   155                              <1> 
   156                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   157                              <1> 
   158                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   159                              <1>      
   160                              <1> endstruc
   161                              <1> 
   162                              <1> struc openReqPkt ;Open Device Request Packet
   163                              <1> 
   164                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   165                              <1>      
   166                              <1> endstruc
   167                              <1> 
   168                              <1> struc closeReqPkt ;Close Device Request Packet
   169                              <1> 
   170                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   171                              <1>      
   172                              <1> endstruc
   173                              <1> 
   174                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   175                              <1> 
   176                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   177                              <1>      
   178                              <1> endstruc
   179                              <1> 
   180                              <1> struc outTilBusyPkt
   181                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   182 0000000D ????????????????    <1>     .pXfrBuffer dq ?    ;Pointer to the transfer buffer
   183 00000015 ????                <1>     .wXfrCount  dw ?    ;Byte count to xfr. Returns bytes xfred.
   184                              <1> endstruc
   185                              <1> 
   186                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   187                              <1> 
   188                              <1>     drvReqPktM    ;Common Driver Header Macro  
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   189 0000000D ??                  <1>     .majfun db ?  ;Major function number
   190 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   191 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   192 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   193 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   194                              <1> 
   195                              <1> endstruc
   196                              <1> 
   197                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   198                              <1>     
   199                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   200                              <1> 
   201                              <1> endstruc
   202                              <1> 
   203                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   204                              <1>     
   205                              <1>     drvReqPktM    ;Common Driver Header Macro
    91                              <2> 
    92 00000000 ??                  <2>  .hdrlen db ?
    93 00000001 ??                  <2>  .unitnm db ?
    94 00000002 ??                  <2>  .cmdcde db ?
    95 00000003 ????                <2>  .status dw ?
    96 00000005 ????????????????    <2>  .devptr dq ?
    97                              <2> 
   206                              <1> 
   207                              <1> endstruc
   208                              <1> ;IOCTL structs
   209                              <1> 
   210                              <1> struc lbaParamsBlock
   211 00000000 ??                  <1>     .bSize          db ?
   212 00000001 ??                  <1>     .bSpecFuncs     db ?    ;0 = Update drive info from medium and return that
   213                              <1>                             ;1 = Get current saved drive info w/o updating
   214                              <1>                             ;2 = Get physical parameters of the medium
   215                              <1>                             ;Only meaningful on get. Set must have this as 0
   216 00000002 ????                <1>     .wDevFlgs       dw ?    ;Only bits 0 and 1 are xmitted/read
   217 00000004 ????                <1>     .wFSType        dw ?    ;If one, it is a FAT type. Only valid on getlba
   218                              <1>                             ; If one, can use CHS functions with returned vals
   219 00000006 ????                <1>     .wRes           dw ?    ;Reserved word
   220 00000008 ????????????????    <1>     .qSectorSize    dq ?    ;Only the lower word is valid here
   221 00000010 ????????????????    <1>     .qNumSectors    dq ?    ;Only the lower dword is valid here
   222                              <1> ;The below is the absolute start sector of the partition. It is the 
   223                              <1> ; partition at which to find the BPB.
   224 00000018 ????????????????    <1>     .qStartSector   dq ?    ;Only the lower dword is valid here.
   225                              <1> endstruc
   226                              <1> 
   227                              <1> %macro lbIOCmnM 0   ;IOCTL LBA request common portion macro
   228                              <1>     .size           db ?
   229                              <1>     .numSectors     db ?  ;# sectors to act on. Returns sectors acted on
   230                              <1>     .res            db 6 dup (?)
   231                              <1>     .startSector    dq ?  ;Sector to start action on
   232                              <1> %endmacro
   233                              <1> 
   234                              <1> struc lbaIOBlock
   235                              <1>     lbIOCmnM
   228 00000000 ??                  <2>  .size db ?
   229 00000001 ??                  <2>  .numSectors db ?
   230 00000002 ????????????        <2>  .res db 6 dup (?)
   231 00000008 ????????????????    <2>  .startSector dq ?
   236 00000010 ????????????????    <1>     .xferBuffer     dq ?  ;Transfer buffer for data
   237                              <1> endstruc
   238                              <1> 
   239                              <1> struc lbaFormatBlock
   240                              <1>     lbIOCmnM
   228 00000000 ??                  <2>  .size db ?
   229 00000001 ??                  <2>  .numSectors db ?
   230 00000002 ????????????        <2>  .res db 6 dup (?)
   231 00000008 ????????????????    <2>  .startSector dq ?
   241                              <1> endstruc
   242                              <1> 
   243                              <1> struc chsParamsBlock
   244 00000000 ??                  <1>     .bSpecFuncs db ?    ;
   245 00000001 ??                  <1>     .bDevType   db ?    ;5 if fixed, 7 otherwise
   246 00000002 ????                <1>     .wDevFlgs   dw ?    ;Only bits 0 and 1 are xmitted/read
   247 00000004 ????                <1>     .wNumCyl    dw ?
   248 00000006 ??                  <1>     .bMedTyp    db ?    ;Perma 0 for us, meaningless. Reserved.
   249 00000007 <res 35h>           <1>     .deviceBPB  db 53 dup (?)   ;Full length with reserved bytes of BPB32
   250                              <1>     .TrackLayout:
   251                              <1> endstruc
   252                              <1> 
   253                              <1> ;Used for get and set params. Refer to DOS docs for meaning of bit.
   254                              <1> specFuncBPB equ 1<<0    ;Does BPB stuff
   255                              <1> ;Only used in setparams requests. Ignored for getparams 
   256                              <1> specFuncTrk equ 1<<1    ;Set if just track layout cpy. Clear if set all.
   257                              <1> specFuncSec equ 1<<2    ;Set if all sectors samze size. Clear if not.
   258                              <1> 
   259                              <1> 
   260                              <1> struc chsIOBlock
   261 00000000 ??                  <1>     .bSpecFuncs     db ?
   262 00000001 ????                <1>     .wStartHead     dw ?
   263 00000003 ????                <1>     .wStartCyl      dw ?    ;Zero based.
   264 00000005 ????                <1>     .wStartSector   dw ?    ;Zero based.
   265 00000007 ????                <1>     .wNumSectors    dw ?
   266 00000009 ????????????????    <1>     .pXferBuffer    dq ?
   267                              <1> endstruc
   268                              <1> 
   269                              <1> struc chsFormatBlock
   270 00000000 ??                  <1>     .bSpecFuncs db ?
   271 00000001 ????                <1>     .wStartHead dw ?
   272 00000003 ????                <1>     .wStartCyl  dw ?        ;Zero based.
   273                              <1> endstruc
   274                              <1> 
   275                              <1> struc accFlgBlk
   276 00000000 ??                  <1>     .bSpecFuncs db ?    ;Must be 0
   277 00000001 ??                  <1>     .bAccMode   db ?    ;Set if access allowed. Clear if not.
   278                              <1> endstruc
   279                              <1> 
   280                              <1> struc idParamBlk
   281 00000000 ????                <1>     .wCallLvl   dw ?    ;Should be zero
   282 00000002 ????????            <1>     .volId      dd ?    ;Volume Id
   283 00000006 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
   284 00000011 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
   285                              <1> endstruc
     6                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc oemHeader
    19 00000000 ??????              <1>     .jump       db 3 dup (?)    ;Jump instruction
    20 00000003 ????????????????    <1>     .oemString  db 8 dup (?)    ;OEM string
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc bpb          ;FAT 12 and 16 BPB
    24 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    25 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    26 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors, in volume
    27 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    28 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of 32 byte entries in Root directory
    29 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    30 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    31 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT
    32 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    33 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    34 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors, preceeding volume start
    35 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    36                              <1> endstruc
    37                              <1> 
    38                              <1> struc extBs
    39                              <1> ;Extended bootsector structure. If present, comes immediately after 
    40                              <1> ; BPB in bootsector
    41 00000000 ??                  <1>     .drvNum     db ?  ;Logical drive number (00h or 80h)
    42 00000001 ??                  <1>     .reserved1  db ?  ;Reserved byte
    43 00000002 ??                  <1>     .bootSig    db ?  ;Extended boot signature
    44 00000003 ????????            <1>     .volId      dd ?  ;Volume serial number
    45 00000007 <res Bh>            <1>     .volLab     db 11 dup (?) ;Volume label string
    46 00000012 ????????????????    <1>     .filSysType db 8 dup (?)  ;File system type string
    47                              <1> endstruc
    48                              <1> extBsSig    equ 29h
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB
    51 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    52 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    53 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors
    54 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    55 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of entries in Root directory
    56 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    57 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    58 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
    59 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    60 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    61 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors
    62 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    63 00000019 ????????            <1>     .FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
    64 0000001D ????                <1>     .extFlags   dw ?  ;Extended Flags word
    65 0000001F ????                <1>     .FSver      dw ?  ;File system version word, must be 0
    66 00000021 ????????            <1>     .RootClus   dd ?  ;First Cluster of Root Directory
    67 00000025 ????                <1>     .FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
    68 00000027 ????                <1>     .BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
    69 00000029 <res Ch>            <1>     .reserved   db 12 dup (?) ;Reserved 12 bytes
    70                              <1> endstruc
    71                              <1> 
    72                              <1> struc FSInfo
    73 00000000 ????????            <1>     .leadSig    dd ? ;Leading Signature, should be 041615252h
    74 00000004 <res 1E0h>          <1>     .reserved1  db 480 dup (?)
    75 000001E4 ????????            <1>     .strucSig   dd ?  ;Should be 061417272h
    76 000001E8 ????????            <1>     .freeCount  dd ?  ;Contains the last known free cluster on volume
    77 000001EC ????????            <1>     .nextFree   dd ?  ;Contains the first known free cluster on volume
    78 000001F0 <res Ch>            <1>     .reserved2  db 12 dup (?) ;Should be 0
    79 000001FC ????????            <1>     .trailSig   dd ?  ;Should be 0AA550000h
    80                              <1> endstruc
    81                              <1> 
    82                              <1> fsInfoSig1  equ 041615252h
    83                              <1> fsInfoSig2  equ 061417272h
    84                              <1> fsInfoSig3  equ 0AA550000h
    85                              <1> 
    86                              <1> struc mbr
    87 00000000 <res 1B8h>          <1>     .bsCode     db 440 dup (?)
    88 000001B8 ????????            <1>     .diskID     dd ?
    89 000001BC ????                <1>     .reserved   dw ?
    90 000001BE <res 10h>           <1>     .mbrEntry1  db 16 dup (?)
    91 000001CE <res 10h>           <1>     .mbrEntry2  db 16 dup (?)
    92 000001DE <res 10h>           <1>     .mbrEntry3  db 16 dup (?)
    93 000001EE <res 10h>           <1>     .mbrEntry4  db 16 dup (?)
    94 000001FE ????                <1>     .mbrSig     dw ?
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc ebr   ;A special type of MBR
    98 00000000 <res 1BEh>          <1>     .bsCode     db 446 dup (?)    ;Basic 16-bit code to error if launched into
    99 000001BE <res 10h>           <1>     .ebrVolHdr  db 16 dup (?) ;Information about the volume itself
   100 000001CE <res 10h>           <1>     .ebrLinkHdr db 16 dup (?) ;Link ptr to next logical volume in ebr
   101 000001DE <res 20h>           <1>     .reserved   db 32 dup (?) ;Reserved
   102 000001FE ????                <1>     .mbrSig     dw ?
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc mbrEntry
   106 00000000 ??                  <1>     .ptnAtrib   db ?  ;80h = active
   107 00000001 ??????              <1>     .chsStart   db 3 dup (?)  ;Ignore practically
   108 00000004 ??                  <1>     .ptnType    db ?  ;This being 00 means free
   109 00000005 ??????              <1>     .chsEnd     db 3 dup (?)  ;Ignore
   110 00000008 ????????            <1>     .lbaStart   dd ?  ;Start of partition in 32 bit LBA
   111 0000000C ????????            <1>     .numSectors dd ?  ;Number of sectors in partition
   112                              <1> endstruc
   113                              <1> 
   114                              <1> struc fatDirEntry
   115 00000000 <res Bh>            <1>     .name       db 11 dup (?) ;8.3 File Name w/o fullstop
   116 0000000B ??                  <1>     .attribute  db ?  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      db ?  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   db ?  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    dw ?  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    dw ?  ;Creation date
   121 00000012 ????                <1>     .lastAccDat dw ?  ;Last Read/Write date, not 100% supported (consider later)
   122 00000014 ????                <1>     .fstClusHi  dw ?  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    dw ?  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    dw ?  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  dw ?  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   dd ?  ;32-bit quantity with size of file described by entry
   127                              <1> endstruc
   128                              <1> ;Directory attribute equates
   129                              <1>     dirReadOnly     equ 01h
   130                              <1>     dirHidden       equ 02h
   131                              <1>     dirSystem       equ 04h
   132                              <1>     dirVolumeID     equ 08h
   133                              <1>     dirDirectory    equ 10h
   134                              <1>     dirArchive      equ 20h
   135                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1>     ;If any of the three bits are set, then ALL three bits are set
   138                              <1>     ; in addition to whatever the user passed to search for.
   139                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   140                              <1>     dirIncFiles     equ dirHidden | dirSystem
   141                              <1> 
   142                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   143                              <1> 
   144                              <1>     ;.jmpBoot                db 3 dup (?)
   145                              <1>     ;.oemName                db 8 dup (?)  ;OEM name
   146                              <1> ;BPB starts here
   147 00000000 <res 35h>           <1>     .MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
   148 00000035 ????????????????    <1>     .partitionOffset        dq ?  ;in sectors, 0 means ignore this field
   149 0000003D ????????????????    <1>     .volumeLength           dq ?  ;Volume Length in sectors
   150 00000045 ????????            <1>     .FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
   151 00000049 ????????            <1>     .FATlength              dd ?  ;FAT length, in sectors
   152 0000004D ????????            <1>     .clusterHeapOffset      dd ?  ;Start of data area, in sectors
   153 00000051 ????????            <1>     .clusterCount           dd ?  ;Number of clusters on medium
   154 00000055 ????????            <1>     .firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
   155 00000059 ????????            <1>     .volumeSerialNum        dd ?  ;Volume Serial Number
   156 0000005D ????                <1>     .FSrevision             dw ?  ;Should be 0001 (v1.00)
   157 0000005F ????                <1>     .volumeFlags            dw ?  ;Volume Flags, refer to documentation
   158 00000061 ??                  <1>     .bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
   159 00000062 ??                  <1>     .sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
   160 00000063 ??                  <1>     .numberOfFATs           db ?  ;Number of FATs, only 1 or 2
   161 00000064 ??                  <1>     .driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
   162 00000065 ??                  <1>     .percentInUse           db ?  ;Rounded down. FFh means unknown
   163 00000066 ??????????????      <1>     .reserved               db 7 dup (?)  ;Reserved for alignment
   164                              <1> 
   165                              <1> endstruc
     7                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;File/path length equates.
     8                              <1> MAX_FNAME_FCB   equ 8
     9                              <1> MAX_EXT_FCB     equ 3
    10                              <1> MAX_NAME_FCB    equ MAX_FNAME_FCB + MAX_EXT_FCB
    11                              <1> MAX_NAME_FCBZ   equ MAX_NAME_FCB + 1    ;Space for a null terminator
    12                              <1> ;Values below include the null terminator.
    13                              <1> MAX_FILE    equ 13  ;Maximum length of a filename (includes dot)
    14                              <1> MAX_DRIVE   equ 3   ;Maximum length of a drive string (X:<NUL>)
    15                              <1> MAX_FSPEC   equ 64  ;Maximum length of a path to a file (filespec)
    16                              <1> MAX_PATH    equ 67  ;Maximum length of a fully qualified pathspec
    17                              <1> ;MAX_PATH is X:\<string, maxlen 63 chars>,<null> so 67 chars total.
    18                              <1> ;Use this symbol to check the length of a filename after qualification.
    19                              <1> MAX_PSPEC   equ MAX_PATH - MAX_FILE - 1 ;54 bytes
    20                              <1> ;MAX_PSPEC is the max length of a path with space for a filename!
    21                              <1> ;Remember, filenames for us are just a string of, at most, 13 characters,
    22                              <1> ; which we always resolve into FCB format. Buffers need to make space for
    23                              <1> ; both the dot and terminating null
    24                              <1> ;------------------------------------------------------------------------;
    25                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    26                              <1> ; its file system structure. This is used to locate files and structures
    27                              <1> ; on the device itself and to translate file requests to cluster chains
    28                              <1> ; to LBAs to pass to the disk driver..
    29                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    30                              <1> ; drivers Initialise routine has been called.
    31                              <1> ;------------------------------------------------------------------------;
    32                              <1> struc dpb        ;Drive Parameter Block
    33                              <1> 
    34 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    35 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    36 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    37 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    38 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    39 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    40 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    41 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    42 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    43 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    44 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    45 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    46                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    47 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    48 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    49 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    50 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    51 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    52 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    53                              <1> 
    54                              <1> endstruc
    55                              <1> 
    56                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    57                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    60                              <1> ; All disk pathing requests go via the CDS for that drive.
    61                              <1> ; The default drive is the last accessed drive, this number is stored
    62                              <1> ; in the DOS data area.
    63                              <1> ; The CDS is stored as an array with the offset into the array being 
    64                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    65                              <1> ;
    66                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    67                              <1> ;------------------------------------------------------------------------;
    68                              <1> struc cds       ;Current Directory structure
    69 00000000 <res 43h>           <1>     .sCurrentPath        db MAX_PATH dup (?)    ;Current Directory Path String
    70 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    71 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    72 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    73 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    74 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    75 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    76                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    77                              <1> ; another, we save the number of chars to skip to that deep level).
    78                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    79                              <1> ; Only affects for SUBST drives, not JOIN
    80                              <1> ; Flags: Bit 15 set = Network drive
    81                              <1> ;        Bit 14 set = Physical drive
    82                              <1> ;        Bit 13 set = JOIN'ed drive
    83                              <1> ;        Bit 12 set = SUBST'ed drive
    84                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    85                              <1> endstruc
    86                              <1> ;CDS equates
    87                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    88                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    89                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    90                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    91                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    92                              <1> ;------------------------------------------------------------------------;
    93                              <1> ; The SFT is a way to allow applications to open file handles to files 
    94                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    95                              <1> ; under the first header, and then a second header will be linked to the 
    96                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    97                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    98                              <1> ; using the FCBS= command. Default FCBS=5.
    99                              <1> ;
   100                              <1> ; A file handle describes the file, and the location within the file that
   101                              <1> ; we are reading. The file handle can be manipulated without the file
   102                              <1> ; being in memory, thus allowing the user to access data without needing 
   103                              <1> ; to take up large portions of memory. Similarly, file handles allow for
   104                              <1> ; accessing devices, by treating them as files with their drivers 
   105                              <1> ; responding and translating the manipulations of the file handle itself.
   106                              <1> ; Neither the driver nor the application should see or use the SFT for
   107                              <1> ; the handle, as it is subject to change (and will change when file 
   108                              <1> ; sharing provisions are included). The DOS will make requests to the 
   109                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   110                              <1> ; track of the information in the SFT entry for that handle. 
   111                              <1> ;
   112                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   113                              <1> ; can point to the same file. It all depends on what the applications 
   114                              <1> ; want to do with the File.
   115                              <1> ;
   116                              <1> ; !!!!IMPORTANT!!!!
   117                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   118                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   119                              <1> ;
   120                              <1> ;Each SFT may look like this:
   121                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   122                              <1> ;            |                |
   123                              <1> ;       wNumFiles*sft    wNumFiles*sft
   124                              <1> ;
   125                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   126                              <1> ; System FCBs.
   127                              <1> ;
   128                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   129                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   130                              <1> ;
   131                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   132                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   133                              <1> ;------------------------------------------------------------------------;
   134                              <1> struc sfth   ;System file table header
   135                              <1> ; This is the SFT header.
   136                              <1> ; This structure comes before the start of the first file in the array/table.
   137 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   138 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   139                              <1> endstruc
   140                              <1> 
   141                              <1> struc sft
   142                              <1> ;This is the file struc itself
   143 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   144 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   145 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   146 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   147 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   148 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   149 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   150 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   151 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   152 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   153 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   154 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   155 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   156 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   157 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   158 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   159 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   160 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   161 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   162                              <1> ;                           0 means no record
   163                              <1> endstruc
   164                              <1> ;Open Mode equates
   165                              <1> ;Access modes   Bits[2:0]
   166                              <1> openRdAcc   equ 0h
   167                              <1> openWrAcc   equ 1h
   168                              <1> openRWAcc   equ 2h
   169                              <1> ;Bit 3 reserved 0
   170                              <1> ;Sharing modes  Bits[6:4]
   171                              <1> openCompat      equ 0h  ;Deny all, compatibility mode
   172                              <1> openDenRWShr    equ 10h ;Deny all, explicity read/write
   173                              <1> openDenWrShr    equ 20h ;Deny writes
   174                              <1> openDenRdShr    equ 30h ;Deny reads
   175                              <1> openDenNoShr    equ 40h ;Don't deny anything!
   176                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   177                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   178                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   179                              <1> openNetFCBShr   equ 70h
   180                              <1> openNoInherit   equ 80h
   181                              <1> 
   182                              <1> ;Bits 8-12 reserved 0
   183                              <1> ;Fancy open mode bits, cannot be user set! Yet!
   184                              <1> openFailOnI24   equ 2000h   ;If set, automatically FAIL all Int 24h
   185                              <1> openFlushWrites equ 4000h   ;If set, commit after each write call.
   186                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   187                              <1> openSFTFCB      equ 8000h   ;If set, file is SFT-FCB.
   188                              <1> 
   189                              <1> ;Attribute Byte
   190                              <1> attrFileRO          equ 1h
   191                              <1> attrFileHidden      equ 2h
   192                              <1> attrFileSys         equ 4h
   193                              <1> attrFileVolLbl      equ 8h
   194                              <1> attrFileDir         equ 10h ;Directory entry
   195                              <1> attrFileArchive     equ 20h
   196                              <1> attrFileChar        equ 40h ;Reserved, never found in dir
   197                              <1> 
   198                              <1> ;Device Info word equates
   199                              <1> ;For a block device, bits [5:0] contain the drive number
   200                              <1> devCharConIn    equ 1h  ;If set, device is CON input
   201                              <1> devCharConOut   equ 2h  ;If set, device is CON output
   202                              <1> devCharNulDev   equ 4h  ;If set, device is NULL device
   203                              <1> devCharClkDev   equ 8h  ;If set, device is CLOCK device
   204                              <1> 
   205                              <1> devCharFastOut  equ 10h ;If set, device supports INT 29h
   206                              <1> devCharBinary   equ 20h ;If set, r/w char device in Binary mode
   207                              <1> devCharNotEOF   equ 40h ;If set, device not yet at end of file
   208                              <1> devDiskNoFlush  equ 40h ;Set if file is synchronised with hard store!
   209                              <1> devCharDev      equ 80h ;If set, it is a char device!
   210                              <1> 
   211                              <1> ;The below two cannot be user set! Yet!
   212                              <1> devDiskI24onFull   equ 100h    ;If set, trigger Int 24h on disk full
   213                              <1> devCharNetSpool equ 800h    ;If set, device is a network spooler
   214                              <1> 
   215                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   216                              <1> devCharNamePipe equ 2000h   ;If set, device is a named pipe
   217                              <1> devDiskNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   218                              <1> devRedir        equ 8000h   ;If set, dev/file is redirected!
   219                              <1> ;------------------------------------------------------------------------;
   220                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   221                              <1> ; to an internal buffer, and then copying it to the specified location
   222                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   223                              <1> ; another request for the same sector from the same device is made, so 
   224                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   225                              <1> ; size, selected according to the largest detected sector size during 
   226                              <1> ; the initial loadup.
   227                              <1> ;
   228                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   229                              <1> ;
   230                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> 
   233                              <1> struc bufferHdr
   234 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   235                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   236 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   237 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   238 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   239 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   240 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   241 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   242 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   243                              <1>     .dataarea:             ;Points to the start of the data area
   244                              <1> endstruc
   245                              <1> ;Buffer Flag equates
   246                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   247                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   248                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   249                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   250                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   251                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   252                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   253                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   254                              <1> ;------------------------------------------------------------------------;
   255                              <1> ; Memory control block for each memory arena
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc mcb
   258 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   259 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   260 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   261                              <1>     ;The following byte is reserved outside of sysinit
   262 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   263 0000000E ????                <1>     .reserved   db 2 dup (?) 
   264                              <1>     .program:
   265                              <1> endstruc
   266                              <1> ;MCB equates
   267                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   268                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   269                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   270                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   271                              <1> mcbMarkCtn      equ "M"
   272                              <1> mcbMarkEnd      equ "Z"
   273                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   274                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   275                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   276                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   277                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   278                              <1> mcbSubIFS       equ "I" ;Unused for now
   279                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   280                              <1> mcbSubFCBS      equ "X" ;Unused for now
   281                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   282                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   283                              <1> mcbSubStacks    equ "S" ;Unused for now
   284                              <1> 
   285                              <1> 
   286                              <1> memFirstFit     equ 0   ;First free block goes to application
   287                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   288                              <1> memLastFit      equ 2   ;Last free block goes to application
   289                              <1> 
   290                              <1> ;Owner = Para aligned address => Owning application PSP
   291                              <1> ;...To consider...
   292                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   293                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   294                              <1> ;------------------------------------------------------------------------;
   295                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   296                              <1> ; following order, thus allowing for return values to be placed in the 
   297                              <1> ; registers by accessing the caller register stack frame.
   298                              <1> ;------------------------------------------------------------------------;
   299                              <1> struc callerFrame
   300 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   301 00000008 ????????????????    <1>     .rbx    dq ?    
   302 00000010 ????????????????    <1>     .rcx    dq ?
   303 00000018 ????????????????    <1>     .rdx    dq ?
   304 00000020 ????????????????    <1>     .rsi    dq ?
   305 00000028 ????????????????    <1>     .rdi    dq ?
   306 00000030 ????????????????    <1>     .rbp    dq ?
   307 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   308 00000040 ????????????????    <1>     .r9     dq ?
   309                              <1> ;Pushed by Processor when invoked via Interrupt
   310 00000048 ????????????????    <1>     .rip    dq ?
   311 00000050 ????????????????    <1>     .cs     dq ?
   312 00000058 ????????????????    <1>     .flags  dq ?
   313                              <1> endstruc
   314                              <1> 
   315                              <1> struc dpl
   316                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   317                              <1> ; server calls
   318 00000000 ????????????????    <1>     .rax    dq ?
   319 00000008 ????????????????    <1>     .rbx    dq ?
   320 00000010 ????????????????    <1>     .rcx    dq ?
   321 00000018 ????????????????    <1>     .rdx    dq ?
   322 00000020 ????????????????    <1>     .rsi    dq ?
   323 00000028 ????????????????    <1>     .rdi    dq ?
   324 00000030 ????????????????    <1>     .r8     dq ?
   325 00000038 ????????????????    <1>     .r9     dq ?
   326 00000040 ????????????????    <1>     .align  dq ?
   327 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   328 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   332 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   333 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   334 00000010 ????????????????    <1>     .newSFTVal      dq ?
   335 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   336 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   337 00000028 ????????????????    <1>     .newLastdrive   dq ?
   338 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   339 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   340 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   341 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   342 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   343 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   344 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   345                              <1> endstruc
   346                              <1> 
   347                              <1> struc filename
   348                              <1> ;8.3 File name struct
   349 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   350 00000008 ??????              <1>     .fExt   db 3 dup (?)
   351                              <1> endstruc
   352                              <1> 
   353                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   354 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   355 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   356 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   357 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   358 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   359 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   360 00000016 ????                <1>     .fileTime   dw ?  ;File time
   361 00000018 ????                <1>     .fileDate   dw ?  ;File date
   362 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   363 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   364                              <1> endstruc
   365                              <1> 
   366                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   367                              <1> struc psp
   368 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   369 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   370 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   371 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   372 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   373 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   374 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   375                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   376                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   377                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   378                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   379                              <1> ; always used and jftSize.
   380                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   381 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   382 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   383 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   384 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   385 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   386 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   387 0000005B ??                  <1>                 db ?  ;Reserved byte
   388                              <1> ;The below are in the same place as in DOS.
   389                              <1>     .cmdLineArgPtr: ;Symbol for future use
   390 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   391 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   392                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   393 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   394 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   395                              <1> endstruc
   396                              <1> 
   397                              <1> struc clkStruc
   398 00000000 ????                <1>     .dateWord   dw ?
   399 00000002 ??                  <1>     .minutes    db ?
   400 00000003 ??                  <1>     .hours      db ?
   401 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   402 00000005 ??                  <1>     .seconds    db ?
   403                              <1> endstruc
   404                              <1> 
   405                              <1> 
   406                              <1> struc extCtryStruc
   407 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   408 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   409 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   410 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   411 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   412                              <1>                         ;0 = month day year hh:mm:ss
   413                              <1>                         ;1 = day month year hh:mm:ss
   414                              <1>                         ;2 = year month day hh:mm:ss
   415 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   416 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   417 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   418 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   419 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   420 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   421                              <1>                         ;0 = Symbol leads, without space
   422                              <1>                         ;1 = Symbol follows, without space
   423                              <1>                         ;2 = Symbol leads, one space
   424                              <1>                         ;3 = Symbol follows, one space
   425                              <1>                         ;4 = Symbol replace decimal separator
   426 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   427 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   428 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   429 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   430 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   431                              <1> endstruc
   432                              <1> 
   433                              <1> struc countryStruc
   434 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   435                              <1>                         ;0 = month day year hh:mm:ss
   436                              <1>                         ;1 = day month year hh:mm:ss
   437                              <1>                         ;2 = year month day hh:mm:ss
   438 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   439 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   440 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   441 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   442 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   443 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   444                              <1>                         ;0 = Symbol leads, without space
   445                              <1>                         ;1 = Symbol follows, without space
   446                              <1>                         ;2 = Symbol leads, one space
   447                              <1>                         ;3 = Symbol follows, one space
   448                              <1>                         ;4 = Symbol replace decimal separator
   449 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   450 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   451 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   452 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   453 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   454                              <1> endstruc
   455                              <1> 
   456                              <1> ;Critical Error AH bitfield equates
   457                              <1> critRead    equ 0h
   458                              <1> critWrite   equ 1h
   459                              <1> critDOS     equ 0h
   460                              <1> critFAT     equ 2h
   461                              <1> critDir     equ 4h
   462                              <1> critData    equ 6h
   463                              <1> critFailOK  equ 8h
   464                              <1> critRetryOK equ 10h
   465                              <1> critIgnorOK equ 20h
   466                              <1> critCharDev equ 80h
   467                              <1> 
   468                              <1> critIgnore  equ 0
   469                              <1> critRetry   equ 1
   470                              <1> critAbort   equ 2
   471                              <1> critFail    equ 3
   472                              <1> 
   473                              <1> ;MISC ASCII control chars
   474                              <1> NUL equ 00h ;^@         | ASCII Null
   475                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   476                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   477                              <1> BEL equ 07h ;^G         | ASCII Bell
   478                              <1> BSP equ 08h ;^H         | ASCII Backspace
   479                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   480                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   481                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   482                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   483                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   484                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   485                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   486                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   487                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   488                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   489                              <1> SPC equ 20h ;Printable  | ASCII Space
   490                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   491                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   492                              <1> 
   493                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   494                              <1> ;Extended Ascii Codes
   495                              <1> eF1     equ 3Bh ;F1 second byte
   496                              <1> eF2     equ 3Ch ;F2 second byte
   497                              <1> eF3     equ 3Dh ;F3 second byte
   498                              <1> eF4     equ 3Eh ;F4 second byte
   499                              <1> eF5     equ 3Fh ;F5 second byte
   500                              <1> eF6     equ 40h ;F6 second byte
   501                              <1> eF7     equ 41h ;F7 second byte
   502                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   503                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   504                              <1> eIns    equ 52h ;Insert second byte
   505                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   506                              <1> 
   507                              <1> ;Default Configuration for the system
   508                              <1> 
   509                              <1> buffersDefault  equ 30
   510                              <1> filesDefault    equ 20
   511                              <1> fcbsDefault     equ 4
   512                              <1> safeFcbsDeflt   equ 0
   513                              <1> lastDriveDeflt  equ 5   
   514                              <1> 
   515                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   516                              <1> ; then the char has this property.
   517                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   518                              <1> termChar    equ 2   ;Terminator char type
   519                              <1> sepChar     equ 4   ;Separator char type
   520                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> errHdlEOF   equ 38  ;Handle reached EOF. Asked to return this error code
    46                              <1> errDskFul   equ 39  ;Disk full error! Hanlde asked to return this error code
    47                              <1> 
    48                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    49                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    50                              <1> 
    51                              <1> errFilExist equ 80  ;File already exists
    52                              <1> errDirExist equ 82  ;Directory already exists
    53                              <1> errFI24     equ 83  ;Fail on Int 24h
    54                              <1> errRedir    equ 84  ;Too many levels of redirection
    55                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    56                              <1> errBadPass  equ 86  ;Bad password
    57                              <1> errBadParam equ 87  ;Bad parameter passed to request
    58                              <1> errNetWrite equ 88  ;Network Write Fault
    59                              <1> ;-----------------------------------------------------------------------------
    60                              <1> ;Error Loci
    61                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    62                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    63                              <1> eLocNet     equ 3   ;Network related issues
    64                              <1> eLocChr     equ 4   ;Serial/Character Device error
    65                              <1> eLocMem     equ 5   ;Related to RAM
    66                              <1> ;-----------------------------------------------------------------------------
    67                              <1> ;Error Actions
    68                              <1> eActRet     equ 1   ;Retry
    69                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    70                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    71                              <1> eActAbt     equ 4   ;Abort with cleanup
    72                              <1> eActKil     equ 5   ;Abort without cleanup
    73                              <1> eActIgn     equ 6   ;Ignore error
    74                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    75                              <1> ;-----------------------------------------------------------------------------
    76                              <1> ;Error Classes
    77                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    78                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    79                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    80                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    81                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    82                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    83                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    84                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    85                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    86                              <1> eClsLocked  equ 10  ;Resource Locked
    87                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    88                              <1> eClsClash   equ 12  ;Resource already exists!
    89                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  %include "./src/Kernel/Debug/debSym.inc"    ;Always define debug symbols!
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> %define DEBUG       false
     7                              <1> %define DPBINFO     false
     8                              <1> %define REGS        false
     9                              <1> %define ENDSTATUS   false
    10                              <1> %define HEADERS     false
    11                              <1> 
    12                              <1> 
    13                              <1> ;Use this space as the debug stack
    14                              <1> %define debStackTop 80000h
    12                                  
    13                                  ;========================START OF DOS MODULE=========================
    14                                  %include "./src/Kernel/dos.inc"
     1                              <1> ;DOS globals
     2                              <1> 
     3                              <1> ; DOS variables for reloc computations in sysinit
     4                              <1> GLOBAL dSegLen  ;Exported for calculations with dosSeg
     5                              <1> 
     6                              <1> ; DOS DATA AREA variables
     7                              <1> GLOBAL nulDevHdr
     8                              <1> GLOBAL anchorMcb
     9                              <1> GLOBAL dayOfMonth
    10                              <1> GLOBAL monthOfYear
    11                              <1> GLOBAL vConPtr
    12                              <1> GLOBAL clockPtr
    13                              <1> GLOBAL currentPSP
    14                              <1> GLOBAL editKeys
    15                              <1> GLOBAL shareCount
    16                              <1> GLOBAL shareDelay
    17                              <1> GLOBAL caseMapFunc
    18                              <1> GLOBAL charTableArray
    19                              <1> GLOBAL charTableArray.ucTable
    20                              <1> GLOBAL charTableArray.filenameUCTable
    21                              <1> GLOBAL charTableArray.filenameTerminatingTable
    22                              <1> GLOBAL charTableArray.collatingTable
    23                              <1> GLOBAL charTableArray.dbcsTable
    24                              <1> GLOBAL serverDispTbl
    25                              <1> GLOBAL machineName
    26                              <1> GLOBAL critPtchTbl
    27                              <1> GLOBAL dosCrit1Enter
    28                              <1> GLOBAL dosCrit1Exit
    29                              <1> GLOBAL dosCrit2Enter
    30                              <1> GLOBAL dosCrit2Exit
    31                              <1> GLOBAL dosMgrHooks
    32                              <1> GLOBAL dllHooks
    33                              <1> GLOBAL shareHooks
    34                              <1> GLOBAL goodDfltShareHook
    35                              <1> GLOBAL badDfltShareHook
    36                              <1> GLOBAL dosBIOSName
    37                              <1> GLOBAL biosVers
    38                              <1> GLOBAL biosPtr
    39                              <1> GLOBAL bootDrive
    40                              <1> GLOBAL numFiles
    41                              <1> GLOBAL lastdrvNum
    42                              <1> GLOBAL firstSftHeader
    43                              <1> GLOBAL mcbChainPtr
    44                              <1> GLOBAL vConPtr
    45                              <1> GLOBAL clockPtr
    46                              <1> GLOBAL extKeyFunc
    47                              <1> GLOBAL errorDrv
    48                              <1> GLOBAL currentNdx
    49                              <1> GLOBAL switchChar
    50                              <1> GLOBAL ctryTbl
    51                              <1> GLOBAL serverDispTblPtr
    52                              <1> GLOBAL currentDTA
    53                              <1> GLOBAL cdsHeadPtr
    54                              <1> GLOBAL dpbHeadPtr
    55                              <1> GLOBAL maxBytesSec
    56                              <1> GLOBAL bufHeadPtr
    57                              <1> GLOBAL sftHeadPtr
    58                              <1> GLOBAL numBuffers
    59                              <1> GLOBAL fcbsHeadPtr
    60                              <1> GLOBAL numPhysVol
    61                              <1> 
    62                              <1> GLOBAL i0
    63                              <1> GLOBAL i1
    64                              <1> GLOBAL i2
    65                              <1> GLOBAL i3
    66                              <1> GLOBAL i4
    67                              <1> GLOBAL i5
    68                              <1> GLOBAL i6
    69                              <1> GLOBAL i7
    70                              <1> GLOBAL i8
    71                              <1> GLOBAL i9
    72                              <1> GLOBAL i10
    73                              <1> GLOBAL i11
    74                              <1> GLOBAL i12
    75                              <1> GLOBAL i13
    76                              <1> GLOBAL i14
    77                              <1> GLOBAL i15
    78                              <1> GLOBAL i16
    79                              <1> GLOBAL i17
    80                              <1> GLOBAL i18
    81                              <1> GLOBAL i19
    82                              <1> GLOBAL i20
    83                              <1> GLOBAL i21
    84                              <1> 
    85                              <1> GLOBAL terminateProcess 
    86                              <1> GLOBAL functionDispatch 
    87                              <1> GLOBAL defaultIretq
    88                              <1> GLOBAL dosDefCritErrHdlr    
    89                              <1> GLOBAL absDiskRead      
    90                              <1> GLOBAL absDiskWrite     
    91                              <1> GLOBAL terminateRes     
    92                              <1> GLOBAL multiplexHdlr
    93                              <1> GLOBAL nulStrat
    94                              <1> GLOBAL nulIntr
    15                                  
    16                                  Segment dBSS bss private align=1
    17                                  ;---------------------------
    18                                  ;   DOS BSS data segment
    19                                  ;---------------------------
    20                                  %include "./src/Kernel/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2 00000000 <res 10h>           <1>     anchorMcb   db mcb_size dup (?) ;This is space for the anchor MCB
     3                              <1> dosDataArea:    ;The returned pointer points to the variables w/o anchor MCB
     4 00000010 ??                  <1>     bootDrive   db ?    ;The logical drive we booted from
     5 00000011 ????????            <1>     biosVers    dd ?    ;Indicates BIOS type. Each OEM picks a number
     6 00000015 ????????????????    <1>     biosPtr     dq ?    ;For saving a data ptr to be used by BIOS/drivers
     7                              <1> ;Above is the system stats
     8                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM validNetNam TO NUMJOINDRV
     9                              <1> ;Both below variables can be edited with Int 21h AX=440Bh
    10 0000001D ????                <1>     validNetNam dw ?    ;Flag if machinename valid, deflt no=0
    11 0000001F ????                <1>     shareCount  dw ?    ;Share Retry Count, number of repeats before fail.
    12 00000021 ????                <1>     shareDelay  dw ?    ;Share Delay, in multiples of ms. (TEMP, just loop)
    13 00000023 ????????????????    <1>                 dq ?    ;Unused ptr for future, current disk buffer
    14 0000002B ????????????????    <1>     vConHdlOff  dq ?    ;Ptr into buff to the next char to process in hdl req
    15                              <1>     ;   A value of 0 means no chars buffered.
    16 00000033 ????????????????    <1>     mcbChainPtr dq ?    ;Pointer to the MCB chain x
    17                              <1> sysVarsPtr:
    18 0000003B ????????????????    <1>     dpbHeadPtr  dq ?    ;Pointer to the first DPB in the DPB chain x
    19 00000043 ????????????????    <1>     sftHeadPtr  dq ?    ;Pointer to the first SFT header in SFT chain
    20 0000004B ????????????????    <1>     clockPtr    dq ?    ;Pointer to the current active CLOCK$ device header x
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000053 ????????????????    <1>     vConPtr     dq ?    ;Ptr to the devdrv of the char dev controlling vCon x
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000005B ????                <1>     maxBytesSec dw ?    ;Maximum number of bytes per sector (size of buffers)x
    25 0000005D ????????????????    <1>     bufHeadPtr  dq ?    ;Pointer to the head of the disk buffer chain x
    26 00000065 ????????????????    <1>     cdsHeadPtr  dq ?    ;Pointer to the head of the CDS array x
    27 0000006D ????????????????    <1>     fcbsHeadPtr dq ?    ;Pointer to the head of the System FCB chain
    28 00000075 ????                <1>     numSafeSFCB dw ?    ;Number of protected FCBs (y in FCBS=x,y)
    29 00000077 ??                  <1>     numPhysVol  db ?    ;Number of physical volumes in the system x
    30 00000078 ??                  <1>     lastdrvNum  db ?    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    31 00000079 ??                  <1>     numBuffers  db ?    ;Buffers=30 default
    32 0000007A <res 22h>           <1>     nulDevHdr   db drvHdr_size dup (?)
    33 0000009C ??                  <1>     numJoinDrv  db ?    ;Number of Joined Drives
    34                              <1> ;Additional internal variables
    35 0000009D ??                  <1>     numFiles    db ?    ;FILES=5 default, max 255
    36                              <1>     ;DOSMGR hook functions and variable here
    37                              <1>     ;All DOSMGR hooks are 8 byte pointers and have been introduced to allow
    38                              <1>     ; an external application to install itself as a multitasker into the
    39                              <1>     ; DOS kernel. DOS's behaviour changes accordingly when a multitasker 
    40                              <1>     ; is installed. It is recommended that a multitasker NOT be installed
    41                              <1>     ; when a file sharing broker is not installed but that is up to the 
    42                              <1>     ; implementer to decide.  
    43                              <1>     ;Three function hooks are provided. NOTE, all functions must preserve
    44                              <1>     ; ALL registers used.
    45                              <1>     ;
    46                              <1>     ;launchTask:
    47                              <1>     ;This allows for a multitasker to install its handling routine for 
    48                              <1>     ; launching tasks. Note this is called after all setup
    49                              <1>     ; for the EXE has been done except for setting the PSP.
    50                              <1>     ; If the mode bSuFunc = 4, then we have we have the following:
    51                              <1>     ;       ecx = mode of termination
    52                              <1>     ;           = 00 -> Upon terminating, leave task in Zombie mode
    53                              <1>     ;                   awaiting for a task to read it's return code
    54                              <1>     ;           = 01 -> Upon terminating, discard all resources allocated
    55                              <1>     ;                   to the task.
    56                              <1>     ;           > 01 -> Error code, unknown function (01h).
    57                              <1>     ;This function must return to the caller via DOS with CF=CY if an error 
    58                              <1>     ;   and eax = Error code or CF=NC if all ok. DOS will then return to
    59                              <1>     ;   the parent task, with the background task hopefully scheduled to run
    60                              <1>     ;   in the DOSMGR.
    61                              <1>     ;Either before or on initial run, DOSMGR must set currentDTA in a bgTasks'
    62                              <1>     ; SDA to psp+80h. This can be done in launchBgTask.
    63                              <1>     ;
    64                              <1>     ;terminateTask:
    65                              <1>     ;This allows for a multitasker to install its handling routine for
    66                              <1>     ; cleaning up resources allocated to a task. 
    67                              <1>     ;
    68                              <1>     ;Specific function definitions:
    69                              <1>     ;
    70                              <1>     ;If we enter
    71                              <1>     ;   Input:  bx = FCB drive statuses
    72                              <1>     ;           ecx = Termination mode setting
    73                              <1>     ;           rsi = RSP value to start with
    74                              <1>     ;           rbp = execFrame. Use this to get parentPSP data et al.
    75                              <1>     ;           qword [rbp - execFrame.pProgEP] = RIP value to launch from
    76                              <1>     ;   Output: CF=NC -> Proceed with launch of bg task
    77                              <1>     ;           CF=CY -> Error exit, errorcode in eax
    78                              <1> dosMgrHooks:
    79 0000009E ??                  <1>     dosMgrPresent   db ?    ;Clear if no mgr, else set to -1
    80 0000009F ????????????????    <1>     launchTask      dq ?    ;Registers a new task, with specifics based on bSubfunc
    81 000000A7 ????????????????    <1>     terminateTask   dq ?    ;Called to tell the MGR that this task is ending
    82                              <1> 
    83                              <1>     ;DLL Manager hook functions here
    84                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    85                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    86                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    87                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    88                              <1>     ; and from within EXIT. 
    89                              <1>     ;
    90                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    91                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    92                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    93                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    94                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    95                              <1>     ; there is already an overlay there, to remove it's functions from the 
    96                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    97                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    98                              <1>     ; on EXIT, they can be removed from the registry. 
    99                              <1>     ;
   100                              <1>     ;In EXIT, the PSP of the ending task must be taken
   101                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
   102                              <1>     ; is a .COM file or an .EXE with no exports.
   103                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
   104                              <1>     ; it must return CF=CY.
   105                              <1> dllHooks:
   106 000000AF ????????????????    <1>     registerDLL     dq ?  ;Entered with rbp = execFrame
   107 000000B7 ????????????????    <1>     unloadDLLHook   dq ?  ;
   108                              <1> 
   109                              <1>     ;Share hook functions here
   110                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
   111                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
   112                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
   113                              <1> shareHooks:
   114 000000BF ????????????????    <1>     markerShare         dq ?  ;Marker Share hook
   115 000000C7 ????????????????    <1>     openShare           dq ?  ;Share called on open. 
   116 000000CF ????????????????    <1>     closeShare          dq ?  ;Share called on close.
   117 000000D7 ????????????????    <1>     closeCompShare      dq ?  ;Share to close all files for a machine.
   118 000000DF ????????????????    <1>     closeTaskShare      dq ?  ;Share to close all files for a task.
   119 000000E7 ????????????????    <1>     closeNameShare      dq ?  ;Share to close file by name.
   120 000000EF ????????????????    <1>     lockFileShare       dq ?  ;Share to lock file region.
   121 000000F7 ????????????????    <1>     unlockFileShare     dq ?  ;Share to unlock file region.
   122 000000FF ????????????????    <1>     checkFileLockShare  dq ?  ;Share to check file region locked.
   123 00000107 ????????????????    <1>     openFileListShare   dq ?  ;Share to get open file list entry.
   124 0000010F ????????????????    <1>     updateFCBfromSFTShr dq ?  ;Share to update FCB from the SFT.    UNUSED
   125 00000117 ????????????????    <1>     fstClstOfFCBShare   dq ?  ;Share to get first cluster of FCB.   UNUSED
   126 0000011F ????????????????    <1>     closeDupFileShare   dq ?  ;Share to close file if dup for proc.
   127 00000127 ????????????????    <1>     closeNewHdlShare    dq ?  ;Share to close hdls of rec opened file.
   128 0000012F ????????????????    <1>     updateDirShare      dq ?  ;Share to update dir info in SFT. 
   129                              <1> 
   130                              <1> ;Create SFT header and corresponding array of five default sft entries
   131 00000137 <res Ah>            <1>     firstSftHeader  db sfth_size dup (?)
   132 00000141 <res 4Fh>           <1>     firstSft        db sft_size dup (?)
   133 00000190 <res 4Fh>           <1>     secondSft       db sft_size dup (?)
   134 000001DF <res 4Fh>           <1>     thirdSft        db sft_size dup (?)
   135 0000022E <res 4Fh>           <1>     fourthSft       db sft_size dup (?)
   136 0000027D <res 4Fh>           <1>     fifthSft        db sft_size dup (?)
   137                              <1> 
   138                              <1> ;Virtual CONsole Buffers
   139 000002CC ??                  <1>     vConCursPos db ?     ;Keeps track for tabs stops (and var with 7)
   140                              <1>     ;Only incremented when CON device runs vCon
   141                              <1> vConBuf:    ;Proper buffer symbol
   142 000002CD ??                  <1>     vConCurCnt  db ?     ;Current count of chars in vConBuffer
   143 000002CE <res 80h>           <1>     vConBuffer  db 128 dup (?)   ;General Buffer for vCon 256 bytes. 
   144                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   145 0000034E <res 80h>           <1>     vConInBuf   db 128 dup (?)   ;vConsole buffer for reads ONLY
   146 000003CE ??                  <1>                 db ?     ;Padding Buffer!
   147                              <1> 
   148 000003CF ??                  <1>     printEcho   db ?  ;If 0, no echo. Non-zero => Echo to PRN
   149 000003D0 ??                  <1>     verifyFlag  db ?  ;If set, writes are replaces with write/verify x
   150 000003D1 ??                  <1>     switchChar  db ?  ;Editable by 21h/37h. Set to / by default
   151 000003D2 ??                  <1>     vConErr     db ?  ;Inc on each char output call
   152                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   153                              <1> 
   154 000003D3 ??                  <1>     allocStrat  db ?  ;Allocation strategy. First, Best or Last fit
   155                              <1> ;Server stuff. Default to all zeros (blank)
   156 000003D4 ??                  <1>     shareFlag   db ?  ;Sharing flag, set to 0 for now (future expansion)
   157                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   158 000003D5 ??                  <1>     serverCnt   db ?  ;Increments on each 21h/5E01h call
   159 000003D6 <res 10h>           <1>     machineName db 16 dup (?) ;Machine name (Set via 21h/5E01h) (set to SPC)    
   160                              <1> ;Swappable Data Area
   161 000003E6 <res 20h>           <1>     critPtchTbl dq 4 dup (?)  ;Offsets from DosDataArea addr to the 4 funcs
   162 00000406 ??                  <1>                 db ?  ;Alignment byte
   163                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   164 00000407 ??                  <1>     critErrFlag db ?  ;Critical error flag, set on entry to Int 24h x
   165 00000408 ??                  <1>     inDOS       db ?  ;Inc on each DOS call, dec when leaving x
   166 00000409 ??                  <1>     errorDrv    db ?  ;Drive on which error occured or FFh x
   167 0000040A ??                  <1>     errorLocus  db ?  ;Where the error took place  
   168 0000040B ????                <1>     errorExCde  dw ?  ;Extended Error Code
   169 0000040D ??                  <1>     errorAction db ?  ;Suggested action for error  
   170 0000040E ??                  <1>     errorClass  db ?  ;Error Class
   171 0000040F ????????????????    <1>     errorVolLbl dq ?    ;Sets a ptr to the volume label of the error disk
   172 00000417 ????????????????    <1>     currentDTA  dq ?  ;Address of the current DTA x
   173 0000041F ????????????????    <1>     currentPSP  dq ?  ;Address of current PSP x
   174                              <1> 
   175 00000427 ????????????????    <1>     xInt23hRSP  dq ?  ;Saves RSP across an Int 23h call
   176 0000042F ????                <1>     errorLevel  dw ?  ;Last return code returned by Int 21h/4Ch x
   177                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 21h/31h
   178                              <1>     ;Lower byte: User Specified
   179 00000431 ??                  <1>     currentDrv  db ?  ;Default drive x
   180 00000432 ??                  <1>     breakFlag   db ?  ;If set, check for CTRL+C on all DOS calls x
   181                              <1> ;SDA, needs to be replaced between processes
   182                              <1> sdaDOSSwap:
   183 00000433 ????????????????    <1>     oldRAX      dq ?  ;Store rax on entering Int21h or returning Int 23h
   184 0000043B ????????????????    <1>     serverPSP   dq ?  ;PSP of prog making server request, used by net & share
   185 00000443 ????                <1>     machineNum  dw ?  ;for sharing/networking 00h = default number (us)
   186 00000445 ????????????????    <1>     firstMCB    dq ?  ;First fit MCB for request
   187 0000044D ????????????????    <1>     bestMCB     dq ?  ;Best fit MCB for request
   188 00000455 ????????????????    <1>     lastMCB     dq ?  ;Last fit MCB for request
   189 0000045D ????                <1>     dirEntryNum dw ?  ;Offset into directory of entry we are looking for
   190 0000045F ??                  <1>     volIdFlag   db ?   ;If set, we are searching for a volume ID
   191 00000460 ????????????????    <1>     xInt24hRSP  dq ?  ;RSP across an Int 24h call
   192 00000468 ??                  <1>     Int24bitfld db ?  ;Copies the bit field given to the Int 24h handler
   193 00000469 ??                  <1>     fileDirFlag db ?  ;File/Directory flag. 0 = Dir, ¬0 = File
   194 0000046A ??                  <1>     Int24Fail   db ?  ;Set if Int 24h returned fail
   195                              <1> 
   196 0000046B ????????????????    <1>     oldoldRSP   dq ?  ;RSP at prev Int 21h entry if called from within Int 21h
   197 00000473 ????????????????    <1>     dosReturn   dq ?  ;Used as a var to return when juggling stack
   198 0000047B ????????????????    <1>     oldRSP      dq ?  ;RSP when entering Int 21h
   199 00000483 ????????????????    <1>     oldRBX      dq ?  ;Temp var to save value of rbx during an Int 21 call
   200 0000048B ??                  <1>     dirFlag     db ?  ;Directory Flag. 0 => Search for Dir, 1 => for File
   201                              <1> ;The below flag tells DOS to print ^C in the termination function
   202 0000048C ??                  <1>     ctrlCExit   db ?  ;-1 => CTRL+BREAK termination, 0 otherwise
   203 0000048D ??                  <1>     fcbSpaceOk  db ?  ;If set, we allow embedded spaces in the filenames
   204                              <1> ;Time stuff
   205                              <1> ;Read the below two as a word
   206 0000048E ??                  <1>     dayOfMonth  db ?  ;01h - 1Fh (1 - 31)
   207 0000048F ??                  <1>     monthOfYear db ?  ;01h - 0Ch (1 - 12)
   208 00000490 ??                  <1>     years       db ?  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   209 00000491 ????                <1>     daysOffset  dw ?  ;Days since 1-1-1980
   210 00000493 ??                  <1>     dayOfWeek   db ?  ;0 = Sunday <-> 6 = Saturday
   211                              <1> 
   212 00000494 ??                  <1>     vConDrvSwp  db ?  ;Set if vCon controlled by a different driver to vConPtr
   213 00000495 ??                  <1>     int28Flag   db ?  ;If set, Int 28h should be called, if clear no
   214 00000496 ??                  <1>     procExiting db ?  ;Set to -1 if in process termination
   215                              <1> ;A request routed through the FCB or handle uses primReqPkt for its main IO.
   216                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   217                              <1> ; without forcing to re-build the whole primary request block.
   218                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   219                              <1> ; with secondary char output going through the secondary header
   220                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   221                              <1> ; for output)
   222                              <1> ;ioReqPkt is the largest possible packet
   223 00000497 <res 2Ah>           <1>     secdReqPkt  db ioReqPkt_size dup (?) ;Secondary, Char IO Reqhdr
   224 000004C1 <res 2Ah>           <1>     primReqPkt  db ioReqPkt_size dup (?) ;Main Drv Reqhdr 
   225                              <1> altRet: ;Accessed as a qword
   226 000004EB <res 2Ah>           <1>     critReqPkt  db ioReqPkt_size dup (?)  ;Used for ^C detection!
   227 00000515 ??                  <1>     pspCopyFlg  db ?  ;Set to -1 for child process PSP, 0 for simple PSP copy
   228                              <1> ;Swappable Buffers
   229 00000516 ????????????        <1>     CLOCKrecrd  db 6 dup (?)  ;Clock driver record
   230                              <1>     ;We add an additional byte to save ah too
   231 0000051C ????                <1>     singleIObyt dw ?  ;For single IO byte buffers
   232                              <1> extErrByteBuf:  ;Used by DOS execpt hdlr to build strings. Immediate abort!
   233                              <1> exeHdrSpace:    ;This needs 112 bytes in EXEC only, buffer is free for use!
   234 0000051E <res 80h>           <1>     buffer1     db 2*MAX_FSPEC dup (?)  ;Space for max expanded MAX_FSPEC
   235                              <1> sectHdr:        ;This needs 20 bytes in EXEC only
   236 0000059E <res 80h>           <1>     buffer2     db 2*MAX_FSPEC dup (?) ;Space for a second path
   237 0000061E ????????????????    <1>     fname1Ptr   dq ?  ;Ptr to first filename argument
   238 00000626 ????????????????    <1>     fname2Ptr   dq ?  ;Ptr to second filename argument
   239 0000062E ??                  <1>     skipDisk    db ?  ;Set => Read Disk, Clear => Skip checking on disk
   240                              <1> ;Misc bookkeeping flags and vars
   241 0000062F <res 2Bh>           <1>     dosffblock  db ffBlock_size dup (?)  ;FF block (fullsize unlike DOS)
   242 0000065A <res 20h>           <1>     curDirCopy  db fatDirEntry_size dup (?)  ;Dir copy
   243 0000067A <res 5Fh>           <1>     tmpCDS      db cds_size dup (?)  ;For server calls that need a tmp CDS
   244                              <1> ;These two are used to expand filenames into FCB format. The extra char 
   245                              <1> ; is used to store the terminator of the portion (either a pathsep or null)
   246 000006D9 <res Ch>            <1>     fcbName     db MAX_NAME_FCBZ dup (?)
   247 000006E5 <res Ch>            <1>     wcdFcbName  db MAX_NAME_FCBZ dup (?)  ;Expands wildcards for rename
   248 000006F1 ????????????????    <1>     fileDirSect dq ?  ;File/Directory starting sector, for each level
   249 000006F9 ??                  <1>     volIncmpFCB db ?  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   250 000006FA ??                  <1>     extFCBAttr  db ?  ;Extended FCB file attribute
   251 000006FB ??                  <1>     extFCBFlag  db ?  ;Set to -1 if Extended FCB
   252 000006FC ??                  <1>     searchAttr  db ?  ;Directory Search attributes
   253 000006FD ??                  <1>     fileOpenMd  db ?  ;Open mode (compat, r/w/rw?)
   254                              <1> renSamePar:         ;Used in rename. Set if both paths have same parent dir
   255 000006FE ??                  <1>     fileFDflg   db ?  ;01h = File Found!, 04h = File deleted!
   256 000006FF ??                  <1>     badNameRen  db ?  ;Device name or File not found for rename
   257 00000700 ??                  <1>     rwFlag      db ?  ;00h=Read, 1=Write, read/write/share error reporting
   258 00000701 ??                  <1>     spliceFlag  db ?  ;00 = Relative path, !0 = Full path
   259 00000702 ??                  <1>     dosInvoke   db ?  ;0 = Invoked via Int 21h, -1 = Invoked via 21h/5D01h
   260                              <1> 
   261 00000703 ??                  <1>     vConInsert  db ?  ;Insert mode on 21/0ah (0 = not insert, !0 = insert)
   262 00000704 ??                  <1>     fileExist   db ?  ;-1 if file in pathspec exists (create/open)
   263 00000705 ??                  <1>     parDirExist db ?  ;-1 if parent directory for file exists (create/open)
   264 00000706 ??                  <1>     exitType    db ?  ;Forms the upper byte of the errorlvl
   265 00000707 ??                  <1>     openCreate  db ?  ;If open, set to 0, if Create set to -1
   266                              <1> ;Set to E5h for renaming and deletion. Can be set to 0 if *.* chosen
   267                              <1> ; to speed up the deletion but we don't use this (yet) as we would not 
   268                              <1> ; be releasing the FAT sectors of the remaining entries in the directory.
   269 00000708 ??                  <1>     delChar     db ?
   270 00000709 ??                  <1>     workingDrv  db ?  ;Working drive number, 0 based, from DPB
   271                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   272                              <1> workingDD:  ;Create a symbol for the working device driver too
   273 0000070A ????????????????    <1>     workingDPB  dq ?  ;Ptr to the DPB of the drive being accessed
   274 00000712 ????????????????    <1>     workingCDS  dq ?  ;Ptr to the CDS of the drive being accessed
   275 0000071A ????????????????    <1>     workingFCB  dq ?  ;Ptr to the caller FCB for FCB function
   276                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   277                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   278 00000722 ????????????????    <1>     workingSFT  dq ?  ;Temporary SFT (may not be not current) ptr being used
   279 0000072A ????????????????    <1>     curHdlPtr   dq ?  ;Ptr to JFT handle entry in current PSP
   280 00000732 ????????????????    <1>     currentSFT  dq ?  ;Ptr to the SFT of the file being accessed
   281 0000073A ????                <1>     currentNdx  dw ?  ;Used to access the current SFTNdx being opened/created
   282 0000073C ????                <1>     currentHdl  dw ?  ;The current file handle is saved here
   283 0000073E ????????????????    <1>     currBuff    dq ?  ;Ptr to the Current Buffer (hdr) being accessed
   284                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   285                              <1> ; and 32 byte offset into the sector for directory
   286 00000746 ????????????????    <1>     tempSect    dq ?  ;A scratch sector number
   287                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   288 0000074E ????                <1>     entry       dw ?  ;32 byte offset into a sector or #fats sectors/fat
   289                              <1> ;***************************************************|
   290                              <1> ; Needs to be set up before any file access         |
   291                              <1> ; These vars keep track of file access properties   |
   292                              <1> ;   and must be used only for such purposes.        |
   293                              <1> ;***************************************************|
   294 00000750 ????????            <1>     currClustF  dd ?  ;Relative cluster in file being r/w to/from
   295 00000754 ????????            <1>     currClustD  dd ?  ;Current Disk Cluster being r/w to/from
   296                              <1> 
   297 00000758 ????????            <1>     currSectF   dd ?  ;Current Sector in File being r/w to/from
   298 0000075C ??                  <1>     currSectC   db ?  ;Current Sector in Cluster being r/w to/from
   299 0000075D ????????????????    <1>     currSectD   dq ?  ;Current absolute Sector number on Disk
   300                              <1> 
   301 00000765 ????                <1>     currByteS   dw ?  ;Current Byte in sector being r/w to/from
   302 00000767 ????????            <1>     currByteF   dd ?  ;Current Byte in file being r/w to/from
   303                              <1> ;***************************************************|
   304 0000076B ????????            <1>     lastClust   dd ?  ;Number of the last (rel) cluster of the file
   305 0000076F ????????            <1>     lastClustA  dd ?  ;Number of the last (abs) cluster of file on disk
   306 00000773 ????????            <1>     tfrLen      dd ?  ;Number of bytes to transfer
   307 00000777 ????????            <1>     tfrCntr     dd ?  ;Number of bytes left to transfer
   308                              <1> ;Directory stuff
   309 0000077B ????????            <1>     dirClustPar dd ?  ;Absolute disk cluster of the start of the parent dir
   310 0000077F ????????            <1>     dirClustA   dd ?  ;Absolute cluster number of current directory
   311 00000783 ????                <1>     dirSect     dw ?  ;Sector of current directory cluster
   312 00000785 ????????            <1>     dirEntry    dd ?  ;32 byte offset in dir for file being searched for
   313                              <1> ;Error DPB 
   314 00000789 ????????????????    <1>     tmpDPBPtr   dq ?  ;A DPB for error/temporary situations
   315                              <1> ;No clash recycling below var as the vars in SDA are invalid if in CPU 
   316                              <1> ; exception hdlr. This var gets cleared on entry to the exception handler. 
   317                              <1> ;If it remains clear, the task will Abort. If it gets set, DOS or COMMAND.COM 
   318                              <1> ; caused CPU exception or we have an NMI. Then we freeze as we cant guarantee 
   319                              <1> ; anything anymore.
   320                              <1> haltDOS:
   321 00000791 ??                  <1>     mediaByte   db ?  ;Calls 1Bh and 1Ch return ptr to here
   322                              <1>     
   323 00000792 <res 2Bh>           <1>     renameFFBlk db ffBlock_size dup (?)  ;Source file "find first" block
   324 000007BD <res 20h>           <1>     renameDir   db fatDirEntry_size dup (?)  ;Build new file dir entry here
   325                              <1> ;Stacks and scratch SFT
   326 000007DD ??????              <1>     alignb  8
   327 000007E0 <res 528h>          <1>     critStack   dq 165 dup (?)
   328 00000D08 ????????????????    <1>     critStakTop dq ?
   329                              <1> 
   330 00000D10 <res 4Fh>           <1>     scratchSFT  db sft_size dup (?)  ;Used in FCB calls to emulate a SFT
   331                              <1>     
   332 00000D5F ??                  <1>     alignb  8
   333 00000D60 <res 638h>          <1>     AuxStack    dq 199 dup (?)
   334 00001398 ????????????????    <1>     AuxStakTop  dq ?  ;Auxilliary stack (Char IO, Int 25h/46h etc)
   335 000013A0 <res 638h>          <1>     DiskStack   dq 199 dup (?)
   336 000019D8 ????????????????    <1>     DiskStakTop dq ?
   337                              <1> 
   338 000019E0 ??                  <1>     lookahead   db ?  ;-1 => Lookahead on select Char function calls!
   339                              <1> ;Below is used in create and delete for vol lbl only. Else is -1.
   340 000019E1 ??                  <1>     rebuildDrv  db ?  ;Stores the drive letter of the dpb to reset.
   341                              <1>     sdaLen      equ     $ - sda 
   342                              <1>     sdaDOSLen   equ     $ - sdaDOSSwap
   343                              <1> 
   344                              <1> ;Additional variables NOT in the SDA
   345 000019E2 ????????????????    <1>     serverDispTblPtr    dq ?  ;DO NOT MOVE! Used to find server dispatch tbl
   346                              <1> ;A backup header to allow copying to for saving the current header when 
   347                              <1> ; quickly doing a second request
   348 000019EA <res 2Ah>           <1>     bkupReqHdr          db ioReqPkt_size dup (?)  
   349                              <1> ;Prevent toggling print if in the middle of reading an extended ASCII char
   350                              <1> inExtASCII:
   351 00001A14 ??                  <1>     noPrintTog  db ?  ;00 = Toggle as usual, 01 = Prevent toggle
   352 00001A15 ????                <1>     keybTicks   dw ?  ;Counts the number of cycles spent in a kb loop.
   353                              <1> ;Every time this overflows, we read the clock and update the DOS internal
   354                              <1> ; copy of the date/time record
   355                              <1> ;The idt doesnt need to be in the SDA as we will halt interrupts
   356                              <1> ; until we get/set the address. Thus the IDT entry returned is the 
   357                              <1> ; correct one AT the time of calling up to "the time it takes to get
   358                              <1> ; to the read IDT routine".
   359                              <1> dosIdtPtr:          ;21h/25h will always read a new copy of IDT here
   360 00001A17 ????                <1>     .limit  dw ?    ;Overlap this with stack below as no call overlap
   361 00001A19 ????????????????    <1>     .base   dq ?
   362                              <1> ;Lseek and IOCTL return data in registers as well as on the caller's 
   363                              <1> ; stack. In Int 2Fh, this could overwrite user data if the functions
   364                              <1> ; were allowed to write to original callers register stack. 
   365                              <1> ; So we have this structure below that is used by these functions to 
   366                              <1> ; write their "return" data onto a "stack", even though when accessed 
   367                              <1> ; through the multiplexer we never will read this structure. 
   368                              <1> ; Really only 4 qwords are needed (rax-rdx) but yaknow... safety
   369 00001A21 <res 60h>           <1>     mplxRegStack    db callerFrame_size dup (?) 
    21                                  dSegLen equ ($-$$)
    22                                  
    23                                  Segment dtext code private align=1 use64
    24                                  ;---------------------------
    25                                  ;       DOS segment
    26                                  ;---------------------------
    27                                  ;DOS main data/code seg. 
    28                                  ;No separation, as this is a single binary blob.
    29                                  %include "./src/Kernel/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5                              <1> ;Encode the true version number as a macro!
     6                              <1> ;This is to avoid mutability of the true number by obtaining a pointer to it.
     7                              <1> ;Initialise the reporting version number of DOS to the true version number
     8                              <1> dosMajor equ 0  ;Version 0
     9                              <1> dosMinor equ 99 ;.99
    10                              <1> ;Revision and version flags are a Byte at most.
    11                              <1> dosRev   equ 2  
    12                              <1> dosVerFlags equ 1   ;First proper testing of kernel (Beta)
    13                              <1> dosVerMac equ (dosMinor << 8) | dosMajor    ;DOS version macro
    14                              <1> 
    15 00000000 0063                <1> dosVersion  dw dosVerMac    ;DOS version number
    16 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    16 0000000B 535953              <1>
    17 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
    17 00000017 535953              <1>
    18                              <1> ;-----------------------------------:
    19                              <1> ;        Static Data Tables         :
    20                              <1> ;-----------------------------------:
    21                              <1> ;IO Char table
    22                              <1> ;This table has Request header length, command code and error flags
    23                              <1> ; as a packed DWORD entry
    24                              <1> ioRqCmdErrTbl:
    25                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    26                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    27 0000001A 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    28 0000001E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    29 00000022 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    30 00000026 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    31 0000002A 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    32 0000002E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    33                              <1> 
    34                              <1> 
    35                              <1> 
    36                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    37                              <1> ; wish to install their own custom logic. The table below is NOT patched
    38                              <1> ; but instead, the function below gets replaced. By default, it points to 
    39                              <1> ; the function editKeys in charFunc.asm. 
    40 00000032 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    41 0000003A 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    42 0000003B 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    43                              <1> ;Extended ASCII keys with special meanings
    44 0000003C 3B                  <1> extKeyTbl   db eF1
    45 0000003D 5E2D                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    46 0000003F 3C                  <1>             db eF2
    47 00000040 502D                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    48 00000042 3D                  <1>             db eF3
    49 00000043 572D                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    50 00000045 3E                  <1>             db eF4
    51 00000046 8C2D                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    52 00000048 3F                  <1>             db eF5
    53 00000049 D12D                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    54 0000004B 40                  <1>             db eF6
    55 0000004C E72D                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    56 0000004E 41                  <1>             db eF7
    57 0000004F EE2D                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    58 00000051 4B                  <1>             db eCursL
    59 00000052 B32C                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    60 00000054 4D                  <1>             db eCursR
    61 00000055 5E2D                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    62 00000057 52                  <1>             db eIns
    63 00000058 F92D                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    64 0000005A 53                  <1>             db eDel
    65 0000005B 002E                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    66                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    67                              <1> 
    68                              <1> ;When counting the number of days, first compute the number of years since
    69                              <1> ; 1980 and your year. 
    70                              <1> ;Then, using the table below, find the number of leap years between 1980
    71                              <1> ; and (YourYear - 1). 
    72                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    73                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    74                              <1> ;
    75                              <1> ;Use the months table to get the number of days in a normal month as leap 
    76                              <1> ; years are added using the previous comment.
    77                              <1> 
    78                              <1> ;This table is the number of days in the month
    79                              <1> ;The function which updates the days in Feb writes the number to this table
    80                              <1> monthsTbl:  
    81 0000005D 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    81 00000066 1F1E1F              <1>
    82                              <1> 
    83                              <1> ;Error tables
    84                              <1> hardXlatTbl:
    85                              <1> ;Hard error xlat table. Used so that it can be patched by 
    86                              <1> ; multitaskers and network tools as opposed to having a static
    87                              <1> ; conversion factor as was initially. Not extensible though (thats ok)
    88 00000069 13                  <1>     db errWpd       ;Attempt to write on write protected disk
    89 0000006A 14                  <1>     db errUnkUnt    ;Unknown Unit
    90 0000006B 15                  <1>     db errDrvNR     ;Drive not ready
    91 0000006C 16                  <1>     db errUnkCmd    ;Unknown Command
    92 0000006D 17                  <1>     db errCRCerr    ;Data (CRC) error
    93 0000006E 18                  <1>     db errBadRLn    ;Bad request structure length
    94 0000006F 19                  <1>     db errSekErr    ;Seek error
    95 00000070 1A                  <1>     db errUnkMed    ;Unknown media type
    96 00000071 1B                  <1>     db errSecNF     ;Sector not Found
    97 00000072 1C                  <1>     db errNoPap     ;Printer out of paper
    98 00000073 1D                  <1>     db errWF        ;Write fault
    99 00000074 1E                  <1>     db errRF        ;Read fault
   100 00000075 1F                  <1>     db errGF        ;General fault
   101                              <1>     ;The following two adjust for share errors
   102 00000076 1F                  <1>     db errGF        ;Sharing violations
   103 00000077 1F                  <1>     db errGF        ;File Lock violation
   104 00000078 22                  <1>     db errIDC       ;Invalid Disk Change
   105                              <1> hardXlatTblL equ $ - hardXlatTbl
   106                              <1> errXlatTbl:
   107                              <1> ;Each entry is n bytes long, defined as
   108                              <1> ; Byte 0      : DOS function number for which translation will occur
   109                              <1> ; Byte 1      : Length of the table entry - 2
   110                              <1> ; Bytes n - 3 : Acceptable Error codes
   111                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   112                              <1> ;The table is terminated with a single -1 byte
   113                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   114                              <1> ; only on entry to a disk function
   115 00000079 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   116 0000007D 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   117 00000082 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   118 00000088 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   119 0000008C 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   120 00000092 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   121 00000099 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   122 0000009C 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   123 000000A0 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   124 000000A4 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   125 000000A9 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   126 000000AD 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   127 000000B3 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   128 000000BA 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   129 000000BE 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   130 000000C2 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   131 000000C5 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   132 000000C9 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   133 000000CD 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   134 000000D2 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   135 000000DA 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   136 000000DC 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   137 000000E1 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   138 000000E4 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   139 000000EA 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   140 000000EE 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   141 000000F1 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   142 000000F7 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   143 000000FE 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   144 00000104 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   145 00000108 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   146 0000010C 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   147 00000111 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   148 00000114 69040F0D0105        <1>     db 69h, 04h, errBadDrv, errInvDat, errInvFnc, errAccDen ;Get/Set Disk Serial
   149 0000011A FF                  <1>     db -1   ;End Of Table marker
   150                              <1> 
   151                              <1> 
   152                              <1> extErrTbl:
   153                              <1> ;This table contains the default values for how to respond
   154                              <1> ; to particular errors. Fields with -1 need to be filled in before
   155                              <1> ; setting variables using this table.
   156                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   157                              <1> ; Byte 0: Extended Error Code as a byte
   158                              <1> ; Byte 1: Error Class
   159                              <1> ; Byte 2: Error Suggested Action
   160                              <1> ; Byte 3: Error Locus
   161                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   162                              <1> ;
   163                              <1> ;Error 01h: Invalid function number
   164 0000011B 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   165                              <1> ;Error 02h: File not found
   166 0000011F 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   167                              <1> ;Error 03h: Path not found
   168 00000123 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   169                              <1> ;Error 04h: Too many open handles, and no handles are left
   170 00000127 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   171                              <1> ;Error 05h: Access being denied
   172 0000012B 050303FF            <1>     db errAccDen, eClsAuth, eActUsr, -1
   173                              <1> ;Error 06h: Invalid File handle being provided
   174 0000012F 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   175                              <1> ;Error 07h: MCB chain destroyed
   176 00000133 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   177                              <1> ;Error 08h: No Memory remaining
   178 00000137 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   179                              <1> ;Error 09h: Invalid MCB block Address
   180 0000013B 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   181                              <1> ;Error 0Ah: Bad Environment block
   182 0000013F 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   183                              <1> ;Error 0Bh: Data provided in a bad format
   184 00000143 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   185                              <1> ;Error 0Ch: Access Code Invalid
   186 00000147 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   187                              <1> ;Error 0Dh: Error due to Invalid Data provided
   188 0000014B 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   189                              <1> ;Error 0Fh: Error due to a bad drive letter being provided
   190 0000014F 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   191                              <1> ;Error 10h: Error due to attempting to delete the CWD
   192 00000153 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   193                              <1> ;Error 11h: Error due to a unknown device being used
   194 00000157 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   195                              <1> ;Error 12h: No more file handles available
   196 0000015B 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   197                              <1> ;Error 50h: File already exits
   198 0000015F 500C0302            <1>     db errFilExist, eClsClash, eActUsr, eLocDsk
   199                              <1> ;Error 20h: Share Violation, Resource cannot be shared
   200 00000163 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   201                              <1> ;Error 21h: File Lock Violation
   202 00000167 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   203                              <1> ;Error 54h: Too many levels of redirection error
   204 0000016B 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   205                              <1> ;Error 56h: Bad resource password provided
   206 0000016F 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   207                              <1> ;Error 52h: Directory already exists
   208 00000173 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   209                              <1> ;Error 32h: Network request not supported by DOS
   210 00000177 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   211                              <1> ;Error 55h: Trying to duplicate a redirection for a resource
   212 0000017B 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   213                              <1> ;Error 57h: Bad parameter in request
   214 0000017F 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   215                              <1> ;Error 53h: Fail was returned from Int 24h
   216 00000183 530D0401            <1>     db errFI24, eClsUnk, eActAbt, eLocUnk
   217                              <1> ;Error 24h: Sharing Buffer Full
   218 00000187 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   219                              <1> ;Error 26h: Handle reached EOF on handle that reports EOF
   220 0000018B 26010401            <1>     db errHdlEOF, eClsOoR, eActAbt, eLocUnk
   221                              <1> ;Error 27h: Handle reached a full disk condition and asked to report this
   222 0000018F 27010401            <1>     db errDskFul, eClsOoR, eActAbt, eLocUnk
   223                              <1> ;Error XXh: Catch all case
   224 00000193 FFFFFFFF            <1>     dd -1
   225                              <1> 
   226                              <1> hardErrTbl:
   227                              <1> ;Same format as above, used for translating hard errors.
   228                              <1> ; Byte 0: Extended Error Code as a byte
   229                              <1> ; Byte 1: Error Class
   230                              <1> ; Byte 2: Error Suggested Action
   231                              <1> ; Byte 3: Error Locus
   232                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   233                              <1> ;
   234                              <1> ;DOS Error 19/Driver Error 0: Write Protect Error
   235 00000197 130B0702            <1>     db errWpd, eClsMedia, eActRetUsr, eLocDsk
   236                              <1> ;DOS Error 20/Driver Error 1: Unknown Unit
   237 0000019B 14040501            <1>     db errUnkUnt, eClsInt, eActKil, eLocUnk
   238                              <1> ;DOS Error 21/Driver Error 2: Drive not ready
   239 0000019F 150507FF            <1>     db errDrvNR, eClsHrdFlt, eActRetUsr, -1
   240                              <1> ;DOS Error 22/Driver Error 3: Unknown command
   241 000001A3 16040501            <1>     db errUnkCmd, eClsInt, eActKil, eLocUnk
   242                              <1> ;DOS Error 23/Driver Error 4: CRC (data integrity) error
   243 000001A7 170B0402            <1>     db errCRCerr, eClsMedia, eActAbt, eLocDsk
   244                              <1> ;DOS Error 24/Driver Error 5: Bad request length 
   245 000001AB 18040501            <1>     db errBadRLn, eClsInt, eActKil, eLocUnk
   246                              <1> ;DOS Error 25/Driver Error 6: Seek error
   247 000001AF 19050102            <1>     db errSekErr, eClsHrdFlt, eActRet, eLocDsk
   248                              <1> ;DOS Error 26/Driver Error 7: Unknown (non-DOS) medium
   249 000001B3 1A0B0702            <1>     db errUnkMed, eClsMedia, eActRetUsr, eLocDsk
   250                              <1> ;DOS Error 27/Driver Error 8: Sector not found
   251 000001B7 1B0B0402            <1>     db errSecNF, eClsMedia, eActAbt, eLocDsk
   252                              <1> ;DOS Error 28/Driver Error 9: Printer (or device) out of paper
   253 000001BB 1C020704            <1>     db errNoPap, eClsTS, eActRetUsr, eLocChr
   254                              <1> ;DOS Error 29/Driver Error 10: Write failure
   255 000001BF 1D0504FF            <1>     db errWF, eClsHrdFlt, eActAbt, -1
   256                              <1> ;DOS Error 30/Driver Error 11: Read failure
   257 000001C3 1E0504FF            <1>     db errRF, eClsHrdFlt, eActAbt, -1
   258                              <1> ;DOS Error 31/Driver Error 12: General failure
   259 000001C7 1F0D04FF            <1>     db errGF, eClsUnk, eActAbt, -1
   260                              <1> ;DOS Error 32: Share Violation, Resource cannot be shared
   261 000001CB 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   262                              <1> ;DOS Error 33: File Lock Violation
   263 000001CF 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   264                              <1> ;DOS Error 50: Network request not supported
   265 000001D3 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   266                              <1> ;DOS Error 35: FCB Unavailable
   267 000001D7 23070401            <1>     db errNoFCB, eClsAppFlt, eActAbt, eLocUnk
   268                              <1> ;DOS Error 36: Sharing buffer full, Can't share more files!
   269 000001DB 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   270                              <1> ;DOS Error XX: Catch all case for other hard errors
   271 000001DF FF0D05FF            <1>     db -1, eClsUnk, eActKil, -1
   272                              <1> 
   273                              <1> 
   274                              <1> ;Nationalisation stuff
   275                              <1> dosNLSPtr:      ;Symbol to point to the DOS internal NLS data
   276 000001E3 0000000000000000    <1> leadingZeros:   db 8 dup (0)    ;Unknown why they are 0 in DOS
   277 000001EB 5C434F554E5452592E- <1> defltCtry:      db "\COUNTRY.SYS", (64-12) dup (0) ;FQ Path to COUNTRY.SYS file
   277 000001F4 535953000000000000- <1>
   277 000001FD 000000000000000000- <1>
   277 00000206 000000000000000000- <1>
   277 0000020F 000000000000000000- <1>
   277 00000218 000000000000000000- <1>
   277 00000221 000000000000000000- <1>
   277 0000022A 00                  <1>
   278 0000022B B501                <1> defaultCP:      dw 437  ;Set to CP437 default
   279 0000022D 0600                <1> ctryFunctions:  dw 6    ;Support 6 extended functions: al=01,02,04,05,06,07
   280                              <1> charTableArray: ;All the qwords need fixing up here
   281                              <1> .ucTable:   ;Each table length is 9 bytes in length (except the last one)
   282 0000022F 02                  <1>     db 2
   283 00000230 [8902000000000000]  <1>     dq ucTblExt
   284                              <1> .filenameUCTable:
   285 00000238 04                  <1>     db 4
   286 00000239 [0B03000000000000]  <1>     dq fileUCTblExt
   287                              <1> .filenameTerminatingTable:
   288 00000241 05                  <1>     db 5
   289 00000242 [8D03000000000000]  <1>     dq fileTermTblExt
   290                              <1> .collatingTable:
   291 0000024A 06                  <1>     db 6
   292 0000024B [BD03000000000000]  <1>     dq collTblExt
   293                              <1> .dbcsTable:
   294 00000253 07                  <1>     db 7
   295 00000254 [BF04000000000000]  <1>     dq dbcsTblExt
   296                              <1> ;Extended country table
   297                              <1> extCtryTbl:
   298 0000025C 01                  <1>     db 1    ;infoIDCode (always 1), also matches function 1 value
   299                              <1>     ;Below: Length of structure (not including this word and above byte)
   300 0000025D 2A00                <1>     dw extCtryTblL
   301                              <1> .countryCode:
   302 0000025F 2C00                <1>     dw 044  ;Current (Active) Country ID (044 is UK)
   303                              <1> .activeCP:
   304 00000261 B501                <1>     dw 437  ;Current (Active) Code page (starts same as default)
   305                              <1> ;Regular country table
   306                              <1> ctryTbl:
   307                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
   308 00000263 0100                <1>     dw 1    ;Date format, UK style
   309 00000265 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
   310 0000026A 2C00                <1>     db ",",0    ;Thousand separator
   311 0000026C 2E00                <1>     db ".",0    ;Decimal separator
   312 0000026E 2D00                <1>     db "-",0    ;Date separator
   313 00000270 3A00                <1>     db ":",0    ;Time separator
   314 00000272 00                  <1>     db 0        ;Currency format, symbol leads with no space
   315 00000273 02                  <1>     db 2        ;Number of digits after decimal point
   316 00000274 00                  <1>     db 0        ;Time format, 12hr clock
   317 00000275 0000000000000000    <1>     dq 0        ;Map to function that does UC conversions
   318 0000027D 2C00                <1>     db ",",0    ;Data list separator
   319 0000027F 000000000000000000- <1>     db 10 dup (0)
   319 00000288 00                  <1>
   320                              <1> extCtryTblL equ $ - extCtryTbl.countryCode
   321                              <1> 
   322                              <1> ucTblExt:   ;External pointer to the uppercase table
   323 00000289 8000                <1>     dw 80h
   324                              <1> ucTbl:    ;Internal ptr, used by casemapfunc
   325 0000028B 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   326 00000293 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   327 0000029B 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   328 000002A3 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   329 000002AB 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   330 000002B3 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   331 000002BB B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   332 000002C3 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   333 000002CB C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   334 000002D3 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   335 000002DB D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   336 000002E3 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   337 000002EB E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   338 000002F3 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   339 000002FB F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   340 00000303 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   341                              <1> 
   342                              <1> fileUCTblExt:   ;External ptr to the uc table for filenames
   343 0000030B 8000                <1>     dw 80h
   344                              <1> fileUCTbl:    ;Internal ptr, used to convert pathspecs correctly
   345 0000030D 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   346 00000315 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   347 0000031D 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   348 00000325 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   349 0000032D 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   350 00000335 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   351 0000033D B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   352 00000345 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   353 0000034D C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   354 00000355 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   355 0000035D D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   356 00000365 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   357 0000036D E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   358 00000375 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   359 0000037D F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   360 00000385 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   361                              <1> 
   362                              <1> fileTermTblExt:
   363 0000038D 1600                <1>     dw filenameTermTblExt_len - 2   ;Length not including this word
   364 0000038F 01                  <1>     db 1    ;Signature byte for the table (1)
   365 00000390 00                  <1>     db 0    ;Lowest permissible char value for filename
   366 00000391 FF                  <1>     db -1   ;Highest permissible char value for filename
   367 00000392 00                  <1>     db 0    ;Signature byte for DOS 3.3 (0)
   368                              <1> .startBadRange:
   369 00000393 00                  <1>     db 0    ;Start of the illegal range of filename chars
   370                              <1> .endBadRange:
   371 00000394 20                  <1>     db 20h  ;End of the illegal range of filename chars (inclusive)
   372 00000395 02                  <1>     db 2    ;Signature byte for DOS 3.3 (2)
   373                              <1> fileTermTbl:
   374 00000396 0E                  <1>     db fileTermTbl_len - 1 ;Length of the table below
   375 00000397 2E222F5C5B5D        <1>     db ".", '"', "/", "\", "[", "]", 
   376 0000039D 3A7C3C3E2B3D3B2C    <1>     db ":", "|", "<",">","+","=",";",","
   377                              <1>     fileTermTbl_len equ $ - fileTermTbl
   378                              <1>     filenameTermTblExt_len equ $ - fileTermTblExt
   379                              <1>     ;Buffer space
   380 000003A5 000000000000000000- <1>     db 24 dup (0) ;DOS 3.30 has this buffer present
   380 000003AE 000000000000000000- <1>
   380 000003B7 000000000000        <1>
   381                              <1> 
   382                              <1> collTblExt:  ;Collating sequence table, for sorting
   383 000003BD 0001                <1>     dw 0100h
   384                              <1> collTbl:
   385 000003BF 0001020304050607    <1>     db 000h, 001h, 002h, 003h, 004h, 005h, 006h, 007h
   386 000003C7 08090A0B0C0D0E0F    <1>     db 008h, 009h, 00Ah, 00Bh, 00Ch, 00Dh, 00Eh, 00Fh
   387 000003CF 1011121314151617    <1>     db 010h, 011h, 012h, 013h, 014h, 015h, 016h, 017h
   388 000003D7 18191A1B1C1D1E1F    <1>     db 018h, 019h, 01Ah, 01Bh, 01Ch, 01Dh, 01Eh, 01Fh
   389 000003DF 2021222324252627    <1>     db 020h, 021h, 022h, 023h, 024h, 025h, 026h, 027h
   390 000003E7 28292A2B2C2D2E2F    <1>     db 028h, 029h, 02Ah, 02Bh, 02Ch, 02Dh, 02Eh, 02Fh
   391 000003EF 3031323334353637    <1>     db 030h, 031h, 032h, 033h, 034h, 035h, 036h, 037h
   392 000003F7 38393A3B3C3D3E3F    <1>     db 038h, 039h, 03Ah, 03Bh, 03Ch, 03Dh, 03Eh, 03Fh
   393 000003FF 4041424344454647    <1>     db 040h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   394 00000407 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   395 0000040F 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   396 00000417 58595A5B5C5D5E5F    <1>     db 058h, 059h, 05Ah, 05Bh, 05Ch, 05Dh, 05Eh, 05Fh
   397 0000041F 6041424344454647    <1>     db 060h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   398 00000427 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   399 0000042F 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   400 00000437 58595A7B7C7D7E7F    <1>     db 058h, 059h, 05Ah, 07Bh, 07Ch, 07Dh, 07Eh, 07Fh
   401 0000043F 4355454141414143    <1>     db 043h, 055h, 045h, 041h, 041h, 041h, 041h, 043h
   402 00000447 4545454949494141    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 041h, 041h
   403 0000044F 4541414F4F4F5555    <1>     db 045h, 041h, 041h, 04Fh, 04Fh, 04Fh, 055h, 055h
   404 00000457 594F552424242424    <1>     db 059h, 04Fh, 055h, 024h, 024h, 024h, 024h, 024h
   405 0000045F 41494F554E4EA6A7    <1>     db 041h, 049h, 04Fh, 055h, 04Eh, 04Eh, 0A6h, 0A7h
   406 00000467 3FA9AAABAC212222    <1>     db 03Fh, 0A9h, 0AAh, 0ABh, 0ACh, 021h, 022h, 022h
   407 0000046F B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   408 00000477 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   409 0000047F C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   410 00000487 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   411 0000048F D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   412 00000497 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   413 0000049F E053E2E3E4E5E6E7    <1>     db 0E0h, 053h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   414 000004A7 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   415 000004AF F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   416 000004B7 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   417                              <1> 
   418                              <1> dbcsTblExt:
   419 000004BF 0600                <1>     dw 6    ;Length of the DBCS table. Doesn't exceed 6 bytes.
   420                              <1> dbcsTbl:
   421                              <1> ;The default DBCS table for our CP is just zeros.
   422                              <1> ;COUNTRY can change this.
   423 000004C1 000000000000        <1>     db 6 dup (0)
   424                              <1> 
   425                              <1> asciiCharProperties:   ;This table is const. Gives "properties" of chars.
   426                              <1> ;Bit[0]=Clear if the char is an invalid filename character.
   427                              <1> ;Bit[1]=Clear if the char of a terminating type.
   428                              <1> ;Bit[2]=Clear if the char is of separator type.
   429                              <1> ;Bit[3]=Clear if the char is an invalid FCB name character.
   430                              <1> ;Bit[4-7]=Unused.    
   431                              <1> 
   432 000004C7 F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 00h-07h
   433 000004CF F6F0F6F6F6F6F6F6    <1>     db 0F6h, 0F0h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 08h-0Fh
   434 000004D7 F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 10h-17h
   435 000004DF F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 18h-1Fh
   436 000004E7 F8FFF6FFFFFFFFFF    <1>     db 0F8h, 0FFh, 0F6h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 20h-27h
   437 000004EF FFFFFFF4F4FFFEF6    <1>     db 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h   ;Chars 28h-2Fh
   438 000004F7 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 30h-37h
   439 000004FF FFFFF4F4F4F4F4FF    <1>     db 0FFh, 0FFh, 0F4h, 0F4h, 0F4h, 0F4h, 0F4h, 0FFh   ;Chars 38h-3Fh
   440 00000507 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 40h-47h
   441 0000050F FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 48h-4Fh
   442 00000517 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 50h-57h
   443 0000051F FFFFFFF6F6F6FFFF    <1>     db 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh   ;Chars 58h-5Fh
   444 00000527 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 60h-67h
   445 0000052F FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 68h-6Fh
   446 00000537 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 70h-77h
   447 0000053F FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   ;Chars 78h-7Fh
   448 00000547 FFFFFFFFFFFFFFFFFF- <1>     db 128 dup (0FFh)                                   ;Chars 80h-100h
   448 00000550 FFFFFFFFFFFFFFFFFF- <1>
   448 00000559 FFFFFFFFFFFFFFFFFF- <1>
   448 00000562 FFFFFFFFFFFFFFFFFF- <1>
   448 0000056B FFFFFFFFFFFFFFFFFF- <1>
   448 00000574 FFFFFFFFFFFFFFFFFF- <1>
   448 0000057D FFFFFFFFFFFFFFFFFF- <1>
   448 00000586 FFFFFFFFFFFFFFFFFF- <1>
   448 0000058F FFFFFFFFFFFFFFFFFF- <1>
   448 00000598 FFFFFFFFFFFFFFFFFF- <1>
   448 000005A1 FFFFFFFFFFFFFFFFFF- <1>
   448 000005AA FFFFFFFFFFFFFFFFFF- <1>
   448 000005B3 FFFFFFFFFFFFFFFFFF- <1>
   448 000005BC FFFFFFFFFFFFFFFFFF- <1>
   448 000005C5 FFFF                <1>
    30                                  %include "./src/Kernel/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 000005C7 CA58                <1>     dw simpleTerminate - kDispTbl       ;AH = 00H, PROCESS MANAGEMENT
     5 000005C9 9721                <1>     dw charIn_BE - kDispTbl             ;AH = 01H, CHAR IO
     6 000005CB A421                <1>     dw charOut_B - kDispTbl             ;AH = 02H, CHAR IO
     7 000005CD 7A22                <1>     dw auxIn_B - kDispTbl               ;AH = 03H, CHAR IO
     8 000005CF A422                <1>     dw auxOut_B - kDispTbl              ;AH = 04H, CHAR IO
     9 000005D1 AC22                <1>     dw prnOut_B - kDispTbl              ;AH = 05H, CHAR IO
    10 000005D3 C422                <1>     dw directConIO - kDispTbl           ;AH = 06H, CHAR IO
    11 000005D5 F822                <1>     dw charIn - kDispTbl                ;AH = 07H, CHAR IO
    12 000005D7 1E23                <1>     dw charIn_B - kDispTbl              ;AH = 08H, CHAR IO
    13 000005D9 7D23                <1>     dw printString_B - kDispTbl         ;AH = 09H, CHAR IO
    14 000005DB 3626                <1>     dw buffCharInput_BE - kDispTbl      ;AH = 0AH, CHAR IO
    15 000005DD 8D23                <1>     dw checkStdinStatus - kDispTbl      ;AH = 0BH, CHAR IO
    16 000005DF 9A23                <1>     dw clearbuffDoFunc - kDispTbl       ;AH = 0CH, CHAR IO
    17 000005E1 3B75                <1>     dw diskReset - kDispTbl             ;AH = 0DH, DISK MANAGEMENT
    18 000005E3 6F75                <1>     dw selectDisk - kDispTbl            ;AH = 0EH, DISK MANAGEMENT
    19 000005E5 132E                <1>     dw openFileFCB - kDispTbl           ;AH = 0FH, FILE OPERATION       FCB
    20 000005E7 862E                <1>     dw closeFileFCB - kDispTbl          ;AH = 10H, FILE OPERATION       FCB
    21 000005E9 AE2B                <1>     dw findFirstFileFCB - kDispTbl      ;AH = 11H, FILE OPERATION       FCB
    22 000005EB 6A2C                <1>     dw findNextFileFCB - kDispTbl       ;AH = 12H, FILE OPERATION       FCB
    23 000005ED F12C                <1>     dw deleteFileFCB - kDispTbl         ;AH = 13H, FILE OPERATION       FCB
    24 000005EF 9D2E                <1>     dw sequentialReadFCB - kDispTbl     ;AH = 14H, RECORD OPERATION     FCB
    25 000005F1 9D2E                <1>     dw sequentialWriteFCB - kDispTbl    ;AH = 15H, RECORD OPERTAION     FCB
    26 000005F3 132E                <1>     dw createFileFCB - kDispTbl         ;AH = 16H, FILE OPERATION       FCB
    27 000005F5 202D                <1>     dw renameFileFCB - kDispTbl         ;AH = 17H, FILE OPERATION       FCB
    28 000005F7 1F78                <1>     dw noOp - kDispTbl                  ;AH = 18H, RESERVED
    29 000005F9 8875                <1>     dw getCurrentDisk - kDispTbl        ;AH = 19H, DISK MANAGEMENT
    30 000005FB DE2D                <1>     dw setDTA - kDispTbl                ;AH = 1AH, RECORD OPERATION     F/H
    31 000005FD 8F75                <1>     dw FATinfoDefault - kDispTbl        ;AH = 1BH, DISK MANAGEMENT
    32 000005FF 9175                <1>     dw FATinfoDevice - kDispTbl         ;AH = 1CH, DISK MANAGEMENT
    33 00000601 1F78                <1>     dw noOp - kDispTbl                  ;AH = 1DH, RESERVED
    34 00000603 1F78                <1>     dw noOp - kDispTbl                  ;AH = 1EH, RESERVED
    35 00000605 3E76                <1>     dw getCurrentDPBptr - kDispTbl      ;AH = 1FH, INTERNAL, GET CURR DRIVE DPB PTR
    36 00000607 1F78                <1>     dw noOp - kDispTbl                  ;AH = 20H, RESERVED
    37 00000609 9D2E                <1>     dw randomReadFCB - kDispTbl         ;AH = 21H, RECORD OPERATION     FCB
    38 0000060B 9D2E                <1>     dw randomWriteFCB - kDispTbl        ;AH = 22H, RECORD OPERATION     FCB
    39 0000060D 8B2D                <1>     dw getFileSizeFCB - kDispTbl        ;AH = 23H, FILE OPERATION       FCB
    40 0000060F 9D2E                <1>     dw setRelRecordFCB - kDispTbl       ;AH = 24H, RECORD OPERATION     FCB
    41 00000611 DA75                <1>     dw setIntVector - kDispTbl          ;AH = 25H, MISC. SYS. FUNCTION
    42 00000613 CF57                <1>     dw copyPSP - kDispTbl               ;AH = 26H, PROCESS MANAGEMENT
    43 00000615 9D2E                <1>     dw randBlockReadFCB - kDispTbl      ;AH = 27H, RECORD OPERATION     FCB
    44 00000617 9D2E                <1>     dw randBlockWriteFCB - kDispTbl     ;AH = 28H, RECORD OPERATION     FCB
    45 00000619 042E                <1>     dw parseFilenameFCB - kDispTbl      ;AH = 29H, FILE OPERATION       FCB
    46 0000061B BC28                <1>     dw getDate - kDispTbl               ;AH = 2AH, TIME AND DATE
    47 0000061D E928                <1>     dw setDate - kDispTbl               ;AH = 2BH, TIME AND DATE
    48 0000061F F928                <1>     dw getTime - kDispTbl               ;AH = 2CH, TIME AND DATE
    49 00000621 1A29                <1>     dw setTime - kDispTbl               ;AH = 2DH, TIME AND DATE
    50 00000623 0476                <1>     dw setResetVerify - kDispTbl        ;AH = 2EH, DISK MANAGEMENT
    51 00000625 F12D                <1>     dw getDTA - kDispTbl                ;AH = 2FH, RECORD OPERATION     F/H
    52 00000627 1276                <1>     dw getDOSversion - kDispTbl         ;AH = 30H, MISC. SYS. FUNCTION
    53 00000629 9C58                <1>     dw terminateStayRes - kDispTbl      ;AH = 31H, PROCESS MANAGEMENT
    54 0000062B 4076                <1>     dw getDeviceDPBptr - kDispTbl       ;AH = 32H, INTERNAL, GET DEVICE DPB PTR
    55 0000062D A874                <1>     dw cbcServer - kDispTbl             ;AH = 33H, MISC. SYS. FUNCTION
    56 0000062F 7876                <1>     dw getInDOSflagPtr - kDispTbl       ;AH = 34H, GET PTR TO INDOS FLAG
    57 00000631 8976                <1>     dw getIntVector - kDispTbl          ;AH = 35H, MISC. SYS. FUNCTION
    58 00000633 9876                <1>     dw getDiskFreeSpace - kDispTbl      ;AH = 36H, DISK MANAGEMENT
    59 00000635 5E61                <1>     dw getsetSwitchChar - kDispTbl      ;AH = 37H, INTERNAL, CHANGE SWITCH CHAR
    60 00000637 8761                <1>     dw getsetCountryInfo - kDispTbl     ;AH = 38H, MISC. SYS. FUNCTION
    61 00000639 9D17                <1>     dw makeDIR - kDispTbl               ;AH = 39H, DIRECTORY OPERATION
    62 0000063B 1E1A                <1>     dw removeDIR - kDispTbl             ;AH = 3AH, DIRECTORY OPERATION
    63 0000063D 141C                <1>     dw setCurrentDIR - kDispTbl         ;AH = 3BH, DIRECTORY OPERATION
    64 0000063F 9F30                <1>     dw createFileHdl - kDispTbl         ;AH = 3CH, FILE OPERATION       HANDLE
    65 00000641 B030                <1>     dw openFileHdl - kDispTbl           ;AH = 3DH, FILE OPERATION       HANDLE
    66 00000643 F131                <1>     dw closeFileHdl - kDispTbl          ;AH = 3EH, FILE OPERATION       HANDLE
    67 00000645 2F32                <1>     dw readFileHdl - kDispTbl           ;AH = 3FH, RECORD OPERATION     HANDLE
    68 00000647 6A32                <1>     dw writeFileHdl - kDispTbl          ;AH = 40H, RECORD OPERATION     HANDLE
    69 00000649 7632                <1>     dw deleteFileHdl - kDispTbl         ;AH = 41H, FILE OPERATION       HANDLE
    70 0000064B DB32                <1>     dw lseekHdl - kDispTbl              ;AH = 42H, RECORD OPERATION     HANDLE
    71 0000064D 4C33                <1>     dw changeFileModeHdl - kDispTbl     ;AH = 43H, FILE OPERATION       HANDLE
    72 0000064F 5E4D                <1>     dw ioctrl - kDispTbl                ;AH = 44H, MISC. SYS. FUNCTION  HANDLE
    73 00000651 6A34                <1>     dw duplicateHandle - kDispTbl       ;AH = 45H, FILE OPERATION       HANDLE
    74 00000653 AA34                <1>     dw forceDuplicateHdl - kDispTbl     ;AH = 46H, FILE OPERATION       HANDLE
    75 00000655 9C1D                <1>     dw getCurrentDIR - kDispTbl         ;AH = 47H, DIRECTORY OPERATION
    76 00000657 5C52                <1>     dw allocateMemory - kDispTbl        ;AH = 48H, MEMORY MANAGEMENT
    77 00000659 6054                <1>     dw freeMemory - kDispTbl            ;AH = 49H, MEMORY MANAGEMENT
    78 0000065B 6855                <1>     dw reallocMemory - kDispTbl         ;AH = 4AH, MEMORY MANAGEMENT
    79 0000065D 285A                <1>     dw loadExecChild - kDispTbl         ;AH = 4BH, PROCESS MANAGEMENT
    80 0000065F CC58                <1>     dw terminateClean - kDispTbl        ;AH = 4CH, PROCESS MANAGEMENT
    81 00000661 DC76                <1>     dw getRetCodeChild - kDispTbl       ;AH = 4DH, PROCESS MANAGEMENT
    82 00000663 BF34                <1>     dw findFirstFileHdl - kDispTbl      ;AH = 4EH, FILE OPERATION       HANDLE
    83 00000665 2A35                <1>     dw findNextFileHdl - kDispTbl       ;AH = 4FH, FILE OPERATION       HANDLE
    84 00000667 0675                <1>     dw scpspServer - kDispTbl           ;AH = 50H, INTERNAL, SET CURRENT PROCESS ID
    85 00000669 1575                <1>     dw gcpspServer - kDispTbl           ;AH = 51H, INTERNAL, GET CURRENT PROCESS ID
    86 0000066B EA76                <1>     dw getSysVarsPtr - kDispTbl         ;AH = 52H, INTERNAL, GET SYSVARS POINTER
    87 0000066D FB76                <1>     dw createDPB - kDispTbl             ;AH = 53H, INTERNAL, TRANSLATE A BPB TO DPB
    88 0000066F E577                <1>     dw getVerifySetting - kDispTbl      ;AH = 54H, DISK MANAGEMENT
    89 00000671 BC57                <1>     dw createPSP - kDispTbl             ;AH = 55H, INTERNAL, CREATE PSP
    90 00000673 5A35                <1>     dw renameFile - kDispTbl            ;AH = 56H, FILE OPERATION       HANDLE
    91 00000675 E635                <1>     dw getSetFileDateTime - kDispTbl    ;AH = 57H, FILE OPERATION       HANDLE
    92 00000677 1057                <1>     dw getsetMallocStrat - kDispTbl     ;AH = 58H, MEMORY MANAGEMENT
    93 00000679 EC77                <1>     dw getExtendedError - kDispTbl      ;AH = 59H, MISC. SYS. FUNCTION
    94 0000067B 5636                <1>     dw createUniqueFile - kDispTbl      ;AH = 5AH, FILE OPERATION       HANDLE
    95 0000067D 1E37                <1>     dw createNewFile - kDispTbl         ;AH = 5BH, FILE OPERATION       HANDLE
    96 0000067F 3237                <1>     dw lockUnlockFile - kDispTbl        ;AH = 5CH, RECORD OPERATION     HANDLE
    97 00000681 D578                <1>     dw dosServer - kDispTbl             ;AH = 5DH, INTERNAL, SERVER ACTIONS
    98 00000683 977A                <1>     dw netServices - kDispTbl           ;AH = 5EH, NETWORK FUNCTIONS
    99 00000685 FD7A                <1>     dw netRedir - kDispTbl              ;AH = 5FH, NETWORK FUNCTIONS
   100 00000687 111E                <1>     dw trueName - kDispTbl              ;AH = 60H, INTERNAL, GET TRUE NAME
   101 00000689 2078                <1>     dw systemServices - kDispTbl        ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 0000068B 1575                <1>     dw gcpspServer - kDispTbl           ;AH = 62H, PROCESS MANAGEMENT
   103 0000068D 1F78                <1>     dw noOp - kDispTbl                  ;AH = 63H, RESERVED
   104 0000068F 3375                <1>     dw sdlServer - kDispTbl             ;AH = 64H, INTERNAL, DRIVER LOOKAHEAD
   105 00000691 2062                <1>     dw getExtLocalInfo - kDispTbl       ;AH = 65H, MISC. SYS. FUNCTION
   106 00000693 7063                <1>     dw getsetGlobalCP - kDispTbl        ;AH = 66H, MISC. SYS. FUNCTION
   107 00000695 9E37                <1>     dw setHandleCount - kDispTbl        ;AH = 67H, FILE OPERAITON       F/H
   108 00000697 DC38                <1>     dw commitFile - kDispTbl            ;AH = 68H, FILE OPERATION       HANDLE
   109 00000699 A778                <1>     dw getsetDiskSerial - kDispTbl      ;AH = 69H, INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 0000069B 30                  <1>     db mDispTblL/2  ;Number of entries in table
   114 0000069C D97A                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   115 0000069E D441                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   116 000006A0 0A6E                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   117 000006A2 DC7A                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   118 000006A4 596F                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   119 000006A6 D220                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   120 000006A8 1E64                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   121 000006AA 7800                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   122 000006AC 444C                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   123 000006AE 7901                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   124 000006B0 427C                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   125 000006B2 B07B                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   126 000006B4 583E                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   127 000006B6 C72A                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   128 000006B8 B300                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   129 000006BA CD00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   130 000006BC DB00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   131 000006BE D46F                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   132 000006C0 B56F                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   133 000006C2 656F                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   134 000006C4 EF70                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   135 000006C6 4A01                <1>     dw flushAndCleanBuffer - mDispTbl   ;AX=1215h
   136 000006C8 684B                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   137 000006CA 276F                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   138 000006CC 386E                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   139 000006CE CC6E                <1>     dw getCDS - mDispTbl    ;AX=1219h
   140 000006D0 710E                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   141 000006D2 5A2A                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   142 000006D4 307B                <1>     dw mpxChecksum - mDispTbl  ;AX=121Ch -> Checksum memory
   143 000006D6 3D7B                <1>     dw mpxSum - mDispTbl  ;AX=121Dh -> Sum Memory
   144 000006D8 ED6F                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   145 000006DA 766E                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   146 000006DC 9D4B                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   147 000006DE 331D                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   148 000006E0 6773                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   149 000006E2 3516                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   150 000006E4 8C7B                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   151 000006E6 AA6F                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   152                              <1>     ;The file ops need all vars setup as if accessing thru DOS
   153 000006E8 E47A                <1>     dw mpxOpen - mDispTbl       ;AX=1226h, Open File
   154 000006EA 1D31                <1>     dw closeFileHdl - mDispTbl  ;AX=1227h, Close File
   155 000006EC EC7A                <1>     dw mpxLseek - mDispTbl      ;AX=1228h, LSEEK
   156 000006EE 5B31                <1>     dw readFileHdl - mDispTbl   ;AX=1229h, Read File
   157 000006F0 4B77                <1>     dw noOp - mDispTbl          ;AX=122Ah, Nop, Set FASTOPEN EP (reserved)
   158 000006F2 0E7B                <1>     dw mpxIOCTL - mDispTbl      ;AX=122Bh, IOCTL
   159 000006F4 2371                <1>     dw getDrvChain - mDispTbl   ;AX=122Ch, Get device Chain (ptr in rax)
   160 000006F6 2E71                <1>     dw getExtErrCde - mDispTbl  ;AX=122Dh, Get extended error code
   161 000006F8 4B77                <1>     dw noOp - mDispTbl          ;AX=122Eh, Nop, Get/Set error table (reserved)
   162 000006FA 5375                <1>     dw setDOSversion - mDispTbl ;AX=122Fh, Set DOS version to report. Undocumented.
   163                              <1> mDispTblL   equ     $ - mDispTbl
   164                              <1> 
   165                              <1> serverDispTbl:  ;Server Dispatch functions
   166 000006FC 0B                  <1>     db serverDispTblL/2                         ;Number of entries
   167 000006FD E777                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   168 000006FF 3978                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   169 00000701 9078                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   170 00000703 A178                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   171 00000705 A978                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   172 00000707 B178                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   173 00000709 CC78                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   174 0000070B F678                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   175 0000070D F678                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   176 0000070F F678                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   177 00000711 0379                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
   178                              <1> serverDispTblL   equ     $ - serverDispTbl
    31                                  %if DEBUG
    32                                  %include "./src/Kernel/Debug/debug.asm" ;Only include if debug symbols on!
    33                                  %endif
    34                                  %include "./src/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 2Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 00000713 48393D(5D000000)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000071A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000071C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    13 0000071D 56                  <1>     push rsi
    14 0000071E 488B35(5D000000)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 00000725 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 00000728 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 0000072A 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 0000072D EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 0000072F 57                  <1>     push rdi
    22 00000730 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 00000733 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 00000736 5F                  <1>     pop rdi ;Get original buf back
    25 00000737 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 0000073A 488735(5D000000)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 00000741 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 00000744 5E                  <1>     pop rsi
    29                              <1>     return
    13                              <2> %%_ret:
    14 00000745 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                              <1> 
    31                              <1> markBuffersAsUnreferencedWrapper:
    32                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    33                              <1> ; and preserves rdi
    34 00000746 57                  <1>     push rdi
    35 00000747 E802000000          <1>     call markBuffersAsUnreferenced
    36 0000074C 5F                  <1>     pop rdi
    37                              <1>     return
    13                              <2> %%_ret:
    14 0000074D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                              <1> 
    39                              <1> markBuffersAsUnreferenced:  ;Int 2Fh AX=120Eh
    40                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    41                              <1> ;Output: rdi = First disk buffer
    42 0000074E 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
    43 00000755 57                  <1>     push rdi
    44                              <1> .lp:
    45 00000756 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    46 0000075A 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    47 0000075D 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    48 00000764 75F0                <1>     jne .lp
    49 00000766 5F                  <1>     pop rdi
    50                              <1>     return
    13                              <2> %%_ret:
    14 00000767 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    51                              <1> 
    52                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 2Fh AX=120Fh
    53                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    54                              <1> ; second buffer in the chain in rdi
    55                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    56                              <1> ;Output: rdi = Second buffer in the chain
    57 00000768 52                  <1>     push rdx
    58 00000769 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    59 0000076C E8A2FFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    60 00000771 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    61 00000774 5A                  <1>     pop rdx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00000775 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> findUnreferencedBuffer: ;Int 2Fh AX=1210h
    65                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    66                              <1> ;Input: rdi = Buffer header to start searching at
    67                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    68                              <1> ;        ZF=ZE => No unreferenced buffer found
    69 00000776 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Start by checking rdi is not at the end of the list already :)
    70                              <1>     rete    ;Return preserving ZF is so
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000077D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000077F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    71 00000780 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    72 00000784 7405                <1>     jz .exit    ;Unreferenced buffer found!
    73 00000786 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    74 00000789 EBEB                <1>     jmp short findUnreferencedBuffer  ;Check next buffer
    75                              <1> .exit:
    76 0000078B 50                  <1>     push rax
    77 0000078C 0D01000000          <1>     or eax, 1   ;Clear ZF
    78 00000791 58                  <1>     pop rax
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000792 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> flushAllBuffersForDPB:  ;External linkage
    82                              <1> ;Wrapper to allow calls to the below functions from the workingDPB
    83 00000793 50                  <1>     push rax
    84 00000794 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
    85 0000079B 0FB600              <1>     movzx eax, byte [rax + dpb.bDriveNumber]
    86 0000079E E802000000          <1>     call flushAllBuffersForDrive
    87 000007A3 58                  <1>     pop rax
    88                              <1>     return
    13                              <2> %%_ret:
    14 000007A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    89                              <1> 
    90                              <1> flushAllBuffersForDrive:    ;External linkage (2 - diskReset/exit)
    91                              <1> ; Flushes and resets the dirty bit for all dirty bufs in buffer chain.
    92                              <1> ; Used also to allow flushing all buffers
    93                              <1> ; Input: al = 0-based physical drive number we are xacting on
    94                              <1> ; Returns: CF=NC => All is well, buffers flushed and dirty bits cleaned
    95                              <1> ;          CF=CY => A Buffer failed to flush, it was lost.
    96 000007A5 57                  <1>     push rdi
    97 000007A6 50                  <1>     push rax
    98 000007A7 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
    99 000007AE B4FF                <1>     mov ah, -1  ;Set to ignore no buffers
   100                              <1> .mainLp:
   101 000007B0 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   102 000007B7 741E                <1>     je .exit   
   103 000007B9 E827000000          <1>     call flushAndCleanBuffer    ;Flush this buffer if it is on the DPB we want
   104 000007BE 50                  <1>     push rax
   105 000007BF 0FB64708            <1>     movzx eax, byte [rdi + bufferHdr.driveNumber]
   106 000007C3 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this a buffer on the error drive?
   107 000007C9 58                  <1>     pop rax
   108 000007CA 7405                <1>     je .errDrv      ;If not, goto next buffer
   109                              <1> .nextBuffer:        ;This handles the case if the user aborts or ignores.
   110 000007CC 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   111 000007CF EBDF                <1>     jmp short .mainLp
   112                              <1> .errDrv:
   113                              <1> ;Free the buffer if it caused an error in this DOS call and was aborted
   114                              <1> ; or ignored.
   115 000007D1 C64708FF            <1>     mov byte [rdi + bufferHdr.wDrvNumFlg], freeBuffer
   116 000007D5 EBF5                <1>     jmp short .nextBuffer
   117                              <1> .exit:
   118 000007D7 58                  <1>     pop rax
   119 000007D8 5F                  <1>     pop rdi
   120 000007D9 F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;Did we return fail at any point?
   121                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000007E0 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000007E2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   122 000007E3 F9                  <1>     stc     ;If so, carry the CF=CY
   123                              <1>     return
    13                              <2> %%_ret:
    14 000007E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> 
   125                              <1> flushAndCleanBuffer:   ;Internal Linkage Int 2Fh AX=1215h
   126                              <1> ;Flushes and cleans the dirty bit from the buffer
   127                              <1> ;Input: AH = Drives to ignore flush for
   128                              <1> ;       AL = Drive to flush for. If AL=AH, take this buffer unless ignored!
   129                              <1> ;       rdi -> Buffer in question
   130 000007E5 3A6708              <1>     cmp ah, byte [rdi + bufferHdr.driveNumber]  ;Is this an ignorable drv number?
   131                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000007E8 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000007EA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   132 000007EB 38C4                <1>     cmp ah, al  ;Do we ignore ourselves?
   133 000007ED 7407                <1>     je .takeThisBuffer
   134 000007EF 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber] ;Is this an acceptable buffer?
   135 000007F2 F8                  <1>     clc
   136                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000007F3 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000007F5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   137                              <1> .takeThisBuffer:
   138 000007F6 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer   ;Is it dirty?
   139                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000007FA 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000007FC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   140 000007FD 50                  <1>     push rax    ;Save the drive number
   141 000007FE 0FB74708            <1>     movzx eax, word [rdi + bufferHdr.wDrvNumFlg]
   142 00000802 50                  <1>     push rax    ;Save the buffer flags
   143 00000803 E80C000000          <1>     call flushAndFreeBuffer
   144 00000808 58                  <1>     pop rax     ;Get back the flags
   145 00000809 7207                <1>     jc .exit
   146 0000080B 80E4BF              <1>     and ah, ~dirtyBuffer    ;Clean the dirty bit
   147 0000080E 66894708            <1>     mov word [rdi + bufferHdr.wDrvNumFlg], ax  ;And return the drv/flags!
   148                              <1> .exit:  
   149 00000812 58                  <1>     pop rax     ;Get back the drive number
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000813 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> flushAndFreeBuffer:    ;Int 2Fh AX=1209h 
   153                              <1> ;Frees, then attempts flushes the data in a sector buffer to disk!
   154                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   155                              <1> ;Exit:  CF=NC : Success
   156                              <1> ;       CF=CY : Fail, terminate the request
   157 00000814 50                  <1>     push rax
   158 00000815 53                  <1>     push rbx
   159 00000816 51                  <1>     push rcx
   160 00000817 52                  <1>     push rdx
   161 00000818 56                  <1>     push rsi
   162 00000819 55                  <1>     push rbp
   163                              <1> ;If the buffer is freed, skip flushing to avoid issues
   164 0000081A B8FF000000          <1>     mov eax, freeBuffer
   165 0000081F 66874708            <1>     xchg ax, word [rdi + bufferHdr.driveNumber] ;Free the buffer, get flags
   166                              <1>     ;ah = Flags, al = Drive number
   167 00000823 3CFF                <1>     cmp al, -1  ;-1 means free buffer
   168 00000825 7470                <1>     je .fbFreeExit  ;If it was free, exit
   169 00000827 F6C440              <1>     test ah, dirtyBuffer    ;Data modified?
   170 0000082A 746B                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   171 0000082C 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this drive the error drive?    
   172 00000832 7463                <1>     je .fbFreeExit  ;Skip write if this disk has caused an error
   173 00000834 C605(68040000)19    <1>     mov byte [Int24bitfld], critWrite | critRetryOK | critFailOK
   174 0000083B F6C408              <1>     test ah, dataBuffer
   175 0000083E 7407                <1>     jz .fbWriteSetup
   176 00000840 800D(68040000)20    <1>     or byte [Int24bitfld], critIgnorOK  ;If this is a data buffer, we can ignore too
   177                              <1> .fbWriteSetup:
   178 00000847 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   179 0000084C F6C402              <1>     test ah, fatBuffer
   180 0000084F 7406                <1>     jz .fbWriteNotFat
   181 00000851 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   182                              <1> .fbWriteNotFat:
   183 00000857 0FB64F12            <1>     movzx ecx, byte [rdi + bufferHdr.bufFATcopy]   ;And FAT copies (if FAT sector)
   184 0000085B 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   185 0000085F 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   186 00000863 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   187                              <1> .fbWriteDisk:
   188 00000867 50                  <1>     push rax    ;Save the drive number and flags
   189 00000868 53                  <1>     push rbx    ;Has pointer to buffer data area
   190 00000869 51                  <1>     push rcx    ;# of FAT sectors
   191 0000086A 52                  <1>     push rdx    ;The LBA of the buffer that we are writing
   192 0000086B 56                  <1>     push rsi    ;Error counter (5 for FAT sectors, 3 otherwise) 
   193 0000086C 55                  <1>     push rbp    ;DPB ptr for drive
   194 0000086D B901000000          <1>     mov ecx, 1  ;One sector to copy
   195 00000872 E8EE6A0000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   196 00000877 E8F9680000          <1>     call absDiskDriverCall    ;Make Driver Request
   197 0000087C 5D                  <1>     pop rbp
   198 0000087D 5E                  <1>     pop rsi
   199 0000087E 5A                  <1>     pop rdx
   200 0000087F 59                  <1>     pop rcx
   201 00000880 5B                  <1>     pop rbx
   202                              <1>     ;Don't pop rax here to carry the error code if error!
   203 00000881 751C                <1>     jnz .fbFail
   204                              <1> ;Now check if the buffer was a FAT, to write additional copies
   205 00000883 58                  <1>     pop rax ;Now pop the drive number and flags off the stack
   206 00000884 F6C402              <1>     test ah, fatBuffer ;FAT buffer?
   207 00000887 740E                <1>     jz .fbFreeExit  ;If not, exit
   208 00000889 FFC9                <1>     dec ecx
   209 0000088B 740A                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   210 0000088D 50                  <1>     push rax
   211 0000088E 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   212 00000891 4801C2              <1>     add rdx, rax ;Add the FAT size to the LBA (rdx has LBA number)
   213 00000894 58                  <1>     pop rax
   214 00000895 EBD0                <1>     jmp short .fbWriteDisk ;Make another request for the other FAT copy
   215                              <1> .fbFreeExit:
   216 00000897 F8                  <1>     clc
   217                              <1> .fbExitFail:
   218 00000898 5D                  <1>     pop rbp
   219 00000899 5E                  <1>     pop rsi
   220 0000089A 5A                  <1>     pop rdx
   221 0000089B 59                  <1>     pop rcx
   222 0000089C 5B                  <1>     pop rbx
   223 0000089D 58                  <1>     pop rax
   224                              <1>     return
    13                              <2> %%_ret:
    14 0000089E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> .fbFail:
   226                              <1> ;Enter here only if the request failed esi times or bad change
   227 0000089F 3C0F                <1>     cmp al, drvBadDskChnge  ;If error code is bad change, prompt immediately
   228 000008A1 7407                <1>     je .fbHardError
   229 000008A3 FFCE                <1>     dec esi
   230 000008A5 7403                <1>     jz .fbHardError ;Once we have tried it a number of times, fail!
   231 000008A7 58                  <1>     pop rax     ;Else pop back the drive number and flags
   232 000008A8 EBBD                <1>     jmp short .fbWriteDisk ;Try the request again!
   233                              <1> .fbHardError:
   234                              <1> ;Request failed thrice, critical error call
   235                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   236 000008AA E81D610000          <1>     call diskIOError ;Call with rdi = Buffer header and eax = Status Word
   237 000008AF 3C01                <1>     cmp al, critRetry
   238 000008B1 58                  <1>     pop rax     ;Now pop back the drive number and flags from the stack!
   239 000008B2 7493                <1>     je .fbWriteSetup   ;If we retry, we rebuild the stack, values possibly trashed
   240                              <1> ;Else we fail (Ignore=Fail here)
   241 000008B4 F9                  <1>     stc ;Set error flag to indicate fail
   242 000008B5 EBE1                <1>     jmp short .fbExitFail
   243                              <1> 
   244                              <1> testDirtyBufferForDrive:    ;External linkage
   245                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   246                              <1> ;Input: al = Drive number (0 based)
   247                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   248                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   249 000008B7 53                  <1>     push rbx
   250 000008B8 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   251                              <1> .tdbfdCheckBuffer:
   252 000008BF 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   253 000008C2 7509                <1>     jne .tdbfdGotoNextBuffer
   254 000008C4 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   255 000008C8 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   256 000008CA F9                  <1>     stc ;Else dirty buffer found, set carry flag
   257                              <1> .tdbfdExit:
   258 000008CB 5B                  <1>     pop rbx
   259                              <1>     return
    13                              <2> %%_ret:
    14 000008CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   260                              <1> .tdbfdGotoNextBuffer:
   261 000008CD 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   262 000008D0 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   263 000008D7 74F2                <1>     je .tdbfdExit
   264 000008D9 EBE4                <1>     jmp short .tdbfdCheckBuffer
   265                              <1> 
   266                              <1> freeBuffersForDrive:  ;External Linkage (Before Get BPB in medchk)
   267                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   268                              <1> ; to have a drive number of -1, thus freeing it
   269                              <1> ;Given Drive number is in al
   270 000008DB 57                  <1>     push rdi
   271 000008DC 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   272                              <1> .i0:
   273 000008E3 4881FFFFFFFFFF      <1>     cmp rdi, -1
   274 000008EA 7417                <1>     je .exit
   275 000008EC 384708              <1>     cmp byte [rdi + bufferHdr.driveNumber], al  ;Chosen Drive?
   276 000008EF 750D                <1>     jne .i1 ;If no, skip freeing
   277 000008F1 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   278 000008F7 E86CFEFFFF          <1>     call makeBufferMostRecentlyUsedGetNext
   279 000008FC EBE5                <1>     jmp short .i0
   280                              <1> .i1:
   281 000008FE 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;goto next buffer
   282 00000901 EBE0                <1>     jmp short .i0
   283                              <1> .exit:
   284 00000903 5F                  <1>     pop rdi
   285                              <1>     return
    13                              <2> %%_ret:
    14 00000904 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   286                              <1> 
   287                              <1> markBufferDirty:
   288 00000905 55                  <1>     push rbp
   289 00000906 9C                  <1>     pushfq
   290 00000907 488B2D(3E070000)    <1>     mov rbp, qword [currBuff]
   291 0000090E 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   292 00000912 9D                  <1>     popfq
   293 00000913 5D                  <1>     pop rbp
   294                              <1>     return
    13                              <2> %%_ret:
    14 00000914 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   295                              <1> 
   296                              <1> getBuffer: ;Internal Linkage ONLY
   297                              <1> ;
   298                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   299                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   300                              <1> ;Flushes if not in disk change mode. 
   301                              <1> ;If in disk change mode, will check to see if the selected buffer 
   302                              <1> ; has data referring a device using the same DPB as we are changing.
   303                              <1> ; If it is, skip flushing, if not, flush first!
   304                              <1> ;
   305                              <1> ;This function will return a pointer to the desired data sector OR 
   306                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   307                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   308                              <1> ;Entry: rax = Sector to read
   309                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   310                              <1> ;       rsi = DPB to use for transaction
   311                              <1> ;Exit:  CF=NC => 
   312                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   313                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   314 00000915 51                  <1>     push rcx
   315 00000916 52                  <1>     push rdx
   316 00000917 56                  <1>     push rsi
   317 00000918 57                  <1>     push rdi
   318 00000919 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   319 0000091B E821010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   320 00000920 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   321 00000927 741F                <1>     je .rbReadNewSector
   322 00000929 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   323 00000930 E8DEFDFFFF          <1>     call makeBufferMostRecentlyUsed
   324 00000935 F8                  <1>     clc
   325                              <1> .rbExit:
   326 00000936 5F                  <1>     pop rdi
   327 00000937 5E                  <1>     pop rsi
   328 00000938 5A                  <1>     pop rdx
   329 00000939 59                  <1>     pop rcx
   330 0000093A 9C                  <1>     pushfq
   331 0000093B 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   332 00000942 804B0920            <1>     or byte [rbx + bufferHdr.bufferFlags], refBuffer    ;Mark as referenced!
   333 00000946 9D                  <1>     popfq
   334                              <1>     return
    13                              <2> %%_ret:
    14 00000947 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   335                              <1> .rbReadNewSector:
   336 00000948 E89D000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   337 0000094D E8C2FEFFFF          <1>     call flushAndFreeBuffer
   338 00000952 72E2                <1>     jc .rbExit    ;Preserve the set carry flag
   339                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   340                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   341                              <1>     ; is no longer owned by that File so we mark the owner as none
   342 00000954 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   343 00000957 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   344 0000095A 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   345 0000095E 80F902              <1>     cmp cl, fatBuffer
   346 00000961 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   347 00000963 7503                <1>     jne .rbNonFATbuffer
   348 00000965 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   349                              <1> .rbNonFATbuffer:
   350 00000968 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   351 0000096B 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   352 0000096E 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   353 00000971 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   354 00000975 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   355 00000979 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   356 0000097E EBB6                <1>     jmp short .rbExit   ;Jump preserving the carry flag
   357                              <1> 
   358                              <1> readSectorBuffer:   ;Internal Linkage
   359                              <1> ;Reads a sector into a built sector buffer
   360                              <1> ;Entry: rdi = Pointer to buffer header
   361                              <1> ;Exit:  CF=NC : Success
   362                              <1> ;       CF=CY : Fail, terminate the request
   363                              <1> ;       rbx pointing to buffer header
   364                              <1> ;First make request to device driver
   365 00000980 50                  <1>     push rax
   366 00000981 53                  <1>     push rbx
   367 00000982 51                  <1>     push rcx
   368 00000983 52                  <1>     push rdx
   369 00000984 56                  <1>     push rsi
   370 00000985 55                  <1>     push rbp
   371                              <1> .rsRequest0:
   372 00000986 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   373 0000098B F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   374 0000098F 7406                <1>     jz .rsRequest1
   375 00000991 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   376                              <1> .rsRequest1:
   377 00000997 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   378 0000099A B901000000          <1>     mov ecx, 1  ;One sector to copy
   379 0000099F 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   380 000009A3 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   381 000009A7 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   382 000009AB E8C0690000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   383 000009B0 E8C0670000          <1>     call absDiskDriverCall    ;Make Driver Request
   384 000009B5 7508                <1>     jnz .rsFail
   385                              <1> .rsExit:
   386 000009B7 F8                  <1>     clc
   387                              <1> .rsExitFail:
   388 000009B8 5D                  <1>     pop rbp
   389 000009B9 5E                  <1>     pop rsi
   390 000009BA 5A                  <1>     pop rdx
   391 000009BB 59                  <1>     pop rcx
   392 000009BC 5B                  <1>     pop rbx
   393 000009BD 58                  <1>     pop rax
   394                              <1>     return
    13                              <2> %%_ret:
    14 000009BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   395                              <1> .rsFail:
   396                              <1> ;Enter here only if the request failed. al has driver error code
   397 000009BF 3C0F                <1>     cmp al, drvBadDskChnge  ;If error code is bad change, prompt immediately
   398 000009C1 7404                <1>     je .rsBadChange
   399 000009C3 FFCE                <1>     dec esi
   400 000009C5 75D0                <1>     jnz .rsRequest1 ;Try the request again!
   401                              <1> .rsBadChange:
   402                              <1> ;Request failed thrice or bad change detected, critical error call
   403                              <1> ;First free the buffer if we failed to read data into it. 
   404                              <1> ;We free this buffer to free the resource if the user aborts.
   405                              <1> ;This function is called in a critical section so the buffer pointer
   406                              <1> ; is under no thread of being reallocated.
   407                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   408 000009C7 C64708FF            <1>     mov byte [rdi + bufferHdr.driveNumber], -1 ;Free buffer
   409 000009CB C605(68040000)18    <1>     mov byte [Int24bitfld], critRead | critFailOK | critRetryOK
   410 000009D2 E8F55F0000          <1>     call diskIOError    ;Returns rbp -> DPB and rdi -> Buffer, al = Action code
   411 000009D7 3C01                <1>     cmp al, critRetry
   412 000009D9 7509                <1>     jne .fail   ;Else we fail
   413 000009DB 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]    ;Get drv num to put back
   414 000009DF 884708              <1>     mov byte [rdi + bufferHdr.driveNumber], al ;Put it back (buffer type bits set)
   415 000009E2 EBA2                <1>     jmp short .rsRequest0
   416                              <1> .fail:
   417 000009E4 F9                  <1>     stc ;Set error flag to indicate fail
   418 000009E5 E9CEFFFFFF          <1>     jmp .rsExitFail
   419                              <1>     
   420                              <1> findLRUBuffer: ;Internal Linkage
   421                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   422                              <1> ; in rdi and the currBuff variable
   423                              <1> ;Input: Nothing
   424                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   425                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   426 000009EA 52                  <1>     push rdx
   427 000009EB 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   428 000009F2 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   429 000009F6 7436                <1>     je .flbExit 
   430 000009F8 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   431 000009FF 742D                <1>     je .flbExit
   432                              <1> .flbWalk:
   433 00000A01 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   434 00000A04 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   435 00000A07 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   436 00000A0B 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   437 00000A0D 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   438 00000A14 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   439 00000A16 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   440                              <1> .flbHeadLink:
   441 00000A1D 488B15(5D000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   442 00000A24 48893D(5D000000)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   443 00000A2B 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   444                              <1> .flbExit:
   445 00000A2E 5A                  <1>     pop rdx
   446 00000A2F 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   447                              <1>     return
    13                              <2> %%_ret:
    14 00000A36 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> .flbFreeLink:
   449 00000A37 51                  <1>     push rcx
   450 00000A38 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   451 00000A3B 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   452 00000A3E 59                  <1>     pop rcx
   453 00000A3F EBDC                <1>     jmp short .flbHeadLink
   454                              <1> 
   455                              <1> findSectorInBuffer:     ;Internal linkage
   456                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   457                              <1> ;If the sector is not in a buffer, returns with a -1
   458                              <1> ;Input: rax = Sector number
   459                              <1> ;       dl = Drive number
   460                              <1> ;Output: rdi = Buffer hdr pointer or -1
   461 00000A41 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   462                              <1> .fsiCheckBuffer:
   463 00000A48 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   464 00000A4B 7507                <1>     jne .fsiGotoNextBuffer
   465 00000A4D 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   466 00000A51 7501                <1>     jne .fsiGotoNextBuffer
   467                              <1> .fsiExit:
   468                              <1>     return
    13                              <2> %%_ret:
    14 00000A53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   469                              <1> .fsiGotoNextBuffer:
   470 00000A54 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   471 00000A57 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   472 00000A5E 74F3                <1>     je .fsiExit
   473 00000A60 EBE6                <1>     jmp short .fsiCheckBuffer
   474                              <1> 
   475                              <1> ;-----------------------------------------------------------------------------
   476                              <1> ;SPECIAL BUFFER FUNCTIONS
   477                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   478                              <1> ; ALL sector types need to setup [workingDPB] to make the transfer
   479                              <1> ;-----------------------------------------------------------------------------
   480                              <1> getBufForDOS:
   481                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   482                              <1> ;Input: [workingDPB] = DPB to transact on
   483                              <1> ;       rax = Sector to transfer
   484                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   485 00000A62 51                  <1>     push rcx
   486 00000A63 B101                <1>     mov cl, dosBuffer
   487 00000A65 EB0D                <1>     jmp short getBufCommon
   488                              <1> getBufForFat:
   489                              <1> ;Returns a buffer to use for fat data in rbx
   490                              <1> ;Input: [workingDPB] = DPB to transact on
   491                              <1> ;       rax = Sector to transfer
   492                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   493 00000A67 51                  <1>     push rcx
   494 00000A68 B102                <1>     mov cl, fatBuffer
   495 00000A6A EB08                <1>     jmp short getBufCommon
   496                              <1> getBufForDir:
   497                              <1> ;Returns a buffer to use for disk directory data in rbx
   498                              <1> ;Input: [workingDPB] = File to manipulate
   499                              <1> ;       rax = Sector to transfer
   500                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   501 00000A6C 51                  <1>     push rcx
   502 00000A6D B104                <1>     mov cl, dirBuffer
   503 00000A6F EB03                <1>     jmp short getBufCommon
   504                              <1> getBufForData:
   505                              <1> ;Returns a buffer to use for disk data in rbx
   506                              <1> ;Requires a File Handle.
   507                              <1> ;Input: [workingDPB] = File to manipulate
   508                              <1> ;       rax = Sector to transfer
   509                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   510 00000A71 51                  <1>     push rcx
   511 00000A72 B108                <1>     mov cl, dataBuffer
   512                              <1> getBufCommon:
   513 00000A74 56                  <1>     push rsi
   514 00000A75 57                  <1>     push rdi
   515 00000A76 488B35(0A070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   516                              <1> .makeReq:
   517 00000A7D E893FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   518 00000A82 5F                  <1>     pop rdi
   519 00000A83 5E                  <1>     pop rsi
   520 00000A84 59                  <1>     pop rcx
   521                              <1>     return
    13                              <2> %%_ret:
    14 00000A85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    35                                  %include "./src/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 00000A86 53                  <1>     push rbx
     9 00000A87 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr]
    10 00000A8A B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 00000A8F 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 00000A95 730C                <1>     jae .exit
    13 00000A97 FFC9                <1>     dec ecx     ;FAT 16 marker
    14 00000A99 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 00000A9F 7302                <1>     jae .exit
    16 00000AA1 FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 00000AA3 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 00000AA4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 00000AA5 53                  <1>     push rbx
    29 00000AA6 55                  <1>     push rbp
    30 00000AA7 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    31 00000AAE 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr]
    32 00000AB1 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 00000AB7 731E                <1>     jae .fat32
    34 00000AB9 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 00000ABF 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 00000AC1 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 00000AC3 6801000000          <1>     push qword 1
    39 00000AC8 EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000ACA 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000ACC D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000ACE 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 00000AD0 6800000000          <1>     push qword 0
    45 00000AD5 EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000AD7 6802000000          <1>     push qword 2
    48 00000ADC C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000ADF 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 00000AE3 31D2                <1>     xor edx, edx    ;edx = 0
    53 00000AE5 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000AE7 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000AEB 01D8                <1>     add eax, ebx
    56 00000AED 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000AEE 5D                  <1>     pop rbp
    58 00000AEF 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000AF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 00000AF1 51                  <1>     push rcx
    68 00000AF2 09C0                <1>     or eax, eax ;Zero upper dword
    69 00000AF4 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 00000AF6 482D02000000        <1>     sub rax, 2
    72 00000AFC 8A4D05              <1>     mov cl, byte [rbp + dpb.bSecPerClustShift]
    73 00000AFF 48D3E0              <1>     shl rax, cl
    74 00000B02 31C9                <1>     xor ecx, ecx
    75 00000B04 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000B07 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000B0A 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000B0B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000B0C 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000B0F E872FFFFFF          <1>     call getFATtype
    83 00000B14 81F902000000        <1>     cmp ecx, 2
    84 00000B1A 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000B1C 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000B1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000B1E 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B20 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B22 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    97 00000B23 53                  <1>     push rbx
    98                              <1> .lp:
    99 00000B24 89C3                <1>     mov ebx, eax
   100 00000B26 E858020000          <1>     call readFAT
   101 00000B2B 7209                <1>     jc .exit
   102 00000B2D 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 00000B32 75F0                <1>     jne .lp
   104 00000B34 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 00000B36 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 00000B37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000B38 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B3A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B3C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   116 00000B3D 51                  <1>     push rcx
   117 00000B3E 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000B40 FFC1                <1>     inc ecx
   120 00000B42 E83C020000          <1>     call readFAT
   121 00000B47 7209                <1>     jc .exit
   122 00000B49 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000B4E 75F0                <1>     jne .lp
   124 00000B50 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000B52 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000B53 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 00000B54 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000B56 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000B58 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   139 00000B59 53                  <1>     push rbx
   140 00000B5A 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 00000B5D 89C3                <1>     mov ebx, eax
   143 00000B5F E81F020000          <1>     call readFAT
   144 00000B64 7206                <1>     jc .exit
   145 00000B66 FFC9                <1>     dec ecx
   146 00000B68 75F3                <1>     jnz .lp
   147 00000B6A 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 00000B6C 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000B6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 00000B6E 53                  <1>     push rbx
   157 00000B6F 56                  <1>     push rsi
   158 00000B70 E874000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 00000B75 7223                <1>     jc .exit    ;Disk read error?
   160 00000B77 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 00000B7C 7415                <1>     je .exit2   ;Exit synching disk full status
   162 00000B7E BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 00000B83 89C3                <1>     mov ebx, eax
   164 00000B85 E8A5020000          <1>     call writeFAT
   165 00000B8A 720E                <1>     jc .exit 
   166 00000B8C 89D8                <1>     mov eax, ebx
   167 00000B8E E87C030000          <1>     call decrementFreeClusterCount
   168                              <1> .exit2:
   169 00000B93 50                  <1>     push rax
   170 00000B94 E821040000          <1>     call writeFSInfoSector
   171 00000B99 58                  <1>     pop rax
   172                              <1> .exit:
   173 00000B9A 5E                  <1>     pop rsi
   174 00000B9B 5B                  <1>     pop rbx
   175                              <1>     return
    13                              <2> %%_ret:
    14 00000B9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   176                              <1> 
   177                              <1> allocateClusters:
   178                              <1> ;Working dpb must be set. 
   179                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   180                              <1> ;       ebx = Cluster to link to the new cluster
   181                              <1> ;Output:    
   182                              <1> ;   ecx = Number of allocated clusters
   183                              <1> ;   CF=NC => Complete.
   184                              <1> ;   If eax = -1, then no more free clusters. 
   185                              <1> ;   CF=CY => Hard error, exit
   186 00000B9D F8                  <1>     clc ;Always clear the flags before starting
   187 00000B9E 53                  <1>     push rbx
   188 00000B9F 56                  <1>     push rsi
   189 00000BA0 51                  <1>     push rcx    ;Save tfr count on stack
   190 00000BA1 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   191                              <1> .allocateLoop:
   192 00000BA4 E840000000          <1>     call findFreeCluster
   193 00000BA9 722B                <1>     jc .exit
   194 00000BAB 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   195 00000BB0 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   196                              <1>     ;eax has first free cluster value to use
   197                              <1>     ;First we link the previous cluster to this cluster
   198 00000BB2 BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   199 00000BB7 50                  <1>     push rax
   200 00000BB8 E872020000          <1>     call writeFAT   ;Allocate this cluster first
   201 00000BBD 58                  <1>     pop rax
   202 00000BBE 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   203 00000BC0 E84A030000          <1>     call decrementFreeClusterCount
   204                              <1>     ;eax points to this allocated cluster
   205                              <1>     ;ebx points to the previous last cluster
   206 00000BC5 89C6                <1>     mov esi, eax    ;New cluster as "value"
   207 00000BC7 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   208 00000BC9 E861020000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   209 00000BCE 7206                <1>     jc .exit
   210 00000BD0 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   211 00000BD2 FFC9                <1>     dec ecx ;One less cluster allocated
   212 00000BD4 75CE                <1>     jnz .allocateLoop
   213                              <1> .exit:
   214 00000BD6 5E                  <1>     pop rsi ;Pop the tfr count into esi
   215 00000BD7 9C                  <1>     pushfq
   216 00000BD8 F7D9                <1>     neg ecx
   217 00000BDA 01F1                <1>     add ecx, esi
   218 00000BDC 50                  <1>     push rax
   219 00000BDD 51                  <1>     push rcx
   220 00000BDE E8D7030000          <1>     call writeFSInfoSector
   221 00000BE3 59                  <1>     pop rcx
   222 00000BE4 58                  <1>     pop rax
   223 00000BE5 9D                  <1>     popfq
   224 00000BE6 5E                  <1>     pop rsi
   225 00000BE7 5B                  <1>     pop rbx
   226                              <1>     return
    13                              <2> %%_ret:
    14 00000BE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> findFreeCluster:
   229                              <1> ;Walks the FAT to find a free cluster and returns the 
   230                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   231                              <1> ;Starts from the pervious first free cluster and wraps around if 
   232                              <1> ; we hit the max disk size and keeps searching until we get back
   233                              <1> ; to the starting cluster value. 
   234                              <1> ;If the first free cluster is unknown, we start from 2. If we hit the 
   235                              <1> ; max disk size in that case, we fail.
   236                              <1> ;Works on the workingDPB.
   237                              <1> ;If returns with CF=CY => Fail set, return immediately to caller.
   238 00000BE9 53                  <1>     push rbx
   239 00000BEA 52                  <1>     push rdx
   240 00000BEB 55                  <1>     push rbp
   241 00000BEC 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   242 00000BF3 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]
   243 00000BF6 3DFFFFFFFF          <1>     cmp eax, -1     ;Do we have a good starting free cluster? 
   244 00000BFB 7511                <1>     jne .lp
   245                              <1>     ;Check if the count of free clusters is 0. If so, we are full!
   246 00000BFD 817D3100000000      <1>     cmp dword [rbp + dpb.dFreeClustCnt], 0
   247 00000C04 742D                <1>     je .diskFull
   248                              <1>     ;Else, we just have unreliable metadata. Start search from 2!
   249 00000C06 B802000000          <1>     mov eax, 2      ;If not, start searching from 2.
   250 00000C0B 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax    ;Start searching here!
   251                              <1> .lp:
   252 00000C0E 89C3                <1>     mov ebx, eax
   253 00000C10 E86E010000          <1>     call readFAT    ;Deref the cluster value of ebx into eax
   254 00000C15 722E                <1>     jc .exitFast
   255 00000C17 85C0                <1>     test eax, eax   ;Now eax = DATA [ebx]. If 0, this is free!
   256 00000C19 7424                <1>     jz .freeFnd
   257 00000C1B 678D4301            <1>     lea eax, dword [ebx + 1]    ;Else, get sequentially the next cluster
   258                              <1>     ;If these are equal, we've gone through the whole FAT. Disk full!
   259 00000C1F 3B452D              <1>     cmp eax, dword [rbp + dpb.dNextFreeClst]
   260 00000C22 740F                <1>     je .diskFull    
   261                              <1>     ;Are we past the max cluster address?
   262 00000C24 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   263 00000C27 76E5                <1>     jbe .lp ;If not, use this next cluster value!
   264                              <1> ;Else, we are past end of the disk. Start from 2 again or disk full?
   265 00000C29 B802000000          <1>     mov eax, 2  ;Default to search from 2 again
   266                              <1>     ;If the firstfreecluster = 2, then we've searched everything. Fail.
   267 00000C2E 39452D              <1>     cmp dword [rbp + dpb.dNextFreeClst], eax    
   268 00000C31 75DB                <1>     jne .lp
   269                              <1> .diskFull:
   270                              <1> ;Set free cluster count to 0 and first free cluster to -1
   271 00000C33 C7453100000000      <1>     mov dword [rbp + dpb.dFreeClustCnt], 0  ;Set the free clusters
   272 00000C3A BBFFFFFFFF          <1>     mov ebx, -1     ;Set cluster value to -1
   273                              <1> .freeFnd:
   274 00000C3F 89D8                <1>     mov eax, ebx    ;Get the free cluster value into eax
   275 00000C41 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax    ;Save first free cluster!
   276 00000C44 F8                  <1>     clc
   277                              <1> .exitFast:
   278 00000C45 5D                  <1>     pop rbp
   279 00000C46 5A                  <1>     pop rdx
   280 00000C47 5B                  <1>     pop rbx
   281                              <1>     return
    13                              <2> %%_ret:
    14 00000C48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> findFreeClusterData:
   284                              <1> ;Walks the FAT to find a free cluster and returns the 
   285                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   286                              <1> ; Also finds NumberOfFreeClusters, if it is unknown. 
   287                              <1> ; Both fields get filled in the workingDPB
   288                              <1> ;Works on the workingDPB
   289                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   290 00000C49 53                  <1>     push rbx
   291 00000C4A 51                  <1>     push rcx
   292 00000C4B 52                  <1>     push rdx
   293 00000C4C 55                  <1>     push rbp
   294 00000C4D 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   295 00000C54 E82DFEFFFF          <1>     call getFATtype
   296 00000C59 81F902000000        <1>     cmp ecx, 2  ;If not FAT32, always get afresh
   297 00000C5F 7512                <1>     jne .getNew
   298                              <1>     ;Else, if either entry is unknown, get both!
   299 00000C61 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   300 00000C68 7409                <1>     je .getNew
   301 00000C6A 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dNextFreeClst], -1
   302 00000C71 7543                <1>     jne .exit
   303                              <1> .getNew:
   304                              <1>     ;Reset this data. Get first free cluster
   305 00000C73 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1
   306 00000C7A C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1
   307 00000C81 E863FFFFFF          <1>     call findFreeCluster
   308 00000C86 7237                <1>     jc .exitFail
   309 00000C88 C7453100000000      <1>     mov dword [rbp + dpb.dFreeClustCnt], 0  ;Set to 0 for new count
   310 00000C8F 3DFFFFFFFF          <1>     cmp eax, -1 ;First free cluster = -1 means disk full!
   311 00000C94 7420                <1>     je .exit
   312                              <1>     ;Else, eax has the first free cluster. Keep reading FAT
   313 00000C96 E865020000          <1>     call incrementFreeClusterCount  ;Increment the count for the first clust!
   314                              <1> .lp:
   315 00000C9B 89C3                <1>     mov ebx, eax    ;Save the cluster number
   316 00000C9D E8E1000000          <1>     call readFAT    ;Get dereferenced value in eax
   317 00000CA2 721B                <1>     jc .exitFail
   318 00000CA4 85C0                <1>     test eax, eax
   319 00000CA6 7505                <1>     jnz .notFree
   320 00000CA8 E853020000          <1>     call incrementFreeClusterCount  ;Increment the count!
   321                              <1> .notFree:
   322 00000CAD 678D4301            <1>     lea eax, dword [ebx + 1]    ;Get the next consecutive cluster
   323 00000CB1 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   324 00000CB4 76E5                <1>     jbe .lp
   325                              <1> .exit:
   326 00000CB6 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]  ;Get first free cluster in eax
   327 00000CB9 E8FC020000          <1>     call writeFSInfoSector
   328 00000CBE F8                  <1>     clc
   329                              <1> .exitFail:      ;Keep carry flag
   330 00000CBF 5D                  <1>     pop rbp
   331 00000CC0 5A                  <1>     pop rdx
   332 00000CC1 59                  <1>     pop rcx
   333 00000CC2 5B                  <1>     pop rbx
   334                              <1>     return
    13                              <2> %%_ret:
    14 00000CC3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   335                              <1> 
   336                              <1> getNextSectorOfFile:
   337                              <1> ;This function will return the next sector of a file in rax
   338                              <1> ;If the next sector to be read lives in the next cluster, it will update
   339                              <1> ; the vars appropriately
   340                              <1> ;
   341                              <1> ;Input: rbp = dpb pointer
   342                              <1> ;Output:
   343                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   344                              <1> ;           If ZF=ZE => [currClustF] = Last Cluster of File.
   345                              <1> ;       CF=CY => Critical error occurred and was FAILed
   346                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   347                              <1> ; next cluster and read first sector 
   348                              <1>     ;Check if we need to go to next cluster
   349 00000CC4 8A05(5C070000)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   350 00000CCA 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   351 00000CCD 741C                <1>     je .gotoNextCluster
   352                              <1>     ;Goto next sector in same cluster
   353 00000CCF FE05(5C070000)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   354 00000CD5 48FF05(5D070000)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   355 00000CDC 488B05(5D070000)    <1>     mov rax, qword [currSectD]
   356                              <1> .exit:
   357 00000CE3 50                  <1>     push rax
   358 00000CE4 31C0                <1>     xor eax, eax
   359 00000CE6 FFC0                <1>     inc eax ;Ensure ZF=NZ
   360 00000CE8 58                  <1>     pop rax
   361 00000CE9 F8                  <1>     clc     ;And CF=NC
   362                              <1>     return
    13                              <2> %%_ret:
    14 00000CEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   363                              <1> .gotoNextCluster:
   364 00000CEB 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   365 00000CF1 E88D000000          <1>     call readFAT
   366                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000CF6 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000CF8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   367                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   368 00000CF9 3DFFFFFFFF          <1>     cmp eax, -1 ;ZF=ZE and CF=NC if they are equal
   369                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000CFE 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000D00 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   370                              <1> ;Update the new cluster and sector information
   371 00000D01 8905(54070000)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   372 00000D07 FF05(50070000)      <1>     inc dword [currClustF]   ;Goto next file cluster
   373 00000D0D E8DFFDFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   374 00000D12 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save it
   375 00000D19 C605(5C070000)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   376 00000D20 EBC1                <1>     jmp short .exit
   377                              <1> 
   378                              <1> 
   379                              <1> truncateFAT:
   380                              <1> ;Same as below but always sets the cluster we are unlinking at to EOC.
   381                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   382                              <1> ;       rbp = Current DPB to use for disk
   383                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   384 00000D22 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   385 00000D23 56                  <1>     push rsi
   386 00000D24 E82B000000          <1>     call freeChainFAT   ;Preserves eax, frees the full chain.
   387 00000D29 721B                <1>     jc .exit
   388 00000D2B BEFFFFFFFF          <1>     mov esi, -1         ;Realloc the cluster we are freeing from as EOC
   389 00000D30 50                  <1>     push rax            ;Save the cluster we are writing at
   390 00000D31 E8F9000000          <1>     call writeFAT
   391 00000D36 58                  <1>     pop rax
   392 00000D37 720D                <1>     jc .exit
   393 00000D39 E8D1010000          <1>     call decrementFreeClusterCount  ;Remove it from the free cluster count!
   394                              <1> .setFree:
   395                              <1> ;Do this stuff here, because we want to update the free count too!
   396 00000D3E 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax ;And set this to search from
   397 00000D41 E874020000          <1>     call writeFSInfoSector  ;New first free cluster values
   398                              <1> .exit:
   399 00000D46 5E                  <1>     pop rsi
   400 00000D47 58                  <1>     pop rax
   401                              <1>     return
    13                              <2> %%_ret:
    14 00000D48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   402                              <1> unlinkFAT:
   403                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   404                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   405                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   406                              <1> ; cluster must be set to EOC before this proc is called.
   407                              <1> ;Stops at first invalid cluster number.
   408                              <1> ;
   409                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   410                              <1> ;       rbp = Current DPB to use for disk
   411                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   412                              <1> 
   413 00000D49 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   414 00000D4A 56                  <1>     push rsi
   415                              <1> ;The below call decrements the cluster count for the full chain freed including
   416                              <1> ; the starting cluster address.
   417 00000D4B E804000000          <1>     call freeChainFAT    ;Preserved eax. May set eax to first free cluster.
   418 00000D50 73EC                <1>     jnc truncateFAT.setFree ;Set the first free sector to eax
   419 00000D52 EBF2                <1>     jmp short truncateFAT.exit  ;If an error, skip updating the FSInfo sector
   420                              <1> 
   421                              <1> freeChainFAT:
   422                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   423                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   424                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   425                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   426                              <1> ;Stops at first invalid cluster number.
   427                              <1> ;
   428                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   429                              <1> ;       rbp = Current DPB to use for disk
   430                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   431 00000D54 50                  <1>     push rax
   432 00000D55 53                  <1>     push rbx
   433 00000D56 51                  <1>     push rcx
   434 00000D57 56                  <1>     push rsi
   435 00000D58 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   436                              <1> .lp:
   437 00000D5A E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   438 00000D5F 721D                <1>     jc .exit    ;Error exit
   439 00000D61 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   440 00000D63 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   441 00000D64 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   442 00000D66 E8C4000000          <1>     call writeFAT
   443 00000D6B 7211                <1>     jc .exit    ;Error exit
   444 00000D6D E88E010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   445 00000D72 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   446 00000D78 7404                <1>     je .exit
   447 00000D7A 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   448 00000D7C EBDC                <1>     jmp short .lp
   449                              <1> .exit:
   450 00000D7E 5E                  <1>     pop rsi
   451 00000D7F 59                  <1>     pop rcx
   452 00000D80 5B                  <1>     pop rbx
   453 00000D81 58                  <1>     pop rax
   454                              <1>     return
    13                              <2> %%_ret:
    14 00000D82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   455                              <1> readFAT:
   456                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   457                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   458                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   459                              <1> ;       rbp = DPB
   460                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   461                              <1> ;If carry set, getBuffer failed!
   462 00000D83 53                  <1>     push rbx
   463 00000D84 51                  <1>     push rcx
   464 00000D85 52                  <1>     push rdx
   465 00000D86 57                  <1>     push rdi
   466 00000D87 55                  <1>     push rbp
   467 00000D88 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   468 00000D8A E816FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   469                              <1>     ;and FAT type in ecx
   470 00000D8F E8D3FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   471 00000D94 7232                <1>     jc .exitFail
   472                              <1>     ;Check if FAT 12, 16, 32
   473 00000D96 85C9                <1>     test ecx, ecx
   474 00000D98 7434                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   475 00000D9A F7C101000000        <1>     test ecx, 1
   476 00000DA0 740E                <1>     jz .goToNextClusterFat32
   477                              <1>     ;Here we handle FAT16
   478 00000DA2 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   479 00000DA7 3DF7FF0000          <1>     cmp eax, 0FFF7h  ;Valid cluster number?
   480 00000DAC 7219                <1>     jb .exit
   481 00000DAE EB0B                <1>     jmp short .eocExit
   482                              <1> .goToNextClusterFat32:
   483 00000DB0 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   484 00000DB4 3DF7FFFF0F          <1>     cmp eax, 0FFFFFF7h ;First reserved value. Any Reserved number = EOC
   485 00000DB9 7207                <1>     jb .validCluster32   
   486                              <1> .eocExit:
   487 00000DBB B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   488 00000DC0 EB05                <1>     jmp short .exit
   489                              <1> .validCluster32:
   490 00000DC2 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   491                              <1> .exit:
   492 00000DC7 F8                  <1>     clc
   493                              <1> .exitFail:
   494 00000DC8 5D                  <1>     pop rbp
   495 00000DC9 5F                  <1>     pop rdi
   496 00000DCA 5A                  <1>     pop rdx
   497 00000DCB 59                  <1>     pop rcx
   498 00000DCC 5B                  <1>     pop rbx
   499                              <1>     return
    13                              <2> %%_ret:
    14 00000DCD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .gotoNextClusterFat12:
   501                              <1> ;eax has the sector number of the FAT
   502                              <1> ;edx has byte offset into the sector
   503                              <1> ;edi has current cluster number
   504                              <1> ;rbx has ptr to buffer header
   505 00000DCE 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   506 00000DD2 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   507 00000DD8 741C                <1>     jz .gotoNextClusterFat12Even
   508                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   509 00000DDA 29D1                <1>     sub ecx, edx
   510 00000DDC FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   511 00000DDE 750C                <1>     jnz .gotoNextClusterFat12OddNoX
   512 00000DE0 E833000000          <1>     call .xBndry        ;Boundary cross, build entry properly
   513 00000DE5 72E1                <1>     jc .exitFail    
   514 00000DE7 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   515 00000DEA EB23                <1>     jmp short .checkIfLastFAT12Cluster
   516                              <1> .gotoNextClusterFat12OddNoX:
   517 00000DEC 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   518 00000DF1 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   519 00000DF4 EB19                <1>     jmp short .checkIfLastFAT12Cluster
   520                              <1> .gotoNextClusterFat12Even:
   521 00000DF6 29D1                <1>     sub ecx, edx
   522 00000DF8 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   523 00000DFA 7509                <1>     jnz .gotoNextClusterFat12EvenNoX
   524 00000DFC E817000000          <1>     call .xBndry    ;Save the lower three nybbles
   525 00000E01 72C5                <1>     jc .exitFail
   526 00000E03 EB05                <1>     jmp short .evenCmn
   527                              <1> .gotoNextClusterFat12EvenNoX:
   528                              <1>     ;Here the cluster is even and can't cross a sector boundary
   529 00000E05 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   530                              <1> .evenCmn:
   531 00000E0A 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   532                              <1> .checkIfLastFAT12Cluster:
   533 00000E0F 3DF70F0000          <1>     cmp eax, 0FF7h   ;Is it below the first invalid cluster number?
   534 00000E14 72B1                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   535 00000E16 EBA3                <1>     jmp short .eocExit
   536                              <1> .xBndry:
   537                              <1> ;Gets a word that goes across a boundary in ax. It is left to the caller it 
   538                              <1> ; do what they will with it. If CF=CY on return, something went wrong.
   539 00000E18 0FB65C1320          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   540 00000E1D FFC0                <1>     inc eax ;Get next FAT sector
   541 00000E1F 53                  <1>     push rbx
   542 00000E20 E842FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   543 00000E25 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   544                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000E26 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000E28 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   545 00000E29 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   546 00000E2B 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   547                              <1>     return
    13                              <2> %%_ret:
    14 00000E2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   548                              <1> 
   549                              <1> writeFAT:
   550                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   551                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   552                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   553                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   554                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   555 00000E2F 53                  <1>     push rbx
   556 00000E30 51                  <1>     push rcx
   557 00000E31 52                  <1>     push rdx
   558 00000E32 56                  <1>     push rsi
   559 00000E33 57                  <1>     push rdi
   560 00000E34 55                  <1>     push rbp
   561 00000E35 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   562 00000E37 E869FCFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   563                              <1>     ;and FAT type in ecx
   564 00000E3C E826FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   565 00000E41 7223                <1>     jc .exitFail
   566                              <1>     ;Check if FAT 12, 16, 32
   567 00000E43 85C9                <1>     test ecx, ecx
   568 00000E45 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   569 00000E47 F7C101000000        <1>     test ecx, 1
   570 00000E4D 7407                <1>     jz .goToNextClusterFat32
   571                              <1>     ;Here we handle FAT16
   572 00000E4F 6689741320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   573 00000E54 EB0A                <1>     jmp short .exit
   574                              <1> .goToNextClusterFat32:
   575 00000E56 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   576 00000E5C 89741320            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   577                              <1> .exit:
   578 00000E60 E8A0FAFFFF          <1>     call markBufferDirty
   579 00000E65 F8                  <1>     clc
   580                              <1> .exitFail:
   581 00000E66 5D                  <1>     pop rbp
   582 00000E67 5F                  <1>     pop rdi
   583 00000E68 5E                  <1>     pop rsi
   584 00000E69 5A                  <1>     pop rdx
   585 00000E6A 59                  <1>     pop rcx
   586 00000E6B 5B                  <1>     pop rbx
   587                              <1>     return
    13                              <2> %%_ret:
    14 00000E6C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   588                              <1> .gotoNextClusterFat12:
   589                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   590                              <1> ;eax has the sector number of the FAT
   591                              <1> ;edx has byte offset into the sector
   592                              <1> ;edi has current cluster number
   593                              <1> ;rbx has ptr to buffer header
   594 00000E6D 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   595 00000E71 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   596 00000E77 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   597 00000E7D 7432                <1>     jz .gotoNextClusterFat12Even
   598                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   599 00000E7F 29D1                <1>     sub ecx, edx
   600 00000E81 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   601 00000E83 7556                <1>     jnz .gotoNextClusterFat12OddNoX
   602                              <1>     ;Boundary cross, build entry properly
   603                              <1>     ;Replace the high nybble of the low byte
   604 00000E85 0FB64C1320          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   605 00000E8A 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   606 00000E90 C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   607 00000E93 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   608 00000E95 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   609 00000E98 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   610 00000E9C E864FAFFFF          <1>     call markBufferDirty
   611 00000EA1 FFC0                <1>     inc eax ;Get next FAT sector
   612 00000EA3 E8BFFBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   613 00000EA8 72BC                <1>     jc .exitFail
   614 00000EAA 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   615 00000EAC 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   616 00000EAF EBAF                <1>     jmp short .exit
   617                              <1> .gotoNextClusterFat12Even:
   618 00000EB1 29D1                <1>     sub ecx, edx
   619 00000EB3 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   620 00000EB5 7533                <1>     jnz .gotoNextClusterFat12EvenNoX
   621 00000EB7 89F1                <1>     mov ecx, esi
   622 00000EB9 80E50F              <1>     and ch, 0Fh ;Save only the lower nybble of ch
   623 00000EBC 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl   ;Store the first byte
   624 00000EC0 E840FAFFFF          <1>     call markBufferDirty
   625 00000EC5 FFC0                <1>     inc eax ;Get next FAT sector
   626 00000EC7 E89BFBFFFF          <1>     call getBufForFat
   627 00000ECC 7298                <1>     jc .exitFail
   628 00000ECE 8A4B20              <1>     mov cl, byte [rbx + bufferHdr.dataarea] ;Get the first data byte from buffer
   629 00000ED1 80E1F0              <1>     and cl, 0F0h    ;Clear the lower nybble of this entry
   630 00000ED4 08E9                <1>     or cl, ch       ;Add our entry in
   631 00000ED6 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl ;Write it back
   632 00000ED9 EB85                <1>     jmp short .exit    
   633                              <1> .gotoNextClusterFat12OddNoX:
   634 00000EDB 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   635 00000EE0 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   636 00000EE5 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   637 00000EE8 EB0A                <1>     jmp short .fat12common
   638                              <1> .gotoNextClusterFat12EvenNoX:
   639                              <1>     ;Here the cluster is even and can't cross a sector boundary
   640 00000EEA 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   641 00000EEF 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   642                              <1> .fat12common:
   643 00000EF4 09F0                <1>     or eax, esi     ;Add the new entry bits
   644 00000EF6 6689441320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   645 00000EFB E960FFFFFF          <1>     jmp .exit
   646                              <1> 
   647                              <1> incrementFreeClusterCount:
   648                              <1> ;Cluster Deallocated Function
   649 00000F00 9C                  <1>     pushfq
   650 00000F01 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   651 00000F08 7403                <1>     je .exit
   652 00000F0A FF4531              <1>     inc dword [rbp + dpb.dFreeClustCnt]
   653                              <1> .exit:
   654 00000F0D 9D                  <1>     popfq
   655                              <1>     return
    13                              <2> %%_ret:
    14 00000F0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   656                              <1> decrementFreeClusterCount:
   657                              <1> ;Cluster Allocated Function
   658 00000F0F 9C                  <1>     pushfq
   659 00000F10 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   660 00000F17 7403                <1>     je .exit
   661 00000F19 FF4D31              <1>     dec dword [rbp + dpb.dFreeClustCnt]
   662                              <1> .exit:
   663 00000F1C 9D                  <1>     popfq
   664                              <1>     return
    13                              <2> %%_ret:
    14 00000F1D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   665                              <1> 
   666                              <1> getBytesPerCluster:
   667                              <1> ;Gets the bytes per cluster
   668                              <1> ;Input: rbp -> Current DPB
   669                              <1> ;Output: ecx = Total bytes per cluster
   670 00000F1E 50                  <1>     push rax
   671 00000F1F 52                  <1>     push rdx
   672 00000F20 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   673 00000F24 0FB64D04            <1>     movzx ecx, byte [rbp + dpb.bMaxSectorInCluster]
   674 00000F28 FFC1                <1>     inc ecx
   675 00000F2A F7E1                <1>     mul ecx
   676 00000F2C 89C1                <1>     mov ecx, eax
   677 00000F2E 5A                  <1>     pop rdx
   678 00000F2F 58                  <1>     pop rax
   679                              <1>     return
    13                              <2> %%_ret:
    14 00000F30 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   680                              <1> 
   681                              <1> readFSInfoSector:
   682                              <1> ;Given a DPB, will attempt to read the FS Info sector. Destroys all regs.
   683                              <1> ;Input: rbp -> DPB pointer for FAT32 volume. Silently returns ok
   684                              <1> ;               if the DPB is not FAT32.
   685                              <1> ;       rsi -> BPB for the FAT32 volume.
   686                              <1> ;Output: rbp -> DPB dNextFreeClst and dNumberOfFreeCluster fields
   687                              <1> ;               correctly filled in from the FSInfo sector, if appropriate.
   688 00000F31 51                  <1>     push rcx
   689 00000F32 E84FFBFFFF          <1>     call getFATtype
   690 00000F37 81F902000000        <1>     cmp ecx, 2  ;Is the DPB a FAT32 DPB?
   691 00000F3D 59                  <1>     pop rcx
   692 00000F3E 7578                <1>     jne .exit
   693                              <1> ;Only read the FSinfo sector if the drive has never been accessed before!
   694 00000F40 F64524FF            <1>     test byte [rbp + dpb.bAccessFlag], -1
   695 00000F44 7472                <1>     jz .exit
   696 00000F46 0FB74625            <1>     movzx eax, word [rsi + bpb32.FSinfo]    ;Get the FSInfo sector number
   697 00000F4A 85C0                <1>     test eax, eax   ;0 is an invalid value for this 
   698                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F4C 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F4E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   699 00000F4F 3DFFFF0000          <1>     cmp eax, 0FFFFh ;If this is unknown, return
   700                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F54 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F56 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   701 00000F57 48892D(0A070000)    <1>     mov qword [workingDPB], rbp ;Set this because it isnt set yet!
   702 00000F5E E8FFFAFFFF          <1>     call getBufForDOS   ;Now get the sector number
   703                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F63 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F65 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   704                              <1>     ;Now sanity check the sector data itself
   705 00000F66 817B2052526141      <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.leadSig], fsInfoSig1
   706 00000F6D 7549                <1>     jne .exit
   707 00000F6F 81BB04020000727241- <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.strucSig], fsInfoSig2
   707 00000F78 61                  <1>
   708 00000F79 753D                <1>     jne .exit
   709 00000F7B 81BB1C020000000055- <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.trailSig], fsInfoSig3
   709 00000F84 AA                  <1>
   710 00000F85 7531                <1>     jne .exit
   711                              <1> ;Here we can assume the struct is accessible. 
   712                              <1> ;We sanity check the struct values to ensure they are possible.
   713                              <1> ;We reset with some sane defaults in the event of bad data
   714 00000F87 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1  ;Start is default (clust 2)
   715 00000F8E C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1  ;Unknown
   716                              <1>     ;Start with next free check
   717 00000F95 8B830C020000        <1>     mov eax, dword [rbx + bufferHdr.dataarea + FSInfo.nextFree] 
   718 00000F9B 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   719 00000F9E 770A                <1>     ja .skipFirstFree
   720 00000FA0 3D02000000          <1>     cmp eax, 2
   721 00000FA5 7203                <1>     jb .skipFirstFree
   722 00000FA7 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax
   723                              <1> .skipFirstFree:
   724                              <1>     ;Now we do free count check
   725 00000FAA 8B8308020000        <1>     mov eax, dword [rbx + bufferHdr.dataarea + FSInfo.freeCount]
   726 00000FB0 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   727 00000FB3 7703                <1>     ja .exit
   728 00000FB5 894531              <1>     mov dword [rbp + dpb.dFreeClustCnt], eax
   729                              <1> .exit:
   730 00000FB8 F8                  <1>     clc
   731                              <1>     return
    13                              <2> %%_ret:
    14 00000FB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   732                              <1> 
   733                              <1> writeFSInfoSector:
   734                              <1> ;Will write an FS Info sector back to the disk.
   735                              <1> ;Input: rbp -> DPB of the disk we are writing the FSInfo date for.
   736                              <1> ;Output: CF=NC: Updated FSInfo fields if FAT32. CF=CY: Error reading disk
   737                              <1> 
   738 00000FBA 51                  <1>     push rcx
   739 00000FBB E8C6FAFFFF          <1>     call getFATtype
   740 00000FC0 81F902000000        <1>     cmp ecx, 2  ;Is the DPB a FAT32 DPB?
   741 00000FC6 59                  <1>     pop rcx
   742 00000FC7 F8                  <1>     clc         ;Clear the CF flag if not FAT32
   743                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000FC8 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000FCA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   744                              <1> 
   745 00000FCB 50                  <1>     push rax
   746 00000FCC 53                  <1>     push rbx
   747 00000FCD 51                  <1>     push rcx
   748 00000FCE 52                  <1>     push rdx
   749 00000FCF 56                  <1>     push rsi
   750 00000FD0 57                  <1>     push rdi
   751                              <1> 
   752 00000FD1 31C0                <1>     xor eax, eax        ;Get sector 0
   753 00000FD3 E88AFAFFFF          <1>     call getBufForDOS   ;Get a buffer Sector 0 pointed to be rbx
   754 00000FD8 0F8281000000        <1>     jc .exit
   755 00000FDE 0FB74345            <1>     movzx eax, word [rbx + bufferHdr.dataarea + bpb32.FSinfo]
   756 00000FE2 85C0                <1>     test eax, eax
   757 00000FE4 7479                <1>     jz .exit
   758 00000FE6 3DFFFF0000          <1>     cmp eax, 0FFFFh ;If this is unknown, return
   759 00000FEB 7472                <1>     je .exit
   760                              <1> ;First compute where the backup FSInfo is
   761 00000FED 89C1                <1>     mov ecx, eax    ;(e)ax has FSInfo sector number
   762 00000FEF 66034B47            <1>     add cx, word [rbx + bufferHdr.dataarea + bpb32.BkBootSec]    
   763                              <1>     ;cx now has the backup sector
   764                              <1> ;If they are equal, because backup boot sector is 0, set ecx to -1
   765 00000FF3 39C1                <1>     cmp ecx, eax
   766 00000FF5 BAFFFFFFFF          <1>     mov edx, -1
   767 00000FFA 0F44CA              <1>     cmove ecx, edx  ;Set ecx to -1 to avoid writing the same sector twice
   768                              <1>     
   769 00000FFD 51                  <1>     push rcx            ;Save the backup FSInfo sector value
   770 00000FFE E85FFAFFFF          <1>     call getBufForDOS   ;Now get the primary FSInfo sector
   771 00001003 5F                  <1>     pop rdi             ;Return the backup FSInfo sector value in rdi
   772 00001004 7259                <1>     jc .exit
   773                              <1> 
   774 00001006 31F6                <1>     xor esi, esi    ;Use as a dirty marker
   775 00001008 8B4D31              <1>     mov ecx, dword [rbp + dpb.dFreeClustCnt]
   776 0000100B 398B08020000        <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], ecx
   777 00001011 7408                <1>     je .checkFirst
   778                              <1>     ;Update the value
   779 00001013 898B08020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], ecx 
   780 00001019 FFC6                <1>     inc esi
   781                              <1> .checkFirst:
   782 0000101B 8B4D2D              <1>     mov ecx, dword [rbp + dpb.dNextFreeClst]
   783 0000101E 398B0C020000        <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], ecx
   784 00001024 7408                <1>     je .checkFlush
   785 00001026 898B0C020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], ecx
   786 0000102C FFC6                <1>     inc esi
   787                              <1> .checkFlush:
   788 0000102E 85F6                <1>     test esi, esi   ;If this is zero, we didn't write new values. Return
   789 00001030 742D                <1>     jz .exit
   790 00001032 E8CEF8FFFF          <1>     call markBufferDirty    ;Else, the sector is dirty. Mark for flushing!
   791                              <1>     ;Now since we have a dirty sector, we need to sync the backup sector too!
   792 00001037 81FFFFFFFFFF        <1>     cmp edi, -1 ;Do we have a backup sector? If not, simply return
   793 0000103D 7420                <1>     je .exit
   794 0000103F 89F8                <1>     mov eax, edi    ;Else get the backup FSInfo sector value in eax
   795 00001041 E81CFAFFFF          <1>     call getBufForDOS   ;Now get the sector pointer   
   796 00001046 7217                <1>     jc .exit            ;Fail to sync if this fails
   797                              <1>     ;Now we know there is something to write so write it!
   798                              <1>     ;Also CF=NC here
   799 00001048 8B4531              <1>     mov eax, dword [rbp + dpb.dFreeClustCnt]
   800 0000104B 898308020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], eax 
   801 00001051 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]
   802 00001054 89830C020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], eax
   803 0000105A E8A6F8FFFF          <1>     call markBufferDirty    ;Mark this buffer as dirty too
   804                              <1> .exit:
   805 0000105F 5F                  <1>     pop rdi
   806 00001060 5E                  <1>     pop rsi
   807 00001061 5A                  <1>     pop rdx
   808 00001062 59                  <1>     pop rcx
   809 00001063 5B                  <1>     pop rbx
   810 00001064 58                  <1>     pop rax
   811                              <1>     return
    13                              <2> %%_ret:
    14 00001065 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                                  %include "./src/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00001066 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 0000106D F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00001070 7408                <1>     jz .notNet
     6 00001072 B81C110000          <1>     mov eax, 0111Ch ;Network find next
     7 00001077 CD2F                <1>     int 2Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00001079 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 0000107A C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    11 00001081 E8D8680000          <1>     call dosCrit1Enter
    12 00001086 488D05(7A060000)    <1>     lea rax, tmpCDS
    13 0000108D 488905(12070000)    <1>     mov qword [workingCDS], rax ;Set the working CDS to be the tmp cds!
    14 00001094 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]   ;Get 1 based number back!
    15 00001096 0440                <1>     add al, "@"  ;Convert into letter
    16 00001098 E874640000          <1>     call buildNewCDS     ;Build a new CDS bypassing the real CDS!
    17 0000109D 7235                <1>     jc .critError   ;Return error if this fails
    18 0000109F 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
    19 000010A6 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr] 
    20 000010AA E888630000          <1>     call setWorkingDPB
    21 000010AF 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]
    22 000010B3 8805(09070000)      <1>     mov byte [workingDrv], al
    23                              <1>     ;mov byte [delChar], 0E5h
    24 000010B9 C605(E4060000)00    <1>     mov byte [fcbName + 11], 0  ;Set to this being a file we are searching for
    25 000010C0 C605(69040000)FF    <1>     mov byte [fileDirFlag], -1  ;Set to searching for a file!
    26 000010C7 E80F000000          <1>     call searchMoreDir  ;Now find the next one!
    27 000010CC 7206                <1>     jc .critError   ;Return error if this fails
    28                              <1> .errExit:
    29 000010CE E895680000          <1>     call dosCrit1Exit
    30                              <1>     return
    13                              <2> %%_ret:
    14 000010D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> .critError:
    32 000010D4 B812000000          <1>     mov eax, errNoFil
    33 000010D9 EBF3                <1>     jmp short .errExit
    34                              <1> searchMoreDir:
    35                              <1> ;The three directory variables are set up from the ffblock. 
    36                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    37                              <1> ;Current DTA is also used to contain the ff block address
    38                              <1> ;All registers can be trashed
    39 000010DB 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    40                              <1>     ;First copy the search template back then setup dirClustA and dirSect vars
    41 000010E2 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
    42 000010E9 57                  <1>     push rdi
    43 000010EA 488D7701            <1>     lea rsi, qword [rdi + ffBlock.template]
    44 000010EE 488D3D(D9060000)    <1>     lea rdi, fcbName
    45 000010F5 B90B000000          <1>     mov ecx, 11
    46 000010FA F3A4                <1>     rep movsb   ;Get copy the search template!
    47 000010FC 5F                  <1>     pop rdi
    48 000010FD F6471540            <1>     test byte [rdi + ffBlock.attribFnd], dirCharDev  ;Did we find a char dev?
    49 00001101 0F85F0000000        <1>     jnz .errorExit                              ;No more files if so!!
    50 00001107 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    51 0000110A 8805(FC060000)      <1>     mov byte [searchAttr], al   ;... and save it!
    52 00001110 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    53 00001113 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    54 00001119 8905(7B070000)      <1>     mov dword [dirClustPar], eax
    55                              <1>     ;Get number of 32 byte entries in a sector
    56 0000111F 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    57 00001122 3DFFFFFFFF          <1>     cmp eax, -1 ;If this is an invalid value, exit error!
    58 00001127 0F84CA000000        <1>     je .errorExit
    59 0000112D 8905(85070000)      <1>     mov dword [dirEntry], eax
    60                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    61 00001133 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    62                              <1>     ;Now get bytes per cluster
    63 00001136 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    64 00001138 813D(7F070000)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    64 00001140 0000                <1>
    65 00001142 0F8492000000        <1>     je .oldFat
    66 00001148 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    67 0000114C 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSecPerClustShift]
    68 00001150 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    69 00001152 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    70 00001154 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    71 00001156 31D2                <1>     xor edx, edx
    72 00001158 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    73                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    74                              <1>     ;edx has byte offset into cluster (or Root dir)
    75 0000115A 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    76                              <1>     ;Now compute sector offset into cluster
    77 0000115C 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    78 00001160 89D0                <1>     mov eax, edx    ;Move offset into cluster
    79 00001162 31D2                <1>     xor edx, edx
    80 00001164 F7F1                <1>     div ecx 
    81                              <1>     ;eax now has sector offset into cluster
    82                              <1>     ;edx has byte offset into sector 
    83 00001166 668905(83070000)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    84 0000116D 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    85                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    86 00001173 89D9                <1>     mov ecx, ebx
    87 00001175 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    88                              <1> .fatlp:
    89 00001178 E806FCFFFF          <1>     call readFAT
    90 0000117D 3DFFFFFFFF          <1>     cmp eax, -1
    91 00001182 7473                <1>     je .errorExit
    92 00001184 FFC9                <1>     dec ecx
    93 00001186 75F0                <1>     jnz .fatlp
    94 00001188 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    95                              <1> .skipFatWalk:
    96 0000118E 488D05BC000000      <1>     lea rax, searchDir.nextEp
    97 00001195 50                  <1>     push rax    ;Push the return address onto stack
    98 00001196 8B05(7F070000)      <1>     mov eax, dword [dirClustA]
    99 0000119C E850F9FFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   100 000011A1 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   101 000011A8 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   102                              <1> .common:
   103 000011AB E8BCF8FFFF          <1>     call getBufForDir
   104 000011B0 0F826B010000        <1>     jc searchDir.fnfError
   105 000011B6 E86A010000          <1>     call prepSectorSearch  ;rbx has the buffer ptr for this dir sector
   106                              <1>     ;Gets also in ecx the # of 32 byte entries a sector
   107 000011BB 8B05(85070000)      <1>     mov eax, dword [dirEntry]   ;Get 32 byte offset into directory
   108                              <1>     ;Need to convert into an offset into this sector
   109 000011C1 52                  <1>     push rdx
   110 000011C2 31D2                <1>     xor edx, edx
   111 000011C4 F7F1                <1>     div ecx     ;Divide dirEntry by max entries in sector. Remainder in edx.
   112 000011C6 29D1                <1>     sub ecx, edx ;Subtract the offset to get the number of entries left
   113 000011C8 C1E205              <1>     shl edx, 5  ;Multiply by 32 to turn into bytes to add to rsi
   114 000011CB 4801D6              <1>     add rsi, rdx    ;rsi points to current entry in the sector.
   115 000011CE 5A                  <1>     pop rdx
   116                              <1>     ;We continue AS IF this entry was bad
   117                              <1>     ;Now setup al as upon normal entry 
   118 000011CF 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   119 000011D5 E9C4010000          <1>     jmp findInBuffer.nextEntry ;Proceed from within to resume search properly!
   120                              <1>     ;The return address on the stack will return to the ep's pushed
   121                              <1> .oldFat:
   122                              <1> ;Old FAT 12/16 root dirs fall thru here only
   123                              <1> ;esi = byte ptr in root dir of entry
   124 000011DA 488D0509010000      <1>     lea rax, searchDir.oldNextEP
   125 000011E1 50                  <1>     push rax    ;Push return address onto the stack
   126 000011E2 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   127 000011E6 31D2                <1>     xor edx, edx
   128 000011E8 96                  <1>     xchg esi, eax
   129 000011E9 F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   130                              <1>     ;eax = Sector number 
   131                              <1>     ;edx = Byte offset within the sector
   132 000011EB 668905(83070000)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   133 000011F2 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   134 000011F5 EBB4                <1>     jmp short .common
   135                              <1> .errorExit:
   136 000011F7 F9                  <1>     stc
   137                              <1>     return
    13                              <2> %%_ret:
    14 000011F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> searchDir:
   139                              <1> ;Called in a level 1 critical section. 
   140                              <1> ;The directory variables are set and fcbName has the pattern to match
   141                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   142                              <1> ;All registers can be trashed
   143                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   144                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   145                              <1> 
   146 000011F9 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   147 00001200 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   148 00001207 F605(FC060000)08    <1>     test byte [searchAttr], dirVolumeID  ;If the attr has volid, intervene
   149 0000120E 7509                <1>     jnz .volIdSearch
   150 00001210 F605(5F040000)FF    <1>     test byte [volIdFlag], -1  ;Is volid search override flag set?
   151 00001217 7410                <1>     jz .notVolSearch    ;Skip the intervention if not set
   152                              <1> .volIdSearch:
   153                              <1> ;Here we do a volid search intervention. Always searches root dir.
   154 00001219 F605(69040000)FF    <1>     test byte [fileDirFlag], -1 ;If we are going down path, avoid invervention
   155 00001220 7407                <1>     jz .notVolSearch
   156 00001222 31C0                <1>     xor eax, eax ;Search the root dir.
   157 00001224 E89A060000          <1>     call prepSetupDirSearchVars
   158                              <1> .notVolSearch:
   159 00001229 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   160 0000122F 85C0                <1>     test eax, eax
   161 00001231 0F8498000000        <1>     jz .oldRoot
   162 00001237 E8B5F8FFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   163                              <1> .sectorLoop:
   164 0000123C E82BF8FFFF          <1>     call getBufForDir
   165 00001241 0F82DA000000        <1>     jc .fnfError
   166 00001247 E8D9000000          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   167                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   168 0000124C E8E0000000          <1>     call findInBuffer
   169                              <1> .nextEp:
   170                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001251 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001253 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   171 00001254 0F84A8000000        <1>     jz .chardev    ;CF=CY AND ZF=ZE => File not found
   172                              <1>     ;If ZF=ZE then chardev (i.e. we hit an entry starting with 00)
   173                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   174                              <1>     ;IF however, the next cluster is -1, then we return fail
   175 0000125A 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   176 00001260 8905(54070000)      <1>     mov dword [currClustD], eax
   177 00001266 668B05(83070000)    <1>     mov ax, word [dirSect]
   178 0000126D 8805(5C070000)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   179 00001273 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   180 00001277 488905(5D070000)    <1>     mov qword [currSectD], rax  
   181 0000127E C705(50070000)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   181 00001286 0000                <1>
   182 00001288 E837FAFFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
   183 0000128D 0F828E000000        <1>     jc .fnfError
   184 00001293 746D                <1>     jz .chardev    ;We are at the end of the directory and didnt find the file
   185 00001295 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Store the sector number here
   186 0000129C 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector in cluster
   187 000012A3 50                  <1>     push rax    ;Save the next sector we need to read
   188 000012A4 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   189 000012AA 3B05(54070000)      <1>     cmp eax, dword [currClustD] ;Did it change?
   190 000012B0 58                  <1>     pop rax
   191 000012B1 7489                <1>     je .sectorLoop  ;If not, we advanced sectors only
   192 000012B3 66C705(83070000)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   192 000012BB 00                  <1>
   193 000012BC 50                  <1>     push rax
   194 000012BD 8B05(54070000)      <1>     mov eax, dword [currClustD]
   195 000012C3 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Put new cluster number in var
   196 000012C9 58                  <1>     pop rax
   197 000012CA E96DFFFFFF          <1>     jmp .sectorLoop
   198                              <1> 
   199                              <1> .oldRoot:
   200                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   201                              <1> ; one large contiguous cluster.
   202                              <1> .oldSectorLp:
   203 000012CF 0FB705(83070000)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   204 000012D6 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   205 000012D9 E88EF7FFFF          <1>     call getBufForDir
   206 000012DE 7241                <1>     jc .fnfError
   207 000012E0 E840000000          <1>     call prepSectorSearch      ;rbx has the buffer pointer for this dir sector
   208 000012E5 E847000000          <1>     call findInBuffer
   209                              <1> .oldNextEP:
   210                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000012EA 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000012EC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   211 000012ED 7413                <1>     jz .chardev
   212 000012EF 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector in directory
   213 000012F6 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   214 000012FA 3905(85070000)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   215 00001300 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   216                              <1> .chardev:
   217                              <1> ;Now check for a char device ONLY if we are checking for file or dir!
   218                              <1> ;If exclusive dir on, fail!
   219 00001302 F605(69040000)FF    <1>     test byte [fileDirFlag], -1 ;Set if file/dir. Clear if only dir!
   220 00001309 7416                <1>     jz .fnfError    
   221 0000130B E8C0090000          <1>     call checkIfCharDevice
   222 00001310 720F                <1>     jc .fnfError    ;Not a char dev? Exit!
   223 00001312 E8F0090000          <1>     call buildCharDir
   224 00001317 31F6                <1>     xor esi, esi        ;Clear the CF flag
   225 00001319 488D35(5A060000)    <1>     lea rsi, curDirCopy ;Return with rsi pointing to the dir copy!
   226                              <1>     return
    13                              <2> %%_ret:
    14 00001320 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> .fnfError:
   228 00001321 F9                  <1>     stc
   229 00001322 B012                <1>     mov al, errNoFil
   230                              <1>     return
    13                              <2> %%_ret:
    14 00001324 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> prepSectorSearch:
   232                              <1> ;Input: rbx -> Buffer with Dir sector to search
   233                              <1> ;Output: rsi -> Start of the dir data area
   234                              <1> ;        ecx = Max number of 32 byte dir entries in sector buffer
   235 00001325 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   236 00001329 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   237 0000132D C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   238                              <1>     return
    13                              <2> %%_ret:
    14 00001330 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> findInBuffer:
   241                              <1> ;Input:  rsi = Sector buffer data area
   242                              <1> ;        cx = Number of entries to check in the sector
   243                              <1> ;Output: CF=CY => No entries found
   244                              <1> ;        ZF=NE => Keep searching in subsequent directories
   245                              <1> ;        ZF=ZE => End of directory reached early, stop
   246                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   247                              <1> ;        rsi = Points to start of the disk buffer directory entry
   248 00001331 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   249 00001337 E8B5000000          <1>     call adjustSearchAttr   ;Adjust the search attributes, including volid
   250                              <1> .searchMainLp:
   251                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   252 0000133C 8A25(08070000)      <1>     mov ah, byte [delChar]
   253 00001342 803E00              <1>     cmp byte [rsi], 00h
   254 00001345 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   255 00001347 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   256 00001349 7510                <1>     jne .notLookingForEmpty
   257                              <1> .emptySlot:
   258                              <1> ;Here we check if we are looking for an empty directory entry or
   259                              <1> ; we have reached the end of the file (if the first byte is 00h)
   260                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   261 0000134B 3A25(D9060000)      <1>     cmp ah, byte [fcbName] 
   262                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001351 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001353 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   263                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   264 00001354 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   265 00001357 7545                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   266 00001359 F9                  <1>     stc
   267                              <1>     return
    13                              <2> %%_ret:
    14 0000135A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   268                              <1> .notLookingForEmpty:
   269 0000135B 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   270 0000135E 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   271 00001361 F605(5F040000)FF    <1>     test byte [volIdFlag], -1   ;If this is set, intervene in search.
   272 00001368 7406                <1>     jz .notVolIdExclusive
   273 0000136A F6C408              <1>     test ah, dirVolumeID   ;If we are a volid, clear CF return
   274 0000136D 742F                <1>     jz .nextEntry
   275                              <1>     return
    13                              <2> %%_ret:
    14 0000136F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> .notVolIdExclusive:
   277                              <1> ;If any entry has the volid bit set, it is considered a VOL id only.
   278 00001370 803D(69040000)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   279 00001377 743C                <1>     je .exclusiveDir
   280 00001379 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume label?
   281 0000137B 743F                <1>     je .volFile ;If so, go here
   282 0000137D F6C408              <1>     test ah, dirVolumeID ;Is this file a vollbl that we are not looking for?
   283 00001380 751C                <1>     jnz .nextEntry
   284 00001382 84E4                <1>     test ah, ah ;Regular files are always accepted at this point!
   285 00001384 7408                <1>     jz .scanName
   286 00001386 3C16                <1>     cmp al, dirInclusive    ;Is this an inclusive search?
   287 00001388 7404                <1>     je .scanName            ;If so, we accept this file!
   288 0000138A 38C4                <1>     cmp ah, al              ;(ah=File bits)==(al=Search bits)?
   289 0000138C 7510                <1>     jne .nextEntry          ;If bits dont match now, we ignore entry
   290                              <1> .scanName:
   291                              <1> ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   292 0000138E 56                  <1>     push rsi
   293 0000138F 488D3D(D9060000)    <1>     lea rdi, fcbName ;Goto name template to search for
   294 00001396 E83E000000          <1>     call .nameCompare
   295 0000139B 5E                  <1>     pop rsi
   296 0000139C 7424                <1>     je .searchEntryFound
   297                              <1> .nextEntry:
   298                              <1> ;Go to next entry
   299 0000139E 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   300 000013A5 FF05(85070000)      <1>     inc dword [dirEntry] ;And denote that in variable
   301 000013AB FFC9                <1>     dec ecx
   302 000013AD 758D                <1>     jnz .searchMainLp
   303                              <1> .badExit:
   304 000013AF 31C0                <1>     xor eax, eax
   305 000013B1 FFC0                <1>     inc eax ;Clear ZF
   306 000013B3 F9                  <1>     stc
   307                              <1>     return
    13                              <2> %%_ret:
    14 000013B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   308                              <1> .exclusiveDir:
   309                              <1> ;Used when going down a path, dir bit simply need be set
   310 000013B5 F6C410              <1>     test ah, dirDirectory
   311 000013B8 75D4                <1>     jnz .scanName
   312 000013BA EBE2                <1>     jmp short .nextEntry
   313                              <1> 
   314                              <1> .volFile:
   315 000013BC 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   316 000013BE 74CE                <1>     je .scanName       ;If so, scan the name agrees
   317 000013C0 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   318                              <1> 
   319                              <1> .searchEntryFound:
   320                              <1> ;Here a good entry was found!
   321 000013C2 56                  <1>     push rsi
   322 000013C3 57                  <1>     push rdi
   323 000013C4 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   324 000013C6 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   325 000013CD B904000000          <1>     mov ecx, 32/8
   326 000013D2 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   327 000013D5 5F                  <1>     pop rdi
   328 000013D6 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   329 000013D7 F8                  <1>     clc
   330                              <1>     return
    13                              <2> %%_ret:
    14 000013D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   331                              <1> 
   332                              <1> .nameCompare:
   333                              <1> ;Input: rsi = source string
   334                              <1> ;       rdi = string template to compare against
   335                              <1> ;Output: ZF=ZE => Strings are ok
   336                              <1> ;        ZF=NZ => Strings not ok
   337                              <1> ;Accepts wildcards. Trashes al
   338 000013D9 51                  <1>     push rcx
   339 000013DA 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   340                              <1> .ncLp:
   341 000013DC 81F90B000000        <1>     cmp ecx, 11
   342 000013E2 740B                <1>     je .ncExit
   343 000013E4 FFC1                <1>     inc ecx
   344 000013E6 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   345 000013E7 74F3                <1>     je .ncLp    ;If equal, keep going
   346 000013E9 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   347 000013ED 74ED                <1>     je .ncLp
   348                              <1> .ncExit:
   349 000013EF 59                  <1>     pop rcx
   350                              <1>     return
    13                              <2> %%_ret:
    14 000013F0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> adjustSearchAttr:
   352                              <1> ;Converts the byte to a system only if the bit is set
   353                              <1> ;Input: eax = User selected search mask
   354                              <1> ;Output: eax = Modified search mask
   355 000013F1 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   356 000013F6 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   357                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000013FB 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000013FD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   358 000013FE B808000000          <1>     mov eax, dirVolumeID
   359                              <1>     return
    13                              <2> %%_ret:
    14 00001403 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> asciiToFCB:
   362                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   363                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   364                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   365                              <1> ;Name is space padded.
   366                              <1> ;Input: rsi = ASCII string buffer
   367                              <1> ;       rdi = FCB name buffer
   368                              <1> ;Output: al = Char that terminated the source string 
   369 00001404 53                  <1>     push rbx    
   370 00001405 57                  <1>     push rdi
   371 00001406 B90B000000          <1>     mov ecx, 11
   372 0000140B B020                <1>     mov al, " "
   373 0000140D F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   374 0000140F 5F                  <1>     pop rdi
   375 00001410 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   376                              <1> .processName:
   377 00001413 AC                  <1>     lodsb   ;Get the char in al
   378 00001414 E8E7610000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   379 00001419 84C0                <1>     test al, al
   380 0000141B 742D                <1>     jz .exit
   381 0000141D 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   382 0000141F 740E                <1>     je .extSpace
   383 00001421 3C2E                <1>     cmp al, "."
   384 00001423 7413                <1>     je .ext
   385                              <1>     ;Test if the char is valid
   386 00001425 E858630000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   387 0000142A 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   388 0000142C AA                  <1>     stosb   ;Store the char
   389 0000142D EBE4                <1>     jmp short .processName
   390                              <1> .extSpace:
   391                              <1> ;Now we scan for a period in the name
   392 0000142F AC                  <1>     lodsb   ;Get a char and increase rsi
   393 00001430 84C0                <1>     test al, al
   394 00001432 7416                <1>     jz .exit
   395 00001434 3C2E                <1>     cmp al, "."     ;If al is not a period...
   396 00001436 75F7                <1>     jne .extSpace   ; keep searching
   397                              <1> .ext:
   398 00001438 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   399                              <1> .processExt:
   400 0000143C AC                  <1>     lodsb
   401 0000143D 84C0                <1>     test al, al
   402 0000143F 7409                <1>     jz .exit
   403 00001441 3C20                <1>     cmp al, " "
   404 00001443 7405                <1>     je .exit
   405 00001445 AA                  <1>     stosb
   406 00001446 EBF4                <1>     jmp short .processExt
   407                              <1> .exitBadChar:
   408 00001448 30C0                <1>     xor al, al  ;Return a null terminator
   409                              <1> .exit:
   410 0000144A 5B                  <1>     pop rbx
   411                              <1>     return
    13                              <2> %%_ret:
    14 0000144B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> 
   413                              <1> FCBToAsciiz:
   414                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   415                              <1> ;Name is space padded too
   416                              <1> ;Input: rsi = FCB name buffer
   417                              <1> ;       rdi = ASCIIZ string buffer
   418 0000144C B908000000          <1>     mov ecx, 8
   419 00001451 F3A4                <1>     rep movsb   ;Move the name over
   420                              <1> .scanNameSpace:
   421 00001453 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   422 00001457 750D                <1>     jne .ext
   423 00001459 48FFCF              <1>     dec rdi
   424 0000145C FFC1                <1>     inc ecx
   425 0000145E 81F908000000        <1>     cmp ecx, 8
   426 00001464 72ED                <1>     jb .scanNameSpace
   427                              <1> .ext:
   428 00001466 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   429 0000146B 7506                <1>     jne .validExt
   430 0000146D 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   431 00001471 7415                <1>     je .exit
   432                              <1> .validExt:
   433 00001473 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   434 00001475 AA                  <1>     stosb
   435 00001476 B903000000          <1>     mov ecx, 3
   436 0000147B F3A4                <1>     rep movsb   ;Move the three extension chars over
   437                              <1> .scanExtSpace:
   438 0000147D 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   439 00001481 7505                <1>     jne .exit
   440 00001483 48FFCF              <1>     dec rdi
   441 00001486 EBF5                <1>     jmp short .scanExtSpace
   442                              <1> .exit:
   443 00001488 31C0                <1>     xor eax, eax
   444 0000148A AA                  <1>     stosb   ;Store a null at the end
   445                              <1>     return
    13                              <2> %%_ret:
    14 0000148B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> setupFFBlock:
   448                              <1> ;Sets up the find first block for the search
   449                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   450 0000148C 50                  <1>     push rax
   451 0000148D 53                  <1>     push rbx
   452 0000148E 56                  <1>     push rsi
   453 0000148F 57                  <1>     push rdi
   454 00001490 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   455 00001493 8A05(FC060000)      <1>     mov al, byte [searchAttr]
   456 00001499 243F                <1>     and al, 3Fh ;Clear upper two bits
   457 0000149B 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   458 0000149E 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   459 000014A5 FEC0                <1>     inc al  ;Convert into 1 based number to agree with DOS
   460 000014A7 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   461 000014A9 488D35(D9060000)    <1>     lea rsi, fcbName
   462 000014B0 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   463 000014B4 57                  <1>     push rdi
   464 000014B5 48B820202020202020- <1>     mov rax, "        "
   464 000014BE 20                  <1>
   465 000014BF 48AB                <1>     stosq
   466 000014C1 66AB                <1>     stosw
   467 000014C3 AA                  <1>     stosb
   468 000014C4 5F                  <1>     pop rdi
   469 000014C5 48A5                <1>     movsq   ;Move 8 chars
   470 000014C7 66A5                <1>     movsw   ;Move 2 chars
   471 000014C9 A4                  <1>     movsb   ;Move the final char
   472                              <1> 
   473 000014CA 8B05(85070000)      <1>     mov eax, dword [dirEntry]
   474 000014D0 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   475 000014D3 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
   476 000014D9 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   477 000014DC 8A05(65060000)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   478 000014E2 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   479 000014E5 8B05(70060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   480 000014EB 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   481 000014EE 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   482 000014F4 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   483 000014F7 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   484 000014FB 488D35(5A060000)    <1>     lea rsi, curDirCopy
   485 00001502 E845FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   486                              <1> 
   487 00001507 5F                  <1>     pop rdi
   488 00001508 5E                  <1>     pop rsi
   489 00001509 5B                  <1>     pop rbx
   490 0000150A 58                  <1>     pop rax
   491                              <1>     return
    13                              <2> %%_ret:
    14 0000150B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> getDrvLetterFromPath:   ;Int 2Fh, AX=121Ah
   494                              <1> ;Gets the drive letter for the path in al
   495                              <1> ;Input: rsi = Buffer to process
   496                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   497                              <1> ;       ZF=ZE and al = 0 => Null path
   498                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   499                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   500                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   501 0000150C 30C0                <1>     xor al, al
   502 0000150E 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   503                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001511 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001513 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   504 00001514 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   505                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001518 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000151A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   506 0000151B 66AD                <1>     lodsw   ;Get first word, rsi += 2
   507                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   508 0000151D 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   509 0000151F 2C60                <1>     sub al, 60h
   510                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001521 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001523 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   511 00001524 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   512                              <1>     return
    13                              <2> %%_ret:
    14 00001526 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> getDirPath:
   515 00001527 30C0                <1>     xor al, al   ;Set to Directory
   516 00001529 EB02                <1>     jmp short getPath
   517                              <1> getFilePath:
   518 0000152B B0FF                <1>     mov al, -1  ;Set to File
   519                              <1> getPath:
   520                              <1> ;Called with:
   521                              <1> ; rdi = SDA Buffer for filename
   522                              <1> ; rsi = Potentially unqualified filename
   523                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   524 0000152D 50                  <1>     push rax
   525 0000152E 57                  <1>     push rdi
   526 0000152F E877000000          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   527 00001534 5F                  <1>     pop rdi
   528 00001535 58                  <1>     pop rax
   529                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001536 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001538 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   530                              <1>     ;Now our name is FQ, we can search the for it!
   531 00001539 48813D(12070000)FF- <1>     cmp qword [workingCDS], -1  ;If there is no CDS associated with this path
   531 00001541 FFFFFF              <1>
   532 00001544 0F849B010000        <1>     je getPathNoCanon.netFFnoCDS ;It must be a net no CDS search!
   533 0000154A 8805(69040000)      <1>     mov byte [fileDirFlag], al 
   534 00001550 B0FF                <1>     mov al, -1
   535 00001552 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   536 00001558 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   537 0000155E C605(05070000)00    <1>     mov byte [parDirExist], 0   
   538 00001565 C605(04070000)00    <1>     mov byte [fileExist], 0     
   539 0000156C 8A05(09070000)      <1>     mov al, byte [workingDrv]
   540 00001572 FEC0                <1>     inc al
   541 00001574 488D7301            <1>     lea rsi, qword [rbx + 1]    ;Move the pointers past the machine name pathsep
   542 00001578 66813F5C5C          <1>     cmp word [rdi], "\\"        ;Did we resolve to remote path?
   543 0000157D 7424                <1>     je .net
   544 0000157F 488B1D(1E060000)    <1>     mov rbx, qword [fname1Ptr]
   545 00001586 4881C302000000      <1>     add rbx, 2  ;Now our path is completely normalised so this always works!
   546 0000158D 488D7301            <1>     lea rsi, qword [rbx + 1]
   547 00001591 FF35(12070000)      <1>     push qword [workingCDS] ;Save the original CDS to allow for subst to work
   548 00001597 E898010000          <1>     call pathWalk
   549 0000159C 8F05(12070000)      <1>     pop qword [workingCDS]
   550                              <1>     return
    13                              <2> %%_ret:
    14 000015A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> .net:
   552 000015A3 4889F7              <1>     mov rdi, rsi                ;Else, skip setting up vars for drive access
   553 000015A6 E994010000          <1>     jmp pathWalk.netEp          ;Still do all drive access using CDS, but over redir
   554                              <1>     ;The reason why this works is that DOS doesn't need to keep track of the 
   555                              <1>     ; internal vars for accessing a net drive. All accesses still occur via the
   556                              <1>     ; redir, and the redir can update its vars as it needs. The DOS pointers
   557                              <1>     ; point as is necessary on the path (with machine name prefix), and in the SDA
   558                              <1>     ; so the redir can do it's job.
   559                              <1> 
   560                              <1> canonicaliseFileName:
   561                              <1> ;Always trying to build and qualify a full pathname
   562                              <1> ;Does getPath without hitting the disk
   563 000015AB B0FF                <1>     mov al, -1
   564 000015AD 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   565 000015B3 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   566 000015B9 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   567 000015C0 FEC0                <1>     inc al  ;make al = 0
   568 000015C2 8805(2E060000)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   569 000015C8 E839000000          <1>     call getPathNoCanon.epAlt
   570                              <1>     retc    ;Error return
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000015CD 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000015CF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   571                              <1>     ;Check the last two chars to see if we have a null terminator.
   572                              <1>     ;If neither has a null terminator, add one
   573 000015D0 31C0                <1>     xor eax, eax
   574 000015D2 3807                <1>     cmp byte [rdi], al
   575                              <1>     retz                
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000015D4 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000015D6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   576 000015D7 3847FF              <1>     cmp byte [rdi - 1], al 
   577                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000015DA 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000015DC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   578 000015DD AA                  <1>     stosb
   579                              <1>     return
    13                              <2> %%_ret:
    14 000015DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   580                              <1> 
   581                              <1> getDirPathNoCanon:
   582                              <1> ;FCB only
   583 000015DF 31C0                <1>     xor eax, eax
   584 000015E1 4889FE              <1>     mov rsi, rdi
   585 000015E4 EB05                <1>     jmp short getPathNoCanon
   586                              <1> getFilePathNoCanon:
   587                              <1> ;Used when the path is constructed internally (as for FCB functions), and renameMain
   588                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   589 000015E6 B0FF                <1>     mov al, -1
   590 000015E8 4889FE              <1>     mov rsi, rdi
   591                              <1> getPathNoCanon:
   592                              <1> ;Called with:
   593                              <1> ; rdi = SDA Buffer for filename
   594                              <1> ; rsi = Potentially unqualified filename
   595                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   596 000015EB 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   597 000015F1 B0FF                <1>     mov al, -1
   598 000015F3 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   599 000015F9 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   600 00001600 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   601                              <1> .epAlt:
   602 00001606 C605(05070000)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   603 0000160D C605(04070000)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   604 00001614 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   605 0000161B 7431                <1>     jz .notServer
   606 0000161D E8EAFEFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in "X:\"
   607 00001622 E8405F0000          <1>     call getCDS ;Get the cds for the drive letter on the path
   608 00001627 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   609 00001629 56                  <1>     push rsi
   610 0000162A 57                  <1>     push rdi
   611 0000162B 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   612 00001632 50                  <1>     push rax
   613 00001633 E826630000          <1>     call dosCrit1Enter
   614 00001638 E85D5B0000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   615 0000163D E826630000          <1>     call dosCrit1Exit
   616 00001642 58                  <1>     pop rax
   617 00001643 5F                  <1>     pop rdi
   618 00001644 5E                  <1>     pop rsi
   619 00001645 0F83B4000000        <1>     jnc .driveOk
   620                              <1> .serverExit:
   621 0000164B B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   622                              <1>     return
    13                              <2> %%_ret:
    14 0000164D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   623                              <1> .notServer:
   624                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   625                              <1>     ; and only in truename mode
   626 0000164E F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;If set, we on disk hit mode
   627 00001655 7515                <1>     jnz .skipRemoteQualify      ;So skip!
   628 00001657 48C705(12070000)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   628 0000165F FFFFFF              <1>
   629 00001662 B823110000          <1>     mov eax, 1123h  ;Net Qualify Path name
   630 00001667 CD2F                <1>     int 2fh ;CF=CY if not resolved. CF=NC if resolved
   631                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001669 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000166B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   632                              <1> .skipRemoteQualify:
   633 0000166C E89BFEFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   634 00001671 9C                  <1>     pushfq  ;Save the flag state on stack
   635 00001672 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   636 00001673 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   637 00001676 E8795F0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   638 0000167B 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. UNC)
   639 0000167D E8725F0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   640 00001682 756B                <1>     jnz .notNet
   641 00001684 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   642 00001686 7567                <1>     jne .notNet
   643 00001688 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   644 00001689 9D                  <1>     popfq
   645 0000168A 66AD                <1>     lodsw
   646 0000168C 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   647 00001690 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   648                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   649                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   650                              <1> ; redirector Find First Without CDS
   651 00001692 8A1D(2E060000)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   652 00001698 C605(2E060000)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   653 0000169F 53                  <1>     push rbx
   654                              <1> .moveNetName: ;This sets up the machine name portion of the UNC path
   655 000016A0 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   656 000016A1 E85A5F0000          <1>     call uppercaseChar  ;Make char in al uppercase
   657 000016A6 84C0                <1>     test al, al
   658 000016A8 7435                <1>     jz .netEnd
   659 000016AA E8455F0000          <1>     call swapPathSeparator  ;If path sep, swap it
   660 000016AF AA                  <1>     stosb
   661 000016B0 75EE                <1>     jnz .moveNetName  ;If not a path separating char in al, keep looking
   662                              <1>     ;Skip all following pathseps if there are any
   663                              <1> .moveNetSharePtr:
   664 000016B2 AC                  <1>     lodsb
   665 000016B3 E83C5F0000          <1>     call swapPathSeparator
   666 000016B8 74F8                <1>     jz .moveNetSharePtr
   667 000016BA C60700              <1>     mov byte [rdi], 0   ;Null terminate path to make ASCIIZ
   668 000016BD 48FFCE              <1>     dec rsi ;More rsi back to the first char past the seps
   669 000016C0 84C0                <1>     test al, al ;Was this char null?
   670 000016C2 741B                <1>     jz .netEnd  ;Skip processing if so!
   671 000016C4 4889FB              <1>     mov rbx, rdi
   672 000016C7 48FFCB              <1>     dec rbx ;rbx points at the pathsep before the space for the first char
   673 000016CA E870000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   674 000016CF 721C                <1>     jc .netExitBad
   675                              <1>     ;Now if we have a trailing backslash, throw it away
   676                              <1>     ;rdi points to the null char of the path
   677 000016D1 8A47FF              <1>     mov al, byte [rdi - 1]  ;Get the char before the nullsep
   678 000016D4 E81B5F0000          <1>     call swapPathSeparator  ;Is it a pathsep?
   679 000016D9 7504                <1>     jnz .netEnd
   680 000016DB C647FF00            <1>     mov byte [rdi - 1], 0   ;Write a null if it is
   681                              <1> .netEnd:
   682 000016DF 5B                  <1>     pop rbx
   683 000016E0 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   684                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000016E2 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000016E4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   685                              <1> .netFFnoCDS:
   686 000016E5 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   687 000016EA CD2F                <1>     int 2Fh
   688                              <1>     return
    13                              <2> %%_ret:
    14 000016EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   689                              <1> .netExitBad:
   690 000016ED 5B                  <1>     pop rbx
   691                              <1>     return
    13                              <2> %%_ret:
    14 000016EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   692                              <1> .notNet:
   693                              <1> ;This is the normal case; paths can be relative, or absolute.
   694 000016EF 58                  <1>     pop rax ;Get the drive letter back
   695 000016F0 9D                  <1>     popfq   ;Get the flag state back
   696 000016F1 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   697                              <1> .pnfErr:
   698 000016F3 B003                <1>     mov al, errPnf  ;Null path error
   699 000016F5 F9                  <1>     stc
   700                              <1>     return
    13                              <2> %%_ret:
    14 000016F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   701                              <1> .notNull:
   702 000016F7 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   703 000016F9 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   704 000016FB B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   705 000016FD F9                  <1>     stc
   706                              <1>     return
    13                              <2> %%_ret:
    14 000016FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> .driveOk:
   708 000016FF 84C0                <1>     test al, al
   709 00001701 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   710                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   711 00001703 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   712 00001706 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   713 00001708 50                  <1>     push rax    ;Save the drive letter
   714 00001709 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   715 0000170A 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   716 0000170D E8E25E0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   717                              <1>     ;If al is a path separator, then this path is absolute.
   718 00001712 58                  <1>     pop rax ;Get back the drive letter
   719 00001713 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   720                              <1> .absoPath:
   721                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   722 00001715 48FFC6              <1>     inc rsi
   723 00001718 EB1A                <1>     jmp short .commonDir
   724                              <1> .curPath:
   725                              <1> ;This is only jumped to if we are relative the current drive
   726                              <1> ;rsi points to first char in path
   727                              <1> ;If this char is \ or /, then it is an absolute path.
   728 0000171A 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   729 00001720 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   730 00001722 50                  <1>     push rax    ;Save the current drive number
   731 00001723 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   732 00001725 E8CA5E0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   733 0000172A 58                  <1>     pop rax ;Get back the current drive number
   734 0000172B 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   735                              <1> .relMain:
   736 0000172D C605(01070000)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   737                              <1> .commonDir:
   738                              <1> ;rsi points to the start of the string we will be appending
   739                              <1> ;Fall through now
   740                              <1> pathWalk:
   741                              <1> ;Input: rsi must point to source buffer for path to expand
   742                              <1> ;       rdi must point to a destination buffer
   743                              <1> ;       al must contain the drive 1 based number
   744 00001734 E8E9000000          <1>     call prepareDir    ;Prepare the start of the path
   745 00001739 0F82D5000000        <1>     jc .badDriveExit 
   746                              <1> .netEp:
   747                              <1> ;For net path resolution (resolution ONLY) ptrs must point past "\\".
   748                              <1> ;For subst, resolution cannot go past backslash offset.
   749                              <1> ;For join, it is transparent.
   750 0000173F F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;Clear if not hitting disk!
   751 00001746 7420                <1>     jz .notNet                  ;Skip this if not hitting disk!
   752                              <1> ;Start diskhit by checking the cds here if hitting the disk. 
   753                              <1> ;If it is a network cds we make findfirst req. 
   754 00001748 57                  <1>     push rdi
   755 00001749 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   756 00001750 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   757 00001756 5F                  <1>     pop rdi
   758 00001757 740F                <1>     jz .notNet
   759 00001759 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS as in DOS, undocumented
   760 00001760 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS!
   761 00001765 CD2F                <1>     int 2fh 
   762                              <1>     return
    13                              <2> %%_ret:
    14 00001767 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   763                              <1> .notNet:
   764 00001768 803E00              <1>     cmp byte [rsi], 0   ;If rsi at the end of the string, exit for ROOT dir
   765 0000176B 7543                <1>     jnz .mainlp
   766                              <1>     ;Setup dummy dir data for Root directory
   767 0000176D 31C0                <1>     xor eax, eax
   768 0000176F 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   769 00001776 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   770 0000177D C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   771                              <1>     ;Now we check if we are on a JOIN drive. If so, we swap back to the 
   772                              <1>     ; join host! Only when hitting the disk though.
   773 00001784 F605(2E060000)FF    <1>     test byte [skipDisk], -1
   774 0000178B 0F8489000000        <1>     jz .exitGood
   775 00001791 57                  <1>     push rdi
   776 00001792 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]     ;Get the current CDS
   777 00001799 66F747430020        <1>     test word [rdi + cds.wFlags], cdsJoinDrive
   778 0000179F 5F                  <1>     pop rdi
   779 000017A0 7478                <1>     jz .exitGood    ;If not a join drive, exit (this never happens?)
   780 000017A2 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Use the join client CDS as source string!
   781 000017A9 B0FF                <1>     mov al, -1  ;Set to search for a dir as only dir can be mntpoint
   782 000017AB E93BFEFFFF          <1>     jmp getPathNoCanon
   783                              <1> .mainlp:
   784                              <1>     ;rbx must remain constant in this portion,
   785                              <1>     ; and is used to signify the first writable byte in the path
   786 000017B0 53                  <1>     push rbx
   787 000017B1 E83F010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   788 000017B6 5B                  <1>     pop rbx
   789 000017B7 7268                <1>     jc .exit    ;If this errors (bad chars in filename portion), exit bad 
   790 000017B9 84C0                <1>     test al, al
   791 000017BB 7507                <1>     jnz .notFile
   792 000017BD C605(05070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   793                              <1> .notFile:
   794 000017C4 53                  <1>     push rbx                ;The below messes up rbx
   795 000017C5 E866040000          <1>     call checkDevPath       ;Silently intervene DEVs if in truename mode!
   796 000017CA 5B                  <1>     pop rbx
   797 000017CB E80B020000          <1>     call searchForPathspec  ;Now search the directory
   798 000017D0 724F                <1>     jc .exit    ;If CF=CY, error exit. al has error code
   799 000017D2 E880020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   800 000017D7 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   801 000017D9 84C0                <1>     test al, al ;Exit if this pathspec was a file
   802 000017DB 743D                <1>     jz .exitGood
   803                              <1>     ;Here I have to take the cluster data from the found directory entry
   804                              <1>     ; and setup the search for the next pathspec portion
   805                              <1>     ;Copy necessary data from the current directory copy
   806 000017DD 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   807 000017E4 74CA                <1>     jz .mainlp
   808 000017E6 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   809 000017ED C1E010              <1>     shl eax, 10h    ;Shift it high
   810 000017F0 668B05(74060000)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   811                              <1>     ;eax now has the cluster number of the search
   812 000017F7 8905(7F070000)      <1>     mov dword [dirClustA], eax
   813 000017FD 8905(7B070000)      <1>     mov dword [dirClustPar], eax
   814 00001803 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   815 00001805 8905(85070000)      <1>     mov dword [dirEntry], eax
   816 0000180B 668905(83070000)    <1>     mov word [dirSect], ax
   817 00001812 EB9C                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   818                              <1> .badDriveExit:
   819 00001814 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   820                              <1>     return
    13                              <2> %%_ret:
    14 00001819 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   821                              <1> .exitGood:
   822 0000181A C605(04070000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   823                              <1> .exit:
   824                              <1>     return
    13                              <2> %%_ret:
    14 00001821 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   825                              <1> 
   826                              <1> prepareDir:
   827                              <1> ;Used to transfer the current directory if it is necessary.
   828                              <1> ;Always necessary if the user specified a subst drive. Else only if 
   829                              <1> ; a relative path is specified.
   830                              <1> ;Input: al = 1-based drive letter
   831                              <1> ;Output: rdi = Pointing at where to place chars from source string
   832                              <1> ;        rbx -> Pointing at the point before which chars cannot be placed
   833                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   834 00001822 56                  <1>     push rsi    ;Push ptr to source string
   835 00001823 E836610000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   836 00001828 E8CA5C0000          <1>     call getCDSNotJoin   ;Set internal variables, working CDS etc etc
   837 0000182D 7320                <1>     jnc .notJoin ;Very valid disk
   838 0000182F F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;Are we a join drive in truename?
   839 00001836 7510                <1>     jnz .okJoin                 ;If not, proceed. If so, fail.    
   840 00001838 F9                  <1>     stc
   841 00001839 EB19                <1>     jmp short .critExit    ;If the drive number in al is too great or a join drive specified.
   842                              <1> .getDPB: 
   843 0000183B 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
   844 00001842 E853590000          <1>     call getDiskDPB  ;Update working DPB and drv before searching
   845                              <1>     return
    13                              <2> %%_ret:
    14 00001847 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   846                              <1> .okJoin:
   847 00001848 E8EEFFFFFF          <1>     call .getDPB
   848 0000184D EB3A                <1>     jmp short .joinEp
   849                              <1> .notJoin:
   850 0000184F E8E7FFFFFF          <1>     call .getDPB
   851                              <1>     ;rbp = DPB ptr now
   852                              <1> .critExit:
   853 00001854 E80F610000          <1>     call dosCrit1Exit
   854 00001859 7253                <1>     jc .badDriveExit 
   855 0000185B 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   856                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   857                              <1>     ;If this CDS is a join drive... it can't be unless we truenamed our path!
   858                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   859                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   860                              <1>     ;Before we begin, we init rbx to point at the backslash offset of the path
   861 00001862 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Now get the CDS ptr into rsi
   862 00001869 4889FB              <1>     mov rbx, rdi
   863 0000186C 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   864 00001870 4801C3              <1>     add rbx, rax    ;Move rbx to the backslash offset for this drive
   865                              <1>     ;Now check if we have a subst to handle
   866 00001873 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   867 00001879 7535                <1>     jnz .prepDirSubst
   868 0000187B F605(01070000)FF    <1>     test byte [spliceFlag], -1
   869 00001882 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   870                              <1>     ;Else we copy the first two chars only (X:)
   871 00001884 66A5                <1>     movsw  
   872 00001886 B05C                <1>     mov al, "\"
   873 00001888 AA                  <1>     stosb   ;Store the path separator in internal buffer and increment rdi
   874                              <1> .joinEp:
   875 00001889 31C0                <1>     xor eax, eax    ;Get cluster 0
   876 0000188B EB1B                <1>     jmp short .prepDirExitSkip
   877                              <1> .prepLoop:
   878 0000188D AC                  <1>     lodsb
   879 0000188E 84C0                <1>     test al, al ;If al was null, then we stop
   880 00001890 7403                <1>     jz .prepDirExit
   881 00001892 AA                  <1>     stosb
   882 00001893 EBF8                <1>     jmp short .prepLoop
   883                              <1> .prepDirExit:
   884 00001895 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   885 00001899 7403                <1>     je .prepDirExitSkipPathsep
   886 0000189B B05C                <1>     mov al, "\"
   887 0000189D AA                  <1>     stosb   ;Store the path separator and increment rdi
   888                              <1> .prepDirExitSkipPathsep:
   889 0000189E 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   890 000018A5 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   891                              <1> .prepDirExitSkip:
   892 000018A8 E816000000          <1>     call prepSetupDirSearchVars
   893 000018AD F8                  <1>     clc ;Clear carry before exiting
   894                              <1> .badDriveExit:
   895 000018AE 5E                  <1>     pop rsi
   896                              <1>     return
    13                              <2> %%_ret:
    14 000018AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   897                              <1> .prepDirSubst:
   898 000018B0 51                  <1>     push rcx
   899 000018B1 0FB74E5D            <1>     movzx ecx, word [rsi + cds.wBackslashOffset]
   900                              <1> .prepDirCopy1:
   901 000018B5 F3A4                <1>     rep movsb   ;Copy the string over
   902 000018B7 59                  <1>     pop rcx
   903 000018B8 F605(01070000)FF    <1>     test byte [spliceFlag], -1
   904 000018BF 75D4                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   905 000018C1 EBCA                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   906                              <1> prepSetupDirSearchVars:
   907                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   908                              <1> ;       rbp -> Working DPB
   909 000018C3 51                  <1>     push rcx
   910 000018C4 31C9                <1>     xor ecx, ecx
   911 000018C6 66890D(83070000)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   912 000018CD 890D(85070000)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   913 000018D3 E8AEF1FFFF          <1>     call getFATtype ;Get type of fat
   914 000018D8 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   915 000018DE 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   916                              <1>     ;FAT 32 here
   917 000018E0 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   918 000018E2 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   919 000018E4 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   920                              <1> .psdsvExit:
   921 000018E7 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   922 000018ED 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   923 000018F3 59                  <1>     pop rcx
   924                              <1>     return 
    13                              <2> %%_ret:
    14 000018F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   925                              <1> 
   926                              <1> copyPathspec:
   927                              <1> ;1) Copies a path portion from the source buffer to the destination
   928                              <1> ;2) Advances rsi to the next null, \ or /
   929                              <1> ;3) Expands all * to ?'s
   930                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   931                              <1> ;    next path separator and rdi pointing to the previous pathsep
   932                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   933                              <1> ;    with rsi moving to path separator
   934                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   935                              <1> ;
   936                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   937                              <1> ;           rdi = Points to where to store it
   938                              <1> ;
   939                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   940                              <1> ;           rdi = First char of next space to store next pathspec
   941                              <1> ;           al = Last char stored (either \ or NULL)
   942                              <1> ;           CF=NC = OK path
   943                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   944                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   945 000018F5 57                  <1>     push rdi    ;Save the pointer into the user buffer
   946 000018F6 C605(8D040000)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   947 000018FD 488D3D(D9060000)    <1>     lea rdi, fcbName
   948 00001904 57                  <1>     push rdi
   949 00001905 B903000000          <1>     mov ecx, 3
   950 0000190A B820202020          <1>     mov eax, "    " ;Four spaces
   951 0000190F F3AB                <1>     rep stosd   ;Store 12 spaces
   952 00001911 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   953                              <1> 
   954 00001912 488D1D(E4060000)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   955 00001919 AC                  <1>     lodsb   ;Get first char from user path in al
   956 0000191A 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   957 0000191C 746B                <1>     je .cpsDots
   958 0000191E 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   959                              <1> ;First char is not a dot, so now check if starts with E5h? 
   960                              <1> ;If so, store 05h in its place!
   961 00001921 3CE5                <1>     cmp al, 0E5h
   962 00001923 7506                <1>     jne .cpsMainLoop
   963 00001925 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   964 00001928 B005                <1>     mov al, 05h
   965 0000192A AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   966                              <1> .cpsMainLoop:
   967 0000192B AC                  <1>     lodsb   ;Get the char in al and advance rsi
   968 0000192C 84C0                <1>     test al, al ;Is it the null char?
   969 0000192E 0F848A000000        <1>     jz .cpsStore  ;If so, terminate immediately
   970 00001934 E8BB5C0000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   971 00001939 0F848D000000        <1>     jz .cpsSkipPathseps ; and then exit with the final converted pathsep in al
   972 0000193F 3C2E                <1>     cmp al, "." ;Filename extension separator
   973 00001941 7420                <1>     je .cpsExtension
   974                              <1>     ;If we have space in the filename, we check to see if the next char is *
   975 00001943 3C2A                <1>     cmp al, "*" ;Wildcard?
   976 00001945 7430                <1>     je .cpsWildcard
   977 00001947 3C3F                <1>     cmp al, "?" ;Good wildcard?
   978 00001949 740C                <1>     je .store
   979 0000194B E8B05C0000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   980 00001950 E82D5E0000          <1>     call checkCharValid ; and check it is a valid char
   981 00001955 7472                <1>     je .cpsExitError
   982                              <1> .store:
   983 00001957 4839DF              <1>     cmp rdi, rbx
   984 0000195A 7442                <1>     je .cpsProcessName ;Skip any non-terminating chars
   985 0000195C AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   986 0000195D EBCC                <1>     jmp short .cpsMainLoop
   987                              <1> .cpsInvalidChar:
   988 0000195F 30C0                <1>     xor al, al
   989 00001961 EB3B                <1>     jmp short .cpsProcessName
   990                              <1> .cpsExtension:
   991                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   992 00001963 B903000000          <1>     mov ecx, 3 
   993 00001968 488D3D(E1060000)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   994 0000196F 57                  <1>     push rdi
   995 00001970 B020                <1>     mov al, " "
   996 00001972 F3AA                <1>     rep stosb
   997 00001974 5F                  <1>     pop rdi
   998 00001975 EBB4                <1>     jmp short .cpsMainLoop
   999                              <1> .cpsWildcard:
  1000                              <1> ;Fill the entire FCB filespec with ?'s.
  1001                              <1> ;We lookahead to the first char past the final "*" to prevent multiple
  1002                              <1> ; *'s from crashing DOS :)
  1003 00001977 AC                  <1>     lodsb   ;Get char, inc rsi
  1004 00001978 3C2A                <1>     cmp al, "*"
  1005 0000197A 74FB                <1>     je short .cpsWildcard
  1006 0000197C 48FFCE              <1>     dec rsi ;Go back to the first non-star char
  1007 0000197F B03F                <1>     mov al, "?"
  1008                              <1> .cpsWildcardLp:
  1009 00001981 AA                  <1>     stosb
  1010 00001982 4839DF              <1>     cmp rdi, rbx    ;We filled the FCB name field yet?
  1011 00001985 75FA                <1>     jne short .cpsWildcardLp
  1012 00001987 EBA2                <1>     jmp short .cpsMainLoop
  1013                              <1> 
  1014                              <1> .cpsDots:
  1015 00001989 AA                  <1>     stosb   ;Store the first dot
  1016 0000198A 8A06                <1>     mov al, byte [rsi]
  1017 0000198C 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
  1018 0000198E 752E                <1>     jne .cpsStore
  1019 00001990 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
  1020 00001991 8A06                <1>     mov al, byte [rsi]  ;Ensure that the .. is not followed by any chars
  1021 00001993 84C0                <1>     test al, al
  1022 00001995 7407                <1>     jz .cpsProcessName
  1023 00001997 E8585C0000          <1>     call swapPathSeparator  ;If the char following the .. is not null or pathsep, error
  1024 0000199C 752B                <1>     jnz .cpsExitError
  1025                              <1> .cpsProcessName:
  1026                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
  1027 0000199E 84C0                <1>     test al, al 
  1028 000019A0 741C                <1>     jz .cpsStore
  1029 000019A2 E84D5C0000          <1>     call swapPathSeparator
  1030 000019A7 7415                <1>     jz .cpsStore
  1031                              <1> .cpsFindTerminator:
  1032 000019A9 AC                  <1>     lodsb
  1033 000019AA 84C0                <1>     test al, al 
  1034 000019AC 7410                <1>     jz .cpsStore
  1035 000019AE E8415C0000          <1>     call swapPathSeparator
  1036 000019B3 7409                <1>     jz .cpsStore
  1037 000019B5 E8C85D0000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
  1038 000019BA 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
  1039                              <1>     ;If we encounter a terminator, convert to 0
  1040 000019BC 30C0                <1>     xor al, al
  1041                              <1> .cpsStore:
  1042 000019BE 488D3D(E4060000)    <1>     lea rdi, fcbName+11
  1043 000019C5 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
  1044 000019C6 5F                  <1>     pop rdi
  1045 000019C7 F8                  <1>     clc
  1046                              <1>     return
    13                              <2> %%_ret:
    14 000019C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1047                              <1> .cpsExitError:
  1048 000019C9 5F                  <1>     pop rdi
  1049 000019CA F9                  <1>     stc
  1050                              <1>     return
    13                              <2> %%_ret:
    14 000019CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1051                              <1> .cpsSkipPathseps:
  1052 000019CC AC                  <1>     lodsb
  1053 000019CD E8225C0000          <1>     call swapPathSeparator
  1054 000019D2 74F8                <1>     jz .cpsSkipPathseps
  1055 000019D4 48FFCE              <1>     dec rsi ;Go back to the first char in next section of the pathspec
  1056 000019D7 B05C                <1>     mov al, "\" ;Make sure to store a pathsep char
  1057 000019D9 EBE3                <1>     jmp short .cpsStore
  1058                              <1> 
  1059                              <1> searchForPathspec:
  1060                              <1>     ;Now search the current directory for this filename
  1061                              <1>     ;Find first using SDA ffBlock
  1062                              <1>     ;If al = 0, we have final file name or directory name
  1063                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
  1064                              <1>     ;Output: CF=CY => Error occured, al has error code (Fnf or Pnf)
  1065                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
  1066                              <1>     ;                 FF block somewhat setup
  1067                              <1>     ;Preserves rax, rbx, rsi,  rdi
  1068 000019DB 50                  <1>     push rax
  1069 000019DC 53                  <1>     push rbx
  1070 000019DD 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
  1071 000019DE 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
  1072 000019DF 0FB61D(69040000)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
  1073 000019E6 53                  <1>     push rbx    ;and push it onto the stack
  1074                              <1> ;Evaluate whether we are searching for a file for a directory
  1075 000019E7 84C0                <1>     test al, al
  1076 000019E9 741D                <1>     jz .sfpPNfile
  1077                              <1>     ;Fall if subdir
  1078 000019EB 488D3D(D9060000)    <1>     lea rdi, fcbName
  1079 000019F2 B03F                <1>     mov al, "?" ;Search for wildcard
  1080 000019F4 B90B000000          <1>     mov ecx, 11
  1081 000019F9 F2AE                <1>     repne scasb
  1082 000019FB 7452                <1>     je .sfpPnf  ;Path not found if a ? found in the name
  1083 000019FD B010                <1>     mov al, dirDirectory    ;We want a directory only search.
  1084 000019FF C605(69040000)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
  1085 00001A06 EB07                <1>     jmp short .sfpPNMain
  1086                              <1> .sfpPNfile:
  1087                              <1>     ;Here if we are searching for a file or directory as setup by search init
  1088 00001A08 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
  1089                              <1> .sfpPNMain:
  1090 00001A0F 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1091 00001A16 7418                <1>     je .sfpPNNoDisk
  1092 00001A18 E8DCF7FFFF          <1>     call searchDir
  1093 00001A1D 7211                <1>     jc .sfpPNNoDisk
  1094 00001A1F 803D(5A060000)05    <1>     cmp byte [curDirCopy], 05h 
  1095 00001A26 7507                <1>     jne .noAdjust
  1096                              <1>     ;Readjust when the start of a dir entry name is 05h
  1097 00001A28 C605(5A060000)E5    <1>     mov byte [curDirCopy], 0E5h
  1098                              <1> .noAdjust:
  1099 00001A2F F8                  <1>     clc ;Ensure the carry flag is clear here!
  1100                              <1> .sfpPNNoDisk:
  1101 00001A30 5B                  <1>     pop rbx
  1102 00001A31 881D(69040000)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1103 00001A37 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1104 00001A38 5E                  <1>     pop rsi
  1105 00001A39 5B                  <1>     pop rbx
  1106 00001A3A 58                  <1>     pop rax ;Get back the original al value
  1107                              <1>     retnc   ;Return if file found. Else, report what was not found correctly!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001A3B 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001A3D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1108 00001A3E 84C0                <1>     test al, al ;If we are on the last path comp, fail pnf!
  1109 00001A40 F9                  <1>     stc         ;Dont forget to set CF again!!
  1110 00001A41 B802000000          <1>     mov eax, errFnf
  1111                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001A46 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001A48 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1112 00001A49 B803000000          <1>     mov eax, errPnf ;Else it is path not found!
  1113                              <1>     return
    13                              <2> %%_ret:
    14 00001A4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1114                              <1> .sfpPnf:
  1115 00001A4F B803000000          <1>     mov eax, errPnf
  1116                              <1> .sfpErrExit:
  1117 00001A54 F9                  <1>     stc ;Set carry
  1118 00001A55 EBD9                <1>     jmp short .sfpPNNoDisk
  1119                              <1> 
  1120                              <1> addPathspecToBuffer:
  1121                              <1> ;Input: fcbName = Qualified pathname portion
  1122                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1123                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1124                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1125                              <1> ;rbx points to the "head of the path"
  1126                              <1> ;rsi points to the first char of the next portion if al is pathsep
  1127                              <1> ;Converts the special char if the filename starts with it!
  1128 00001A57 F605(2E060000)FF    <1>     test byte [skipDisk], -1
  1129                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001A5E 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001A60 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1130 00001A61 803D(D9060000)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1131 00001A68 746A                <1>     je .aptbDots
  1132                              <1>     ;Copy filename over to internal buffer
  1133                              <1> .aptbAddNull:
  1134 00001A6A 56                  <1>     push rsi    ;Save source pointer position
  1135 00001A6B 488D35(D9060000)    <1>     lea rsi, fcbName
  1136 00001A72 803E05              <1>     cmp byte [rsi], 05h
  1137 00001A75 7503                <1>     jne .notSpecialChar
  1138 00001A77 C606E5              <1>     mov byte [rsi], 0E5h
  1139                              <1> .notSpecialChar:
  1140 00001A7A E8CDF9FFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1141 00001A7F 48FFCF              <1>     dec rdi ;Go back to the in-situ null terminator char
  1142 00001A82 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1143 00001A83 E8C6000000          <1>     call .aptbInterveneEnterJoin
  1144                              <1>     retc    ;Return bad if a disk error occured.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001A88 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001A8A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1145                              <1> .aptbHandleTerminator:
  1146 00001A8B 8A05(E4060000)      <1>     mov al, byte [fcbName + 11] ;Get the actual terminator for this portion.
  1147 00001A91 84C0                <1>     test al, al
  1148 00001A93 741A                <1>     jz .aptbHandleNull
  1149 00001A95 E85A5B0000          <1>     call swapPathSeparator
  1150 00001A9A 0F85C7000000        <1>     jnz .aptbErrorExit
  1151                              <1> ;Handle path separator here directly
  1152 00001AA0 50                  <1>     push rax    ;Preserve the terminator char
  1153 00001AA1 8A47FF              <1>     mov al, byte [rdi - 1]
  1154 00001AA4 E84B5B0000          <1>     call swapPathSeparator  ;If the char before us is a pathsep, do nothing.
  1155 00001AA9 58                  <1>     pop rax
  1156 00001AAA 7426                <1>     jz .aptbExitOk 
  1157 00001AAC AA                  <1>     stosb   ;Now go past the pathsep we just placed
  1158 00001AAD EB23                <1>     jmp short .aptbExitOk
  1159                              <1> .aptbHandleNull:
  1160 00001AAF E85B000000          <1>     call .aptbAtHeadOfPath
  1161 00001AB4 7411                <1>     je .aptbHandleNullNoOverwritePrim
  1162 00001AB6 50                  <1>     push rax
  1163 00001AB7 8A47FF              <1>     mov al, byte [rdi - 1]  ;Is previous char a pathsep?
  1164 00001ABA E8355B0000          <1>     call swapPathSeparator
  1165 00001ABF 58                  <1>     pop rax
  1166 00001AC0 750E                <1>     jnz .aptbHandleNullNoOverwrite
  1167 00001AC2 8847FF              <1>     mov byte [rdi - 1], al  ;Overwrite it!
  1168 00001AC5 EB0B                <1>     jmp short .aptbExitOk
  1169                              <1> .aptbHandleNullNoOverwritePrim:
  1170 00001AC7 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1171 00001ACB 7403                <1>     je short .aptbHandleNullNoOverwrite
  1172                              <1>     ;This handles trailing slashes that are not right at the head of the path
  1173 00001ACD 48FFCF              <1>     dec rdi
  1174                              <1> .aptbHandleNullNoOverwrite:
  1175 00001AD0 8807                <1>     mov byte [rdi], al  ;Write in a null
  1176                              <1> .aptbExitOk:
  1177 00001AD2 F8                  <1>     clc
  1178                              <1>     return
    13                              <2> %%_ret:
    14 00001AD3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1179                              <1> .aptbDots:
  1180                              <1> ;For one dot, we pull the terminating null to rdi
  1181                              <1> ;For two dots, we search backwards for the previous "\"
  1182 00001AD4 803D(DA060000)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1183 00001ADB 7409                <1>     je .aptbMoreDots
  1184 00001ADD C605(D9060000)20    <1>     mov byte [fcbName], " "
  1185 00001AE4 EB84                <1>     jmp short .aptbAddNull
  1186                              <1> .aptbMoreDots:
  1187                              <1> ;Here we have two dots
  1188 00001AE6 E824000000          <1>     call .aptbAtHeadOfPath  ;Are we at the start of the path?
  1189 00001AEB 742B                <1>     je .aptbInterveneExitJoin ;If so, it must be join or fail
  1190                              <1> ;Else, we are able to decrement.
  1191 00001AED 4881EF02000000      <1>     sub rdi, 2  ;Go past the pathsep infront of us.
  1192                              <1> .aptbDotsLp:
  1193 00001AF4 E816000000          <1>     call .aptbAtHeadOfPath  ;Are we safe to proceed?
  1194 00001AF9 7490                <1>     je .aptbHandleTerminator
  1195 00001AFB 48FFCF              <1>     dec rdi ;Decrement the pointer by one
  1196 00001AFE 8A07                <1>     mov al, byte [rdi]  ;Get the char
  1197 00001B00 E8EF5A0000          <1>     call swapPathSeparator  ;Is this a valid pathsep?
  1198 00001B05 75ED                <1>     jnz .aptbDotsLp ;If not, keep searching
  1199 00001B07 48FFC7              <1>     inc rdi ;Now go just past the new pathsep
  1200 00001B0A E97CFFFFFF          <1>     jmp .aptbHandleTerminator
  1201                              <1> .aptbAtHeadOfPath:
  1202                              <1> ;Returns ZF=ZE if at head of path.
  1203 00001B0F 57                  <1>     push rdi
  1204 00001B10 48FFCF              <1>     dec rdi
  1205 00001B13 4839FB              <1>     cmp rbx, rdi    ;Are we right at the start of the path?
  1206 00001B16 5F                  <1>     pop rdi
  1207                              <1>     return
    13                              <2> %%_ret:
    14 00001B17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1208                              <1> .aptbInterveneExitJoin:
  1209                              <1> ;Here, if we are on a join CDS, go to the root of the original drive.
  1210 00001B18 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1211 00001B1F 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsJoinDrive | cdsValidDrive
  1212 00001B25 7540                <1>     jne .aptbErrorExit    ;If it is not, we error return (filenotfound)
  1213                              <1>     ;Now we change the drive letter and return
  1214 00001B27 8A4500              <1>     mov al, byte [rbp]  ;Get the first char of the path 
  1215 00001B2A 8847FD              <1>     mov byte [rdi - 3], al  ;Replace the char in destination buffer
  1216 00001B2D 2C40                <1>     sub al, "@" ;Convert to a 1 based drive number
  1217 00001B2F E8C3590000          <1>     call getCDSNotJoin
  1218                              <1>     retc ;If this errors, something is really wrong. Propagate error.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001B34 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001B36 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1219 00001B37 56                  <1>     push rsi
  1220 00001B38 57                  <1>     push rdi
  1221 00001B39 53                  <1>     push rbx
  1222 00001B3A 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1223 00001B41 E854560000          <1>     call getDiskDPB 
  1224 00001B46 5B                  <1>     pop rbx
  1225 00001B47 5F                  <1>     pop rdi
  1226 00001B48 5E                  <1>     pop rsi
  1227 00001B49 E93DFFFFFF          <1>     jmp .aptbHandleTerminator
  1228                              <1> .aptbInterveneEnterJoin:
  1229                              <1> ;Handles join paths.
  1230 00001B4E F605(9C000000)FF    <1>     test byte [numJoinDrv], -1  ;Test if we have any join drives
  1231                              <1>     retz    ;Return if not 
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001B55 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001B57 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1232 00001B58 56                  <1>     push rsi    ;rsi already points to the next pathspec
  1233 00001B59 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
  1234 00001B60 E81B000000          <1>     call handleJoin ;Enters crit section, changes the CDS
  1235 00001B65 5E                  <1>     pop rsi
  1236                              <1>     return
    13                              <2> %%_ret:
    14 00001B66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1237                              <1> .aptbErrorExit:
  1238 00001B67 B002                <1>     mov al, errFnf
  1239 00001B69 C605(0D040000)03    <1>     mov byte [errorAction], eActUsr
  1240 00001B70 C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
  1241 00001B77 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
  1242 00001B7E F9                  <1>     stc
  1243                              <1>     return
    13                              <2> %%_ret:
    14 00001B7F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1244                              <1> 
  1245                              <1> handleJoin:
  1246                              <1> ;Intervenes if the subdirectory we are entering is joined.
  1247                              <1> ;This path cannot be on a net redir drive, local redir is ok.
  1248                              <1> ;Input:
  1249                              <1> ; rsi = First char of potential JOIN'ed pathspec.
  1250                              <1> ; rbx = Ptr to the pathsep behind which we cannot traverse.
  1251                              <1> ; rax = 0
  1252                              <1> ;Output:
  1253                              <1> ;If no match, no effect.
  1254                              <1> ;If a matched path is found, working CDS, DPB and drv are set for the
  1255                              <1> ; join drive. rsi is advanced to the next path componant.
  1256                              <1> ;If CF=CY => Disk detection error
  1257 00001B80 51                  <1>     push rcx
  1258 00001B81 55                  <1>     push rbp
  1259 00001B82 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1260 00001B89 0FB74D43            <1>     movzx ecx, word [rbp + cds.wFlags]
  1261 00001B8D F7C100800000        <1>     test ecx, cdsRedirDrive     ;Cannot join over networks.
  1262 00001B93 740C                <1>     jz .okToGo
  1263 00001B95 F7C180000000        <1>     test ecx, cdsRdirLocDrive   ;If not a local redir, exit (cannot be net).
  1264 00001B9B 0F848C000000        <1>     jz .exitNoCrit
  1265                              <1> .okToGo:
  1266 00001BA1 E8B85D0000          <1>     call dosCrit1Enter
  1267 00001BA6 488B2D(65000000)    <1>     mov rbp, qword [cdsHeadPtr]
  1268 00001BAD 31C9                <1>     xor ecx, ecx    ;Use as a CDS counter
  1269                              <1> .checkCDS:
  1270 00001BAF 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsValidDrive | cdsJoinDrive
  1271 00001BB5 7560                <1>     jne .gotoNextCDS
  1272                              <1> .scanCDSName:
  1273                              <1> ;Get the length of the CDS path componant to check
  1274 00001BB7 51                  <1>     push rcx
  1275 00001BB8 57                  <1>     push rdi
  1276 00001BB9 56                  <1>     push rsi        ;Have rsi point to the user path buffer
  1277 00001BBA 4889EF              <1>     mov rdi, rbp    ;Have rdi point to the CDS path
  1278 00001BBD E88E5A0000          <1>     call strlen     ;Get length of the path componant in ecx
  1279 00001BC2 FFC9                <1>     dec ecx ;Dont wanna compare the terminator
  1280 00001BC4 F3A6                <1>     repe cmpsb      ;Ensure strings are equal
  1281 00001BC6 754C                <1>     jnz .notString
  1282                              <1>     ;Now ensure rsi is pointing at a pathsep/terminator char too.
  1283 00001BC8 AC                  <1>     lodsb   ;Get this char and advance rsi to next path componant.
  1284 00001BC9 E8265A0000          <1>     call swapPathSeparator
  1285 00001BCE 7407                <1>     jz .goodString
  1286 00001BD0 84C0                <1>     test al, al
  1287 00001BD2 7540                <1>     jnz .notString
  1288 00001BD4 48FFCE              <1>     dec rsi ;If this is a null char, point rsi back to it
  1289                              <1> .goodString:
  1290                              <1>     ;Here we know we have the right string.
  1291 00001BD7 59                  <1>     pop rcx ;Trash original rsi
  1292 00001BD8 5F                  <1>     pop rdi ;Get original rdi value (i.e. our internal built path).
  1293 00001BD9 59                  <1>     pop rcx 
  1294                              <1>     ;Now store the path in the original CDS before intervening
  1295                              <1>     ; in the path
  1296 00001BDA 48892D(12070000)    <1>     mov qword [workingCDS], rbp  ;Save the pointer here
  1297 00001BE1 56                  <1>     push rsi    ;Save ptr to the possible null char!
  1298 00001BE2 57                  <1>     push rdi
  1299 00001BE3 4889EF              <1>     mov rdi, rbp    ;Needs to be called with rdi = CDS ptr
  1300 00001BE6 53                  <1>     push rbx    ;Preserve the head of the path
  1301 00001BE7 E8AE550000          <1>     call getDiskDPB ;Rebuild DPB if needed. Sets working DPB and drive
  1302 00001BEC 5B                  <1>     pop rbx
  1303 00001BED 5F                  <1>     pop rdi
  1304 00001BEE 5E                  <1>     pop rsi
  1305 00001BEF 7237                <1>     jc .exit ;If return with CF=CY, this failed. Error exit
  1306 00001BF1 8A05(09070000)      <1>     mov al, byte [workingDrv]   ;Get 0 based number
  1307 00001BF7 0441                <1>     add al, "A" ;Turn into the letter to store in CDS path
  1308 00001BF9 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1309 00001BFD 7403                <1>     je .notNet
  1310 00001BFF F9                  <1>     stc     ;Net drives should be explicitly mounted on a drive first!
  1311 00001C00 EB26                <1>     jmp short .exit
  1312                              <1> .notNet:
  1313                              <1> ; Join entry intervention occurs here.
  1314 00001C02 8843FE              <1>     mov byte [rbx - 2], al
  1315 00001C05 488D7B01            <1>     lea rdi, qword [rbx + 1]    ;Go to first byte past pathsep
  1316                              <1> .pullLp:
  1317 00001C09 AC                  <1>     lodsb
  1318 00001C0A AA                  <1>     stosb
  1319 00001C0B 84C0                <1>     test al, al
  1320 00001C0D 75FA                <1>     jnz .pullLp
  1321 00001C0F 48FFCF              <1>     dec rdi
  1322 00001C12 EB14                <1>     jmp short .exit
  1323                              <1> .notString:
  1324 00001C14 5E                  <1>     pop rsi
  1325 00001C15 5F                  <1>     pop rdi
  1326 00001C16 59                  <1>     pop rcx
  1327                              <1> .gotoNextCDS:
  1328 00001C17 4881C55F000000      <1>     add rbp, cds_size
  1329 00001C1E FFC1                <1>     inc ecx 
  1330 00001C20 3A0D(78000000)      <1>     cmp cl, byte [lastdrvNum]
  1331 00001C26 7587                <1>     jnz .checkCDS
  1332                              <1> .exit:
  1333 00001C28 E83B5D0000          <1>     call dosCrit1Exit
  1334                              <1> .exitNoCrit:
  1335 00001C2D 5D                  <1>     pop rbp
  1336 00001C2E 59                  <1>     pop rcx
  1337                              <1>     return
    13                              <2> %%_ret:
    14 00001C2F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1338                              <1> 
  1339                              <1> checkDevPath:
  1340                              <1> ;Only works in truename and in the root dir of a disk. If the search pattern
  1341                              <1> ; is a char device, replace the root pathsep with a UNIX pathsep.
  1342                              <1> ;Else if we are searching for the DEV folder in the root of a disk
  1343                              <1> ; and the next componant we are searching for is a char device, we 
  1344                              <1> ; only copy over the char device to the destination buffer with a UNIX
  1345                              <1> ; pathsep. Else, we do nothing. Clobbers rbx!
  1346                              <1> ;Input: rsi = Pointer to the next path spec
  1347                              <1> ;       rdi = Buffer where to add it
  1348                              <1> ;Output: If \DEV\devicename then copy /devicename to buffer.
  1349                              <1> ;        If devicename in the root dir, then replace pathsep
  1350 00001C30 F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;If set, return!
  1351                              <1>     retnz             
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001C37 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001C39 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1352                              <1> ;First check we are searching in the root dir!
  1353 00001C3A 66817FFE3A5C        <1>     cmp word [rdi - 2], ":\" 
  1354                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001C40 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001C42 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1355                              <1> ;Now check to see if fcbname is DEV
  1356 00001C43 50                  <1>     push rax
  1357 00001C44 48B844455620202020- <1>     mov rax, "DEV     "
  1357 00001C4D 20                  <1>
  1358 00001C4E 483905(D9060000)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1359 00001C55 58                  <1>     pop rax
  1360 00001C56 7566                <1>     jne .checkDevice   ;Maybe this is a device if not DEV
  1361 00001C58 813D(E1060000)2020- <1>     cmp dword [fcbName + 8], "   \"
  1361 00001C60 205C                <1>
  1362 00001C62 755A                <1>     jne .checkDevice    ;Was not \DEV\, check if it was \CON or something
  1363                              <1>     ;So here we are in the DEV dir. Check if \DEV or just DEV
  1364 00001C64 F605(01070000)FF    <1>     test byte [spliceFlag], -1
  1365                              <1>     retz    ;Exit if relative!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001C6B 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001C6D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1366                              <1>     ;Else, don't add DEV to the name, replace "\" with a "/", move rsi past it
  1367 00001C6E 56                  <1>     push rsi    ;Save if not followed by dev!
  1368 00001C6F 57                  <1>     push rdi    ;If followed by dev, not a problem, we end the pathbuild!
  1369 00001C70 488D3D(D9060000)    <1>     lea rdi, fcbName
  1370 00001C77 E888F7FFFF          <1>     call asciiToFCB    ;Advances rsi
  1371                              <1>     ;Returns in al the terminating char of the source string
  1372 00001C7C 5F                  <1>     pop rdi
  1373 00001C7D 5E                  <1>     pop rsi
  1374                              <1>     ;If al is a pathsep, fail 
  1375 00001C7E E871590000          <1>     call swapPathSeparator  ;Device names cannot be terminated with a "\" or "/"
  1376 00001C83 7409                <1>     jz .repDev   ;Thus this is not a device, normal search!
  1377                              <1>     ;mov byte [fcbName + 11], 0 ;Store terminator in fcbName field
  1378 00001C85 53                  <1>     push rbx
  1379 00001C86 E845000000          <1>     call checkIfCharDevice
  1380 00001C8B 5B                  <1>     pop rbx ;Don't need bh yet
  1381 00001C8C 7322                <1>     jnc .pathSepExit    ;If this is a char dev, jump down
  1382                              <1> .repDev:
  1383                              <1> ;Componant after DEV was not a char dev, replace DEV back in the count!
  1384 00001C8E C705(D9060000)4445- <1>     mov dword [fcbName], "DEV "
  1384 00001C96 5620                <1>
  1385 00001C98 C705(DD060000)2020- <1>     mov dword [fcbName + 4], "    "
  1385 00001CA0 2020                <1>
  1386 00001CA2 C705(E1060000)2020- <1>     mov dword [fcbName + 8], "   \" 
  1386 00001CAA 205C                <1>
  1387 00001CAC B05C                <1>     mov al, "\" ;\DEV\ was a dir, report it was so!
  1388 00001CAE EB0C                <1>     jmp short .exit
  1389                              <1> .pathSepExit:
  1390                              <1> ;Here only if the device was determined to be a char device.
  1391 00001CB0 30C0                <1>     xor al, al
  1392 00001CB2 8805(E4060000)      <1>     mov byte [fcbName + 11], al ;Store null pathsep here!
  1393 00001CB8 C647FF2F            <1>     mov byte [rdi - 1], "/" ;Store reverse pathsep here!
  1394                              <1> .exit:
  1395 00001CBC F8                  <1>     clc
  1396                              <1>     return
    13                              <2> %%_ret:
    14 00001CBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1397                              <1> .checkDevice:
  1398 00001CBE E80D000000          <1>     call checkIfCharDevice  ;Check if what we already have is a chardev?
  1399 00001CC3 72F7                <1>     jc .exit                ;If not a device, silently return
  1400 00001CC5 803D(E4060000)00    <1>     cmp byte [fcbName + 11], 0  ;If null, its a char dev in the root!
  1401 00001CCC 74E2                <1>     je .pathSepExit
  1402 00001CCE EBEC                <1>     jmp short .exit         ;Else its gonna fail! Char dev as path comp... eek!
  1403                              <1> 
  1404                              <1> checkIfCharDevice:  ;Int 2Fh AX=1223h
  1405                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1406                              <1> ; device driver chain. 
  1407                              <1> ;Output: CF=CY if not found
  1408                              <1> ;        CF=NC if found
  1409                              <1> ;           BH = Low byte of the device attribute word
  1410 00001CD0 50                  <1>     push rax
  1411 00001CD1 57                  <1>     push rdi
  1412 00001CD2 488B05(D9060000)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1413 00001CD9 488D3D(7A000000)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1414                              <1> .checkName:
  1415 00001CE0 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1416 00001CE4 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1417 00001CE6 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1418 00001CE9 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1419 00001CEB 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1420 00001CEE 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1421 00001CF1 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1422 00001CF5 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1423                              <1> .walkList:
  1424 00001CF7 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1425 00001CFA 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1426 00001D01 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1427 00001D03 F9                  <1>     stc
  1428                              <1> .exit:
  1429 00001D04 5F                  <1>     pop rdi
  1430 00001D05 58                  <1>     pop rax
  1431                              <1>     return
    13                              <2> %%_ret:
    14 00001D06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1432                              <1> 
  1433                              <1> buildCharDir:
  1434                              <1> ;Build a dummy directory entry for the char device in FCBName
  1435                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1436 00001D07 50                  <1>     push rax
  1437 00001D08 57                  <1>     push rdi
  1438 00001D09 C605(E4060000)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1439 00001D10 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1440                              <1>     ;Zero the directory copy (32 bytes)
  1441 00001D17 50                  <1>     push rax
  1442 00001D18 51                  <1>     push rcx
  1443 00001D19 57                  <1>     push rdi
  1444 00001D1A 31C0                <1>     xor eax, eax    ;Zero rax
  1445 00001D1C B904000000          <1>     mov ecx, 4
  1446 00001D21 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1447 00001D24 5F                  <1>     pop rdi
  1448 00001D25 59                  <1>     pop rcx
  1449 00001D26 58                  <1>     pop rax
  1450 00001D27 C705(85070000)FFFF- <1>     mov dword [dirEntry], -1    ;Indicate invalid offset into dir
  1450 00001D2F FFFF                <1>
  1451 00001D31 488B05(D9060000)    <1>     mov rax, qword [fcbName]
  1452 00001D38 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1453 00001D3B B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1454 00001D40 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1455 00001D43 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1456                              <1>     ;Get date and time and set the write time in the directory entry
  1457 00001D47 E8E1120000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1458 00001D4C E8C7130000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1459 00001D51 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1460 00001D54 31C0                <1>     xor eax, eax
  1461 00001D56 5F                  <1>     pop rdi
  1462 00001D57 58                  <1>     pop rax
  1463                              <1>     return
    13                              <2> %%_ret:
    14 00001D58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1464                              <1> 
  1465                              <1> checkFailingComp:
  1466                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1467                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1468                              <1> ;Returns: ZF=ZE => Last path componant
  1469                              <1> ;         ZF=NZ => Not last path componant
  1470 00001D59 50                  <1>     push rax
  1471 00001D5A 8A05(E4060000)      <1>     mov al, byte [fcbName + 11]
  1472 00001D60 84C0                <1>     test al, al
  1473 00001D62 58                  <1>     pop rax
  1474                              <1>     return
    13                              <2> %%_ret:
    14 00001D63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                                  %include "./src/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 00001D64 4889D7              <1>     mov rdi, rdx
     8 00001D67 E8E4580000          <1>     call strlen
     9 00001D6C 81F940000000        <1>     cmp ecx, MAX_FSPEC
    10 00001D72 761E                <1>     jbe .okLength
    11                              <1> .badLen:
    12 00001D74 B805000000          <1>     mov eax, errAccDen
    13 00001D79 E92B5C0000          <1>     jmp extErrExit
    14                              <1> .badFile:
    15 00001D7E B802000000          <1>     mov eax, errFnf
    16 00001D83 E9215C0000          <1>     jmp extErrExit
    17                              <1> .badPath:
    18 00001D88 B803000000          <1>     mov eax, errPnf
    19 00001D8D E9175C0000          <1>     jmp extErrExit
    20                              <1> .okLength:
    21 00001D92 4889D6              <1>     mov rsi, rdx
    22 00001D95 E81A590000          <1>     call checkPathspecOK
    23 00001D9A 72D8                <1>     jc .badLen  ;Don't allow any malformed chars, exit Acc den
    24                              <1> .pathOk:
    25 00001D9C E8CE590000          <1>     call scanPathWC
    26 00001DA1 72E5                <1>     jc .badPath ;Dont allow wildcards
    27                              <1>     ;Path is ok, now proceed
    28 00001DA3 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive
    29 00001DAA 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    30 00001DB1 E875F7FFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    31                              <1>     ;If the path exists, exit error
    32 00001DB6 0F83ED5B0000        <1>     jnc extErrExit
    33 00001DBC E88F580000          <1>     call strlen ;Get the length again
    34 00001DC1 81F943000000        <1>     cmp ecx, MAX_PATH
    35 00001DC7 77AB                <1>     ja .badLen
    36                              <1>     ;Handle resolved null paths here!!!
    37 00001DC9 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
    38 00001DCF 30C0                <1>     xor al, al
    39 00001DD1 3D003A5C00          <1>     cmp eax, 005C3A00h
    40 00001DD6 74A6                <1>     je .badFile
    41                              <1>     ;-----------------------------
    42                              <1>     ;TEST THAT THE DRIVE IS VALID
    43                              <1>     ;This is clearly unnecessary
    44                              <1>     ;    Keep it for now...
    45                              <1>     ;-----------------------------
    46 00001DD8 57                  <1>     push rdi
    47 00001DD9 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    48 00001DE0 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive ;Cannot make on invalid drive
    49 00001DE6 5F                  <1>     pop rdi
    50 00001DE7 0F84BC5B0000        <1>     jz extErrExit  ;Exit access denied
    51                              <1>     ;-------------------------------------------
    52                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    53 00001DED E867FFFFFF          <1>     call checkFailingComp
    54 00001DF2 0F85B15B0000        <1>     jnz extErrExit
    55                              <1>     ;So all is well, the new subdirectories name is in fcbName
    56                              <1>     ;The parent dir's directory entry is in the curDirCopy
    57 00001DF8 E842560000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    58                              <1>     ;returns in rdi the working cds ptr
    59 00001DFD 7312                <1>     jnc .notNet
    60 00001DFF B803110000          <1>     mov eax, 1103h
    61 00001E04 CD2F                <1>     int 2fh
    62 00001E06 0F829D5B0000        <1>     jc extErrExit
    63 00001E0C E98A5B0000          <1>     jmp extGoodExit
    64                              <1> .notNet:
    65 00001E11 E8485B0000          <1>     call dosCrit1Enter
    66                              <1>     ;Current dpb ptr is already set
    67                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    68                              <1>     ;First we make a dummy dir in curDirCopy
    69                              <1>     ;mov byte [delChar], 0E5h    ;Setup delchar
    70 00001E16 C605(07070000)FF    <1>     mov byte [openCreate], -1   ;Creating special file!
    71 00001E1D 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    72 00001E24 488D35(D9060000)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    73 00001E2B 488D3D(5A060000)    <1>     lea rdi, curDirCopy
    74 00001E32 48A5                <1>     movsq   ;Copy the name over
    75 00001E34 A5                  <1>     movsd
    76 00001E35 E8F3110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    77 00001E3A E8D9120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    78 00001E3F 8905(68060000)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    79 00001E45 8905(70060000)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    80 00001E4B 31C0                <1>     xor eax, eax
    81 00001E4D 8905(76060000)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    82 00001E53 C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    83 00001E5A 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
    84                              <1> .searchForDirSpace:
    85 00001E60 8905(7F070000)      <1>     mov dword [dirClustA], eax
    86 00001E66 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    87 00001E68 668905(83070000)    <1>     mov word [dirSect], ax
    88 00001E6F 8905(85070000)      <1>     mov dword [dirEntry], eax
    89 00001E75 E898050000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    90 00001E7A 7328                <1>     jnc .dirEntryFnd
    91 00001E7C 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    91 00001E84 0000                <1>
    92 00001E86 0F844A010000        <1>     je .bad ;Set CF and exit
    93 00001E8C E86E060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    94 00001E91 0F823F010000        <1>     jc .bad
    95 00001E97 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    96 00001E9C 0F8434010000        <1>     je .bad
    97                              <1>     ;Else eax = Newly allocated cluster
    98 00001EA2 EBBC                <1>     jmp short .searchForDirSpace
    99                              <1> .dirEntryFnd:
   100                              <1> ;rdi points to current directory copy
   101                              <1> ;rsi now points to offset in the buffer to write the entry to
   102                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
   103 00001EA4 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
   104 00001EAB 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   105                              <1>      
   106 00001EAF 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
   107 00001EB6 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   108 00001EBD 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   109 00001EC0 668935(4E070000)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   110                              <1> ;Must now request a cluster and sanitise it
   111 00001EC7 E8A2ECFFFF          <1>     call startNewChain      ;Get cluster number in eax
   112 00001ECC 0F8209010000        <1>     jc .badExit
   113 00001ED2 E864060000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
   114 00001ED7 0F82FE000000        <1>     jc .badExit
   115                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   116 00001EDD 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   117 00001EE4 C1E810              <1>     shr eax, 10h    ;Get high word low
   118 00001EE7 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   119 00001EEE 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   120 00001EF5 E872EBFFFF          <1>     call getBufForDir
   121 00001EFA 0F82DB000000        <1>     jc .badExit
   122 00001F00 0FB705(4E070000)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   123 00001F07 488D35(5A060000)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   124 00001F0E 488D7C0320          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   125 00001F13 B904000000          <1>     mov ecx, 4
   126 00001F18 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   127 00001F1B E8E5E9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   128                              <1>     ;Now need to read in data sector and make two entries . and ..
   129 00001F20 57                  <1>     push rdi
   130 00001F21 51                  <1>     push rcx
   131 00001F22 B90B000000          <1>     mov ecx, 11
   132 00001F27 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   133 00001F2E B020                <1>     mov al, " "
   134 00001F30 F3AA                <1>     rep stosb
   135 00001F32 59                  <1>     pop rcx
   136 00001F33 5F                  <1>     pop rdi
   137 00001F34 48B82E000000000000- <1>     mov rax, "."
   137 00001F3D 00                  <1>
   138 00001F3E 8805(5A060000)      <1>     mov byte [curDirCopy], al
   139 00001F44 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   140 00001F4B 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   141 00001F52 C605(65060000)30    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory | dirArchive 
   142 00001F59 C1E210              <1>     shl edx, 10h
   143 00001F5C 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   144 00001F5E E88EEBFFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   145 00001F63 E804EBFFFF          <1>     call getBufForDir
   146 00001F68 7271                <1>     jc .badExit
   147                              <1>     ;rbx has buffer pointer now
   148 00001F6A 488D35(5A060000)    <1>     lea rsi, curDirCopy
   149 00001F71 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   150 00001F75 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   151 00001F7A F348A5              <1>     rep movsq
   152                              <1>     ;Now create .. entry
   153 00001F7D C605(5B060000)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   154 00001F84 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   155 00001F8A E8F7EAFFFF          <1>     call getFATtype
   156 00001F8F 81F902000000        <1>     cmp ecx, 2
   157 00001F95 7207                <1>     jb .notFAT32
   158 00001F97 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   159 00001F9A 7502                <1>     jne .notFAT32
   160 00001F9C 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   161                              <1> .notFAT32:
   162 00001F9E 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   163 00001FA5 C1E810              <1>     shr eax, 10h
   164 00001FA8 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   165 00001FAF 488D35(5A060000)    <1>     lea rsi, curDirCopy
   166 00001FB6 B904000000          <1>     mov ecx, 4
   167 00001FBB F348A5              <1>     rep movsq
   168 00001FBE E842E9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   169 00001FC3 E8CBE7FFFF          <1>     call flushAllBuffersForDPB    ;Write the buffers to disk
   170 00001FC8 7211                <1>     jc .badExit
   171                              <1> .okExit:
   172                              <1>     ;AND WE ARE DONE!
   173 00001FCA E899590000          <1>     call dosCrit1Exit
   174 00001FCF 31C0                <1>     xor eax, eax
   175 00001FD1 E9C5590000          <1>     jmp extGoodExit
   176                              <1> .bad:
   177 00001FD6 B805000000          <1>     mov eax, errAccDen
   178                              <1> .badExit:
   179 00001FDB E888590000          <1>     call dosCrit1Exit
   180 00001FE0 E9C4590000          <1>     jmp extErrExit
   181                              <1> 
   182                              <1> removeDIR:         ;ah = 3Ah
   183 00001FE5 4889D7              <1>     mov rdi, rdx
   184 00001FE8 E863560000          <1>     call strlen
   185 00001FED 81F940000000        <1>     cmp ecx, MAX_FSPEC
   186 00001FF3 7613                <1>     jbe .okLength
   187                              <1> .badPath:
   188 00001FF5 B005                <1>     mov al, errAccDen
   189 00001FF7 E9AD590000          <1>     jmp extErrExit
   190                              <1> .pnf:
   191 00001FFC E867590000          <1>     call dosCrit1Exit   ;Only jumped to in a critical section
   192 00002001 B003                <1>     mov al, errPnf
   193 00002003 E9A1590000          <1>     jmp extErrExit
   194                              <1> .okLength:
   195 00002008 4889D6              <1>     mov rsi, rdx
   196 0000200B E8A4560000          <1>     call checkPathspecOK
   197 00002010 72E3                <1>     jc .badPath  ;Don't allow any malformed chars
   198                              <1> .pathOk:
   199 00002012 E858570000          <1>     call scanPathWC
   200 00002017 72DC                <1>     jc .badPath ;Dont allow wildcards
   201                              <1>     ;Path is ok, now proceed
   202 00002019 E840590000          <1>     call dosCrit1Enter  ;Don't let another DOS task interrupt us!
   203 0000201E C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   204 00002025 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   205 0000202C E8F6F4FFFF          <1>     call getDirPath     ;Get a Directory path in buffer1, hitting the disk
   206 00002031 72C9                <1>     jc .pnf             ;Path Doesn't exist
   207 00002033 E807540000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   208 00002038 7312                <1>     jnc .notNet
   209 0000203A B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   210 0000203F CD2F                <1>     int 2fh
   211 00002041 0F8262590000        <1>     jc extErrExit
   212 00002047 E94F590000          <1>     jmp extGoodExit
   213                              <1> .notNet:
   214 0000204C 488D3D(1E050000)    <1>     lea rdi, buffer1
   215 00002053 E8F8550000          <1>     call strlen ;Get the length of the full qualified name in ecx
   216 00002058 66890D(4E070000)    <1>     mov word [pathLen], cx
   217 0000205F 6681F90400          <1>     cmp cx, 4   ;Only way to get this after truename is if root dir (i.e. join)
   218 00002064 7614                <1>     jbe .cantDelCD
   219                              <1>     ;Now we scan all the CDS's to ensure this path is not the current dir anywhere
   220 00002066 31C0                <1>     xor eax, eax
   221                              <1> .scanLoop:
   222 00002068 E855550000          <1>     call getCDSforDrive ;Gets a CDS string ptr in rsi
   223 0000206D 721A                <1>     jc .notCurrent
   224 0000206F E814560000          <1>     call compareFileNames
   225 00002074 7404                <1>     jz .cantDelCD
   226 00002076 FFC0                <1>     inc eax
   227 00002078 EBEE                <1>     jmp short .scanLoop
   228                              <1> .cantDelCD:
   229 0000207A B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   230 0000207F E8E4580000          <1>     call dosCrit1Exit
   231 00002084 E920590000          <1>     jmp extErrExit
   232                              <1> .notCurrent:
   233                              <1>     ;mov byte [delChar], 0E5h    ;Setup delchar
   234 00002089 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   235                              <1>     ;Now let use check that our directory is not the CDS currentdir
   236 00002090 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   237 00002097 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   238                              <1>     ;If the given path length is one more than the backslash offset
   239                              <1>     ; due to the terminating null, then the user is trying to delete the 
   240                              <1>     ; root dir. Fail this.
   241 0000209A 0FB74F5D            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   242 0000209E FFC1                <1>     inc ecx
   243 000020A0 663B0D(4E070000)    <1>     cmp cx, word [pathLen]
   244 000020A7 0F841E010000        <1>     je .accessDenied
   245 000020AD E874030000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   246                              <1>     ;for the entry in the sector we are hoping to delete
   247 000020B2 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   248 000020B9 C1E010              <1>     shl eax, 10h
   249 000020BC 0FB71D(74060000)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   250 000020C3 09D8                <1>     or eax, ebx
   251 000020C5 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   252 000020CB E821EAFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   253 000020D0 E897E9FFFF          <1>     call getBufForDir
   254 000020D5 0F82F5000000        <1>     jc .exitBad
   255                              <1>     ;rbx points to buffer
   256 000020DB 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   257 000020DF 48B82E202020202020- <1>     mov rax, ".       "
   257 000020E8 20                  <1>
   258 000020E9 483906              <1>     cmp qword [rsi], rax
   259 000020EC 0F85D9000000        <1>     jne .accessDenied
   260 000020F2 B42E                <1>     mov ah, "." ;Screw the partial stall
   261 000020F4 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   262 000020F8 0F85CD000000        <1>     jne .accessDenied
   263 000020FE 4881C620000000      <1>     add rsi, fatDirEntry_size
   264 00002105 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   265 0000210C B904000000          <1>     mov ecx, 4
   266 00002111 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   267                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   268                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   269 00002114 488D3D(D9060000)    <1>     lea rdi, fcbName
   270 0000211B B03F                <1>     mov al, "?"
   271 0000211D B90B000000          <1>     mov ecx, 11
   272 00002122 F3AA                <1>     rep stosb   ;Store the pattern to search for
   273 00002124 30C0                <1>     xor al, al  ;Store a terminating zero
   274 00002126 AA                  <1>     stosb
   275 00002127 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   276 0000212D 50                  <1>     push rax    ;Save on stack temporarily
   277 0000212E 8905(7F070000)      <1>     mov dword [dirClustA], eax
   278 00002134 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   279 00002136 668905(83070000)    <1>     mov word [dirSect], ax
   280 0000213D C705(85070000)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   280 00002145 0000                <1>
   281 00002147 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   282 0000214E 58                  <1>     pop rax
   283 0000214F E89DE9FFFF          <1>     call getStartSectorOfCluster
   284 00002154 E813E9FFFF          <1>     call getBufForDir   
   285 00002159 7275                <1>     jc .exitBad
   286 0000215B E8C5F1FFFF          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   287 00002160 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   288 00002167 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   289 0000216D C605(69040000)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   290 00002174 E8D3F0FFFF          <1>     call searchDir.rmdirEP
   291 00002179 7350                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   292                              <1>     ;Else, this is a empty dir, we can remove it
   293                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   294 0000217B 488B05(46070000)    <1>     mov rax, qword [tempSect]
   295 00002182 E8E5E8FFFF          <1>     call getBufForDir
   296 00002187 7247                <1>     jc .exitBad
   297 00002189 E897F1FFFF          <1>     call prepSectorSearch
   298 0000218E 0FB705(4E070000)    <1>     movzx eax, word [entry]
   299 00002195 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   300 00002199 4801C6              <1>     add rsi, rax    
   301 0000219C C606E5              <1>     mov byte [rsi], 0E5h  ;Store delchar now to remove the entry
   302 0000219F 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   303 000021A3 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   304 000021A7 E859E7FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   305 000021AC C1E210              <1>     shl edx, 10h
   306 000021AF 09D0                <1>     or eax, edx
   307                              <1> ;Now remove the FAT chain
   308 000021B1 E893EBFFFF          <1>     call unlinkFAT
   309 000021B6 7218                <1>     jc .exitBad
   310 000021B8 E8D6E5FFFF          <1>     call flushAllBuffersForDPB
   311 000021BD 7211                <1>     jc .exitBad
   312 000021BF E8A4570000          <1>     call dosCrit1Exit
   313 000021C4 31C0                <1>     xor eax, eax
   314 000021C6 E9D0570000          <1>     jmp extGoodExit
   315                              <1> .accessDenied:
   316 000021CB B805000000          <1>     mov eax, errAccDen
   317                              <1> .exitBad:
   318 000021D0 F9                  <1>     stc
   319 000021D1 E892570000          <1>     call dosCrit1Exit
   320 000021D6 E9CE570000          <1>     jmp extErrExit
   321                              <1> 
   322                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   323                              <1> ;Input: rdx = Pointer to ASCIIZ string
   324 000021DB 4889D7              <1>     mov rdi, rdx
   325 000021DE E86D540000          <1>     call strlen
   326 000021E3 81F940000000        <1>     cmp ecx, MAX_FSPEC
   327 000021E9 7618                <1>     jbe .okLength
   328                              <1> .badPath:
   329 000021EB B003                <1>     mov al, errPnf
   330 000021ED E9B7570000          <1>     jmp extErrExit
   331                              <1> .badPathCrit:
   332 000021F2 E871570000          <1>     call dosCrit1Exit
   333 000021F7 EBF2                <1>     jmp short .badPath
   334                              <1> .badCrit:
   335 000021F9 E86A570000          <1>     call dosCrit1Exit
   336 000021FE E9A6570000          <1>     jmp extErrExit
   337                              <1> .okLength:
   338 00002203 4889D6              <1>     mov rsi, rdx
   339 00002206 E8A9540000          <1>     call checkPathspecOK
   340 0000220B 7302                <1>     jnc .notBad     ;Don't allow any malformed chars or wildcards
   341 0000220D 74DC                <1>     jz .badPath     ;If wildcards found, exit error!
   342                              <1>     ;Malformed chars get caught later! Allow for "X:\",0" style paths
   343                              <1> .notBad:
   344 0000220F E87A550000          <1>     call checkPathNet   ;Never allow network paths
   345 00002214 74D5                <1>     jz .badPath ;Or Net paths
   346                              <1>     ;Path is ok, now proceed
   347 00002216 E843570000          <1>     call dosCrit1Enter  ;ENTER DOS CRITICAL SECTION HERE!!
   348 0000221B C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   349 00002222 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   350 00002229 E8F9F2FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   351 0000222E 72C9                <1>     jc .badCrit   ;Exit with error code in eax
   352                              <1>     ;Now we check to make sure the path provided is not past the maximum
   353                              <1>     ; length of a CDS path. This accounts for the possibility that a SUBST
   354                              <1>     ; moved the path past the end.
   355 00002230 488D3D(1E050000)    <1>     lea rdi, buffer1
   356 00002237 E814540000          <1>     call strlen ;Get the length of this path
   357 0000223C 81F943000000        <1>     cmp ecx, MAX_PATH
   358 00002242 77AE                <1>     ja .badPathCrit
   359                              <1>     ;The path must've been ok, so now copy the path into the CDS
   360                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   361                              <1>     ;Copy the workingCDS to the tmpCDS
   362 00002244 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   363 0000224B 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   364 00002251 0F85E6000000        <1>     jnz .net    ;This is done by the redirector for redirector drives
   365 00002257 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Are we a join drive?
   366 0000225D 0F848D000000        <1>     jz .notJoin     ;Skip the join intervention if not.
   367                              <1>     ;!!!! JOIN INTERVENTION BELOW !!!!
   368 00002263 4889FD              <1>     mov rbp, rdi    ;Save the ptr to the pathname here
   369 00002266 E8E4000000          <1>     call .getFatCluster
   370 0000226B 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set cluster
   371                              <1>     ;ecx has the length of the path in the buffer
   372 0000226E 89C8                <1>     mov eax, ecx    ;Save the number of chars in the buffer
   373 00002270 2D02000000          <1>     sub eax, 2      ;Remove the X: prefix
   374 00002275 4889F7              <1>     mov rdi, rsi    ;Get the ptr to the cds to get it's length
   375 00002278 E8D3530000          <1>     call strlen
   376 0000227D 01C8                <1>     add eax, ecx    ;Add the lengths of the two strings together
   377 0000227F 3D43000000          <1>     cmp eax, MAX_PATH
   378 00002284 0F8768FFFFFF        <1>     ja .badPathCrit
   379 0000228A 51                  <1>     push rcx
   380 0000228B 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Copy the join-disabled CDS over to tmpCDS
   381 00002292 B95F000000          <1>     mov ecx, cds_size
   382 00002297 F3A4                <1>     rep movsb   
   383 00002299 59                  <1>     pop rcx
   384 0000229A FFC9                <1>     dec ecx ;Remove the trailing null from the count
   385 0000229C 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   386 000022A3 57                  <1>     push rdi
   387 000022A4 4801CF              <1>     add rdi, rcx    ;Move the destination ptr to the trailing null
   388 000022A7 488D7502            <1>     lea rsi, qword [rbp + 2]    ;Skip the first two chars from path to copy
   389 000022AB F3A4                <1>     rep movsb   ;Copy the new part of the path back in
   390 000022AD 5F                  <1>     pop rdi
   391 000022AE 4889FE              <1>     mov rsi, rdi
   392 000022B1 31C0                <1>     xor eax, eax
   393 000022B3 31C9                <1>     xor ecx, ecx
   394 000022B5 FFC9                <1>     dec ecx
   395 000022B7 F2AE                <1>     repne scasb   ;Search for the terminating null
   396 000022B9 4881EF02000000      <1>     sub rdi, 2
   397 000022C0 8A07                <1>     mov al, byte [rdi]  ;Get the second to last char
   398 000022C2 E82D530000          <1>     call swapPathSeparator
   399 000022C7 7503                <1>     jnz .notSlash
   400 000022C9 C60700              <1>     mov byte [rdi], 0   ;If it is a pathsep, put a null here
   401                              <1> .notSlash:
   402 000022CC 0FB606              <1>     movzx eax, byte [rsi]    ;Get the drive letter here
   403 000022CF 2C41                <1>     sub al, "A"     ;Turn into a 1 based drive number
   404 000022D1 E8EC520000          <1>     call getCDSforDrive ;Set working CDS and move ptr in rsi 
   405 000022D6 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Put tmpCDS in rdi
   406 000022DD 4887F7              <1>     xchg rsi, rdi   ;And swap the pointers
   407 000022E0 C7474DFFFFFFFF      <1>     mov dword [rdi + cds.dStartCluster], -1 ;Finally, set the start cluster to welp.
   408                              <1>     ;mov word [rdi + cds.wBackslashOffset], 2    ;Make sure this is 2 if it changed...
   409                              <1>     ;Backslash offset must always be 2 on a join host
   410 000022E7 B943000000          <1>     mov ecx, MAX_PATH
   411 000022EC F3A4                <1>     rep movsb   ;Copy in the CDS path only, to keep all other fields ok.
   412 000022EE EB41                <1>     jmp short .exitGood
   413                              <1> .notJoin:
   414                              <1> ;rsi -> workingCDS
   415                              <1> ;Lets first copy the working CDS into tmpCDS
   416 000022F0 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   417 000022F7 B95F000000          <1>     mov ecx, cds_size
   418 000022FC F3A4                <1>     rep movsb         ;Copy the workingCDS into tmpCDS
   419 000022FE E84C000000          <1>     call .getFatCluster ;Now get the start cluster from the directory copy
   420 00002303 8905(C7060000)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   421 00002309 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   422 00002310 488D35(1E050000)    <1>     lea rsi, buffer1    ;Now copy the FQ pathname into the CDS
   423 00002317 E843530000          <1>     call strcpy
   424 0000231C 488D35(7A060000)    <1>     lea rsi, tmpCDS     ;And copy back the tmpCDS into the CDS itself
   425 00002323 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   426 0000232A B95F000000          <1>     mov ecx, cds_size
   427 0000232F F3A4                <1>     rep movsb
   428                              <1> .exitGood:
   429 00002331 E832560000          <1>     call dosCrit1Exit
   430 00002336 31C0                <1>     xor eax, eax
   431 00002338 E95E560000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   432                              <1> .net:
   433                              <1> ;SDA Vars are setup for this request
   434 0000233D B805110000          <1>     mov eax, 1105h
   435 00002342 CD2F                <1>     int 2fh
   436 00002344 0F825F560000        <1>     jc extErrExit
   437 0000234A E94C560000          <1>     jmp extGoodExit
   438                              <1> .getFatCluster:
   439 0000234F 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   440 00002356 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   441 0000235D C1E010              <1>     shl eax, 10h
   442 00002360 09D0                <1>     or eax, edx ;Add low bits to eax
   443                              <1>     return
    13                              <2> %%_ret:
    14 00002362 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> getCurrentDIR:     ;ah = 47h
   446                              <1> ;Returns the path for a drive with no X:\.
   447                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   448                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   449 00002363 88D0                <1>     mov al, dl  ;Move drive number into al
   450 00002365 E8F4550000          <1>     call dosCrit1Enter
   451 0000236A E888510000          <1>     call getCDSNotJoin ;Set drive variables if it is valid and NOT join
   452 0000236F 730F                <1>     jnc .okDrive    ;Cant get current dir of a join drive
   453                              <1> .badDrvExit:
   454 00002371 E8F2550000          <1>     call dosCrit1Exit
   455 00002376 B80F000000          <1>     mov eax, errBadDrv
   456 0000237B E929560000          <1>     jmp extErrExit
   457                              <1> .okDrive:
   458                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   459 00002380 56                  <1>     push rsi    ;Save the callers buffer on the stack.
   460 00002381 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the current Working CDS ptr in rsi
   461 00002388 56                  <1>     push rsi    ;Save desired workingCDS on pointer on the stack!
   462 00002389 C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   463 00002390 488D3D(1E050000)    <1>     lea rdi, buffer1
   464 00002397 E88BF1FFFF          <1>     call getDirPath   ;Canonicalise the filename and check if directory exists!
   465 0000239C 5E                  <1>     pop rsi ;Get back the original workingCDS
   466 0000239D 5F                  <1>     pop rdi ;Get the callers buffer into rdi
   467 0000239E 72D1                <1>     jc .badDrvExit
   468                              <1>     ;Now buffer1 has the truenamed form of the directory entry. 
   469                              <1>     ;We don't copy that, instead copying the path directly from the cds entry.
   470                              <1>     ;since we confirmed it exists! This avoids join issues :D 
   471 000023A0 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   472 000023A4 4801C6              <1>     add rsi, rax    ;Skip any prefixed chars (handle SUBST)
   473 000023A7 803E5C              <1>     cmp byte [rsi],"\" ;Skip if pathsep (these pathseps are always proper)
   474 000023AA 7503                <1>     jne .dontSkipChar
   475 000023AC 48FFC6              <1>     inc rsi ;Skip leading pathseps on the path
   476                              <1> .dontSkipChar:
   477 000023AF AC                  <1>     lodsb   ;Get char
   478 000023B0 84C0                <1>     test al, al
   479 000023B2 7406                <1>     jz .notSpecialChar
   480 000023B4 3C05                <1>     cmp al, 05h     ;Special char case?
   481 000023B6 7502                <1>     jne .notSpecialChar
   482 000023B8 B0E5                <1>     mov al, 0E5h    ;Replace with the correct "replacement" char
   483                              <1> .notSpecialChar:
   484 000023BA AA                  <1>     stosb
   485 000023BB 84C0                <1>     test al, al ;Did we store a terminator char?
   486 000023BD 75F0                <1>     jnz .dontSkipChar   ;If not, keep copying
   487 000023BF E8A4550000          <1>     call dosCrit1Exit
   488 000023C4 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   489 000023C9 E9CD550000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   490                              <1> 
   491                              <1> trueNameMultiplex:  ;Int 2Fh, AX=1221h
   492 000023CE 50                  <1>     push rax
   493 000023CF B800600000          <1>     mov eax, 6000h
   494 000023D4 CD21                <1>     int 21h
   495 000023D6 58                  <1>     pop rax
   496                              <1>     return
    13                              <2> %%_ret:
    14 000023D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   497                              <1>     
   498                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   499                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   500 000023D8 E8D7520000          <1>     call checkPathspecOK    ;This preserves rsi
   501 000023DD 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   502 000023DF 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   503                              <1> .badPath:
   504 000023E1 B805000000          <1>     mov eax, errAccDen
   505 000023E6 E9BE550000          <1>     jmp extErrExit
   506                              <1> .pathspecOk:
   507 000023EB 57                  <1>     push rdi    ;Save the destination
   508 000023EC 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   509 000023F3 E8B3F1FFFF          <1>     call canonicaliseFileName
   510 000023F8 5F                  <1>     pop rdi
   511 000023F9 0F82AA550000        <1>     jc extErrExit
   512 000023FF 488D35(1E050000)    <1>     lea rsi, buffer1
   513 00002406 E854520000          <1>     call strcpy
   514 0000240B 31C0                <1>     xor eax, eax
   515 0000240D E989550000          <1>     jmp extGoodExit
   516                              <1> 
   517                              <1> ;-----------------------------------
   518                              <1> ;    General Directory Routines    :
   519                              <1> ;-----------------------------------
   520                              <1> 
   521                              <1> 
   522                              <1> findFreeDiskDirEntry:
   523                              <1> ;Find a space in the directory we are searching for a directory entry
   524                              <1> ;Accept first entry starting with a 0E5h or 00h
   525                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   526                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   527                              <1> ; be called for CDS's that are NOT net CDS's).
   528                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   529                              <1> ;       Directory vars must be set up for the directory we are searching in
   530                              <1> ;Output: CF=CY => Error, eax has error code
   531                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   532 00002412 8A05(08070000)      <1>     mov al, byte [delChar]
   533 00002418 8805(D9060000)      <1>     mov byte [fcbName], al
   534 0000241E E8D6EDFFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   535                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002423 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002425 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   536                              <1> ;Free entry found, dir variables are set for the free entry. 
   537                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   538                              <1> getDiskDirectoryEntry:
   539                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   540                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   541                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   542                              <1> ;        qword [tempSect] = Disk sector number of directory
   543                              <1> ;        word [entry] = 32 byte offset into sector
   544                              <1> ;        CF=CY => Error, exit 
   545 00002426 53                  <1>     push rbx
   546 00002427 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  
   547                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   548                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   549 0000242D 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]
   550 00002434 85C0                <1>     test eax, eax
   551 00002436 7407                <1>     jz .skipCluster
   552 00002438 E8B4E6FFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   553 0000243D EB1B                <1>     jmp short .skipOldFat
   554                              <1> .skipCluster:
   555 0000243F 55                  <1>     push rbp
   556 00002440 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   557 00002447 0FB705(83070000)    <1>     movzx eax, word [dirSect]
   558 0000244E 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   559                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   560 00002451 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   561 00002455 5D                  <1>     pop rbp
   562 00002456 7202                <1>     jb .skipOldFat
   563 00002458 F9                  <1>     stc
   564                              <1>     return
    13                              <2> %%_ret:
    14 00002459 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   565                              <1> .skipOldFat:
   566 0000245A 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   567 0000245D 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save this sector number
   568 00002464 E803E6FFFF          <1>     call getBufForDir   ;Get buffer for dir in rbx
   569 00002469 5B                  <1>     pop rbx
   570                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000246A 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000246C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   571 0000246D 53                  <1>     push rbx
   572 0000246E 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
   573 00002475 E8ABEEFFFF          <1>     call prepSectorSearch
   574                              <1>     ;Above function gets data buffer ptr in rsi
   575 0000247A 31D2                <1>     xor edx, edx
   576 0000247C 8B05(85070000)      <1>     mov eax, dword [dirEntry]   ;Get offset into dir file cluster
   577 00002482 C1E005              <1>     shl eax, 5  ;Multiply by 32 to get byte offset
   578                              <1>     ;Make the amount we add to rsi modulo size of bytes per sector
   579 00002485 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   580 00002489 F7F3                <1>     div ebx ;Divide eax by ebx. Get remainer in dx
   581 0000248B 4801D6              <1>     add rsi, rdx    ;rsi now points to the entry
   582 0000248E 668915(4E070000)    <1>     mov word [entry], dx
   583 00002495 5B                  <1>     pop rbx
   584                              <1>     return
    13                              <2> %%_ret:
    14 00002496 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> updateSFTDateTimeFields:    
   587                              <1> ;Updates the SFT time/date entries for disk files
   588                              <1> ;Called with:
   589                              <1> ;   [workingDPB] = DPB pointer for the disk device
   590                              <1> ;   [currentSFT] = Current SFT pointer
   591                              <1> ;   bx = attribute byte from the SFT
   592 00002497 66F7C3C000          <1>     test bx, devDiskNoFlush | devCharDev
   593                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000249C 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000249E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   594 0000249F 66F7C30040          <1>     test bx, devDiskNoDTonClose
   595                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000024A4 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000024A6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   596 000024A7 50                  <1>     push rax
   597 000024A8 53                  <1>     push rbx
   598 000024A9 E87F0B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   599                              <1>     ;Build date and time words
   600 000024AE E8650C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   601                              <1>     ;Update SFT fields
   602 000024B3 66894713            <1>     mov word [rdi + sft.wTime], ax
   603 000024B7 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   604 000024BA 66894715            <1>     mov word [rdi + sft.wDate], ax
   605 000024BE 31C0                <1>     xor eax, eax
   606 000024C0 FF15(2F010000)      <1>     call qword [updateDirShare]
   607 000024C6 5B                  <1>     pop rbx
   608 000024C7 58                  <1>     pop rax
   609                              <1>     return
    13                              <2> %%_ret:
    14 000024C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   610                              <1> 
   611                              <1> getAndUpdateDirSectorForFile:
   612                              <1> ;Must be called with currentSFT pointing to the file we operate on!
   613                              <1> ;Input: rdi -> SFT
   614                              <1> ;Output: CF=NC: rsi -> Updated dir entry in buffer
   615                              <1> ;               rdi -> SFT
   616 000024C9 E84E2E0000          <1>     call setDPBfromSFT
   617                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000024CE 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000024D0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   618 000024D1 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   619 000024D5 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   620 000024DC C605(68040000)18    <1>     mov byte [Int24bitfld], critFailOK | critRetryOK
   621 000024E3 E884E5FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx for sector in rax
   622                              <1>     retc    ;If an error is to be returned from, we skip the rest of this
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000024E8 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000024EA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   623 000024EB E8F42B0000          <1>     call getCurrentSFT ;Reobtain the SFT ptr in rdi
   624 000024F0 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   625 000024F4 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   626 000024F8 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   627 000024FB 4801DE              <1>     add rsi, rbx    ;Move rsi to point to the directory entry
   628                              <1>     return
    13                              <2> %%_ret:
    14 000024FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   629                              <1> 
   630                              <1> growDirectory:
   631                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   632                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   633                              <1> ;                 eax = New Cluster number
   634                              <1> ;               TWO NON CF ERROR CASES.
   635                              <1> ;               If eax = -1 => disk full!
   636                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   637                              <1> ;        CF=CY => Something went wrong. Rip. 
   638 000024FF 53                  <1>     push rbx
   639 00002500 51                  <1>     push rcx
   640 00002501 57                  <1>     push rdi
   641 00002502 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   642 00002508 85C0                <1>     test eax, eax
   643 0000250A 742B                <1>     jz .exit
   644 0000250C E80DE6FFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   645 00002511 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   646 00002513 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   647 00002518 E880E6FFFF          <1>     call allocateClusters   ;ebx has last cluster value
   648 0000251D 7218                <1>     jc .exit
   649 0000251F 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   650 00002524 7411                <1>     je .exit
   651 00002526 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   652 00002528 E856E8FFFF          <1>     call readFAT
   653 0000252D 7208                <1>     jc .exit
   654 0000252F E807000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   655 00002534 7201                <1>     jc .exit
   656 00002536 F8                  <1>     clc
   657                              <1> .exit:
   658 00002537 5F                  <1>     pop rdi
   659 00002538 59                  <1>     pop rcx
   660 00002539 5B                  <1>     pop rbx
   661                              <1>     return   
    13                              <2> %%_ret:
    14 0000253A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   662                              <1> sanitiseCluster:
   663                              <1> ;Sanitises the cluster in eax to all zeros
   664                              <1> ;Does not move file pointers
   665                              <1> ;Currently, is only called to sanitise subdirectory clusters
   666                              <1> ;Input: eax = Cluster number
   667                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   668                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   669                              <1> ;        If CF=CY => Error, exit
   670 0000253B 50                  <1>     push rax
   671 0000253C 53                  <1>     push rbx
   672 0000253D 51                  <1>     push rcx
   673 0000253E 52                  <1>     push rdx
   674 0000253F 56                  <1>     push rsi
   675 00002540 55                  <1>     push rbp
   676 00002541 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   677 00002548 E8A4E5FFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   678 0000254D 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   679 00002551 FFC2                <1>     inc edx ;Make it a count of sectors
   680                              <1> .getSectorInCluster:
   681 00002553 E814E5FFFF          <1>     call getBufForDir  ;Get a generic data buffer in rbx
   682 00002558 721E                <1>     jc .exitBad
   683 0000255A 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   684 0000255E 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   685 00002562 31C0                <1>     xor eax, eax
   686 00002564 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   687 00002566 E89AE3FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   688                              <1> 
   689 0000256B FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   690 0000256D 740A                <1>     jz .exit    ;Jump if we done
   691 0000256F 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   692 00002573 48FFC0              <1>     inc rax ;Goto next sector in cluster
   693 00002576 EBDB                <1>     jmp short .getSectorInCluster
   694                              <1> .exitBad:
   695 00002578 F9                  <1>     stc
   696                              <1> .exit:
   697 00002579 5D                  <1>     pop rbp
   698 0000257A 5E                  <1>     pop rsi
   699 0000257B 5A                  <1>     pop rdx
   700 0000257C 59                  <1>     pop rcx
   701 0000257D 5B                  <1>     pop rbx
   702 0000257E 58                  <1>     pop rax
   703                              <1>     return
    13                              <2> %%_ret:
    14 0000257F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                                  %include "./src/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqPkt and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 00002580 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 00002581 488D1D(1C050000)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 00002588 48891D(A5040000)    <1>     mov qword [secdReqPkt + ioReqPkt.bufptr], rbx
    59 0000258F 5B                  <1>     pop rbx
    60 00002590 C705(AD040000)0100- <1>     mov dword [secdReqPkt + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 00002598 0000                <1>
    61 0000259A 668905(1C050000)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 000025A1 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedir
    63 000025A7 0F85A1000000        <1>     jnz .notChar
    64 000025AD 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 000025B3 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 000025B9 E889530000          <1>     call dosPushRegs    ;Save context here
    68 000025BE 488D1D55DAFFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 000025C5 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 000025C8 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 000025CB 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 000025CE 890D(97040000)      <1>     mov dword [secdReqPkt], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 000025D4 31C9                <1>     xor ecx, ecx
    75 000025D6 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 000025D9 7506                <1>     jne .skipBsySet
    77 000025DB 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 000025E1 66870D(9A040000)    <1>     xchg cx, word [secdReqPkt + drvReqPkt.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 000025E8 488D1D(97040000)    <1>     lea rbx, secdReqPkt
    82 000025EF E8304A0000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 000025F4 668B3D(9A040000)    <1>     mov di, word [secdReqPkt + drvReqPkt.status]    ;Get status
    84 000025FB F7C700800000        <1>     test edi, drvErrStatus
    85 00002601 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 00002603 803D(99040000)05    <1>     cmp byte [secdReqPkt + drvReqPkt.cmdcde], drvNONDESTREAD
    88 0000260A 750C                <1>     jne .notNDRead
    89 0000260C 8A05(A4040000)      <1>     mov al, byte [secdReqPkt + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 00002612 8805(1C050000)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 00002618 8A25(9B040000)      <1>     mov ah, byte [secdReqPkt + drvReqPkt.status + 1]  ;Get hibyte of status word
    93 0000261E F6D4                <1>     not ah
    94 00002620 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 00002623 E808530000          <1>     call dosPopRegs ;Get back the context
    96 00002628 668B05(1C050000)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 0000262F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 00002630 88CC                <1>     mov ah, cl
   101 00002632 E8DB430000          <1>     call charDevErr
   102 00002637 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 00002639 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 0000263B E8F0520000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 00002640 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 00002645 8025(9B040000)FD    <1>     and byte [secdReqPkt + drvReqPkt.status + 1], ~(drvBsyStatus >> 8)
   110 0000264C EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 0000264E 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 00002650 7409                <1>     jz .makeDiskNetReadReq
   115 00002652 FECC                <1>     dec ah
   116 00002654 7422                <1>     jz .makeDiskNetNonDestReq
   117 00002656 FECC                <1>     dec ah
   118 00002658 742A                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 0000265A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 0000265B E834000000          <1>     call .prepDiskNetIO
   123 00002660 E8D5220000          <1>     call readBytes
   124 00002665 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 00002667 E858000000          <1>     call .cleanDiskNetIO
   126 0000266C 8A05(1C050000)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002672 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002674 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   128 00002675 B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 00002677 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 00002678 FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 0000267B E8DBFFFFFF          <1>     call .makeDiskNetReadReq
   134 00002680 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 00002683 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 00002684 E80B000000          <1>     call .prepDiskNetIO
   138 00002689 E806260000          <1>     call writeBytes
   139 0000268E E831000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002693 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 00002694 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   145 0000269A E8A8520000          <1>     call dosPushRegs
   146 0000269F FF35(17040000)      <1>     push qword [currentDTA]
   147 000026A5 488D0D(1C050000)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 000026AC 48890D(17040000)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 000026B3 488935(32070000)    <1>     mov qword [currentSFT], rsi ;Set this sft ptr as the current SFT
   150 000026BA 31C9                <1>     xor ecx, ecx
   151 000026BC FFC1                <1>     inc ecx ;IO 1 byte only
   152                              <1> .cleanDNIOReturn:
   153 000026BE FF25(EB040000)      <1>     jmp qword [altRet]
   154                              <1> .cleanDiskNetIO:
   155 000026C4 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   156 000026CA 8F05(17040000)      <1>     pop qword [currentDTA]
   157 000026D0 E85B520000          <1>     call dosPopRegs
   158 000026D5 EBE7                <1>     jmp short .cleanDNIOReturn
   159                              <1> 
   160                              <1> openSFT:
   161                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   162                              <1> ;Input: rdi = SFT pointer
   163 000026D7 E86B520000          <1>     call dosPushRegs
   164 000026DC B40D                <1>     mov ah, drvOPEN
   165 000026DE EB07                <1>     jmp short openCloseCommon
   166                              <1> closeSFT:
   167                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   168 000026E0 E862520000          <1>     call dosPushRegs
   169 000026E5 B40E                <1>     mov ah, drvCLOSE
   170                              <1> openCloseCommon:
   171                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   172 000026E7 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir  ;We a network device?
   173 000026ED 7569                <1>     jnz .exit    ;Exit if so
   174 000026EF F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   175 000026F3 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   176 000026F7 7512                <1>     jnz .charDev
   177                              <1> ;Here a disk drive, rdi is a DPB ptr
   178 000026F9 F605(D4030000)FF    <1>     test byte [shareFlag], -1    ;Is SHARE loaded?
   179 00002700 7456                <1>     jz .exit   ;Exit if share flag is zero (Share not loaded)
   180 00002702 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   181 00002705 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   182 00002707 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   183                              <1> .charDev:
   184 0000270B 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvOpClRem   ;Can we open/close?
   185 00002711 7445                <1>     jz .exit    ;No, exit!
   186 00002713 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   187 00002716 488D1D(C1040000)    <1>     lea rbx, primReqPkt ;Get the primary request header space in rbx
   188 0000271D 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   189                              <1> .retryEP:
   190 00002720 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   191 00002723 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   192 00002726 50                  <1>     push rax    ;Save the dword
   193 00002727 E8FC480000          <1>     call goDriver
   194 0000272C 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + drvReqPkt.status] ;Get the status
   195 00002733 F7C700800000        <1>     test edi, drvErrStatus
   196 00002739 741C                <1>     jz .exitPop
   197                              <1>     ;Error here, check if char or block drive
   198 0000273B 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   199 00002741 7404                <1>     jz .blockError
   200                              <1>     ;Char error here
   201 00002743 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   202 00002745 EB04                <1>     jmp short .errorCmn
   203                              <1> .blockError:
   204 00002747 88C8                <1>     mov al, cl  ;Move drive number into al
   205 00002749 B406                <1>     mov ah, critData    ;Data on block dev error
   206                              <1> .errorCmn:
   207                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   208 0000274B E8C2420000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   209 00002750 3C01                <1>     cmp al, critRetry   ;al returns user response
   210 00002752 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   211 00002754 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   212 00002755 EBC9                <1>     jmp short .retryEP  ;Reset
   213                              <1> .exitPop:
   214 00002757 58                  <1>     pop rax    
   215                              <1> .exit:
   216 00002758 E8D3510000          <1>     call dosPopRegs
   217                              <1>     return
    13                              <2> %%_ret:
    14 0000275D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                                  %include "./src/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 0000275E E882010000          <1>     call charIn_B
    17 00002763 50                  <1>     push rax
    18 00002764 E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 00002769 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 0000276A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 0000276B 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 2Fh, AX=1205h
    26 0000276D 3C20                <1>     cmp al, asciiCaret
    27 0000276F 0F8287000000        <1>     jb .control
    28 00002775 3C7F                <1>     cmp al, DEL ;DEL char?
    29 00002777 7406                <1>     je .skipCurs
    30 00002779 FE05(CC020000)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 0000277F FE05(D2030000)      <1>     inc byte [vConErr]   ;Increment 2 char error checker
    33 00002785 8025(D2030000)03    <1>     and byte [vConErr], 3
    34 0000278C 56                  <1>     push rsi
    35 0000278D 7507                <1>     jnz .skipErrorCheck
    36 0000278F 50                  <1>     push rax
    37 00002790 E89F020000          <1>     call vConCtrlCheck
    38 00002795 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 00002796 E826020000          <1>     call outputOnStdout
    41 0000279B 5E                  <1>     pop rsi
    42 0000279C F605(CF030000)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000027A3 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000027A5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    44 000027A6 53                  <1>     push rbx
    45 000027A7 56                  <1>     push rsi
    46 000027A8 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 000027AD E84D030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 000027B2 0F82D0000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 000027B8 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 000027BC F7C300800000        <1>     test ebx, devRedir
    52 000027C2 0F85C0000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 000027C8 F7C380000000        <1>     test ebx, devCharDev
    54 000027CE 0F84B4000000        <1>     jz auxOutCmn.exit
    55 000027D4 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 000027D9 E821030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 000027DE 0F82A4000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 000027E4 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], devCharNetSpool  ;Network printer?
    59 000027EA 0F8493000000        <1>     jz auxOutCmn.diskFileEP
    60 000027F0 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 000027F7 E98C000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 000027FC 3C0D                <1>     cmp al, CR
    64 000027FE 742A                <1>     je .newline
    65 00002800 3C08                <1>     cmp al, BSP
    66 00002802 7432                <1>     je .back
    67 00002804 3C09                <1>     cmp al, TAB
    68 00002806 0F8573FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70 0000280C 8A05(CC020000)      <1>     mov al, byte [vConCursPos]
    71 00002812 0CF8                <1>     or al, ~7
    72 00002814 F6D8                <1>     neg al
    73                              <1> .outputATab:   ;Called with al = Number of chars into the tabstop we are!
    74 00002816 51                  <1>     push rcx
    75 00002817 0FB6C8              <1>     movzx ecx, al
    76 0000281A 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    77                              <1> .tabloop:
    78 0000281D B020                <1>     mov al, SPC
    79 0000281F E849FFFFFF          <1>     call charOut_B.in   ;Output the char
    80 00002824 FEC9                <1>     dec cl
    81 00002826 75F5                <1>     jnz .tabloop
    82                              <1> .stopTab:
    83 00002828 59                  <1>     pop rcx
    84                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 00002829 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> .newline:
    86 0000282A C605(CC020000)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    87 00002831 E949FFFFFF          <1>     jmp .skipCurs   ;And echo 
    88                              <1> .back:
    89 00002836 FE0D(CC020000)      <1>     dec byte [vConCursPos]
    90 0000283C E93EFFFFFF          <1>     jmp .skipCurs   ;And echo
    91                              <1> 
    92                              <1> auxIn_B:        ;ah = 03h
    93 00002841 E8EE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    94 00002846 BB03000000          <1>     mov ebx, 3
    95 0000284B E8AF020000          <1>     call getCharDevSFT
    96                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002850 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002852 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    97                              <1> .auxloop:
    98 00002853 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    99 00002855 E826FDFFFF          <1>     call mainCharIO
   100 0000285A 7408                <1>     jz .signalLoop
   101 0000285C 30E4                <1>     xor ah, ah  ;Read the char in
   102 0000285E E81DFDFFFF          <1>     call mainCharIO
   103                              <1>     return
    13                              <2> %%_ret:
    14 00002863 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> .signalLoop:
   105 00002864 E8A8010000          <1>     call callInt28h
   106 00002869 EBE8                <1>     jmp short .auxloop
   107                              <1> 
   108                              <1> auxOut_B:       ;ah = 04h
   109 0000286B 53                  <1>     push rbx
   110 0000286C BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   111 00002871 EB06                <1>     jmp short auxOutCmn
   112                              <1> prnOut_B:       ;ah = 05h
   113 00002873 53                  <1>     push rbx
   114 00002874 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   115                              <1> auxOutCmn: ;Auxilliary output device common 
   116 00002879 88D0                <1>     mov al, dl  ;Get the char into al
   117 0000287B 50                  <1>     push rax
   118 0000287C E8B3010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   119 00002881 58                  <1>     pop rax
   120 00002882 56                  <1>     push rsi
   121                              <1> .diskFileEP:
   122 00002883 E866010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   123                              <1> .netFileEP:
   124                              <1> .exit:
   125 00002888 5E                  <1>     pop rsi
   126 00002889 5B                  <1>     pop rbx
   127                              <1>     return
    13                              <2> %%_ret:
    14 0000288A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> directConIO:    ;ah = 06h
   130 0000288B 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   131 0000288D 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   132 0000288F 0F852C010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   133                              <1> ;Here is the read char direct function
   134 00002895 31DB                <1>     xor ebx, ebx    
   135 00002897 E863020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   136                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000289C 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000289E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   137 0000289F 488B2D(7B040000)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   138 000028A6 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   139 000028A8 E8D3FCFFFF          <1>     call mainCharIO
   140 000028AD E85F010000          <1>     call callInt28h ;This preserves flags so call here!
   141 000028B2 7507                <1>     jnz .readChar
   142 000028B4 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   143 000028B8 30C0                <1>     xor al, al  ;Set caller return code to 0
   144                              <1>     return
    13                              <2> %%_ret:
    14 000028BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   145                              <1> .readChar:
   146 000028BB 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   147                              <1>     ;Fallthrough here to get the char at STDIN
   148                              <1> charIn:         ;ah = 07h
   149                              <1> ;Return char in al from STDIN without waiting
   150 000028BF 31DB                <1>     xor ebx, ebx
   151 000028C1 E839020000          <1>     call getCharDevSFT
   152                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000028C6 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000028C8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   153 000028C9 B401                <1>     mov ah, 01  ;ND read for char
   154 000028CB E8B0FCFFFF          <1>     call mainCharIO
   155 000028D0 750B                <1>     jnz .getChar
   156 000028D2 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   157 000028D4 CD2A                <1>     int 2Ah
   158 000028D6 E836010000          <1>     call callInt28h
   159 000028DB EBE2                <1>     jmp short charIn    ;Loop again awaiting the char
   160                              <1> .getChar:
   161                              <1>     ;Get the char in al and exit
   162 000028DD 30E4                <1>     xor ah, ah
   163 000028DF E89CFCFFFF          <1>     call mainCharIO
   164                              <1>     return
    13                              <2> %%_ret:
    14 000028E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> charIn_B:       ;ah = 08h
   166                              <1> ;Return char in al from STDIN
   167 000028E5 56                  <1>     push rsi
   168                              <1> .readAgain:
   169 000028E6 E849010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   170                              <1>     ;Also sets rsi to point to the device SFT for 
   171 000028EB 7543                <1>     jnz .pullChar
   172 000028ED 803D(E0190000)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   173 000028F4 7507                <1>     jne .skiplookahead
   174 000028F6 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   175 000028F8 E883FCFFFF          <1>     call mainCharIO
   176                              <1> .skiplookahead:
   177 000028FD B484                <1>     mov ah, 84h
   178 000028FF CD2A                <1>     int 2ah ;Multitasking keyboard loop
   179 00002901 66813D(151A0000)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   179 00002909 FF                  <1>
   180 0000290A 751B                <1>     jne .skipClockRead
   181 0000290C E836500000          <1>     call dosPushRegs
   182 00002911 F8                  <1>     clc ;Clear CF, write primary header to backup
   183 00002912 E884000000          <1>     call swapPrimaryHeader
   184 00002917 E811070000          <1>     call readDateTimeRecord
   185 0000291C F9                  <1>     stc ;Set CF, write backup to primary header
   186 0000291D E879000000          <1>     call swapPrimaryHeader
   187 00002922 E809500000          <1>     call dosPopRegs
   188                              <1> .skipClockRead:
   189 00002927 66FF05(151A0000)    <1>     inc word [keybTicks]
   190 0000292E EBB6                <1>     jmp short .readAgain
   191                              <1> .pullChar:
   192 00002930 30E4                <1>     xor ah, ah
   193 00002932 E849FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   194 00002937 5E                  <1>     pop rsi
   195 00002938 3C00                <1>     cmp al, NUL ;Is this the null char?
   196 0000293A 7507                <1>     jne .exit
   197                              <1>     ;We are mid extended ascii, prevent printer toggling
   198 0000293C C605(141A0000)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   199                              <1> .exit:
   200                              <1>     return
    13                              <2> %%_ret:
    14 00002943 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> 
   202                              <1> printString_B:      ;ah = 09h
   203 00002944 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   204                              <1> .ps0:
   205 00002947 AC                  <1>     lodsb   ;Get char in al and inc rsi
   206 00002948 3C24                <1>     cmp al, "$" ;End of string char?
   207                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000294A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000294C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   208 0000294D E81BFEFFFF          <1>     call charOut_B.in
   209 00002952 EBF3                <1>     jmp short .ps0
   210                              <1> 
   211                              <1> checkStdinStatus:  ;ah = 0Bh
   212                              <1> ;Returns the status of the driver controlling vCon
   213 00002954 E8DB000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   214 00002959 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   215                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000295B 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000295D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   216 0000295E FEC8                <1>     dec al  ;Set al to -1 if char available
   217                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 00002960 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> clearbuffDoFunc:   ;ah = 0Ch
   219                              <1> ;Clears any buffers and issues a console read command (the command in al)
   220                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   221 00002961 50                  <1>     push rax
   222 00002962 52                  <1>     push rdx
   223 00002963 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   224 00002965 E895010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   225 0000296A 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   226 0000296C B404                <1>     mov ah, 04h ;Flush input buffers
   227 0000296E E80DFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   228                              <1> .skipFlush:
   229 00002973 5A                  <1>     pop rdx
   230 00002974 58                  <1>     pop rax
   231 00002975 88C4                <1>     mov ah, al  ;Move function number into ah
   232 00002977 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   233 00002979 7507                <1>     jne .others
   234 0000297B 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   235 0000297E 7412                <1>     jz .bad ;Yes, exit
   236 00002980 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   237                              <1> .others:
   238 00002982 3C01                <1>     cmp al, 01h
   239 00002984 740F                <1>     je .callFunction
   240 00002986 3C07                <1>     cmp al, 07h
   241 00002988 740B                <1>     je .callFunction
   242 0000298A 3C08                <1>     cmp al, 08h
   243 0000298C 7407                <1>     je .callFunction
   244 0000298E 3C0A                <1>     cmp al, 0Ah
   245 00002990 7403                <1>     je .callFunction
   246                              <1> .bad:
   247 00002992 30C0                <1>     xor al, al
   248                              <1>     return
    13                              <2> %%_ret:
    14 00002994 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   249                              <1> .callFunction:
   250 00002995 FA                  <1>     cli ;Prepare to swap stack pointer
   251                              <1>     ;The below address avoids "properly" reentering DOS
   252                              <1>     ;We simply reuse the function dispatch aspect. 
   253                              <1>     ;this means we dont trash the caller's register frame 
   254 00002996 E9B64E0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   255                              <1> ;------------------------
   256                              <1> ;  Primitive functions  :
   257                              <1> ;------------------------
   258                              <1> swapPrimaryHeader:
   259                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   260                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   261 0000299B 56                  <1>     push rsi
   262 0000299C 57                  <1>     push rdi
   263 0000299D 51                  <1>     push rcx
   264 0000299E 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   264 000029A7 00                  <1>
   265 000029A8 488D35(C1040000)    <1>     lea rsi, primReqPkt
   266 000029AF 488D3D(EA190000)    <1>     lea rdi, bkupReqHdr
   267 000029B6 7303                <1>     jnc .read
   268 000029B8 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   269                              <1> .read:
   270 000029BB F3A4                <1>     rep movsb   ;Swap
   271 000029BD 59                  <1>     pop rcx
   272 000029BE 5F                  <1>     pop rdi
   273 000029BF 5E                  <1>     pop rsi
   274                              <1>     return
    13                              <2> %%_ret:
    14 000029C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> outputOnStdout:
   276                              <1> ;Input: al = Char to output
   277                              <1> ;Output: CF=CY, all good
   278 000029C1 53                  <1>     push rbx
   279 000029C2 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   280 000029C7 E833010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   281 000029CC 7217                <1>     jc .exit
   282 000029CE 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   283 000029D4 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   284 000029D6 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   285 000029DA 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 29?
   286 000029E0 7405                <1>     jz .notCharDevOrFast
   287 000029E2 CD29                <1>     int 29h ;Fast output
   288                              <1> .exitOk:
   289 000029E4 F8                  <1>     clc
   290                              <1> .exit:
   291 000029E5 5B                  <1>     pop rbx
   292                              <1>     return
    13                              <2> %%_ret:
    14 000029E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   293                              <1> .notCharDevOrFast:
   294 000029E7 E80A000000          <1>     call outputOnSFT
   295 000029EC 5B                  <1>     pop rbx
   296                              <1>     return
    13                              <2> %%_ret:
    14 000029ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> outputToHandle:
   299                              <1> ;Char to output must be in al
   300 000029EE E80C010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   301                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000029F3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000029F5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   302                              <1> outputOnSFT:
   303                              <1> ;Output char in al to SFT in rsi
   304                              <1> ;Waits until device is not busy to send char.
   305                              <1> ;Calls int 28h if device busy
   306 000029F6 50                  <1>     push rax
   307 000029F7 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   308 000029F9 E882FBFFFF          <1>     call mainCharIO
   309 000029FE 58                  <1>     pop rax
   310 000029FF 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   311 00002A01 B402                <1>     mov ah, 02h ;Output char in al
   312 00002A03 E878FBFFFF          <1>     call mainCharIO
   313 00002A08 F8                  <1>     clc
   314                              <1>     return
    13                              <2> %%_ret:
    14 00002A09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> .signalLoop:
   316 00002A0A E802000000          <1>     call callInt28h
   317 00002A0F EBE5                <1>     jmp short outputOnSFT
   318                              <1> 
   319                              <1> callInt28h:
   320                              <1> ;Preserve full state, including "safetocallint28" flag and flags
   321 00002A11 9C                  <1>     pushfq
   322 00002A12 F605(95040000)FF    <1>     test byte [int28Flag], -1
   323 00002A19 7417                <1>     jz .exit    ;If zero, not safe
   324 00002A1B F605(07040000)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   325 00002A22 750E                <1>     jnz .exit
   326                              <1> ;Preserve stack alignment!!! Push Qword including and after int28Flag 
   327 00002A24 FF35(95040000)      <1>     push qword [int28Flag] 
   328 00002A2A CD28                <1>     int 28h
   329 00002A2C 8F05(95040000)      <1>     pop qword [int28Flag]    ;Return original value
   330                              <1> .exit:
   331 00002A32 9D                  <1>     popfq
   332                              <1>     return
    13                              <2> %%_ret:
    14 00002A33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> 
   334                              <1> 
   335                              <1> vConCtrlCheck:
   336                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   337                              <1> ; the processing. 
   338                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   339                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   340                              <1> ;
   341                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   342                              <1> ;^S will pause screen processing until another key is processed by vCon input
   343                              <1> ;^P will toggle the printer echo feature of the vConsole
   344                              <1> ;
   345                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   346                              <1> ; in ASCII mode when called using 21h/3Fh (Handle Read)
   347                              <1> ;
   348                              <1> ;Output: 
   349                              <1> ;   CF=CY : Error
   350                              <1> ;   CF=NC : ...
   351                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   352                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   353 00002A34 E829010000          <1>     call checkBreak ;Check if there is a ^C on CON
   354 00002A39 53                  <1>     push rbx
   355 00002A3A 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   356 00002A3C E8BE000000          <1>     call getCharDevSFT
   357 00002A41 5B                  <1>     pop rbx
   358                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002A42 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002A44 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   359 00002A45 B401                <1>     mov ah, 01  ;Non destructively read CON
   360 00002A47 E834FBFFFF          <1>     call mainCharIO
   361 00002A4C 74C3                <1>     jz callInt28h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 28h
   362                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   363 00002A4E 3C13                <1>     cmp al, DC3 ;^S ?
   364 00002A50 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   365 00002A52 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   366 00002A54 E827FBFFFF          <1>     call mainCharIO
   367 00002A59 E963000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   368                              <1> .checkPrintOrExit:
   369 00002A5E 3C10                <1>     cmp al, DLE ;Do we have ^P?
   370 00002A60 7468                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   371 00002A62 3C03                <1>     cmp al, ETX ;Do we have ^C?
   372 00002A64 7464                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   373                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   374                              <1>     return 
    13                              <2> %%_ret:
    14 00002A66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   375                              <1> .printToggle:
   376 00002A67 F615(CF030000)      <1>     not byte [printEcho]    ;Compliment the flag.
   377 00002A6D 53                  <1>     push rbx
   378 00002A6E BB04000000          <1>     mov ebx, 4  ;PRN handle
   379 00002A73 E887000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   380 00002A78 5B                  <1>     pop rbx
   381                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002A79 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002A7B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   382 00002A7C 57                  <1>     push rdi
   383 00002A7D 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   384 00002A80 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], devCharNetSpool  ;Check if net spooler
   385 00002A86 741D                <1>     jz .notNet
   386 00002A88 50                  <1>     push rax
   387 00002A89 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   388 00002A8E CD2F                <1>     int 2Fh
   389 00002A90 58                  <1>     pop rax
   390 00002A91 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   391                              <1>     ;If something went wrong, turn off echo
   392 00002A93 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   393 00002A9A 50                  <1>     push rax
   394 00002A9B B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   395 00002AA0 CD2F                <1>     int 2Fh
   396 00002AA2 58                  <1>     pop rax
   397 00002AA3 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   398                              <1> .notNet:
   399                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   400                              <1> ; 0Dh or 0Eh
   401 00002AA5 803D(CF030000)00    <1>     cmp byte [printEcho], 00
   402 00002AAC 7507                <1>     jnz .echoOn
   403 00002AAE E82DFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   404 00002AB3 EB05                <1>     jmp short .printExit
   405                              <1> .echoOn:
   406 00002AB5 E81DFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   407                              <1> .printExit:
   408 00002ABA 5F                  <1>     pop rdi
   409                              <1>     return
    13                              <2> %%_ret:
    14 00002ABB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   410                              <1> .sigNextChar:   ;Signal Int 28h before waiting for the next char
   411 00002ABC E850FFFFFF          <1>     call callInt28h
   412                              <1> .waitNextChar:   ;Here get next char
   413 00002AC1 B401                <1>     mov ah, 01h ;ND read
   414 00002AC3 E8B8FAFFFF          <1>     call mainCharIO
   415 00002AC8 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 28h and keep waiting
   416                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   417 00002ACA 53                  <1>     push rbx
   418 00002ACB 31DB                <1>     xor ebx, ebx
   419 00002ACD E82D000000          <1>     call getCharDevSFT
   420 00002AD2 5B                  <1>     pop rbx
   421                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002AD3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002AD5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   422 00002AD6 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   423 00002AD8 E8A3FAFFFF          <1>     call mainCharIO
   424 00002ADD 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   425 00002ADF 7514                <1>     jnz .checkBreak2
   426 00002AE1 803D(141A0000)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   427 00002AE8 0F8479FFFFFF        <1>     jz .printToggle ;If 0, toggle!
   428 00002AEE C605(141A0000)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   429                              <1> .checkBreak2:
   430 00002AF5 3C03                <1>     cmp al, ETX
   431                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002AF7 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002AF9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   432 00002AFA E9B2400000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   433                              <1> 
   434                              <1> 
   435                              <1> getCharDevSFT:
   436                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   437                              <1> ;Input: bx = zero extended handle number
   438                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   439                              <1> ;        CF=CY => al = Error code, abort operation
   440 00002AFF F605(94040000)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   441 00002B06 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   442                              <1> .getSFT:
   443 00002B08 57                  <1>     push rdi
   444 00002B09 E892270000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   445 00002B0E 4889FE              <1>     mov rsi, rdi
   446 00002B11 5F                  <1>     pop rdi
   447                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 00002B12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> .swap:
   449                              <1> ;workingSFT is only set for CON calls
   450 00002B13 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   451 00002B19 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   452 00002B1B 488B35(22070000)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   453 00002B22 F8                  <1>     clc
   454                              <1>     return
    13                              <2> %%_ret:
    14 00002B23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   455                              <1> 
   456                              <1> ;------------------------
   457                              <1> ;   Utility functions   :
   458                              <1> ;------------------------
   459                              <1> printCaretASCII:
   460                              <1> ;Input: al = Char to print with a caret
   461                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   462                              <1> ;First check if the char should be careted, and then print normally if so
   463 00002B24 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   464 00002B26 0F8341FCFFFF        <1>     jae charOut_B.in
   465 00002B2C 3C09                <1>     cmp al, TAB
   466 00002B2E 0F8439FCFFFF        <1>     je charOut_B.in
   467 00002B34 3C15                <1>     cmp al, NAK
   468 00002B36 0F8431FCFFFF        <1>     je charOut_B.in
   469 00002B3C 3C14                <1>     cmp al, DC4
   470 00002B3E 0F8429FCFFFF        <1>     je charOut_B.in
   471 00002B44 50                  <1>     push rax
   472 00002B45 B05E                <1>     mov al, "^" ;Get caret in place
   473 00002B47 E821FCFFFF          <1>     call charOut_B.in
   474 00002B4C 58                  <1>     pop rax
   475 00002B4D 0440                <1>     add al, "@" ;Turn into an ASCII Char
   476 00002B4F E919FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   477                              <1> printCRLF:
   478 00002B54 B00D                <1>     mov al, CR
   479 00002B56 E812FCFFFF          <1>     call charOut_B.in
   480 00002B5B B00A                <1>     mov al, LF
   481 00002B5D E90BFCFFFF          <1>     jmp charOut_B.in
   482                              <1> 
   483                              <1> checkBreak:
   484                              <1> ;Reads bytes from CON if there are any bytes to read and 
   485                              <1> ; if it is a ^C or CTRL+BREAK, then exit via Int 23h
   486 00002B62 803D(08040000)01    <1>     cmp byte [inDOS], 1
   487                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002B69 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002B6B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   488                              <1> ;Returns in al the keystroke that is available IF one is available
   489                              <1> ; or al=0 if no keystroke available
   490 00002B6C 53                  <1>     push rbx
   491 00002B6D 56                  <1>     push rsi
   492 00002B6E 488B35(53000000)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   493                              <1>     ;Place command code and a zero status word at the same time
   494 00002B75 C705(ED040000)0500- <1>     mov dword [critReqPkt + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   494 00002B7D 0000                <1>
   495                              <1>     ;Place the packet size in the hdrlen field
   496 00002B7F C605(EB040000)0E    <1>     mov byte [critReqPkt + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   497 00002B86 488D1D(EB040000)    <1>     lea rbx, critReqPkt
   498 00002B8D E896440000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   499                              <1>     ;Check if the busy bit is set (No keystroke available)
   500 00002B92 66F705(EE040000)00- <1>     test word [critReqPkt + ndInNoWaitPkt.status], drvBsyStatus
   500 00002B9A 02                  <1>
   501 00002B9B 7405                <1>     jz .charFound
   502                              <1> .exit:
   503 00002B9D 30C0                <1>     xor al, al
   504 00002B9F 5E                  <1>     pop rsi
   505 00002BA0 5B                  <1>     pop rbx
   506                              <1>     return
    13                              <2> %%_ret:
    14 00002BA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> .charFound:
   508                              <1> ;Keystroke available, proceed
   509 00002BA2 8A05(F8040000)      <1>     mov al, byte [critReqPkt + ndInNoWaitPkt.retbyt]    ;Get char
   510 00002BA8 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   511 00002BAA 75F1                <1>     jne .exit   ;If not equal exit
   512                              <1> ;Now we pull the char out of the buffer
   513 00002BAC C705(ED040000)0400- <1>     mov dword [critReqPkt + ioReqPkt.cmdcde], drvREAD ;Read command
   513 00002BB4 0000                <1>
   514 00002BB6 C605(EB040000)2A    <1>     mov byte [critReqPkt + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   515                              <1>     ;Place pointers and number of chars
   516 00002BBD C705(01050000)0100- <1>     mov dword [critReqPkt + ioReqPkt.tfrlen], 1 ;One char to be read
   516 00002BC5 0000                <1>
   517                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   518 00002BC7 488D05(F8040000)    <1>     lea rax, qword [critReqPkt + ioReqPkt.medesc]
   519 00002BCE 488905(F9040000)    <1>     mov qword [critReqPkt + ioReqPkt.bufptr], rax
   520 00002BD5 E84E440000          <1>     call goDriver   ;RSI and RBX as before
   521 00002BDA E9D23F0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   522                              <1> 
   523                              <1> vConSwapDriver:
   524                              <1> ;Sets up the vCon to use the alternative SFT pointer
   525 00002BDF 57                  <1>     push rdi
   526 00002BE0 C605(94040000)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   527 00002BE7 E8F8240000          <1>     call getCurrentSFT ;Get current SFT pointer
   528 00002BEC 48893D(22070000)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   529 00002BF3 5F                  <1>     pop rdi
   530                              <1>     return
    13                              <2> %%_ret:
    14 00002BF4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> vConRetDriver:
   533                              <1> ;Returns the original driver (sets flag down)
   534 00002BF5 C605(94040000)00    <1>     mov byte [vConDrvSwp], 0
   535                              <1>     return
    13                              <2> %%_ret:
    14 00002BFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   536                              <1> 
   537                              <1> ;--------------------------------------------------
   538                              <1> ;      Main Keyboard Buffered Input Function      :
   539                              <1> ;--------------------------------------------------
   540                              <1> buffCharInput_BE:  ;ah = 0Ah
   541                              <1> ;Buffer pointer in rdx
   542                              <1> ; byte [rdx + 0], buffer length
   543                              <1> ; byte [rdx + 1], number of chars in buffer
   544                              <1> ; byte [rdx + 2], buffer start
   545                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   546                              <1> ;Register use
   547                              <1> ; dh = Char offset in internal buffer
   548                              <1> ; dl = Buffer length
   549                              <1> ; bh = Char offset in user buffer
   550                              <1> ; bl = Number of chars already in the buffer
   551                              <1> ; rdi = Internal buffer
   552                              <1> ; rsi = User buffer
   553 00002BFD 4889D6              <1>     mov rsi, rdx
   554 00002C00 66AD                <1>     lodsw   ;Get buffer metadata in ax
   555 00002C02 84C0                <1>     test al, al
   556                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002C04 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002C06 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   557 00002C07 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   558 00002C0A 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   559 00002C0C 7606                <1>     jbe .avoidcheck
   560 00002C0E 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   561 00002C12 7402                <1>     je .functionKeyOk
   562                              <1> .avoidcheck:
   563 00002C14 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   564                              <1> .functionKeyOk:
   565 00002C16 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   566 00002C19 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   567                              <1> .breakEP:
   568 00002C1B 8A05(CC020000)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   569 00002C21 8805(CD020000)      <1>     mov byte [vConCurCnt], al
   570 00002C27 56                  <1>     push rsi    ;Push user buffer address
   571 00002C28 488D3D(CE020000)    <1>     lea rdi, vConBuffer
   572 00002C2F C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   573 00002C36 30F6                <1>     xor dh, dh  ;Ensure these are 0 when coming back from break!
   574 00002C38 30FF                <1>     xor bh, bh  ;They should be... earmark
   575 00002C3A E8A6FCFFFF          <1>     call charIn_B   ;Get a char in AL from 21/08h
   576 00002C3F 3C0A                <1>     cmp al, LF
   577 00002C41 7505                <1>     jne .checkControlChars
   578                              <1> .mainLoop:
   579 00002C43 E89DFCFFFF          <1>     call charIn_B
   580                              <1> .checkControlChars:
   581 00002C48 3C06                <1>     cmp al, ACK
   582 00002C4A 74F7                <1>     je .mainLoop   ;Get another char
   583 00002C4C 3A05E8D3FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   584 00002C52 0F842E010000        <1>     je .escape
   585 00002C58 3C7F                <1>     cmp al, DEL
   586 00002C5A 0F848F000000        <1>     je .delete
   587 00002C60 3C08                <1>     cmp al, BSP
   588 00002C62 0F8487000000        <1>     je .delete
   589 00002C68 3C17                <1>     cmp al, ETB
   590                              <1>     ;Add space for patched jump instructions
   591 00002C6A 9090909090          <1>     db 5 dup (90h)  ;NOP
   592 00002C6F 3C15                <1>     cmp al, NAK
   593 00002C71 9090909090          <1>     db 5 dup (90h)
   594 00002C76 3C0D                <1>     cmp al, CR
   595 00002C78 7452                <1>     je .carriageReturn
   596 00002C7A 3C0A                <1>     cmp al, LF
   597 00002C7C 7467                <1>     je .lineFeed
   598 00002C7E 3A05B7D3FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   599 00002C84 7429                <1>     je .break
   600                              <1> .checkIfCanInsert:
   601 00002C86 38D6                <1>     cmp dh, dl
   602 00002C88 731C                <1>     jae .bufOflw
   603 00002C8A AA                  <1>     stosb   ;Store the byte and increment rdi!
   604 00002C8B FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   605 00002C8D E892FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   606 00002C92 803D(03070000)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   607 00002C99 75A8                <1>     jne .mainLoop
   608                              <1>     ;IF not in insert mode, we fall here
   609                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   610                              <1>     ; or insert chars if needed.
   611 00002C9B 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   612 00002C9D 73A4                <1>     jae .mainLoop  ;If geq dont follow in user buffer
   613 00002C9F 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   614 00002CA2 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   615 00002CA4 EB9D                <1>     jmp short .mainLoop
   616                              <1> .bufOflw:
   617                              <1> ;Buffer overflow
   618 00002CA6 B007                <1>     mov al, BEL ;Sound the bell
   619 00002CA8 E8C0FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   620 00002CAD EB94                <1>     jmp short .mainLoop
   621                              <1> .break:
   622                              <1> ;Break, Place a "\", and do a CRLF
   623 00002CAF B05C                <1>     mov al, "\"
   624 00002CB1 E8B7FAFFFF          <1>     call charOut_B.in
   625 00002CB6 5E                  <1>     pop rsi ;Realign stack
   626                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   627 00002CB7 E898FEFFFF          <1>     call printCRLF
   628                              <1>     ;Align to next tabstop
   629 00002CBC 8A05(CD020000)      <1>     mov al, byte [vConCurCnt]  ;Get without rounding!!
   630 00002CC2 E84FFBFFFF          <1>     call charOut_B.outputATab
   631 00002CC7 E94FFFFFFF          <1>     jmp .breakEP
   632                              <1> .carriageReturn:
   633 00002CCC AA                  <1>     stosb
   634 00002CCD E89BFAFFFF          <1>     call charOut_B.in
   635 00002CD2 5F                  <1>     pop rdi ;User buffer address was pushed 
   636 00002CD3 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   637 00002CD6 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   638                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   639 00002CD8 488D35(CE020000)    <1>     lea rsi, vConBuffer
   640 00002CDF 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   641 00002CE2 F3A4                <1>     rep movsb  ;If the inc dh cause an overflow, dont copy! 
   642                              <1>     return
    13                              <2> %%_ret:
    14 00002CE4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   643                              <1> .lineFeed:
   644 00002CE5 E86AFEFFFF          <1>     call printCRLF
   645 00002CEA E954FFFFFF          <1>     jmp .mainLoop
   646                              <1> .delete:
   647 00002CEF E805000000          <1>     call .removeChar
   648 00002CF4 E94AFFFFFF          <1>     jmp .mainLoop
   649                              <1> .removeChar:
   650 00002CF9 84F6                <1>     test dh, dh ;Is char count 0?
   651 00002CFB 741C                <1>     jz .normalChar   ;If so, skip going back!
   652 00002CFD E86A000000          <1>     call .vConErase
   653 00002D02 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   654 00002D04 3C20                <1>     cmp al, SPC
   655 00002D06 7311                <1>     jae .normalChar
   656 00002D08 3C09                <1>     cmp al, TAB
   657 00002D0A 7422                <1>     je .eraTab
   658 00002D0C 3C15                <1>     cmp al, NAK
   659 00002D0E 7409                <1>     je .normalChar
   660 00002D10 3C14                <1>     cmp al, DC4
   661 00002D12 7405                <1>     je .normalChar
   662 00002D14 E858000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   663                              <1> .normalChar:
   664 00002D19 803D(03070000)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   665                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002D20 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002D22 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   666 00002D23 84FF                <1>     test bh, bh ;Beginning of user buffer?
   667                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002D25 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002D27 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   668 00002D28 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   669 00002D2B FECF                <1>     dec bh
   670                              <1>     return
    13                              <2> %%_ret:
    14 00002D2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> .eraTab:
   672                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   673                              <1> ; up to a tab stop worth of space chars printed
   674 00002D2E 57                  <1>     push rdi
   675 00002D2F 48FFCF              <1>     dec rdi
   676 00002D32 FD                  <1>     std ;Go backwards
   677 00002D33 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   678 00002D36 B020                <1>     mov al, SPC
   679 00002D38 53                  <1>     push rbx
   680 00002D39 BB07000000          <1>     mov ebx, 7
   681 00002D3E 67E30D              <1>     jecxz .onTabstop
   682                              <1> .scanString:
   683 00002D41 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   684 00002D42 7608                <1>     jbe .notChar    ;No, skip handling
   685 00002D44 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   686 00002D48 740A                <1>     je .tabChar
   687 00002D4A FECB                <1>     dec bl
   688                              <1> .notChar:
   689 00002D4C E2F3                <1>     loop .scanString
   690                              <1> .onTabstop:
   691 00002D4E 2A1D(CD020000)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   692                              <1> .tabChar:
   693 00002D54 28F3                <1>     sub bl, dh  ;Same on tabstop
   694 00002D56 00D9                <1>     add cl, bl
   695 00002D58 80E107              <1>     and cl, 7
   696 00002D5B 5B                  <1>     pop rbx
   697 00002D5C 5F                  <1>     pop rdi
   698 00002D5D FC                  <1>     cld
   699 00002D5E 74B9                <1>     jz .normalChar
   700                              <1>     ;Now erase all the spaces placed on the vCon
   701                              <1> .vConDelTab:
   702 00002D60 E80C000000          <1>     call .vConEraseNoDec
   703 00002D65 E2F9                <1>     loop .vConDelTab
   704 00002D67 E9ADFFFFFF          <1>     jmp .normalChar
   705                              <1> .vConErase:
   706                              <1> ;Erase the char on the vCon
   707                              <1> ;Return through the output function
   708 00002D6C 48FFCF              <1>     dec rdi ;Go back a space in the 
   709 00002D6F FECE                <1>     dec dh  ;Decrement char count in the buffer
   710                              <1> .vConEraseNoDec:
   711 00002D71 B008                <1>     mov al, BSP ;Move cursor back
   712 00002D73 E8F5F9FFFF          <1>     call charOut_B.in
   713 00002D78 B020                <1>     mov al, SPC ;Replace with a space
   714 00002D7A E8EEF9FFFF          <1>     call charOut_B.in
   715 00002D7F B008                <1>     mov al, BSP ;Move cursor back again
   716 00002D81 E9E7F9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   717                              <1> .escape:
   718                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   719                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   720                              <1> ; including the function keys.
   721 00002D86 FF25A6D2FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   722                              <1> .f2:
   723 00002D8C E846000000          <1>     call .fCommon2
   724 00002D91 EB0C                <1>     jmp short .fCommon
   725                              <1> .f3:
   726 00002D93 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   727 00002D96 28F9                <1>     sub cl, bh  ;Sub our current position
   728 00002D98 EB05                <1>     jmp short .fCommon
   729                              <1> .f1:
   730 00002D9A B901000000          <1>     mov ecx, 1  ;Get one char
   731                              <1> .fCommon:
   732 00002D9F C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   733 00002DA6 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   734 00002DA8 0F8495FEFFFF        <1>     je .mainLoop
   735 00002DAE 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   736 00002DB0 0F848DFEFFFF        <1>     je .mainLoop
   737                              <1>     ;Else, copy byte by byte, and retain char in al
   738 00002DB6 AC                  <1>     lodsb
   739 00002DB7 AA                  <1>     stosb
   740 00002DB8 E867FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   741 00002DBD FEC7                <1>     inc bh
   742 00002DBF FEC6                <1>     inc dh
   743 00002DC1 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   744 00002DC3 E97BFEFFFF          <1>     jmp .mainLoop
   745                              <1> .f4:
   746 00002DC8 E80A000000          <1>     call .fCommon2
   747 00002DCD 4801CE              <1>     add rsi, rcx
   748 00002DD0 00CF                <1>     add bh, cl
   749 00002DD2 E96CFEFFFF          <1>     jmp .mainLoop
   750                              <1> .fCommon2:
   751 00002DD7 E809FBFFFF          <1>     call charIn_B   ;Get a char in al
   752 00002DDC 3A0558D2FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   753 00002DE2 750B                <1>     jne .fnotEscape
   754                              <1>     ;Get another char if they typed escape and force it in the buffer
   755                              <1>     ; Do not return to caller
   756 00002DE4 E8FCFAFFFF          <1>     call charIn_B
   757                              <1> .fforceExit:
   758 00002DE9 59                  <1>     pop rcx ;Get original return address from stack
   759 00002DEA E954FEFFFF          <1>     jmp .mainLoop
   760                              <1> .fnotEscape:
   761 00002DEF 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   762 00002DF2 28F9                <1>     sub cl, bh
   763 00002DF4 74F3                <1>     jz .fforceExit
   764 00002DF6 FFC9                <1>     dec ecx
   765 00002DF8 74EF                <1>     jz .fforceExit
   766 00002DFA 57                  <1>     push rdi
   767 00002DFB 4889F7              <1>     mov rdi, rsi
   768 00002DFE 48FFC7              <1>     inc rdi
   769 00002E01 F2AE                <1>     repne scasb ;Search for the char to start printing from
   770 00002E03 5F                  <1>     pop rdi
   771 00002E04 75E3                <1>     jne .fforceExit ;If char not found, return
   772 00002E06 F6D1                <1>     not cl
   773 00002E08 00D9                <1>     add cl, bl
   774 00002E0A 28F9                <1>     sub cl, bh
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002E0C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> .f5:
   777 00002E0D B040                <1>     mov al, "@"
   778 00002E0F E859F9FFFF          <1>     call charOut_B.in   ;Print the char
   779 00002E14 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   780 00002E15 57                  <1>     push rdi
   781 00002E16 E8BDFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   782 00002E1B 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   783 00002E1C 88F3                <1>     mov bl, dh
   784 00002E1E E994FEFFFF          <1>     jmp .breakAlt
   785                              <1> .f6:
   786                              <1> ;If the user wants to insert a EOF, they can use F6
   787 00002E23 B01A                <1>     mov al, EOF
   788 00002E25 E95CFEFFFF          <1>     jmp .checkIfCanInsert
   789                              <1> .f7:
   790                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   791 00002E2A 8A050AD2FFFF        <1>     mov al, byte [extESC]
   792 00002E30 E951FEFFFF          <1>     jmp .checkIfCanInsert
   793                              <1> .toggleIns:
   794 00002E35 F615(03070000)      <1>     not byte [vConInsert]   ;Toggle
   795                              <1>     return
    13                              <2> %%_ret:
    14 00002E3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> .eDel:
   797 00002E3C 38DF                <1>     cmp bh, bl
   798 00002E3E 0F84FFFDFFFF        <1>     je .mainLoop
   799 00002E44 FEC7                <1>     inc bh
   800 00002E46 48FFC6              <1>     inc rsi
   801 00002E49 E9F5FDFFFF          <1>     jmp .mainLoop
   802                              <1> 
   803                              <1> editKeys:
   804                              <1> ;Our Default Extended keys handler
   805 00002E4E E892FAFFFF          <1>     call charIn_B   ;Get the next char in al
   806 00002E53 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   807 00002E58 57                  <1>     push rdi    ;Preserve rdi
   808 00002E59 488D3DDCD1FFFF      <1>     lea rdi, extKeyTbl
   809 00002E60 57                  <1>     push rdi
   810                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   811                              <1>     ; offset of function from extKeyTbl
   812                              <1> .lp:
   813 00002E61 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   814 00002E62 740D                <1>     je .charFound
   815 00002E64 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   816 00002E66 7414                <1>     jz .notInTable
   817 00002E68 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   818 00002E6F EBF0                <1>     jmp short .lp
   819                              <1> .charFound:
   820 00002E71 59                  <1>     pop rcx ;Pop back the effective address of the table
   821 00002E72 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   822 00002E76 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   823 00002E79 5F                  <1>     pop rdi
   824 00002E7A FFE1                <1>     jmp rcx
   825                              <1> .notInTable:
   826 00002E7C 59                  <1>     pop rcx ;Realign stack
   827 00002E7D 59                  <1>     pop rcx
   828 00002E7E E9C0FDFFFF          <1>     jmp buffCharInput_BE.mainLoop
    40                                  %include "./src/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 00002E83 E8A5010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 00002E88 E846460000          <1>     call getUserRegs
     6 00002E8D 668B15(8E040000)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 00002E94 0FB60D(90040000)    <1>     movzx ecx, byte [years]
     9 00002E9B 81C1BC070000        <1>     add ecx, 1980   ;Turn into the year from offset since 1980
    10 00002EA1 8A05(93040000)      <1>     mov al, byte [dayOfWeek]
    11 00002EA7 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    12 00002EAB 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    13                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002EAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    14                              <1> setDate:           ;ah = 2Bh
    15                              <1> ;	CX = year (1980-2099)
    16                              <1> ;   DH = month (1-12)
    17                              <1> ;	DL = day (1-31)
    18 00002EB0 B0FF                <1>     mov al, -1      ;Default to fail
    19 00002EB2 6681E9BC07          <1>     sub cx, 1980    ;Turn into years since 1980
    20                              <1>     retc            ;Return with -1 if cx is below 1980. Avoids going into below.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002EB7 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002EB9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    21 00002EBA E873000000          <1>     call writeDate  ;Sets ax to 0 or -1, cx needs to be offset since 1980
    22                              <1>     return
    13                              <2> %%_ret:
    14 00002EBF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> getTime:           ;ah = 2Ch
    24 00002EC0 E868010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    25 00002EC5 E809460000          <1>     call getUserRegs
    26 00002ECA 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    27 00002ED1 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    28 00002ED8 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    29 00002EDC 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    30                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002EE0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> setTime:           ;ah = 2Dh
    32                              <1> ;   CH = hour (0-23)
    33                              <1> ;	CL = minutes (0-59)
    34                              <1> ;	DH = seconds (0-59)
    35                              <1> ;	DL = hundredths (0-99)
    36 00002EE1 80FD17              <1>     cmp ch, 23
    37 00002EE4 7749                <1>     ja .exitBad
    38 00002EE6 80F93B              <1>     cmp cl, 59
    39 00002EE9 7744                <1>     ja .exitBad
    40 00002EEB 80FE3B              <1>     cmp dh, 59
    41 00002EEE 773F                <1>     ja .exitBad
    42 00002EF0 80FA63              <1>     cmp dl, 99
    43 00002EF3 773A                <1>     ja .exitBad
    44                              <1> ;Now we read date (updating internal count if necessary)
    45 00002EF5 E833010000          <1>     call readDateTimeRecord
    46 00002EFA 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    47 00002F01 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    48 00002F08 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    49 00002F0B 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    50 00002F0F 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    51 00002F13 B906000000          <1>     mov ecx, 6
    52 00002F18 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    53 00002F1B E845440000          <1>     call primReqWriteSetup   ;rbx now points to request header
    54 00002F20 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    55 00002F27 E8FC400000          <1>     call goDriver
    56 00002F2C 30C0                <1>     xor al, al
    57                              <1>     return
    13                              <2> %%_ret:
    14 00002F2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    58                              <1> .exitBad:
    59 00002F2F B0FF                <1>     mov al, -1
    60                              <1>     return
    13                              <2> %%_ret:
    14 00002F31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> ;------------------------
    62                              <1> ;   Utility functions   :
    63                              <1> ;------------------------
    64                              <1> writeDate:
    65                              <1> ;Input: cx = 00-120 (1980-2099)
    66                              <1> ;       dl = Day    (01-31)
    67                              <1> ;       dh = Month  (01-12)
    68 00002F32 6681F97800          <1>     cmp cx, 120
    69 00002F37 0F83ED000000        <1>     jae .exitBad
    70 00002F3D 84F6                <1>     test dh, dh
    71 00002F3F 0F84E5000000        <1>     jz .exitBad
    72 00002F45 80FE0C              <1>     cmp dh, 12
    73 00002F48 0F87DC000000        <1>     ja .exitBad
    74 00002F4E 84D2                <1>     test dl, dl
    75 00002F50 0F84D4000000        <1>     jz .exitBad
    76 00002F56 80FA1F              <1>     cmp dl, 31
    77 00002F59 0F87CB000000        <1>     ja .exitBad
    78 00002F5F 668915(8E040000)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    79                              <1>     ;mov byte [monthOfYear], dh
    80 00002F66 880D(90040000)      <1>     mov byte [years], cl    ;Save the years count
    81 00002F6C E884010000          <1>     call setDaysInFeb   ;Set days in february this year
    82 00002F71 80FE02              <1>     cmp dh, 2   ;Are we in Feb?
    83 00002F74 750C                <1>     jne .notFeb
    84 00002F76 3A15E2D0FFFF        <1>     cmp dl, byte [monthsTbl + 1] ;Compare if we are a bad date?
    85 00002F7C 0F87A8000000        <1>     ja .exitBad ;If 29-28 (for example), error!
    86                              <1> .notFeb:
    87 00002F82 88CD                <1>     mov ch, cl ;Get years count in ch
    88 00002F84 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    89 00002F87 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    90 00002F8A 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    91 00002F8D BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    92 00002F92 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    93                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    94 00002F94 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    95 00002F97 67E311              <1>     jecxz .addDay    ;Skip adding years
    96 00002F9A 056E010000          <1>     add eax, 366    ;First add for a leap year
    97                              <1> .addYears:
    98 00002F9F FFC9                <1>     dec ecx
    99 00002FA1 67E307              <1>     jecxz .addDay    ;Jump if in year after leap year
   100 00002FA4 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   101 00002FA9 EBF4                <1>     jmp short .addYears
   102                              <1> .addDay:
   103 00002FAB 89C2                <1>     mov edx, eax    ;Save this number in edx
   104                              <1>     ;Now to add day offset
   105 00002FAD 0FB60D(8F040000)    <1>     movzx ecx, byte [monthOfYear]
   106 00002FB4 488D35A2D0FFFF      <1>     lea rsi, monthsTbl
   107                              <1> .addDaysInMonth:
   108 00002FBB FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   109 00002FBD 67E308              <1>     jecxz .addMonthOffset
   110 00002FC0 AC                  <1>     lodsb   ;Get the number of days in the month in al
   111 00002FC1 0FB6C0              <1>     movzx eax, al
   112 00002FC4 01C2                <1>     add edx, eax
   113 00002FC6 EBF3                <1>     jmp short .addDaysInMonth
   114                              <1> .addMonthOffset:
   115 00002FC8 0FB60D(8E040000)    <1>     movzx ecx, byte [dayOfMonth]
   116 00002FCF FFC9                <1>     dec ecx
   117 00002FD1 01CA                <1>     add edx, ecx    ;Add month offset
   118                              <1>     ;edx has the number of days since 01/01/1980
   119 00002FD3 668915(91040000)    <1>     mov word [daysOffset], dx   ;Store!
   120                              <1> ;Now read and then write CLOCKrecrd
   121 00002FDA 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   122 00002FE1 B906000000          <1>     mov ecx, 6
   123 00002FE6 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   124 00002FE9 E882430000          <1>     call primReqReadSetup   ;rbx now points to request header
   125 00002FEE 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   126 00002FF5 E82E400000          <1>     call goDriver
   127                              <1> ;Now we change daycount and write it back
   128 00002FFA 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   129 00003001 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   130 00003008 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   131 0000300B B906000000          <1>     mov ecx, 6
   132 00003010 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   133 00003013 E84D430000          <1>     call primReqWriteSetup   ;rbx now points to request header
   134 00003018 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   135 0000301F E804400000          <1>     call goDriver
   136 00003024 E8AE000000          <1>     call setDayofWeek
   137                              <1>     return
    13                              <2> %%_ret:
    14 00003029 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> .exitBad:
   139 0000302A B0FF                <1>     mov al, -1
   140                              <1>     return
    13                              <2> %%_ret:
    14 0000302C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> readDateTimeRecord:
   143                              <1> ;Will read the clock using the primary request header
   144                              <1> ;Preserves all regs except eax and flags
   145 0000302D 53                  <1>     push rbx
   146 0000302E 51                  <1>     push rcx
   147 0000302F 52                  <1>     push rdx
   148 00003030 56                  <1>     push rsi
   149 00003031 55                  <1>     push rbp
   150                              <1> 
   151 00003032 66C705(151A0000)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   151 0000303A 00                  <1>
   152 0000303B 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   153 00003042 B906000000          <1>     mov ecx, 6      ;Number of bytes to xfr
   154 00003047 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   155                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   156                              <1> ; rbx = Data storage buffer ptr
   157                              <1> ; ecx = Number of sectors to transfer | Number of bytes to xfr, if char dev
   158                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   159 0000304A E821430000          <1>     call primReqReadSetup   ;rbx now points to request header
   160 0000304F 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   161 00003056 E8CD3F0000          <1>     call goDriver
   162 0000305B 0FB705(16050000)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   163                              <1> ;Here we have:  ax = Days since 1/1/1980
   164                              <1> ;Updates the internal date fields
   165                              <1> ;Internal time fields are in the clock record
   166                              <1> ;So now we check if the number of days since 1980 are the same.
   167                              <1> ;If so, we can skip updating.
   168 00003062 663B05(91040000)    <1>     cmp ax, word [daysOffset]
   169 00003069 7466                <1>     je .exit    ;Return if equal
   170 0000306B 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   171 00003070 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   172 00003072 668905(91040000)    <1>     mov word [daysOffset], ax   ;Save this new offset
   173                              <1>     ;Now want to update years, month and day fields
   174                              <1>     ;ax has the number of days since 01/01/1980
   175                              <1>     ;Get days in a 4 year period
   176 00003079 BBB5050000          <1>     mov ebx, 365*4 + 1
   177 0000307E 31D2                <1>     xor edx, edx
   178 00003080 89D1                <1>     mov ecx, edx  ;Zero ecx
   179 00003082 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   180                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   181                              <1>     ;edx has offset into current 4 year bunch
   182 00003084 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   183 00003089 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   184 0000308B 7210                <1>     jb .foundBunch
   185 0000308D 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   186 0000308F FFC1                <1>     inc ecx
   187 00003091 FFCB                <1>     dec ebx ;Number of days in a normal year
   188                              <1> .findBunch:
   189 00003093 39DA                <1>     cmp edx, ebx
   190 00003095 7206                <1>     jb .foundBunch
   191 00003097 29DA                <1>     sub edx, ebx
   192 00003099 FFC1                <1>     inc ecx
   193 0000309B EBF6                <1>     jmp short .findBunch
   194                              <1> .foundBunch:
   195                              <1>     ;If ecx = 0, february has 29 days!
   196                              <1>     ;eax has number of four year bunches elapsed since 1980
   197 0000309D C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   198 000030A0 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   199                              <1>     ;ecx now has the number of years since 1980
   200 000030A2 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   201                              <1> ;edx has number of days into the year we are in
   202                              <1> ;eax has number of days in Feb for this year
   203 000030A7 488D35AFCFFFFF      <1>     lea rsi, monthsTbl
   204 000030AE 31C9                <1>     xor ecx, ecx    ;Use as month counter
   205                              <1> .monthSearch:
   206 000030B0 FFC1                <1>     inc ecx ;Start from 1
   207 000030B2 AC                  <1>     lodsb   ;Get value in al and inc rsi
   208 000030B3 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   209 000030B6 39C2                <1>     cmp edx, eax
   210 000030B8 7204                <1>     jb .monthFound
   211 000030BA 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   212 000030BC EBF2                <1>     jmp short .monthSearch
   213                              <1> .monthFound:
   214                              <1>     ;cl has the month (01h-0Ch)
   215                              <1>     ;dl has the day of the month - 1
   216 000030BE FFC2                <1>     inc edx
   217 000030C0 880D(8F040000)      <1>     mov byte [monthOfYear], cl
   218 000030C6 8815(8E040000)      <1>     mov byte [dayOfMonth], dl
   219 000030CC E806000000          <1>     call setDayofWeek
   220                              <1> .exit:
   221 000030D1 5D                  <1>     pop rbp
   222 000030D2 5E                  <1>     pop rsi
   223 000030D3 5A                  <1>     pop rdx
   224 000030D4 59                  <1>     pop rcx
   225 000030D5 5B                  <1>     pop rbx
   226                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 000030D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> setDayofWeek:
   229                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   230 000030D7 0FB705(91040000)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   231 000030DE 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   232                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   233 000030E3 31D2                <1>     xor edx, edx
   234 000030E5 B907000000          <1>     mov ecx, 7   
   235 000030EA F7F1                <1>     div ecx  ;Get remainder in dl
   236 000030EC 8815(93040000)      <1>     mov byte [dayOfWeek], dl
   237                              <1> ;Set ZF to indicate all ok
   238 000030F2 31C0                <1>     xor eax, eax
   239                              <1>     return
    13                              <2> %%_ret:
    14 000030F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> setDaysInFeb:   ;Int 2Fh AX = 121Bh, Set days in february
   242                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   243                              <1> ;Input: cl = Year - 1980
   244                              <1> ;Output: al = Number of days in February
   245 000030F5 880D(90040000)      <1>     mov byte [years], cl    ;Save this figure
   246 000030FB F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   247 000030FE 51                  <1>     push rcx
   248 000030FF 57                  <1>     push rdi
   249 00003100 B81C000000          <1>     mov eax, 28  ;Usual days in february
   250 00003105 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   251 0000310A 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   252 0000310D 488D3D4ACFFFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   253 00003114 AA                  <1>     stosb   ;Store the word in rdi
   254 00003115 5F                  <1>     pop rdi
   255 00003116 59                  <1>     pop rcx
   256                              <1>     return
    13                              <2> %%_ret:
    14 00003117 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> getDirDTwords:
   259                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   260                              <1> ; High word of eax = Date
   261                              <1> ; Low word of eax = Time
   262                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   263                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   264                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   265                              <1> 
   266                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   267                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   268                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   269                              <1> ;Preserves all registers except eax
   270 00003118 53                  <1>     push rbx
   271 00003119 0FB61D(1B050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   272 00003120 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   273 00003122 89D8                <1>     mov eax, ebx
   274 00003124 0FB61D(18050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   275 0000312B C1E305              <1>     shl ebx, 5
   276 0000312E 09D8                <1>     or eax, ebx
   277 00003130 0FB61D(19050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   278 00003137 C1E30B              <1>     shl ebx, 11
   279 0000313A 09D8                <1>     or eax, ebx
   280 0000313C 0FB61D(8E040000)    <1>     movzx ebx, byte [dayOfMonth]
   281 00003143 C1E310              <1>     shl ebx, 16
   282 00003146 09D8                <1>     or eax, ebx
   283 00003148 0FB61D(8F040000)    <1>     movzx ebx, byte [monthOfYear]
   284 0000314F C1E315              <1>     shl ebx, 21
   285 00003152 09D8                <1>     or eax, ebx
   286 00003154 0FB61D(90040000)    <1>     movzx ebx, byte [years]
   287 0000315B C1E319              <1>     shl ebx, 25
   288 0000315E 09D8                <1>     or eax, ebx
   289 00003160 5B                  <1>     pop rbx
   290                              <1>     return
    13                              <2> %%_ret:
    14 00003161 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   291                              <1> getDateAndTimeOld:  ;Int 2Fh AX=120Dh
   292                              <1> ;Returns edx = time
   293                              <1> ;        eax = date
   294                              <1> ; Formally ax and dx but we clear the upper words
   295 00003162 E8C6FEFFFF          <1>     call readDateTimeRecord
   296 00003167 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   297 0000316C 31D2                <1>     xor edx, edx
   298 0000316E 6689C2              <1>     mov dx, ax  ;Save time
   299 00003171 C1E810              <1>     shr eax, 10h    ;Get date into rax
   300                              <1>     return
    13                              <2> %%_ret:
    14 00003174 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                                  %include "./src/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for particular uses. This is planned
     3                              <1> ; to be extended later.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently generally supported:
    14                              <1> ;   openFCB -> Except for creating a volume label.
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB -> Except for creating a volume label.
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions will result in returning al = -1 and 
    24                              <1> ; an extended error code of 05 - Access Denied
    25                              <1> 
    26                              <1> findFirstFileFCB:  ;ah = 11h
    27                              <1> ;Input: rdx -> FCB
    28 00003175 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    29 0000317C 4889D6              <1>     mov rsi, rdx
    30 0000317F 803EFF              <1>     cmp byte [rsi], -1
    31 00003182 7507                <1>     jne .notExt1
    32 00003184 4881C607000000      <1>     add rsi, exFcb.driveNum
    33                              <1> .notExt1:
    34 0000318B 0FB606              <1>     movzx eax, byte [rsi]
    35 0000318E 50                  <1>     push rax    ;Push on stack the drive number
    36 0000318F 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    37 00003196 E837030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    38 0000319B 7306                <1>     jnc .fcbOk
    39 0000319D 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    40 0000319E E9E6470000          <1>     jmp fcbErrExit
    41                              <1> .fcbOk:
    42 000031A3 488D3D(1E050000)    <1>     lea rdi, buffer1
    43 000031AA E837E4FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    44 000031AF 7306                <1>     jnc .fileFound
    45 000031B1 5B                  <1>     pop rbx
    46 000031B2 E9D2470000          <1>     jmp fcbErrExit
    47                              <1> .fileFound:
    48                              <1> ;Now we build an FFBlock internally
    49 000031B7 488D3D(2F060000)    <1>     lea rdi, dosffblock
    50 000031BE 57                  <1>     push rdi
    51 000031BF E8C8E2FFFF          <1>     call setupFFBlock
    52 000031C4 5E                  <1>     pop rsi
    53                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    54 000031C5 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB]
    55 000031CC F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    56 000031D3 7407                <1>     jz .notExt2
    57 000031D5 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    58                              <1> .notExt2:
    59 000031DC 5B                  <1>     pop rbx ;Get back the drive number in bl
    60 000031DD 85DB                <1>     test ebx, ebx
    61 000031DF 7509                <1>     jnz .notCurrentDrive
    62 000031E1 0FB61D(31040000)    <1>     movzx ebx, byte [currentDrv]
    63 000031E8 FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    64                              <1> .notCurrentDrive:
    65 000031EA AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    66 000031EB 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    67 000031EE B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    68 000031F3 F3A5                <1>     rep movsd
    69 000031F5 89D8                <1>     mov eax, ebx
    70 000031F7 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    71 000031F8 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    72 000031FF 488D35(5A060000)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    73 00003206 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    74 0000320D 7412                <1>     jz .notExt3
    75 0000320F B8FFFFFFFF          <1>     mov eax, -1
    76 00003214 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    77 00003215 FFC0                <1>     inc eax ;Make it zero
    78 00003217 AB                  <1>     stosd
    79 00003218 AA                  <1>     stosb   ;Store 5 bytes of zero
    80 00003219 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]
    81 00003220 AA                  <1>     stosb   ;Store the search attributes
    82                              <1> .notExt3:
    83 00003221 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    84 00003223 AA                  <1>     stosb
    85 00003224 B904000000          <1>     mov ecx, fatDirEntry_size/8
    86 00003229 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    87 0000322C E955470000          <1>     jmp fcbGoodExit
    88                              <1>     
    89                              <1> findNextFileFCB:   ;ah = 12h
    90 00003231 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    91 00003238 C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    92 0000323F C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    93 00003246 4889D6              <1>     mov rsi, rdx
    94                              <1> 
    95 00003249 803EFF              <1>     cmp byte [rsi], -1
    96 0000324C 7514                <1>     jne .notExt
    97 0000324E FE0D(FB060000)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
    98 00003254 4881C606000000      <1>     add rsi, exFcb.attribute
    99 0000325B AC                  <1>     lodsb   ;Get search attr in al
   100 0000325C 8805(FC060000)      <1>     mov byte [searchAttr], al
   101                              <1> .notExt:
   102                              <1>     ;rsi points to drive letter
   103 00003262 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   104 00003269 31C0                <1>     xor eax, eax
   105 0000326B AC                  <1>     lodsb   ;Get the FCB drive letter
   106 0000326C 50                  <1>     push rax    ;Push drive letter on the stack
   107 0000326D 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   108 00003270 AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   109 00003271 B905000000          <1>     mov ecx, 5
   110 00003276 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   111 00003278 FF35(17040000)      <1>     push qword [currentDTA] ;Save original currentDTA
   112 0000327E 488D3D(2F060000)    <1>     lea rdi, dosffblock
   113 00003285 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   114 00003286 8F05(17040000)      <1>     pop qword [currentDTA]
   115 0000328C E8D5DDFFFF          <1>     call findNextMain
   116 00003291 8F05(17040000)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   117 00003297 0F831AFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   118 0000329D 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   119 000032A4 F607FF              <1>     test byte [rdi], -1
   120 000032A7 7407                <1>     jz .notExt2
   121 000032A9 4881C707000000      <1>     add rdi, exFcb.driveNum
   122                              <1> .notExt2:
   123 000032B0 5B                  <1>     pop rbx ;Get the drive letter back into bl
   124 000032B1 881F                <1>     mov byte [rdi], bl
   125 000032B3 E9D1460000          <1>     jmp fcbErrExit  ;And exit bad
   126                              <1> 
   127                              <1> deleteFileFCB:     ;ah = 13h
   128 000032B8 488D3D(1E050000)    <1>     lea rdi, buffer1
   129 000032BF 57                  <1>     push rdi
   130 000032C0 E80D020000          <1>     call fcbInitRoutine ;Build path and find file to delete
   131 000032C5 5F                  <1>     pop rdi ;Point rdi to the canonised path
   132 000032C6 0F82BD460000        <1>     jc fcbErrExit
   133 000032CC E815E3FFFF          <1>     call getFilePathNoCanon ;Get the file
   134 000032D1 0F82B2460000        <1>     jc fcbErrExit
   135 000032D7 E8A9100000          <1>     call outerDeleteMain
   136 000032DC 0F82A7460000        <1>     jc fcbErrExit
   137 000032E2 E99F460000          <1>     jmp fcbGoodExit
   138                              <1> 
   139                              <1> renameFileFCB:     ;ah = 17h
   140                              <1> ;Input: rdx -> User FCB
   141 000032E7 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   142                              <1>     ;First we get the drive letter 
   143 000032EE 4889D6              <1>     mov rsi, rdx
   144 000032F1 803EFF              <1>     cmp byte [rsi], -1
   145 000032F4 7507                <1>     jne .notExt
   146 000032F6 4881C607000000      <1>     add rsi, exFcb.driveNum
   147                              <1> .notExt:
   148 000032FD 31C0                <1>     xor eax, eax
   149 000032FF AC                  <1>     lodsb
   150 00003300 50                  <1>     push rax    ;Push the drive letter on the stack for now
   151 00003301 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   152 00003308 E8C5010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   153 0000330D 723D                <1>     jc .badPop
   154 0000330F FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   155 00003315 8F05(26060000)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   156 0000331B 58                  <1>     pop rax ;Get drive letter back
   157 0000331C 488D3D(9E050000)    <1>     lea rdi, buffer2
   158 00003323 E87E010000          <1>     call fcbInitName2
   159 00003328 7223                <1>     jc short .bad
   160 0000332A 488B05(26060000)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   161 00003331 488705(1E060000)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   162 00003338 488905(26060000)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   163 0000333F E8CD0B0000          <1>     call renameMain
   164 00003344 0F833C460000        <1>     jnc fcbGoodExit
   165 0000334A EB01                <1>     jmp short .bad
   166                              <1> .badPop:
   167 0000334C 5B                  <1>     pop rbx ;Pop drive number off stack
   168                              <1> .bad:
   169 0000334D E937460000          <1>     jmp fcbErrExit
   170                              <1> 
   171                              <1> getFileSizeFCB:    ;ah = 23h
   172                              <1> ;This function which can be used to test existance of file without opening it 
   173                              <1> ;Input: rdx -> FCB
   174 00003352 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   175 00003359 488D3D(1E050000)    <1>     lea rdi, buffer1
   176 00003360 57                  <1>     push rdi
   177 00003361 E86C010000          <1>     call fcbInitRoutine
   178 00003366 5F                  <1>     pop rdi
   179 00003367 0F821C460000        <1>     jc fcbErrExit
   180 0000336D E874E2FFFF          <1>     call getFilePathNoCanon
   181 00003372 0F8211460000        <1>     jc fcbErrExit
   182 00003378 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   183                              <1>     ;Now we gotta set up FCB randRecrd Field
   184 0000337E 488B35(1A070000)    <1>     mov rsi, qword [workingFCB]
   185 00003385 803EFF              <1>     cmp byte [rsi], -1
   186 00003388 7507                <1>     jne .notExtended
   187 0000338A 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   188                              <1> .notExtended:
   189                              <1> ;rsi points to the drive number now
   190 00003391 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   191 00003395 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   192 00003397 85D2                <1>     test edx, edx
   193 00003399 7402                <1>     jz .noRemainder
   194 0000339B FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   195                              <1> .noRemainder:
   196 0000339D 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   197 000033A0 E9E1450000          <1>     jmp fcbGoodExit
   198                              <1> 
   199                              <1> setDTA:            ;ah = 1Ah, Always can be used
   200                              <1> ;Called with:
   201                              <1> ;   rdx = Pointer to the new default DTA
   202 000033A5 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   203 000033AC 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   204 000033B0 488915(17040000)    <1>     mov qword [currentDTA], rdx
   205 000033B7 C3                  <1>     ret
   206                              <1> 
   207                              <1> getDTA:            ;ah = 2Fh, Always can be used
   208 000033B8 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   209 000033BF 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   210 000033C6 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   211                              <1>     return
    13                              <2> %%_ret:
    14 000033CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   212                              <1>     
   213                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   214                              <1> ;Input:
   215                              <1> ;rsi points to a command line to parse
   216                              <1> ;rdi points to a future unopened FCB
   217                              <1> ;al = parsing control bits. 
   218                              <1> ; al[0] = If set, leading filename separators are scanned off
   219                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   220                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   221                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   222                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   223                              <1> ;        al = 1 => Wildcards found
   224                              <1> ;        al = -1 => Drive specifier invalid
   225                              <1> ;rsi -> to the first char past the parsed filename
   226                              <1> ;rdi -> First byte of the FCB 
   227                              <1> 
   228 000033CB E8A2010000          <1>     call parseNameToFCB
   229 000033D0 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   230 000033D1 E8FD400000          <1>     call getUserRegs
   231 000033D6 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   232                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 000033D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> createFileFCB:     ;ah = 16h
   235                              <1> openFileFCB:       ;ah = 0Fh
   236                              <1> ;rdx -> Extended FCB
   237                              <1> ;   MUST BE EXTENDED. 
   238                              <1> ;   MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   239                              <1> ; Using FCB's, one can only create a volume label on a volume.
   240                              <1> ;
   241                              <1> ;Deleting a volume label can be done using delete file (fcb)
   242                              <1> ;Renaming a volume label can be done using rename file (fcb)
   243                              <1> ;Creating a volume label can be done using create file (fcb and hdl)
   244                              <1> ;
   245                              <1> ; In all cases, we recommend the use of fcb's ONLY. Hdl funcs are not 
   246                              <1> ; suggested for use with the vol crud because, do we really need the hdl? No!
   247                              <1> ;
   248 000033DA 488915(1A070000)    <1>     mov qword [workingFCB], rdx     ;Save the FCB ptr
   249 000033E1 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   250 000033E4 755D                <1>     jne .exitErr
   251 000033E6 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   252 000033EA 7557                <1>     jne .exitErr
   253                              <1>     ;Here we proceed with creating a volume label
   254 000033EC 488D3D(1E050000)    <1>     lea rdi, buffer1
   255 000033F3 57                  <1>     push rdi
   256 000033F4 E8D9000000          <1>     call fcbInitRoutine     ;Build path to volid
   257 000033F9 5E                  <1>     pop rsi                 ;Point rsi to the canonised path
   258 000033FA 0F8289450000        <1>     jc fcbErrExit
   259 00003400 4889F7              <1>     mov rdi, rsi            ;Pass argument to rdi. rsi, rdi preserved
   260 00003403 E8AC420000          <1>     call checkPathspecOK    ;If the path has wildcards, fail!
   261 00003408 7239                <1>     jc .exitErr
   262 0000340A E8D7E1FFFF          <1>     call getFilePathNoCanon ;Get the file if it exists! Sets DPB too.
   263 0000340F 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
   264 00003415 30C0                <1>     xor al, al
   265 00003417 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Do null path check!
   266 0000341C 7425                <1>     je .exitErr
   267 0000341E 488D3D(100D0000)    <1>     lea rdi, scratchSFT     ;Set the working SFT to the scratch in the SDA
   268 00003425 E8B21C0000          <1>     call setCurrentSFT
   269 0000342A 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]   ;Get the file attribute in al
   270 00003431 E82E110000          <1>     call createMain
   271 00003436 720B                <1>     jc .exitErr
   272                              <1>     ;We close the sda sft since we dont have an explicit FCB close fn.
   273                              <1>     ;Necessary to close the associated share record when sharing.
   274 00003438 E832140000          <1>     call closeMain
   275 0000343D 0F8343450000        <1>     jnc fcbGoodExit     ;We require no back copying so exit!
   276                              <1> .exitErr:
   277 00003443 B805000000          <1>     mov eax, errAccDen
   278 00003448 E93C450000          <1>     jmp fcbErrExit
   279                              <1> 
   280                              <1> closeFileFCB:      ;ah = 10h
   281                              <1> ;This is a minimal function stub which is necessary to "pseudo"-close
   282                              <1> ; opens/creates of volume labels via the open/createFCB function.
   283                              <1> ; Though those functions close by themselves, I won't document that
   284                              <1> ; for future compatibility. Thus, if this function encounters a 
   285                              <1> ; open/create volume label FCB, it returns OK. Else it fails.
   286 0000344D 488915(1A070000)    <1>     mov qword [workingFCB], rdx     ;Save the FCB ptr
   287 00003454 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   288 00003457 75EA                <1>     jne openFileFCB.exitErr
   289 00003459 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   290 0000345D 75E4                <1>     jne openFileFCB.exitErr
   291 0000345F E922450000          <1>     jmp fcbGoodExit
   292                              <1> 
   293                              <1> ;=================================================================
   294                              <1> ;=================================================================
   295                              <1> ;These functions are marked as reserved for future expansion.
   296                              <1> ;=================================================================
   297                              <1> ;=================================================================
   298                              <1> sequentialReadFCB: ;ah = 14h
   299                              <1> sequentialWriteFCB:;ah = 15h
   300                              <1> randomReadFCB:     ;ah = 21h
   301                              <1> randomWriteFCB:    ;ah = 22h
   302                              <1> setRelRecordFCB:   ;ah = 24h
   303                              <1> randBlockReadFCB:  ;ah = 27h
   304                              <1> randBlockWriteFCB: ;ah = 28h
   305 00003464 B805000000          <1>     mov eax, errAccDen
   306 00003469 E91B450000          <1>     jmp fcbErrExit
   307                              <1> 
   308                              <1> 
   309                              <1> ;--------------------------------
   310                              <1> ;  Common FCB related Routines  :
   311                              <1> ;--------------------------------
   312                              <1> fcbCheckDriveType:
   313                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   314                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   315                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   316                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   317                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   318                              <1> ;If a net CDS, automatic fail (for now).
   319 0000346E C605(F9060000)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   320 00003475 51                  <1>     push rcx
   321 00003476 57                  <1>     push rdi
   322 00003477 55                  <1>     push rbp
   323 00003478 9C                  <1>     pushfq
   324 00003479 F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   325 00003480 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   326 00003482 E8B83F0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   327 00003487 7218                <1>     jc .exit
   328                              <1>     ;rdi has cds ptr now
   329 00003489 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   330 0000348D E8F4D5FFFF          <1>     call getFATtype
   331 00003492 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   332 00003498 7707                <1>     ja .exit
   333                              <1> .okToGo:
   334 0000349A C605(F9060000)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   335                              <1> .exit:
   336 000034A1 9D                  <1>     popfq
   337 000034A2 5D                  <1>     pop rbp
   338 000034A3 5F                  <1>     pop rdi
   339 000034A4 59                  <1>     pop rcx
   340                              <1>     return
    13                              <2> %%_ret:
    14 000034A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> fcbInitName2:
   342                              <1> ;Must be called after fcbInitRoutine has been run once
   343                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   344                              <1> ;       rdx -> UserFCB
   345                              <1> ;       eax[0] = Drive number (0 based)
   346 000034A6 55                  <1>     push rbp
   347 000034A7 4889E5              <1>     mov rbp, rsp
   348 000034AA 4881EC0F000000      <1>     sub rsp, 15
   349 000034B1 57                  <1>     push rdi
   350 000034B2 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   351 000034B6 4889D6              <1>     mov rsi, rdx
   352 000034B9 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
   353 000034C0 7407                <1>     jz .notExtended
   354 000034C2 4881C607000000      <1>     add rsi, exFcb.driveNum
   355                              <1> .notExtended:
   356                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   357 000034C9 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   358 000034D0 EB36                <1>     jmp short fcbInitRoutine.rename2EP
   359                              <1> fcbInitRoutine:
   360                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   361                              <1> ;Input: rdx -> User FCB
   362                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   363 000034D2 55                  <1>     push rbp
   364 000034D3 4889E5              <1>     mov rbp, rsp
   365 000034D6 4881EC0F000000      <1>     sub rsp, 15    ;Make 16 char space on stack
   366                              <1>     ;This space is used to store X:FILENAME.EXT,0
   367 000034DD 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   368 000034DE 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   369 000034E2 C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   370 000034E9 C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   371 000034F0 E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   372 000034F5 7410                <1>     jz .notExtended
   373 000034F7 C605(FB060000)FF    <1>     mov byte [extFCBFlag], -1
   374 000034FE 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   375 00003501 8805(FC060000)      <1>     mov byte [searchAttr], al
   376                              <1> .notExtended:
   377 00003507 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   378                              <1> .rename2EP:
   379                              <1> ;Call notjoin to prevent choosing a CDS that is a join cds for a FCB operation
   380 00003508 E8EA3F0000          <1>     call getCDSNotJoin ;Get the CDS (preserves rdi)
   381 0000350D 723F                <1>     jc .badDisk
   382 0000350F E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   383 00003514 488D1DACCFFFFF      <1>     lea rbx, asciiCharProperties
   384 0000351B B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   385 00003520 56                  <1>     push rsi    ;rsi -> fcb.filename
   386                              <1> .nameCharCheck:
   387 00003521 AC                  <1>     lodsb   ;Get the char in al
   388 00003522 D7                  <1>     xlatb   ;Get the char signature in al
   389 00003523 A808                <1>     test al, badFCBChar  ;Make sure it is a valid FCB filename char
   390 00003525 7427                <1>     jz .badDisk
   391 00003527 FFC9                <1>     dec ecx
   392 00003529 75F6                <1>     jnz .nameCharCheck
   393 0000352B 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   394 0000352C 4889FB              <1>     mov rbx, rdi    ;Save ptr to first char past X: (or X:\)
   395 0000352F E818DFFFFF          <1>     call FCBToAsciiz
   396 00003534 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   397 00003535 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0 (or X:\,0)?
   398 00003538 7414                <1>     je .badDisk
   399 0000353A 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   400 0000353E 55                  <1>     push rbp
   401 0000353F E867E0FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename (add curr dir if X:)
   402 00003544 5D                  <1>     pop rbp
   403 00003545 7207                <1>     jc .badDisk
   404 00003547 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   405 0000354C EB03                <1>     jmp short .jiggleStack  ;Skip the error
   406                              <1> .badDisk:
   407 0000354E B003                <1>     mov al, errPnf  ;DOS does this... so will I
   408 00003550 F9                  <1>     stc
   409                              <1> .jiggleStack:
   410 00003551 4889EC              <1>     mov rsp, rbp
   411 00003554 5D                  <1>     pop rbp
   412                              <1> .exit:
   413                              <1>     return
    13                              <2> %%_ret:
    14 00003555 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> 
   415                              <1> storeZeroBasedDriveNumber:
   416                              <1> ;Input: al => 0 based drive letter
   417                              <1> ;       rdi -> Points to buffer to store the X: in
   418 00003556 FEC0                <1>     inc al
   419                              <1> storeOneBasedDriveNumber:
   420                              <1> ;Input: al => 1 based drive letter
   421                              <1> ;       rdi -> Points to buffer to store the X: in
   422 00003558 0440                <1>     add al, "@"
   423 0000355A B43A                <1>     mov ah, ":"
   424 0000355C 66AB                <1>     stosw
   425                              <1>     return
    13                              <2> %%_ret:
    14 0000355E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   426                              <1> 
   427                              <1> isFCBExtended:
   428                              <1> ;Input: rdx = FCB ptr
   429                              <1> ;Output: rsi -> Drive letter of FCB
   430                              <1> ;        rdx -> FCB first byte
   431                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   432 0000355F 4889D6              <1>     mov rsi, rdx
   433 00003562 803EFF              <1>     cmp byte [rsi], -1
   434 00003565 7507                <1>     jne .notExtended
   435 00003567 4881C607000000      <1>     add rsi, exFcb.driveNum
   436                              <1> .notExtended:
   437 0000356E 4839F2              <1>     cmp rdx, rsi
   438                              <1>     return
    13                              <2> %%_ret:
    14 00003571 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> 
   440                              <1> parseNameToFCB:
   441                              <1> ;rsi points to a command line to parse
   442                              <1> ;rdi points to a future unopened FCB
   443                              <1> ;al = parsing control bits. 
   444                              <1> ; al[0] = If set, leading filename separators are scanned off
   445                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   446                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   447                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   448                              <1> ;
   449                              <1> ;Separators include : . ; , = + TAB SPACE
   450                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   451 00003572 C605(8D040000)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   452 00003579 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   453 0000357B A802                <1>     test al, 2  ;Set drive letter
   454 0000357D 7402                <1>     jz .skipDriveLetter
   455 0000357F 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   456                              <1> .skipDriveLetter:
   457 00003581 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   458 00003584 B908000000          <1>     mov ecx, 8  ;Copy Filename
   459 00003589 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   460 0000358B 93                  <1>     xchg eax, ebx
   461 0000358C B020                <1>     mov al, " " ;Clear the field
   462 0000358E 7405                <1>     jz .clearFilenameField
   463 00003590 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   464 00003593 31C9                <1>     xor ecx, ecx
   465                              <1> .clearFilenameField:
   466 00003595 F3AA                <1>     rep stosb
   467 00003597 B903000000          <1>     mov ecx, 3
   468 0000359C F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   469 0000359F 7405                <1>     jz .clearExtensionField
   470 000035A1 4801CF              <1>     add rdi, rcx
   471 000035A4 31C9                <1>     xor ecx, ecx
   472                              <1> .clearExtensionField:
   473 000035A6 F3AA                <1>     rep stosb
   474 000035A8 91                  <1>     xchg eax, ecx
   475 000035A9 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   476 000035AA 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   477 000035B1 F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   478 000035B4 740F                <1>     jz .dontScanOffTerm
   479 000035B6 E89F000000          <1>     call skipSeparators ;Skip leading separators
   480 000035BB E867400000          <1>     call isCharTerminator   ;If first char is terminator, go past and keep skipping
   481 000035C0 7508                <1>     jnz .skipIfNotTerminator
   482 000035C2 48FFC6              <1>     inc rsi
   483                              <1> .dontScanOffTerm:
   484 000035C5 E890000000          <1>     call skipSeparators  ;Skip separators
   485                              <1> .skipIfNotTerminator:
   486 000035CA E830400000          <1>     call uppercaseCharAtPtr 
   487 000035CF 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   488 000035D1 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   489 000035D4 7519                <1>     jne .skipSettingDriveLetter
   490 000035D6 48FFC6              <1>     inc rsi ;Goto next char
   491 000035D9 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   492 000035DB 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   493 000035DD 50                  <1>     push rax    ;Save the 1 based drive letter
   494 000035DE E8143F0000          <1>     call getCDSNotJoin   ;Verifies if this drive letter is valid
   495 000035E3 58                  <1>     pop rax
   496 000035E4 7302                <1>     jnc .validDriveLetter
   497                              <1> .invalidDriveLetter:
   498 000035E6 B2FF                <1>     mov dl, -1
   499                              <1> .validDriveLetter:
   500 000035E8 AA                  <1>     stosb
   501 000035E9 48FFC6              <1>     inc rsi ;Align pointers...
   502 000035EC 48FFCF              <1>     dec rdi 
   503                              <1> .skipSettingDriveLetter:
   504 000035EF 48FFCE              <1>     dec rsi
   505 000035F2 48FFC7              <1>     inc rdi
   506                              <1> getFCBFilename:
   507                              <1> ;Input: rsi points to first char of filename
   508                              <1> ;       rdi points to storage buffer for filename
   509                              <1> ;       dl contains the signature if drive invalid
   510                              <1> ;Output:
   511                              <1> ;       Fields filled
   512                              <1> ;       al = Return signature
   513 000035F5 B908000000          <1>     mov ecx, 8
   514 000035FA E815000000          <1>     call getFCBNameField
   515 000035FF 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   516 00003602 750D                <1>     jne .noExt
   517 00003604 B903000000          <1>     mov ecx, 3
   518 00003609 48FFC6              <1>     inc rsi ;Skip this char
   519 0000360C E814000000          <1>     call forceFCBNameField
   520                              <1> .noExt:
   521 00003611 88D0                <1>     mov al, dl  ;Store the return signature
   522                              <1>     return
    13                              <2> %%_ret:
    14 00003613 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> 
   524                              <1> getFCBNameField:
   525                              <1> ;Checks if the field is appropriate before copying it
   526 00003614 E8E63F0000          <1>     call uppercaseCharAtPtr
   527 00003619 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   528 0000361B 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   529 0000361E 48FFCE              <1>     dec rsi ;Point to previous char
   530                              <1>     return
    13                              <2> %%_ret:
    14 00003621 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> .okName:
   532 00003622 48FFCE              <1>     dec rsi ;Go back now a char
   533                              <1> forceFCBNameField:
   534                              <1> ;Forcefully copies the name from rsi to rdi
   535 00003625 E8D53F0000          <1>     call uppercaseCharAtPtr
   536 0000362A 7226                <1>     jc .terminatingSpace
   537 0000362C 750D                <1>     jnz .notSep
   538 0000362E F605(8D040000)FF    <1>     test byte [fcbSpaceOk], -1
   539 00003635 741B                <1>     jz .terminatingSpace
   540 00003637 3C20                <1>     cmp al, " "
   541 00003639 7517                <1>     jne .terminatingSpace
   542                              <1> .notSep:
   543 0000363B 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   544 0000363E FFC9                <1>     dec ecx
   545 00003640 3C2A                <1>     cmp al, "*" ;Big wildcard?
   546 00003642 7504                <1>     jne .notBigWildcard
   547 00003644 B03F                <1>     mov al, "?"
   548 00003646 F3AA                <1>     rep stosb
   549                              <1> .notBigWildcard:
   550 00003648 AA                  <1>     stosb   ;Stores the uppercased char
   551 00003649 3C3F                <1>     cmp al, "?"
   552 0000364B 75D8                <1>     jne forceFCBNameField
   553 0000364D 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   554 00003650 EBD3                <1>     jmp short forceFCBNameField
   555                              <1> .terminatingSpace:
   556 00003652 B020                <1>     mov al, " "
   557 00003654 F3AA                <1>     rep stosb   ;Store remaining chars worth in spaces
   558 00003656 48FFCE              <1>     dec rsi     ;Point back to terminating char
   559                              <1>     return
    13                              <2> %%_ret:
    14 00003659 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> skipSeparators:
   562                              <1> ;Input: rsi -> String 
   563                              <1> ;Output: rsi -> First non separator type char
   564 0000365A AC                  <1>     lodsb
   565 0000365B E8D63F0000          <1>     call isCharSeparator
   566 00003660 74F8                <1>     jz skipSeparators
   567 00003662 48FFCE              <1>     dec rsi
   568                              <1>     return
    13                              <2> %%_ret:
    14 00003665 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                                  %include "./src/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 00003666 51                  <1>     push rcx    ;Save file attributes on stack
    11 00003667 488D0DF60E0000      <1>     lea rcx, createMain
    12 0000366E C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with directory
    13 00003675 EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 00003677 BB16000000          <1>     mov ebx, dirInclusive
    21 0000367C F605(02070000)FF    <1>     test byte [dosInvoke], -1
    22 00003683 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 00003686 880D(FC060000)      <1>     mov byte [searchAttr], cl
    24 0000368C 488D0DB10D0000      <1>     lea rcx, openMain  
    25 00003693 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 00003694 4889D6              <1>     mov rsi, rdx
    28 00003697 E818400000          <1>     call checkPathspecOK
    29 0000369C 7311                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> ;We cant have wildcards when creating or opening a file!
    31 0000369E 58                  <1>     pop rax
    32 0000369F B805000000          <1>     mov eax, errAccDen
    33 000036A4 E900430000          <1>     jmp extErrExit
    34                              <1> .errNoHandles:
    35 000036A9 5B                  <1>     pop rbx             ;Pop the word from the stack
    36 000036AA E9FA420000          <1>     jmp extErrExit      ;Return in eax the error code
    37                              <1> .pathOk:
    38 000036AF E8AA420000          <1>     call dosCrit1Enter
    39 000036B4 E8EB1A0000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    40 000036B9 E8AA420000          <1>     call dosCrit1Exit
    41 000036BE 72E9                <1>     jc .errNoHandles
    42                              <1> ;Now save DOS state. 
    43 000036C0 E8171A0000          <1>     call setCurrentSFT          ;Set rdi as the current SFT
    44 000036C5 66891D(3A070000)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    45 000036CC E89C1B0000          <1>     call findFreeJFTEntry       ;Get a ptr to a free JFT entry in rdi
    46 000036D1 0F82C6000000        <1>     jc .errNoJFTentries         ;Free the current SFT entry and exit
    47 000036D7 66891D(3C070000)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    48 000036DE 48893D(2A070000)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    49 000036E5 0FB71D(3A070000)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    50 000036EC 881F                <1>     mov byte [rdi], bl  ;And open the file
    51                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    52 000036EE 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    53 000036F1 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    54 000036F8 51                  <1>     push rcx    ;Save the procedure to call on stack
    55 000036F9 E82DDEFFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    56 000036FE 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    57 000036FF 488D053E0D0000      <1>     lea rax, openMain   ;Get EA for open procedure
    58 00003706 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    59 0000370D 7334                <1>     jnc .proceedCall
    60                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    61                              <1> ;                              For Create New, Bad but handled later.
    62                              <1> ;If CF=CY => Path doesnt all exist:
    63                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    64                              <1> ;Now we check if we are creating or opening.
    65 0000370F 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    66 00003712 7419                <1>     je .badFile ;Jmp to error if opening file that doesnt exist
    67 00003714 F605(05070000)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    68 0000371B 741B                <1>     jz .badPathspec ;If not then exit bad path
    69                              <1>     ;Now check the path is not X:\<NUL>
    70 0000371D 8B0D(1E050000)      <1>     mov ecx, dword [buffer1]    ;Get the first four chars for comparison
    71 00003723 30C9                <1>     xor cl, cl
    72 00003725 81F9003A5C00        <1>     cmp ecx, 005C3A00h  ;If this is a null path, set file not found!
    73 0000372B 7516                <1>     jnz .proceedCall    ;Else, proceed.
    74                              <1> .badFile:   ;If trying to open a file that doesnt exit, error so!
    75 0000372D 58                  <1>     pop rax
    76 0000372E B802000000          <1>     mov eax, errFnf 
    77 00003733 E95B000000          <1>     jmp .errBadDeallocate   ;Need to deallocate the SFT before returning
    78                              <1> .badPathspec:   ;If the parent path doesnt exist, error thus.
    79 00003738 58                  <1>     pop rax
    80 00003739 B803000000          <1>     mov eax, errPnf
    81 0000373E E950000000          <1>     jmp .errBadDeallocate   ;Need to deallocate the SFT before returning
    82                              <1> .proceedCall:
    83                              <1> ;If the pathspec exists, recall that for create, we truncate.
    84 00003743 31C9                <1>     xor ecx, ecx    ;Default to empty device info word
    85 00003745 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    86 00003748 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    87 00003749 750B                <1>     jne .callProc   ;Jump if we are creating
    88                              <1> ;al has the openmode here
    89 0000374B A880                <1>     test al, openNoInherit      ;No Inherit bit set?
    90 0000374D 7407                <1>     jz .callProc
    91 0000374F 247F                <1>     and al, ~openNoInherit      ;Clear this bit
    92 00003751 B900100000          <1>     mov ecx, devNoInherit       ;Set the corresponding the device info bit 
    93                              <1> .callProc:
    94 00003756 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    95 0000375C 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    96 00003762 51                  <1>     push rcx    ;Save the device word 
    97 00003763 FFD3                <1>     call rbx    ;Enter with open mode in 
    98 00003765 59                  <1>     pop rcx
    99 00003766 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
   100 0000376D 7224                <1>     jc .errBadDeallocate
   101 0000376F 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
   102 00003774 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   103 00003778 0FB705(3C070000)    <1>     movzx eax, word [currentHdl]
   104 0000377F FF15(1F010000)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
   105 00003785 66C705(3A070000)FF- <1>     mov word [currentNdx], -1       ;Now reset the index back to -1
   105 0000378D FF                  <1>
   106 0000378E E908420000          <1>     jmp extGoodExit ;Save ax and return OK
   107                              <1> .errBadDeallocate:
   108                              <1> ;Now we deallocate the SFT entry in the JFT and SFT block
   109 00003793 488B35(2A070000)    <1>     mov rsi, qword [curHdlPtr]
   110 0000379A C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   111                              <1> .errNoJFTentries:
   112 0000379D FA                  <1>     cli     ;Enter critical section! No multitasking to free the SFT
   113 0000379E E841190000          <1>     call getCurrentSFT  ;Get the current SFT ptr in rdi
   114 000037A3 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0   ;Mark as free! 
   115 000037A8 F9                  <1>     stc ;Debug to show that we are here
   116 000037A9 66C705(3A070000)FF- <1>     mov word [currentNdx], -1
   116 000037B1 FF                  <1>
   117 000037B2 FB                  <1>     sti
   118 000037B3 E9F1410000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   119                              <1> 
   120                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   121                              <1> ;Input: bx = file handle to close
   122 000037B8 E8C71A0000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   123 000037BD 0F82E6410000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   124 000037C3 E814190000          <1>     call setCurrentSFT  ;Set this as the current SFT
   125 000037C8 66813F0100          <1>     cmp word [rdi + sft.wNumHandles], 1 ;If this is last reference to sft
   126 000037CD 740A                <1>     je .killHdl ;always kill the handle!
   127                              <1>     ;Else if network file opened as FCB, avoid nuking JFT!
   128 000037CF 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   129 000037D3 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   130 000037D5 3C70                <1>     cmp al, openNetFCBShr
   131 000037D7 7408                <1>     je .notNetFCB
   132                              <1> .killHdl:
   133 000037D9 E85A1A0000          <1>     call getJFTPtr  ;Remember, bx has handle number
   134 000037DE C607FF              <1>     mov byte [rdi], -1  ;Now free the JFT entry
   135                              <1> .notNetFCB:
   136 000037E1 E889100000          <1>     call closeMain  ;Call close main!
   137 000037E6 0F82BD410000        <1>     jc extErrExit   ;If an error, exit through error exit
   138 000037EC B8003E0000          <1>     mov eax, 3E00h    ;Return value
   139 000037F1 E9A5410000          <1>     jmp extGoodExit
   140                              <1> 
   141                              <1> readFileHdl:       ;ah = 3Fh, handle function
   142 000037F6 488D353D110000      <1>     lea rsi, readBytes
   143                              <1> .common:
   144 000037FD E8821A0000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   145 00003802 0F82A1410000        <1>     jc extErrExit   ;Error code in al and exit
   146 00003808 E8CF180000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   147 0000380D 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   148 0000380F FF35(17040000)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   149 00003815 488915(17040000)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   150 0000381C FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   151 0000381E 8F05(17040000)      <1>     pop qword [currentDTA]
   152 00003824 0F827F410000        <1>     jc extErrExit   ;Error code in al and exit
   153 0000382A 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   154 0000382C E961410000          <1>     jmp extGoodExit2    ;and exit!
   155                              <1> 
   156                              <1> writeFileHdl:      ;ah = 40h, handle function
   157 00003831 488D355C140000      <1>     lea rsi, writeBytes
   158 00003838 E9C0FFFFFF          <1>     jmp readFileHdl.common
   159                              <1> 
   160                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   161                              <1> ;Here don't allow malformed chars unless it is a network CDS
   162                              <1> ;Allows deleting volume labels.
   163 0000383D BB16000000          <1>     mov ebx, dirInclusive    ;Search all files, dirs handled later
   164 00003842 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   165 00003849 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   166 0000384C 880D(FC060000)      <1>     mov byte [searchAttr], cl
   167 00003852 4889D6              <1>     mov rsi, rdx
   168 00003855 E85A3E0000          <1>     call checkPathspecOK
   169 0000385A 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   170 0000385C 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   171                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   172 0000385E F605(02070000)FF    <1>     test byte [dosInvoke], -1
   173 00003865 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   174                              <1> .badPath:
   175 00003867 B805000000          <1>     mov eax, errAccDen
   176 0000386C E938410000          <1>     jmp extErrExit
   177                              <1> .pathOk:
   178 00003871 488D3D(1E050000)    <1>     lea rdi, buffer1
   179 00003878 52                  <1>     push rdx
   180 00003879 E8ADDCFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   181 0000387E 5A                  <1>     pop rdx
   182 0000387F 0F8224410000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   183                              <1>     ;In the case of a wildcard, recall this will return the first file
   184 00003885 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   185 0000388C 0F8517410000        <1>     jnz extErrExit
   186 00003892 E8EE0A0000          <1>     call outerDeleteMain
   187 00003897 0F820C410000        <1>     jc extErrExit
   188 0000389D E9F9400000          <1>     jmp extGoodExit
   189                              <1> 
   190                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   191                              <1> ;Input: ecx=0, edx=Position to seek to
   192                              <1> ;ecx may be non-zero for 64-bit IFS but currently DOS does not natively
   193                              <1> ; support them. INT 2Fh filesystems may have a tough time if they wish to
   194                              <1> ; use a 64 bit file pointer... They can try though!
   195                              <1> ;Output: If CF=NC: edx=0, eax=New position of file handle
   196                              <1> ;           Again, if network file, edx = Upper bytes of file hdl!
   197 000038A2 E8DD190000          <1>     call getSFTPtr
   198 000038A7 0F82FC400000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   199 000038AD 3C03                <1>     cmp al, 3
   200 000038AF 720A                <1>     jb .validFunction
   201 000038B1 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   202 000038B6 E9EE400000          <1>     jmp extErrExit
   203                              <1> .validFunction:
   204 000038BB 3C01                <1>     cmp al, 1
   205 000038BD 771A                <1>     ja .seekend
   206 000038BF 7203                <1>     jb .seekset
   207                              <1> ;Here we are at seekcur, seek from current (signed)
   208 000038C1 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   209                              <1> .seekset:
   210                              <1> ;Seek from the start (unsigned)
   211 000038C4 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   212 000038C7 31D2                <1>     xor edx, edx    ;All FAT files have 0 upper 32 bits! Set to 0!
   213                              <1>     ;We return the file position in eax anyway!
   214                              <1> .seekExit:
   215 000038C9 E8053C0000          <1>     call getUserRegs    ;Get user regs in rsi
   216 000038CE 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   217 000038D1 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   218 000038D4 E9B9400000          <1>     jmp extGoodExit2    ;Return OK in eax 
   219                              <1> .seekend:
   220                              <1> ;Here we are at seekend, seek from end (signed)
   221 000038D9 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   222 000038DF 7505                <1>     jnz .netCheck
   223                              <1> .proceedDisk:
   224 000038E1 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   225 000038E4 EBDE                <1>     jmp short .seekset
   226                              <1> .netCheck:
   227 000038E6 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB  ;Is this a FCB opened file?
   228 000038EC 75F3                <1>     jnz .proceedDisk
   229 000038EE 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   230                              <1>     ;Check its share mode
   231 000038F2 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   232 000038F7 3D40000000          <1>     cmp eax, openDenNoShr  ;Don't deny? Proceed
   233 000038FC 7407                <1>     je .netSeek
   234 000038FE 3D30000000          <1>     cmp eax, openDenRdShr
   235 00003903 75DC                <1>     jne .proceedDisk
   236                              <1> .netSeek:
   237 00003905 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   238 0000390A CD2F                <1>     int 2Fh
   239 0000390C 73BB                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   240 0000390E E996400000          <1>     jmp extErrExit
   241                              <1> 
   242                              <1> 
   243                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   244 00003913 3C01                <1>     cmp al, 1
   245 00003915 761F                <1>     jbe .subFuncOk
   246 00003917 B801000000          <1>     mov eax, errInvFnc
   247                              <1> .chmodError:
   248                              <1> ;Call with ax = errorcode
   249 0000391C C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   250 00003923 C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   251 0000392A C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
   252 00003931 E973400000          <1>     jmp extErrExit
   253                              <1> .subFuncOk:
   254 00003936 4889D6              <1>     mov rsi, rdx
   255 00003939 89C3                <1>     mov ebx, eax    ;Store function code in bl
   256 0000393B 53                  <1>     push rbx
   257 0000393C 51                  <1>     push rcx
   258 0000393D E8723D0000          <1>     call checkPathspecOK
   259 00003942 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   260                              <1> .badPath:
   261 00003944 59                  <1>     pop rcx
   262 00003945 5B                  <1>     pop rbx
   263 00003946 B805000000          <1>     mov eax, errAccDen
   264 0000394B EBCF                <1>     jmp short .chmodError
   265                              <1> .pathOk:
   266 0000394D E83C3E0000          <1>     call checkPathNet 
   267 00003952 74F0                <1>     jz .badPath ;Or Net paths
   268 00003954 E8163E0000          <1>     call scanPathWC
   269 00003959 72E9                <1>     jc .badPath ;Dont allow wildcards
   270 0000395B 488D3D(1E050000)    <1>     lea rdi, buffer1
   271 00003962 52                  <1>     push rdx
   272 00003963 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   273 0000396A E8BCDBFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   274 0000396F 5A                  <1>     pop rdx
   275 00003970 59                  <1>     pop rcx
   276 00003971 5B                  <1>     pop rbx
   277 00003972 0F8231400000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   278                              <1>     ;In the case of a wildcard, recall this will return the first file
   279 00003978 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   280 0000397F 759B                <1>     jnz .chmodError
   281                              <1> 
   282 00003981 E8B93A0000          <1>     call testCDSNet
   283 00003986 730C                <1>     jnc .notNet
   284 00003988 750A                <1>     jnz .notNet ;This type of net ok
   285 0000398A B805000000          <1>     mov eax, errAccDen
   286 0000398F E915400000          <1>     jmp extErrExit
   287                              <1> .notNet:
   288 00003994 84DB                <1>     test bl, bl
   289 00003996 7526                <1>     jnz .setAttribs
   290                              <1>     ;Get attribs here
   291 00003998 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   292 0000399E 7412                <1>     jz .getDiskAttribs
   293 000039A0 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   294 000039A5 CD2F                <1>     int 2Fh
   295 000039A7 0F82FC3F0000        <1>     jc extErrExit
   296 000039AD E9E93F0000          <1>     jmp extGoodExit
   297                              <1> .getDiskAttribs:
   298 000039B2 0FB605(65060000)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   299 000039B9 E9DD3F0000          <1>     jmp extGoodExit
   300                              <1> 
   301                              <1> .setAttribs:
   302                              <1>     ;Set attribs here
   303 000039BE 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   304 000039C4 7417                <1>     jz .setDiskAttribs
   305 000039C6 0FB7C9              <1>     movzx ecx, cx
   306 000039C9 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   307 000039CA B80E110000          <1>     mov eax, 110Eh
   308 000039CF CD2F                <1>     int 2Fh
   309 000039D1 59                  <1>     pop rcx
   310 000039D2 0F82D13F0000        <1>     jc extErrExit
   311 000039D8 E9BE3F0000          <1>     jmp extGoodExit
   312                              <1> .setDiskAttribs:
   313 000039DD E84D090000          <1>     call checkExclusiveOwnFile
   314 000039E2 730A                <1>     jnc .okToSet
   315 000039E4 B820000000          <1>     mov eax, errShrVio
   316 000039E9 E9BB3F0000          <1>     jmp extErrExit
   317                              <1> .okToSet:
   318 000039EE E86B3F0000          <1>     call dosCrit1Enter
   319 000039F3 E82EEAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   320 000039F8 722D                <1>     jc .setErrorNoFlush
   321 000039FA F6C118              <1>     test cl, attrFileVolLbl | attrFileDir
   322 000039FD 740A                <1>     jz .set
   323 000039FF B805000000          <1>     mov eax, errAccDen
   324 00003A04 E91E000000          <1>     jmp .setErrorNoFlush
   325                              <1> .set:
   326 00003A09 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   327 00003A0C 80E518              <1>     and ch, (attrFileVolLbl | attrFileDir)    ;Keep these two bits
   328 00003A0F 08E9                <1>     or cl, ch
   329 00003A11 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   330 00003A14 E87ACDFFFF          <1>     call flushAllBuffersForDPB
   331 00003A19 720C                <1>     jc .setError
   332 00003A1B E8483F0000          <1>     call dosCrit1Exit
   333 00003A20 31C0                <1>     xor eax, eax
   334 00003A22 E9743F0000          <1>     jmp extGoodExit
   335                              <1> .setError:
   336                              <1> 
   337                              <1> .setErrorNoFlush:
   338 00003A27 E83C3F0000          <1>     call dosCrit1Exit
   339 00003A2C E9783F0000          <1>     jmp extErrExit
   340                              <1> 
   341                              <1> duplicateHandle:   ;ah = 45h, handle function
   342                              <1> ;Input: bx = Handle to duplicate
   343                              <1> ;Output: If ok then ax = New handle
   344 00003A31 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   345 00003A34 E834180000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   346                              <1> .duplicateCommon:
   347 00003A39 0F826A3F0000        <1>     jc extErrExit   ;Exit if no space
   348 00003A3F 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   349 00003A42 93                  <1>     xchg eax, ebx
   350 00003A43 E83C180000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   351 00003A48 0F825B3F0000        <1>     jc extErrExit
   352 00003A4E 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   353 00003A51 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   354 00003A57 750A                <1>     jnz .netFile
   355 00003A59 E87E160000          <1>     call setCurrentSFT  ;Set rdi to the current SFT
   356 00003A5E E8900A0000          <1>     call openDriverMux
   357                              <1> .netFile:
   358 00003A63 E8D0170000          <1>     call getJFTPtr
   359 00003A68 8A1F                <1>     mov bl, byte [rdi]
   360 00003A6A 881E                <1>     mov byte [rsi], bl
   361 00003A6C E92A3F0000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   362                              <1> 
   363                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   364                              <1> ;Input: bx = Handle to duplicate
   365                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   366                              <1>     ;First we close cx if it exists
   367 00003A71 0FB7C9              <1>     movzx ecx, cx
   368 00003A74 53                  <1>     push rbx
   369 00003A75 51                  <1>     push rcx
   370 00003A76 89CB                <1>     mov ebx, ecx
   371 00003A78 E83BFDFFFF          <1>     call closeFileHdl   ;Close handle 
   372 00003A7D 5B                  <1>     pop rbx
   373 00003A7E 58                  <1>     pop rax
   374 00003A7F E8B4170000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   375 00003A84 EBB3                <1>     jmp short duplicateHandle.duplicateCommon
   376                              <1> 
   377                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   378                              <1> ;Input: cx = Search Attributes, cl only used
   379                              <1> ;       rdx = Ptr to path to file to look for
   380                              <1> ;       al = Document as needing to be 0 for now
   381                              <1> ;Return:
   382                              <1> ;Data in the DTA or error through AX with CF=CY
   383                              <1> ;CAVEATS!
   384                              <1> ;DTA:attribFnd = 40h => Char dev
   385                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   386 00003A86 880D(FC060000)      <1>     mov byte [searchAttr], cl
   387 00003A8C 4889D6              <1>     mov rsi, rdx
   388 00003A8F E8203C0000          <1>     call checkPathspecOK
   389 00003A94 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   390 00003A96 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   391                              <1> .badPath:
   392 00003A98 B805000000          <1>     mov eax, errAccDen  ;Gets xlat to errNoFil
   393 00003A9D E9073F0000          <1>     jmp extErrExit
   394                              <1> .pathspecOk:
   395 00003AA2 FF35(17040000)      <1>     push qword [currentDTA]
   396 00003AA8 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   397 00003AAF 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   398 00003AB6 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   399 00003ABD E869DAFFFF          <1>     call getFilePath
   400                              <1> .findfileExit:
   401 00003AC2 8F05(17040000)      <1>     pop qword [currentDTA]
   402 00003AC8 0F82DB3E0000        <1>     jc extErrExit
   403 00003ACE 488D3D(2F060000)    <1>     lea rdi, dosffblock
   404 00003AD5 57                  <1>     push rdi
   405 00003AD6 E8B1D9FFFF          <1>     call setupFFBlock
   406 00003ADB 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   407 00003ADC 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
   408 00003AE3 B92B000000          <1>     mov ecx, ffBlock_size
   409 00003AE8 F3A4                <1>     rep movsb   ;Copy the whole block. 
   410                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   411 00003AEA 31C0                <1>     xor eax, eax    ;Return value
   412 00003AEC E9AA3E0000          <1>     jmp extGoodExit ;Exit well
   413                              <1> 
   414                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   415                              <1> ;Input: DTA has the find first block from the previous search
   416 00003AF1 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
   417 00003AF8 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   418 00003AFF B92B000000          <1>     mov ecx, ffBlock_size
   419 00003B04 F3A4                <1>     rep movsb
   420 00003B06 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
   421 00003B0C 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   422 00003B13 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   423 00003B1A E847D5FFFF          <1>     call findNextMain
   424 00003B1F EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   425                              <1> 
   426                              <1> renameFile:        ;ah = 56h
   427                              <1> ;Input: rdx -> Filespec to rename
   428                              <1> ;       rdi -> New filespec
   429                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   430 00003B21 4889D6              <1>     mov rsi, rdx
   431 00003B24 BB16000000          <1>     mov ebx, dirInclusive
   432 00003B29 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   433 00003B30 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   434 00003B33 880D(FC060000)      <1>     mov byte [searchAttr], cl
   435                              <1>     ;Step 0, verify both paths provided are valid
   436 00003B39 E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   437 00003B3E 7249                <1>     jc .accDenError
   438 00003B40 56                  <1>     push rsi
   439 00003B41 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   440 00003B44 E84A000000          <1>     call .renamePathCheck
   441 00003B49 5E                  <1>     pop rsi
   442 00003B4A 723D                <1>     jc .accDenError
   443                              <1>     ;Now we canonicalise the filenames to make life easy
   444 00003B4C 56                  <1>     push rsi
   445 00003B4D 4889FE              <1>     mov rsi, rdi
   446 00003B50 488D3D(9E050000)    <1>     lea rdi, buffer2
   447 00003B57 E84FDAFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   448 00003B5C 5E                  <1>     pop rsi
   449 00003B5D 722A                <1>     jc .accDenError
   450                              <1>     ;Now test if first file exists.
   451 00003B5F FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   452 00003B65 8F05(26060000)      <1>     pop qword [fname2Ptr]
   453 00003B6B 488D3D(1E050000)    <1>     lea rdi, buffer1
   454 00003B72 E834DAFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   455 00003B77 7210                <1>     jc .accDenError 
   456 00003B79 E893030000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   457 00003B7E 0F82253E0000        <1>     jc extErrExit
   458 00003B84 E9123E0000          <1>     jmp extGoodExit
   459                              <1> .accDenError:
   460 00003B89 B805000000          <1>     mov eax, errAccDen
   461 00003B8E E9163E0000          <1>     jmp extErrExit
   462                              <1> .renamePathCheck:
   463                              <1> ;Checks if the pathspec in rsi is OK
   464 00003B93 56                  <1>     push rsi
   465 00003B94 57                  <1>     push rdi
   466 00003B95 E81A3B0000          <1>     call checkPathspecOK
   467 00003B9A 5F                  <1>     pop rdi
   468 00003B9B 5E                  <1>     pop rsi
   469 00003B9C 730D                <1>     jnc .pathOk     ;Path ok 
   470 00003B9E 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   471                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   472 00003BA0 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   473 00003BA7 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   474                              <1> .badPath:
   475 00003BA9 F9                  <1>     stc
   476                              <1>     return
    13                              <2> %%_ret:
    14 00003BAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   477                              <1> .pathOk:
   478 00003BAB F8                  <1>     clc
   479                              <1>     return
    13                              <2> %%_ret:
    14 00003BAC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   480                              <1> 
   481                              <1> getSetFileDateTime: ;ah = 57h
   482 00003BAD 3C01                <1>     cmp al, 1
   483 00003BAF 760A                <1>     jbe .oksubfun
   484 00003BB1 B801000000          <1>     mov eax, errInvFnc
   485 00003BB6 E9EE3D0000          <1>     jmp extErrExit
   486                              <1> .oksubfun:
   487 00003BBB E8C4160000          <1>     call getSFTPtr  ;Preserves al unless error returned
   488 00003BC0 0F82E33D0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   489 00003BC6 3C01                <1>     cmp al, 1
   490 00003BC8 7426                <1>     je .setTimeDate
   491                              <1>     ;Here we get the Time/Date
   492 00003BCA E88F3D0000          <1>     call dosCrit1Enter
   493 00003BCF 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   494 00003BD3 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   495 00003BD7 E88C3D0000          <1>     call dosCrit1Exit
   496 00003BDC E8F2380000          <1>     call getUserRegs
   497 00003BE1 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   498 00003BE5 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   499 00003BE9 31C0                <1>     xor eax, eax
   500 00003BEB E9AB3D0000          <1>     jmp extGoodExit
   501                              <1> .setTimeDate:
   502                              <1>     ;Here we set the Time/Date
   503 00003BF0 E8693D0000          <1>     call dosCrit1Enter
   504 00003BF5 66894F13            <1>     mov word [rdi + sft.wTime], cx
   505 00003BF9 66895715            <1>     mov word [rdi + sft.wDate], dx
   506 00003BFD 31C0                <1>     xor eax, eax
   507 00003BFF FF15(2F010000)      <1>     call qword [updateDirShare]
   508                              <1>     ;Clear the flag to indicate that the dir needs to be updated and dont 
   509                              <1>     ; further change the file time since we have manually overridden it 
   510                              <1>     ; with the time specified
   511 00003C05 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~devDiskNoFlush  ;Clear flag to sync
   512 00003C0B 66814F050040        <1>     or word [rdi + sft.wDeviceInfo], devDiskNoDTonClose    ;Force it to this time
   513 00003C11 E8523D0000          <1>     call dosCrit1Exit
   514 00003C16 31C0                <1>     xor eax, eax
   515 00003C18 E97E3D0000          <1>     jmp extGoodExit
   516                              <1> 
   517                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   518                              <1> ;Uses the clock to do it's bidding
   519                              <1> ;cx = file attribute 
   520                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   521                              <1> ;       filename
   522 00003C1D 66F7C1D8FF          <1>     test cx, ~(attrFileArchive | attrFileSys | attrFileHidden | attrFileRO)
   523 00003C22 740A                <1>     jz .validAttribs
   524 00003C24 B805000000          <1>     mov eax, errAccDen
   525 00003C29 E97B3D0000          <1>     jmp extErrExit
   526                              <1> .validAttribs:
   527 00003C2E 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   528 00003C32 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   529 00003C35 B935000000          <1>     mov ecx, MAX_PSPEC
   530 00003C3A 31C0                <1>     xor eax, eax
   531 00003C3C 4889D7              <1>     mov rdi, rdx
   532 00003C3F F2AE                <1>     repne scasb
   533 00003C41 85C9                <1>     test ecx, ecx
   534 00003C43 750A                <1>     jnz .nullFnd
   535                              <1>     ;Bad path
   536 00003C45 B803000000          <1>     mov eax, errPnf
   537 00003C4A E95A3D0000          <1>     jmp extErrExit
   538                              <1> .nullFnd:
   539 00003C4F 48FFCF              <1>     dec rdi
   540 00003C52 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   541 00003C56 E899390000          <1>     call swapPathSeparator
   542 00003C5B 7403                <1>     jz .pathsepFnd
   543                              <1>     ;If no pathsep found, force one at rdi
   544 00003C5D B05C                <1>     mov al, "\"
   545 00003C5F AA                  <1>     stosb
   546                              <1> .pathsepFnd:
   547 00003C60 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   548                              <1> .fileCreateLoop:
   549 00003C63 55                  <1>     push rbp
   550 00003C64 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   551 00003C69 5D                  <1>     pop rbp
   552 00003C6A 0FB7C1              <1>     movzx eax, cx
   553 00003C6D 0FB7D2              <1>     movzx edx, dx
   554 00003C70 C1E010              <1>     shl eax, 10h
   555 00003C73 09D0                <1>     or eax, edx  ;Add the bits of dx too
   556 00003C75 E831000000          <1>     call .writeNybbles
   557 00003C7A 31C0                <1>     xor eax, eax
   558 00003C7C AA                  <1>     stosb   ;Store terminating null
   559 00003C7D 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   560 00003C80 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   561 00003C83 55                  <1>     push rbp
   562 00003C84 E85C000000          <1>     call createNewFile
   563 00003C89 5D                  <1>     pop rbp
   564 00003C8A 0F830B3D0000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   565 00003C90 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   566 00003C97 3D05000000          <1>     cmp eax, errAccDen
   567 00003C9C 74C5                <1>     je .fileCreateLoop
   568 00003C9E 3D50000000          <1>     cmp eax, errFilExist
   569 00003CA3 74BE                <1>     je .fileCreateLoop
   570 00003CA5 F9                  <1>     stc
   571 00003CA6 E9FE3C0000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   572                              <1> .writeNybbles:
   573                              <1> ;Write the nybbles of eax at rdi
   574 00003CAB B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   575                              <1> .wnLp:
   576 00003CB0 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   577 00003CB3 50                  <1>     push rax
   578 00003CB4 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   579 00003CB9 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   580 00003CBE 3D39000000          <1>     cmp eax, '9'
   581 00003CC3 7605                <1>     jbe .notExtDigit
   582 00003CC5 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   583                              <1> .notExtDigit:
   584 00003CCA AA                  <1>     stosb   ;Store the digit
   585 00003CCB 58                  <1>     pop rax
   586 00003CCC FFC9                <1>     dec ecx
   587 00003CCE 75E0                <1>     jnz .wnLp
   588                              <1>     return
    13                              <2> %%_ret:
    14 00003CD0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   589                              <1> 
   590                              <1> .uniqueTimeGet:
   591 00003CD1 E857F3FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   592 00003CD6 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   593 00003CDD 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   594                              <1>     return
    13                              <2> %%_ret:
    14 00003CE4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   595                              <1> 
   596                              <1> createNewFile:     ;ah = 5Bh
   597 00003CE5 51                  <1>     push rcx    ;Save file attributes on stack
   598 00003CE6 488D0D62080000      <1>     lea rcx, createNewMain
   599 00003CED C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with dir (handled later)
   600 00003CF4 E99BF9FFFF          <1>     jmp openFileHdl.openCommon
   601                              <1> 
   602                              <1> lockUnlockFile:    ;ah = 5Ch
   603                              <1> ;ah = 5Ch
   604                              <1> ;al = subfunction
   605                              <1> ;       00h lock region of file
   606                              <1> ;       01h unlock region of file
   607                              <1> ;ebx = file handle
   608                              <1> ;ecx = start offset of region within file
   609                              <1> ;edi = length of region in bytes
   610 00003CF9 3C01                <1>     cmp al, 1
   611 00003CFB 7757                <1>     ja .badFunction
   612 00003CFD 57                  <1>     push rdi
   613 00003CFE E89D150000          <1>     call derefSFTPtr
   614 00003D03 730B                <1>     jnc .validHdl
   615 00003D05 58                  <1>     pop rax ;Discard the qword on the stack
   616 00003D06 B806000000          <1>     mov eax, errBadHdl
   617 00003D0B E9993C0000          <1>     jmp extErrExit
   618                              <1> .validHdl:
   619 00003D10 84C0                <1>     test al, al ;Check if al = 0
   620 00003D12 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   621 00003D13 7424                <1>     jz .lockFileRegion
   622 00003D15 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   623 00003D1B 740B                <1>     jz .unlockShare ;Jump if a local file only
   624 00003D1D 50                  <1>     push rax
   625 00003D1E B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   626 00003D23 CD2F                <1>     int 2Fh
   627 00003D25 5B                  <1>     pop rbx
   628 00003D26 EB06                <1>     jmp short .exitSelect
   629                              <1> .unlockShare:
   630 00003D28 FF15(F7000000)      <1>     call qword [unlockFileShare]    ;Call share hook
   631                              <1> .exitSelect:
   632 00003D2E 0F82753C0000        <1>     jc extErrExit
   633 00003D34 E9623C0000          <1>     jmp extGoodExit
   634                              <1> .lockFileRegion:
   635 00003D39 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   636 00003D3F 740B                <1>     jz .lockShare   ;Jump if a local file only
   637 00003D41 50                  <1>     push rax
   638 00003D42 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   639 00003D47 CD2F                <1>     int 2Fh
   640 00003D49 5B                  <1>     pop rbx
   641 00003D4A EBE2                <1>     jmp short .exitSelect
   642                              <1> .lockShare:
   643 00003D4C FF15(EF000000)      <1>     call qword [lockFileShare]  ;Call share hook
   644 00003D52 EBDA                <1>     jmp short .exitSelect
   645                              <1> .badFunction:
   646 00003D54 B801000000          <1>     mov eax, errInvFnc
   647 00003D59 668905(0B040000)    <1>     mov word [errorExCde], ax
   648 00003D60 E9443C0000          <1>     jmp extErrExit
   649                              <1> 
   650                              <1> setHandleCount:    ;ah = 67h
   651                              <1> ;Input: bx = Size of new file handle table for process
   652                              <1> ;Output: CF=NC -> Ok to make more handles
   653                              <1> ;        CF=CY -> ax = Error code
   654                              <1> ;Five cases to consider:
   655                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   656                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   657                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   658                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   659                              <1> ;   Special case below, cannot be enacted directly by caller.
   660                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   661 00003D65 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   662 00003D68 488B2D(1F040000)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   663 00003D6F 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   664 00003D73 7765                <1>     ja short .moreHdlsReq
   665 00003D75 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   666 00003D7A 771A                <1>     ja short .reduceExternal
   667                              <1>     ;Here if 20 handles or less requested
   668 00003D7C 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   669 00003D82 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   670 00003D84 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   671 00003D86 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   672                              <1> .exitGood:
   673 00003D8C E90A3C0000          <1>     jmp extGoodExit
   674                              <1> .exitBad:
   675 00003D91 E9133C0000          <1>     jmp extErrExit
   676                              <1> .reduceExternal:
   677                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   678                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   679                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   680                              <1> ; and failing that, it will free it and then allocate a new block.
   681 00003D96 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   682 00003D9A E8E9000000          <1>     call .checkOpenHandles
   683 00003D9F 72F0                <1>     jc short .exitBad
   684                              <1>     ;Recall ebx has the numebr of handles here
   685 00003DA1 E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   686 00003DA6 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   687 00003DAA EBE0                <1>     jmp short .exitGood
   688                              <1> .reduceFree:
   689                              <1> ;Entered once we know that we have an external block
   690                              <1> ;Now we close all handles above JFT size
   691 00003DAC 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   692 00003DB0 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   693 00003DB3 E8D0000000          <1>     call .checkOpenHandles
   694 00003DB8 72D7                <1>     jc short .exitBad
   695 00003DBA BB14000000          <1>     mov ebx, dfltJFTsize
   696 00003DBF 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   697                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   698 00003DC1 E8B9000000          <1>     call .copyBlock
   699                              <1>     ;Now we can free the old block
   700 00003DC6 4989F0              <1>     mov r8, rsi
   701 00003DC9 53                  <1>     push rbx
   702 00003DCA E8581C0000          <1>     call freeMemory
   703 00003DCF 5B                  <1>     pop rbx
   704 00003DD0 72BF                <1>     jc short .exitBad
   705 00003DD2 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   706 00003DD6 31C0                <1>     xor eax, eax
   707                              <1> .exitGood2:
   708 00003DD8 EBB2                <1>     jmp short .exitGood
   709                              <1> .moreHdlsReq:
   710 00003DDA 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   711 00003DE0 7507                <1>     jne short .okToExpand
   712 00003DE2 B801000000          <1>     mov eax, errInvFnc
   713                              <1> .exitBad2:
   714 00003DE7 EBA8                <1>     jmp short .exitBad
   715                              <1> .okToExpand:
   716                              <1> ;Need to check if we are external and reallocating. 
   717                              <1> ;   If we are, can we realloc or do we need to free and save?
   718 00003DE9 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   719 00003DEF 762E                <1>     jbe short .moreFromJFT
   720 00003DF1 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   721 00003DF5 E83C000000          <1>     call .reallocBlock
   722 00003DFA 7390                <1>     jnc short .exitGood
   723 00003DFC E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   724 00003E01 728E                <1>     jc short .exitBad
   725 00003E03 4989F0              <1>     mov r8, rsi ;Free the source block
   726 00003E06 53                  <1>     push rbx
   727 00003E07 57                  <1>     push rdi    ;Save the new pointer here
   728 00003E08 55                  <1>     push rbp
   729 00003E09 E8191C0000          <1>     call freeMemory
   730 00003E0E 5D                  <1>     pop rbp
   731 00003E0F 5F                  <1>     pop rdi
   732 00003E10 5B                  <1>     pop rbx
   733 00003E11 7317                <1>     jnc short .freeOk ;Free'd the original block
   734 00003E13 50                  <1>     push rax    ;Save error code on stack
   735 00003E14 4989F8              <1>     mov r8, rdi ;Free the new block
   736 00003E17 E80B1C0000          <1>     call freeMemory
   737 00003E1C 58                  <1>     pop rax
   738 00003E1D EBC8                <1>     jmp short .exitBad2
   739                              <1> .moreFromJFT:
   740 00003E1F 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   741 00003E23 E826000000          <1>     call .getBlock
   742 00003E28 72BD                <1>     jc short .exitBad2
   743                              <1> .freeOk:
   744 00003E2A 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   745 00003E2E 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   746 00003E32 31C0                <1>     xor eax, eax
   747 00003E34 EBA2                <1>     jmp short .exitGood2
   748                              <1> .reallocBlock:
   749                              <1> ;Input:
   750                              <1> ;   rsi -> Source block to reallocate
   751                              <1> ;   ebx = Number of handles
   752                              <1> ;   rbp -> Current PSP
   753                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   754                              <1> ;                 ebx = Number of handles
   755                              <1> ;        CF=CY => Error, EAX has error code
   756 00003E36 56                  <1>     push rsi ;Save external pointer on stack
   757 00003E37 53                  <1>     push rbx    ;Save number of handles on stack
   758 00003E38 55                  <1>     push rbp
   759 00003E39 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   760 00003E3F C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   761 00003E42 4989F0              <1>     mov r8, rsi
   762 00003E45 E8E51C0000          <1>     call reallocMemory
   763 00003E4A 5D                  <1>     pop rbp
   764 00003E4B 5B                  <1>     pop rbx
   765 00003E4C 5E                  <1>     pop rsi ;Get external pointer back in rsi
   766                              <1>     return
    13                              <2> %%_ret:
    14 00003E4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   767                              <1> .getBlock:
   768                              <1> ;rsi -> Source block for copy 
   769                              <1> ;ebx = Number of new handles
   770                              <1> ;Output: rsi and ebx as before
   771                              <1> ;        rdi -> New block
   772                              <1> ;IF CF=CY, bad exit
   773 00003E4E 53                  <1>     push rbx    ;bx has the number of handles we want
   774 00003E4F 56                  <1>     push rsi
   775 00003E50 55                  <1>     push rbp
   776 00003E51 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   777 00003E57 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   778 00003E5A 89D9                <1>     mov ecx, ebx
   779 00003E5C C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   780 00003E5F 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   781 00003E60 E8BE190000          <1>     call allocateMemory ;Allocate memory 
   782 00003E65 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   783 00003E66 5D                  <1>     pop rbp ;Get the PSP pointer back
   784 00003E67 5E                  <1>     pop rsi ;Get the source pointer back
   785 00003E68 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   786                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003E69 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003E6B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   787 00003E6C 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   788 00003E6F 57                  <1>     push rdi
   789 00003E70 31C0                <1>     xor eax, eax
   790 00003E72 FFC8                <1>     dec eax
   791 00003E74 F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   792 00003E76 5F                  <1>     pop rdi
   793 00003E77 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   794 00003E79 E801000000          <1>     call .copyBlock ;Copy all the handles over
   795                              <1>     return
    13                              <2> %%_ret:
    14 00003E7E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> .copyBlock:
   797                              <1> ;Input: rsi -> Source block
   798                              <1> ;       rdi -> Destination block
   799                              <1> ;       ecx = Number of handles to copy
   800 00003E7F 56                  <1>     push rsi
   801 00003E80 57                  <1>     push rdi
   802 00003E81 51                  <1>     push rcx
   803 00003E82 F3A4                <1>     rep movsb
   804 00003E84 59                  <1>     pop rcx
   805 00003E85 5F                  <1>     pop rdi
   806 00003E86 5E                  <1>     pop rsi
   807                              <1>     return
    13                              <2> %%_ret:
    14 00003E87 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   808                              <1> .checkOpenHandles:
   809                              <1> ;Checks for open handles in the range that is to be freed.
   810                              <1> ;If any found, error exit
   811                              <1> ;Input: rsi -> Where to start searching
   812 00003E88 56                  <1>     push rsi
   813 00003E89 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   814                              <1> .cohLoop:
   815 00003E8D 803EFF              <1>     cmp byte [rsi], -1
   816 00003E90 7509                <1>     jne .checkOpenHandlesBadExit
   817 00003E92 48FFC6              <1>     inc rsi
   818 00003E95 FFC9                <1>     dec ecx
   819 00003E97 75F4                <1>     jnz .cohLoop
   820 00003E99 5E                  <1>     pop rsi
   821                              <1>     return
    13                              <2> %%_ret:
    14 00003E9A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   822                              <1> .checkOpenHandlesBadExit:
   823 00003E9B B804000000          <1>     mov eax, errNhl
   824 00003EA0 F9                  <1>     stc
   825 00003EA1 5E                  <1>     pop rsi
   826                              <1>     return
    13                              <2> %%_ret:
    14 00003EA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   827                              <1> 
   828                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   829                              <1>     ;Input: bx = File to flush
   830 00003EA3 E8DC130000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   831 00003EA8 0F82FB3A0000        <1>     jc extErrExit
   832 00003EAE E829120000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   833                              <1>     ;Now we check if the device is a char, disk or net file and commit
   834 00003EB3 E811000000          <1>     call commitMain
   835 00003EB8 0F82EB3A0000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   836                              <1> .exitOk:
   837 00003EBE 30C0                <1>     xor al, al
   838 00003EC0 E80E360000          <1>     call getUserRegs
   839 00003EC5 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   840                              <1>     return
    13                              <2> %%_ret:
    14 00003EC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   841                              <1> 
   842                              <1> ;-----------------------------------:
   843                              <1> ;       Main File IO Routines       :
   844                              <1> ;-----------------------------------:
   845                              <1> commitMain:
   846                              <1> ;Commits the current SFT 
   847 00003EC9 E816120000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   848 00003ECE 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
   849 00003ED2 F7C3C0000000        <1>     test ebx, devCharDev | devDiskNoFlush
   850                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003ED8 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003EDA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   851 00003EDB F7C300800000        <1>     test ebx, devRedir
   852 00003EE1 7408                <1>     jz .notNet
   853                              <1> ;Commit file net redir call and exit
   854 00003EE3 B807110000          <1>     mov eax, 1107h
   855 00003EE8 CD2F                <1>     int 2Fh
   856                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003EEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   857                              <1> .notNet:
   858 00003EEB E86E3A0000          <1>     call dosCrit1Enter  ;Enter to own the disk
   859 00003EF0 E8693A0000          <1>     call dosCrit1Enter  ;Enter for the flush file
   860 00003EF5 E89DE5FFFF          <1>     call updateSFTDateTimeFields    ;Update the SFT Time fields
   861 00003EFA B8FFFFFFFF          <1>     mov eax, -1         ;Set a "large" count for open handles
   862 00003EFF E89C090000          <1>     call flushFile      ;Now file gets flushed and exit critical section
   863 00003F04 9C                  <1>     pushfq
   864 00003F05 E8CDE7FFFF          <1>     call openSFT        ;Now, reopen the file in the driver 
   865 00003F0A 9D                  <1>     popfq
   866 00003F0B E8583A0000          <1>     call dosCrit1Exit   ;Release the disk
   867                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003F10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   868                              <1>     
   869                              <1> renameMain:
   870                              <1> ;Wildcards in the source filename match anything.
   871                              <1> ;Wildcards in the destination filename indicate that we retain the
   872                              <1> ; char in the source filename.
   873                              <1> ;All * wildcards are expanded to ? at this point
   874                              <1> ;
   875                              <1> ;Input:
   876                              <1> ; filenamePtr1 -> Source path + filename pattern
   877                              <1> ; filenamePtr2 -> New path + filename pattern
   878                              <1> ; workingCDS -> CDS for drive we are considering (set by first pathspec)
   879                              <1> ; searchAttr = Set to search attributes (inclusive or by request if netinvoke)
   880 00003F11 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   881 00003F18 E822350000          <1>     call testCDSNet ;CF=NC => Not net
   882 00003F1D 7308                <1>     jnc .notNet
   883 00003F1F B811110000          <1>     mov eax, 1111h
   884 00003F24 CD2F                <1>     int 2Fh
   885                              <1>     return
    13                              <2> %%_ret:
    14 00003F26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   886                              <1> .notNet:
   887                              <1> ;First check if both drives are on the same disk.
   888 00003F27 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Errors in the disk subsystem
   889 00003F2E 8A05(1E050000)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   890 00003F34 8A25(9E050000)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   891 00003F3A 38E0                <1>     cmp al, ah
   892 00003F3C 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   893 00003F3E B811000000          <1>     mov eax, errDevUnk
   894 00003F43 F9                  <1>     stc
   895                              <1>     return
    13                              <2> %%_ret:
    14 00003F44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   896                              <1> .sameDrive:
   897 00003F45 E8143A0000          <1>     call dosCrit1Enter
   898                              <1>     ;mov byte [delChar], 0E5h    ;Set the delchar to 0E5h
   899 00003F4A C605(07070000)FF    <1>     mov byte [openCreate], -1   ;We are creating a new file! 
   900                              <1> ;Check if either pathsepc is simply X:\,0
   901                              <1> ; If they are, return fail as we cannot rename the root dir
   902 00003F51 8B05(1E050000)      <1>     mov eax, dword [buffer1]
   903 00003F57 30C0                <1>     xor al, al
   904 00003F59 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   905 00003F5E 0F84C0030000        <1>     je .renAccDen
   906 00003F64 8B05(9E050000)      <1>     mov eax, dword [buffer2]
   907 00003F6A 30C0                <1>     xor al, al
   908 00003F6C 3D003A5C00          <1>     cmp eax, 005C3A00h
   909 00003F71 0F84AD030000        <1>     je .renAccDen  ;If this is the root, exit access denied
   910                              <1> ;Find the filename portion in both buffers.
   911 00003F77 488D3D(1E050000)    <1>     lea rdi, buffer1
   912 00003F7E E81B030000          <1>     call .findNameInPath
   913 00003F83 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Repurpose these vars to hold ptr to filename
   914 00003F8A 488D3D(9E050000)    <1>     lea rdi, buffer2
   915 00003F91 E808030000          <1>     call .findNameInPath
   916 00003F96 48893D(26060000)    <1>     mov qword [fname2Ptr], rdi
   917                              <1> ;Move the destination filename for wc expansion to wcd fcb name field
   918 00003F9D 488D35(E5060000)    <1>     lea rsi, wcdFcbName
   919 00003FA4 4887F7              <1>     xchg rsi, rdi
   920 00003FA7 E858D4FFFF          <1>     call asciiToFCB     ;Copy the ASCIIZ filename to the FCB field
   921                              <1> ;Now check if both destination and source directories are the same.
   922 00003FAC C605(FE060000)00    <1>     mov byte [renSamePar], 0 
   923 00003FB3 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
   924 00003FBA C646FF00            <1>     mov byte [rsi - 1], 0
   925 00003FBE 488B3D(26060000)    <1>     mov rdi, qword [fname2Ptr]
   926 00003FC5 C647FF00            <1>     mov byte [rdi - 1], 0
   927 00003FC9 488D35(1E050000)    <1>     lea rsi, buffer1
   928 00003FD0 488D3D(9E050000)    <1>     lea rdi, buffer2
   929 00003FD7 E8AC360000          <1>     call compareFileNames
   930 00003FDC 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
   931 00003FE3 C646FF5C            <1>     mov byte [rsi - 1], "\"
   932 00003FE7 488B3D(26060000)    <1>     mov rdi, qword [fname2Ptr]
   933 00003FEE C647FF5C            <1>     mov byte [rdi - 1], "\"
   934 00003FF2 7507                <1>     jnz .renMakeFF
   935 00003FF4 C605(FE060000)FF    <1>     mov byte [renSamePar], -1 ;Set to indicate same parent directory
   936                              <1> .renMakeFF:
   937                              <1> ;Find First the source file with given attributes!
   938 00003FFB 488D3D(1E050000)    <1>     lea rdi, buffer1
   939 00004002 FF35(1E060000)      <1>     push qword [fname1Ptr]
   940 00004008 E8D9D5FFFF          <1>     call getFilePathNoCanon ;We are searching for the file
   941 0000400D 8F05(1E060000)      <1>     pop qword [fname1Ptr]
   942 00004013 0F8210030000        <1>     jc .renErrExit  ;If there is no file or an error, fail it!
   943                              <1> ;Build the rename FFBlock
   944                              <1> .renFindNext:
   945 00004019 488D3D(92070000)    <1>     lea rdi, renameFFBlk
   946 00004020 E867D4FFFF          <1>     call setupFFBlock
   947                              <1> ;Copy the found dir to rename dir
   948 00004025 488D35(5A060000)    <1>     lea rsi, curDirCopy
   949 0000402C 488D3D(BD070000)    <1>     lea rdi, renameDir
   950 00004033 B904000000          <1>     mov ecx, fatDirEntry_size/8
   951 00004038 F348A5              <1>     rep movsq
   952                              <1> ;Copy the found filename to the filename portion of the source path.
   953 0000403B 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]
   954 00004042 488D35(5A060000)    <1>     lea rsi, qword [curDirCopy + fatDirEntry.name]
   955 00004049 E8FED3FFFF          <1>     call FCBToAsciiz    ;Copy the found filename over
   956                              <1> ;Check the file is not a char dev or a CDS directory
   957 0000404E F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   958 00004055 0F85C9020000        <1>     jnz .renAccDen ;Cant rename a char file!
   959 0000405B F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   960 00004062 7432                <1>     jz .srcNotDir
   961 00004064 488D3D(1E050000)    <1>     lea rdi, buffer1  ;Check this path isn't a CDS
   962 0000406B E8F0010000          <1>     call .checkPathCDS
   963 00004070 0F82B3020000        <1>     jc .renErrExit  ;Bubble the error code up if there is an error!
   964 00004076 8B05(B0070000)      <1>     mov eax, dword [renameFFBlk + ffBlock.asciizName]
   965 0000407C 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Drop the upper byte
   966 00004081 3D2E2E0000          <1>     cmp eax, ".."       ;Did we read ..<NUL> ?
   967 00004086 0F8498020000        <1>     je .renAccDen
   968 0000408C 663D2E00            <1>     cmp ax, "."         ;Did we read .<NUL> ?
   969 00004090 0F848E020000        <1>     je .renAccDen
   970                              <1> .srcNotDir:
   971                              <1> ;Finally, make sure this found file can be renamed (i.e. has no share locks)
   972 00004096 FF35(1E060000)      <1>     push qword [fname1Ptr]
   973 0000409C 488D35(1E050000)    <1>     lea rsi, buffer1
   974 000040A3 488935(1E060000)    <1>     mov qword [fname1Ptr], rsi
   975 000040AA E880020000          <1>     call checkExclusiveOwnFile   ;Now do this, saving ptrs
   976 000040AF 8F05(1E060000)      <1>     pop qword [fname1Ptr]
   977 000040B5 0F825F020000        <1>     jc .renShareErr   ;Propagate the share error code
   978                              <1> ;Build a destination filename now. fcbName is already setup with the source
   979                              <1> ; filename.
   980 000040BB 488D35(E5060000)    <1>     lea rsi, wcdFcbName
   981 000040C2 488D3D(D9060000)    <1>     lea rdi, fcbName
   982 000040C9 E874010000          <1>     call .buildFilename
   983 000040CE 488B35(26060000)    <1>     mov rsi, qword [fname2Ptr]  ;Now we store the filename to the pathspec
   984 000040D5 4887F7              <1>     xchg rsi, rdi
   985 000040D8 E86FD3FFFF          <1>     call FCBToAsciiz    ;Make the FCB name to ASCIIZ
   986                              <1> ;Ensure the two filenames are NOT the same
   987 000040DD 488D35(1E050000)    <1>     lea rsi, buffer1
   988 000040E4 488D3D(9E050000)    <1>     lea rdi, buffer2
   989 000040EB E898350000          <1>     call compareFileNames
   990 000040F0 0F842E020000        <1>     jz .renAccDen   ;If the names are equal, Access Denied!
   991                              <1> ;Copy this FCB name to the rename directory copy
   992 000040F6 488D3D(BD070000)    <1>     lea rdi, qword [renameDir + fatDirEntry.name]
   993 000040FD 488D35(D9060000)    <1>     lea rsi, fcbName
   994 00004104 B90B000000          <1>     mov ecx, 11
   995 00004109 F3A4                <1>     rep movsb
   996 0000410B F605(FE060000)FF    <1>     test byte [renSamePar], -1    ;If clear, different parent directories
   997 00004112 741C                <1>     jz .renDiffDirs
   998                              <1> ;Here we are in the same parent directory. So we recycle the directory
   999                              <1> ; entry directly.
  1000                              <1> ;At this point, the curDir is to the source directory entry.
  1001 00004114 E80DE3FFFF          <1>     call getDiskDirectoryEntry  ;So get a pointer to this entry in rsi
  1002 00004119 488D3D(BD070000)    <1>     lea rdi, renameDir  ;Get ptr to the src of the new dir entry
  1003 00004120 4887F7              <1>     xchg rsi, rdi   ;Swap the pointers
  1004 00004123 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1005 00004128 F348A5              <1>     rep movsq   ;Move it over
  1006 0000412B E9B3000000          <1>     jmp .renDone  ;Mark buffer dirty, flush and exit!
  1007                              <1> .renDiffDirs:
  1008                              <1> ;Else check the parent directory of the destination exists. For this, we
  1009                              <1> ; replace the pathsep before the filename with a null and do a dir search.
  1010                              <1> ;We also do this to setup the vars to point to the parent directory.
  1011 00004130 488B3D(26060000)    <1>     mov rdi, qword [fname2Ptr]
  1012 00004137 48FFCF              <1>     dec rdi ;Point to the pathsep char
  1013 0000413A 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;If we are in the root directory, skip check!
  1014 0000413E 7426                <1>     je .skipParCheck
  1015 00004140 C60700              <1>     mov byte [rdi], 0   ;Place null terminator here
  1016 00004143 57                  <1>     push rdi            ;Save ptr to the null terminator on stack
  1017 00004144 FF35(1E060000)      <1>     push qword [fname1Ptr]
  1018 0000414A 488D3D(9E050000)    <1>     lea rdi, buffer2
  1019 00004151 E889D4FFFF          <1>     call getDirPathNoCanon  ;Search for the parent directory!
  1020 00004156 8F05(1E060000)      <1>     pop qword [fname1Ptr]
  1021 0000415C 5F                  <1>     pop rdi             ;Get ptr to terminator to replace back
  1022 0000415D C6075C              <1>     mov byte [rdi], "\" ;Now replace the null terminator with the pathsep
  1023 00004160 0F82C3010000        <1>     jc .renErrExit  ;If the parent doesnt exist, exit, bubbling error code
  1024                              <1> .skipParCheck:
  1025                              <1> ;Check the destination file doesnt exist at all. Do inclusive search!
  1026 00004166 0FB615(FC060000)    <1>     movzx edx, byte [searchAttr]
  1027 0000416D 52                  <1>     push rdx
  1028 0000416E C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive
  1029 00004175 FF35(1E060000)      <1>     push qword [fname1Ptr]
  1030 0000417B 488D3D(9E050000)    <1>     lea rdi, buffer2    ;Now check that this file doesnt exist!
  1031 00004182 E85FD4FFFF          <1>     call getFilePathNoCanon
  1032 00004187 8F05(1E060000)      <1>     pop qword [fname1Ptr]
  1033 0000418D 5A                  <1>     pop rdx
  1034 0000418E 8815(FC060000)      <1>     mov byte [searchAttr], dl
  1035 00004194 0F838A010000        <1>     jnc .renAccDen  ;If no file found, error!
  1036 0000419A 3C02                <1>     cmp al, errFnf  ;If not file not found, error!
  1037 0000419C 0F8587010000        <1>     jne .renErrExit ;Else, the file specified not found. Proceed
  1038                              <1> ;Destination file not found in any form, proceed finding directory space!
  1039                              <1> ;CurDirCopy and dir search vars point to the parent directory of the file
  1040                              <1> ; we were searching for. Root dir has this entry set to 0. If the file is
  1041                              <1> ; a dir, we take the parent cluster.
  1042                              <1> 
  1043                              <1> ;To prevent file loss, we create the new directory entry first and mark 
  1044                              <1> ; the buffer dirty before deleting the original. Unless something happens
  1045                              <1> ; midway through these two operations, we should be oki
  1046 000041A2 E811010000          <1>     call .renFindDirSpace ;Returns rsi -> space for dir entry if CF=NC
  1047 000041A7 0F8277010000        <1>     jc .renAccDen
  1048 000041AD 488D3D(BD070000)    <1>     lea rdi, renameDir  ;Get ptr to the src of the new dir entry
  1049 000041B4 4887F7              <1>     xchg rsi, rdi
  1050 000041B7 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1051 000041BC F348A5              <1>     rep movsq
  1052 000041BF E841C7FFFF          <1>     call markBufferDirty    ;Written to a disk buffer, mark it dirty!
  1053                              <1> ;Now we delete the old directory entry. If this fails we end up with
  1054                              <1> ; two directory entries linked to the same file. Better than losing
  1055                              <1> ; data on disk! In this case, to prevent corruption, you should
  1056                              <1> ; copy the data from the disk to hopefully another disk, and then
  1057                              <1> ; delete both the old and new directory entries for this file.
  1058 000041C4 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Search for this file again to get curdir
  1059 000041CB E816D4FFFF          <1>     call getFilePathNoCanon
  1060 000041D0 0F8253010000        <1>     jc .renErrExit
  1061 000041D6 E84BE2FFFF          <1>     call getDiskDirectoryEntry  ;Vars were setup in getFilePathNoCanon call
  1062                              <1> ;rsi points to the file entry
  1063 000041DB 8A05(08070000)      <1>     mov al, byte [delChar]
  1064 000041E1 8806                <1>     mov byte [rsi], al      ;Delete the file!
  1065                              <1> .renDone:
  1066 000041E3 E81DC7FFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
  1067 000041E8 E8A6C5FFFF          <1>     call flushAllBuffersForDPB  ;Now flush all buffers
  1068 000041ED E83F000000          <1>     call .searchForWC   ;Now check if we have WC's. If so, find next file!
  1069 000041F2 7406                <1>     jz .wcFnd
  1070                              <1> .renExit:   ;Normal Exit!
  1071 000041F4 E86F370000          <1>     call dosCrit1Exit
  1072                              <1>     return
    13                              <2> %%_ret:
    14 000041F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1073                              <1> .wcFnd:
  1074                              <1> ;Here if we need to do WC magic.
  1075                              <1> ;Do a find next. If it fails, we return. If it succeeds, we then
  1076                              <1> ; copy the cur dir and start as if we have just set up the find first block.
  1077                              <1> ;Since we initially setup the find first block, we don't need the source 
  1078                              <1> ; pathspec pattern in the pathspec anymore and can just use the ptr to the 
  1079                              <1> ; name portion of the pathspec to copy the found filename over to.
  1080                              <1> ;Since we start searching from the deleted dir entry which might've been 
  1081                              <1> ; overwritten, we might lose a rename if the wc pattern is sufficiently 
  1082                              <1> ; generic. This isn't a problem as this is the defined behaviour.
  1083                              <1> ;
  1084                              <1> ;Beware, WC calls may take a long timeslice in multitasking environments.
  1085                              <1> ;Consider adding a mechanism for multitasking (Can't exit crit1 unless
  1086                              <1> ; we can guarantee the only multitasker is one that swaps the SDA on each 
  1087                              <1> ; task swap, i.e. us). A proper multitasker which swaps the sda on each task
  1088                              <1> ; swap, can then patch these spaces.
  1089 000041FA 9090909090          <1>     db 5 dup (90h)  ;Space for exit crit1
  1090 000041FF FF35(17040000)      <1>     push qword [currentDTA] ;Save the original DTA address
  1091 00004205 488D3D(92070000)    <1>     lea rdi, renameFFBlk ;Use dosffblk to preserve original search template
  1092 0000420C 48893D(17040000)    <1>     mov qword [currentDTA], rdi
  1093 00004213 E84ECEFFFF          <1>     call findNextMain
  1094 00004218 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
  1095 0000421F 8F05(17040000)      <1>     pop qword [currentDTA]  ;Get back original DTA
  1096 00004225 9090909090          <1>     db 5 dup (90h)  ;Space for enter crit1
  1097 0000422A 72C8                <1>     jc .renExit     ;If find next errors, exit here (and exit crit1)
  1098 0000422C E9E8FDFFFF          <1>     jmp .renFindNext  ;else update the renameffblock and proceed
  1099                              <1> 
  1100                              <1> ;---------------------
  1101                              <1> ;Rename routines
  1102                              <1> ;---------------------
  1103                              <1> .searchForWC:
  1104                              <1> ;Searches for a wildcard in the renFFblock.
  1105                              <1> ;Input: rdi -> FCB name to check
  1106                              <1> ;Output: ZF=ZE if WC present. ZF=NZ otherwise.
  1107 00004231 488D3D(93070000)    <1>     lea rdi, qword [renameFFBlk + ffBlock.template]
  1108 00004238 B03F                <1>     mov al, "?"
  1109 0000423A B90B000000          <1>     mov ecx, 11
  1110 0000423F F2AE                <1>     repne scasb
  1111                              <1>     return
    13                              <2> %%_ret:
    14 00004241 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1112                              <1> 
  1113                              <1> .buildFilename:
  1114                              <1> ;Preserves all registers. Builds a name in the destination buffer.
  1115                              <1> ;This buffer MUST be initialised with the original filename before
  1116                              <1> ; we run this in the event that the source buffer has any wildcards
  1117                              <1> ;Input: rsi -> Buffer to source chars from
  1118                              <1> ;       rdi -> Buffer to store chars in
  1119                              <1> ;   If a wildcard is encountered in the source, we goto next char
  1120 00004242 50                  <1>     push rax
  1121 00004243 51                  <1>     push rcx
  1122 00004244 56                  <1>     push rsi
  1123 00004245 57                  <1>     push rdi
  1124 00004246 B90B000000          <1>     mov ecx, 11 ;11 chars in an fcb name
  1125                              <1> .bflp:
  1126 0000424B AC                  <1>     lodsb   ;Get a char from the source
  1127 0000424C 3C3F                <1>     cmp al, "?"
  1128 0000424E 7404                <1>     je .bfNextChar
  1129 00004250 AA                  <1>     stosb   ;Store the char and advance the storage pointer
  1130 00004251 48FFCF              <1>     dec rdi ;Go back
  1131                              <1> .bfNextChar:
  1132 00004254 48FFC7              <1>     inc rdi ;Go to next space
  1133 00004257 FFC9                <1>     dec ecx
  1134 00004259 75F0                <1>     jnz .bflp
  1135 0000425B 5F                  <1>     pop rdi
  1136 0000425C 5E                  <1>     pop rsi
  1137 0000425D 59                  <1>     pop rcx
  1138 0000425E 58                  <1>     pop rax
  1139                              <1>     return
    13                              <2> %%_ret:
    14 0000425F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1140                              <1> 
  1141                              <1> .checkPathCDS:
  1142                              <1> ;Checks a path in rdi is not in the CDS of any drive.
  1143                              <1> ;Trashes everything.
  1144                              <1> ;Input: rdi -> Path to check isnt the CDS for any drives
  1145                              <1> ;Output:    CF=NC: Path not CDS
  1146                              <1> ;           CF=CY: Path found in CDS of some drive
  1147 00004260 57                  <1>     push rdi
  1148 00004261 E8EA330000          <1>     call strlen ;Get asciiz length in ecx
  1149 00004266 5B                  <1>     pop rbx
  1150 00004267 FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
  1151 00004269 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr]
  1152 00004270 0FB615(78000000)    <1>     movzx edx, byte [lastdrvNum]
  1153                              <1> .cpcdsDirCheck:
  1154 00004277 4889DF              <1>     mov rdi, rbx
  1155 0000427A 51                  <1>     push rcx    ;Save the char count to check!
  1156 0000427B 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
  1157 0000427C F3A6                <1>     repe cmpsb  ;Compare while they are equal
  1158 0000427E AC                  <1>     lodsb   ;Get the last char to check in al
  1159 0000427F 5E                  <1>     pop rsi ;Put rsi back to the start of the string
  1160 00004280 59                  <1>     pop rcx
  1161 00004281 750F                <1>     jne .cpcdsNeqDir
  1162                              <1>     ;Instead of failing, if not join, simply reset that CDS entry to root.
  1163 00004283 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
  1164 00004285 7404                <1>     je .cpcdsFound
  1165 00004287 84C0                <1>     test al, al
  1166 00004289 7507                <1>     jne .cpcdsNeqDir ;Proceed as normal if not null
  1167                              <1> .cpcdsFound:
  1168                              <1>     ;Here we are trying to change a current directory. Fail it!
  1169                              <1>     ;This is (DOS 5.0+/Windows)-like behaviour but its sensible and what
  1170                              <1>     ; we initially had programmed in (with access denied error instead).
  1171 0000428B B810000000          <1>     mov eax, errDelCD   ;This is a more descriptive error.
  1172 00004290 F9                  <1>     stc
  1173                              <1>     return    
    13                              <2> %%_ret:
    14 00004291 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1174                              <1> .cpcdsNeqDir:
  1175 00004292 4881C65F000000      <1>     add rsi, cds_size   ;Goto next CDS
  1176 00004299 FFCA                <1>     dec edx
  1177 0000429B 75DA                <1>     jnz .cpcdsDirCheck
  1178                              <1>     return
    13                              <2> %%_ret:
    14 0000429D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1179                              <1> 
  1180                              <1> .findNameInPath:
  1181                              <1> ;Finds the name portion of the pathspec. Preserves all registers except rdi.
  1182                              <1> ;Input: rdi -> Filename to find the first char of the filename portion of
  1183                              <1> ;Output: rdi -> First char of the filename in path
  1184 0000429E 50                  <1>     push rax
  1185 0000429F 51                  <1>     push rcx
  1186 000042A0 E8AB330000          <1>     call strlen ;Get in ecx the 
  1187 000042A5 4801CF              <1>     add rdi, rcx    ;Point rdi past the terminating null
  1188 000042A8 FD                  <1>     std ;Go backwards now, to find the path sep
  1189 000042A9 B05C                <1>     mov al, "\"
  1190 000042AB F2AE                <1>     repne scasb   ;Now rsi points one before
  1191 000042AD FC                  <1>     cld ;Go normal ways now
  1192 000042AE 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
  1193 000042B5 59                  <1>     pop rcx
  1194 000042B6 58                  <1>     pop rax
  1195                              <1>     return
    13                              <2> %%_ret:
    14 000042B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1196                              <1> 
  1197                              <1> .renFindDirSpace:
  1198                              <1> ;Searches for directory space based on the data in the current dir copy.
  1199                              <1> ; If the file is a dir then start searching in the parent cluster 
  1200 000042B8 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
  1201 000042BE F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], attrFileDir
  1202 000042C5 7517                <1>     jnz .sfdsDirSkip 
  1203                              <1> ;Now check, if the parent dir of the is null. IF it is, the clust
  1204                              <1> ; wouldn't've been setup as we dont "search" for the root in the same
  1205                              <1> ; way (though if we search for A:\, we DO setup the cluster info. Ew.)
  1206 000042C7 85C0                <1>     test eax, eax
  1207 000042C9 7413                <1>     jz .sfdsDirSkip
  1208 000042CB 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
  1209 000042D2 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
  1210 000042D9 C1E210              <1>     shl edx, 10h
  1211 000042DC 09D0                <1>     or eax, edx     ;Get first cluster of dir file in eax 
  1212                              <1> .sfdsDirSkip:
  1213 000042DE 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1214 000042E4 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1215 000042E6 668905(83070000)    <1>     mov word [dirSect], ax
  1216 000042ED 8905(85070000)      <1>     mov dword [dirEntry], eax
  1217                              <1> ;Needs delchar setup. Already done in the prologue of rename!
  1218 000042F3 E81AE1FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1219 000042F8 731C                <1>     jnc .dirEntryFnd
  1220 000042FA 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1220 00004302 0000                <1>
  1221 00004304 7412                <1>     je .searchBad ;Set CF and exit
  1222 00004306 E8F4E1FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1223 0000430B 720B                <1>     jc .searchBad
  1224 0000430D 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1225 00004312 7404                <1>     je .searchBad
  1226                              <1>     ;Else eax = Newly allocated cluster
  1227 00004314 EBA2                <1>     jmp short .renFindDirSpace
  1228                              <1> .dirEntryFnd:
  1229 00004316 F8                  <1>     clc
  1230                              <1>     return
    13                              <2> %%_ret:
    14 00004317 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1231                              <1> .searchBad:
  1232 00004318 F9                  <1>     stc
  1233                              <1>     return
    13                              <2> %%_ret:
    14 00004319 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1234                              <1> 
  1235                              <1> ;Error Exits
  1236                              <1> .renShareErr:
  1237 0000431A B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1238 0000431F E905000000          <1>     jmp .renErrExit
  1239                              <1> .renAccDen:
  1240 00004324 B805000000          <1>     mov eax, errAccDen
  1241                              <1> .renErrExit:
  1242 00004329 F9                  <1>     stc
  1243 0000432A E9C5FEFFFF          <1>     jmp .renExit
  1244                              <1> 
  1245                              <1> checkExclusiveOwnFile:
  1246                              <1> ;We check that the program carrying out this action owns the file exclusively. 
  1247                              <1> ; This function will fail IF there are handles open, and thus makes it an 
  1248                              <1> ; ideal candidate for checking in RENAME, for both filenames, DELETE and 
  1249                              <1> ; SETFILEATTRIBS if we have any open files. If we do, then we should get 
  1250                              <1> ; a Share error and thus it would prevent us from proceeding.
  1251                              <1> ;
  1252                              <1> ;If SHARE not loaded, ALL handles should be closed manually before 
  1253                              <1> ; Rename or Delete.
  1254                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1255                              <1> ;       currDirCopy = Directory entry for the file
  1256                              <1> ;Output: Clobbers rcx, rdx.
  1257 0000432F 50                  <1>     push rax
  1258 00004330 53                  <1>     push rbx
  1259 00004331 56                  <1>     push rsi
  1260 00004332 57                  <1>     push rdi
  1261                              <1> 
  1262                              <1>     ;The below in DOS is passed in by the caller, here we preserve the 
  1263                              <1>     ; caller's regs and proceed to set the ptrs ourselves.
  1264 00004333 488D1D(5A060000)    <1>     lea rbx, curDirCopy
  1265 0000433A 488D731A            <1>     lea rsi, qword [rbx + fatDirEntry.fstClusLo]
  1266                              <1>     ;At this point, the filename is fully normalised due to the 
  1267                              <1>     ; way we do path parsing. Thus, we can proceed safely.
  1268                              <1> 
  1269                              <1>     ;The following closes most recent shared handles referencing it
  1270                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1271                              <1>     ; mode and if there is precisely 1  
  1272 0000433E FF15(27010000)      <1>     call qword [closeNewHdlShare]    
  1273                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1274 00004344 488D3D(100D0000)    <1>     lea rdi, scratchSFT
  1275 0000434B E88C0D0000          <1>     call setCurrentSFT
  1276 00004350 B802000000          <1>     mov eax, openRWAcc | openCompat ;Set open mode
  1277 00004355 C605(07070000)00    <1>     mov byte [openCreate], 0    ;We test by opening.
  1278 0000435C 57                  <1>     push rdi    ;Save the scratch SFT ptr
  1279 0000435D E8B6020000          <1>     call buildSFTEntry  ;This will never fail. If it does, shareFile will catch
  1280 00004362 5F                  <1>     pop rdi
  1281 00004363 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1282 00004368 66C747021000        <1>     mov word [rdi + sft.wOpenMode], openDenRWShr ;Prevent everything temporarily
  1283 0000436E E8FC3E0000          <1>     call shareFile  ;Puts an sft handle in rdi
  1284 00004373 720B                <1>     jc .exit
  1285 00004375 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0 ;Now free it and close it
  1286 0000437A E8843E0000          <1>     call closeShareCallWrapper 
  1287 0000437F F8                  <1>     clc
  1288                              <1> .exit:
  1289 00004380 5F                  <1>     pop rdi
  1290 00004381 5E                  <1>     pop rsi
  1291 00004382 5B                  <1>     pop rbx
  1292 00004383 58                  <1>     pop rax
  1293                              <1>     ;mov rbp, qword [workingDPB] ;This seems always set so no need for it.
  1294                              <1>     return
    13                              <2> %%_ret:
    14 00004384 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1295                              <1> 
  1296                              <1> outerDeleteMain:
  1297                              <1> ;Internal current dir must be populated with dir entry
  1298                              <1> ; and internal DOS directory variables now point to this entry.
  1299                              <1> ;Checks if the file is a char device or read only.
  1300                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1301                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1302                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1303                              <1> ;         CF=NC => File deleted
  1304                              <1> 
  1305                              <1> ;Hardcode delChar for now. *.* dels may be considered for optimisation later
  1306                              <1>     ;mov byte [delChar], 0E5h
  1307 00004385 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1308 0000438C E8AE300000          <1>     call testCDSNet ;CF=NC => Not net
  1309 00004391 7308                <1>     jnc .notNet
  1310 00004393 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1311 00004398 CD2F                <1>     int 2Fh
  1312                              <1>     return
    13                              <2> %%_ret:
    14 0000439A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1313                              <1> .notNet:
  1314 0000439B B805000000          <1>     mov eax, errAccDen  
  1315 000043A0 F605(65060000)51    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev | dirDirectory | dirReadOnly
  1316 000043A7 7549                <1>     jnz .exitBad  ;Can't delete char dev, dir or ro file
  1317 000043A9 E846000000          <1>     call deleteMain
  1318 000043AE 7242                <1>     jc .exitBad
  1319                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1320 000043B0 B03F                <1>     mov al, "?"
  1321 000043B2 488D3D(D9060000)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1322 000043B9 B90B000000          <1>     mov ecx, 11
  1323 000043BE F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1324 000043C0 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1325 000043C2 F8                  <1>     clc
  1326                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 000043C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1327                              <1> .serverWCloop:
  1328 000043C4 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
  1329 000043CA 488D3D(2F060000)    <1>     lea rdi, dosffblock
  1330 000043D1 57                  <1>     push rdi    ;Push this address onto the stack
  1331 000043D2 E8B5D0FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1332 000043D7 8F05(17040000)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1333 000043DD E884CCFFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1334 000043E2 8F05(17040000)      <1>     pop qword [currentDTA]
  1335                              <1>     retc    ;Return with no more files error now
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000043E8 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000043EA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1336 000043EB E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1337 000043F0 73D2                <1>     jnc .serverWCloop     
  1338                              <1> ;Stop as soon as an error occurs
  1339                              <1> .exitBad:
  1340 000043F2 F9                  <1>     stc
  1341                              <1>     return
    13                              <2> %%_ret:
    14 000043F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1342                              <1> 
  1343                              <1> deleteMain:
  1344                              <1> ;Now unlink FAT chain and then clear directory entry
  1345                              <1> ;Get the start cluster of this file
  1346                              <1> ;Input:
  1347                              <1> ; The file must have NOT be read-only.
  1348                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1349                              <1> ;     - curDirCopy must be filled with the file directory information
  1350                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1351                              <1> ;Output: CF=NC => Success, 
  1352                              <1> ; If not net CDS:
  1353                              <1> ;   rsi keeps pointing to directory entry.
  1354                              <1> ;   al = First char of the file that was deleted.
  1355                              <1> ;        CF=CY => Error
  1356                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1357 000043F4 E836FFFFFF          <1>     call checkExclusiveOwnFile   ;Also cannot delete if open handle
  1358                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000043F9 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000043FB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1359 000043FC 55                  <1>     push rbp
  1360 000043FD 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1361 00004404 52                  <1>     push rdx
  1362 00004405 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1363 0000440C 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1364 00004413 C1E010              <1>     shl eax, 10h
  1365 00004416 09D0                <1>     or eax, edx ;Add low bits to eax
  1366 00004418 5A                  <1>     pop rdx
  1367 00004419 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1368 0000441B 7407                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1369 0000441D E827C9FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1370 00004422 721D                <1>     jc .exitBad
  1371                              <1> .skipUnlink:
  1372                              <1>     ;Now replace the first char of the directory to 0E5h
  1373                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1374 00004424 E8FDDFFFFF          <1>     call getDiskDirectoryEntry
  1375 00004429 7216                <1>     jc .exitBad
  1376 0000442B 8A05(08070000)      <1>     mov al, byte [delChar]
  1377 00004431 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1378 00004433 E8CDC4FFFF          <1>     call markBufferDirty
  1379                              <1>     ;CF must be clear
  1380 00004438 E856C3FFFF          <1>     call flushAllBuffersForDPB
  1381 0000443D 5D                  <1>     pop rbp
  1382                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000443E 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004440 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1383                              <1> .exitBad:
  1384 00004441 5D                  <1>     pop rbp
  1385 00004442 F9                  <1>     stc
  1386                              <1>     return
    13                              <2> %%_ret:
    14 00004443 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1387                              <1> 
  1388                              <1> openMain:
  1389                              <1> ;Input: ax (formally al) = Open mode
  1390                              <1> ;       [currentSFT] = SFT we are building
  1391                              <1> ;       [workingCDS] = CDS of drive to access
  1392                              <1> ;       [workingDPB] = DPB of drive to access
  1393                              <1> ;Ouput: CF=CY => Error, eax has error code
  1394 00004444 E8C9000000          <1>     call setOpenMode
  1395                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004449 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000444B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1396 0000444C E8930C0000          <1>     call getCurrentSFT
  1397 00004451 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1398 00004458 30E4                <1>     xor ah, ah  ;al has the access mode
  1399 0000445A 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1400 00004461 750A                <1>     jne .notNet
  1401                              <1> .redirOpen:
  1402 00004463 50                  <1>     push rax    ;Push open mode onto stack
  1403 00004464 B816110000          <1>     mov eax, 1116h  ;Open remote file on "\\" pathspec drives
  1404 00004469 CD2F                <1>     int 2Fh
  1405 0000446B 58                  <1>     pop rax
  1406                              <1>     return
    13                              <2> %%_ret:
    14 0000446C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1407                              <1> .notNet:
  1408 0000446D 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1409 00004473 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1410 00004475 E8E4340000          <1>     call dosCrit1Enter
  1411                              <1> ;Ensure our disk attributes permit opening
  1412 0000447A 8A15(65060000)      <1>     mov dl, byte [curDirCopy + fatDirEntry.attribute]   ;Get the disk attrib
  1413 00004480 F6C208              <1>     test dl, dirVolumeID    ;Is the found file a volume label?
  1414 00004483 752C                <1>     jnz .accDenExit
  1415 00004485 F6C201              <1>     test dl, dirReadOnly    ;Is the found file marked as RO in the file system?
  1416 00004488 7439                <1>     jz short .openFile      ;If not, proceed.
  1417                              <1> ;Else, we check if we are permitted to open this file.
  1418 0000448A 0FB74F02            <1>     movzx ecx, word [rdi + sft.wOpenMode]   ;Get the user-set open mode
  1419 0000448E F7C100800000        <1>     test ecx, openSFTFCB  ;We consider FCBs here for future net use 
  1420 00004494 7522                <1>     jnz .fcbOpen    ;If FCB open, intervene appropriately
  1421 00004496 89CA                <1>     mov edx, ecx
  1422 00004498 81E270000000        <1>     and edx, 070h   ;Isolate the share bits only
  1423 0000449E 81FA70000000        <1>     cmp edx, openNetFCBShr ;Is this a net server FCB open?
  1424 000044A4 7412                <1>     je .fcbOpen     ;If it is net fcb, similarly force to ro as before
  1425 000044A6 81E10F000000        <1>     and ecx, 0Fh    ;Else, isolate the bottom nybble
  1426 000044AC 80F900              <1>     cmp cl, openRdAcc  ;Are we asking for more than read?
  1427 000044AF 7412                <1>     je .openFile    ;If no, proceed, eax has openmode. Else, access denied!
  1428                              <1> .accDenExit:
  1429 000044B1 B805000000          <1>     mov eax, errAccDen
  1430 000044B6 EB20                <1>     jmp short .errorExit
  1431                              <1> .fcbOpen:
  1432 000044B8 6681E1F0FF          <1>     and cx, 0FFF0h  ;Set to read access open only. Preserve share/property bits
  1433 000044BD 66894F02            <1>     mov word [rdi + sft.wOpenMode], cx
  1434 000044C1 89C8                <1>     mov eax, ecx    ;Move the modified open mode into eax for buildSFT
  1435                              <1> .openFile:
  1436 000044C3 C605(07070000)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1437                              <1>     ;mov byte [delChar], 0E5h
  1438 000044CA E849010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1439 000044CF 7207                <1>     jc .errorExit
  1440 000044D1 E8993D0000          <1>     call shareFile      ;Puts an SFT handle in rdi
  1441 000044D6 7306                <1>     jnc .fileSharedOk   ;If the file open doesnt violate share, jump!
  1442                              <1> .errorExit:
  1443 000044D8 E88B340000          <1>     call dosCrit1Exit   ;Else we error out with error code in al
  1444                              <1>     return
    13                              <2> %%_ret:
    14 000044DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1445                              <1> .fileSharedOk:
  1446 000044DE B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1447 000044E3 E8FC0B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1448 000044E8 FF15(2F010000)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1449 000044EE E875340000          <1>     call dosCrit1Exit
  1450                              <1> openDriverMux:  ;Int 2Fh, AX=120Ch, jumped to by Create
  1451                              <1> ;CurrentSFT ***must*** be set before entering here
  1452 000044F3 E8EC0B0000          <1>     call getCurrentSFT
  1453 000044F8 E8DAE1FFFF          <1>     call openSFT    ;This takes input rdi-> currentSFT. Preserves it too
  1454 000044FD 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB
  1455 00004503 7501                <1>     jnz .netOpen
  1456                              <1>     return
    13                              <2> %%_ret:
    14 00004505 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1457                              <1> .netOpen:
  1458 00004506 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1459 0000450D 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1460                              <1>     return
    13                              <2> %%_ret:
    14 00004511 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1461                              <1> 
  1462                              <1> setOpenMode:
  1463                              <1> ;Input: al = Open mode for the file open
  1464 00004512 8805(FD060000)      <1>     mov byte [fileOpenMd], al
  1465 00004518 53                  <1>     push rbx
  1466                              <1> ;Check we are not opening a directory. This is to prevent disk io with a dir
  1467 00004519 F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], attrFileDir
  1468 00004520 7525                <1>     jnz .somBad    ;Directories are not allowed to be opened
  1469 00004522 88C3                <1>     mov bl, al
  1470 00004524 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1471 00004527 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1    
  1472 0000452E 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1473 00004530 80FB70              <1>     cmp bl, openNetFCBShr ;Test share mode for netFCB
  1474 00004533 7405                <1>     je .s2
  1475                              <1> .s1:
  1476 00004535 80FB40              <1>     cmp bl, openDenNoShr
  1477 00004538 770D                <1>     ja .somBad
  1478                              <1> .s2:
  1479 0000453A 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1480 0000453C 80E30F              <1>     and bl, 0Fh
  1481 0000453F 80FB02              <1>     cmp bl, openRWAcc
  1482 00004542 7703                <1>     ja .somBad
  1483 00004544 5B                  <1>     pop rbx
  1484 00004545 F8                  <1>     clc
  1485                              <1>     return
    13                              <2> %%_ret:
    14 00004546 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1486                              <1> .somBad:
  1487 00004547 5B                  <1>     pop rbx
  1488 00004548 B80C000000          <1>     mov eax, errAccCde
  1489 0000454D F9                  <1>     stc
  1490                              <1>     return
    13                              <2> %%_ret:
    14 0000454E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1491                              <1> 
  1492                              <1> createNewMain:
  1493                              <1> ;Input: ax (formally al) = File attributes
  1494                              <1> ;       [currentSFT] = SFT we are building
  1495                              <1> ;       [workingCDS] = CDS of drive to access
  1496                              <1> ;       [workingDPB] = DPB of drive to access
  1497 0000454F 0FB6C0              <1>     movzx eax, al
  1498 00004552 B401                <1>     mov ah, 1    ;Tell redir to create new file
  1499 00004554 F605(04070000)FF    <1>     test byte [fileExist], -1
  1500 0000455B 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1501 0000455D B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1502 00004562 F9                  <1>     stc
  1503                              <1>     return
    13                              <2> %%_ret:
    14 00004563 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1504                              <1> createMain:
  1505                              <1> ;Input: ax (formally al) = File attributes
  1506                              <1> ;       [currentSFT] = SFT we are building
  1507                              <1> ;       [workingCDS] = CDS of drive to access
  1508                              <1> ;       [workingDPB] = DPB of drive to access
  1509 00004564 0FB6C0              <1>     movzx eax, al
  1510                              <1> .createNewEP:
  1511 00004567 A880                <1>     test al, 80h    ; Is this invalid bit set?
  1512 00004569 750C                <1>     jnz .invalidAttrib
  1513 0000456B A808                <1>     test al, attrFileVolLbl    ;Is this a volume label?
  1514 0000456D 7402                <1>     jz .notVol
  1515 0000456F B008                <1>     mov al, attrFileVolLbl ;If the vol bit is set, set the whole thing to volume only
  1516                              <1>     ;Set archive bit for new vol labels for incremental archivers to update
  1517                              <1> .notVol:
  1518 00004571 0C20                <1>     or al, attrFileArchive   ;Set archive bit
  1519 00004573 A850                <1>     test al, attrFileDir | attrFileChar   ;Invalid bits?
  1520 00004575 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1521                              <1> .invalidAttrib:
  1522 00004577 B805000000          <1>     mov eax, errAccDen
  1523 0000457C F9                  <1>     stc
  1524                              <1>     return
    13                              <2> %%_ret:
    14 0000457D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1525                              <1> .validAttr:
  1526                              <1> ;Check we are not creating a directory.
  1527 0000457E E8610B0000          <1>     call getCurrentSFT
  1528 00004583 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1529 0000458A 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1530 00004591 750A                <1>     jne .diskFile
  1531 00004593 50                  <1>     push rax    ;Save the new attributes
  1532 00004594 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1533 00004599 CD2F                <1>     int 2Fh
  1534 0000459B 5B                  <1>     pop rbx
  1535                              <1>     return
    13                              <2> %%_ret:
    14 0000459C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1536                              <1> .diskFile:
  1537 0000459D 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1538 000045A3 740A                <1>     jz .hardFile
  1539 000045A5 50                  <1>     push rax    ;Save the new attributes
  1540 000045A6 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1541 000045AB CD2F                <1>     int 2Fh
  1542 000045AD 5B                  <1>     pop rbx
  1543                              <1>     return
    13                              <2> %%_ret:
    14 000045AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1544                              <1> .hardFile:
  1545 000045AF 66814F020200        <1>     or word [rdi + sft.wOpenMode], openRWAcc ;Set R/W access when creating file
  1546 000045B5 C605(07070000)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1547                              <1>     ;mov byte [delChar], 0E5h
  1548 000045BC E89D330000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1549 000045C1 57                  <1>     push rdi    ;Save the sft handle
  1550 000045C2 50                  <1>     push rax    ;Save the file attributes on stack
  1551 000045C3 B802000000          <1>     mov eax, openRWAcc | openCompat ;Set open mode
  1552 000045C8 E84B000000          <1>     call buildSFTEntry
  1553 000045CD 5B                  <1>     pop rbx ;Pop the file attribute off
  1554 000045CE 5F                  <1>     pop rdi
  1555 000045CF 7241                <1>     jc .errorExit
  1556 000045D1 E8993C0000          <1>     call shareFile  ;Puts an sft handle in rdi, preserves rbx
  1557 000045D6 723A                <1>     jc .errorExit
  1558 000045D8 F6C308              <1>     test bl, attrFileVolLbl    ;Was the attribute a volume label?
  1559 000045DB 7420                <1>     jz .notVolLabel    ;If not vol label, skip.
  1560                              <1> ; Treat volume label creation case here. Rebuild DPB.
  1561 000045DD 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]    ;Get the CDS ptr for getDiskDPB
  1562 000045E4 8A07                <1>     mov al, byte [rdi]     ;Get the drive letter
  1563 000045E6 2C41                <1>     sub al, "A"            ;Convert to a 0 based number
  1564 000045E8 8805(E1190000)      <1>     mov byte [rebuildDrv], al  ;Set the volid rebuild var
  1565 000045EE E86B330000          <1>     call dosCrit1Enter
  1566 000045F3 E8A22B0000          <1>     call getDiskDPB        ;Rebuild DPB and clear var
  1567 000045F8 E86B330000          <1>     call dosCrit1Exit
  1568                              <1> .notVolLabel:
  1569 000045FD B802000000          <1>     mov eax, 2  ;Needed for the SHARE call
  1570 00004602 FF15(2F010000)      <1>     call qword [updateDirShare]
  1571 00004608 E85B330000          <1>     call dosCrit1Exit
  1572 0000460D E9E1FEFFFF          <1>     jmp openDriverMux
  1573                              <1> .errorExit:
  1574 00004612 E851330000          <1>     call dosCrit1Exit
  1575                              <1>     return
    13                              <2> %%_ret:
    14 00004617 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1576                              <1> buildSFTEntry:
  1577                              <1> ;Called in a critical section.
  1578                              <1> ;Input: al = Open mode
  1579                              <1> ;       STACK: File attributes if creating a file
  1580                              <1> ;       [currentSFT] = SFT we are building
  1581                              <1> ;       [workingCDS] = CDS of drive to access
  1582                              <1> ;       [workingDPB] = DPB of drive to access
  1583                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1584                              <1> ;       If creating, delChar must be set to 0E5h. Not needed for opening!
  1585                              <1> ;
  1586                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1587                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1588                              <1> ;        If CF=CY: - Return fail
  1589                              <1> ;
  1590                              <1> ;
  1591                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1592                              <1> ;   If not, create disk entry.
  1593                              <1> ;Check if the device was a char device by checking curDirCopy.
  1594                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1595                              <1> 
  1596                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1597                              <1> ; to start of file fields of the SFT
  1598 00004618 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1599 00004619 4889E5              <1>     mov rbp, rsp
  1600 0000461C 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1601                              <1> ;Set the open mode
  1602 00004623 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1603                              <1> ;Get current time
  1604 00004627 E801EAFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1605 0000462C E8E7EAFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1606 00004631 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1607                              <1> ;Set current Owner
  1608 00004634 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1609 0000463B 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1610                              <1> ;Set file pointer to first byte
  1611 0000463F C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1612                              <1> ;Common fields set
  1613 00004646 F605(07070000)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1614 0000464D 0F84C4010000        <1>     jz .openProc
  1615                              <1>     ;Here if Creating a file.
  1616                              <1>     ;First check if we are handling a volume label
  1617 00004653 48F7451008000000    <1>     test qword [rbp + 10h], attrFileVolLbl  ;Are we creating a volume label?
  1618 0000465B 7427                <1>     jz .notVolLbl   ;Bit not set? Jump!
  1619 0000465D 56                  <1>     push rsi
  1620 0000465E 57                  <1>     push rdi
  1621 0000465F 55                  <1>     push rbp
  1622 00004660 C605(5F040000)FF    <1>     mov byte [volIdFlag], -1    ;Set the volid search bit
  1623 00004667 E88DCBFFFF          <1>     call searchDir  ;Searches the root dir
  1624 0000466C C605(5F040000)00    <1>     mov byte [volIdFlag], 0     ;We are done searching for volid
  1625 00004673 5D                  <1>     pop rbp
  1626 00004674 5F                  <1>     pop rdi
  1627 00004675 5E                  <1>     pop rsi
  1628 00004676 0F83EB010000        <1>     jnc .badBuildSFTAccDen ;If CF=NC, then we have found a vollbl, fail.
  1629 0000467C 3C12                <1>     cmp al, errNoFil
  1630 0000467E 0F85E3010000        <1>     jne .badBuildSFTAccDen ;If not "no file found", error out
  1631                              <1> .notVolLbl:
  1632 00004684 F605(04070000)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1633 0000468B 0F84D5000000        <1>     jz .createFile
  1634 00004691 F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1635 00004698 0F8582010000        <1>     jnz .charDev    ;If its valid, just reopens it!
  1636 0000469E F605(65060000)11    <1>     test byte [curDirCopy + fatDirEntry.attribute], attrFileDir | dirReadOnly
  1637 000046A5 0F85BC010000        <1>     jnz .badBuildSFTAccDen    ;Cant recreate a dir or ro file!
  1638                              <1>     ;Here disk file exists, so recreating the file.
  1639 000046AB 55                  <1>     push rbp
  1640 000046AC FF35(32070000)      <1>     push qword [currentSFT]
  1641 000046B2 E83DFDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1642 000046B7 8F05(32070000)      <1>     pop qword [currentSFT]
  1643 000046BD 5D                  <1>     pop rbp
  1644 000046BE 0F82A3010000        <1>     jc .badBuildSFTAccDen
  1645                              <1>     ;al has the char for the filename
  1646                              <1>     ;Sets vars for the sector/offset into the sector
  1647 000046C4 E81B0A0000          <1>     call getCurrentSFT
  1648 000046C9 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1649 000046CB 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1650                              <1>     ;al has file attributes.
  1651 000046CF 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1652 000046D2 31C0                <1>     xor eax, eax
  1653                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1654 000046D4 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1655 000046D8 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1656 000046DC 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1657 000046DF 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1658 000046E2 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1659 000046E5 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1660 000046E8 57                  <1>     push rdi    ;Save SFT pointer
  1661 000046E9 488D3D(5A060000)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1662 000046F0 B920000000          <1>     mov ecx, fatDirEntry_size
  1663 000046F5 F3A4                <1>     rep movsb
  1664 000046F7 E809C2FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1665 000046FC 5F                  <1>     pop rdi
  1666                              <1> .createCommon:  ;rdi must point to the current SFT 
  1667                              <1>     ;Now populate the remaining SFT fields 
  1668 000046FD 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1669 00004704 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1670 00004707 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1671 0000470A 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1672 00004711 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1673 00004715 0FB705(4E070000)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1674 0000471C C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1675 0000471F 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1676 00004722 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1677 00004725 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1678 00004728 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1679 0000472C 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1680 00004730 C1E210              <1>     shl edx, 10h
  1681 00004733 09D0                <1>     or eax, edx
  1682 00004735 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1683                              <1> 
  1684 00004738 31C0                <1>     xor eax, eax
  1685                              <1> ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1686 0000473A 8A05(09070000)      <1>     mov al, byte [workingDrv]
  1687 00004740 0C40                <1>     or al, devDiskNoFlush  ;Dont flush until it is accessed
  1688 00004742 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1689 00004746 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
  1690 0000474D 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1691                              <1>     ;Last thing, copy the filename over
  1692                              <1>     ;Now save the name
  1693                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1694 00004751 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1695 00004755 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1696 0000475C 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1697 0000475E 66A5                <1>     movsw
  1698 00004760 A4                  <1>     movsb
  1699                              <1>     ;SFT filled
  1700 00004761 E9F8000000          <1>     jmp .exitBuildSFT
  1701                              <1> .createFile:
  1702                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1703                              <1>     ;rsi points to current sft entry
  1704 00004766 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1705                              <1>     ;Clear out the dir entry
  1706 0000476D 57                  <1>     push rdi
  1707 0000476E B904000000          <1>     mov ecx, 4
  1708 00004773 31C0                <1>     xor eax, eax
  1709 00004775 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1710 00004778 5F                  <1>     pop rdi
  1711                              <1>     ;Copy the FCB name over    
  1712 00004779 56                  <1>     push rsi
  1713 0000477A 57                  <1>     push rdi
  1714 0000477B B90B000000          <1>     mov ecx, 11
  1715 00004780 488D35(D9060000)    <1>     lea rsi, fcbName
  1716 00004787 F3A4                <1>     rep movsb   ;Move over the FCB name
  1717 00004789 5F                  <1>     pop rdi
  1718 0000478A 5E                  <1>     pop rsi
  1719                              <1> 
  1720 0000478B 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1721                              <1>     ;al has file attributes.
  1722 0000478F 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1723 00004792 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1724 00004795 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1725 00004798 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1726 0000479B 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1727                              <1> .searchForDirSpace:
  1728 000047A1 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1729 000047A7 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1730 000047A9 668905(83070000)    <1>     mov word [dirSect], ax
  1731 000047B0 8905(85070000)      <1>     mov dword [dirEntry], eax
  1732 000047B6 57                  <1>     push rdi
  1733                              <1> ;Needs delChar setup. We only come here for creates so already setup!
  1734 000047B7 E856DCFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1735 000047BC 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1736 000047BD 7328                <1>     jnc .dirEntryFnd
  1737 000047BF 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1737 000047C7 0000                <1>
  1738 000047C9 0F8498000000        <1>     je .badBuildSFTAccDen ;Set CF and exit
  1739 000047CF E82BDDFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1740 000047D4 0F8292000000        <1>     jc .badBuildSFTOwnErr
  1741 000047DA 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1742 000047DF 0F8482000000        <1>     je .badBuildSFTAccDen
  1743                              <1>     ;Else eax = Newly allocated cluster
  1744 000047E5 EBBA                <1>     jmp short .searchForDirSpace
  1745                              <1> .dirEntryFnd:
  1746 000047E7 4887FE              <1>     xchg rdi, rsi
  1747 000047EA B904000000          <1>     mov ecx, 4
  1748 000047EF F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1749 000047F2 E80EC1FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1750 000047F7 E8E8080000          <1>     call getCurrentSFT
  1751 000047FC E9FCFEFFFF          <1>     jmp .createCommon
  1752                              <1> .open:
  1753                              <1> ;curdircopy has a copy of the disk file directory
  1754                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1755 00004801 E8DE080000          <1>     call getCurrentSFT
  1756 00004806 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1757                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1758 0000480D E814DCFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1759 00004812 E9E6FEFFFF          <1>     jmp .createCommon
  1760                              <1> .openProc:
  1761                              <1>     ;Here if Opening a file. 
  1762                              <1>     ;Dirs cannot be opened through open, only for renaming.
  1763                              <1>     ;This is taken care of by openMain.
  1764 00004817 F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  1765 0000481E 74E1                <1>     jz .open
  1766                              <1> .charDev:
  1767 00004820 488B05(5A060000)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1768 00004827 E8762F0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1769 0000482C 7239                <1>     jc .badBuildSFTAccDen
  1770 0000482E 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1771 00004835 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1772 00004839 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1773 0000483D 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1774 00004840 80CBC0              <1>     or bl, devCharDev | devCharNotEOF ;Set charDev & noEOF on read
  1775 00004843 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1776 00004847 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1777 0000484E 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1778 00004852 B820202020          <1>     mov eax, "    "
  1779 00004857 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1780 0000485B 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1781                              <1> .exitBuildSFT:
  1782 0000485E E88B0A0000          <1>     call writeThroughBuffersForHandle
  1783 00004863 7207                <1>     jc .badBuildSFTOwnErr
  1784 00004865 5D                  <1>     pop rbp
  1785                              <1>     return
    13                              <2> %%_ret:
    14 00004866 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1786                              <1> .badBuildSFTAccDen:   ;Set Access Denied
  1787 00004867 B805000000          <1>     mov eax, errAccDen
  1788                              <1> .badBuildSFTOwnErr:  ;Error propagating error code
  1789 0000486C F9                  <1>     stc
  1790 0000486D 5D                  <1>     pop rbp
  1791                              <1>     return
    13                              <2> %%_ret:
    14 0000486E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1792                              <1> closeMain: ;Int 2Fh AX=1201h
  1793                              <1> ;Gets the directory entry for a file
  1794                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1795                              <1> ;If CF=CY on return: Error, return error with al = error code
  1796                              <1> ;Preserve all regs except eax and rdi
  1797                              <1> ; If CF=NC on return: eax = Unknown
  1798                              <1> ;                     rdi = current SFT ptr
  1799 0000486F E870080000          <1>     call getCurrentSFT ;Get the sft pointer
  1800 00004874 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1801 00004878 F7C300800000        <1>     test ebx, devRedir ;Is this a network drive?
  1802 0000487E 7408                <1>     jz .physical
  1803                              <1>     ;Here we beep out the request to the network redirector (Int 2Fh AX=1106h)
  1804 00004880 B806110000          <1>     mov eax, 1106h  ;Make request
  1805 00004885 CD2F                <1>     int 2Fh ;Beep!
  1806                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 00004887 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1807                              <1> .physical:  
  1808                              <1> ; We make a request to the dev dir to close the device
  1809                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1810 00004888 E8D1300000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1811 0000488D E805DCFFFF          <1>     call updateSFTDateTimeFields
  1812 00004892 E8480A0000          <1>     call decrementOpenCount ;rdi = current SFT, returns (e)ax = old handle count
  1813 00004897 50                  <1>     push rax
  1814 00004898 53                  <1>     push rbx
  1815 00004899 E865390000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1816 0000489E 5B                  <1>     pop rbx
  1817 0000489F 58                  <1>     pop rax
  1818                              <1> flushFile:  ;Make this non-local to be jumped to by commit too!
  1819                              <1> ;Updates the Dir entry with info from SFT and flushes.
  1820                              <1> ;Closes the handle properly if only one reference to file remains.
  1821                              <1> ;Input: ax = Initial open handle count
  1822                              <1> ;       bx = device info from the SFT
  1823                              <1> ;       rdi -> Current SFT
  1824 000048A0 50                  <1>     push rax    ;Save the handle count for later
  1825 000048A1 66F7C3C000          <1>     test bx, devDiskNoFlush | devCharDev
  1826 000048A6 7577                <1>     jnz .notDiskBitsSet
  1827 000048A8 E81CDCFFFF          <1>     call getAndUpdateDirSectorForFile   ;rsi -> Buffer dir entry
  1828 000048AD B805000000          <1>     mov eax, errAccDen
  1829 000048B2 726C                <1>     jc .accDenExit
  1830 000048B4 56                  <1>     push rsi    ; -> Buffer dir entry
  1831 000048B5 57                  <1>     push rdi    ; -> SFT ptr
  1832 000048B6 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]    ;Ensure this is the right file
  1833 000048BA E81ACBFFFF          <1>     call findInBuffer.nameCompare
  1834 000048BF 5F                  <1>     pop rdi     ; -> SFT ptr
  1835 000048C0 5E                  <1>     pop rsi     ; -> Buffer dir entry
  1836 000048C1 7408                <1>     jz .dirEntryForUs
  1837                              <1> .badFileFound:
  1838 000048C3 B802000000          <1>     mov eax, errFnf ;Dir entry has changed, and now file not found on medium
  1839 000048C8 F9                  <1>     stc
  1840 000048C9 EB55                <1>     jmp short .accDenExit
  1841                              <1> .dirEntryForUs:
  1842 000048CB 0FB64E0B            <1>     movzx ecx, byte [rsi + fatDirEntry.attribute] ;Get dir file attrib
  1843 000048CF 0FB64704            <1>     movzx eax, byte [rdi + sft.bFileAttrib]   ;Get SFT file attrib
  1844 000048D3 F6D0                <1>     not al  ;Reverse the bits
  1845 000048D5 20C8                <1>     and al, cl  ;These should be equal
  1846 000048D7 2416                <1>     and al, dirInclusive ;And nothing outside of these should be set
  1847 000048D9 75E8                <1>     jnz .badFileFound
  1848                              <1>     
  1849 000048DB 804E0B20            <1>     or byte [rsi + fatDirEntry.attribute], dirArchive   ;File changed!
  1850 000048DF 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
  1851 000048E2 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax ;And update field
  1852 000048E5 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
  1853 000048E9 66894616            <1>     mov word [rsi + fatDirEntry.wrtTime], ax    ;And update field
  1854 000048ED 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
  1855 000048F1 66894618            <1>     mov word [rsi + fatDirEntry.wrtDate], ax    ;And update field
  1856 000048F5 66894612            <1>     mov word [rsi + fatDirEntry.lastAccDat], ax ;Partialy implemented
  1857 000048F9 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
  1858 000048FC 6689461A            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusLo], ax
  1859 00004900 C1E810              <1>     shr eax, 10h
  1860 00004903 66894614            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusHi], ax
  1861 00004907 E8F9BFFFFF          <1>     call markBufferDirty
  1862 0000490C 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]
  1863 00004913 E88DBEFFFF          <1>     call flushAllBuffersForDrive
  1864 00004918 B805000000          <1>     mov eax, errAccDen
  1865 0000491D 7201                <1>     jc .accDenExit
  1866                              <1> .notDiskBitsSet:
  1867 0000491F F8                  <1>     clc
  1868                              <1> .accDenExit:
  1869 00004920 9C                  <1>     pushfq
  1870 00004921 E8BADDFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1871 00004926 9D                  <1>     popfq
  1872 00004927 59                  <1>     pop rcx ;Get back the initial open handle count
  1873 00004928 0FB7C9              <1>     movzx ecx, cx   ;Force upper bits clear
  1874 0000492B 9C                  <1>     pushfq
  1875 0000492C FFC9                <1>     dec ecx ;Decrement count
  1876 0000492E 7503                <1>     jnz .exit   ;If our initial count was not 1, skip resetting the count since
  1877 00004930 66890F              <1>     mov word [rdi], cx ; decrementOpenCount didnt set it to -1
  1878                              <1> .exit:
  1879 00004933 9D                  <1>     popfq
  1880 00004934 E82F300000          <1>     call dosCrit1Exit
  1881                              <1>     return
    13                              <2> %%_ret:
    14 00004939 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1882                              <1> 
  1883                              <1> readBytes:
  1884                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1885                              <1> ;Input: ecx = Number of bytes to read
  1886                              <1> ;Output: ecx = Number of bytes read
  1887                              <1> ;Number of bytes read 
  1888                              <1> ;If CF=CY, return with error code in ax
  1889 0000493A E8A5070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1890 0000493F 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1891 00004943 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1892 00004945 3C01                <1>     cmp al, openWrAcc
  1893 00004947 7509                <1>     jne .readable
  1894 00004949 B805000000          <1>     mov eax, errAccDen
  1895 0000494E 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1896 00004950 F9                  <1>     stc
  1897                              <1>     return
    13                              <2> %%_ret:
    14 00004951 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1898                              <1> .readable:
  1899 00004952 E8D1070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1900 00004957 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1901 0000495A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
  1902 00004960 740A                <1>     jz .notRedir
  1903 00004962 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1904 00004967 CD2F                <1>     int 2Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1905                              <1>     return 
    13                              <2> %%_ret:
    14 00004969 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1906                              <1> .exitOk:
  1907 0000496A F8                  <1>     clc
  1908                              <1>     return 
    13                              <2> %%_ret:
    14 0000496B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1909                              <1> .notRedir:
  1910 0000496C 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1911 00004972 7510                <1>     jnz readCharDev
  1912 00004974 E8E52F0000          <1>     call dosCrit1Enter
  1913 00004979 E89C010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1914 0000497E E8E52F0000          <1>     call dosCrit1Exit
  1915                              <1>     return 
    13                              <2> %%_ret:
    14 00004983 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1916                              <1> readCharDev:
  1917                              <1> ;rdi points to sft for char dev to read
  1918                              <1> ;ecx has the number of bytes to transfer
  1919                              <1> ;Vars have been set up and DTA has the transfer address
  1920                              <1> ;Returns in ecx, the actual bytes transferred
  1921                              <1> ;If CF=CY, return with error code in ax
  1922 00004984 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1923 0000498B 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1924 0000498F 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1925 00004996 F6C340              <1>     test bl, devCharNotEOF     ;Does our device generate EOF's on reads?
  1926 00004999 0F84C8020000        <1>     jz charReadExitOk       ;If it does, jump to exit as if EOF has been hit
  1927 0000499F F6C304              <1>     test bl, devCharNulDev  ;Is our device the NUL device?
  1928 000049A2 7407                <1>     jz .notNul
  1929                              <1>     ;If it is a new NUL device hdl, we can simply return!
  1930                              <1>     ;NUL never transfers bytes and now clears this bit to indicate EOF
  1931 000049A4 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1932 000049A6 E9BC020000          <1>     jmp charReadExitOk    ;Goto exit
  1933                              <1> .notNul:
  1934 000049AB F6C320              <1>     test bl, devCharBinary
  1935 000049AE 0F857F000000        <1>     jnz .binary
  1936                              <1>     ;Here if the device is in ASCII mode
  1937 000049B4 F6C301              <1>     test bl, devCharConIn   ;Is this device STDIN?
  1938 000049B7 0F84D6000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1939                              <1> .consoleInput:
  1940                              <1>     ;Console input here
  1941 000049BD E81DE2FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1942                              <1>     ;Get current offset into buffer (if one exists)
  1943 000049C2 488B35(2B000000)    <1>     mov rsi, qword [vConHdlOff]
  1944 000049C9 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1945 000049CC 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1946 000049CE 803D(4E030000)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1947 000049D5 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1948                              <1>     ;Else, reset the buffer
  1949 000049D7 66C705(4E030000)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1949 000049DF FF                  <1>
  1950                              <1> .oldBuf:
  1951                              <1> ;Preserve the dta and number of chars to tfr
  1952 000049E0 51                  <1>     push rcx
  1953 000049E1 57                  <1>     push rdi
  1954 000049E2 488D15(4E030000)    <1>     lea rdx, vConInBuf
  1955 000049E9 E80FE2FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1956 000049EE 5F                  <1>     pop rdi
  1957 000049EF 59                  <1>     pop rcx
  1958 000049F0 488D35(50030000)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1959 000049F7 803E1A              <1>     cmp byte [rsi], EOF
  1960 000049FA 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1961 000049FC C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1962 000049FF B00A                <1>     mov al, LF
  1963 00004A01 E867DDFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1964 00004A06 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1965 00004A08 EB18                <1>     jmp short .exit
  1966                              <1> .tfrBuf:
  1967 00004A0A AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1968 00004A0B AA                  <1>     stosb
  1969 00004A0C 3C0D                <1>     cmp al, CR 
  1970 00004A0E 7503                <1>     jne .noCRLF
  1971 00004A10 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1972                              <1> .noCRLF:
  1973 00004A13 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1974 00004A15 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1975 00004A17 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1976                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1977 00004A19 E84FDDFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1978 00004A1E 31F6                <1>     xor esi, esi
  1979 00004A20 0C01                <1>     or al, 1    ;Set ZF = NZ
  1980                              <1> .exit:
  1981 00004A22 E8CEE1FFFF          <1>     call vConRetDriver
  1982 00004A27 488935(2B000000)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1983                              <1>     ;Only return with ZF=ZE if first char in buffer was EOF
  1984 00004A2E E934020000          <1>     jmp charReadExitOk    ;Exit ok! ecx has # chars tfred
  1985                              <1> 
  1986                              <1> .binary:
  1987                              <1>     ;Setup registers for transfer
  1988 00004A33 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1989 00004A36 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1990                              <1>     ;ecx has the number of bytes to transfer directly
  1991 00004A39 E832290000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1992 00004A3E 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1993 00004A45 E8DE250000          <1>     call goDriver   ;Make the request
  1994 00004A4A 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1995 00004A4D 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status] ;Get status word in di
  1996 00004A54 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1997 00004A5A 7420                <1>     jz .binNoError
  1998                              <1>     ;ERROR HERE! Prepare for Int 24h (if SFT allows us to issue Int 24h)
  1999 00004A5C B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  2000 00004A5E E8AF1F0000          <1>     call charDevErr   ;ah = has part of the error 
  2001                              <1>     ;al now has the response
  2002 00004A63 3C00                <1>     cmp al, critIgnore
  2003 00004A65 7415                <1>     je .binNoError ;Simply proceed as normal
  2004 00004A67 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  2005 00004A6A 3C03                <1>     cmp al, critFail
  2006 00004A6C 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  2007                              <1>     ;Fallthrough here for fail!
  2008                              <1> .failExit:
  2009 00004A6E E871060000          <1>     call getCurrentSFT
  2010 00004A73 31C9                <1>     xor ecx, ecx
  2011 00004A75 B805000000          <1>     mov eax, errAccDen
  2012 00004A7A F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  2013                              <1>     return
    13                              <2> %%_ret:
    14 00004A7B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2014                              <1> .binNoError:
  2015                              <1>     ;Get number of bytes transferred into 
  2016 00004A7C 8B05(D7040000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]   ;Get bytes transferred
  2017 00004A82 F7D8                <1>     neg eax ;make it into -eax
  2018 00004A84 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  2019                              <1>     ;ecx now has bytes left to transfer
  2020 00004A88 50                  <1>     push rax    ;Save value on stack
  2021 00004A89 31C0                <1>     xor eax, eax ;Set ZF
  2022 00004A8B FFC0                <1>     inc eax ;Clear ZF
  2023 00004A8D 58                  <1>     pop rax ;Get back the original value
  2024 00004A8E E9D4010000          <1>     jmp charReadExitOk    ;GoExit with ecx=Bytes left to read. ZF=NZ always
  2025                              <1> .generalASCII:
  2026                              <1>     ;ecx has bytes to transfer here
  2027                              <1>     ;Setup registers for transfer
  2028 00004A93 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  2029 00004A96 51                  <1>     push rcx
  2030 00004A97 B901000000          <1>     mov ecx, 1  ;Get one char
  2031 00004A9C 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2032 00004A9F E8CC280000          <1>     call primReqReadSetup   ;Setup request
  2033 00004AA4 59                  <1>     pop rcx
  2034                              <1>     ;rbx now has request header ptr
  2035 00004AA5 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  2036                              <1> .asciiReadChar:
  2037 00004AAC 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  2038 00004AAF E8AEE0FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  2039 00004AB4 E86F250000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  2040 00004AB9 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status] ;Get status word in di
  2041 00004AC0 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  2042 00004AC6 7420                <1>     jz .asciiNoError
  2043 00004AC8 B486                <1>     mov ah, critCharDev | critData
  2044 00004ACA E8431F0000          <1>     call charDevErr    ;Call Int 24h, ecx preserved
  2045                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  2046 00004ACF C705(D7040000)0100- <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], 1
  2046 00004AD7 0000                <1>
  2047 00004AD9 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  2048 00004ADC 3C03                <1>     cmp al, critFail
  2049 00004ADE 748E                <1>     je .failExit
  2050 00004AE0 3C01                <1>     cmp al, critRetry
  2051 00004AE2 74C8                <1>     je .asciiReadChar
  2052                              <1>     ;Ignore here, pretend NULL CHAR was read
  2053 00004AE4 30C0                <1>     xor al, al
  2054 00004AE6 EB15                <1>     jmp short .asciiIgnoreEP
  2055                              <1> .asciiNoError:
  2056                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  2057                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  2058                              <1> ;Preserve RBX, RSI
  2059                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  2060 00004AE8 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  2061 00004AEB 813D(D7040000)0100- <1>     cmp dword [primReqPkt + ioReqPkt.tfrlen], 1
  2061 00004AF3 0000                <1>
  2062 00004AF5 0F856C010000        <1>     jne charReadExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  2063 00004AFB 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  2064                              <1> .asciiIgnoreEP:
  2065 00004AFD 48FF05(CF040000)    <1>     inc qword [primReqPkt + ioReqPkt.bufptr]   ;Goto next char position
  2066 00004B04 48FFC7              <1>     inc rdi ;Also advance register pointer
  2067 00004B07 3C1A                <1>     cmp al, EOF ;Was the char just read EOF?
  2068 00004B09 0F8458010000        <1>     je charReadExitOk   ;Exit if so!
  2069 00004B0F 3C0D                <1>     cmp al, CR  ;Was this char CR?
  2070 00004B11 E099                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  2071                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  2072 00004B13 FEC0                <1>     inc al  ;make ZF=NZ
  2073 00004B15 E94D010000          <1>     jmp charReadExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  2074                              <1> 
  2075                              <1> readDiskFile:
  2076                              <1> ;rdi = Current SFT
  2077                              <1> ;rbp = WorkingDPB
  2078                              <1> ;ecx = Bytes to transfer
  2079 00004B1A C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  2080 00004B21 C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Read operation
  2081                              <1>     ;We have the following vars setup:
  2082                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  2083                              <1>     ;currClustF
  2084                              <1>     ;Now convert currSectC to disk sector by using currClustF
  2085                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  2086 00004B28 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  2087 00004B2B 85D2                <1>     test edx, edx
  2088 00004B2D 0F843F010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  2089 00004B33 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2090 00004B39 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  2091 00004B3C 8905(54070000)      <1>     mov dword [currClustD], eax
  2092 00004B42 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  2093 00004B44 0F8428010000        <1>     jz readExitOk
  2094 00004B4A 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  2095 00004B4F 0F841D010000        <1>     jz readExitOk   
  2096 00004B55 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  2097                              <1>     ;Check if we have opened a volume label (should never happen)
  2098 00004B5B F6470408            <1>     test byte [rdi + sft.bFileAttrib], attrFileVolLbl    ;If we try read from vollbl
  2099 00004B5F 7407                <1>     jz .shareCheck
  2100 00004B61 B805000000          <1>     mov eax, errAccDen
  2101 00004B66 F9                  <1>     stc
  2102                              <1>     return
    13                              <2> %%_ret:
    14 00004B67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2103                              <1> .shareCheck:
  2104                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  2105 00004B68 E89D360000          <1>     call retryShareIODelay
  2106 00004B6D 7308                <1>     jnc .shareOk
  2107 00004B6F E834370000          <1>     call shareCheckReadLockViolation
  2108 00004B74 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  2109                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 00004B76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2110                              <1> .shareOk:
  2111 00004B77 E8CABBFFFF          <1>     call markBuffersAsUnreferencedWrapper
  2112 00004B7C 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  2113 00004B7E 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  2114 00004B80 7426                <1>     jz .skipWalk
  2115                              <1> .goToCurrentCluster:
  2116 00004B82 E8FCC1FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2117 00004B87 0F82CB000000        <1>     jc .readBadExit   ;This can only return Fail
  2118 00004B8D 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  2119 00004B92 0F84DA000000        <1>     je readExitOk ;Exit with no bytes transferred
  2120 00004B98 8905(54070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2121 00004B9E FFCA                <1>     dec edx ;Decrement counter
  2122 00004BA0 75E0                <1>     jnz .goToCurrentCluster
  2123 00004BA2 8B05(54070000)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  2124                              <1> .skipWalk:
  2125 00004BA8 E844BFFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2126                              <1>     ;Now we add the offset to this
  2127 00004BAD 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2128 00004BB4 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2129 00004BB7 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2130                              <1> ;Main
  2131                              <1> .mainRead:
  2132 00004BBE E8BB000000          <1>     call diskIOGetBuffer
  2133 00004BC3 0F828F000000        <1>     jc .readBadExit
  2134 00004BC9 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  2135 00004BCD 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2136 00004BD4 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  2137                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2138                              <1>     ; 1) Bytes left in sector size, 2) Bytes left in File, 
  2139                              <1>     ; 3) Bytes left to read from Request
  2140                              <1> 
  2141 00004BD7 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  2142 00004BDA 2B0D(67070000)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  2143 00004BE0 8B1D(77070000)      <1>     mov ebx, dword [tfrCntr]
  2144 00004BE6 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  2145 00004BE8 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  2146 00004BEB 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  2147 00004BEF 662B1D(65070000)    <1>     sub bx, word [currByteS]    ;Remove the number of bytes into the sector we are
  2148 00004BF6 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  2149 00004BF8 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  2150                              <1>     
  2151 00004BFB 57                  <1>     push rdi
  2152 00004BFC 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
  2153 00004C03 51                  <1>     push rcx
  2154 00004C04 F3A4                <1>     rep movsb
  2155 00004C06 59                  <1>     pop rcx
  2156 00004C07 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2157 00004C0D 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2158 00004C13 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2159 00004C1A 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2160 00004C20 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2161 00004C24 31D2                <1>     xor edx, edx    ;Zero rdx
  2162 00004C26 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2163 00004C28 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2164 00004C2F 5F                  <1>     pop rdi
  2165 00004C30 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2166 00004C36 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2167 00004C38 7438                <1>     jz readExitOk ;Exit if so!
  2168 00004C3A E885C0FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  2169 00004C3F 7217                <1>     jc .readBadExit
  2170                              <1>     ;If ZF=ZE then currClustF has last cluster
  2171 00004C41 742F                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  2172                              <1>     ;Else repeat
  2173                              <1>     ;currSectD has been updated, we now set currByteS = 0
  2174 00004C43 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2174 00004C4B 00                  <1>
  2175 00004C4C 488B05(5D070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2176 00004C53 E966FFFFFF          <1>     jmp .mainRead
  2177                              <1> .readBadExit:
  2178                              <1>     ;When a disk error occurs within the bit where vars have changed,
  2179                              <1>     ; we need to update the SFT before returning
  2180 00004C58 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  2181 00004C5E 30C0                <1>     xor al, al  ;Set ZF flag
  2182 00004C60 E80D000000          <1>     call readExitOk   ;We call this
  2183 00004C65 F9                  <1>     stc ;All calls which end up here return Fail!
  2184                              <1>     return
    13                              <2> %%_ret:
    14 00004C66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2185                              <1> charReadExitOk:
  2186                              <1> ;Input: ecx = Number of bytes left to transfer!
  2187                              <1> ;       ZF=ZE => Ensure we reach "EOF" on char device!
  2188                              <1> ;       ZF=NZ => preserve bit 6
  2189 00004C67 7509                <1>     jnz readExitOk
  2190 00004C69 E876040000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  2191 00004C6E 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~devCharNotEOF ;Set that we at End of file!
  2192                              <1> readExitOk: ;Disk xfrs always go here. Binary char too but by bouncing!
  2193                              <1> ;Input: ecx = Number of bytes left to transfer! 
  2194 00004C72 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2195 00004C78 E86F040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2196                              <1>     return 
    13                              <2> %%_ret:
    14 00004C7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2197                              <1> 
  2198                              <1> diskIOGetBuffer:
  2199                              <1> ;If appropriate, checks if the user has typed a ^C at the console.
  2200                              <1> ; Then reads the specified sector into a buffer and returns a ptr to 
  2201                              <1> ; the buffer.
  2202                              <1> ;Input: rax = Sector to get buffer for. 
  2203                              <1> ;Output:  If CF=NC: rbx -> bufHdrptr with buffer filled with sector data
  2204                              <1> ;         Else: Error
  2205 00004C7E F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set
  2206 00004C85 7407                <1>     jz .skipBreak
  2207 00004C87 50                  <1>     push rax
  2208 00004C88 E8D5DEFFFF          <1>     call checkBreak
  2209 00004C8D 58                  <1>     pop rax
  2210                              <1> .skipBreak:
  2211 00004C8E E8DEBDFFFF          <1>     call getBufForData
  2212                              <1>     return
    13                              <2> %%_ret:
    14 00004C93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2213                              <1> 
  2214                              <1> writeBytes:
  2215                              <1> ;Writes the bytes from the user buffer
  2216                              <1> ;Input: ecx = Bytes to xfr
  2217                              <1> ;Returns number of bytes written in ecx if CF=NC
  2218 00004C94 E84B040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2219 00004C99 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2220 00004C9D 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2221 00004C9F 3C00                <1>     cmp al, openRdAcc
  2222 00004CA1 7509                <1>     jne .writeable
  2223                              <1> .noWrite:
  2224 00004CA3 B805000000          <1>     mov eax, errAccDen
  2225 00004CA8 31C9                <1>     xor ecx, ecx
  2226 00004CAA F9                  <1>     stc
  2227 00004CAB C3                  <1>     ret
  2228                              <1> .writeable:
  2229                              <1> ;FCB check file attributes since we can create an RO flag and write to it directly
  2230                              <1> ; but cannot open a read only file. This is redundant whilst we don't allow for 
  2231                              <1> ; FCB IO
  2232 00004CAC 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB
  2233 00004CB2 7406                <1>     jz .skipAttribCheck
  2234 00004CB4 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], attrFileRO
  2235 00004CB8 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2236                              <1> .skipAttribCheck:
  2237 00004CBA E869040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2238 00004CBF 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
  2239 00004CC5 7408                <1>     jz .notRedir
  2240 00004CC7 B809110000          <1>     mov eax, 1109h  ;Write to redir
  2241 00004CCC CD2F                <1>     int 2Fh
  2242                              <1>     return
    13                              <2> %%_ret:
    14 00004CCE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2243                              <1> .notRedir:
  2244 00004CCF 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2245 00004CD5 7510                <1>     jnz writeCharDev
  2246 00004CD7 E8822C0000          <1>     call dosCrit1Enter
  2247 00004CDC E84E010000          <1>     call writeDiskFile
  2248 00004CE1 E8822C0000          <1>     call dosCrit1Exit
  2249                              <1>     return
    13                              <2> %%_ret:
    14 00004CE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2250                              <1> writeCharDev:
  2251 00004CE7 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
  2252                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2253 00004CEE 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], devCharNotEOF
  2254 00004CF4 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2255                              <1>     ;If ecx = 0, we exit
  2256 00004CF8 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2257 00004CFA 85C9                <1>     test ecx, ecx
  2258 00004CFC 0F84CA030000        <1>     jz writeExitChar
  2259 00004D02 88D8                <1>     mov al, bl  ;Move the flags over
  2260 00004D04 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2261 00004D0B 4889DF              <1>     mov rdi, rbx
  2262 00004D0E 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2263 00004D10 A820                <1>     test al, devCharBinary
  2264 00004D12 744A                <1>     jz .asciiDev
  2265                              <1> ;Write binary transfer here
  2266                              <1> .binaryLp:
  2267 00004D14 31C0                <1>     xor eax, eax
  2268 00004D16 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2269 00004D19 E847260000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2270 00004D1E 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2271 00004D25 E8FA220000          <1>     call goDriverChar
  2272 00004D2A 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2273 00004D2D B487                <1>     mov ah, critCharDev | critData | critWrite
  2274 00004D2F 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status]  ;Get status word
  2275 00004D36 F7C700800000        <1>     test edi, drvErrStatus
  2276 00004D3C 7415                <1>     jz .binXfrOk
  2277 00004D3E E8CF1C0000          <1>     call charDevErr ;Invoke Int 24h
  2278 00004D43 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2279 00004D46 3C00                <1>     cmp al, critIgnore
  2280 00004D48 7409                <1>     je .binXfrOk
  2281 00004D4A 3C01                <1>     cmp al, critRetry
  2282 00004D4C 74C6                <1>     je .binaryLp
  2283 00004D4E E9D5000000          <1>     jmp .exitFail
  2284                              <1> .binXfrOk:
  2285 00004D53 8B05(D7040000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]
  2286 00004D59 E96E030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2287                              <1> .asciiDev:
  2288 00004D5E A802                <1>     test al, devCharConOut
  2289 00004D60 0F859E000000        <1>     jnz .conDev
  2290 00004D66 A804                <1>     test al, devCharNulDev
  2291 00004D68 0F858F000000        <1>     jnz .nulDev
  2292                              <1>     ;Here we transfer for a generic character device in ascii mode
  2293 00004D6E 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2294 00004D70 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2295 00004D73 0F8453030000        <1>     je writeExitChar
  2296 00004D79 51                  <1>     push rcx
  2297 00004D7A B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2298 00004D7F 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2299 00004D82 E8DE250000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2300 00004D87 59                  <1>     pop rcx
  2301 00004D88 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2302 00004D8F 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2303                              <1> .asciiLp:
  2304 00004D93 E8CADDFFFF          <1>     call checkBreak
  2305 00004D98 E88B220000          <1>     call goDriver
  2306 00004D9D 57                  <1>     push rdi
  2307 00004D9E B487                <1>     mov ah, critCharDev | critData | critWrite
  2308 00004DA0 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status]  ;Get status word
  2309 00004DA7 F7C700800000        <1>     test edi, drvErrStatus
  2310 00004DAD 741D                <1>     jz .asciiNoError
  2311 00004DAF E85E1C0000          <1>     call charDevErr ;Invoke Int 24h
  2312 00004DB4 5F                  <1>     pop rdi
  2313 00004DB5 C705(D7040000)0100- <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2313 00004DBD 0000                <1>
  2314 00004DBF 3C01                <1>     cmp al, critRetry
  2315 00004DC1 74D0                <1>     je .asciiLp
  2316 00004DC3 3C00                <1>     cmp al, critIgnore
  2317 00004DC5 7412                <1>     je .ignoreEp
  2318 00004DC7 E95C000000          <1>     jmp .exitFail
  2319                              <1> .asciiNoError:
  2320 00004DCC 5F                  <1>     pop rdi
  2321 00004DCD 813D(D7040000)0000- <1>     cmp dword [primReqPkt + ioReqPkt.tfrlen], 0
  2321 00004DD5 0000                <1>
  2322 00004DD7 741D                <1>     je .bytesXfrdOk
  2323                              <1> .ignoreEp:
  2324 00004DD9 FFC2                <1>     inc edx ;One more char has been xfrd
  2325 00004DDB FF05(CF040000)      <1>     inc dword [primReqPkt + ioReqPkt.bufptr]    ;Increment buffer ptr
  2326 00004DE1 48FFC7              <1>     inc rdi ;And our copy... 
  2327 00004DE4 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2328 00004DE7 740D                <1>     je .bytesXfrdOk
  2329 00004DE9 66C705(C4040000)00- <1>     mov word [primReqPkt + ioReqPkt.status], 0
  2329 00004DF1 00                  <1>
  2330 00004DF2 FFC9                <1>     dec ecx
  2331 00004DF4 759D                <1>     jnz .asciiLp
  2332                              <1> .bytesXfrdOk:
  2333 00004DF6 89D0                <1>     mov eax, edx
  2334 00004DF8 E9CF020000          <1>     jmp writeExitChar
  2335                              <1> .nulDev:
  2336 00004DFD 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2337 00004DFF E9C8020000          <1>     jmp writeExitChar
  2338                              <1> .conDev:
  2339 00004E04 E8D6DDFFFF          <1>     call vConSwapDriver
  2340 00004E09 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2341 00004E0C 51                  <1>     push rcx
  2342                              <1> .conDevLp:
  2343 00004E0D AC                  <1>     lodsb
  2344 00004E0E 3C1A                <1>     cmp al, EOF
  2345 00004E10 7409                <1>     je .conDevExit
  2346 00004E12 E856D9FFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2347 00004E17 FFC9                <1>     dec ecx
  2348 00004E19 75F2                <1>     jnz .conDevLp
  2349                              <1> .conDevExit:
  2350 00004E1B 58                  <1>     pop rax ;Get initial ecx back into eax
  2351 00004E1C 29C8                <1>     sub eax, ecx
  2352 00004E1E E8D2DDFFFF          <1>     call vConRetDriver
  2353 00004E23 E9A4020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2354                              <1> .exitFail:
  2355 00004E28 B805000000          <1>     mov eax, errAccDen
  2356 00004E2D F9                  <1>     stc
  2357                              <1>     return
    13                              <2> %%_ret:
    14 00004E2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2358                              <1> writeDiskFile:
  2359                              <1>     ;rdi has SFT ptr
  2360 00004E2F 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2361 00004E35 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk 
  2362 00004E3C C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Write operation
  2363 00004E43 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2364 00004E49 0F8530020000        <1>     jnz writeBadExit
  2365 00004E4F 85C9                <1>     test ecx, ecx
  2366 00004E51 7505                <1>     jnz .nonZeroWrite
  2367 00004E53 B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0, check for no locks
  2368                              <1> .nonZeroWrite:
  2369                              <1>     ;Now do share check here
  2370 00004E58 E8AD330000          <1>     call retryShareIODelay
  2371 00004E5D 730C                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2372 00004E5F E83B340000          <1>     call shareCheckWriteLockViolation
  2373 00004E64 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2374 00004E66 E914020000          <1>     jmp writeBadExit
  2375                              <1> .proceedWithWrite:
  2376                              <1> ;Ensure that we update the directory entry after this write
  2377 00004E6B 66816705BFBF        <1>     and word [rdi + sft.wDeviceInfo], ~(devCharNotEOF|devDiskNoDTonClose)
  2378                              <1> ;Ensure that all buffers are now unreferenced
  2379 00004E71 E8D0B8FFFF          <1>     call markBuffersAsUnreferencedWrapper
  2380 00004E76 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2381                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2382 00004E79 85C0                <1>     test eax, eax
  2383 00004E7B 7519                <1>     jnz .notStart
  2384 00004E7D E8ECBCFFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2385 00004E82 0F82F7010000        <1>     jc writeBadExit
  2386 00004E88 3DFFFFFFFF          <1>     cmp eax, -1         ;Disk full?
  2387 00004E8D 0F8481010000        <1>     je writeDiskFullExit
  2388                              <1>     ;Now eax has the first cluster of chain
  2389 00004E93 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2390                              <1> .notStart:
  2391                              <1> ;eax has the start cluster of the file
  2392                              <1> ;Now we go to CurntOff
  2393 00004E96 8905(54070000)      <1>     mov dword [currClustD], eax ;Store in var
  2394 00004E9C 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2395 00004EA2 85D2                <1>     test edx, edx   ;If the fileptr is in the first cluster, already there
  2396 00004EA4 744B                <1>     jz .atCluster
  2397 00004EA6 E89A000000          <1>     call .walkFAT   ;Walks the fat, gets the next cluster in eax
  2398 00004EAB 0F82CE010000        <1>     jc writeBadExit
  2399 00004EB1 3DFFFFFFFF          <1>     cmp eax, -1     ;Not EOC, eax = the cluster we need to be at
  2400 00004EB6 7539                <1>     jne .atCluster
  2401 00004EB8 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
  2402 00004EBF 7505                <1>     jne .haveFreeClustCnt
  2403 00004EC1 E883BDFFFF          <1>     call findFreeClusterData
  2404                              <1> .haveFreeClustCnt:
  2405 00004EC6 395531              <1>     cmp dword [rbp + dpb.dFreeClustCnt], edx
  2406 00004EC9 0F8245010000        <1>     jb writeDiskFullExit
  2407                              <1>     ;Here we know we have enough clusters to allocate to the file,
  2408                              <1>     ; so just roll with it. 
  2409 00004ECF 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get the current disk cluster 
  2410 00004ED5 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2411 00004ED7 89D1                <1>     mov ecx, edx    ;Allocate the remainder of clusters!
  2412 00004ED9 E8BFBCFFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2413 00004EDE 0F829B010000        <1>     jc writeBadExit
  2414 00004EE4 89D8                <1>     mov eax, ebx    ;Move the start sector for the walk back
  2415 00004EE6 E85A000000          <1>     call .walkFAT   ;Walks the fat, gets the next cluster in eax
  2416 00004EEB 0F828E010000        <1>     jc writeBadExit    
  2417                              <1> .atCluster:
  2418                              <1> ;Fall here with the sector number in eax
  2419 00004EF1 E8FBBBFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2420                              <1>     ;Now we add the offset to this
  2421 00004EF6 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2422 00004EFD 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2423 00004F00 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2424 00004F07 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2425 00004F0D 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2426 00004F0F 754F                <1>     jnz .mainWrite  
  2427                              <1> ;Here we have a zero byte write, so either truncate or have an extend.
  2428                              <1> ;Zero byte writes do not sanitise! Filesize=Filepointer in this case
  2429                              <1> ;CurrentOffset < Filesize means truncate. Else, we extend.
  2430 00004F11 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2431 00004F14 3B4717              <1>     cmp eax, dword [rdi + sft.dFileSize]
  2432 00004F17 7314                <1>     jae .extend
  2433                              <1> ;Here we truncate!
  2434 00004F19 8B05(54070000)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2435 00004F1F E8FEBDFFFF          <1>     call truncateFAT    ;Truncate from current cluster setting it to EOC
  2436 00004F24 0F8255010000        <1>     jc writeBadExit
  2437 00004F2A 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2438                              <1> .extend:
  2439 00004F2D 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2440                              <1> ;writeExitNoByte
  2441 00004F30 E8B7010000          <1>     call updateCurrentSFT   ;Update the cluster information in the SFT
  2442 00004F35 B802000000          <1>     mov eax, 2  ;Update all SFTs with the shrinking of the file
  2443 00004F3A FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2444 00004F40 E976010000          <1>     jmp writeDoCommit   ;Now check if we should do a commit, or just return
  2445                              <1> .walkFAT:
  2446                              <1> ;Subroutine used by WRITE
  2447                              <1> ;Input: eax = Cluster to start walking from
  2448                              <1> ;Output: If eax = -1: currClustD is the cluster we just read
  2449                              <1> ;        Else: currClustD = eax is the cluster value we are at
  2450                              <1> ;       edx = Number of clusters left (0 or #toAllocate)
  2451                              <1> ;If CF=CY, hard error, fail!
  2452 00004F45 E839BEFFFF          <1>     call readFAT
  2453                              <1>     retc    ;DO NOT REPLACE WITH JUMP TO ERROR HANDLER!!
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004F4A 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004F4C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2454 00004F4D 3DFFFFFFFF          <1>     cmp eax, -1 ;Is the next cluster an EOC?
  2455 00004F52 740A                <1>     je .wFatExit    ;Return if so
  2456 00004F54 8905(54070000)      <1>     mov dword [currClustD], eax     ;Else, save eax as current cluster
  2457 00004F5A FFCA                <1>     dec edx                         ;Decrement counter
  2458 00004F5C 75E7                <1>     jnz .walkFAT                    ;If we still have to walk, do it again!
  2459                              <1> .wFatExit:
  2460 00004F5E F8                  <1>     clc ;Dont remove, need this because of the compare above!!
  2461                              <1>     return
    13                              <2> %%_ret:
    14 00004F5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2462                              <1> .mainWrite:
  2463 00004F60 E819FDFFFF          <1>     call diskIOGetBuffer
  2464 00004F65 0F8214010000        <1>     jc writeBadExit
  2465 00004F6B 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2466 00004F6F 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2467 00004F76 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2468                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2469                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2470                              <1>     ; 3) Number of bytes left free in the sector
  2471 00004F79 31C0                <1>     xor eax, eax
  2472 00004F7B 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2473 00004F7F 89D8                <1>     mov eax, ebx
  2474 00004F81 662B05(65070000)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2475 00004F88 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]
  2476                              <1> 
  2477 00004F8E 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2478 00004F90 0F47CB              <1>     cmova ecx, ebx
  2479 00004F93 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2480 00004F95 0F47C8              <1>     cmova ecx, eax
  2481                              <1> 
  2482 00004F98 56                  <1>     push rsi
  2483 00004F99 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
  2484 00004FA0 51                  <1>     push rcx
  2485 00004FA1 F3A4                <1>     rep movsb
  2486 00004FA3 59                  <1>     pop rcx
  2487 00004FA4 E85CB9FFFF          <1>     call markBufferDirty   ;Preserves all CPU state, this buffer is now dirty
  2488                              <1> 
  2489 00004FA9 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2490 00004FAF 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2491 00004FB5 488935(17040000)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2492 00004FBC 5E                  <1>     pop rsi
  2493                              <1> 
  2494 00004FBD 8B05(73070000)      <1>     mov eax, dword [tfrLen] ;Get total length
  2495 00004FC3 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2496 00004FC9 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2497 00004FCB 0F84B7000000        <1>     jz writeExit
  2498 00004FD1 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2498 00004FD9 00                  <1>
  2499 00004FDA E8E5BCFFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2500 00004FDF 0F829A000000        <1>     jc writeBadExit
  2501 00004FE5 0F8575FFFFFF        <1>     jnz .mainWrite   ;Else, rax = Next sector to write to
  2502                              <1>     ;Here we need to extend by a cluster since we are at the end of the 
  2503                              <1>     ; current allocation chain
  2504 00004FEB 8B1D(54070000)      <1>     mov ebx, dword [currClustD] ;Setup last cluster value in ebx
  2505 00004FF1 B901000000          <1>     mov ecx, 1  ;Append one more cluster to it!
  2506 00004FF6 E8A2BBFFFF          <1>     call allocateClusters
  2507 00004FFB 0F827E000000        <1>     jc writeBadExit
  2508 00005001 3DFFFFFFFF          <1>     cmp eax, -1 ;If we cannot allocate any more clusters, disk full!
  2509 00005006 740C                <1>     je writeDiskFullExit  ;End write in this case!
  2510                              <1> ;Else we just allocated a new cluster to the chain, so we have a sector to 
  2511                              <1> ; write to! 
  2512                              <1> ;The cluster state has not changed due to the allocate clusters call.
  2513 00005008 E8B7BCFFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2514 0000500D 7270                <1>     jc writeBadExit
  2515 0000500F E94CFFFFFF          <1>     jmp .mainWrite    ;rax = Next sector to write to
  2516                              <1> writeDiskFullExit:
  2517 00005014 E8CB000000          <1>     call getCurrentSFT  ;Get SFT pointer into rdi
  2518 00005019 66F747050001        <1>     test word [rdi + sft.wDeviceInfo], devDiskI24onFull
  2519 0000501F 746C                <1>     jz writeExit.altEp  ;If no trigger Int 24h, return success. rdi -> SFT
  2520                              <1> ;Else trigger Int 24h.
  2521                              <1> ;Start by setting the allowed actions.
  2522                              <1> ;Due to the disk being full, we ONLY allow the user to Fail.
  2523 00005021 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]    ;Get drive number in al
  2524 00005028 0D000F0000          <1>     or eax, (critWrite | critData | critFailOK) << 8    ;Move to ah
  2525 0000502D 8825(68040000)      <1>     mov byte [Int24bitfld], ah  ;Store the bitfield var
  2526 00005033 66C705(0B040000)27- <1>     mov word [errorExCde], errDskFul
  2526 0000503B 00                  <1>
  2527 0000503C C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
  2528 00005043 C605(0D040000)04    <1>     mov byte [errorAction], eActAbt
  2529 0000504A C605(0E040000)01    <1>     mov byte [errorClass], eClsOoR
  2530 00005051 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save the DPB pointer here (if a disk file)
  2531 00005058 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2532 0000505E 750A                <1>     jnz .i24CharDev
  2533 00005060 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the DPB pointer from the SFT
  2534 00005064 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get Driver pointer
  2535 00005068 EB04                <1>     jmp short .i24Go
  2536                              <1> .i24CharDev:
  2537 0000506A 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the char drive pointer
  2538                              <1> .i24Go:
  2539 0000506E BF0C000000          <1>     mov edi, drvGenFault    ;Report general fault to driver
  2540 00005073 E8411A0000          <1>     call criticalDOSError   ;Trigger i24
  2541 00005078 B827000000          <1>     mov eax, errDskFul      ;and return to caller a disk full error
  2542 0000507D EB05                <1>     jmp short writeBadExit.diskFull
  2543                              <1> writeBadExit:
  2544 0000507F B805000000          <1>     mov eax, errAccDen      ;Normally return Access denied
  2545                              <1> .diskFull:
  2546                              <1> ;If we hard error in write we should return WITHOUT modifying the file
  2547                              <1> ; size information. Users should always follow a hard error on write with 
  2548                              <1> ; a zero byte write to ensure that any newly allocated FAT sectors are 
  2549                              <1> ; freed.
  2550 00005084 31C9                <1>     xor ecx, ecx
  2551 00005086 F9                  <1>     stc             
  2552                              <1>     return          ;Return CF=CY and eax = Original Error code
    13                              <2> %%_ret:
    14 00005087 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2553                              <1> 
  2554                              <1> writeExit:
  2555                              <1> ;Advances the bytes on the file pointer and commits file if opened to do so!
  2556                              <1> ;Return: ecx = Number of bytes transferred if CF=NC. Else, eax = Error code
  2557 00005088 E857000000          <1>     call getCurrentSFT  ;Get SFT in rdi
  2558                              <1> .altEp: ;Exits skipping getting the SFT
  2559 0000508D E85A000000          <1>     call updateCurrentSFT   ;Updates CurntOff in the SFT. Get xfr cnt in ecx
  2560 00005092 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2561                              <1>     retnz           ;Return if char dev. No commit possible here.
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00005098 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000509A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2562 0000509B 85C9                <1>     test ecx, ecx   ;If no bytes transferred, no growth to report!
  2563 0000509D 741C                <1>     jz writeDoCommit    ;But still commit any dirty buffers (ie for FAT growth)
  2564 0000509F 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~devDiskNoFlush ;File has been accessed
  2565                              <1> ;Now replace the filesize with the currentoffset if it is greater
  2566 000050A5 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2567 000050A8 394717              <1>     cmp dword [rdi + sft.dFileSize], eax    
  2568 000050AB 730E                <1>     jae writeDoCommit   ;If past the end of the file, update the file size!
  2569 000050AD 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2570 000050B0 B801000000          <1>     mov eax, 1  ;Update all SFTs with the growth of the file!
  2571 000050B5 FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2572                              <1> writeDoCommit:
  2573                              <1> ;Common good exit routine for write
  2574 000050BB 66F747020040        <1>     test word [rdi + sft.wOpenMode], openFlushWrites
  2575                              <1>     retz    ;If we don't flush on each write call, return here!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000050C1 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000050C3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2576 000050C4 51                  <1>     push rcx
  2577 000050C5 E8FFEDFFFF          <1>     call commitMain ;If this fails, return CF=CY and eax = Error code
  2578 000050CA 59                  <1>     pop rcx ;Else, ecx is preserved so return ecx = # bytes xfred
  2579                              <1>     return
    13                              <2> %%_ret:
    14 000050CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2580                              <1> writeExitChar:
  2581                              <1> ;Input: eax = Number of chars transferred
  2582 000050CC 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2583 000050D2 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2584 000050D4 890D(77070000)      <1>     mov dword [tfrCntr], ecx
  2585 000050DA EBAC                <1>     jmp short writeExit
  2586                              <1> ;-----------------------------------:
  2587                              <1> ;        File Handle routines       :
  2588                              <1> ;-----------------------------------:
  2589                              <1> 
  2590                              <1> setCurrentSFT:
  2591                              <1> ;Set the pointer in rdi as current SFT 
  2592 000050DC 48893D(32070000)    <1>     mov qword [currentSFT], rdi
  2593                              <1>     return 
    13                              <2> %%_ret:
    14 000050E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2594                              <1> getCurrentSFT:
  2595                              <1> ;Get the current SFT pointer in rdi
  2596 000050E4 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2597                              <1>     return 
    13                              <2> %%_ret:
    14 000050EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2598                              <1> updateCurrentSFT:
  2599                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2600                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2601 000050EC 57                  <1>     push rdi
  2602 000050ED E8F2FFFFFF          <1>     call getCurrentSFT
  2603                              <1> ;Get in ecx the number of bytes we xferred
  2604 000050F2 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2605 000050F8 F7D9                <1>     neg ecx ;Multiply by -1
  2606 000050FA 030D(73070000)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2607                              <1> ;ecx has bytes transferred
  2608 00005100 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2609 00005106 751D                <1>     jnz .exit
  2610                              <1> ;Down here for disk files only!
  2611 00005108 50                  <1>     push rax
  2612 00005109 8B05(54070000)      <1>     mov eax, dword [currClustD]
  2613 0000510F 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2614 00005112 8B05(50070000)      <1>     mov eax, dword [currClustF]
  2615 00005118 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2616 0000511B 8B05(67070000)      <1>     mov eax, dword [currByteF]
  2617 00005121 89471B              <1>     mov dword [rdi + sft.dCurntOff], eax
  2618 00005124 58                  <1>     pop rax
  2619                              <1> .exit:
  2620 00005125 5F                  <1>     pop rdi
  2621 00005126 F8                  <1>     clc
  2622                              <1>     return 
    13                              <2> %%_ret:
    14 00005127 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2623                              <1> 
  2624                              <1> setupVarsForTransfer:
  2625                              <1> ;Computes the actual bytes to be transferred and 
  2626                              <1> ; sets up internal variables for the transfer. 
  2627                              <1> ;Works for both reading and writing
  2628                              <1> ;Input: ecx = User desired Bytes to transfer
  2629                              <1> ;       rdi = SFT pointer for the file
  2630                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2631                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2632                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2633                              <1> ;
  2634                              <1> ;Note: Does not account for a FULL disk. When writing,
  2635                              <1> ; if the disk will get full as a result of the write,
  2636                              <1> ; stop at the last byte before the transfer. If the 
  2637                              <1> ; file pointer is past the last free byte, write 0
  2638 00005128 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2639 0000512C 488935(0A070000)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2640 00005133 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2641 00005136 8905(67070000)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2642 0000513C 890D(73070000)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2643 00005142 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2644 00005148 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedir | devCharDev
  2645                              <1>     retnz   ;Redir and char devices leave here
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000514E 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00005150 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2646                              <1> ;Disk files...
  2647 00005151 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2648 00005154 8905(67070000)      <1>     mov dword [currByteF], eax
  2649 0000515A 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2650                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2651 0000515E 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2652 00005165 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2653 00005168 881D(09070000)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2654 0000516E 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2655 00005174 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2656 00005178 31D2                <1>     xor edx, edx    ;Zero rdx
  2657 0000517A F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2658                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2659                              <1>     ;edx has the offset into that sector
  2660 0000517C 8905(58070000)      <1>     mov dword [currSectF], eax
  2661 00005182 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2662 00005189 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2663 0000518B 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2664 0000518E 8805(5C070000)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2665 00005194 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2666 00005196 8A4D05              <1>     mov cl, byte [rbp + dpb.bSecPerClustShift]
  2667 00005199 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2668 0000519B 8915(50070000)      <1>     mov dword [currClustF], edx ;Save in var
  2669 000051A1 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2670                              <1>     return 
    13                              <2> %%_ret:
    14 000051A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2671                              <1> 
  2672                              <1> findFreeSFT:
  2673                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2674                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2675                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2676                              <1> ;        CF=CY => eax = errNhl, error exit
  2677 000051A4 31DB                <1>     xor ebx, ebx
  2678                              <1> .mainLp:
  2679 000051A6 53                  <1>     push rbx    ;Save the sft ndx
  2680 000051A7 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2681 000051AC 5B                  <1>     pop rbx
  2682 000051AD 7307                <1>     jnc .sftExists
  2683 000051AF B804000000          <1>     mov eax, errNhl
  2684 000051B4 F9                  <1>     stc
  2685                              <1>     return
    13                              <2> %%_ret:
    14 000051B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2686                              <1> .sftExists:
  2687 000051B6 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2688 000051BB 7427                <1>     je .sftFound
  2689 000051BD 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2690 000051C2 751C                <1>     jne .gotoNextNdx
  2691                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2692 000051C4 53                  <1>     push rbx
  2693 000051C5 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2694 000051CC 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2695 000051D0 750B                <1>     jne .netGoToNextNdx
  2696 000051D2 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2697 000051D9 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2698                              <1> .netGoToNextNdx:
  2699 000051DD 5B                  <1>     pop rbx
  2700 000051DE 7404                <1>     je .sftFound
  2701                              <1> .gotoNextNdx:
  2702 000051E0 FFC3                <1>     inc ebx
  2703 000051E2 EBC2                <1>     jmp short .mainLp
  2704                              <1> .sftFound:
  2705 000051E4 53                  <1>     push rbx
  2706 000051E5 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2707 000051EA 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2708 000051F1 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2709 000051F5 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2710 000051FC 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2711 00005200 5B                  <1>     pop rbx
  2712 00005201 F8                  <1>     clc
  2713                              <1>     return
    13                              <2> %%_ret:
    14 00005202 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2714                              <1> getSFTPtrfromSFTNdx:    ;Int 2Fh AX=1216h
  2715                              <1> ;Return a pointer to the SFT entry in rdi
  2716                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2717                              <1> ;Output: rdi = SFT pointer
  2718 00005203 488B3D(43000000)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2719                              <1> .walk:
  2720 0000520A 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2721 0000520E 7212                <1>     jb .thisTable
  2722 00005210 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2723 00005214 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2724 00005217 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2725 0000521E 75EA                <1>     jne .walk
  2726 00005220 F9                  <1>     stc
  2727                              <1>     return
    13                              <2> %%_ret:
    14 00005221 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2728                              <1> .thisTable:
  2729 00005222 50                  <1>     push rax
  2730 00005223 52                  <1>     push rdx
  2731 00005224 B84F000000          <1>     mov eax, sft_size
  2732 00005229 F7E3                <1>     mul ebx
  2733 0000522B 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2734 0000522E 5A                  <1>     pop rdx
  2735 0000522F 58                  <1>     pop rax
  2736 00005230 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2737                              <1>     return
    13                              <2> %%_ret:
    14 00005237 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2738                              <1> getJFTPtr:    ;Int 2Fh AX=1220h
  2739                              <1> ;Return a zero extended value in rdi for the SFT entry
  2740                              <1> ;Input: bx = JFT handle (we zero extend)
  2741                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2742                              <1> ;        CF=CY => al = Error code, Fail
  2743 00005238 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2744 0000523B 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
  2745 00005242 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  2746 00005246 7204                <1>     jb .ok
  2747 00005248 B006                <1>     mov al, errBadHdl
  2748 0000524A F9                  <1>     stc
  2749                              <1>     return
    13                              <2> %%_ret:
    14 0000524B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2750                              <1> .ok:
  2751 0000524C 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  2752 00005252 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  2753 00005254 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  2754 00005256 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  2755 0000525A 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  2756 0000525E EB0B                <1>     jmp short .pspOkExit
  2757                              <1> .pspJftBelow:
  2758 00005260 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  2759                              <1> .pspJftOk:
  2760 00005266 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2761                              <1> .pspOkExit:
  2762 0000526B F8                  <1>     clc
  2763                              <1>     return
    13                              <2> %%_ret:
    14 0000526C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2764                              <1> findFreeJFTEntry:
  2765                              <1> ;Finds a free JFT entry in the currentPSP.
  2766                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2767                              <1> ;        CF=CY => al=errNhl
  2768 0000526D 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2769                              <1> .searchLp:
  2770 0000526F E8C4FFFFFF          <1>     call getJFTPtr
  2771 00005274 720A                <1>     jc .ffJFTbadExit
  2772 00005276 803FFF              <1>     cmp byte [rdi], -1
  2773                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00005279 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000527B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2774 0000527C FFC3                <1>     inc ebx
  2775 0000527E EBEF                <1>     jmp short .searchLp
  2776                              <1> .ffJFTbadExit:
  2777 00005280 B004                <1>     mov al, errNhl
  2778 00005282 F9                  <1>     stc
  2779                              <1>     return
    13                              <2> %%_ret:
    14 00005283 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2780                              <1> getSFTPtr:
  2781                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2782                              <1> ;Input: bx = JFT handle
  2783                              <1> ;Output: CF=NC: rdi = SFT pointer
  2784                              <1> ;        CF=CY: Error, ax=Error code
  2785 00005284 E817000000          <1>     call derefSFTPtr
  2786                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00005289 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000528B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2787 0000528C 50                  <1>     push rax
  2788 0000528D 0FB705(43040000)    <1>     movzx eax, word [machineNum]
  2789 00005294 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2790 00005298 58                  <1>     pop rax
  2791                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00005299 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000529B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2792 0000529C B006                <1>     mov al, errBadHdl   ;Error code
  2793 0000529E F9                  <1>     stc         ;Reset CF
  2794                              <1>     return
    13                              <2> %%_ret:
    14 0000529F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2795                              <1> 
  2796                              <1> derefSFTPtr:
  2797                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2798                              <1> ;Input: bx = File handle (gets zero extended)
  2799                              <1> ;Output: CF=NC: rdi = SFT pointer
  2800                              <1> ;        CF=CY: Error, ax=Error code
  2801 000052A0 E893FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2802 000052A5 7205                <1>     jb .fail
  2803 000052A7 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2804 000052AA 7504                <1>     jne .ok
  2805                              <1> .fail:
  2806 000052AC B006                <1>     mov al, errBadHdl
  2807 000052AE F9                  <1>     stc
  2808                              <1>     return
    13                              <2> %%_ret:
    14 000052AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2809                              <1> .ok:
  2810 000052B0 53                  <1>     push rbx    ;Preserve the JFT handle
  2811 000052B1 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2812 000052B4 E84AFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2813 000052B9 5B                  <1>     pop rbx 
  2814                              <1>     return
    13                              <2> %%_ret:
    14 000052BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2815                              <1> 
  2816                              <1> getSFTndxInheritable:
  2817                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2818                              <1> ;Input: ebx = SFTndx (word)
  2819                              <1> ;Output: 
  2820                              <1> ;   ZF=ZE => Inheritable
  2821                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2822 000052BB 57                  <1>     push rdi
  2823 000052BC E842FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2824 000052C1 7208                <1>     jc .badNdx
  2825 000052C3 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2826 000052C9 5F                  <1>     pop rdi
  2827                              <1>     return
    13                              <2> %%_ret:
    14 000052CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2828                              <1> .badNdx:
  2829 000052CB 31FF                <1>     xor edi, edi
  2830 000052CD FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2831 000052CF F8                  <1>     clc
  2832 000052D0 5F                  <1>     pop rdi
  2833                              <1>     return
    13                              <2> %%_ret:
    14 000052D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2834                              <1> 
  2835                              <1> incrementOpenCount:
  2836                              <1> ;Given a SFTndx, this function will increment it's open count
  2837                              <1> ;Output:
  2838                              <1> ;   CF=NC => sftndx ok, count incremented
  2839                              <1> ;   CF=CY => Bad ndx
  2840 000052D2 57                  <1>     push rdi
  2841 000052D3 E82BFFFFFF          <1>     call getSFTPtrfromSFTNdx
  2842 000052D8 7203                <1>     jc .exit
  2843 000052DA 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2844                              <1> .exit:
  2845 000052DD 5F                  <1>     pop rdi
  2846                              <1>     return
    13                              <2> %%_ret:
    14 000052DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2847                              <1> 
  2848                              <1> decrementOpenCount: ;Int 2Fh AX = 1208h
  2849                              <1> ;Input: rdi = SFT pointer
  2850                              <1> ;Output: ax = Original wNumHandles count (zero extended to eax)
  2851 000052DF 9C                  <1>     pushfq
  2852 000052E0 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2853 000052E3 FFC8                <1>     dec eax     ;Decrement count
  2854 000052E5 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2855 000052E7 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2856                              <1> .exit:
  2857 000052E9 9D                  <1>     popfq
  2858 000052EA 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2859                              <1>     return
    13                              <2> %%_ret:
    14 000052ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2860                              <1> 
  2861                              <1> ;Buffer Wrapper
  2862                              <1> writeThroughBuffersForHandle:
  2863                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2864 000052EE 57                  <1>     push rdi
  2865 000052EF 55                  <1>     push rbp
  2866 000052F0 E8EFFDFFFF          <1>     call getCurrentSFT
  2867 000052F5 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedir | devCharDev
  2868 000052FB 751C                <1>     jnz .exit
  2869 000052FD FF35(0A070000)      <1>     push qword [workingDPB]
  2870 00005303 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2871 00005307 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2872 0000530E E880B4FFFF          <1>     call flushAllBuffersForDPB
  2873 00005313 8F05(0A070000)      <1>     pop qword [workingDPB]
  2874                              <1> .exit:
  2875 00005319 5D                  <1>     pop rbp
  2876 0000531A 5F                  <1>     pop rdi
  2877                              <1>     return
    13                              <2> %%_ret:
    14 0000531B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2878                              <1> 
  2879                              <1> setDPBfromSFT:
  2880                              <1> ;Sets and updates the DPB from an SFT ptr
  2881                              <1> ;Input: rdi -> sft
  2882                              <1> ;Output: CF=NC: workingDPB set
  2883                              <1> ;        CF=CY: Error fail, exit
  2884 0000531C 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get the DPB ptr in rbp
  2885 00005320 E9791E0000          <1>     jmp getDiskDPB.sftEp  ;Doing this will nullify CDS paths on disk swaps!
    43                                  %include "./src/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35                              <1> ;Query IOCTL capacity (optionally implemented)
    36                              <1> ;al = 10h => Query IOCTL Handle
    37                              <1> ;al = 11h => Quety IOCTL block Device
    38                              <1> ;======================================================
    39 00005325 3C11                <1>     cmp al, 17
    40 00005327 775F                <1>     ja .invalidFunction
    41 00005329 84C0                <1>     test al, al
    42 0000532B 7473                <1>     jz .getDevWord
    43 0000532D 3C01                <1>     cmp al, 1
    44 0000532F 0F8482000000        <1>     je .setDevWord
    45 00005335 2C02                <1>     sub al, 2
    46 00005337 3C03                <1>     cmp al, 3
    47 00005339 0F8683000000        <1>     jbe .ioctlStringFunctions
    48 0000533F 2C04                <1>     sub al, 4
    49 00005341 3C01                <1>     cmp al, 1
    50 00005343 0F8654010000        <1>     jbe .ioStatusFunctions
    51 00005349 2C02                <1>     sub al, 2
    52 0000534B 3C02                <1>     cmp al, 2
    53 0000534D 0F86DD010000        <1>     jbe .devControl
    54 00005353 2C03                <1>     sub al, 3
    55 00005355 0F84A8020000        <1>     jz .setSharingCount
    56 0000535B FEC8                <1>     dec al
    57 0000535D 0F84BE020000        <1>     jz .genericCharDevIOCTL
    58 00005363 FEC8                <1>     dec al
    59 00005365 0F84BD020000        <1>     jz .genericBlokDevIOCTL
    60 0000536B FEC8                <1>     dec al
    61 0000536D 0F84A2030000        <1>     jz .getDrvLogicalDevice
    62 00005373 FEC8                <1>     dec al
    63 00005375 0F84FA030000        <1>     jz .setDrvLogicalDevice
    64 0000537B 3C01                <1>     cmp al, 1
    65 0000537D 0F844C040000        <1>     jz .queryIOCTLHdl
    66 00005383 E94E040000          <1>     jmp .queryIOCTLDev
    67                              <1> .invalidFunction:
    68 00005388 B801000000          <1>     mov eax, errInvFnc
    69                              <1> .ifExit:
    70 0000538D E917260000          <1>     jmp extErrExit
    71                              <1> .accessDeniedError:
    72 00005392 B805000000          <1>     mov eax, errAccDen
    73 00005397 EBF4                <1>     jmp short .ifExit
    74                              <1> .badHandle:
    75 00005399 B806000000          <1>     mov eax, errBadHdl
    76 0000539E EBED                <1>     jmp short .ifExit
    77                              <1> 
    78                              <1> ;...Functions...
    79                              <1> .getDevWord:
    80                              <1> ;Input: bx = File Handle
    81 000053A0 E8FBFEFFFF          <1>     call derefSFTPtr
    82 000053A5 72F2                <1>     jc .badHandle
    83 000053A7 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    84 000053AB 30C0                <1>     xor al, al
    85 000053AD E821210000          <1>     call getUserRegs
    86 000053B2 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    87                              <1>     return
    13                              <2> %%_ret:
    14 000053B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> .setDevWord:
    89                              <1> ;Input: bx = File Handle
    90                              <1> ;       dl = Low byte of Device information word
    91 000053B7 E8E4FEFFFF          <1>     call derefSFTPtr
    92 000053BC 72DB                <1>     jc .badHandle 
    93 000053BE 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    94                              <1>     return
    13                              <2> %%_ret:
    14 000053C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    95                              <1> .ioctlStringFunctions:
    96                              <1> ;al = 0 -> ReadCharDev
    97                              <1> ;al = 1 -> WriteCharDev
    98                              <1> ;al = 2 -> ReadDiskDev
    99                              <1> ;al = 3 -> WriteDiskDev
   100                              <1> ;Input: bx = File handle/drive number
   101                              <1> ;       ecx = Bytes to transfer
   102                              <1> ;       rdx = Ptr to string to transfer
   103 000053C2 0FB6F3              <1>     movzx esi, bl
   104 000053C5 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   105 000053CC C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   106 000053D3 C605(68040000)00    <1>     mov byte [Int24bitfld], 0
   107                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   108                              <1> ;Setup the common ioReqPkt fields and the read/write 
   109 000053DA C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   110 000053DD 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   111 000053E0 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   112 000053E4 51                  <1>     push rcx
   113 000053E5 52                  <1>     push rdx
   114 000053E6 B903000000          <1>     mov ecx, drvIOCTLREAD
   115 000053EB BA0C000000          <1>     mov edx, drvIOCTLWRITE
   116 000053F0 A801                <1>     test al, 1  ;If set, this is a write operation
   117 000053F2 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   118 000053F5 7507                <1>     jnz .notWrite
   119 000053F7 800D(68040000)01    <1>     or byte [Int24bitfld], critWrite
   120                              <1> .notWrite:
   121 000053FE 5A                  <1>     pop rdx
   122 000053FF 59                  <1>     pop rcx
   123 00005400 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   124 00005403 3C01                <1>     cmp al, 1
   125 00005405 772F                <1>     ja .ioctlStringBlockDevice
   126                              <1>     ;Here we are for char devices only
   127 00005407 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   128 0000540A E891FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   129 0000540F 7288                <1>     jc .badHandle 
   130 00005411 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   131 00005418 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   132 0000541E 0F8464FFFFFF        <1>     jz .invalidFunction
   133                              <1> 
   134 00005424 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   135 00005428 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   136 0000542F 4887DE              <1>     xchg rbx, rsi   ;Swap back
   137 00005432 31C0                <1>     xor eax, eax
   138 00005434 EB38                <1>     jmp short .ioctlStringCommon
   139                              <1> .ioctlStringBlockDevice:
   140                              <1>     ;Here we are for block devices only
   141                              <1>     ;esi has the drive number
   142 00005436 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   143 0000543D 89F0                <1>     mov eax, esi
   144 0000543F 53                  <1>     push rbx
   145 00005440 E822210000          <1>     call getCDS ;Returns in al the unit number of the drive
   146 00005445 5B                  <1>     pop rbx
   147 00005446 730A                <1>     jnc .okDrive
   148 00005448 B80F000000          <1>     mov eax, errBadDrv
   149 0000544D E957250000          <1>     jmp extErrExit
   150                              <1> .okDrive:
   151 00005452 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   152 00005459 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   153 0000545D 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   154 00005460 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   155 00005463 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   156 00005467 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   157 0000546A 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   158                              <1> .ioctlStringCommon:
   159                              <1>     ;rsi -> Device Driver header
   160                              <1>     ;rbx -> Request Header
   161                              <1>     ;al = Media descriptor
   162 0000546E 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   163 00005471 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLCtl
   164 00005477 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   165                              <1>     ;Make request now
   166 0000547D 51                  <1>     push rcx    ;Push xfrctr
   167 0000547E 52                  <1>     push rdx    ;Buffer Ptr
   168 0000547F 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   169 00005485 E89E1B0000          <1>     call goDriver
   170 0000548A 5A                  <1>     pop rdx
   171 0000548B 59                  <1>     pop rcx
   172                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   173 0000548C 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   174 00005492 0F8403250000        <1>     jz extGoodExit
   175 00005498 E96B030000          <1>     jmp failIOCTLCall
   176                              <1> 
   177                              <1> .ioStatusFunctions:
   178                              <1> ;al = 0 -> Get input status 
   179                              <1> ;al = 1 -> Get output status
   180 0000549D E8FEFDFFFF          <1>     call derefSFTPtr
   181 000054A2 0F82F1FEFFFF        <1>     jc .badHandle 
   182 000054A8 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   183 000054AF C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   184 000054B2 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   185 000054B9 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir  ;File cannot be redir!
   186 000054BF 0F85C3FEFFFF        <1>     jnz .invalidFunction
   187 000054C5 C605(68040000)00    <1>     mov byte [Int24bitfld], 0
   188 000054CC B906000000          <1>     mov ecx, drvINSTATUS
   189 000054D1 BA0A000000          <1>     mov edx, drvOUTSTATUS
   190 000054D6 84C0                <1>     test al, al
   191 000054D8 0F45CA              <1>     cmovnz ecx, edx
   192 000054DB 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   193 000054DE 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   194 000054E4 7416                <1>     jz .ioStatDisk
   195 000054E6 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   196 000054ED 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   197 000054F4 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   198 000054F8 30C0                <1>     xor al, al
   199 000054FA EB15                <1>     jmp short .ioStatCommon
   200                              <1> .ioStatDisk:
   201 000054FC C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   202 00005503 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   203 00005507 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   204 0000550A 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   205 0000550D 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   206                              <1> .ioStatCommon:
   207 00005511 E8121B0000          <1>     call goDriver
   208 00005516 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   209 0000551C 0F85E6020000        <1>     jnz failIOCTLCall
   210 00005522 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   211 00005528 7403                <1>     jz .notBusyExit
   212 0000552A B0FF                <1>     mov al, -1  ;Device Busy/EOF
   213                              <1>     return 
    13                              <2> %%_ret:
    14 0000552C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   214                              <1> .notBusyExit:
   215                              <1> ;Device ready/NotEOF
   216 0000552D 31C0                <1>     xor eax, eax
   217                              <1>     return
    13                              <2> %%_ret:
    14 0000552F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> .devControl:
   220                              <1> ;al = 0 -> Is media removable?
   221                              <1> ;al = 1 -> Is device local or remote?
   222                              <1> ;al = 2 -> Is handle local or remote?
   223 00005530 84C0                <1>     test al, al
   224 00005532 746D                <1>     jz .remTest
   225 00005534 A801                <1>     test al, 1
   226 00005536 751B                <1>     jnz .deviceTest
   227                              <1> ;Handle Local or Remote
   228 00005538 E863FDFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   229 0000553D 0F8256FEFFFF        <1>     jc .badHandle 
   230 00005543 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   231                              <1> .devControlExit:
   232 00005547 E8871F0000          <1>     call getUserRegs
   233 0000554C 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   234 00005550 31C0                <1>     xor eax, eax
   235                              <1>     return 
    13                              <2> %%_ret:
    14 00005552 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   236                              <1> .deviceTest:
   237                              <1> ;Drive Local or Remote
   238                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   239                              <1> ;Else, just get the CDS word and swap subst and net
   240 00005553 88D8                <1>     mov al, bl
   241 00005555 E80D200000          <1>     call getCDS
   242 0000555A 730A                <1>     jnc .devTestOkDrive
   243 0000555C B80F000000          <1>     mov eax, errBadDrv
   244 00005561 E943240000          <1>     jmp extErrExit
   245                              <1> .devTestOkDrive:
   246 00005566 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   247 0000556D 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   248 00005571 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   249 00005576 7513                <1>     jnz .remoteDrive
   250 00005578 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   251 0000557C 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   252 00005580 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   253 00005584 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   254 00005589 EBBC                <1>     jmp short .devControlExit
   255                              <1> .remoteDrive:
   256 0000558B 6689D3              <1>     mov bx, dx
   257 0000558E 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   258 00005593 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   259 00005598 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   260 0000559A 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   261 0000559F EBA6                <1>     jmp short .devControlExit   ;Store it
   262                              <1> 
   263                              <1> .remTest:
   264                              <1> ;Drive letter in bl
   265 000055A1 88D8                <1>     mov al, bl
   266 000055A3 E8BF1F0000          <1>     call getCDS
   267 000055A8 730A                <1>     jnc .remTestOkDrive
   268                              <1> .remTestBadDrv:
   269 000055AA B80F000000          <1>     mov eax, errBadDrv
   270 000055AF E9F5230000          <1>     jmp extErrExit
   271                              <1> .remTestOkDrive:
   272 000055B4 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   273 000055BB 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   274 000055C1 75E7                <1>     jnz .remTestBadDrv
   275 000055C3 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   276 000055CA 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   277 000055CE 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   278 000055D1 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   279 000055D5 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvOpClRem
   280 000055DB 0F84A7FDFFFF        <1>     jz .invalidFunction
   281 000055E1 C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   282 000055E4 C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   283 000055E8 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   284 000055EE 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   285 000055F1 E8321A0000          <1>     call goDriver
   286 000055F6 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   287 000055FA 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   288 000055FF C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   289                              <1>     return
    13                              <2> %%_ret:
    14 00005602 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   290                              <1> 
   291                              <1> .setSharingCount:
   292                              <1> ;Input: cx = Share Count
   293                              <1> ;       dx = Share Retry
   294 00005603 66890D(1F000000)    <1>     mov word [shareCount], cx
   295 0000560A 6685D2              <1>     test dx, dx
   296 0000560D 0F8475FDFFFF        <1>     jz .invalidFunction
   297 00005613 668915(21000000)    <1>     mov word [shareDelay], dx
   298 0000561A 31C0                <1>     xor eax, eax
   299 0000561C E97A230000          <1>     jmp extGoodExit
   300                              <1> 
   301                              <1> .genericCharDevIOCTL:
   302 00005621 E830000000          <1>     call .getHandleInfo
   303 00005626 EB05                <1>     jmp short .ioctlReqMake
   304                              <1> .genericBlokDevIOCTL:
   305 00005628 E857000000          <1>     call .getBlkDevInfo
   306                              <1> .ioctlReqMake:
   307                              <1> ;rsi must point to the driver header here
   308 0000562D 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   309 00005633 7511                <1>     jnz .supportsIOCTL
   310                              <1> .badFunction:
   311 00005635 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   312 0000563C B801000000          <1>     mov eax, errInvFnc
   313 00005641 E963230000          <1>     jmp extErrExit
   314                              <1> .supportsIOCTL:
   315                              <1>     ;Setup the request header
   316 00005646 E884000000          <1>     call .doIOCTLrequest
   317 0000564B 0F844A230000        <1>     jz extGoodExit
   318 00005651 E9B2010000          <1>     jmp failIOCTLCall
   319                              <1> 
   320                              <1> .getHandleInfo:
   321                              <1> ;Returns in rsi a pointer to the driver for the handle device
   322 00005656 E829FCFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   323 0000565B 7312                <1>     jnc .ghiOkHdl
   324                              <1> .ghiBadHdl:
   325 0000565D C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   326 00005664 58                  <1>     pop rax ;Pop the return addr, return through DOS immediately
   327 00005665 B806000000          <1>     mov eax, errBadHdl
   328 0000566A E93A230000          <1>     jmp extErrExit  ;Exit as if in line with main routine body
   329                              <1> .ghiOkHdl:
   330 0000566F 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   331 00005675 75E6                <1>     jnz .ghiBadHdl
   332 00005677 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   333 0000567D 74DE                <1>     jz .ghiBadHdl
   334 0000567F 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   335                              <1>     return
    13                              <2> %%_ret:
    14 00005683 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   336                              <1> 
   337                              <1> .getBlkDevInfo:
   338                              <1> ;Returns in rsi a ptr to the block device driver
   339 00005684 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   340 00005686 51                  <1>     push rcx
   341 00005687 52                  <1>     push rdx
   342 00005688 E8DA1E0000          <1>     call getCDS ;Sets the current CDS
   343 0000568D 5A                  <1>     pop rdx
   344 0000568E 59                  <1>     pop rcx
   345 0000568F 7217                <1>     jc .gbdiBadDrv
   346                              <1>     ;Check the CDS not net, subst or join
   347 00005691 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   348 00005698 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   349 0000569C 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   350 000056A0 7406                <1>     jz .gbdiBadDrv
   351 000056A2 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   352 000056A6 7412                <1>     jz .gbdiOk
   353                              <1> .gbdiBadDrv:
   354 000056A8 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   355 000056AF 58                  <1>     pop rax ;Pop the return addr, return through DOS immediately
   356 000056B0 B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   357 000056B5 E9EF220000          <1>     jmp extErrExit
   358                              <1> .gbdiOk:
   359                              <1>     ;CDS is good,now get the DPB
   360 000056BA 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   361 000056BE 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   362 000056C2 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   363 000056C5 8805(C2040000)      <1>     mov byte [primReqPkt + ioctlReqPkt.unitnm], al
   364 000056CB 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi
   365                              <1>     return
    13                              <2> %%_ret:
    14 000056CE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> 
   367                              <1> 
   368                              <1> .doIOCTLrequest:
   369                              <1> ;Does IOCTL request
   370                              <1> ;Input: cx = Major/Minor bytes packed in cx
   371                              <1> ;       rdx -> Ptr to control packet
   372                              <1> ;Output: ZF=ZE: No error.
   373                              <1> ;        ZF=NZ: Error. Get error code.
   374                              <1> ;       rbx -> Left pointing to the request packet
   375                              <1> ;       eax = Status word
   376 000056CF 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   377 000056D6 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   378 000056D9 C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   379 000056DD 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   380 000056E3 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   381 000056E7 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   382 000056EB 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   383 000056EE E8E01D0000          <1>     call getUserRegs
   384 000056F3 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   385 000056F7 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   386 000056FB 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   387 000056FF 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   388 00005703 4889FE              <1>     mov rsi, rdi
   389 00005706 E81D190000          <1>     call goDriver
   390 0000570B 0FB74303            <1>     movzx eax, word [rbx + ioctlReqPkt.status]
   391 0000570F A900800000          <1>     test eax, drvErrStatus
   392                              <1>     return
    13                              <2> %%_ret:
    14 00005714 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> 
   394                              <1> .getDrvLogicalDevice:
   395 00005715 88D8                <1>     mov al, bl
   396 00005717 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   397 0000571E C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   398 00005722 C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   399 00005725 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   400 0000572B 53                  <1>     push rbx
   401 0000572C E8361E0000          <1>     call getCDS
   402 00005731 8805(09070000)      <1>     mov byte [workingDrv], al
   403 00005737 5B                  <1>     pop rbx
   404 00005738 0F826CFEFFFF        <1>     jc .remTestBadDrv
   405 0000573E 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   406 00005745 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   407 00005749 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   408 0000574D 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   409 00005750 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   410                              <1> 
   411 00005753 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   412 00005759 0F8429FCFFFF        <1>     jz .invalidFunction
   413 0000575F E8C4180000          <1>     call goDriver
   414 00005764 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   415 0000576A 7405                <1>     jz .getDrvOk
   416 0000576C E997000000          <1>     jmp failIOCTLCall
   417                              <1> .getDrvOk:
   418 00005771 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   419                              <1>     return
    13                              <2> %%_ret:
    14 00005774 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .setDrvLogicalDevice:
   421 00005775 88D8                <1>     mov al, bl
   422 00005777 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   423 0000577E C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   424 00005782 C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   425 00005785 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   426 0000578B 53                  <1>     push rbx
   427 0000578C E8D61D0000          <1>     call getCDS
   428 00005791 8805(09070000)      <1>     mov byte [workingDrv], al
   429 00005797 5B                  <1>     pop rbx
   430 00005798 0F820CFEFFFF        <1>     jc .remTestBadDrv
   431 0000579E 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   432 000057A5 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   433 000057A9 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   434 000057AD 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   435 000057B0 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   436 000057B3 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   437 000057B9 0F84C9FBFFFF        <1>     jz .invalidFunction
   438 000057BF E864180000          <1>     call goDriver
   439 000057C4 30C0                <1>     xor al, al
   440 000057C6 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   441                              <1>     retz    ;Return if OK, else fail
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000057CC 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000057CE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   442                              <1> 
   443                              <1> .queryIOCTLHdl:
   444 000057CF E882FEFFFF          <1>     call .getHandleInfo
   445 000057D4 EB05                <1>     jmp short .queryCmn
   446                              <1> .queryIOCTLDev:
   447 000057D6 E8A9FEFFFF          <1>     call .getBlkDevInfo
   448                              <1> .queryCmn:
   449                              <1> ;If Query is set, then we should be able to make the IOCTL Query request
   450 000057DB 66F746088000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLQ
   451 000057E1 0F844EFEFFFF        <1>     jz .badFunction
   452 000057E7 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   453 000057ED 0F8442FEFFFF        <1>     jz .badFunction
   454 000057F3 E8D7FEFFFF          <1>     call .doIOCTLrequest
   455 000057F8 0F849D210000        <1>     jz extGoodExit
   456                              <1> ;Else, the driver reports it doesn't recognise the command function!
   457 000057FE B805000000          <1>     mov eax, errAccDen
   458 00005803 E9A1210000          <1>     jmp extErrExit
   459                              <1> 
   460                              <1> failIOCTLCall:
   461                              <1> ;Called to fail IOCTL calls that don't trigger Int 24h
   462                              <1> ;rbx -> Driver request packet
   463 00005808 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   464 0000580C 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   465 00005812 E8CF110000          <1>     call xlatHardError
   466 00005817 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] 
   467 0000581E E986210000          <1>     jmp extErrExit
   468                              <1> 
    44                                  %include "./src/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> ;NOTE: 
     7                              <1> ;   If less than 6 paragraphs requested for alloc, allocate 6 paragraphs.
     8                              <1> ;   If between 0 and 6 paras requested for realloc, realloc to 6.
     9                              <1> ;       If 0 requested for realloc, free.
    10                              <1> allocateMemory:    ;ah = 48h
    11                              <1> ;Input: ebx = Number of paragraphs requested
    12                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    13                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    14 00005823 E836210000          <1>     call dosCrit1Enter
    15 00005828 B806000000          <1>     mov eax, 6
    16 0000582D 39C3                <1>     cmp ebx, eax
    17 0000582F 0F42D8              <1>     cmovb ebx, eax
    18 00005832 31D2                <1>     xor edx, edx
    19                              <1>     ;Clear the pointers
    20 00005834 488915(45040000)    <1>     mov qword [firstMCB], rdx
    21 0000583B 488915(4D040000)    <1>     mov qword [bestMCB], rdx
    22 00005842 488915(55040000)    <1>     mov qword [lastMCB], rdx
    23 00005849 31ED                <1>     xor ebp, ebp    
    24 0000584B FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    25 0000584D 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    26                              <1> .walk:
    27 00005854 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    28 00005857 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    29 0000585A 7409                <1>     je .walk1
    30 0000585C 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    31 0000585F 0F85E5040000        <1>     jne badMCBChain
    32                              <1> .walk1:
    33                              <1>     ;Here if valid but not the last block
    34 00005865 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    35 0000586D 0F8582000000        <1>     jne .walk2
    36                              <1>     ;Here we consolidate adjacent free blocks if there are any
    37                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    38                              <1>     ;End consolidation at first non free block or at last block in chain
    39 00005873 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    40 00005876 744A                <1>     je .det0    ;Determine if this block is useful
    41 00005878 31C9                <1>     xor ecx, ecx
    42 0000587A 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    43 0000587D 4881C610000000      <1>     add rsi, mcb.program
    44                              <1> .cons0:
    45 00005884 48C1E104            <1>     shl rcx, 4
    46 00005888 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    47 0000588B 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    48 0000588E 7409                <1>     je .cons1
    49 00005890 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    50 00005893 0F85B1040000        <1>     jne badMCBChain 
    51                              <1> .cons1:
    52 00005899 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 000058A1 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    54                              <1>     ;Here rsi, points to a free block, add it to rdi
    55 000058A3 31C9                <1>     xor ecx, ecx
    56 000058A5 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    57 000058A8 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    58 000058AE 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    59 000058B1 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    60 000058B3 31D2                <1>     xor edx, edx
    61 000058B5 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    62 000058B8 48895608            <1>     mov qword [rsi + 8], rdx
    63 000058BC 3C5A                <1>     cmp al, mcbMarkEnd
    64 000058BE 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    65                              <1>     ;Here we deal with if the block was the last one 
    66 000058C0 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    67                              <1> .det0:  ;Now determine if pointer in rdi is useful
    68 000058C2 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    69                              <1> ;ebx must be less than the arena size for the arena to be useful!
    70 000058C5 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    71 000058C8 39D9                <1>     cmp ecx, ebx
    72 000058CA 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    73 000058CC 488935(55040000)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    74 000058D3 488B05(45040000)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    75 000058DA 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    76 000058DD 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    77 000058DF 488935(45040000)    <1>     mov qword [firstMCB], rsi
    78                              <1> .det1:
    79                              <1>     ;Now test for best fit.
    80 000058E6 29D9                <1>     sub ecx, ebx    ;Block - ebx
    81 000058E8 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    82 000058EA 7209                <1>     jb .walk2
    83 000058EC 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    84 000058EE 488935(4D040000)    <1>     mov qword [bestMCB], rsi
    85                              <1> .walk2:
    86 000058F5 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    87 000058F8 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    88 000058FA 31C9                <1>     xor ecx, ecx
    89 000058FC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    90 000058FF 48C1E104            <1>     shl rcx, 4
    91 00005903 4881C610000000      <1>     add rsi, mcb.program
    92 0000590A 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    93 0000590D E942FFFFFF          <1>     jmp .walk
    94                              <1> .allocate:
    95                              <1>     ;Allocation fails IF the pointer is the null pointer
    96 00005912 803D(D3030000)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    97 00005919 723A                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    98                              <1>     ;Fall thru if last fit
    99 0000591B 488B35(55040000)    <1>     mov rsi, qword [lastMCB]
   100 00005922 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   101 00005925 0F84A8000000        <1>     jz .allocFail
   102 0000592B 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   103 0000592D C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   104 00005930 31C9                <1>     xor ecx, ecx
   105 00005932 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 00005935 29D9                <1>     sub ecx, ebx
   107 00005937 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   108 0000593D 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   109 00005940 48C1E104            <1>     shl rcx, 4
   110 00005944 4881C610000000      <1>     add rsi, mcb.program
   111 0000594B 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   112 0000594E 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   113 00005950 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   114 00005953 EB56                <1>     jmp short .bfPerfectFit
   115                              <1> .bfCommon:
   116 00005955 488B35(45040000)    <1>     mov rsi, qword [firstMCB]
   117 0000595C 803D(D3030000)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   118 00005963 480F4435(4D040000)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   119 0000596B 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   120 0000596E 7463                <1>     jz .allocFail
   121                              <1>     ;Now check if we need to make a "spill over" free MCB
   122 00005970 31C9                <1>     xor ecx, ecx
   123 00005972 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]  ;Get current whole block size
   124 00005975 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   125 00005977 7432                <1>     jz short .bfPerfectFit
   126                              <1>     ;Make the spill over MCB 
   127 00005979 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   128 0000597F 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   129 00005982 8A06                <1>     mov al, byte [rsi + mcb.marker]
   130 00005984 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   131 00005987 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   132 0000598A 4881C710000000      <1>     add rdi, mcb.program
   133 00005991 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   134 00005997 48C1E304            <1>     shl rbx, 4
   135 0000599B 4801DF              <1>     add rdi, rbx
   136 0000599E 8807                <1>     mov byte [rdi + mcb.marker], al ;Store old marker in new block
   137 000059A0 48C7470100000000    <1>     mov qword [rdi + mcb.owner], mcbOwnerFree
   138 000059A8 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx
   139                              <1> .bfPerfectFit:
   140                              <1>     ;Now set the current PSP as the owner of this new MCB
   141 000059AB 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   142 000059B2 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   143 000059B6 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   144 000059BD 488D4610            <1>     lea rax, qword [rsi + mcb.program]  ;Point return ptr to program area
   145 000059C1 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   146 000059C4 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 000059C8 E850030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 000059CD E8961F0000          <1>     call dosCrit1Exit
   149                              <1>     return
    13                              <2> %%_ret:
    14 000059D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   150                              <1> .allocFail:
   151                              <1>     ;Walk the MCB chain to determine the biggest block size
   152 000059D3 488B35(33000000)    <1>     mov rsi, [mcbChainPtr]
   153 000059DA 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   154                              <1> .af0:
   155 000059DC 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   156 000059DF 7409                <1>     je .af1
   157 000059E1 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   158 000059E4 0F8560030000        <1>     jne badMCBChain
   159                              <1> .af1:
   160 000059EA 31C9                <1>     xor ecx, ecx
   161 000059EC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   162 000059EF 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   163 000059F7 7505                <1>     jne .af2
   164 000059F9 39D9                <1>     cmp ecx, ebx
   165 000059FB 0F47D9              <1>     cmova ebx, ecx
   166                              <1> .af2:
   167 000059FE 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   168 00005A01 7410                <1>     je .afExit
   169 00005A03 48C1E104            <1>     shl rcx, 4
   170 00005A07 4881C610000000      <1>     add rsi, mcb.program
   171 00005A0E 4801CE              <1>     add rsi, rcx
   172 00005A11 EBD7                <1>     jmp short .af1
   173                              <1> .afExit:
   174 00005A13 B808000000          <1>     mov eax, errNoMem
   175 00005A18 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   176 00005A1F 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   177 00005A22 E931030000          <1>     jmp mcbErrHdlr
   178                              <1> freeMemory:        ;ah = 49h
   179                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   180                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   181                              <1> ;Always skip the first block as this is the anchor for DOS
   182 00005A27 E8321F0000          <1>     call dosCrit1Enter
   183 00005A2C 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   184 00005A33 31C9                <1>     xor ecx, ecx
   185 00005A35 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   186 00005A3C 4889F7              <1>     mov rdi, rsi
   187 00005A3F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   188 00005A42 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   189 00005A46 4881C610000000      <1>     add rsi, mcb.program
   190 00005A4D 4801CE              <1>     add rsi, rcx    ;Go to next block
   191                              <1> .mainLoop:
   192 00005A50 31C9                <1>     xor ecx, ecx
   193 00005A52 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   194 00005A55 7409                <1>     je .valid
   195 00005A57 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   196 00005A5A 0F85EA020000        <1>     jne badMCBChain
   197                              <1> .valid:
   198 00005A60 4939F0              <1>     cmp r8, rsi
   199 00005A63 741C                <1>     je .blockFound
   200                              <1>     ;Not valid, check if last block in chain
   201 00005A65 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   202 00005A68 0F84A5000000        <1>     je .blockError
   203 00005A6E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   204 00005A71 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   205 00005A75 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   206 00005A7C 4801CE              <1>     add rsi, rcx    ;Go to next block
   207 00005A7F EBCF                <1>     jmp short .mainLoop
   208                              <1> .blockFound:
   209                              <1>     ;If hole, error.
   210                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   211 00005A81 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   212 00005A89 0F8484000000        <1>     je .blockError
   213 00005A8F 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   214 00005A97 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   215 00005A9F 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   216                              <1>     ;It is, let it absorb this space
   217 00005AA1 31C9                <1>     xor ecx, ecx
   218 00005AA3 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 00005AA6 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   220 00005AAC 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   221                              <1>     ;Replace block marker
   222 00005AAF 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   223 00005AB1 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   224 00005AB3 31C9                <1>     xor ecx, ecx
   225 00005AB5 48890E              <1>     mov qword [rsi], rcx
   226 00005AB8 48894E08            <1>     mov qword [rsi + 8], rcx
   227 00005ABC 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   228                              <1> .blockFoundCheckFollowing:
   229                              <1>     ;First check if we are the last block in chain
   230 00005ABF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   231 00005AC2 7439                <1>     je .blockFoundExit  ;If yes, exit!
   232 00005AC4 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   233 00005AC7 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 00005ACA 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 00005ACE 4881C110000000      <1>     add rcx, mcb.program
   236 00005AD5 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 00005AD8 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   238 00005AE0 751B                <1>     jne .blockFoundExit ;If not free, exit
   239                              <1>     ;If free, absorb into block pointed to by rdi
   240 00005AE2 31C9                <1>     xor ecx, ecx
   241 00005AE4 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 00005AE7 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 00005AED 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 00005AF0 8A06                <1>     mov al, byte [rsi + mcb.marker]
   246 00005AF2 8807                <1>     mov byte [rdi + mcb.marker], al
   247 00005AF4 31C9                <1>     xor ecx, ecx
   248 00005AF6 48890E              <1>     mov qword [rsi], rcx
   249 00005AF9 48894E08            <1>     mov qword [rsi + 8], rcx
   250                              <1> .blockFoundExit:
   251 00005AFD E81B020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   252 00005B02 E8611E0000          <1>     call dosCrit1Exit
   253 00005B07 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   254 00005B0E 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   255                              <1>     return
    13                              <2> %%_ret:
    14 00005B12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .blockError:
   257 00005B13 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   258 00005B1A B809000000          <1>     mov eax, errMemAddr
   259 00005B1F E8851E0000          <1>     call extErrExit ;Error thru the unified error handler
   260 00005B24 E8F4010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   261 00005B29 E83A1E0000          <1>     call dosCrit1Exit
   262                              <1>     return
    13                              <2> %%_ret:
    14 00005B2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> reallocMemory:     ;ah = 4Ah
   264                              <1> ;Input: r8 = address of the block to be realloc'ed
   265                              <1> ;       ebx = How many paras this block should contain after realloc. 
   266                              <1> ;               If ebx = 0, jump to free memory
   267 00005B2F E82A1E0000          <1>     call dosCrit1Enter
   268 00005B34 85DB                <1>     test ebx, ebx
   269 00005B36 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   270 00005B3C B806000000          <1>     mov eax, 6
   271 00005B41 39C3                <1>     cmp ebx, eax    ;Are we trying to resize to less than 6?
   272 00005B43 0F42D8              <1>     cmovb ebx, eax
   273 00005B46 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   274 00005B4D 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   275 00005B50 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   276 00005B53 7409                <1>     je .ctn
   277 00005B55 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   278 00005B58 0F856F010000        <1>     jne .badAddrGiven
   279                              <1> .ctn:
   280                              <1>     ;Provided block is valid and not a hole
   281                              <1>     ;Check if Growth or Shrink
   282 00005B5E 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   283 00005B66 74AB                <1>     je freeMemory.blockError
   284 00005B68 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   285 00005B6B 31C9                <1>     xor ecx, ecx
   286 00005B6D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   287 00005B70 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   288 00005B72 0F8791000000        <1>     ja .growth
   289 00005B78 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   290                              <1> ;We can always shrink
   291 00005B7E 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   292 00005B80 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   293 00005B86 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   294 00005B89 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   295 00005B8F 48C1E304            <1>     shl rbx, 4
   296 00005B93 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   297 00005B9A 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   298 00005B9D 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   299 00005B9F C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   300 00005BA2 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   301 00005BA4 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   302 00005BAC 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   303 00005BAF 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   304 00005BB1 0F84E6000000        <1>     je .exit
   305                              <1> ;Else, now see if the block following is also free and absorb it
   306 00005BB7 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   307 00005BBA 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   308 00005BBE 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   309 00005BC5 4801CE              <1>     add rsi, rcx    ;Goto next arena
   310 00005BC8 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   311 00005BCB 7409                <1>     je .shrinkAbsorb
   312 00005BCD 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   313 00005BD0 0F8574010000        <1>     jne badMCBChain
   314                              <1> .shrinkAbsorb:
   315 00005BD6 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   316 00005BDE 0F85B9000000        <1>     jne .exit
   317                              <1>     ;It is free, absorb it
   318 00005BE4 8A06                <1>     mov al, byte [rsi + mcb.marker]
   319 00005BE6 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   320 00005BE8 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   321 00005BEB 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   322 00005BEE 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   323 00005BF1 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   324 00005BF4 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   325 00005BF8 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   326 00005BFB 31C9                <1>     xor ecx, ecx
   327                              <1>     ;Clear absorbed MCB
   328 00005BFD 48890E              <1>     mov qword [rsi], rcx
   329 00005C00 48894E08            <1>     mov qword [rsi + 8], rcx
   330 00005C04 E994000000          <1>     jmp .exit
   331                              <1> .growth:
   332                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   333 00005C09 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   334 00005C0C 0F84A5000000        <1>     je .notEnuffMem
   335                              <1> ;Now check the following space is free. If not, not enuff mem err
   336 00005C12 31C9                <1>     xor ecx, ecx
   337 00005C14 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   338 00005C17 48C1E104            <1>     shl rcx, 4
   339 00005C1B 4889F7              <1>     mov rdi, rsi    
   340 00005C1E 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   341 00005C25 4801CE              <1>     add rsi, rcx
   342 00005C28 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 00005C2B 7409                <1>     je .growthOK
   344 00005C2D 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 00005C30 0F8514010000        <1>     jne badMCBChain
   346                              <1> .growthOK:
   347                              <1>     ;rdi points to block we are growing
   348 00005C36 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   349 00005C3E 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   350                              <1>     ;rsi must own all memory up to the next owned arena
   351 00005C40 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   352 00005C42 31C9                <1>     xor ecx, ecx
   353 00005C44 31D2                <1>     xor edx, edx
   354 00005C46 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   355 00005C49 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   356 00005C4F 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   357 00005C52 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   358 00005C54 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   359 00005C56 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   360 00005C59 775E                <1>     ja .notEnuffMem1
   361 00005C5B 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   362 00005C5D 81FA01000000        <1>     cmp edx, 1
   363 00005C63 744E                <1>     je .notEnuffMem2
   364 00005C65 31C9                <1>     xor ecx, ecx
   365 00005C67 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   366 00005C6A 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   367 00005C6E 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   368 00005C71 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   369 00005C74 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   370 00005C7B 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   371 00005C7F 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   372 00005C82 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   373 00005C86 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   374                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   375                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   376 00005C88 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   377 00005C8A 7411                <1>     jz .exit
   378 00005C8C 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   379 00005C92 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   380 00005C95 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   381                              <1> .exit:
   382 00005C9D E87B000000          <1>     call verifyIntegrityOfMCBChain
   383 00005CA2 E8C11C0000          <1>     call dosCrit1Exit
   384 00005CA7 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   385 00005CAE 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   386                              <1>     return
    13                              <2> %%_ret:
    14 00005CB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .notEnuffMem2:
   388 00005CB3 FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   389 00005CB5 EB02                <1>     jmp short .notEnuffMem1
   390                              <1> .notEnuffMem:
   391 00005CB7 31DB                <1>     xor ebx, ebx    ;No space to grow
   392                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   393 00005CB9 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   394 00005CBE 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   395 00005CC5 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   396 00005CC8 E98B000000          <1>     jmp mcbErrHdlr
   397                              <1> .badAddrGiven:
   398 00005CCD B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   399 00005CD2 E981000000          <1>     jmp mcbErrHdlr
   400                              <1> getsetMallocStrat: ;ah = 58h
   401 00005CD7 84C0                <1>     test al, al
   402 00005CD9 741F                <1>     jz .get
   403 00005CDB 3C02                <1>     cmp al, 2
   404 00005CDD 7337                <1>     jae .bad
   405                              <1> ;Set here
   406 00005CDF 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   407 00005CE6 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   408 00005CEA 8805(D3030000)      <1>     mov byte [allocStrat], al   ;Only save low word
   409 00005CF0 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 00005CF4 E824000000          <1>     call verifyIntegrityOfMCBChain
   411                              <1>     return
    13                              <2> %%_ret:
    14 00005CF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .get:
   413 00005CFA 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   414 00005D01 31C0                <1>     xor eax, eax
   415 00005D03 8A05(D3030000)      <1>     mov al, byte [allocStrat]
   416 00005D09 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   417 00005D0C 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   418 00005D10 E808000000          <1>     call verifyIntegrityOfMCBChain
   419                              <1>     return
    13                              <2> %%_ret:
    14 00005D15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .bad:
   421 00005D16 B801000000          <1>     mov eax, errInvFnc
   422 00005D1B EB3B                <1>     jmp short mcbErrHdlr
   423                              <1> ;-----------------------------------:
   424                              <1> ;      Memory related routines      :
   425                              <1> ;-----------------------------------:
   426                              <1> verifyIntegrityOfMCBChain:
   427 00005D1D 50                  <1>     push rax
   428 00005D1E 53                  <1>     push rbx
   429 00005D1F 488B1D(33000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   430                              <1> .ok:
   431 00005D26 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   432 00005D29 7408                <1>     je .ok1
   433 00005D2B 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   434 00005D2E 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   435                              <1> .exit:
   436 00005D30 5B                  <1>     pop rbx
   437 00005D31 58                  <1>     pop rax
   438                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 00005D32 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .ok1:
   440 00005D33 31C0                <1>     xor eax, eax
   441 00005D35 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   442 00005D38 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   443 00005D3C 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   444 00005D43 4801C3              <1>     add rbx, rax
   445 00005D46 EBDE                <1>     jmp short .ok
   446                              <1> .bmcbPrep:
   447 00005D48 5B                  <1>     pop rbx ;Pop off the stack first!
   448 00005D49 58                  <1>     pop rax
   449                              <1> badMCBChain:
   450 00005D4A B007                <1>     mov al, errMCBbad   ;Yikes!
   451 00005D4C C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   452 00005D53 E9511C0000          <1>     jmp extErrExit
   453                              <1> mcbErrHdlr:
   454                              <1>     ;Jumped to with eax = error code
   455 00005D58 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   456 00005D5F E8B9FFFFFF          <1>     call verifyIntegrityOfMCBChain  ;Replaces error code if mcb chain bad
   457 00005D64 E9401C0000          <1>     jmp extErrExit  ;Else, error thru the unified error handler
    45                                  %include "./src/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 20h
     7 00005D69 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 00005D6B E9611A0000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=00h (which jumps to 21h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 27h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 00005D70 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 00005D76 C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 00005D79 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 21h/AH=31h
    14 00005D7E E94E1A0000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 00005D83 C605(15050000)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 00005D8A 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    34 00005D91 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 00005D93 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 00005D94 EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 00005D96 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    43 00005D9D 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 00005DA1 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 00005DA2 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 00005DA9 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 00005DAD 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 00005DB1 4C89C6              <1>     mov rsi, r8
    52 00005DB4 4889D7              <1>     mov rdi, rdx
    53 00005DB7 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 00005DBC F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 00005DBF 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 00005DC7 F605(15050000)FF    <1>     test byte [pspCopyFlg], -1
    57 00005DCE 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 00005DD0 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 00005DD8 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 00005DDC 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 00005DE0 31C9                <1>     xor ecx, ecx
    64 00005DE2 B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 00005DE7 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 00005DEB B0FF                <1>     mov al, -1
    67 00005DED F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 00005DEF 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 00005DF1 E842F4FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 00005DF6 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 00005DF9 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 00005DFD 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 00005E01 67E31C              <1>     jecxz .copy
    77 00005E04 FFC9                <1>     dec ecx
    78 00005E06 AC                  <1>     lodsb   ;Get the SFTndx in al
    79 00005E07 0FB6D8              <1>     movzx ebx, al
    80 00005E0A 53                  <1>     push rbx
    81 00005E0B E8ABF4FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 00005E10 58                  <1>     pop rax
    83 00005E11 7508                <1>     jnz .badJFT
    84 00005E13 AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 00005E14 E8B9F4FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 00005E19 EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 00005E1B 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 00005E1E EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 00005E20 C605(15050000)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 00005E27 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 00005E28 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 00005E2B 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt22h]
    96 00005E2F B022                <1>     mov al, 22h
    97 00005E31 E86F160000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 00005E36 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 00005E39 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 00005E3B B023                <1>     mov al, 23h
   101 00005E3D E863160000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 00005E42 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 00005E45 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 00005E47 B024                <1>     mov al, 24h
   105 00005E49 E857160000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 00005E4E 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 00005E51 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 00005E53 66C702CD20          <1>     mov word [rdx + psp.return], 020CDh  ;Int 20h
   110 00005E58 66C74250CD21        <1>     mov word [rdx + psp.unixEntry], 021CDh  
   111 00005E5E C64252C3            <1>     mov byte [rdx + psp.unixEntry + 2], 0C3h ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 00005E62 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 00005E63 C605(06070000)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 00005E6A 81FA06000000        <1>     cmp edx, 6
   120 00005E70 7305                <1>     jae .aboveMinimum
   121 00005E72 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 00005E77 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 00005E7E 89D3                <1>     mov ebx, edx
   129 00005E80 50                  <1>     push rax    ;Preserve errorlevel across call
   130 00005E81 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 00005E82 E8A8FCFFFF          <1>     call reallocMemory
   132 00005E87 5B                  <1>     pop rbx
   133 00005E88 58                  <1>     pop rax
   134 00005E89 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 00005E8B 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 00005E8F EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 00005E91 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ;For now, adjust error level in var
   143 00005E93 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   144 00005E95 8625(06070000)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   145 00005E9B F605(8C040000)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   146 00005EA2 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   147 00005EA4 8625(8C040000)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   148 00005EAA C605(06070000)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   149                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   150 00005EB1 8A25(06070000)      <1>     mov ah, byte [exitType] ;Get the exitType
   151                              <1> .storeELvl:
   152 00005EB7 668905(2F040000)    <1>     mov word [errorLevel], ax   ;Store word
   153                              <1> ;rbx points to current PSP
   154                              <1> ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   155 00005EBE 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   156 00005EC5 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt24h]
   157 00005EC9 B024                <1>     mov al, 24h
   158 00005ECB E8D11C0000          <1>     call setIntVector
   159 00005ED0 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt23h]
   160 00005ED4 B023                <1>     mov al, 23h
   161 00005ED6 E8C61C0000          <1>     call setIntVector
   162 00005EDB 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt22h]
   163 00005EDF B022                <1>     mov al, 22h
   164 00005EE1 E8BB1C0000          <1>     call setIntVector
   165                              <1> 
   166 00005EE6 B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   167 00005EE8 CD2A                <1>     int 2Ah
   168 00005EEA C605(96040000)FF    <1>     mov byte [procExiting], -1  ;Critical errors now just return!
   169 00005EF1 B822110000          <1>     mov eax, 1122h              ;Net redir, Process Termination Hook
   170 00005EF6 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   171 00005EFD CD2F                <1>     int 2Fh
   172                              <1> 
   173 00005EFF 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   174 00005F06 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   175 00005F09 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   176 00005F0D 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   177 00005F10 0F848B000000        <1>     je .ownParent   ;No resource freeing if it is its own parent!
   178 00005F16 803D(06070000)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   179 00005F1D 7471                <1>     je .freeOk   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   180                              <1> 
   181                              <1> ;Now close file handles
   182                              <1> ;Close handles in reverse to preserve std handles for if an error again
   183                              <1> ; happens.
   184 00005F1F 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   185 00005F26 0FB75F4E            <1>     movzx ebx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   186 00005F2A 85DB                <1>     test ebx, ebx   ;If its zero, close nothing
   187 00005F2C 741A                <1>     jz .hdlEnd
   188                              <1> .hdlLp:
   189 00005F2E FFCB                <1>     dec ebx
   190 00005F30 53                  <1>     push rbx
   191 00005F31 E882D8FFFF          <1>     call closeFileHdl
   192 00005F36 5B                  <1>     pop rbx
   193 00005F37 85DB                <1>     test ebx, ebx   ;If we're not yet zero, keep closing
   194 00005F39 75F3                <1>     jnz .hdlLp
   195                              <1> ;Now close all network files.
   196 00005F3B B81D110000          <1>     mov eax, 111Dh  ;Signal termination of process! Kill all net files!
   197 00005F40 CD2F                <1>     int 2Fh
   198                              <1> ;Now free share resources for this process
   199 00005F42 FF15(DF000000)      <1>     call qword [closeTaskShare] ;Free all share resources for this process
   200                              <1> .hdlEnd:
   201                              <1> ;Now remove routines exported by this task from internal tables 
   202                              <1> ; (or pause exit until all programs referencing importing the routines
   203                              <1> ;  provided by this DLL have also terminated.)
   204 00005F48 FF15(B7000000)      <1>     call qword [unloadDLLHook]  
   205                              <1>     
   206                              <1> ;Now free MCB's owned by task
   207 00005F4E 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   208                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   209                              <1>     ; with the currentPSP signature and free them.
   210 00005F55 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   211                              <1> .wlkMcb:  ;And walk the chain
   212                              <1> ;First verify the address in rsi is a valid mcb
   213 00005F5C 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   214 00005F5E 80F94D              <1>     cmp cl, mcbMarkCtn
   215 00005F61 7405                <1>     je .checkToFree
   216 00005F63 80F95A              <1>     cmp cl, mcbMarkEnd
   217 00005F66 7528                <1>     jne .freeOk  ;Something wrong so stop freeing
   218                              <1> .checkToFree:
   219 00005F68 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   220 00005F6C 750F                <1>     jne .noFree
   221 00005F6E 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   222 00005F72 53                  <1>     push rbx
   223 00005F73 51                  <1>     push rcx
   224 00005F74 56                  <1>     push rsi
   225 00005F75 E8ADFAFFFF          <1>     call freeMemory ;Free this memory block
   226 00005F7A 5E                  <1>     pop rsi
   227 00005F7B 59                  <1>     pop rcx
   228 00005F7C 5B                  <1>     pop rbx
   229                              <1>     ;If an error occured, the internal vars will be set.
   230                              <1> .noFree:
   231 00005F7D 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   232 00005F80 740E                <1>     je .freeOk          ;Skip if we are
   233 00005F82 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   234 00005F85 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   235 00005F89 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   236 00005F8E EBCC                <1>     jmp short .wlkMcb
   237                              <1> .freeOk:
   238 00005F90 FF15(A7000000)      <1>     call qword [terminateTask]  ;Registers task terminating, no retval
   239 00005F96 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   240 00005F9A 488905(1F040000)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   241                              <1> .ownParent:
   242 00005FA1 B0FF                <1>     mov al, -1  ;Flush all drive buffers
   243 00005FA3 E8B6190000          <1>     call dosCrit1Enter
   244 00005FA8 E8F8A7FFFF          <1>     call flushAllBuffersForDrive
   245 00005FAD E8B6190000          <1>     call dosCrit1Exit
   246 00005FB2 FA                  <1>     cli
   247 00005FB3 C605(96040000)00    <1>     mov byte [procExiting], 0    ;We have exited now!
   248 00005FBA C605(08040000)00    <1>     mov byte [inDOS], 0     ;Exiting DOS now
   249 00005FC1 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Reset error drive
   250 00005FC8 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   251 00005FCF 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]   ;Point rsp to the rsp on entry to DOS call
   252                              <1>     ;Dont touch the previous stack pointer thats left on the stack, only
   253                              <1>     ; the ret ptr and the flags
   254 00005FD3 B022                <1>     mov al, 22h
   255 00005FD5 E8CB140000          <1>     call muxGetIntVector    ;Get return vector in rbx
   256 00005FDA 48895C2448          <1>     mov qword [rsp + callerFrame.rip], rbx
   257 00005FDF 48C744245802020000  <1>     mov qword [rsp + callerFrame.flags], 0202h  ;Mimic safely DOS's ret flags
   258 00005FE8 E843190000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   259 00005FED 48CF                <1>     iretq   ;rsp ends up on the stack of the last entry into DOS
    46                                  %include "./src/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM file. 
    16                              <1> ; If not EXE, we read the filename extension.
    17                              <1> 
    18                              <1> ;If AL = 0 and 4 (if DOSMGR present):
    19                              <1> ;            Load Child Program and Xfr control to it
    20                              <1> ; rbx ------>   |-------------------------------|
    21                              <1> ;               |   Ptr to Environment Block    |
    22                              <1> ;               |                               |
    23                              <1> ;               | Can be 0 => Get pointer to    |
    24                              <1> ;               | parent Environment Block      |
    25                              <1> ;               |-------------------------------|
    26                              <1> ;               |   Ptr to Command Line to be   |
    27                              <1> ;               |   placed at PSP + 80h         |
    28                              <1> ;               |-------------------------------|
    29                              <1> ;               |   Ptr to first default FCB    |
    30                              <1> ;               |      to copy to PSP.fcb1      |
    31                              <1> ;               |                               |
    32                              <1> ;               | Should be used to parse the   |
    33                              <1> ;               |  first two command line args  |
    34                              <1> ;               |-------------------------------|
    35                              <1> ;               |   Ptr to second default FCB   |
    36                              <1> ;               |      to copy to PSP.fcb2      |
    37                              <1> ;               |-------------------------------|
    38                              <1> ;
    39                              <1> ;If AL = 1 :
    40                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    41                              <1> ; rbx ------>   |-------------------------------|
    42                              <1> ;               |         AS IN AL=00H          |
    43                              <1> ;               |-------------------------------|
    44                              <1> ;               |     Initial Value of RSP      |
    45                              <1> ;               |       on program launch       |
    46                              <1> ;               |                               |
    47                              <1> ;               |     This is returned to the   |
    48                              <1> ;               |         caller by DOS         |
    49                              <1> ;               |-------------------------------|
    50                              <1> ;               |     Initial Value of RIP      |
    51                              <1> ;               |       on program launch       |
    52                              <1> ;               |                               |
    53                              <1> ;               |     This is returned to the   |
    54                              <1> ;               |         caller by DOS         |
    55                              <1> ;               |-------------------------------|
    56                              <1> ;
    57                              <1> ;                      !!Important Note!!
    58                              <1> ;   The block pointed to by rbx must reserve the space for 
    59                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    60                              <1> ;
    61                              <1> ;If AL = 3 :
    62                              <1> ;                      Load program overlay
    63                              <1> ; rbx ------>   |-------------------------------|
    64                              <1> ;               |  Pointer to the byte in the   |
    65                              <1> ;               |  prog space to start writing  |
    66                              <1> ;               |        the overlay at.        |
    67                              <1> ;               |-------------------------------|
    68                              <1> ;               | QWORD value used as the base  |
    69                              <1> ;               |   address for relocation      |
    70                              <1> ;               |   computations. In most cases |
    71                              <1> ;               |   should be the same as the   |
    72                              <1> ;               |   load pointer. The desired   |
    73                              <1> ;               |   load address is subtracted  |
    74                              <1> ;               |   from this value to generate |
    75                              <1> ;               |   a valid relocation factor,  |
    76                              <1> ;               |   much like for normal load   |
    77                              <1> ;               |   but here we are controlling |
    78                              <1> ;               |    precisely the factor by    |
    79                              <1> ;               |     which we relocate the     |
    80                              <1> ;               |           symbols.            |
    81                              <1> ;               |  (Called a Relocation Factor) |
    82                              <1> ;               |     Only FOR EXE Overlays.    |
    83                              <1> ;               |    For COM, 0 is sufficient.  |
    84                              <1> ;               |-------------------------------|
    85                              <1> ; For AL = 3: Both pointers must be aligned to section alignment.
    86                              <1> ;   If this is not the case, DOS will round UP both pointers to the 
    87                              <1> ;   section alignment for the file being loaded. 
    88                              <1> ; The overlay will be loaded so that the first byte at the start of the memory
    89                              <1> ; block is the first byte of the first section of the executable. No header
    90                              <1> ; information will be retained. Thus, (for now) overlays cannot be used to export 
    91                              <1> ; functions or import functions from DLLs. Furthermore, it is HIGHLY recommended
    92                              <1> ; that you compile any .EXE overlays to have a section alignment of 1 byte.
    93                              <1> ;
    94                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    95                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    96                              <1> ;
    97                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    98 00005FEF 55                  <1>     push rbp
    99 00005FF0 4889E5              <1>     mov rbp, rsp
   100 00005FF3 4881EC80000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   101                              <1>     ;Clear up the pointers on the stack frame
   102 00005FFA 31C9                <1>     xor ecx, ecx
   103 00005FFC 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   104 00006000 48894DD0            <1>     mov qword [rbp - execFrame.pEnvBase], rcx
   105 00006004 48894DC0            <1>     mov qword [rbp - execFrame.pProgBase], rcx
   106 00006008 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   107 0000600C 48894D98            <1>     mov qword [rbp - execFrame.pProgEP], rcx
   108                              <1> 
   109 00006010 B403                <1>     mov ah, execOverlay
   110 00006012 F605(9E000000)FF    <1>     test byte [dosMgrPresent], -1 ;If bits set, change max to execBkgrnd
   111 00006019 7402                <1>     jz short .noMulti
   112 0000601B B404                <1>     mov ah, execBkgrnd
   113                              <1> .noMulti:
   114 0000601D 38E0                <1>     cmp al, ah
   115 0000601F 7615                <1>     jbe .validSubfunction
   116                              <1> .badSubFunction:
   117 00006021 B801000000          <1>     mov eax, errInvFnc
   118 00006026 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   119                              <1> .badExit:
   120 0000602D 4889EC              <1>     mov rsp, rbp
   121 00006030 5D                  <1>     pop rbp
   122 00006031 E973190000          <1>     jmp extErrExit
   123                              <1> 
   124                              <1> .validSubfunction:
   125 00006036 3C02                <1>     cmp al, execInvld
   126 00006038 74E7                <1>     je .badSubFunction
   127                              <1>     ;Save registers for each function call
   128 0000603A 48895DE0            <1>     mov qword [rbp - execFrame.pParam], rbx
   129 0000603E 488955D8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   130 00006042 0FB6C0              <1>     movzx eax, al
   131 00006045 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   132 00006049 4889D7              <1>     mov rdi, rdx
   133 0000604C E8FF150000          <1>     call strlen ;Get string length in cx
   134 00006051 66894DE8            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   135                              <1> ;Now open the file we wanna launch
   136 00006055 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   137 00006057 55                  <1>     push rbp    ;Preserve local frame ptr
   138 00006058 B923000000          <1>     mov ecx, 23h    ;Tell server to open for exec. No writing or sharing!
   139 0000605D E815D6FFFF          <1>     call openFileHdl
   140 00006062 5D                  <1>     pop rbp
   141 00006063 72C8                <1>     jc .badExit ;Exit preserving error code in al
   142                              <1>     ;Now ax has the file handle
   143 00006065 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   144 00006069 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   145 0000606C E82FF2FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   146 00006071 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   147 00006075 F7C280000000        <1>     test edx, devCharDev
   148 0000607B 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   149 0000607D B002                <1>     mov al, errFnf
   150 0000607F E922060000          <1>     jmp .cleanAndFail
   151                              <1> .validDiskFile:
   152 00006084 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   153 0000608C 0F8489000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   154                              <1> ;If we get an instruction to copy parent env, we do that. If the 
   155                              <1> ; parent ptr is a special NULL value, then we leave the NULL value
   156                              <1> ; in place in the execFrame envPtr var. Else, we use the parent
   157                              <1> ; env pointer as the source of our copy.
   158 00006092 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   159 00006096 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   160 00006099 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. copy parent env)
   161 0000609C 7510                <1>     jnz short .copyEnvironmentBlock
   162 0000609E 488B35(1F040000)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   163 000060A5 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get ptr to env src from parent env
   164 000060A9 4885C0              <1>     test rax, rax   ;Was parent ptr 0? If so, skip allocing new env.
   165 000060AC 746D                <1>     jz short .loadProgram ;This is used by the boot process!!
   166                              <1> .copyEnvironmentBlock:
   167 000060AE 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   168                              <1> ;Get the length of the environment
   169 000060B1 B9FF7F0000          <1>     mov ecx, 7fffh  ;32kb limit for env size
   170 000060B6 31C0                <1>     xor eax, eax
   171 000060B8 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   172                              <1> .envVerifyLp:
   173 000060BB F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   174 000060BD 7531                <1>     jnz short .invalidEnvironmentError
   175 000060BF 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   176 000060C2 FFC9                <1>     dec ecx
   177 000060C4 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   178 000060C5 75F4                <1>     jnz short .envVerifyLp
   179                              <1> 
   180 000060C7 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   181 000060CA 57                  <1>     push rdi     ;Save the length of the environment block
   182 000060CB 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   183 000060D1 0FB75DE8            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   184 000060D5 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   185 000060D7 89FB                <1>     mov ebx, edi
   186 000060D9 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   187 000060DC 55                  <1>     push rbp
   188 000060DD E841F7FFFF          <1>     call allocateMemory
   189 000060E2 5D                  <1>     pop rbp
   190 000060E3 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   191 000060E4 7314                <1>     jnc short .copyEnvironment
   192                              <1>     ;Fall thru if not enuff memory
   193                              <1> .insufficientMemory:
   194 000060E6 B808000000          <1>     mov eax, errNoMem
   195 000060EB E9B6050000          <1>     jmp .cleanAndFail
   196                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   197 000060F0 B80A000000          <1>     mov eax, errBadEnv
   198 000060F5 E9AC050000          <1>     jmp .cleanAndFail
   199                              <1> 
   200                              <1> .copyEnvironment:
   201                              <1>     ;rax has the ptr to allocated memory block
   202                              <1>     ;rcx has the number of chars to copy from the source env block
   203 000060FA 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   204 000060FD 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   205 00006101 488B75E0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   206 00006105 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   207 00006108 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   208 0000610A B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   209 0000610F 66AB                <1>     stosw       ;Away you go!
   210 00006111 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   211 00006115 0FB74DE8            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   212 00006119 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   213                              <1> ;Done with the environment... more or less
   214                              <1> .loadProgram:
   215 0000611B B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   216 00006120 488D15(1E050000)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   217 00006127 E896050000          <1>     call .readDataFromHdl
   218 0000612C 0F826F050000        <1>     jc .badFmtErr
   219 00006132 85C0                <1>     test eax, eax   ;Were zero bytes read?
   220 00006134 0F8467050000        <1>     jz .badFmtErr
   221 0000613A 3D40000000          <1>     cmp eax, imageDosHdr_size
   222 0000613F 0F826F030000        <1>     jb .loadCom
   223                              <1> 
   224 00006145 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   225 0000614A 740B                <1>     je .proceedEXE
   226 0000614C 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   227 00006151 0F855D030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   228                              <1> .proceedEXE:
   229                              <1>     ;Now we need to read e_lfanew
   230 00006157 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   231 00006158 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   232 0000615B 8955B0              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   233 0000615E 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   234 00006160 30C0                <1>     xor al, al  ;Set file pointer from start of file
   235 00006162 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   236 00006166 E837D7FFFF          <1>     call lseekHdl   ;Move to that position in the file
   237 0000616B 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   238 0000616C B918000000          <1>     mov ecx, imageFileHeader_size
   239 00006171 E84C050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   240 00006176 85C0                <1>     test eax, eax   ;Were zero bytes read?
   241 00006178 0F8423050000        <1>     jz .badFmtErr
   242 0000617E 3D18000000          <1>     cmp eax, imageFileHeader_size
   243 00006183 0F8218050000        <1>     jb .badFmtErr
   244                              <1>     ;So now rdx points to the imageFileHeader
   245 00006189 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   246 0000618F 0F850C050000        <1>     jne .badFmtErr
   247 00006195 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   248 0000619B 0F8500050000        <1>     jne .badFmtErr
   249                              <1>     ;Check the binary is executable
   250 000061A1 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   251 000061A5 66A90200            <1>     test ax, imageFileExecutable
   252 000061A9 0F84F2040000        <1>     jz .badFmtErr
   253 000061AF 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   254                              <1> 
   255 000061B3 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   256 000061B9 0F82E2040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   257                              <1>     ;Now save the number of sections in the the file
   258 000061BF 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   259 000061C3 85C0                <1>     test eax, eax   ;If this is 0, what?
   260 000061C5 0F84D6040000        <1>     jz .badFmtErr
   261 000061CB 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   262                              <1>     ;Now load Optional header, file ptr points to it so all good!
   263 000061CF B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   264                              <1>     ;rdx points to exeHdrSpace
   265 000061D4 E8E9040000          <1>     call .readDataFromHdl
   266 000061D9 85C0                <1>     test eax, eax   ;Were zero bytes read?
   267 000061DB 0F84C0040000        <1>     jz .badFmtErr
   268 000061E1 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   269 000061E6 0F82B5040000        <1>     jb .badFmtErr
   270                              <1>     ;Now File Ptr points to data dirs, not an issue
   271 000061EC 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   272                              <1>     ;We load the program in, one section at a time, reading section headers in
   273                              <1>     ; one at a time to the section header internal buffer.
   274 000061F3 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   275 000061FB 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   276 000061FD 8B1D(56050000)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   277 00006203 488B05(6E050000)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackCommit]
   278 0000620A 4885C0              <1>     test rax, rax
   279 0000620D 750A                <1>     jnz .notDefaultStackAlloc
   280 0000620F 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   280 00006218 00                  <1>
   281                              <1> .notDefaultStackAlloc:
   282 00006219 01C3                <1>     add ebx, eax    ;Add stack allocation
   283 0000621B 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   284                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   285                              <1>     ; section aligned and so we will need to align before reading, to 
   286                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   287 00006221 031D(3E050000)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   288 00006227 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   289 0000622A 81C311000000        <1>     add ebx, 11h
   290 00006230 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   291 00006233 55                  <1>     push rbp
   292 00006234 E8EAF5FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   293 00006239 5D                  <1>     pop rbp
   294 0000623A 0F82A6FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   295 00006240 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   296 00006244 480500010000        <1>     add rax, psp_size
   297 0000624A 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of exe hdr goes here
   298                              <1>     ;Finally, just check that we have some code to execute. 
   299                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   300 0000624E 813D(22050000)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   300 00006256 0000                <1>
   301 00006258 0F8443040000        <1>     je .badFmtErr   ;If no bytes, exit error
   302 0000625E EB0B                <1>     jmp short .exeProceed1
   303                              <1> .exeOvlySkipAlloc:
   304 00006260 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   305 00006264 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   306 00006267 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   307                              <1> .exeProceed1:
   308                              <1> ;===========================================================================
   309                              <1>     ;The below blocks are being kept because they can be turned on later
   310                              <1>     ; to change this exe loader to force section alignment of the 
   311                              <1>     ; base load address. It appears there is no need to enforce that the 
   312                              <1>     ; base load address be section aligned, but individual sections need
   313                              <1>     ; to adhere to the section alignment requirements thereafter. 
   314                              <1>     ;Finally, the pProgBase gets rescaled so that the first byte of the 
   315                              <1>     ; first section gets places at the load address and not at some
   316                              <1>     ; offset from it (as is usually the case, offset 1000h).
   317                              <1> ;===========================================================================
   318                              <1>     ;=======================================================================
   319                              <1>     ;Now we align the progBase to full header size aligned to the next page
   320                              <1>     ;mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   321                              <1>     ;add rax, rbx    ;Add this offset where the header should go in future
   322                              <1>     ;=======================================================================
   323                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   324                              <1>     ;It appears that the load address does NOT need to be aligned at all xD
   325                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   326                              <1>     ;Now we section pad. Once aligned, that is the program base address!
   327                              <1>     ;push rax
   328                              <1>     ;mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   329                              <1>     ;dec ecx ;Turn into a mask
   330                              <1>     ;and rax, rcx    ;Compute ptr modulo mask
   331                              <1>     ;inc ecx
   332                              <1>     ;sub rcx, rax
   333                              <1>     ;pop rdi
   334                              <1>     ;xor eax, eax
   335                              <1>     ;rep stosb
   336                              <1>     ;mov qword [rbp - execFrame.pProgBase], rdi
   337                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   338                              <1> 
   339                              <1>     ;So now copy one section at a time, read section header in
   340                              <1>     ;File pointer points to the directory table, so skip that
   341 0000626B 8B15(8A050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   342                              <1>     ;Load however many directories we have into place
   343                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   344 00006271 C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   345 00006274 31C9                <1>     xor ecx, ecx
   346 00006276 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   347 0000627A B001                <1>     mov al, 1   ;Move handle forwards from current position
   348 0000627C E821D6FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   349                              <1>     ;eax has pointer location after adjustment
   350 00006281 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   351                              <1>     ;File now points to start of Section headers. Read first header in.
   352                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   353 00006284 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   354 00006288 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   355 0000628C 31F6                <1>     xor esi, esi    ;Use as an indicator for the first data segment. 
   356 0000628E 488975A8            <1>     mov qword [rbp - execFrame.bSegCount], rsi  ;Clear the segment counter
   357                              <1> .loadLp:
   358 00006292 51                  <1>     push rcx    ;Save # of segments left on stack
   359 00006293 57                  <1>     push rdi    ;Save the current buffer ptr here
   360 00006294 B928000000          <1>     mov ecx, imageSectionHdr_size
   361 00006299 488D15(9E050000)    <1>     lea rdx, sectHdr    ;Read section headers here
   362 000062A0 E81D040000          <1>     call .readDataFromHdl
   363 000062A5 5F                  <1>     pop rdi
   364 000062A6 59                  <1>     pop rcx
   365 000062A7 85C0                <1>     test eax, eax
   366 000062A9 0F84F2030000        <1>     jz .badFmtErr
   367 000062AF 3D28000000          <1>     cmp eax, imageSectionHdr_size
   368 000062B4 0F85E7030000        <1>     jne .badFmtErr
   369                              <1>     ;File ptr moved forwards to next section header
   370 000062BA 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   371                              <1>     ;Section header read, now we load section into memory
   372                              <1>     ;Move file ptr to data location
   373 000062C1 8B15(B2050000)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   374 000062C7 85D2                <1>     test edx, edx
   375 000062C9 744B                <1>     jz short .skipRawPtrMove
   376 000062CB 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   377 000062CF 31C0                <1>     xor eax, eax    ;Seek from start of file
   378 000062D1 51                  <1>     push rcx
   379 000062D2 57                  <1>     push rdi
   380 000062D3 E8CAD5FFFF          <1>     call lseekHdl
   381 000062D8 5F                  <1>     pop rdi
   382 000062D9 59                  <1>     pop rcx
   383                              <1>     ;Is this a overlay load?
   384 000062DA 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   385 000062E2 7532                <1>     jne short .skipRawPtrMove
   386                              <1>     ;Here we rescale to put the first byte at pLoadLoc and use the 
   387                              <1>     ; rescale value against RelocFct to compute the qRelocVal for later
   388                              <1>     ;Is this is the first segment with data being read into memory?
   389 000062E4 48FF45A8            <1>     inc qword [rbp - execFrame.bSegCount]
   390 000062E8 48817DA801000000    <1>     cmp qword [rbp - execFrame.bSegCount], 1 
   391 000062F0 7524                <1>     jne short .skipRawPtrMove   ;If not, skip
   392                              <1>     ;Now rebase the program to point the first byte of the first
   393                              <1>     ; section at the ProgBase.
   394 000062F2 51                  <1>     push rcx
   395 000062F3 57                  <1>     push rdi
   396 000062F4 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Get the load address
   397 000062F8 8B0D(AA050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualAddress]
   398 000062FE 4829CF              <1>     sub rdi, rcx    ;Rebase by offset of the first section
   399 00006301 48897DC0            <1>     mov qword [rbp - execFrame.pProgBase], rdi 
   400 00006305 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam]
   401 00006309 488B7F08            <1>     mov rdi, qword [rdi + loadOvly.qRelocFct]   ;Get the reload factor
   402 0000630D 4829CF              <1>     sub rdi, rcx    ;Now rescale the relocation factor by the same amount
   403 00006310 48897D88            <1>     mov qword [rbp - execFrame.qRelocVal], rdi  ;Now store this value for later
   404 00006314 5F                  <1>     pop rdi
   405 00006315 59                  <1>     pop rcx
   406                              <1> .skipRawPtrMove:
   407 00006316 51                  <1>     push rcx
   408 00006317 31FF                <1>     xor edi, edi
   409 00006319 8B3D(AA050000)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   410 0000631F 48037DC0            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   411                              <1>     ;If a section has a virtual address outside of the allocation arena
   412                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   413                              <1>     ; next section.
   414 00006323 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   415 00006327 4885D2              <1>     test rdx, rdx   ;If this is 0 (as in the case of overlay)...
   416 0000632A 7432                <1>     jz short .okToLoad  ;skip this as it is assumed there is enough space!
   417 0000632C 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   418 00006333 31C9                <1>     xor ecx, ecx
   419 00006335 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   420 00006338 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   421 0000633C 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   422 00006343 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   423 00006346 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   424 00006349 7713                <1>     ja short .okToLoad
   425                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   426                              <1> 
   427                              <1>     ;V-0000000000-EARMARK FOR REMOVAL-0000000000-V
   428 0000634B F705(C2050000)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   428 00006353 0000                <1>
   429 00006355 0F8546030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   430                              <1>     ;^-0000000000-EARMARK FOR REMOVAL-0000000000-^
   431                              <1> 
   432                              <1>     ;Else, just skip this section, goto next section
   433 0000635B 59                  <1>     pop rcx
   434 0000635C EB3F                <1>     jmp short .gotoNextSection
   435                              <1> .okToLoad:
   436 0000635E 8B0D(A6050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   437 00006364 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   438 00006367 57                  <1>     push rdi    ;Save section in memory locally
   439 00006368 E855030000          <1>     call .readDataFromHdl
   440 0000636D 5F                  <1>     pop rdi
   441 0000636E 59                  <1>     pop rcx     ; Matches push after skipRawPtrMove
   442 0000636F 0F822C030000        <1>     jc .badFmtErr
   443                              <1>     ;Don't check for a zero section read as empty sections may be present!
   444 00006375 3B05(A6050000)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   445 0000637B 0F8520030000        <1>     jne .badFmtErr
   446                              <1>     ;Data read ok, now fill in any zeros needed
   447 00006381 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   448                              <1> 
   449 00006384 51                  <1>     push rcx
   450                              <1>     ;Here do section padding
   451 00006385 4889F8              <1>     mov rax, rdi    ;Get the current address
   452 00006388 8B0D(3E050000)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   453 0000638E FFC9                <1>     dec ecx ;Turn into a mask
   454 00006390 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   455 00006393 FFC1                <1>     inc ecx
   456 00006395 4829C1              <1>     sub rcx, rax
   457 00006398 31C0                <1>     xor eax, eax
   458 0000639A F3AA                <1>     rep stosb
   459 0000639C 59                  <1>     pop rcx
   460                              <1> .gotoNextSection:
   461 0000639D FFC9                <1>     dec ecx ;Decrement our section counter
   462 0000639F 7419                <1>     jz short .doExeFixups
   463                              <1>     ;Read next section header in here
   464 000063A1 51                  <1>     push rcx
   465 000063A2 57                  <1>     push rdi
   466 000063A3 30C0                <1>     xor al, al  ;Move rel start of file
   467 000063A5 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   468 000063A8 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   469 000063AC 31C9                <1>     xor ecx, ecx
   470 000063AE E8EFD4FFFF          <1>     call lseekHdl
   471 000063B3 5F                  <1>     pop rdi
   472 000063B4 59                  <1>     pop rcx
   473 000063B5 E9D8FEFFFF          <1>     jmp .loadLp
   474                              <1> .doExeFixups:
   475                              <1> ;Here we fixup addresses if needed
   476                              <1> ;If the program is loaded at its desired location never need to relocate.
   477                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   478                              <1> ;   If the program has had it's .reloc section stripped by the linker
   479                              <1> ;       or has no .reloc directory, we fail
   480                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   481                              <1> ;       relocations anyway.
   482                              <1> 
   483                              <1> ;If program base = desired load, skip relocs
   484 000063BA 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   485 000063BE 483B15(36050000)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   486 000063C5 0F84CA000000        <1>     je .exeComplete
   487                              <1> ;If program has had relocs stripped, fail
   488 000063CB 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   489 000063CF 66A90100            <1>     test ax, imageFileRelocsStripped
   490 000063D3 0F85C8020000        <1>     jnz .badFmtErr
   491                              <1> ;If program has no .reloc section, fail
   492 000063D9 8B15(8A050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   493 000063DF 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   494 000063E5 0F82B6020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   495                              <1> ;Now we get the reloc section
   496 000063EB 8B55B0              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   497 000063EE 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   498                              <1>     ;eax now points to position in file of directory entry for reloc
   499 000063F4 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   500 000063F8 31C0                <1>     xor eax, eax
   501 000063FA E8A3D4FFFF          <1>     call lseekHdl   ;Move handle there in file
   502 000063FF 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   503 00006402 B908000000          <1>     mov ecx, imageDataDirectory_size
   504                              <1>     ;Read 8 bytes into sectHdr space
   505 00006407 488D15(9E050000)    <1>     lea rdx, sectHdr
   506 0000640E E8AF020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   507 00006413 85C0                <1>     test eax, eax
   508 00006415 0F8486020000        <1>     jz .badFmtErr
   509 0000641B 39C8                <1>     cmp eax, ecx
   510 0000641D 0F857E020000        <1>     jne .badFmtErr
   511                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   512 00006423 8B35(9E050000)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   513 00006429 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   514 0000642B 7468                <1>     jz .exeComplete   ;... including if overlay
   515 0000642D 480375C0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   516                              <1>     ;Now rsi points to where in memory the relocation data table is
   517                              <1>     ;Now compute the relocation factor =
   518                              <1>     ;   Difference from the load address and prefered
   519 00006431 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   520 00006435 482B05(36050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   521 0000643C 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   522 00006444 750F                <1>     jne short .notOverlayReloc
   523                              <1>     ;For overlays, we use the relocation factor as the base of computation.
   524                              <1>     ;Thus now the relocation factor becomes the ProgBase.
   525                              <1>     ;This should be the same as ProgBase anyway for overlays.
   526 00006446 488B4588            <1>     mov rax, qword [rbp - execFrame.qRelocVal]   ;Get the overlay reloc factor
   527 0000644A 482B05(36050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   528                              <1>     ;Store this as the overlay program base
   529 00006451 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   530                              <1> .notOverlayReloc:
   531 00006455 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   532                              <1>     ;rsi points to relocation data table in memory
   533 00006458 8B0D(A2050000)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   534 0000645E 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   535 00006460 7433                <1>     jz .exeComplete
   536                              <1>     ;rsi points to the first base relocation block. The relocations begin
   537                              <1>     ; after the first block
   538                              <1>     ;ecx has the number of base relocation blocks to process.
   539                              <1> .nextBlock:
   540 00006462 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   541 00006463 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   542 00006465 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   543 00006469 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   544 0000646C 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   545 0000646F 67E31E              <1>     jecxz .blockDone    
   546 00006472 81E908000000        <1>     sub ecx, 8
   547 00006478 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   548 0000647F D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   549                              <1> .blockNotDone:
   550 00006481 66AD                <1>     lodsw   ;Get the next page offset word
   551 00006483 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   552                              <1>     ;rdi points to base, rax give offset into 4Kb page
   553 00006488 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   554 0000648C FFC9                <1>     dec ecx
   555 0000648E 75F1                <1>     jnz .blockNotDone
   556                              <1> .blockDone:
   557 00006490 59                  <1>     pop rcx
   558 00006491 FFC9                <1>     dec ecx
   559 00006493 75CD                <1>     jnz .nextBlock
   560                              <1> .exeComplete:
   561 00006495 8B05(2E050000)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   562                              <1>     ;Now get EP relative to the (rescaled) load address.
   563 0000649B 480345C0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   564 0000649F 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   565 000064A3 FF15(AF000000)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   566 000064A9 0F82F2010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   567 000064AF E9CC000000          <1>     jmp .buildChildPSP
   568                              <1> .loadCom:
   569                              <1>     ;File is open here, so just read the file into memory. 
   570                              <1>     ;The file cannot exceed 64Kb in size.
   571                              <1>     ;Allocate 64Kb of memory, or as much as we can
   572 000064B4 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   573 000064BC 745C                <1>     je .comOverlay
   574 000064BE BBF0FF0000          <1>     mov ebx, 0FFF0h ;64Kb - 16 bytes, give me FFF0h bytes
   575 000064C3 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   576 000064C6 C1EB04              <1>     shr ebx, 4      ;Convert to paragraphs
   577 000064C9 55                  <1>     push rbp
   578 000064CA E854F3FFFF          <1>     call allocateMemory
   579 000064CF 5D                  <1>     pop rbp
   580 000064D0 7355                <1>     jnc .comallocOk
   581 000064D2 3C08                <1>     cmp al, errNoMem
   582 000064D4 0F85CC010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   583                              <1>     ;rbx should have the amount available in paragraphs
   584 000064DA 09DB                <1>     or ebx, ebx ;Clear the upper dword
   585 000064DC 48C1E304            <1>     shl rbx, 4
   586                              <1>     ;We check if this value is psp_size more than filesize
   587 000064E0 53                  <1>     push rbx    ;Save new minimum size
   588 000064E1 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   589 000064E6 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   590 000064EA 31D2                <1>     xor edx, edx    ;Go to end of file
   591 000064EC E8B1D3FFFF          <1>     call lseekHdl
   592                              <1>     ;eax has file size
   593 000064F1 5B                  <1>     pop rbx ;Get back max alloc size
   594 000064F2 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   595 000064F4 29C2                <1>     sub edx, eax
   596 000064F6 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   597 000064FC 0F82E4FBFFFF        <1>     jb .insufficientMemory   ;Fail
   598 00006502 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   599 00006505 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   600 00006508 55                  <1>     push rbp
   601 00006509 E815F3FFFF          <1>     call allocateMemory
   602 0000650E 5D                  <1>     pop rbp
   603 0000650F 0F8291010000        <1>     jc .cleanAndFail
   604 00006515 E90D000000          <1>     jmp .comallocOk
   605                              <1> .comOverlay:
   606                              <1>     ;Here we simply read the file into the buffer provided
   607 0000651A 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   608 0000651E 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   609 00006521 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   610 00006525 EB0A                <1>     jmp short .comRead
   611                              <1> .comallocOk:
   612                              <1>     ;rax should point to the first byte
   613 00006527 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   614 0000652B 480500010000        <1>     add rax, psp_size
   615                              <1> .comRead:
   616 00006531 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   617                              <1> 
   618 00006535 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   619 0000653A 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   620 0000653E 31D2                <1>     xor edx, edx    ;Go to end of file
   621 00006540 E85DD3FFFF          <1>     call lseekHdl
   622                              <1>     ;eax has filesize now
   623 00006545 50                  <1>     push rax    ;Save filesize
   624 00006546 31C0                <1>     xor eax, eax    ;Reposition to start of file
   625 00006548 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   626 0000654C 31D2                <1>     xor edx, edx    ;Go to start of file
   627 0000654E E84FD3FFFF          <1>     call lseekHdl
   628 00006553 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   629 00006554 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   630 0000655C 7411                <1>     je .comOverlay2
   631                              <1>     ;Now we check if the space we have available is sufficient to load
   632                              <1>     ; the program. Skipped if an overlay being loaded
   633                              <1>     ;ecx = # File size
   634 0000655E 8B55B8              <1>     mov edx, dword [rbp - execFrame.dProgSize]  ;Get the alloc space size
   635 00006561 81EA00010000        <1>     sub edx, psp_size
   636 00006567 39CA                <1>     cmp edx, ecx    ;Do we have space for the PSP and program?
   637 00006569 0F8277FBFFFF        <1>     jb .insufficientMemory
   638                              <1> .comOverlay2:
   639 0000656F 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   640 00006573 E84A010000          <1>     call .readDataFromHdl   ;Read from the file handle
   641 00006578 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   642 0000657C 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   643                              <1> .buildChildPSP:
   644                              <1>     ;We can close handle now
   645 00006580 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   646 00006584 55                  <1>     push rbp
   647 00006585 E82ED2FFFF          <1>     call closeFileHdl   ;Close the file
   648 0000658A 5D                  <1>     pop rbp
   649                              <1> 
   650                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   651 0000658B 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   652 00006593 0F84E5000000        <1>     je .overlayExit
   653                              <1>     ;Now build the PSP
   654 00006599 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   655 0000659C 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   656 000065A0 52                  <1>     push rdx
   657 000065A1 55                  <1>     push rbp
   658 000065A2 E8DCF7FFFF          <1>     call createPSP
   659 000065A7 5D                  <1>     pop rbp
   660 000065A8 5A                  <1>     pop rdx
   661                              <1> 
   662                              <1> ;Now copy the environment block ptr over. 
   663                              <1> ;Stores the null ptr that is our pointer (special init case)
   664 000065A9 488B5DD0            <1>     mov rbx, qword [rbp - execFrame.pEnvBase]
   665                              <1> ;    test rbx, rbx
   666                              <1> ;    jz short .skipEnvCopy
   667 000065AD 48895A3E            <1>     mov qword [rdx + psp.envPtr], rbx
   668                              <1> ;.skipEnvCopy:
   669                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   670 000065B1 488915(1F040000)    <1>     mov qword [currentPSP], rdx
   671 000065B8 E8A1130000          <1>     call dosCrit1Enter
   672 000065BD E827010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   673                              <1> 
   674 000065C2 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   675 000065C9 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;and set it!
   676                              <1> 
   677                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   678                              <1>     ; and set FS to point to the PSP
   679 000065D0 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   680                              <1> 
   681 000065D4 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   682 000065D8 B925000000          <1>     mov ecx, fcb_size
   683 000065DD 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   684 000065E1 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   685 000065E3 F3A4                <1>     rep movsb   ;Copy fcb 1 over
   686 000065E5 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   687 000065E9 B925000000          <1>     mov ecx, fcb_size
   688 000065EE 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   689 000065F2 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   690 000065F4 F3A4                <1>     rep movsb   ;Copy fcb 2 over
   691 000065F6 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   692 000065FA 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   693 00006601 B980000000          <1>     mov ecx, 80h
   694 00006606 F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   695                              <1> 
   696 00006608 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   697 0000660A 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   698                              <1> 
   699                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   700 0000660D 88D8                <1>     mov al, bl
   701 0000660F 30DB                <1>     xor bl, bl
   702 00006611 E8E10E0000          <1>     call getCDSNotJoin
   703 00006616 7302                <1>     jnc .drive1Ok
   704 00006618 B3FF                <1>     mov bl, -1
   705                              <1> .drive1Ok:
   706 0000661A 88F8                <1>     mov al, bh
   707 0000661C 30FF                <1>     xor bh, bh
   708 0000661E E8D40E0000          <1>     call getCDSNotJoin
   709 00006623 7302                <1>     jnc .drive2Ok
   710 00006625 B7FF                <1>     mov bh, -1
   711                              <1> .drive2Ok:
   712                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   713                              <1>     ;rdi has pointer to psp
   714 00006627 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   715                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   716 0000662A 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   717 0000662F 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   717 00006638 FF                  <1>
   718 00006639 4821C6              <1>     and rsi, rax    ;To align downwards
   719                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   720                              <1>     ;That is the job of the runtime to handle.
   721                              <1> ;Registers carrying data at this point:
   722                              <1> ;bx = FCB drive statuses
   723                              <1> ;rsi = Stack Base
   724                              <1> ;rbp = execFrame
   725 0000663C 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   726 00006640 750B                <1>     jne short .noBg
   727                              <1>     ;Get termination mode in ecx before xfring control to dosmgr
   728 00006642 56                  <1>     push rsi
   729 00006643 E88B0E0000          <1>     call getUserRegs
   730 00006648 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]  ;Get termination mode
   731 0000664C 5E                  <1>     pop rsi
   732                              <1> .noBg:
   733 0000664D FF15(9F000000)      <1>     call qword [launchTask]
   734 00006653 7251                <1>     jc short .cleanAndFail
   735                              <1> ;Final step: Transfer control
   736 00006655 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   737 00006659 742C                <1>     je .xfrProgram
   738 0000665B 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   739 0000665F 741D                <1>     je .overlayExit ;Skip the below for background tasks
   740 00006661 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   741 00006665 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   742 00006669 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   743 0000666D 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   744 00006670 4881EE08000000      <1>     sub rsi, 8  ;Now go down one so that we can pop the AX value from the stack
   745 00006677 488906              <1>     mov qword [rsi], rax    ;Store the FCB status on the top of stack for AH=01h
   746 0000667A 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   747                              <1> .overlayExit:
   748 0000667E 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   749 00006681 5D                  <1>     pop rbp ;Point rsp to the return address
   750 00006682 E914130000          <1>     jmp extGoodExit ;And return!
   751                              <1> .xfrProgram:
   752 00006687 FA                  <1>     cli
   753 00006688 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   754 0000668B C605(08040000)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   755 00006692 FB                  <1>     sti
   756                              <1> 
   757 00006693 57                  <1>     push rdi    ;Push &psp[0] onto the stack to allow for ret exit
   758 00006694 FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   759 00006697 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   760 0000669A 4989F9              <1>     mov r9, rdi
   761 0000669D 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   762                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 000066A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   763                              <1> ;r8 is guaranteed to have a copy of the PSP.
   764                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   765                              <1> ;Everything else is optional and potentially changable at a later stage
   766                              <1> 
   767                              <1> .badFmtErr:
   768 000066A1 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   769                              <1> .cleanAndFail:
   770                              <1> ;Close the open file and any open resources and fail
   771 000066A6 E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   772 000066AB E8B8120000          <1>     call dosCrit1Exit
   773 000066B0 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   774 000066B4 50                  <1>     push rax    ;Save error code
   775 000066B5 55                  <1>     push rbp
   776 000066B6 E8FDD0FFFF          <1>     call closeFileHdl
   777 000066BB 5D                  <1>     pop rbp
   778 000066BC 58                  <1>     pop rax
   779 000066BD E96BF9FFFF          <1>     jmp .badExit
   780                              <1> 
   781                              <1> .readDataFromHdl:
   782                              <1> ;Input: ecx = Number of bytes to transfer
   783                              <1> ;       rdx = Ptr to the buffer to use
   784 000066C2 52                  <1>     push rdx
   785 000066C3 E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   786 000066C8 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   787 000066CC 55                  <1>     push rbp
   788 000066CD E824D1FFFF          <1>     call readFileHdl
   789 000066D2 5D                  <1>     pop rbp
   790 000066D3 E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   791 000066D8 5A                  <1>     pop rdx
   792                              <1>     return
    13                              <2> %%_ret:
    14 000066D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .clearArenaOwner:
   794 000066DA 53                  <1>     push rbx
   795 000066DB 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   796 000066DD E87C120000          <1>     call dosCrit1Enter
   797 000066E2 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   798 000066E7 5B                  <1>     pop rbx
   799                              <1>     return
    13                              <2> %%_ret:
    14 000066E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   800                              <1> .setPSPArenaOwner:
   801                              <1> ;Sets the current PSP as the arena owner
   802 000066E9 53                  <1>     push rbx
   803 000066EA 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   804 000066F1 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   805 000066F6 E86D120000          <1>     call dosCrit1Exit
   806 000066FB 5B                  <1>     pop rbx
   807                              <1>     return
    13                              <2> %%_ret:
    14 000066FC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   808                              <1> .setProgOrEnvArenaOwnerToRBX:
   809                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   810 000066FD 9C                  <1>     pushfq
   811 000066FE 50                  <1>     push rax
   812                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   813                              <1>     ;This is because they are set up at separate points in the routine!
   814 000066FF 488B45C8            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   815 00006703 E80C000000          <1>     call .writeArenaHeaderOwner
   816 00006708 488B45D0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   817 0000670C E803000000          <1>     call .writeArenaHeaderOwner
   818 00006711 58                  <1>     pop rax
   819 00006712 9D                  <1>     popfq
   820                              <1>     return
    13                              <2> %%_ret:
    14 00006713 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   821                              <1> .writeArenaHeaderOwner:
   822                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   823                              <1> ;       rbx = Owner ID
   824 00006714 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   825                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006717 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006719 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   826 0000671A 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   827 00006720 48895801            <1>     mov qword [rax + 1], rbx
   828                              <1>     return
    13                              <2> %%_ret:
    14 00006724 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    47                                  %include "./src/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 00006725 3C01                <1>     cmp al, 01
    12 00006727 740B                <1>     je .setSC
    13 00006729 7210                <1>     jb .getSC
    14 0000672B 3C03                <1>     cmp al, 03
    15 0000672D 7214                <1>     jb .getDev
    16 0000672F 741C                <1>     je .setDev
    17 00006731 B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 00006733 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 00006734 8815(D1030000)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 0000673A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 0000673B 8A15(D1030000)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 00006741 EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 00006743 B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 00006745 E8890D0000          <1>     call getUserRegs
    29 0000674A 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 0000674D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;---------------------------------------------------------
    36                              <1> ;Common input registers
    37                              <1> ;al = Country code, 0 means current country info.
    38                              <1> ;bx = Country code if al = -1.
    39                              <1> ;Get country info:
    40                              <1> ;   rdx -> Buffer for the country table (not extended table)
    41                              <1> ;Set country info:
    42                              <1> ;   rdx = -1
    43                              <1> ;---------------------------------------------------------
    44                              <1> ;Return:
    45                              <1> ;Get country info:
    46                              <1> ;   CF=CY -> Error, ax = Error code
    47                              <1> ;   CF=NC -> OK, ax=bx=Country code, buffer @ rdx filled
    48                              <1> ;Set country info:
    49                              <1> ;   CF=CY -> Error, ax = Error code
    50                              <1> ;   CF=NC -> OK
    51                              <1> ;---------------------------------------------------------
    52 0000674E 4889D7              <1>     mov rdi, rdx    ;Move the pointer/set indicator to rdi
    53 00006751 0FB6D0              <1>     movzx edx, al   ;Move potential partial country code, zx to edx
    54 00006754 3CFF                <1>     cmp al, -1      ;Does bx have the country code?
    55 00006756 0F45DA              <1>     cmovne ebx, edx ;If not, move it there
    56 00006759 31ED                <1>     xor ebp, ebp    ;Get country table
    57 0000675B B901000000          <1>     mov ecx, 1      ;Set country table
    58 00006760 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;Set or Get?
    59 00006767 7429                <1>     je .goToNlsFuncSet ;If set, immediately goto nls func
    60 00006769 85DB                <1>     test ebx, ebx   ;Else, in get, are we looking for current country?
    61 0000676B 7527                <1>     jnz .goToNlsFunc    ;If not zero, goto nls func
    62                              <1>     ;Get current country info here, works w/o NLSFUNC
    63                              <1> .copyCountryTable:
    64 0000676D 488D35EF9AFFFF      <1>     lea rsi, ctryTbl
    65 00006774 B926000000          <1>     mov ecx, countryStruc_size
    66 00006779 F3A4                <1>     rep movsb
    67 0000677B 0FB71DDD9AFFFF      <1>     movzx ebx, word [extCtryTbl.countryCode]    ;Get current country code
    68                              <1> .exitWithCountryCode:
    69 00006782 E84C0D0000          <1>     call getUserRegs
    70 00006787 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx    ;And store it in users bx
    71                              <1> .exitNoCountryCode: 
    72 0000678B 89D8                <1>     mov eax, ebx    ;Move country code into eax for return (undocumented)
    73 0000678D E909120000          <1>     jmp extGoodExit
    74                              <1> .goToNlsFuncSet:
    75 00006792 89CD                <1>     mov ebp, ecx    ;Also set ebp to 1
    76                              <1> .goToNlsFunc:
    77 00006794 E812000000          <1>     call .nlsWrap   ;Access NLS functionality
    78 00006799 0F820A120000        <1>     jc extErrExit   ;If CF=CY, exit error (error code in al)
    79 0000679F 85ED                <1>     test ebp, ebp   ;If set, exit, else get, we may need to copy data
    80 000067A1 75E8                <1>     jnz .exitNoCountryCode 
    81 000067A3 85DB                <1>     test ebx, ebx   ;If ebx = 0, we entered NLS and data copied for us.
    82 000067A5 75C6                <1>     jnz .copyCountryTable   ; If not, we gotta copy from our internal copy.
    83 000067A7 89D3                <1>     mov ebx, edx    ;Move the country code into ebx
    84 000067A9 EBD7                <1>     jmp short .exitWithCountryCode
    85                              <1> .nlsWrap:
    86                              <1> ;Subroutine to wrap NLS functions. Should do nothing if we are looking
    87                              <1> ; for the current country (to avoid hitting NLSFUNC and erroring if
    88                              <1> ; not installed).
    89                              <1> ;Input: ebp = 0 -> Get country info
    90                              <1> ;           = 1 -> Set DOS country info
    91                              <1> ;        bx = Country code (bx <> 0 here)
    92                              <1> ;       rdi -> User buffer
    93                              <1> ;       rsi -> DOS internal NLS structure
    94                              <1> ;Output: CF = CY -> Error, al has error code (-1 is generic error)
    95                              <1> ;        CF = NC -> OK
    96                              <1> ;        bx = 0 => Entered NLS and data copied to user buffer.
    97                              <1> ;           > 0 => User requested current country code. Data NOT copied.
    98                              <1> ;All other registers remain the unaffected.
    99 000067AB 663B1DAD9AFFFF      <1>     cmp bx, word [extCtryTbl.countryCode]   ;No NLS access if current ctry.
   100                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000067B2 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000067B4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   101 000067B5 89DA                <1>     mov edx, ebx    ;Save the country code in edx
   102 000067B7 31DB                <1>     xor ebx, ebx    ;Set indicator that we are accessing NLS.
   103 000067B9 B800140000          <1>     mov eax, 1400h  ;Is NLS installed?
   104 000067BE CD2F                <1>     int 2fh
   105 000067C0 3CFF                <1>     cmp al, -1      ;If al <> -1, error exit
   106 000067C2 751F                <1>     jne .errNotInstalled
   107 000067C4 488D35189AFFFF      <1>     lea rsi, dosNLSPtr    ;Point rsi to the DOS codepage area
   108 000067CB B804140000          <1>     mov eax, 1404h  ;Get Country Info, for country code in dx
   109 000067D0 B903140000          <1>     mov ecx, 1403h  ;Set DOS Country Info, to country code in dx
   110 000067D5 85ED                <1>     test ebp, ebp   ;What can I do you for amigo?
   111 000067D7 0F45C1              <1>     cmovnz eax, ecx ;Set codepage if this is non-zero
   112 000067DA CD2F                <1>     int 2fh
   113 000067DC 84C0                <1>     test al, al ;If al = 0, all ok and return CF=NC!
   114                              <1>     retz  
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000067DE 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000067E0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   115                              <1> .exitErr:   ;Else return with the retuned error code
   116 000067E1 F9                  <1>     stc     ;and CF set
   117                              <1>     return
    13                              <2> %%_ret:
    14 000067E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> .errNotInstalled:
   119 000067E3 B001                <1>     mov al, errInvFnc  ;Set invalid function signature
   120 000067E5 EBFA                <1>     jmp short .exitErr
   121                              <1> 
   122                              <1> 
   123                              <1> getExtLocalInfo:    ;ah = 65h, Get Extended Country Info
   124                              <1> ;al = info ID or subfunction value
   125                              <1> ;al >= 20h:
   126                              <1> ;   If al[7] set, use filename table. Else, use normal table
   127                              <1> ;   al = 20h/A0h  country dependant character capitalisation
   128                              <1> ;       dl = Char to UC
   129                              <1> ;       dh = Reserved for second byte if DCBS
   130                              <1> ;   Returns:
   131                              <1> ;       dl = UC char
   132                              <1> ;       dh = Reserved for second byte if DCBS
   133                              <1> ;   al = 21h/A1h  country dependant string capitalisation
   134                              <1> ;       rdx -> Ptr to string of ecx characters to capitalise
   135                              <1> ;       ecx = String length
   136                              <1> ;   Returns: 
   137                              <1> ;       rdx -> Capitalised string
   138                              <1> ;   al = 22h/A2h  country dependant ASCIIZ string capitalisation
   139                              <1> ;       rdx -> Ptr to ASCIIZ string to capitalise
   140                              <1> ;   Returns:
   141                              <1> ;       rdx -> Capitalised ASCIIZ string
   142                              <1> ;   al = 23h/A3h  determine if character represents country relative
   143                              <1> ;                   Yes or No response 
   144                              <1> ;       dl = Char to test Y/N on
   145                              <1> ;       dh = Reserved for second byte if DCBS
   146                              <1> ;   Returns:
   147                              <1> ;       ax = 0 : (N)O
   148                              <1> ;       ax = 1 : (Y)ES 
   149                              <1> ;       ax = 2 : NEITHER
   150                              <1> ;al < 20h:
   151                              <1> ;   al = 01h get general internationalization info
   152                              <1> ;   al = 02h get pointer to uppercase table
   153                              <1> ;   xxx No 03h. Fails unknown function in this case xxx
   154                              <1> ;   al = 04h get pointer to filename uppercase table
   155                              <1> ;   al = 05h get pointer to filename terminator table
   156                              <1> ;   al = 06h get pointer to collating sequence table
   157                              <1> ;   al = 07h get pointer to DCBS table
   158                              <1> ;bx = code page (FFFFh=global code page)
   159                              <1> ;dx = country ID (FFFFh=current country)
   160                              <1> ;rdi -> country information buffer
   161                              <1> ;ecx = size of buffer (>= 9), fail if less! NOTE THE CHANGE FROM 5 to 9!!!!
   162                              <1> ;Return:
   163                              <1> ;CF=CY if error
   164                              <1> ;ax = error code
   165                              <1> ;CF=NC if successful
   166                              <1> ;ecx = size of country information returned
   167                              <1> ;rdi -> country information filled in
   168                              <1> ;Undocumented: ax = default Codepage if nls or requested codepage if internal
   169 000067E7 3C20                <1>     cmp al, 20h
   170 000067E9 0F827D000000        <1>     jb .getInterInfo
   171                              <1> ;Do string manipulation here
   172                              <1> ;Start by getting the correct table to use for translation
   173 000067EF 488D1D959AFFFF      <1>     lea rbx, ucTbl
   174 000067F6 488D35109BFFFF      <1>     lea rsi, fileUCTbl
   175 000067FD A880                <1>     test al, 80h    ;Check bit 7.
   176 000067FF 480F45DE            <1>     cmovnz rbx, rsi ;If set, use fileUC table
   177 00006803 247F                <1>     and al, ~80h    ;Now clear the checking bit
   178 00006805 3C24                <1>     cmp al, 24h     ;Check the function number is valid
   179 00006807 0F83B7000000        <1>     jae .invFuncExit
   180 0000680D 3C23                <1>     cmp al, 23h     ;Does the user want a Y/N check?
   181 0000680F 7422                <1>     je .doYn
   182 00006811 3C20                <1>     cmp al, 20h     ;Does the user want a char conversion?
   183 00006813 7438                <1>     je .doOne
   184                              <1> ;String functions here
   185 00006815 4889D6              <1>     mov rsi, rdx    ;Move source string ptr to rsi
   186 00006818 4889D7              <1>     mov rdi, rdx    ;Move destination ptr to rdi too
   187 0000681B 3C21                <1>     cmp al, 21h     ;Do we have the count in ecx?
   188 0000681D 7507                <1>     jne .doString   ;Yes, go straight to conversion
   189 0000681F E82C0E0000          <1>     call strlen     ;Else, get length of string to convert 
   190 00006824 FFC9                <1>     dec ecx         ;Drop the terminating null from conversion
   191                              <1> .doString:
   192                              <1> ;rsi -> Next char to convert
   193                              <1> ;rdi -> Position to store the converted char
   194                              <1> ;ecx = Number of chars to convert
   195 00006826 AC                  <1>     lodsb
   196 00006827 E83A000000          <1>     call .doChar    ;Converts the char in al
   197 0000682C AA                  <1>     stosb
   198 0000682D FFC9                <1>     dec ecx         ;One less char to convert
   199 0000682F 75F5                <1>     jnz .doString
   200 00006831 EB15                <1>     jmp short .ynExit
   201                              <1> .doYn:
   202 00006833 E824000000          <1>     call .convChar  ;Uppercase char in dl.
   203 00006838 31C0                <1>     xor eax, eax    ;Else in Y/N check. Setup retcode in al
   204 0000683A 80FA4E              <1>     cmp dl, "N"
   205 0000683D 7409                <1>     je .ynExit
   206 0000683F FFC0                <1>     inc eax         ;Inc for yes
   207 00006841 80FA59              <1>     cmp dl, "Y"
   208 00006844 7402                <1>     je .ynExit
   209 00006846 FFC0                <1>     inc eax         ;Inc for unknown
   210                              <1> .ynExit:
   211 00006848 E94E110000          <1>     jmp extGoodExit ;Return value in ax
   212                              <1> .doOne:
   213 0000684D E80A000000          <1>     call .convChar  ;Get converted char in dl
   214 00006852 E87C0C0000          <1>     call getUserRegs
   215 00006857 885618              <1>     mov byte [rsi + callerFrame.rdx], dl    ;Put dl into its place
   216 0000685A EBEC                <1>     jmp short .ynExit
   217                              <1> .convChar:
   218                              <1> ;Input: dl = Char to uppercase
   219                              <1> ;       rbx -> Table to use for conversion
   220                              <1> ;Output: dl = Uppercased char
   221 0000685C 88D0                <1>     mov al, dl  ;Move the char into al to uppercase
   222 0000685E E803000000          <1>     call .doChar
   223 00006863 88C2                <1>     mov dl, al
   224                              <1>     return
    13                              <2> %%_ret:
    14 00006865 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> .doChar:
   226                              <1> ;Input: rbx -> Table to use for uppercasing the string
   227                              <1> ;       al = Char to uppercase
   228                              <1> ;Output: al = Uppercased char
   229 00006866 53                  <1>     push rbx
   230 00006867 E99C0D0000          <1>     jmp uppercaseCharWithTable
   231                              <1> 
   232                              <1> .getInterInfo:
   233 0000686C 81F909000000        <1>     cmp ecx, 9  ;Is our buffer of minimum acceptable size?
   234 00006872 7250                <1>     jb .invFuncExit
   235 00006874 488D356899FFFF      <1>     lea rsi, dosNLSPtr
   236 0000687B 6681FAFFFF          <1>     cmp dx, -1
   237 00006880 660F4415D799FFFF    <1>     cmove dx, word [extCtryTbl.countryCode] ;Get the current country code
   238 00006888 6681FBFFFF          <1>     cmp bx, -1
   239 0000688D 660F441DCC99FFFF    <1>     cmove bx, word [extCtryTbl.activeCP]    ;Get the current codepage
   240 00006895 663B15C399FFFF      <1>     cmp dx, word [extCtryTbl.countryCode]
   241 0000689C 7570                <1>     jne .nlsReq
   242 0000689E 663B1DBC99FFFF      <1>     cmp bx, word [extCtryTbl.activeCP]
   243 000068A5 7567                <1>     jne .nlsReq
   244                              <1>     ;We access our local DOS nationalisation tables to 
   245                              <1>     ; avoid hitting NLS.
   246 000068A7 488D358199FFFF      <1>     lea rsi, charTableArray
   247 000068AE 0FB72D7899FFFF      <1>     movzx ebp, word [ctryFunctions]    ;Get max number of tables to parse
   248                              <1> .loopTableSearch:
   249 000068B5 3A06                <1>     cmp al, byte [rsi]  ;Is the table ours?
   250 000068B7 751C                <1>     jne .tblFound
   251 000068B9 4881C609000000      <1>     add rsi, 9          ;Go to next table (skip one byte and one qword)
   252 000068C0 FFCD                <1>     dec ebp
   253 000068C2 75F1                <1>     jnz .loopTableSearch
   254                              <1>     ;Fallthrough to error if no match
   255                              <1> .invFuncExit:
   256 000068C4 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk  
   257 000068CB B801000000          <1>     mov eax, errInvFnc  ;Bad info ID byte or subfunction
   258 000068D0 E9D4100000          <1>     jmp extErrExit
   259                              <1> .tblFound:
   260 000068D5 A4                  <1>     movsb   ;Copy over the first byte, moving both pointers by 1
   261 000068D6 3C01                <1>     cmp al, 1
   262 000068D8 741B                <1>     je .getExtCtryTbl
   263                              <1>     ;Here we simply copy over a qword
   264 000068DA B908000000          <1>     mov ecx, 8  ;Copy 8 more bytes
   265 000068DF B809000000          <1>     mov eax, 9  ;Number of bytes to save as having had been written
   266                              <1> .copyTable:
   267                              <1> ;Come here with eax = full copy len, ebx = codepage value, ecx = bytes to xfr
   268 000068E4 F3A4                <1>     rep movsb   ;Copy the rest of the bytes
   269 000068E6 E8E80B0000          <1>     call getUserRegs
   270 000068EB 894610              <1>     mov dword [rsi + callerFrame.rcx], eax    ;Store in ecx # of bytes
   271                              <1>     ;Undocumented, if success, ax contains the requested codepage
   272                              <1>     ; value. This is undocumented and should not be relied upon.
   273 000068EE 89D8                <1>     mov eax, ebx    
   274 000068F0 E9A6100000          <1>     jmp extGoodExit
   275                              <1> .getExtCtryTbl:
   276                              <1> ;ecx has length of caller buffer
   277 000068F5 81E903000000        <1>     sub ecx, 3  ;Remove the byte from the count and the length we will store
   278 000068FB 31C0                <1>     xor eax, eax    ;Clear eax
   279 000068FD 66AD                <1>     lodsw           ;Get word at rsi (full table len) and advance rsi by 2
   280 000068FF 39C8                <1>     cmp eax, ecx    ;Do we have more bytes in buffer than we need?
   281 00006901 0F47C8              <1>     cmova ecx, eax  ;Set it to exactly the table length in that case
   282 00006904 89C8                <1>     mov eax, ecx    ;Copy the number of bytes back to eax too
   283 00006906 66AB                <1>     stosw           ;Store number of bytes we will copy and adv rdi by 2
   284 00006908 678D4103            <1>     lea eax, dword [ecx + 3] ;Add 3 to eax, for first 3 bytes copied
   285 0000690C EBD6                <1>     jmp short .copyTable
   286                              <1>     
   287                              <1> .nlsReq:    ;nlsReq moved here to reach the short jumps :)
   288                              <1> ;As before, now rsi -> DOSNLS structure
   289                              <1> ; and bpl has the function code (1,2,4,5,6)
   290 0000690E 0FB6E8              <1>     movzx ebp, al   ;Place the function code in ebp (low byte, zx the rest)
   291 00006911 B800140000          <1>     mov eax, 1400h  ;Install check!
   292 00006916 CD2F                <1>     int 2fh
   293 00006918 3CFF                <1>     cmp al, -1          ;If not installed, error exit
   294 0000691A 75A8                <1>     jne .invFuncExit    
   295 0000691C B802140000          <1>     mov eax, 1402h      ;Get codepage info
   296 00006921 CD2F                <1>     int 2fh
   297 00006923 84C0                <1>     test al, al         ;If the return code is 0, we are ok, else
   298 00006925 0F857E100000        <1>     jne extErrExit      ; al has error code
   299                              <1>     ;Undocumented, if success, ax contains the default codepage
   300                              <1>     ; value. This is undocumented and should not be relied upon.
   301                              <1>     ;This value never changes, not even by NLSFUNC.
   302 0000692B 0FB705F998FFFF      <1>     movzx eax, word [defaultCP]
   303 00006932 E964100000          <1>     jmp extGoodExit
   304                              <1> 
   305                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage
   306                              <1> ;If al = 01h -> Get Global Codepage
   307                              <1> ;Return:    ebx = Active (current) codepage
   308                              <1> ;           edx = System (default) codepage
   309                              <1> ;If al = 02h -> Set Global Codepage
   310                              <1> ;   bx = Active (current) codepage
   311                              <1> ;   dx = System (default) codepage. Not needed, so don't document.
   312 00006937 3C01                <1>     cmp al, 1
   313 00006939 7528                <1>     jne .setCodepage
   314                              <1> ;Here we get the codepage
   315 0000693B E8930B0000          <1>     call getUserRegs
   316 00006940 0FB71D1A99FFFF      <1>     movzx ebx, word [extCtryTbl.activeCP]   ;Get the active codepage value
   317 00006947 0FB715DD98FFFF      <1>     movzx edx, word [defaultCP] ;Get the default codepage
   318 0000694E 895E08              <1>     mov dword [rsi + callerFrame.rbx], ebx
   319 00006951 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   320 00006954 E942100000          <1>     jmp extGoodExit
   321                              <1> .exitBadFunc:
   322 00006959 B801000000          <1>     mov eax, errInvFnc
   323 0000695E E946100000          <1>     jmp extErrExit
   324                              <1> .setCodepage:
   325 00006963 3C02                <1>     cmp al, 2
   326 00006965 75F2                <1>     jne .exitBadFunc
   327 00006967 0FB7157D98FFFF      <1>     movzx edx, word [defltCtry] ;Get the country ID
   328 0000696E B800140000          <1>     mov eax, 1400h
   329 00006973 CD2F                <1>     int 2Fh
   330 00006975 3CFF                <1>     cmp al, -1
   331 00006977 75E0                <1>     jne .exitBadFunc
   332 00006979 488D356398FFFF      <1>     lea rsi, dosNLSPtr  ;Get pointer to the DOS codepage in rsi
   333 00006980 B801140000          <1>     mov eax, 1401h      ;Set global codepage
   334 00006985 CD2F                <1>     int 2Fh
   335 00006987 84C0                <1>     test al, al
   336 00006989 0F840C100000        <1>     jz extGoodExit
   337 0000698F 3C41                <1>     cmp al, errNLSAcDen
   338 00006991 0F8512100000        <1>     jne extErrExit
   339 00006997 6698                <1>     cbw     ;Zero extend al into ax (as we know al = 41h)
   340 00006999 668905(0B040000)    <1>     mov word [errorExCde], ax
   341 000069A0 C605(0D040000)06    <1>     mov byte [errorAction], eActIgn
   342 000069A7 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   343 000069AE C605(0E040000)05    <1>     mov byte [errorClass], eClsHrdFlt
   344 000069B5 E9FC0F0000          <1>     jmp extErrExit.noXlat   ;Jump to error exit without translating the error
   345                              <1> 
   346                              <1> 
   347                              <1> caseMapFunc:
   348                              <1> ;Input: AL=Char to convert to uppercase (above 80h)
   349 000069BA 3C80                <1>     cmp al, 80h
   350                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000069BC 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000069BE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   351 000069BF 53                  <1>     push rbx
   352 000069C0 488D1DC498FFFF      <1>     lea rbx, ucTbl
   353 000069C7 2C80                <1>     sub al, 80h ;Turn into an offset into the table
   354 000069C9 D7                  <1>     xlatb
   355 000069CA 5B                  <1>     pop rbx
   356                              <1>     return
    13                              <2> %%_ret:
    14 000069CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                                  %include "./src/Kernel/Error/harderr.asm"
     1                              <1> 
     2                              <1> diskIOError:
     3                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
     4                              <1> ;Input: rwFlag = 0 or 1 for read/write
     5                              <1> ;       eax = Status word
     6                              <1> ;       rdi -> buffer pointer
     7                              <1> ;       rbp -> DPB ptr
     8 000069CC 3C0F                <1>     cmp al, drvBadDskChnge
     9 000069CE 7510                <1>     jne .doReq
    10 000069D0 50                  <1>     push rax    ;If a bad disk change, drop the volume label ptr here
    11 000069D1 488B05(E3040000)    <1>     mov rax, qword [primReqPkt + ioReqPkt.desptr]   ;Get volume label ptr
    12 000069D8 488905(0F040000)    <1>     mov qword [errorVolLbl], rax    ;and save it!
    13                              <1>     ;Later versions will include a serial number after the lbl too
    14 000069DF 58                  <1>     pop rax
    15                              <1> .doReq:
    16 000069E0 E849000000          <1>     call diskDevErr ;Preserves rdi on stack and rbp in tmpDPBPtr
    17                              <1>     return
    13                              <2> %%_ret:
    14 000069E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                              <1> xlatHardError:
    19                              <1> ;Translates a hard error code to a generic DOS error
    20                              <1> ;Input: edi = Hard Error Code
    21                              <1> ;       ah = Bitfield
    22                              <1> ;       al = Failing drive number
    23 000069E6 50                  <1>     push rax    ;Wanna preserve ax
    24 000069E7 6681FF1000          <1>     cmp di, hardXlatTblL    ;If errorcode > 15, do not adjust!!
    25 000069EC 0FB7C7              <1>     movzx eax, di  ;Clears 64 bits and moves error code into ax
    26 000069EF 730A                <1>     jae .skipXlat   ;Skip xlat if above 15, for IOCTL return errors
    27 000069F1 53                  <1>     push rbx
    28 000069F2 488D1D7096FFFF      <1>     lea rbx, hardXlatTbl
    29 000069F9 D7                  <1>     xlatb    ;Get translated byte from the table in al
    30 000069FA 5B                  <1>     pop rbx
    31                              <1> .skipXlat:
    32 000069FB 668905(0B040000)    <1>     mov word [errorExCde], ax   ;Store this error code here
    33 00006A02 58                  <1>     pop rax
    34 00006A03 56                  <1>     push rsi
    35 00006A04 488D358C97FFFF      <1>     lea rsi, hardErrTbl
    36 00006A0B E8F20F0000          <1>     call setErrorVars
    37 00006A10 5E                  <1>     pop rsi
    38                              <1>     return
    13                              <2> %%_ret:
    14 00006A11 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> charDevErr:
    41                              <1> ;Hard character device errors come here
    42                              <1> ;Input:
    43                              <1> ; ah = Additional Int 24h flags. Top bit should be set!
    44                              <1> ;edi = error code in low byte
    45                              <1> ;rbp -> Not accessed but preserved
    46 00006A12 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK   ;Set the always bits
    47 00006A15 8825(68040000)      <1>     mov byte [Int24bitfld], ah
    48 00006A1B 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp
    49 00006A22 56                  <1>     push rsi
    50 00006A23 400FB6FF            <1>     movzx edi, dil    ;Zero extend the error code up
    51 00006A27 E87C000000          <1>     call hardErrorCommon
    52 00006A2C 5E                  <1>     pop rsi
    53                              <1>     return
    13                              <2> %%_ret:
    14 00006A2D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> diskDevErr:
    55                              <1> ;Called, NOT Jumped to. 
    56                              <1> ;Input: rdi = Disk Buffer pointer (or 0 to mean share)
    57                              <1> ;       eax = Status word (error code in al)
    58                              <1> ;       rbp = Disk DPB pointer
    59                              <1> ; [Int24hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    60                              <1> ;Output: al = Int 24h response (0-3)
    61                              <1> ; All other registers preserved
    62 00006A2E B308                <1>     mov bl, dataBuffer  ;Set dflt flags for invoke
    63 00006A30 4885FF              <1>     test rdi, rdi       ;Is this a share invokation?
    64 00006A33 7403                <1>     je .skipbufferread  ;Jump if so, since share lock issues occur on data io
    65 00006A35 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Else get the buffer data type
    66                              <1> .skipbufferread:
    67 00006A38 57                  <1>     push rdi        ;Save the disk buffer pointer
    68 00006A39 0FB6F8              <1>     movzx edi, al   ;Store status code in dil, zero extend
    69 00006A3C 81FF00000000        <1>     cmp edi, drvWPErr
    70 00006A42 7509                <1>     jne .notReset
    71                              <1>     ;Reset the error drive to report dpb drive if a write protect error!
    72 00006A44 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    73 00006A47 8805(09040000)      <1>     mov byte [errorDrv], al ;Store this value
    74                              <1> .notReset:
    75 00006A4D 8A25(68040000)      <1>     mov ah, byte [Int24bitfld]  ;Get the permissions in var
    76 00006A53 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set the always bits
    77                              <1>     ;Test for correct buffer data type
    78 00006A56 F6C301              <1>     test bl, dosBuffer
    79 00006A59 7505                <1>     jnz .df0
    80 00006A5B 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    81 00006A5E EB1E                <1>     jmp short .df3
    82                              <1> .df0:
    83 00006A60 F6C302              <1>     test bl, fatBuffer
    84 00006A63 750C                <1>     jnz .df1
    85 00006A65 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    86 00006A68 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Invalidate the count!
    87 00006A6F EB0D                <1>     jmp short .df3
    88                              <1> .df1:
    89 00006A71 F6C304              <1>     test bl, dirBuffer
    90 00006A74 7505                <1>     jnz .df2
    91 00006A76 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    92 00006A79 EB03                <1>     jmp short .df3
    93                              <1> .df2:
    94 00006A7B 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    95                              <1> .df3:
    96 00006A7E 8025(00070000)01    <1>     and byte [rwFlag], 1    ;Save only the bottom bit
    97 00006A85 0A25(00070000)      <1>     or ah, byte [rwFlag]    ;And set the low bit here
    98 00006A8B 0A25(68040000)      <1>     or ah, byte [Int24bitfld]
    99                              <1>     ;Continue down with failing disk buffer pointer on stack
   100 00006A91 E802000000          <1>     call diskDevErrBitfield
   101 00006A96 5F                  <1>     pop rdi ;Pop back the disk buffer pointer
   102                              <1>     return   
    13                              <2> %%_ret:
    14 00006A97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> diskDevErrBitfield:
   104                              <1> ;Called with Int24Bitfield constructed and in ah and error code in dil
   105                              <1> ;This is to avoid rebuilding the bitfield.
   106 00006A98 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get the drive number
   107 00006A9B 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save the DPB 
   108 00006AA2 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;And get the driver ptr in rsi
   109 00006AA6 31ED                <1>     xor ebp, ebp    ;Finally, set ebp to 0 to simulate the segment
   110                              <1> hardErrorCommon:
   111                              <1> ;The common fields, with the vars set up. 
   112                              <1> ;Ensure we dont have a crazy error code.
   113                              <1> ;Entered with: ah = bitfield, al = Fail drive (0 based) if not char
   114                              <1> ; dil = Driver error code, rsi -> Driver header
   115                              <1> ;tmpDBPPtr = Fail DPB if not char, rwFlag set/clear
   116 00006AA8 E839FFFFFF          <1>     call xlatHardError
   117 00006AAD 50                  <1>     push rax
   118 00006AAE B80C000000          <1>     mov eax, errGF - drvErrShft
   119 00006AB3 39C7                <1>     cmp edi, eax    ; If the returned error code is above largest driver code
   120 00006AB5 0F47F8              <1>     cmova edi, eax  ; return the driver largest code
   121 00006AB8 58                  <1>     pop rax
   122                              <1> criticalDOSError:   ;Int 2Fh, AX=1206h, Invoke Critical Error Function 
   123                              <1> ;Will swap stacks and enter int 24h safely and handle passing the right data 
   124                              <1> ; to the critical error handler.
   125                              <1> ; Called with rsi set as required by Int 24h (caller decides), ax, di
   126                              <1> ; and with Int24Bitfield set
   127                              <1> ;               AH = Critical Error Bitfield
   128                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   129                              <1> ;               Bit 6 - Reserved
   130                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   131                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   132                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   133                              <1> ;               Bits [2-1] = Affected Disk Error
   134                              <1> ;                     0 0   DOS area
   135                              <1> ;                     0 1   FAT area
   136                              <1> ;                     1 0   Directory area
   137                              <1> ;                     1 1   Data area
   138                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   139                              <1> ;               AL  = Failing drive number if AH[7] = 0
   140                              <1> ;               DIL = Error code for errorMsg
   141                              <1> ;               RSI = EA of Device Header for which device the error occured
   142                              <1> ;Return:
   143                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   144                              <1> ;                  = 1 - Retry the Operation    (Retry)
   145                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   146                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   147                              <1> ; Return response from int 24h in al
   148                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   149                              <1> ; This function will terminate the program if an abort was requested!
   150                              <1> ; This function also destroys RBP
   151 00006AB9 F605(07040000)FF    <1>     test byte [critErrFlag], -1   ;If not zero, already in error. Auto FAIL
   152 00006AC0 7565                <1>     jnz .setFail
   153 00006AC2 488925(60040000)    <1>     mov qword [xInt24hRSP], rsp ;Save our critical error stack pointer
   154 00006AC9 66813D(3A070000)FF- <1>     cmp word  [currentNdx], -1  ;If this is -1, we are not opening a file
   154 00006AD1 FF                  <1>
   155 00006AD2 740C                <1>     je .notOpeningFile
   156 00006AD4 57                  <1>     push rdi
   157 00006AD5 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]  ;Get the pointer to the current handle entry
   158 00006ADC C607FF              <1>     mov byte [rdi], -1          ;Free this handle
   159 00006ADF 5F                  <1>     pop rdi
   160                              <1> .notOpeningFile:
   161                              <1>     ;call checkDoInt24OnHandle   ;IF returns ZF=NZ, we just fail!
   162                              <1>     ;jnz .setFail
   163 00006AE0 FA                  <1>     cli                         
   164 00006AE1 FE05(07040000)      <1>     inc byte [critErrFlag]      ;Set flag for critical error
   165 00006AE7 FE0D(08040000)      <1>     dec byte [inDOS]            ;Exiting DOS
   166 00006AED 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]     ;Get the stack ptr after regs were pushed
   167 00006AF4 31ED                <1>     xor ebp, ebp                ;Always zeroed for DOS portability!
   168 00006AF6 CD24                <1>     int 24h                     ;Call crit. err. hdlr. Ints reset on
   169 00006AF8 488925(7B040000)    <1>     mov qword [oldRSP], rsp     ;Allows user to change reg vals on fail!
   170 00006AFF 488B25(60040000)    <1>     mov rsp, qword [xInt24hRSP] ;Ret to DOS stack for failing device
   171 00006B06 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   172 00006B0D FE05(08040000)      <1>     inc byte [inDOS]            ;Reenter DOS
   173 00006B13 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]
   174 00006B1A FB                  <1>     sti                         
   175                              <1>     ;Now we check that the response given was allowed, and translate if needed
   176 00006B1B 3C00                <1>     cmp al, critIgnore
   177 00006B1D 743F                <1>     je .checkIgnore
   178 00006B1F 3C01                <1>     cmp al, critRetry
   179 00006B21 7446                <1>     je .checkRetry
   180 00006B23 3C03                <1>     cmp al, critFail
   181 00006B25 754D                <1>     jne .abort   ;Must be abort
   182                              <1> .setFail:   ;Here is for fail
   183 00006B27 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int24 responded Fail)
   184                              <1>     ;call checkDoInt24OnHandle   ;If we fail because of handle, skip fail counter!
   185                              <1>     ;jnz .skipFailInc
   186 00006B29 FE05(6A040000)      <1>     inc byte [Int24Fail]        ;Inc the fail counter!
   187                              <1> .skipFailInc:
   188 00006B2F F605(68040000)08    <1>     test byte [Int24bitfld], critFailOK
   189 00006B36 743C                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   190                              <1> .exit:
   191 00006B38 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   192 00006B3F 803D(3A070000)FF    <1>     cmp byte [currentNdx], -1   ;Is there a file that needs handling?
   193                              <1>     rete    ;Only if this is not equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006B46 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006B48 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   194                              <1>     ;In that case, we set the jft entry to its initial value, whatever it was
   195 00006B49 50                  <1>     push rax
   196 00006B4A 57                  <1>     push rdi
   197 00006B4B 0FB705(3A070000)    <1>     movzx eax, word [currentNdx]
   198 00006B52 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]
   199 00006B59 8807                <1>     mov byte [rdi], al
   200 00006B5B 5F                  <1>     pop rdi
   201 00006B5C 58                  <1>     pop rax
   202                              <1>     return
    13                              <2> %%_ret:
    14 00006B5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   203                              <1> .checkIgnore:
   204 00006B5E F605(68040000)20    <1>     test byte [Int24bitfld], critIgnorOK
   205 00006B65 75D1                <1>     jnz .exit
   206 00006B67 EBBE                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   207                              <1> .checkRetry:
   208 00006B69 F605(68040000)10    <1>     test byte [Int24bitfld], critRetryOK
   209 00006B70 75C6                <1>     jnz .exit   
   210 00006B72 EBB3                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   211                              <1> .abort:
   212                              <1> ;Prepare to abort. We abort from within!
   213 00006B74 E87CC0FFFF          <1>     call vConRetDriver  ;Always reset the driver flag on abort
   214                              <1> ;If a network request requests abort, translate to fail
   215 00006B79 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1
   216 00006B80 74B6                <1>     je .exit
   217                              <1> ;If already terminating, dont start terminating again!
   218 00006B82 F605(96040000)FF    <1>     test byte [procExiting], -1
   219 00006B89 75AD                <1>     jnz .exit
   220 00006B8B 31C0                <1>     xor eax, eax    ;Default return code to 0. Abort flag will be set later
   221 00006B8D C605(06070000)02    <1>     mov byte [exitType], 2      ;We are returning from Abort, ret type 2!
   222 00006B94 8805(5F040000)      <1>     mov byte [volIdFlag], al     ;Clear special vol search byte if set
   223                              <1>     ;Before returning, we need to set the aborting psp.rspPtr back to 
   224                              <1>     ; the oldRSP as a syscall during Int 24h would change this value.
   225                              <1>     ;This only affects programs which are their own parents as when aborting
   226                              <1>     ; we swap to the parentPSP. This prevents a bug from arising as the 
   227                              <1>     ; stack ptr in psp.rspPtr may have changed since initially entering DOS
   228                              <1>     ; as the Int 24h handler may have made an Int 21h call, meaning if 
   229                              <1>     ; the Int 24h handler plays with the stack too much, the value in 
   230                              <1>     ; psp.rspPtr is no longer pointing at a "valid" stack frame (i.e. 
   231                              <1>     ; with valid SS:RSP). The only sane thing to do is to reset this 
   232                              <1>     ; pointer to the value it had on entry to the initial DOS call which
   233                              <1>     ; triggered the Int 24h (or the equivalent stack frame that was 
   234                              <1>     ; replaced by the Int 24h handler). If the task being aborted is not 
   235                              <1>     ; its own parent the following is a NOP. If it is its own parent, we
   236                              <1>     ; the following prevents a GP. Fault.
   237 00006B9A 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   238 00006BA1 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   239 00006BA8 48895F46            <1>     mov qword [rdi + psp.rspPtr], rbx
   240 00006BAC E900F3FFFF          <1>     jmp terminateClean.altEP
   241                              <1> 
   242                              <1> ;checkDoInt24OnHandle:
   243                              <1> ;Checks if currentSFT is a null pointer. Return ZF=ZE if so.
   244                              <1> ;Else, take the SFT pointer and check its open mode. 
   245                              <1> ;   If openFailOnI24 set, return ZF=NZ
   246                              <1> ;   Else, return ZF=ZE.
   247                              <1> ;    push rdi
   248                              <1> ;    call getCurrentSFT
   249                              <1> ;    test rdi, rdi   ;If this is a null pointer, no
   250                              <1> ;    jz .exit
   251                              <1> ;    test word [rdi + sft.wOpenMode], openFailOnI24
   252                              <1> ;.exit:
   253                              <1> ;    pop rdi
   254                              <1> ;    return
    49                                  %include "./src/Kernel/Error/ctrlc.asm"
     1                              <1> ctrlBreakHdlr:
     2 00006BB1 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
     3 00006BB3 E86CBFFFFF          <1>     call printCaretASCII
     4 00006BB8 E897BFFFFF          <1>     call printCRLF
     5                              <1>     ;Reset the console back to 0
     6 00006BBD E833C0FFFF          <1>     call vConRetDriver
     7                              <1> ;Handles a control break, juggles stacks and enters int 21h 
     8                              <1> .exceptEP:
     9                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
    10                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
    11                              <1> ;   interrupted DOS call is restarted
    12 00006BC2 FA                  <1> 	cli
    13 00006BC3 488B25(7B040000)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
    14 00006BCA E8610D0000          <1> 	call dosPopRegs ;Get user state back
    15 00006BCF C605(08040000)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
    16 00006BD6 C605(07040000)00    <1>     mov byte [critErrFlag], 0
    17 00006BDD 488925(27040000)    <1>     mov qword [xInt23hRSP], rsp  ;Save user rsp. This is the og psp rsp.
    18 00006BE4 F8                  <1>     clc
    19 00006BE5 CD23                <1>     int 23h ;Call critical error handler
    20 00006BE7 FA                  <1>     cli ;Clear interrupts again
    21 00006BE8 488905(33040000)    <1>     mov qword [oldRAX], rax     ;Save eax (has DOS fn to do if not terminate)
    22 00006BEF 9C                  <1>     pushfq                      ;Get returned flags in rax
    23 00006BF0 58                  <1>     pop rax 
    24 00006BF1 483B25(27040000)    <1>     cmp rsp, qword [xInt23hRSP] ;Did the user return with ret/ret 8?
    25 00006BF8 750C                <1>     jne .checkCF                ;If yes, check the returned CF flag.
    26                              <1> .returnToDOS:                   ;Else, execute the DOS function in eax.
    27 00006BFA 488B05(33040000)    <1>     mov rax, qword [oldRAX]     ;Get the function number to execute
    28 00006C01 E9CB0B0000          <1>     jmp functionDispatch        ;Goto int 21h
    29                              <1> .checkCF:
    30 00006C06 488B25(27040000)    <1>     mov rsp, qword [xInt23hRSP]  ;Reset the stack pointer to pre int 23h
    31 00006C0D A801                <1>     test al, 1      ;Was CF=CY returned?
    32 00006C0F 74E9                <1>     jz .returnToDOS ;If CF=NC, DOS function in eax
    33 00006C11 B8004C0000          <1>     mov eax, 4c00h  ;Else, exit with default error code (00h)
    34 00006C16 C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1  ;Signal CTRL+BREAK termination
    35 00006C1D E9AF0B0000          <1>     jmp functionDispatch ;When jumping now, rsp will go back into psp.rsp!
    50                                  %include "./src/Kernel/Error/execpt.asm"
     1                              <1> ;CPU Exception handlers
     2                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
     3                              <1> ; CTRL+C exit.
     4                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
     5                              <1> ; system.
     6                              <1> ; Also halt if the application is it's own parent.
     7                              <1> ;An application should hook these interupts if they wish to not 
     8                              <1> ; CTRL+C exit, and instead return to DOS.
     9                              <1> i0:
    10 00006C22 31C0                <1>     xor eax, eax
    11 00006C24 E9AB000000          <1>     jmp cpu_2args
    12                              <1> i1:
    13 00006C29 B801000000          <1>     mov eax, 1
    14 00006C2E E9A1000000          <1>     jmp cpu_2args
    15                              <1> i2:
    16 00006C33 B802000000          <1>     mov eax, 2
    17 00006C38 E997000000          <1>     jmp cpu_2args
    18                              <1> i3:
    19 00006C3D B803000000          <1>     mov eax, 3
    20 00006C42 E98D000000          <1>     jmp cpu_2args
    21                              <1> i4:
    22 00006C47 B804000000          <1>     mov eax, 4
    23 00006C4C E983000000          <1>     jmp cpu_2args
    24                              <1> i5:
    25 00006C51 B805000000          <1>     mov eax, 5
    26 00006C56 EB7C                <1>     jmp short cpu_2args
    27                              <1> i6:
    28 00006C58 B806000000          <1>     mov eax, 6
    29 00006C5D EB75                <1>     jmp short cpu_2args
    30                              <1> i7:
    31 00006C5F B807000000          <1>     mov eax, 7
    32 00006C64 EB6E                <1>     jmp short cpu_2args
    33                              <1> i8:
    34 00006C66 B808000000          <1>     mov eax, 8
    35 00006C6B EB60                <1>     jmp short cpu_3args
    36                              <1> i9:
    37 00006C6D B809000000          <1>     mov eax, 9
    38 00006C72 EB60                <1>     jmp short cpu_2args
    39                              <1> i10:
    40 00006C74 B80A000000          <1>     mov eax, 0Ah
    41 00006C79 EB52                <1>     jmp short cpu_3args
    42                              <1> i11:
    43 00006C7B B80B000000          <1>     mov eax, 0Bh
    44 00006C80 EB4B                <1>     jmp short cpu_3args
    45                              <1> i12:
    46 00006C82 B80C000000          <1>     mov eax, 0Ch
    47 00006C87 EB44                <1>     jmp short cpu_3args
    48                              <1> i13:
    49 00006C89 B80D000000          <1>     mov eax, 0Dh
    50 00006C8E EB3D                <1>     jmp short cpu_3args
    51                              <1> i14:
    52 00006C90 B80E000000          <1>     mov eax, 0Eh
    53 00006C95 EB2F                <1>     jmp short cpu_4args
    54                              <1> i15:
    55 00006C97 B80F000000          <1>     mov eax, 0Fh
    56 00006C9C EB36                <1>     jmp short cpu_2args
    57                              <1> i16:
    58 00006C9E B810000000          <1>     mov eax, 10h
    59 00006CA3 EB2F                <1>     jmp short cpu_2args
    60                              <1> i17:
    61 00006CA5 B811000000          <1>     mov eax, 11h
    62 00006CAA EB21                <1>     jmp short cpu_3args
    63                              <1> i18:
    64 00006CAC B812000000          <1>     mov eax, 12h
    65 00006CB1 EB21                <1>     jmp short cpu_2args
    66                              <1> i19:
    67 00006CB3 B813000000          <1>     mov eax, 13h
    68 00006CB8 EB1A                <1>     jmp short cpu_2args
    69                              <1> i20:
    70 00006CBA B814000000          <1>     mov eax, 14h
    71 00006CBF EB13                <1>     jmp short cpu_2args
    72                              <1> i21:
    73 00006CC1 B815000000          <1>     mov eax, 15h
    74                              <1> cpu_4args:
    75 00006CC6 B903000000          <1>     mov ecx, 3
    76 00006CCB EB0C                <1>     jmp short cpu_exception
    77                              <1> cpu_3args:
    78 00006CCD B902000000          <1>     mov ecx, 2
    79 00006CD2 EB05                <1>     jmp short cpu_exception
    80                              <1> cpu_2args:
    81 00006CD4 B901000000          <1>     mov ecx, 1
    82                              <1> cpu_exception:
    83                              <1> ;Enter with:
    84                              <1> ; eax = Exception number in binary
    85                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
    86 00006CD9 488D3537020000      <1>     lea rsi, .fatalt0   ;Get the ptr
    87 00006CE0 BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
    88 00006CE5 E8E5010000          <1>     call .writeExceptionMessage
    89                              <1> 
    90 00006CEA C605(91070000)00    <1>     mov byte [haltDOS], 0   ;Clear first as we are recycling this byte in SDA
    91 00006CF1 803D(08040000)01    <1>     cmp byte [inDOS], 1     ;Are we in DOS? 
    92 00006CF8 7327                <1>     jae .introStop          ;Crap out, cant guarantee DOS is stable anymore
    93 00006CFA 3D02000000          <1>     cmp eax, 2              ;NMI?
    94 00006CFF 7420                <1>     je .introStop           ;Freeze the PC to stop it from hurting itself...
    95                              <1> 
    96 00006D01 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;If self-parent craps out... 
    97 00006D08 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr] ;Who do we call? COMSPEC?
    98 00006D0C 7413                <1>     je .introStop   ;Nah, for now, just hard stop like if DOS is bad.
    99                              <1> 
   100 00006D0E 488D352B020000      <1>     lea rsi, .fatal1
   101 00006D15 BBC1000000          <1>     mov ebx, fatal1L
   102 00006D1A E8B0010000          <1>     call .writeExceptionMessage
   103 00006D1F EB18                <1>     jmp short .introEnd
   104                              <1> .introStop:
   105 00006D21 C605(91070000)FF    <1>     mov byte [haltDOS], -1  ;Set crap out byte...
   106 00006D28 488D35D5020000      <1>     lea rsi, .fatalHalt     ;Get the ptr
   107 00006D2F BB19000000          <1>     mov ebx, fatalHaltL     ;Get the length
   108 00006D34 E896010000          <1>     call .writeExceptionMessage
   109                              <1> .introEnd:
   110 00006D39 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   111 00006D40 E858010000          <1>     call .printbyte ;Store the error code in the byte buffer
   112 00006D45 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   113 00006D4C BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   114 00006D51 E879010000          <1>     call .writeExceptionMessage
   115                              <1> 
   116 00006D56 488D35A4020000      <1>     lea rsi, .fatal2
   117 00006D5D BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   118 00006D62 E868010000          <1>     call .writeExceptionMessage
   119                              <1> 
   120 00006D67 80F901              <1>     cmp cl, 1
   121 00006D6A 0F8793000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   122                              <1> .cpurollprint:
   123 00006D70 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   124 00006D77 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   125                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   126 00006D7B B108                <1>     mov cl, 8    ;8 bytes
   127                              <1> .cpurollprint1:
   128 00006D7D 48C1C208            <1>     rol rdx, 8
   129 00006D81 88D0                <1>     mov al, dl
   130 00006D83 52                  <1>     push rdx
   131 00006D84 E814010000          <1>     call .printbyte
   132 00006D89 5A                  <1>     pop rdx
   133 00006D8A FEC9                <1>     dec cl
   134 00006D8C 75EF                <1>     jnz .cpurollprint1
   135                              <1> 
   136 00006D8E BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   137 00006D93 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   138 00006D9A E830010000          <1>     call .writeExceptionMessage
   139                              <1> 
   140 00006D9F BB03000000          <1>     mov ebx, crlfL
   141 00006DA4 488D3572020000      <1>     lea rsi, .crlf
   142 00006DAB E81F010000          <1>     call .writeExceptionMessage    
   143                              <1> 
   144 00006DB0 F605(91070000)FF    <1>     test byte [haltDOS], -1
   145 00006DB7 7534                <1>     jnz .fatalStop
   146 00006DB9 E8FC000000          <1>     call .readInputChar
   147                              <1>     ;Set error code to General Failure
   148 00006DBE 66C705(0B040000)1F- <1>     mov word [errorExCde], errGF
   148 00006DC6 00                  <1>
   149 00006DC7 C605(0D040000)04    <1>     mov byte [errorAction], eActAbt
   150 00006DCE C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   151 00006DD5 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   152 00006DDC B8FF4C0000          <1>     mov eax, 4cFFh
   153 00006DE1 C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1
   154                              <1>     ;If a errGF error code and ctrlC exit and the extended error
   155                              <1>     ; setup as above, chances are it was a CPU error
   156 00006DE8 E9E4090000          <1>     jmp functionDispatch    ;Call Int 21h politely, clean up resources
   157                              <1> .fatalStop:
   158                              <1> ;This is called if inDOS > 1 or NMI occured
   159                              <1> ;Freezes the machine
   160 00006DED B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   161 00006DF2 CD2A                <1>     int 2Ah
   162 00006DF4 E8650B0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   163 00006DF9 E8740B0000          <1>     call dosCrit2Enter  ;Get the lock to drivers
   164 00006DFE FA                  <1>     cli                 ;Halt all interrupts
   165                              <1> .fatalLp:
   166 00006DFF F390                <1>     pause
   167 00006E01 EBFC                <1>     jmp short .fatalLp  ;Stay here forever, we cant guarantee anything anymore!
   168                              <1> .cpuextendederror:
   169 00006E03 5A                  <1>     pop rdx
   170 00006E04 48FFC9              <1>     dec rcx
   171 00006E07 51                  <1>     push rcx
   172 00006E08 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   173 00006E0F B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   174 00006E11 86D6                <1>     xchg dl, dh   
   175                              <1> .pr1:
   176 00006E13 88D0                <1>     mov al, dl
   177 00006E15 52                  <1>     push rdx
   178 00006E16 E882000000          <1>     call .printbyte
   179 00006E1B 5A                  <1>     pop rdx
   180 00006E1C C1CA08              <1>     ror edx, 8    ;Print just dx for now
   181 00006E1F FEC9                <1>     dec cl
   182 00006E21 75F0                <1>     jnz .pr1
   183                              <1> 
   184 00006E23 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   185 00006E2A BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   186 00006E2F E89B000000          <1>     call .writeExceptionMessage
   187                              <1> 
   188 00006E34 488D35C6010000      <1>     lea rsi, .fatal2
   189 00006E3B BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   190 00006E40 E88A000000          <1>     call .writeExceptionMessage
   191                              <1> 
   192 00006E45 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   193 00006E46 48FFC9              <1>     dec rcx
   194 00006E49 0F8421FFFFFF        <1>     jz .cpurollprint
   195                              <1> 
   196 00006E4F B108                <1>     mov cl, 8   ;16 nybbles
   197 00006E51 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   198 00006E54 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   199                              <1> .pr2:
   200 00006E5B 48C1C208            <1>     rol rdx, 8    ;Print rdx
   201 00006E5F 88D0                <1>     mov al, dl
   202 00006E61 52                  <1>     push rdx
   203 00006E62 E836000000          <1>     call .printbyte
   204 00006E67 5A                  <1>     pop rdx
   205 00006E68 FEC9                <1>     dec cl
   206 00006E6A 75EF                <1>     jnz .pr2
   207                              <1> 
   208 00006E6C 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   209 00006E73 BB10000000          <1>     mov ebx, 16
   210 00006E78 E852000000          <1>     call .writeExceptionMessage
   211                              <1> 
   212 00006E7D 488D357D010000      <1>     lea rsi, .fatal2
   213 00006E84 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   214 00006E89 E841000000          <1>     call .writeExceptionMessage
   215                              <1> 
   216 00006E8E E9DDFEFFFF          <1>     jmp .cpurollprint
   217                              <1> 
   218                              <1> 
   219                              <1> .char:    ;Print a single character
   220 00006E93 488D1D6D000000      <1>     lea rbx, .ascii
   221 00006E9A D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   222 00006E9B AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   223 00006E9C C3                  <1>     ret
   224                              <1> .printbyte:
   225 00006E9D 88C2                <1>     mov dl, al            ;save byte in dl
   226 00006E9F 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   227 00006EA3 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   228 00006EA8 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   229 00006EAC E8E2FFFFFF          <1>     call .char
   230 00006EB1 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   231 00006EB4 E8DAFFFFFF          <1>     call .char
   232 00006EB9 C3                  <1>     ret        
   233                              <1> 
   234                              <1> 
   235                              <1> .readInputChar:
   236 00006EBA C605(ED040000)04    <1>     mov byte [critReqPkt + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   237 00006EC1 488D35(1C050000)    <1>     lea rsi, singleIObyt
   238 00006EC8 BB01000000          <1>     mov ebx, 1  ;Read one char
   239 00006ECD EB07                <1>     jmp short .ioException
   240                              <1> .writeExceptionMessage:
   241                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   242 00006ECF C605(ED040000)08    <1>     mov byte [critReqPkt + ioReqPkt.cmdcde], drvWRITE
   243                              <1> .ioException:
   244 00006ED6 C605(EB040000)2A    <1>     mov byte [critReqPkt + ioReqPkt.hdrlen], ioReqPkt_size
   245 00006EDD 66C705(EE040000)00- <1>     mov word [critReqPkt + ioReqPkt.status], 0
   245 00006EE5 00                  <1>
   246 00006EE6 891D(01050000)      <1>     mov dword [critReqPkt + ioReqPkt.tfrlen], ebx
   247 00006EEC 488D1D(EB040000)    <1>     lea rbx, critReqPkt
   248 00006EF3 488935(F9040000)    <1>     mov qword [critReqPkt + ioReqPkt.bufptr], rsi
   249 00006EFA 488B35(53000000)    <1>     mov rsi, qword [vConPtr]
   250 00006F01 E822010000          <1>     call goDriver
   251                              <1>     return
    13                              <2> %%_ret:
    14 00006F06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   252                              <1> 
   253                              <1> 
   254                              <1> ;Error messages
   255 00006F07 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   255 00006F10 39414243444546      <1>
   256 00006F17 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   256 00006F20 20205343502F444F53- <1>
   256 00006F29 20455843455054494F- <1>
   256 00006F32 4E2044455445435445- <1>
   256 00006F3B 44210D0A0A          <1>
   257                              <1> fatalt0L   equ $ - .fatalt0
   258                              <1> 
   259                              <1> .fatal1:   
   260 00006F40 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   260 00006F49 656E7469616C6C7920- <1>
   260 00006F52 666174616C20657272- <1>
   260 00006F5B 6F7220686173206265- <1>
   260 00006F64 656E20646574656374- <1>
   260 00006F6D 65640D0A            <1>
   261 00006F71 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   261 00006F7A 68652063757272656E- <1>
   261 00006F83 74206170706C696361- <1>
   261 00006F8C 74696F6E206D757374- <1>
   261 00006F95 206265207465726D69- <1>
   261 00006F9E 6E617465642E0D0A0A  <1>
   262 00006FA7 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   262 00006FB0 20616E79206B657920- <1>
   262 00006FB9 746F20636F6E74696E- <1>
   262 00006FC2 7565206F7220435452- <1>
   262 00006FCB 4C2B414C542B44454C- <1>
   262 00006FD4 20746F207265737461- <1>
   262 00006FDD 727420746865206D61- <1>
   262 00006FE6 6368696E652E        <1>
   263 00006FEC 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   263 00006FF5 5354454D204552524F- <1>
   263 00006FFE 523A20              <1>
   264                              <1> fatal1L equ $ - .fatal1
   265                              <1> 
   266 00007001 203A20              <1> .fatal2:   db " : "
   267                              <1> fatal2L    equ $ - .fatal2
   268                              <1> 
   269                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   270 00007004 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   270 0000700D 4F532053595354454D- <1>
   270 00007016 2053544F503A20      <1>
   271                              <1> fatalHaltL equ $ - .fatalHalt
   272 0000701D 0D0A0A              <1> .crlf:  db CR,LF,LF
   273                              <1> crlfL  equ $ - .crlf
    51                                  %include "./src/Kernel/Core/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 25h Int 26h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 00007020 B003                <1>     mov al, critFail
     7 00007022 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 00007024 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 00007028 E845090000          <1>     call dosCrit2Enter
    16 0000702D FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 00007030 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 00007033 E844090000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 00007038 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> ;The NUL driver lives here as it is implemented by the Kernel by default!
    22                              <1> nulStrat:
    23 00007039 66C743030001        <1>     mov word [rbx + drvReqPkt.status], drvDonStatus    ;Set done bit directly
    24                              <1> nulIntr:
    25                              <1>     return
    13                              <2> %%_ret:
    14 0000703F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> setupPhysicalDiskRequest:
    28                              <1> ;Ensure that al has valid disk number
    29                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    30                              <1> ;If CF=NC, rbp = DPB ptr.
    31                              <1> ;If CF=CY, exit error
    32 00007040 84C0                <1>     test al, al
    33 00007042 723F                <1>     jc .diskError
    34 00007044 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
    35 0000704A 7337                <1>     jae .diskError
    36 0000704C 50                  <1>     push rax
    37 0000704D FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    38 0000704F E813050000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    39 00007054 58                  <1>     pop rax
    40 00007055 7235                <1>     jc .error
    41 00007057 8805(09070000)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    42 0000705D 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    43 00007064 48F7454300800000    <1>     test qword [rbp + cds.wFlags], cdsRedirDrive   ;On a network?
    44 0000706C 750A                <1>     jnz .netError
    45 0000706E 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    46 00007072 E8C0030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    47                              <1>     return
    13                              <2> %%_ret:
    14 00007077 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> .netError:
    49 00007078 66C705(0B040000)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    49 00007080 00                  <1>
    50 00007081 EB09                <1>     jmp short .error
    51                              <1> .diskError:
    52 00007083 66C705(0B040000)0F- <1>     mov word [errorExCde], errBadDrv
    52 0000708B 00                  <1>
    53                              <1> .error: ;This error setting needs to remain as is to allow for Int 25/46
    54 0000708C C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    55 00007093 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
    56 0000709A C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
    57 000070A1 F9                  <1>     stc
    58                              <1>     return
    13                              <2> %%_ret:
    14 000070A2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    59                              <1> 
    60                              <1> setupAbsDiskEntry:
    61                              <1> ;Prepares to sets up the CDS and DPB for the request
    62 000070A3 FE05(08040000)      <1>     inc byte [inDOS]
    63 000070A9 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    64 000070AA FC                  <1>     cld ;Set string ops in the right direction
    65 000070AB E890FFFFFF          <1>     call setupPhysicalDiskRequest
    66                              <1>     retc    ;Error exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000070B0 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000070B2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    67 000070B3 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;We prob. will invalidate
    68 000070BA 56                  <1>     push rsi
    69 000070BB 50                  <1>     push rax
    70 000070BC 488D35(1E050000)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    71 000070C3 8806                <1>     mov byte [rsi], al  ;Construct a path
    72 000070C5 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    73 000070C8 66C746013A00        <1>     mov word [rsi + 1], ":" ;Path Colon and terminating zero
    74 000070CE F8                  <1>     clc
    75                              <1> ;++++++++++++++++++++++++++++
    76                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    77                              <1> ;Entered with path in rsi (ah=03h)
    78 000070CF B800030000          <1>     mov eax, 0300h  
    79 000070D4 CD2A                <1>     int 2Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    80                              <1> ;++++++++++++++++++++++++++++
    81 000070D6 58                  <1>     pop rax
    82 000070D7 5E                  <1>     pop rsi
    83                              <1> .exit:
    84 000070D8 729E                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    85                              <1>     return
    13                              <2> %%_ret:
    14 000070DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> absDiskWrite:       ;Int 26h
    88                              <1> ;al = Drive number
    89                              <1> ;rbx = Memory Buffer address to read from
    90                              <1> ;ecx = Number of sectors to write
    91                              <1> ;rdx = Start LBA to write to
    92 000070DB FA                  <1>     cli
    93 000070DC 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    94 000070E3 488D25(D8190000)    <1>     lea rsp, DiskStakTop
    95 000070EA 55                  <1>     push rbp
    96 000070EB 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    97 000070EC E8B2FFFFFF          <1>     call setupAbsDiskEntry
    98 000070F1 7252                <1>     jc absDiskExit
    99 000070F3 E86D020000          <1>     call primReqWriteSetup
   100 000070F8 EB1D                <1>     jmp short absDiskReadWriteCommon
   101                              <1> absDiskRead:        ;Int 25h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to write to
   104                              <1> ;ecx = Number of sectors to read
   105                              <1> ;rdx = Start LBA to read from
   106 000070FA FA                  <1>     cli 
   107 000070FB 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 00007102 488D25(D8190000)    <1>     lea rsp, DiskStakTop
   109 00007109 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   110 0000710A 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   111 0000710B E893FFFFFF          <1>     call setupAbsDiskEntry
   112 00007110 7233                <1>     jc absDiskExit
   113 00007112 E859020000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   114                              <1> absDiskReadWriteCommon:
   115                              <1> ;Entered with the appropriate function number in ah
   116                              <1> ; and primary request header in rbx
   117 00007117 E859000000          <1>     call absDiskDriverCall
   118 0000711C 7427                <1>     jz absDiskExit  ;Skip error code checking
   119 0000711E 8A05(C4040000)      <1>     mov al, byte [primReqPkt + ioReqPkt.status] ;Get low byte into al
   120                              <1>     ;DOS uses the following pairs in a table
   121                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   122 00007124 B480                <1>     mov ah, 80h ;Attachment failure
   123 00007126 3C0C                <1>     cmp al, 0Ch ;Gen error
   124 00007128 741A                <1>     je .absExit
   125 0000712A B440                <1>     mov ah, 40h ;Seek error
   126 0000712C 3C06                <1>     cmp al, 06h
   127 0000712E 7414                <1>     je .absExit
   128 00007130 B408                <1>     mov ah, 08h ;Bad CRC
   129 00007132 3C04                <1>     cmp al, 04h
   130 00007134 740E                <1>     je .absExit
   131 00007136 B404                <1>     mov ah, 04h ;Sector not found
   132 00007138 3C08                <1>     cmp al, 08h
   133 0000713A 7408                <1>     je .absExit
   134 0000713C 30E4                <1>     xor ah, ah  ;Write Protect Violation
   135 0000713E 84C0                <1>     test al, al
   136 00007140 7402                <1>     je .absExit
   137 00007142 B402                <1>     mov ah, 02h ;Other Error
   138                              <1> .absExit:
   139 00007144 F9                  <1>     stc
   140                              <1> absDiskExit:
   141 00007145 5B                  <1>     pop rbx
   142 00007146 5D                  <1>     pop rbp
   143 00007147 FA                  <1>     cli
   144 00007148 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]
   145 0000714F FB                  <1>     sti ;Reenable interrupts
   146 00007150 488D0D0D000000      <1>     lea rcx, absStackJuggle
   147 00007157 9C                  <1>     pushfq
   148 00007158 5A                  <1>     pop rdx ;Get the current flags
   149 00007159 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   150 0000715D 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   151 00007162 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   152                              <1> absStackJuggle:
   153 00007164 FA                  <1>     cli
   154 00007165 52                  <1>     push rdx    ;Push the flags on the stack
   155 00007166 51                  <1>     push rcx    ;Push the return address on the stack
   156 00007167 9C                  <1>     pushfq
   157 00007168 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   158 0000716A 89CA                <1>     mov edx, ecx
   159 0000716C FE0D(08040000)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   160 00007172 9D                  <1>     popfq
   161 00007173 FB                  <1>     sti
   162                              <1>     return
    13                              <2> %%_ret:
    14 00007174 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;       rbx = Request header address
   167                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   168                              <1> ;       eax = Status word from request
   169                              <1> ;       ecx = Number of sectors transferred
   170 00007175 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 00007176 8B0D(D7040000)      <1>     mov ecx, dword [primReqPkt + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 0000717C 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 00007180 E8A3FEFFFF          <1>     call goDriver   ;Make request
   176 00007185 5E                  <1>     pop rsi
   177 00007186 8B05(D7040000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]   ;Get actual num tfrd
   178 0000718C 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   179 0000718E 0FB705(C4040000)    <1>     movzx eax, word [primReqPkt + ioReqPkt.status]
   180 00007195 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   181                              <1>     return
    13                              <2> %%_ret:
    14 00007199 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> getDiskDPB:
   184                              <1> ;Gets the disk DPB if the Disk is valid
   185                              <1> ;Otherwise will return a pointer to the drive DPB
   186                              <1> ;Called with rdi pointing to the CDS
   187                              <1> ;Output:
   188                              <1> ;   CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   189 0000719A 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   190                              <1> .sftEp:   ;Entry point if updating DPB for an SFT entry!
   191 0000719E 57                  <1>     push rdi    ;Save the CDS/SFT ptr
   192 0000719F 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   193 000071A3 8805(09070000)      <1>     mov byte [workingDrv], al
   194 000071A9 E889020000          <1>     call setWorkingDPB
   195 000071AE E848000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   196 000071B3 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;If a driver didn't save rbp, get it back!
   197 000071BA 723D                <1>     jc .exit
   198 000071BC 753B                <1>     jnz .exit   ;If we jump, CF=NC!
   199                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched.
   200 000071BE 51                  <1>     push rcx
   201 000071BF 0FB60D(78000000)    <1>     movzx ecx, byte [lastdrvNum]
   202 000071C6 488B3D(65000000)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   203                              <1> .checkCDS:
   204                              <1> ;Redir are skipped as they are not associated with a DPB
   205 000071CD 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   206 000071D3 7517                <1>     jnz .next
   207 000071D5 48396F45            <1>     cmp qword [rdi + cds.qDPBPtr], rbp  ;If the dpb ptr matches, reset
   208 000071D9 7511                <1>     jne .next   ;Else, goto next
   209 000071DB C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0     ;Reset start cluster!
   210 000071E2 C6470300            <1>     mov byte [rdi + cds.sCurrentPath + 3], 0    ;Reset the path too :)
   211 000071E6 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2
   212                              <1> .next:
   213 000071EC 4881C75F000000      <1>     add rdi, cds_size
   214 000071F3 FFC9                <1>     dec ecx
   215 000071F5 75D6                <1>     jnz .checkCDS
   216 000071F7 59                  <1>     pop rcx
   217 000071F8 F8                  <1>     clc     ;Clear CF (rare but the cmp + add combo might set CF)
   218                              <1> .exit:
   219 000071F9 5F                  <1>     pop rdi     ;Get back the CDS/SFT ptr
   220                              <1>     return
    13                              <2> %%_ret:
    14 000071FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   221                              <1> 
   222                              <1> ensureDiskValid:
   223                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   224                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   225                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   226                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   227                              <1> ;   rbp preserved!
   228 000071FB E8B9010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   229                              <1> ;Return in rbx the req hdr address
   230 00007200 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   231 00007204 E81FFEFFFF          <1>     call goDriver   ;Request!
   232 00007209 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   233 0000720D F7C700800000        <1>     test edi, drvErrStatus
   234 00007213 0F85DB000000        <1>     jnz .diskDrvCritErr
   235 00007219 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]   ;Get the drive number for test
   236 00007220 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   237 00007223 3805(E1190000)      <1>     cmp byte [rebuildDrv], al   ;Do we need to rebuild this drive?
   238 00007229 750C                <1>     jne .notForce
   239                              <1> ;Here we are forced to rebuild the DPB. In principle, the medium has
   240                              <1> ; not changed but the volume label must be updated. 
   241                              <1> ;The driver can use this opportunity to synchronise its BPB with the 
   242                              <1> ; new label.
   243                              <1> ;We jump directly to skip buffer checking as the rebuilding of the BPB is not
   244                              <1> ; such that we invalidate the buffers.
   245 0000722B C605(E1190000)FF    <1>     mov byte [rebuildDrv], -1   ;Reset this flag as we are doing our job.
   246 00007232 E959000000          <1>     jmp .resetDPB
   247                              <1> .notForce:
   248                              <1> ;Note dpb access flag is either 1 or 0.
   249                              <1> ;If either the check media byte or the dpb access flag is -1, rebuild bpb.
   250                              <1> ;Else assume here access flag is 0. If medret is neq 0, return. Else, 
   251                              <1> ; check buffers.
   252 00007237 0A630E              <1>     or ah, byte [rbx + mediaCheckReqPkt.medret] ;Carry flag always cleared!
   253 0000723A 7823                <1>     js .mediaChanged      ;If either byte is -1, media changed
   254                              <1>     retnz                       ;If not zero, we return. Media not changed!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000723C 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000723E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   255                              <1> ;Here we check for any dirty buffers. If dirty buffer found, dont get new BPB.
   256 0000723F 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   257                              <1> .findDirtyBuffer:
   258 00007246 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]              ;Is buffer for us?
   259 00007249 7508                <1>     jne .gotoNextBuffer ;If no, goto next buffer
   260 0000724B F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is buffer dirty?
   261 0000724F 7402                <1>     jz .gotoNextBuffer  ;If no, goto next buffer
   262 00007251 F8                  <1>     clc 
   263                              <1>     return
    13                              <2> %%_ret:
    14 00007252 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   264                              <1> .gotoNextBuffer:
   265 00007253 488B3F              <1>     mov rdi, qword [rdi]    ;Get buffer link pointer
   266 00007256 4881FFFFFFFFFF      <1>     cmp rdi, -1
   267 0000725D 75E7                <1>     jne .findDirtyBuffer        ;Now check the next buffer
   268                              <1> ;If we found no dirty buffers for this drive we assume the media has changed.
   269                              <1> ;Don't skip the below as it will put a "clean" buffer at the head
   270                              <1> ; of the chain for us.
   271                              <1> .mediaChanged:
   272                              <1> ;If we have changed media, check for dirty buffers. If we have any
   273                              <1> ; we must throw an error to tell the user to replace the media back.
   274                              <1> ;Now use the reference bit to keep track of which buffers we've gone through.
   275 0000725F C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Reset number of free to unknown
   276 00007266 E8E394FFFF          <1>     call markBuffersAsUnreferenced  ;We're going to walk through so clear ref bit
   277                              <1> .dirtyLoop:
   278 0000726B 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer    ;Set this buffer as referenced
   279 0000726F 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]          ;Is this buffer for us?
   280 00007272 7515                <1>     jne .skipDirtyCheck
   281 00007274 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this dirty?
   282 00007278 0F85A6000000        <1>     jnz .dirtyBufferError   ;Signal bad disk change if so!
   283                              <1> ;Set reference bit and drive to free
   284 0000727E 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], (refBuffer << 8) | freeBuffer 
   285 00007284 E8DF94FFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Move this up, get next buffer
   286                              <1> .skipDirtyCheck:
   287 00007289 E8E894FFFF          <1>     call findUnreferencedBuffer ;Get the next unreferenced buffer
   288 0000728E 75DB                <1>     jnz .dirtyLoop  ;Now repeat for this buffer too
   289                              <1> .resetDPB:
   290                              <1> ;Start by checking if the MSD is ``IBM" style or normal
   291 00007290 488B7D1B            <1>     mov rdi, qword [rbp + dpb.qDriverHeaderPtr]
   292 00007294 66F747080020        <1>     test word [rdi + drvHdr.attrib], devDrvNotIBM
   293 0000729A 7512                <1>     jnz .dpbNotIbm
   294                              <1> ;Read the FAT into buffer
   295 0000729C B801000000          <1>     mov eax, 1              ;Read sector 1 into a buffer
   296 000072A1 E8C197FFFF          <1>     call getBufForFat       ;Point rbx to the buffer
   297                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000072A6 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000072A8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   298 000072A9 4889DF              <1>     mov rdi, rbx
   299 000072AC EB0F                <1>     jmp short .buildGetBPB              
   300                              <1> .dpbNotIbm:
   301                              <1> ;Get a buffer for the driver to use as scratch space
   302 000072AE 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   303 000072B5 E85A95FFFF          <1>     call flushAndFreeBuffer
   304                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000072BA 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000072BC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   305                              <1> .buildGetBPB:
   306 000072BD E823010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   307 000072C2 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   308 000072C6 E85DFDFFFF          <1>     call goDriver   ;Request!
   309 000072CB 0FB77B03            <1>     movzx edi, word [rbx + bpbBuildReqPkt.status]
   310 000072CF F7C700800000        <1>     test edi, drvErrStatus
   311 000072D5 751D                <1>     jnz .diskDrvCritErr
   312                              <1>     ;Now rebuild the dpb fields for this drive
   313 000072D7 488B7316            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bpbptr]    ;Get ptr to BPB
   314 000072DB 53                  <1>     push rbx
   315 000072DC E8E1090000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   316 000072E1 5B                  <1>     pop rbx
   317                              <1>     ;Adjust the buffer header information
   318 000072E2 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   319 000072E5 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   320 000072E8 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   321 000072EB 884312              <1>     mov byte [rbx + bufferHdr.bufFATcopy], al
   322 000072EE 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   323 000072F0 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   324                              <1>     return
    13                              <2> %%_ret:
    14 000072F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   325                              <1> .diskDrvCritErr:
   326                              <1> ;Critical Errors fall through here
   327                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   328 000072F4 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Reset freecluster count
   329 000072FB 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   330                              <1>     ;mov ah, critRead | critFAT | critFailOK | critRetryOK
   331 00007302 B418                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK
   332 00007304 8825(68040000)      <1>     mov byte [Int24bitfld], ah  ;Save the permissions in var
   333 0000730A 400FB6FF            <1>     movzx edi, dil  ;Clear the upper bytes, save only error code
   334 0000730E E885F7FFFF          <1>     call diskDevErrBitfield ;Goto disk crit error, but with bitfield set
   335 00007313 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]
   336 0000731A 3C01                <1>     cmp al, critRetry
   337 0000731C 0F84D9FEFFFF        <1>     je ensureDiskValid
   338                              <1> .errorExitBad:
   339 00007322 F9                  <1>     stc     ;Set error flag to indicate fail
   340                              <1>     return  ;And exit
    13                              <2> %%_ret:
    14 00007323 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> 
   342                              <1> .dirtyBufferError:
   343                              <1> ;We can only enter this error if we returned media changed.
   344                              <1> ;We will never enter here if we returned media unknown.
   345 00007324 55                  <1>     push rbp
   346 00007325 488B6D1B            <1>     mov rbp, qword [rbp + dpb.qDriverHeaderPtr] ;Get the ptr to the driver
   347 00007329 66F745080008        <1>     test word [rbp + drvHdr.attrib], devDrvOpClRem
   348 0000732F 5D                  <1>     pop rbp
   349 00007330 7429                <1>     jz .dbeExit     ;Just return Invalid Disk Swap if bit not set
   350                              <1> ;rbp points to the dpb still
   351 00007332 57                  <1>     push rdi
   352 00007333 488B3D(D0040000)    <1>     mov rdi, qword [primReqPkt + mediaCheckReqPkt.desptr]   ;Get the pointer into rdi
   353 0000733A 48893D(0F040000)    <1>     mov qword [errorVolLbl], rdi    ;Save the erroring volume label pointer
   354 00007341 5F                  <1>     pop rdi ;Get back the buffer pointer
   355 00007342 C605(68040000)18    <1>     mov byte [Int24bitfld], critRead | critDOS | critRetryOK | critFailOK
   356                              <1> ;Do not touch the read/write flag as this is set by the read/write operation.
   357                              <1> ;It is meaningless in the error here, but may affect the message
   358                              <1> ; that comes up on the handler (not a big deal). Since we report a bad
   359                              <1> ; media change here, it should be obvious not to include the read/write 
   360                              <1> ; string.
   361 00007349 B80F000000          <1>     mov eax, drvBadDskChnge ;Set the driver error code to bad disk change
   362 0000734E E8DBF6FFFF          <1>     call diskDevErr
   363 00007353 3C03                <1>     cmp al, critFail    ;Did the user select fail?
   364 00007355 0F85A0FEFFFF        <1>     jne ensureDiskValid  ;If not, try again!
   365                              <1> .dbeExit:
   366 0000735B B822000000          <1>     mov eax, errIDC     ;Else, report an invalid disk swap error!
   367 00007360 E9BDFFFFFF          <1>     jmp .errorExitBad    ;and exit with CF set (often gets xlat to accden)
   368                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   369                              <1> ;           Primitive Driver Requests
   370                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   371                              <1> ;First are Disk requests, then Char device requests
   372                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   373                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   374                              <1> 
   375                              <1> primReqWriteSetup:
   376 00007365 50                  <1>     push rax
   377 00007366 B408                <1>     mov ah, drvWRITE    ;Command code
   378 00007368 0225(D0030000)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   379 0000736E EB03                <1>     jmp short primReqRWCommon
   380                              <1> primReqReadSetup:
   381 00007370 50                  <1>     push rax
   382 00007371 B404                <1>     mov ah, drvREAD
   383                              <1> primReqRWCommon:
   384                              <1> ;Sets up the IO request packet with:
   385                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   386                              <1> ; rbx = Data storage buffer ptr
   387                              <1> ; ecx = Number of sectors to transfer
   388                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   389                              <1> ; ~~~~ Set by entry function ~~~~ 
   390                              <1> ; ah = Command code
   391                              <1> ; All regs preserved EXCEPT rbx.
   392                              <1> ; Return: rbx = Transfer Address
   393 00007373 48891D(CF040000)    <1>     mov qword [primReqPkt + ioReqPkt.bufptr], rbx   ;Buffer
   394 0000737A 890D(D7040000)      <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   395 00007380 C605(C1040000)2A    <1>     mov byte [primReqPkt + ioReqPkt.hdrlen], ioReqPkt_size
   396 00007387 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   397 0000738C 8905(C2040000)      <1>     mov dword [primReqPkt + ioReqPkt.unitnm], eax   ;Clear unit number field
   398 00007392 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   399 00007395 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   400                              <1>     ;Disk operations only here!
   401 00007397 488915(DB040000)    <1>     mov qword [primReqPkt + ioReqPkt.strtsc], rdx   ;Start sector
   402 0000739E 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   403 000073A1 8805(CE040000)      <1>     mov byte [primReqPkt + ioReqPkt.medesc], al ;Store medesc!
   404 000073A7 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   405 000073AA 8805(C2040000)      <1>     mov byte [primReqPkt + ioReqPkt.unitnm], al ;Store the unit number
   406                              <1> primReqCommonExit:
   407                              <1> ;Returns in rbx the primary request header as these functions
   408                              <1> ; setup the request in the primary request header space
   409 000073B0 58                  <1>     pop rax
   410 000073B1 488D1D(C1040000)    <1>     lea rbx, primReqPkt ;Put in rbx the primary request header
   411                              <1>     return
    13                              <2> %%_ret:
    14 000073B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> 
   413                              <1> primReqMedCheckSetup:
   414                              <1> ;Prepare the diskIO packet for mediacheck
   415                              <1> ;rbp has DPB pointer for device to check media on
   416 000073B9 50                  <1>     push rax
   417 000073BA C605(C1040000)17    <1>     mov byte [primReqPkt + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   418 000073C1 C605(C3040000)01    <1>     mov byte [primReqPkt + mediaCheckReqPkt.cmdcde], drvMEDCHK
   419                              <1> .cmn:
   420 000073C8 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   421 000073CB 8805(CE040000)      <1>     mov byte [primReqPkt + mediaCheckReqPkt.medesc], al
   422 000073D1 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   423 000073D4 8805(C2040000)      <1>     mov byte [primReqPkt + mediaCheckReqPkt.unitnm], al
   424 000073DA 66C705(C4040000)00- <1>     mov word [primReqPkt + mediaCheckReqPkt.status], 0
   424 000073E2 00                  <1>
   425 000073E3 EBCB                <1>     jmp short primReqCommonExit
   426                              <1> 
   427                              <1> primReqGetBPBSetup:
   428                              <1> ;rbp has DPB pointer for device
   429                              <1> ;rdi has sector buffer header pointer for transfer
   430 000073E5 50                  <1>     push rax
   431 000073E6 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   432 000073EA 488905(CF040000)    <1>     mov qword [primReqPkt + bpbBuildReqPkt.bufptr], rax
   433 000073F1 C605(C1040000)1E    <1>     mov byte [primReqPkt + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   434 000073F8 C605(C3040000)02    <1>     mov byte [primReqPkt + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   435 000073FF EBC7                <1>     jmp short primReqMedCheckSetup.cmn
   436                              <1> 
   437                              <1> primReqOpenSetup:
   438                              <1> ;al = unit number if a disk device. Undefined otherwise
   439 00007401 50                  <1>     push rax
   440 00007402 B40D                <1>     mov ah, drvOPEN
   441 00007404 EB03                <1>     jmp short primReqOCcommon
   442                              <1> primReqCloseSetup:
   443                              <1> ;al = unit number if a disk device. Undefined otherwise
   444 00007406 50                  <1>     push rax
   445 00007407 B40E                <1>     mov ah, drvCLOSE
   446                              <1> primReqOCcommon:
   447 00007409 C605(C1040000)0D    <1>     mov byte [primReqPkt + openReqPkt.hdrlen], openReqPkt_size
   448 00007410 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   449 00007411 8905(C2040000)      <1>     mov dword [primReqPkt + openReqPkt.unitnm], eax
   450                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   451 00007417 E994FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   452                              <1> 
   453                              <1> secdReqCharIOReq:
   454                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   455                              <1> ;Input:
   456                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   457                              <1> ; ecx = Length of buffer
   458                              <1> ; rdi = Buffer pointer
   459                              <1> ;Output: 
   460                              <1> ; rbx = Transfer Address 
   461 0000741C 488D1D(97040000)    <1>     lea rbx, secdReqPkt
   462 00007423 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   463 00007426 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   464 00007429 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   465 0000742F 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   466 00007433 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   467                              <1>     return
    13                              <2> %%_ret:
    14 00007436 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> ;If the device which will process this request is a disk device
   469                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   470                              <1> ;Then we will read the appropriate byte from that buffer to the 
   471                              <1> ; singleIOByt buffer.
   472                              <1> ;Such a request will require additional setup with the following fields:
   473                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    52                                  %include "./src/Kernel/Core/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 2Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 00007437 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 0000743E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (UNC paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 0000743F 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    21 00007446 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 0000744D 7409                <1>     je .net
    23 0000744F 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 00007455 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 00007457 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 00007458 F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 00007459 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 0000745A E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 0000745F 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 00007461 B80C110000          <1>     mov eax, 110Ch 
    43 00007466 CD2F                <1>     int 2Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 00007468 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 00007469 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    48 00007470 E8E9040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 00007475 E820FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 0000747A 7223                <1>     jc .exit
    51 0000747C E8C897FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 00007481 721C                <1>     jc .exit
    53 00007483 55                  <1>     push rbp
    54 00007484 E80A93FFFF          <1>     call flushAllBuffersForDPB  ;To ensure FAT32 FSInfo sectors synced
    55 00007489 5D                  <1>     pop rbp
    56 0000748A 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    57 0000748D FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    58 0000748F 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    59 00007492 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr] ;This is the max cluster address
    60 00007495 FFCB                <1>     dec ebx ;Get the number of clusters
    61 00007497 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    62 0000749B 8B5531              <1>     mov edx, dword [rbp + dpb.dFreeClustCnt]    ;Get # free clusters
    63 0000749E F8                  <1>     clc
    64                              <1> .exit:
    65 0000749F E8C4040000          <1>     call dosCrit1Exit
    66                              <1>     return
    13                              <2> %%_ret:
    14 000074A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> 
    68                              <1> muxGetIntVector:    ;Int 2Fh AX=1202h
    69                              <1> ;Input: al = Interrupt number
    70                              <1> ;Output: rbx = Interrupt Vector
    71 000074A5 50                  <1>     push rax    ;Preserve rax
    72 000074A6 FA                  <1>     cli ;Halt interrupts
    73 000074A7 0F010D(171A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
    74 000074AE 0FB6C0              <1>     movzx eax, al
    75 000074B1 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    76 000074B5 480305(191A0000)    <1>     add rax, qword [dosIdtPtr.base]    
    77 000074BC 31DB                <1>     xor ebx, ebx
    78 000074BE 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    79 000074C1 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    80 000074C5 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    81 000074C9 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    82 000074CD 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    83 000074D0 FB                  <1>     sti
    84 000074D1 58                  <1>     pop rax
    85                              <1>     return
    13                              <2> %%_ret:
    14 000074D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> getUserRegs:   ;Int 2Fh AX=1218h
    88                              <1> ;Returns ptr to user regs in rsi
    89 000074D3 488B35(7B040000)    <1>     mov rsi, qword [oldRSP]
    90                              <1>     return
    13                              <2> %%_ret:
    14 000074DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> walkDPBchain:
    93                              <1> ;Called with al = 0 based drive number
    94                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    95 000074DB 488B35(3B000000)    <1>     mov rsi, qword [dpbHeadPtr]  ;Get variable pointing to first DPB
    96                              <1> .walk:
    97 000074E2 4881FEFFFFFFFF      <1>     cmp rsi, -1
    98 000074E9 740A                <1>     je .exitBad
    99 000074EB 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   100 000074ED 7407                <1>     je .exit    ;Drive found
   101 000074EF 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   102 000074F3 EBED                <1>     jmp short .walk
   103                              <1> .exitBad:
   104 000074F5 F9                  <1>     stc
   105                              <1> .exit:
   106                              <1>     return
    13                              <2> %%_ret:
    14 000074F6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> getCDSNotJoin:   
   108                              <1> ;Gets a drive CDS, sets it as working and checks it is not a join drive
   109                              <1> ;Input: al = 1-based drive number
   110                              <1> ;Output: al = 0-based drive number
   111                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Join)
   112                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Join flags
   113                              <1> ;            set.
   114 000074F7 E86B000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   115 000074FC 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   116 000074FE 56                  <1>     push rsi
   117 000074FF 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   118 00007506 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   119 0000750C 5E                  <1>     pop rsi
   120 0000750D 7401                <1>     jz .exit
   121 0000750F F9                  <1>     stc
   122                              <1> .exit:
   123                              <1>     return
    13                              <2> %%_ret:
    14 00007510 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> 
   125                              <1> buildNewCDS:   ;Int 2Fh AX=121Fh
   126                              <1> ;If used with SDA CDS allows for direct disk access without needing to 
   127                              <1> ; actually use the real CDS. This prevents troubles when findnext on a 
   128                              <1> ; drive occurs the real CDS itself may have completely changed, i.e. 
   129                              <1> ; become unavailable. The SDA CDS becomes like the protoCDS of DOS 2 
   130                              <1> ; that was just an appendix of the DPB. Otherwise, can be used to init
   131                              <1> ; a new CDS or even a new complete CDS array!
   132                              <1> ;Input: al = Drive Letter for drive
   133                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   134                              <1> ;Output: rdi = newly filled in workingCDS
   135                              <1> ;CF=NC => CDS valid and has a DPB
   136                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   137 00007511 50                  <1>     push rax
   138 00007512 2C40                <1>     sub al, "A"-1
   139 00007514 3805(77000000)      <1>     cmp byte [numPhysVol], al    ;al must be bigger than # of block drives
   140 0000751A 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   141 00007521 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   142 00007527 58                  <1>     pop rax
   143 00007528 723C                <1>     jb .exit    ;Exit with CF=CY
   144 0000752A 50                  <1>     push rax
   145 0000752B 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   146 00007530 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   147 00007532 58                  <1>     pop rax
   148 00007533 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   149 00007539 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   150 00007540 48C7475100000000    <1>     mov qword [rdi + cds.qIFSPtr], 0    ;Optional redir signature field
   151 00007548 C7475900000000      <1>     mov dword [rdi + cds.dNetStore], 0   ;Optional storage/signature dword
   152 0000754F 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   153                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   154 00007555 50                  <1>     push rax
   155 00007556 56                  <1>     push rsi
   156 00007557 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   157 00007559 E87DFFFFFF          <1>     call walkDPBchain
   158 0000755E 7204                <1>     jb .skipSettingDPB
   159 00007560 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   160                              <1> .skipSettingDPB:
   161 00007564 5E                  <1>     pop rsi
   162 00007565 58                  <1>     pop rax
   163                              <1> .exit:
   164                              <1>     return
    13                              <2> %%_ret:
    14 00007566 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> 
   166                              <1> getCDS:     ;Int 2Fh AX=1219h
   167                              <1> ;Gets the device DPB and saves it in the DOS variable
   168                              <1> ;This can be called to get CDS for network drives too!
   169                              <1> ;Input: al = 1 based drive number
   170                              <1> ;Sets workingCDS var with the CDS for the device. 
   171                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   172 00007567 84C0                <1>     test al, al
   173 00007569 7508                <1>     jnz .skip
   174 0000756B 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive
   175 00007571 FEC0                <1>     inc al
   176                              <1> .skip:
   177 00007573 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   178 00007575 56                  <1>     push rsi
   179 00007576 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   180 0000757D F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   181 00007584 7423                <1>     jz .localCall
   182                              <1>     ;Invokation via 21/5D00
   183 00007586 50                  <1>     push rax
   184 00007587 57                  <1>     push rdi
   185 00007588 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   186 0000758F 48893D(12070000)    <1>     mov qword [workingCDS], rdi ;Make it current
   187 00007596 0441                <1>     add al, "A" ;Convert to a drive letter
   188 00007598 E874FFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   189 0000759D 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   190 000075A3 5F                  <1>     pop rdi
   191 000075A4 58                  <1>     pop rax
   192 000075A5 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   193 000075A7 EB17                <1>     jmp short .exitOk   ;All oki
   194                              <1> .localCall:
   195 000075A9 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   196 000075AE 7208                <1>     jc .exitBad
   197 000075B0 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   198 000075B6 7508                <1>     jnz .exitOk ;Exit with flag cleared
   199                              <1>     ;Else Return to unknown error locus
   200                              <1> .exitBad:
   201 000075B8 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   202                              <1> .exitBad1:
   203 000075BF F9                  <1>     stc
   204                              <1> .exitOk:
   205 000075C0 5E                  <1>     pop rsi
   206                              <1>     return
    13                              <2> %%_ret:
    14 000075C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> getCDSforDrive:     ;Int 2Fh AX=1217h
   209                              <1>     ;Gets the CDS for the current drive in al
   210                              <1>     ;Input: al = Drive number, 0 = A ...
   211                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   212                              <1>     ;        CF=CY => al not valid
   213 000075C2 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
   214 000075C8 7202                <1>     jb .ctn
   215 000075CA F9                  <1>     stc 
   216                              <1>     return
    13                              <2> %%_ret:
    14 000075CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> .ctn:
   218 000075CC 50                  <1>     push rax
   219 000075CD 52                  <1>     push rdx
   220 000075CE 0FB6C0              <1>     movzx eax, al
   221 000075D1 48BE5F000000000000- <1>     mov rsi, cds_size
   221 000075DA 00                  <1>
   222 000075DB 31D2                <1>     xor edx, edx
   223 000075DD F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   224 000075DF 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   225 000075E6 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   226 000075E9 488935(12070000)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   227 000075F0 5A                  <1>     pop rdx
   228 000075F1 58                  <1>     pop rax
   229 000075F2 F8                  <1>     clc
   230                              <1>     return
    13                              <2> %%_ret:
    14 000075F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> 
   233                              <1> swapPathSeparator:  ;Int 2Fh, AX=1204h, Normalise Path Separator
   234                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   235                              <1> ;Input: AL = Char to normalise.
   236                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   237                              <1> ;If path separator, set ZF=ZE
   238 000075F4 3C5C                <1>     cmp al, "\"
   239 000075F6 7406                <1>     je .exit
   240 000075F8 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   241 000075FA 7502                <1>     jne .exit
   242 000075FC B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   243                              <1> .exit:
   244                              <1>     return
    13                              <2> %%_ret:
    14 000075FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> 
   246                              <1> uppercaseCharAtPtr:
   247                              <1> ;Get the char pointed to by rsi and then fall
   248 000075FF AC                  <1>     lodsb
   249                              <1> uppercaseChar:      ;Int 2Fh, AX=1213h, Uppercase Char
   250                              <1> ;Convert a lowercase char to uppercase using file UC table
   251                              <1> ; Leave alone uppercase chars and invalid chars
   252                              <1> ;Input: al = Char to convert to uppercase
   253                              <1> ;Output: al = Processed char
   254 00007600 53                  <1>     push rbx
   255 00007601 488D1D058DFFFF      <1>     lea rbx, fileUCTbl    ;Get ptr to ucFilenameTable
   256                              <1> uppercaseCharWithTable:
   257                              <1> ;Convert a lowercase char to uppercase char using a table as provided
   258                              <1> ;Input: al = Char to convert to uppercase
   259                              <1> ;       rbx -> Table to use for translation
   260                              <1> ;Output: al = Processed char
   261                              <1> ;WARNING: 
   262                              <1> ;   RBX MUST BE PUSHED ONTO THE STACK BEFORE ENTERING THIS PROCEDURE!
   263 00007608 3C61                <1>     cmp al, "a"
   264 0000760A 720D                <1>     jb .exit
   265 0000760C 3C7A                <1>     cmp al, "z"
   266 0000760E 7702                <1>     ja .checkExt
   267 00007610 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   268                              <1> .checkExt:
   269 00007612 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   270 00007614 7203                <1>     jb .exit
   271 00007616 2C80                <1>     sub al, 80h ;Turn into table offset
   272 00007618 D7                  <1>     xlatb   ;Get translated extended byte into al
   273                              <1> .exit:
   274 00007619 50                  <1>     push rax    ;Save al temporarily
   275 0000761A 488D1DA68EFFFF      <1>     lea rbx, asciiCharProperties
   276 00007621 D7                  <1>     xlatb   ;Get the signature in al
   277 00007622 A801                <1>     test al, badChar
   278 00007624 58                  <1>     pop rax
   279 00007625 5B                  <1>     pop rbx
   280                              <1>     return
    13                              <2> %%_ret:
    14 00007626 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> isCharTerminator:
   283                              <1> ;Input: al = Char to check properties of
   284                              <1> ;Output:    ZF=NZ => Char not name terminator
   285                              <1> ;           ZF=ZE => Char terminator
   286 00007627 50                  <1>     push rax
   287 00007628 53                  <1>     push rbx
   288 00007629 488D1D978EFFFF      <1>     lea rbx, asciiCharProperties
   289 00007630 D7                  <1>     xlatb
   290 00007631 A802                <1>     test al, termChar
   291 00007633 5B                  <1>     pop rbx
   292 00007634 58                  <1>     pop rax
   293                              <1>     return
    13                              <2> %%_ret:
    14 00007635 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> isCharSeparator:
   296                              <1> ;Input: al = Char to check properties of
   297                              <1> ;Output:    ZF=NZ => Char not separator
   298                              <1> ;           ZF=ZE => Char separator
   299 00007636 50                  <1>     push rax
   300 00007637 53                  <1>     push rbx
   301 00007638 488D1D888EFFFF      <1>     lea rbx, asciiCharProperties
   302 0000763F D7                  <1>     xlatb
   303 00007640 A804                <1>     test al, sepChar
   304 00007642 5B                  <1>     pop rbx
   305 00007643 58                  <1>     pop rax
   306                              <1>     return
    13                              <2> %%_ret:
    14 00007644 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   307                              <1> 
   308                              <1> strlen2:    ;Int 2Fh, AX=1212h
   309                              <1> ;Entry point for Multiplex
   310 00007645 57                  <1>     push rdi
   311 00007646 4889F7              <1>     mov rdi, rsi
   312 00007649 E802000000          <1>     call strlen
   313 0000764E 5F                  <1>     pop rdi
   314                              <1>     return
    13                              <2> %%_ret:
    14 0000764F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> strlen: 
   316                              <1> ;Gets the length of a ASCIIZ string
   317                              <1> ;Input: rdi = Source buffer
   318                              <1> ;Output: ecx = Length of string
   319 00007650 50                  <1>     push rax
   320 00007651 57                  <1>     push rdi
   321 00007652 30C0                <1>     xor al, al
   322 00007654 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   323 00007656 FFC9                <1>     dec ecx ;rcx = -1
   324 00007658 F2AE                <1>     repne scasb
   325 0000765A F7D1                <1>     not ecx
   326 0000765C 5F                  <1>     pop rdi
   327 0000765D 58                  <1>     pop rax
   328                              <1>     return
    13                              <2> %%_ret:
    14 0000765E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> strcpy:
   331                              <1> ;Copies a null terminated string from rsi to rdi
   332 0000765F AC                  <1>     lodsb
   333 00007660 AA                  <1>     stosb
   334 00007661 84C0                <1>     test al, al
   335                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007663 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007665 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   336 00007666 EBF7                <1>     jmp short strcpy
   337                              <1> 
   338                              <1> strcmp:
   339                              <1> ;Compares two ASCIIZ strings for equality.
   340                              <1> ;Input: rsi = First string
   341                              <1> ;       rdi = Second string
   342                              <1> ;       ecx = Number of bytes to compare
   343                              <1> ;Output: ZF=ZE => Equal
   344                              <1> ;        ZF=NZ => Not equal
   345 00007668 56                  <1>     push rsi
   346 00007669 57                  <1>     push rdi
   347 0000766A F3A6                <1>     repe cmpsb
   348 0000766C 5F                  <1>     pop rdi
   349 0000766D 5E                  <1>     pop rsi
   350                              <1>     return
    13                              <2> %%_ret:
    14 0000766E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> 
   352                              <1> 
   353                              <1> normaliseFileName:  ;Int 2Fh, AX=1211h
   354                              <1> ;Converts lowercase to uppercase and / to "\"
   355                              <1> ;Input: rsi = Source buffer
   356                              <1> ;       rdi = Buffer to place normalised path
   357 0000766F 50                  <1>     push rax
   358 00007670 56                  <1>     push rsi
   359 00007671 57                  <1>     push rdi
   360                              <1> .scan:
   361 00007672 AC                  <1>     lodsb
   362 00007673 84C0                <1>     test al, al
   363 00007675 740D                <1>     jz .exit
   364 00007677 E878FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   365 0000767C E87FFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   366 00007681 AA                  <1>     stosb
   367 00007682 EBEE                <1>     jmp short .scan
   368                              <1> .exit:
   369 00007684 5F                  <1>     pop rdi
   370 00007685 5E                  <1>     pop rsi
   371 00007686 58                  <1>     pop rax
   372                              <1>     return
    13                              <2> %%_ret:
    14 00007687 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> compareFileNames:   ;Int 2Fh, AX=121Eh
   375                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   376                              <1> ;Input: rsi = One ASCIIZ pathname
   377                              <1> ;       rdi = Second ASCIIZ pathname
   378                              <1> ;Return:
   379                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   380 00007688 50                  <1>     push rax
   381 00007689 56                  <1>     push rsi
   382 0000768A 57                  <1>     push rdi
   383                              <1> .scan:
   384 0000768B AC                  <1>     lodsb
   385 0000768C E818000000          <1>     call .normaliseChar
   386 00007691 88C4                <1>     mov ah, al  ;Save normalised char in ah
   387 00007693 8A07                <1>     mov al, byte [rdi]  ;Get the char in path2
   388 00007695 48FFC7              <1>     inc rdi ;And goto next char
   389 00007698 E80C000000          <1>     call .normaliseChar
   390 0000769D 38E0                <1>     cmp al, ah  ;Are they equal?
   391 0000769F 7504                <1>     jne .exit   ;If not equal, exit
   392 000076A1 84C0                <1>     test al, al ;Here al=ah. If al == 0, exit!
   393 000076A3 75E6                <1>     jnz .scan
   394                              <1> .exit:
   395 000076A5 5F                  <1>     pop rdi
   396 000076A6 5E                  <1>     pop rsi
   397 000076A7 58                  <1>     pop rax
   398                              <1>     return
    13                              <2> %%_ret:
    14 000076A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   399                              <1> .normaliseChar:
   400 000076A9 E852FFFFFF          <1>     call uppercaseChar      ;Uppercase the char if uppercaseable
   401 000076AE E841FFFFFF          <1>     call swapPathSeparator  ;Swap if a pathsep char
   402                              <1>     return
    13                              <2> %%_ret:
    14 000076B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   403                              <1> checkPathspecOK:
   404                              <1> ;Input:
   405                              <1> ;rsi -> points to a path to verify if it is ok.
   406                              <1> ;Output:
   407                              <1> ;CF=NC => The path is totally clean and ok to use.
   408                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   409                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   410                              <1> ; and depending on method of invokation and caller, may be permissable.
   411                              <1> ;We accept lc and uc characters in this check function.
   412 000076B4 50                  <1>     push rax
   413 000076B5 53                  <1>     push rbx    ;Use rbx as the return flag status
   414 000076B6 56                  <1>     push rsi
   415 000076B7 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   416                              <1>     ;Start by getting the length of the ASCIIZ string.
   417 000076B9 51                  <1>     push rcx
   418 000076BA 57                  <1>     push rdi
   419 000076BB 4889F7              <1>     mov rdi, rsi
   420 000076BE E88DFFFFFF          <1>     call strlen
   421 000076C3 89C8                <1>     mov eax, ecx    ;Save the length in eax
   422 000076C5 5F                  <1>     pop rdi
   423 000076C6 59                  <1>     pop rcx
   424 000076C7 3D40000000          <1>     cmp eax, MAX_FSPEC    ;Check
   425 000076CC 0F8792000000        <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   426 000076D2 85C0                <1>     test eax, eax   ;If the path is empty, also error out!
   427 000076D4 0F848A000000        <1>     jz .badExit
   428                              <1>     ;First we verify if our path is relative or canonical (absolute)
   429 000076DA 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   430 000076DD 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   431 000076E1 7416                <1>     je .netName
   432 000076E3 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   433 000076E7 7410                <1>     je .netName
   434 000076E9 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   435 000076EC 7419                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   436                              <1>     ;Here if relative
   437 000076EE F605(02070000)FF    <1>     test byte [dosInvoke], -1
   438 000076F5 756D                <1>     jnz .badExit    ;If this is -1, server invoke.
   439 000076F7 EB3B                <1>     jmp short .okToScan
   440                              <1> .netName:
   441 000076F9 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the UNC start symbol
   442 00007700 803E00              <1>     cmp byte [rsi], 0   ;If this is an empty path, error!
   443 00007703 745F                <1>     je .badExit
   444 00007705 EB2D                <1>     jmp short .okToScan
   445                              <1> .diskPath:
   446 00007707 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   447 0000770E 803E00              <1>     cmp byte [rsi], 0   ;Cannot have an empty relative path!
   448 00007711 7451                <1>     je .badExit
   449 00007713 F605(02070000)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   450 0000771A 740F                <1>     jz .localAbsCheck
   451                              <1> .absMain:
   452 0000771C AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   453 0000771D E8D2FEFFFF          <1>     call swapPathSeparator
   454 00007722 7540                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   455 00007724 803E00              <1>     cmp byte [rsi], 0   ;Is the char after the slash null?
   456 00007727 743B                <1>     je .badExit ;Error if so!
   457 00007729 EB09                <1>     jmp short .okToScan
   458                              <1> .localAbsCheck:
   459 0000772B 8A06                <1>     mov al, byte [rsi]  ;Get the char we are pointing at
   460 0000772D E8C2FEFFFF          <1>     call swapPathSeparator  ;Is it a pathsep?
   461 00007732 74E8                <1>     jz .absMain ;If it is, we do the absolute check
   462                              <1>     ;Else we are relative and begin wildcard search
   463                              <1> .okToScan:
   464 00007734 AC                  <1>     lodsb   
   465 00007735 84C0                <1>     test al, al ;End of path char?
   466 00007737 7430                <1>     jz .exit
   467 00007739 E8B6FEFFFF          <1>     call swapPathSeparator
   468 0000773E 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   469 00007740 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   470 00007742 7411                <1>     je .wcFound
   471 00007744 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   472 00007746 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   473                              <1>     ;Else we check that the char in al is an acceptable char
   474 00007748 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   475 0000774A 74E8                <1>     je .okToScan
   476 0000774C E831000000          <1>     call checkCharValid
   477 00007751 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   478 00007753 EBDF                <1>     jmp short .okToScan
   479                              <1> .wcFound:
   480 00007755 BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   481 0000775A EBD8                <1>     jmp short .okToScan
   482                              <1> .wcCheck:
   483                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   484 0000775C F7C340000000        <1>     test ebx, 40h
   485 00007762 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   486                              <1>     ;Else fall through in error
   487                              <1> .badExit:
   488 00007764 BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   489                              <1> .exit:
   490 00007769 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   491 0000776A 9D                  <1>     popfq
   492 0000776B 5E                  <1>     pop rsi
   493 0000776C 5B                  <1>     pop rbx
   494 0000776D 58                  <1>     pop rax
   495                              <1>     return
    13                              <2> %%_ret:
    14 0000776E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   496                              <1> 
   497                              <1> scanPathWC:
   498                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   499                              <1> ; even in the final path componant.
   500                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   501                              <1> ;Output: CF=NC => No wildcards present
   502                              <1> ;        CF=CY => Wildcards found
   503 0000776F 50                  <1>     push rax
   504 00007770 56                  <1>     push rsi
   505                              <1> .scan:
   506 00007771 AC                  <1>     lodsb
   507 00007772 84C0                <1>     test al, al
   508 00007774 7409                <1>     jz .exit
   509 00007776 3C3F                <1>     cmp al, "?"
   510 00007778 7404                <1>     je .wcFnd
   511 0000777A 3C2A                <1>     cmp al, "*"
   512 0000777C 75F3                <1>     jne .scan
   513                              <1> .wcFnd:
   514 0000777E F9                  <1>     stc
   515                              <1> .exit:
   516 0000777F 5E                  <1>     pop rsi
   517 00007780 58                  <1>     pop rax
   518                              <1>     return
    13                              <2> %%_ret:
    14 00007781 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> checkCharValid:
   521                              <1> ;If ZF=ZE => Invalid Char
   522                              <1> ;If ZF=NZ => Valid Char
   523 00007782 50                  <1>     push rax
   524 00007783 E878FEFFFF          <1>     call uppercaseChar  ;Sets ZF if invalid filename char
   525 00007788 58                  <1>     pop rax
   526                              <1>     return
    13                              <2> %%_ret:
    14 00007789 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> 
   529                              <1> compareFarPointers: ;Int 2Fh, AX = 1214h
   530                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   531                              <1> ;Input: rsi = One pointer
   532                              <1> ;       rdi = Second pointer
   533                              <1> ;Output: ZF=ZE if equal
   534                              <1> ;        ZF=NZ if not
   535 0000778A 4839FE              <1>     cmp rsi, rdi
   536                              <1>     return
    13                              <2> %%_ret:
    14 0000778D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   537                              <1> 
   538                              <1> checkPathNet:
   539                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   540                              <1> ;Output: ZF=ZE => Path is a net path
   541                              <1> ;        ZF=NZ => Path is not a net path
   542 0000778E 50                  <1>     push rax
   543 0000778F 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   544 00007792 E85DFEFFFF          <1>     call swapPathSeparator
   545 00007797 7507                <1>     jnz .exit
   546 00007799 88E0                <1>     mov al, ah  ;Get the second char
   547 0000779B E854FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   548                              <1> .exit:
   549 000077A0 58                  <1>     pop rax
   550                              <1>     return
    13                              <2> %%_ret:
    14 000077A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> getCharDevDriverPtr:
   553                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   554                              <1> ;Input: rax = Device Driver name (space padded)
   555                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   556 000077A2 488D3D(7A000000)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   557                              <1> .lp:
   558 000077A9 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   559                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000077AD 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000077AF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   560 000077B0 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   561 000077B3 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   562 000077BA 75ED                <1>     jne .lp ;If not loop
   563 000077BC F9                  <1>     stc ;Else bad exit
   564                              <1>     return
    13                              <2> %%_ret:
    14 000077BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> getDrvChain: ;Int 2Fh, AX=122Ch
   567                              <1> ;Pointer to the first non-null device driver in the chain.
   568                              <1> ;Returns the value in rax only
   569 000077BE 488D05(7A000000)    <1>     lea rax, nulDevHdr
   570 000077C5 488B00              <1>     mov rax, qword [rax + drvHdr.nxtPtr]    ;Get the pointer at null driver
   571                              <1>     return
    13                              <2> %%_ret:
    14 000077C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   572                              <1> 
   573                              <1> getExtErrCde:   ;Int 2Fh, AX=122Dh
   574                              <1> ;Gets the extended error code in ax and returns
   575 000077C9 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   576                              <1>     return
    13                              <2> %%_ret:
    14 000077D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    53                                  %include "./src/Kernel/Core/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 21h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7                              <1> %if DEBUG && HEADERS
     8                              <1>     ;Entry function
     9                              <1>     debugEnterM
    10                              <1>     lea rbp, .l0000
    11                              <1>     call debPrintNullString
    12                              <1>     call debPrintFunctionName
    13                              <1>     jmp short .l0001
    14                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    15                              <1> .l0001:    
    16                              <1>     debugExitM
    17                              <1> %endif
    18 000077D1 FA                  <1>     cli ;Halt external interrupts
    19 000077D2 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    20 000077D3 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    21 000077D6 0F8350010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    22                              <1> ;Cherry pick quick functions
    23 000077DC 80FC33              <1>     cmp ah, 33h
    24 000077DF 0F8483020000        <1>     je cbcQuick
    25 000077E5 7226                <1>     jb .fsbegin
    26 000077E7 80FC64              <1>     cmp ah, 64h
    27 000077EA 0F8403030000        <1>     je sdlQuick  
    28 000077F0 771B                <1>     ja .fsbegin             ;If above, do usual Int21 entry
    29 000077F2 80FC51              <1>     cmp ah, 51h
    30 000077F5 0F84DA020000        <1>     je gcpspQuick           ;This and below are exactly the same
    31 000077FB 80FC62              <1>     cmp ah, 62h
    32 000077FE 0F84D1020000        <1>     je gcpspQuick           ;Calls the above function
    33 00007804 80FC50              <1>     cmp ah, 50h
    34 00007807 0F84B9020000        <1>     je scpspQuick
    35                              <1> .fsbegin:
    36 0000780D E835010000          <1>     call dosPushRegs ;Push the usual prologue registers
    37 00007812 48891D(83040000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    38 00007819 66C705(43040000)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    38 00007821 00                  <1>
    39 00007822 488B05(7B040000)    <1>     mov rax, qword [oldRSP]
    40 00007829 488905(6B040000)    <1>     mov qword [oldoldRSP], rax
    41 00007830 FE05(08040000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    42 00007836 488925(7B040000)    <1>     mov qword [oldRSP], rsp
    43                              <1> ;Network related variable resetting
    44 0000783D C605(02070000)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    45                              <1> ;Here, we want to save oldRSP in the callers PSP
    46 00007844 488B05(1F040000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    47 0000784B 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    48 0000784F 58                  <1>     pop rax     ;Get old rax back
    49 00007850 50                  <1>     push rax    ;and push it back onto the stack
    50                              <1> .charFun0CEP:
    51                              <1> .serverEP:
    52 00007851 488D25(080D0000)    <1>     lea rsp, critStakTop
    53 00007858 FB                  <1>     sti         ;Reenable interrupts
    54                              <1> 
    55 00007859 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    56 0000785B 881D(94040000)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    57 00007861 C605(95040000)01    <1>     mov byte [int28Flag], 1 ;Make it ok to trigger Int 28h
    58 00007868 881D(6A040000)      <1>     mov byte [Int24Fail], bl    ;Clear the Int24 returned fail flag
    59 0000786E 881D(8B040000)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    60                              <1> 
    61 00007874 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    62 00007875 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    63 00007877 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    64 00007879 488D05478DFFFF      <1>     lea rax, kDispTbl
    65 00007880 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    66 00007883 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    67 00007887 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    68 0000788A 58                  <1>     pop rax
    69                              <1> 
    70 0000788B 84E4                <1>     test ah, ah     ;Simple Terminate function?
    71 0000788D 741C                <1>     jz .fddiskOp
    72 0000788F 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    73 00007892 7465                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    74 00007894 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    75 00007897 7712                <1>     ja .fddiskOp
    76                              <1> ;Char operations here
    77 00007899 F605(07040000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    78 000078A0 7557                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    79 000078A2 488D25(98130000)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    80 000078A9 EB4E                <1>     jmp short .fdGoToFunction
    81                              <1> .fddiskOp:
    82                              <1>     ;Disk operations go here
    83                              <1>     ;Save rax on entry to a disk funciton
    84 000078AB 488905(33040000)    <1>     mov qword [oldRAX], rax
    85                              <1>     ;Clear up error info
    86 000078B2 C605(0A040000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    87 000078B9 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    88 000078C0 C605(09040000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    89                              <1> ;Default delchar UNLESS a function changes it. Placed here since delete/rename
    90                              <1> ; is a disk op. If a critical error occurs midway through a delete and the I24h
    91                              <1> ; handler needs to call DOS for char funcs, we dont want to reset this value as 
    92                              <1> ; the delete/rename operation might have set it to 0 (we dont do this yet).
    93 000078C7 C605(08070000)E5    <1>     mov byte [delChar], 0E5h
    94                              <1> ;Similar for volIdFlag. Find file et al are disk ops. 
    95 000078CE C605(5F040000)00    <1>     mov byte [volIdFlag], 0    ;Force bit clear (else, forces volid search)
    96                              <1>     
    97                              <1> ;Need to clear the currentSFT field on all disk stack operations in the 
    98                              <1> ; event of a hard error. In this case, checkDoInt24OnHandle is called and 
    99                              <1> ; checks the currentSFT, which might have bogus data from an old call (e.g.
   100                              <1> ; create a file, then rename, and on path search, rename hard errors. In 
   101                              <1> ; this case, the create pointer would still be present.). 
   102                              <1> ;xxxxxxxxxx NOT IN USE RIGHT NOW xxxxxxxxxx
   103                              <1>     ;mov qword [currentSFT], 0  
   104                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   105                              <1> 
   106 000078D5 50                  <1>     push rax
   107 000078D6 B482                <1>     mov ah, 82h ;Cancel all critical section!
   108 000078D8 CD2A                <1>     int 2ah ;DOS critical section semphore handler (default, iretq)
   109 000078DA 58                  <1>     pop rax
   110                              <1> 
   111 000078DB C605(95040000)00    <1>     mov byte [int28Flag], 0     ;Turn off the ability to trigger Int 28h
   112 000078E2 488D25(D8190000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   113 000078E9 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   114 000078F0 7407                <1>     jz .fdGoToFunction
   115                              <1> ; HANDLE CTRL+BREAK HERE!
   116 000078F2 50                  <1>     push rax
   117 000078F3 E86AB2FFFF          <1>     call checkBreak   ; Check for a ^C
   118 000078F8 58                  <1>     pop rax
   119                              <1> .fdGoToFunction:
   120 000078F9 48871D(83040000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   121                              <1> %if DEBUG && REGS
   122                              <1>     ;Print stack if necessary function
   123                              <1>     debugEnterM
   124                              <1>     call debPrintDOSStack
   125                              <1>     debugExitM
   126                              <1> %endif
   127 00007900 FF15(83040000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   128                              <1> %if DEBUG && HEADERS
   129                              <1>     ;Entry function
   130                              <1>     debugEnterM
   131                              <1>     lea rbp, .l0002
   132                              <1>     call debPrintNullString
   133                              <1>     jmp short .l0003
   134                              <1> .l0002 db "Exiting Int 21h",0Ah,0Dh,0
   135                              <1> .l0003:    
   136                              <1>     debugExitM
   137                              <1> %endif
   138                              <1> %if DEBUG && REGS
   139                              <1>     ;Exit function
   140                              <1>     debugEnterM
   141                              <1>     call debPrintDOSStack
   142                              <1>     debugExitM
   143                              <1> %endif
   144                              <1> .fdExit:
   145 00007906 FA                  <1>     cli     ;Redisable interrupts
   146 00007907 FE0D(08040000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   147 0000790D 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   148 00007914 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   149 00007917 488B05(6B040000)    <1>     mov rax, qword [oldoldRSP]
   150 0000791E 488905(7B040000)    <1>     mov qword [oldRSP], rax
   151 00007925 E806000000          <1>     call dosPopRegs  ;Pop the frame
   152 0000792A 48CF                <1>     iretq
   153                              <1> .fdExitBad:
   154 0000792C 30C0                <1>     xor al, al
   155                              <1> defaultIretq:
   156 0000792E 48CF                <1>     iretq
   157                              <1> dosPopRegs:
   158 00007930 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   159 00007936 58                  <1>     pop rax
   160 00007937 5B                  <1>     pop rbx
   161 00007938 59                  <1>     pop rcx
   162 00007939 5A                  <1>     pop rdx
   163 0000793A 5E                  <1>     pop rsi
   164 0000793B 5F                  <1>     pop rdi
   165 0000793C 5D                  <1>     pop rbp
   166 0000793D 4158                <1>     pop r8
   167 0000793F 4159                <1>     pop r9
   168 00007941 FF25(73040000)      <1>     jmp qword [dosReturn]
   169                              <1> dosPushRegs:
   170 00007947 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   171 0000794D 4151                <1>     push r9
   172 0000794F 4150                <1>     push r8
   173 00007951 55                  <1>     push rbp
   174 00007952 57                  <1>     push rdi
   175 00007953 56                  <1>     push rsi
   176 00007954 52                  <1>     push rdx
   177 00007955 51                  <1>     push rcx
   178 00007956 53                  <1>     push rbx
   179 00007957 50                  <1>     push rax
   180 00007958 FF25(73040000)      <1>     jmp qword [dosReturn]
   181                              <1> dosCrit1Enter:
   182                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 0000795E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   183 0000795F B801800000          <1>     mov eax, 8001h
   184 00007964 CD2A                <1>     int 2ah
   185 00007966 58                  <1>     pop rax
   186                              <1>     return
    13                              <2> %%_ret:
    14 00007967 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187                              <1> dosCrit1Exit:
   188                              <1>     return
    13                              <2> %%_ret:
    14 00007968 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   189 00007969 B801810000          <1>     mov eax, 8101h
   190 0000796E CD2A                <1>     int 2ah
   191 00007970 58                  <1>     pop rax
   192                              <1>     return
    13                              <2> %%_ret:
    14 00007971 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193                              <1> dosCrit2Enter:
   194                              <1>     return
    13                              <2> %%_ret:
    14 00007972 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   195 00007973 B802800000          <1>     mov eax, 8002h
   196 00007978 CD2A                <1>     int 2ah
   197 0000797A 58                  <1>     pop rax
   198                              <1>     return
    13                              <2> %%_ret:
    14 0000797B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   199                              <1> dosCrit2Exit:
   200                              <1>     return
    13                              <2> %%_ret:
    14 0000797C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201 0000797D B802810000          <1>     mov eax, 8102h
   202 00007982 CD2A                <1>     int 2ah
   203 00007984 58                  <1>     pop rax
   204                              <1>     return
    13                              <2> %%_ret:
    14 00007985 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   205                              <1> 
   206                              <1> ;FCB specific returns
   207                              <1> fcbGoodExit:
   208                              <1> ;Preserve the carry flag on entry to DOS
   209 00007986 30C0                <1>     xor al, al ;Set return code al = 0
   210                              <1>     return
    13                              <2> %%_ret:
    14 00007988 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   211                              <1> fcbErrExit:
   212                              <1> ;Preserve the carry flag on entry to DOS
   213                              <1> ;Input: eax = Extended error code to store in SDA 
   214 00007989 E836000000          <1>     call xLatError
   215 0000798E B0FF                <1>     mov al, -1  ;Set return code al = -1
   216 00007990 F9                  <1>     stc
   217                              <1>     return
    13                              <2> %%_ret:
    14 00007991 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> 
   219                              <1> ;Handle and General DOS Returns
   220                              <1> ;All good exits destroy AT LEAST ax 
   221                              <1> extGoodExit2:
   222                              <1> ;Good exit with an extended return code in eax
   223 00007992 E83CFBFFFF          <1>     call getUserRegs
   224 00007997 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   225 00007999 EB08                <1>     jmp short extGoodExit.extGoodCommon
   226                              <1> extGoodExit:
   227                              <1> ;Good exit
   228                              <1> ;Return code in ax
   229 0000799B E833FBFFFF          <1>     call getUserRegs
   230 000079A0 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   231                              <1> .extGoodCommon:
   232 000079A3 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   233 000079A7 F8                  <1>     clc
   234                              <1>     return
    13                              <2> %%_ret:
    14 000079A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   235                              <1> extErrExit:
   236                              <1> ;The extended error exit from DOS
   237                              <1> ;Jumped to with AL=Extended error code
   238                              <1> ;Can be called too.
   239                              <1> ;Input: al = Extended error code
   240                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   241                              <1> ;   Returns with: eax = xLat Error
   242                              <1> ;                 rsi = callerFrame
   243 000079A9 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   244 000079AC E813000000          <1>     call xLatError
   245 000079B1 E891000000          <1>     call checkFail
   246                              <1> .noXlat:
   247 000079B6 E818FBFFFF          <1>     call getUserRegs
   248 000079BB 668906              <1>     mov word [rsi + callerFrame.rax], ax
   249 000079BE 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   250 000079C2 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   251                              <1>     return
    13                              <2> %%_ret:
    14 000079C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   252                              <1> xLatError:
   253                              <1> ;Translates the error code given in ax and sets error code in the var
   254                              <1> ; Input: ax = Extended Error Code
   255                              <1> ; Output: ax = Potentially translated Error Code
   256                              <1> ;         [errorExCde] = Original Error Code
   257                              <1> ;Preserves all registers except ax
   258                              <1> ;AH is always returned as 0
   259 000079C4 53                  <1>     push rbx
   260 000079C5 51                  <1>     push rcx
   261 000079C6 56                  <1>     push rsi
   262 000079C7 668905(0B040000)    <1>     mov word [errorExCde], ax
   263 000079CE 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   264 000079D0 488D35A286FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   265                              <1> .readEntry:
   266 000079D7 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   267 000079D9 3CFF                <1>     cmp al, -1
   268 000079DB 741F                <1>     je .skipXlat
   269 000079DD 3A05(34040000)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   270 000079E3 7408                <1>     je .found
   271                              <1>     ;Here, entry not found, goto next entry
   272 000079E5 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   273 000079E8 4801C6              <1>     add rsi, rax    ;Goto next entry
   274 000079EB EBEA                <1>     jmp short .readEntry
   275                              <1> .found:
   276                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   277 000079ED 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   278                              <1> .mainSearch:
   279 000079F0 AC                  <1>     lodsb   ;Get one byte into al
   280 000079F1 38C3                <1>     cmp bl, al  ;Check against the error code
   281 000079F3 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   282 000079F5 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   283 000079F7 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   284                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   285 000079F9 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   286                              <1> .skipXlat:
   287 000079FC 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   288 000079FE 5E                  <1>     pop rsi
   289 000079FF 59                  <1>     pop rcx
   290 00007A00 5B                  <1>     pop rbx
   291                              <1>     return
    13                              <2> %%_ret:
    14 00007A01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   292                              <1> setErrorVars:   ;Int 2Fh, AX=1222h
   293                              <1> ;Looks up the error code in the variable and sets the other error vars
   294                              <1> ;Called with the lookup table in rsi
   295                              <1> ;All regs preserved
   296 00007A02 50                  <1>     push rax
   297 00007A03 53                  <1>     push rbx
   298 00007A04 51                  <1>     push rcx
   299 00007A05 56                  <1>     push rsi
   300 00007A06 0FB71D(0B040000)    <1>     movzx ebx, word [errorExCde]
   301 00007A0D B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   302                              <1> .readEntry:
   303 00007A12 AD                  <1>     lodsd   ;Read the dword table entry into eax
   304 00007A13 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   305 00007A18 7428                <1>     je .exit    
   306 00007A1A 38D8                <1>     cmp al, bl  ;Compare the error codes
   307 00007A1C 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   308 00007A1E D3E8                <1>     shr eax, cl
   309 00007A20 3CFF                <1>     cmp al, -1
   310 00007A22 7406                <1>     je .skipClass
   311 00007A24 8805(0E040000)      <1>     mov byte [errorClass], al
   312                              <1> .skipClass:
   313 00007A2A D3E8                <1>     shr eax, cl
   314 00007A2C 3CFF                <1>     cmp al, -1
   315 00007A2E 7406                <1>     je .skipAct
   316 00007A30 8805(0D040000)      <1>     mov byte [errorAction], al
   317                              <1> .skipAct:
   318 00007A36 D3E8                <1>     shr eax, cl
   319 00007A38 3CFF                <1>     cmp al, -1
   320 00007A3A 7406                <1>     je .exit
   321 00007A3C 8805(0A040000)      <1>     mov byte [errorLocus], al
   322                              <1> .exit:
   323 00007A42 5E                  <1>     pop rsi
   324 00007A43 59                  <1>     pop rcx
   325 00007A44 5B                  <1>     pop rbx
   326 00007A45 58                  <1>     pop rax
   327                              <1>     return
    13                              <2> %%_ret:
    14 00007A46 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   328                              <1> checkFail:
   329                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 24h
   330                              <1> ; and swaps the var error code if so
   331 00007A47 F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;If zero, skip!
   332 00007A4E 7409                <1>     jz .skipFail
   333 00007A50 66C705(0B040000)53- <1>     mov word [errorExCde], errFI24  ;Set error to "Fail on Int 24h"
   333 00007A58 00                  <1>
   334                              <1> .skipFail:
   335 00007A59 56                  <1>     push rsi
   336 00007A5A 488D35BA86FFFF      <1>     lea rsi, extErrTbl
   337 00007A61 E89CFFFFFF          <1>     call setErrorVars
   338 00007A66 5E                  <1>     pop rsi
   339                              <1>     return
    13                              <2> %%_ret:
    14 00007A67 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   340                              <1> ;========================================:
   341                              <1> ;      Reentrant Kernel Functions        :
   342                              <1> ;========================================:
   343                              <1> ;ah = 33h, Control Break related functions + some undocumented stuff
   344                              <1> cbcQuick:
   345                              <1> ;The entry point for this function if entered through a normal DOS call
   346 00007A68 E815000000          <1>     call ctrlBreakCheck
   347 00007A6D 48CF                <1>     iretq
   348                              <1> cbcServer:
   349                              <1> ;The entry point for this function if entered through a Server Call (5D00h)
   350 00007A6F E80E000000          <1>     call ctrlBreakCheck
   351 00007A74 E85AFAFFFF          <1>     call getUserRegs
   352                              <1> ;Calls which dont modify the regs, preserve them themselves so this so 
   353                              <1> ; replacing them back on the stack is a small price to pay
   354 00007A79 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   355 00007A7D 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   356                              <1> ;DO NOT WRITE AN ERROR CODE AS THIS WOULD OVERWRITE AN ERROR CODE 
   357                              <1> ; THAT MAY BE DEPENDED ON. RETURN WITH THE VALUE IN AL AS RETCODE.
   358                              <1>     return 
    13                              <2> %%_ret:
    14 00007A81 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   359                              <1> ctrlBreakCheck:
   360                              <1> ;Can handle subfunctions:
   361                              <1> ; al = 0: Get state for the break flag in dl
   362                              <1> ; al = 1: Set the state of the break flag to dl
   363                              <1> ; al = 2: Exchange the value of the break flag with dl
   364                              <1> ; al = 3: Error, returns al = -1
   365                              <1> ; al = 4: Error, returns al = -1
   366                              <1> ;Undocumented subfunctions:
   367                              <1> ; al = 5: Get the boot drive in dl
   368                              <1> ; al = 6: Get the true DOS version number in bx with subversion flags in dl
   369 00007A82 3C06                <1>     cmp al, 6
   370 00007A84 7437                <1>     je .trueVer
   371 00007A86 3C05                <1>     cmp al, 5
   372 00007A88 742A                <1>     je .getBtDrv    ;Peel off btdrv req.
   373 00007A8A 84C0                <1>     test al, al
   374 00007A8C 7507                <1>     jnz .cbcget     ;Get the state or other functions
   375 00007A8E 8A15(32040000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   376                              <1>     return
    13                              <2> %%_ret:
    14 00007A94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   377                              <1> .cbcget:
   378 00007A95 3C02                <1>     cmp al, 02h
   379 00007A97 7718                <1>     ja .cbcBad
   380 00007A99 740C                <1>     jz .cbcxchg ;Function 2
   381 00007A9B 52                  <1>     push rdx
   382 00007A9C 80E201              <1>     and dl, 1   ;Get only the bottom bit
   383 00007A9F 8815(32040000)      <1>     mov byte [breakFlag], dl    ;Set the state
   384 00007AA5 5A                  <1>     pop rdx
   385                              <1>     return
    13                              <2> %%_ret:
    14 00007AA6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   386                              <1> .cbcxchg:
   387 00007AA7 80E201              <1>     and dl, 1
   388 00007AAA 8615(32040000)      <1>     xchg byte [breakFlag], dl
   389                              <1>     return
    13                              <2> %%_ret:
    14 00007AB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   390                              <1> .cbcBad:
   391 00007AB1 B0FF                <1>     mov al, -1
   392                              <1>     return
    13                              <2> %%_ret:
    14 00007AB3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   393                              <1> .getBtDrv:
   394                              <1> ;Undocumented.
   395                              <1> ;Might be unreliable so dont document yet.
   396                              <1> ;Return 1 based boot drive in dl
   397 00007AB4 8A15(10000000)      <1>     mov dl, byte [bootDrive]    ;Get the 0 based bootDrive number
   398 00007ABA FEC2                <1>     inc dl  ;Return a 1 based drive number
   399                              <1>     return
    13                              <2> %%_ret:
    14 00007ABC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   400                              <1> .trueVer:
   401                              <1> ;Undocumented.
   402                              <1> ;bx returns true DOS number.
   403                              <1> ;dl has "revision" number in bits 0-2. 
   404                              <1> ;dh has various flags. All reserved for future use.
   405 00007ABD 66BB0063            <1>     mov bx, dosVerMac
   406 00007AC1 66BA0201            <1>     mov dx, (dosVerFlags << 8) | dosRev
   407                              <1>     return
    13                              <2> %%_ret:
    14 00007AC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   408                              <1> 
   409                              <1> ;ah = 50h, set current PSP
   410                              <1> scpspQuick:
   411 00007AC6 E802000000          <1>     call setCurrPSP
   412 00007ACB 48CF                <1>     iretq
   413                              <1> scpspServer:
   414                              <1> setCurrPSP:
   415 00007ACD 48891D(1F040000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   416                              <1>     return
    13                              <2> %%_ret:
    14 00007AD4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   417                              <1> 
   418                              <1> ;ah = 51h/62h, gives PSP addr/Process ID
   419                              <1> gcpspQuick:
   420 00007AD5 E811000000          <1>     call getCurrPSP
   421 00007ADA 48CF                <1>     iretq
   422                              <1> gcpspServer:
   423 00007ADC E80A000000          <1>     call getCurrPSP
   424 00007AE1 E8EDF9FFFF          <1>     call getUserRegs
   425 00007AE6 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   426                              <1>     return
    13                              <2> %%_ret:
    14 00007AEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> getCurrPSP:     
   428 00007AEB 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   429                              <1>     return
    13                              <2> %%_ret:
    14 00007AF2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   430                              <1> 
   431                              <1> ;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   432                              <1> sdlQuick:
   433 00007AF3 E802000000          <1>     call setDriverLookahead
   434 00007AF8 48CF                <1>     iretq
   435                              <1> sdlServer:
   436                              <1> setDriverLookahead:
   437 00007AFA 8805(E0190000)      <1>     mov byte [lookahead], al    
   438 00007B00 48CF                <1>     iretq
   439                              <1> 
   440                              <1> ;========================================:
   441                              <1> ;            Kernel Functions            :
   442                              <1> ;========================================:
   443                              <1> diskReset:         ;ah = 0Dh
   444                              <1> ;Flush all dirty buffers to disk
   445 00007B02 E857FEFFFF          <1>     call dosCrit1Enter
   446 00007B07 B0FF                <1>     mov al, -1  ;Mark all drives as flushable
   447 00007B09 E8978CFFFF          <1>     call flushAllBuffersForDrive  
   448                              <1>     ;Now we free all buffers and set their referenced bit
   449 00007B0E 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   450                              <1> .drBufferLp:
   451 00007B15 4881FFFFFFFFFF      <1>     cmp rdi, -1
   452 00007B1C 740B                <1>     je .drExit
   453 00007B1E 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   454 00007B24 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   455 00007B27 EBEC                <1>     jmp short .drBufferLp
   456                              <1> .drExit:
   457 00007B29 E83AFEFFFF          <1>     call dosCrit1Exit
   458 00007B2E B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   459 00007B33 CD2F                <1>     int 2fh
   460                              <1>     return
    13                              <2> %%_ret:
    14 00007B35 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> selectDisk:        ;ah = 0Eh
   463                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   464 00007B36 88D0                <1>     mov al, dl
   465 00007B38 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   466 00007B3A E8B8F9FFFF          <1>     call getCDSNotJoin  ;Must make sure provided drive is valid
   467 00007B3F 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   468 00007B41 8805(31040000)      <1>     mov byte [currentDrv], al   ;Set drive as current
   469                              <1> .skipSettingCurrent:
   470 00007B47 0FB605(78000000)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   471                              <1>     return
    13                              <2> %%_ret:
    14 00007B4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   472                              <1> 
   473                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   474 00007B4F 8A05(31040000)      <1>     mov al, byte [currentDrv]
   475                              <1>     return
    13                              <2> %%_ret:
    14 00007B55 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   476                              <1> 
   477                              <1> FATinfoDefault:    ;ah = 1Bh
   478 00007B56 30D2                <1>     xor dl, dl
   479                              <1> FATinfoDevice:     ;ah = 1Ch
   480                              <1> ;Input: dl = 1 based drive number
   481                              <1> ;Output:
   482                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   483                              <1> ;cx = bytes per sector
   484                              <1> ;edx = total number of clusters
   485                              <1> ;rbx = Ptr to media ID byte
   486 00007B58 88D0                <1>     mov al, dl  ;Move drive number into al
   487 00007B5A E808FAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   488 00007B5F 7307                <1>     jnc .fidCDSFound
   489 00007B61 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   490 00007B66 EB2E                <1>     jmp short .error 
   491                              <1> .fidCDSFound:
   492 00007B68 E8EDF8FFFF          <1>     call getDiskData
   493 00007B6D 7227                <1>     jc .error
   494                              <1> ;Now we have that:
   495                              <1> ;al = sectors per cluster
   496                              <1> ;ah = media ID byte
   497                              <1> ;ebx = total clusters
   498                              <1> ;cx = bytes per sector
   499                              <1> ;edx = number of available clusters
   500 00007B6F E85FF9FFFF          <1>     call getUserRegs
   501 00007B74 8825(91070000)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   502 00007B7A 30E4                <1>     xor ah, ah
   503 00007B7C 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   504 00007B7F 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   505 00007B83 488D1D(91070000)    <1>     lea rbx, mediaByte
   506 00007B8A 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   507 00007B8E 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   508                              <1> .badExit:
   509 00007B92 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   510                              <1>     return
    13                              <2> %%_ret:
    14 00007B95 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   511                              <1> .error:
   512 00007B96 E80EFEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   513 00007B9B 66B8FFFF            <1>     mov ax, -1
   514 00007B9F EBF1                <1>     jmp short .badExit
   515                              <1> 
   516                              <1> setIntVector:      ;ah = 25h
   517                              <1> ;Called with:
   518                              <1> ;   rdx = Pointer to interrupt handler
   519                              <1> ;   al = Interrupt number
   520 00007BA1 FA                  <1>     cli ;Halt interrupts
   521 00007BA2 0F010D(171A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
   522 00007BA9 0FB6C0              <1>     movzx eax, al
   523 00007BAC 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   524 00007BB0 480305(191A0000)    <1>     add rax, qword [dosIdtPtr.base]    
   525 00007BB7 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
   526 00007BBA 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
   527 00007BBE 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
   528 00007BC2 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
   529 00007BC6 895008              <1>     mov dword [rax + 8], edx
   530 00007BC9 FB                  <1>     sti
   531                              <1>     return
    13                              <2> %%_ret:
    14 00007BCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   532                              <1> 
   533                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   534 00007BCB 8805(D0030000)      <1>     mov byte [verifyFlag], al
   535 00007BD1 8025(D0030000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   536                              <1>     return
    13                              <2> %%_ret:
    14 00007BD8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   537                              <1> getDOSversion:     ;ah = 30h
   538 00007BD9 E8F5F8FFFF          <1>     call getUserRegs
   539 00007BDE 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   540 00007BE0 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   541 00007BE3 668B051684FFFF      <1>     mov ax, word [dosVersion] ;Major and minor version in al,ah resp.
   542 00007BEA 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   543                              <1>     return
    13                              <2> %%_ret:
    14 00007BED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   544                              <1> 
   545                              <1> setDOSversion:  ;Int 2Fh, AX=122Fh - Set DOS verstion to report
   546                              <1> ;Input: dx = Version number. Value of 0 means true value.
   547 00007BEE 6685D2              <1>     test dx, dx
   548 00007BF1 750A                <1>     jnz .newVal
   549 00007BF3 66C7050484FFFF0063  <1>     mov word [dosVersion], dosVerMac    ;Reset the value
   550                              <1>     return
    13                              <2> %%_ret:
    14 00007BFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> .newVal:
   552 00007BFD 668915FC83FFFF      <1>     mov word [dosVersion], dx    ;Store dx in the value to report.
   553                              <1>     return
    13                              <2> %%_ret:
    14 00007C04 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   554                              <1> 
   555                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   556                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 21h\ah=32h with dl=0
   557 00007C05 30D2                <1>     xor dl, dl
   558                              <1> getDeviceDPBptr:   ;ah = 32h
   559                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   560                              <1> ;On exit: rbx = DPB pointer
   561 00007C07 88D0                <1>     mov al, dl
   562 00007C09 E859F9FFFF          <1>     call getCDS
   563 00007C0E 722C                <1>     jc .bad
   564 00007C10 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   565 00007C17 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   566 00007C1D 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   567                              <1>     ;Here ONLY if accessing critical Disk data structures
   568 00007C1F E83AFDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   569 00007C24 E871F5FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   570 00007C29 E83AFDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   571 00007C2E 720C                <1>     jc .bad
   572 00007C30 E89EF8FFFF          <1>     call getUserRegs
   573 00007C35 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   574 00007C39 30C0                <1>     xor al, al
   575                              <1>     return
    13                              <2> %%_ret:
    14 00007C3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   576                              <1> .bad:
   577 00007C3C B0FF                <1>     mov al, -1
   578                              <1>     return
    13                              <2> %%_ret:
    14 00007C3E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   579                              <1> 
   580                              <1> getInDOSflagPtr:   ;ah = 34h
   581 00007C3F 488D15(08040000)    <1>     lea rdx, inDOS
   582 00007C46 E888F8FFFF          <1>     call getUserRegs
   583 00007C4B 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   584                              <1>     return
    13                              <2> %%_ret:
    14 00007C4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> getIntVector:      ;ah = 35h
   587                              <1> ;Called with:
   588                              <1> ;   al = Interrupt Number
   589                              <1> ;Returns:
   590                              <1> ;   rbx = Pointer to interrupt handler
   591 00007C50 E850F8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   592 00007C55 E879F8FFFF          <1>     call getUserRegs
   593 00007C5A 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   594                              <1>     return
    13                              <2> %%_ret:
    14 00007C5E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   595                              <1> 
   596                              <1> getDiskFreeSpace:  ;ah = 36h
   597                              <1> ;Input: Drive number in dl (0 = Current)
   598                              <1> ;Output:    ax = sectors per cluster
   599                              <1> ;           ebx = number of free clusters
   600                              <1> ;           cx = bytes per sector
   601                              <1> ;           edx = total clusters on drive
   602 00007C5F 88D0                <1>     mov al, dl
   603 00007C61 E801F9FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   604 00007C66 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   605                              <1> ;Else, we at an error.
   606                              <1> ;Simply return with CY set and error code in al with extended error info
   607 00007C68 B80F000000          <1>     mov eax, errBadDrv
   608 00007C6D E837FDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   609                              <1>     ;extErrExit sets rsi to caller regs
   610 00007C72 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   611                              <1>     return
    13                              <2> %%_ret:
    14 00007C77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   612                              <1> .gdfsCDSFound:
   613 00007C78 E8DDF7FFFF          <1>     call getDiskData
   614 00007C7D 7219                <1>     jc .error
   615                              <1> ;Now we have that:
   616                              <1> ;al = sectors per cluster
   617                              <1> ;ah = media ID byte
   618                              <1> ;ebx = total clusters
   619                              <1> ;cx = bytes per sector
   620                              <1> ;edx = number of available clusters
   621 00007C7F E84FF8FFFF          <1>     call getUserRegs
   622 00007C84 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   623 00007C86 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   624 00007C89 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   625 00007C8D 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   626 00007C90 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   627                              <1> .badExit:
   628 00007C94 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   629                              <1>     return
    13                              <2> %%_ret:
    14 00007C97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   630                              <1> .error:
   631 00007C98 E80CFDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   632 00007C9D 66B8FFFF            <1>     mov ax, -1
   633 00007CA1 EBF1                <1>     jmp short .badExit
   634                              <1> 
   635                              <1> 
   636                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   637 00007CA3 31C0                <1>     xor eax, eax
   638 00007CA5 668705(2F040000)    <1>     xchg ax, word [errorLevel]
   639 00007CAC E9EAFCFFFF          <1>     jmp extGoodExit
   640                              <1> 
   641                              <1> getSysVarsPtr:     ;ah = 52h
   642 00007CB1 488D15(3B000000)    <1>     lea rdx, sysVarsPtr
   643 00007CB8 E816F8FFFF          <1>     call getUserRegs
   644 00007CBD 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   645                              <1>     return
    13                              <2> %%_ret:
    14 00007CC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   646                              <1> 
   647                              <1> 
   648                              <1> ;AH = 53h - CREATE DPB
   649                              <1> createDPB:         ;generates a DPB from a given BPB
   650                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   651                              <1> ;This is done so that the other fields of the DPB can be recycled
   652                              <1> ;Input: rsi = ptr to the BPB
   653                              <1> ;       rbp = ptr to the DPB
   654                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   655                              <1> ;bMediaDescriptor
   656 00007CC2 8A460A              <1>     mov al, byte [rsi + bpb.media]
   657 00007CC5 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   658                              <1> ;dNextFreeClst
   659 00007CC8 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1  ;Start is default (clust 2)
   660                              <1> ;dFreeClustCnt
   661 00007CCF C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Start with unknown
   662                              <1> ;wBytesPerSector
   663 00007CD6 0FB706              <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   664 00007CD9 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   665                              <1> ;bMaxSectorInCluster
   666 00007CDD 8A4602              <1>     mov al, byte [rsi + bpb.secPerClus]
   667 00007CE0 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   668 00007CE2 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   669                              <1> ;bSecPerClustShift
   670 00007CE5 FEC0                <1>     inc al
   671 00007CE7 31C9                <1>     xor ecx, ecx
   672                              <1> .cd2:
   673 00007CE9 D0E8                <1>     shr al, 1
   674 00007CEB 7404                <1>     jz .cd3
   675 00007CED FFC1                <1>     inc ecx
   676 00007CEF EBF8                <1>     jmp short .cd2
   677                              <1> .cd3:
   678 00007CF1 884D05              <1>     mov byte [rbp + dpb.bSecPerClustShift], cl
   679                              <1> ;wFAToffset, number of reserved sectors in partition
   680 00007CF4 668B4603            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   681 00007CF8 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   682                              <1> ;bNumberOfFATs
   683 00007CFC 8A4605              <1>     mov al, byte [rsi + bpb.numFATs]
   684 00007CFF 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   685                              <1> ;wNumberRootDirEntries
   686                              <1> ;Gets the number of 32 byte entries in the root directory
   687                              <1> ;Only valid for FAT 12/16
   688 00007D02 0FB74606            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   689 00007D06 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   690                              <1> ;dFATlength, get the FAT length
   691 00007D0A 0FB7460B            <1>     movzx eax, word [rsi + bpb.FATsz16]
   692 00007D0E 8B5E19              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   693 00007D11 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   694 00007D13 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   695 00007D16 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   696                              <1> ;Complex cases below...
   697                              <1> ;dClusterHeapOffset, start sector of the data area
   698 00007D19 0FB7460B            <1>     movzx eax, word [rsi + bpb.FATsz16]
   699 00007D1D 8B5E19              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   700 00007D20 85C0                <1>     test eax, eax
   701 00007D22 0F44C3              <1>     cmovz eax, ebx
   702                              <1> ;eax = FATsz
   703 00007D25 0FB75E08            <1>     movzx ebx, word [rsi + bpb.totSec16]
   704 00007D29 8B4E15              <1>     mov ecx, dword [rsi + bpb.totSec32]
   705 00007D2C 85DB                <1>     test ebx, ebx
   706 00007D2E 0F44D9              <1>     cmovz ebx, ecx 
   707                              <1> ;ebx = TotSec
   708 00007D31 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   709 00007D33 0FB64E05            <1>     movzx ecx, byte [rsi + bpb.numFATs]
   710 00007D37 67E306              <1>     jecxz .cd41
   711                              <1> .cd4:
   712 00007D3A 01C2                <1>     add edx, eax
   713 00007D3C FFC9                <1>     dec ecx
   714 00007D3E 75FA                <1>     jnz .cd4
   715                              <1> .cd41:
   716 00007D40 89D0                <1>     mov eax, edx    ;Store product in eax
   717 00007D42 0FB75603            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   718 00007D46 01D0                <1>     add eax, edx
   719                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   720 00007D48 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   721 00007D4C C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   722 00007D4F 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   723 00007D53 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   724 00007D54 89D0                <1>     mov eax, edx
   725 00007D56 31D2                <1>     xor edx, edx
   726 00007D58 F7F1                <1>     div ecx
   727 00007D5A 89C2                <1>     mov edx, eax
   728 00007D5C 58                  <1>     pop rax
   729 00007D5D 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   730                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   731                              <1>     ;aka eax = Start sector of the data area in volume
   732 00007D5F 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   733                              <1> ;dClusterCount
   734 00007D62 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   735 00007D64 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   736 00007D66 31D2                <1>     xor edx, edx
   737 00007D68 BB01000000          <1>     mov ebx, 1
   738 00007D6D 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSecPerClustShift]
   739 00007D71 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   740 00007D73 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   741 00007D75 FFC0                <1>     inc eax ;Maximum valid cluster address is cluster count + 1
   742 00007D77 89450F              <1>     mov dword [rbp + dpb.dMaxClusterAddr], eax    ;eax = Max cluster address
   743                              <1> ;dFirstUnitOfRootDir
   744 00007D7A 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   745 00007D7F 8B4621              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   746 00007D82 7712                <1>     ja .cd5
   747                              <1>     ;Else, we need to find the first sector of the root directory
   748                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   749 00007D84 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   750 00007D88 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   751 00007D8C 67E307              <1>     jecxz .cd5
   752                              <1> .cd51:
   753 00007D8F 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   754 00007D92 FFC9                <1>     dec ecx
   755 00007D94 75F9                <1>     jnz .cd51
   756                              <1> .cd5:
   757 00007D96 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   758 00007D99 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   759 00007D9D E88F91FFFF          <1>     call readFSInfoSector   ;If FAT32, updates free cluster data with FSinfo
   760                              <1> ;Exit epilogue
   761                              <1> .exit:
   762 00007DA2 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   763 00007DA9 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   764                              <1>     %if DEBUG && DPBINFO
   765                              <1>     ;Print DPB 
   766                              <1>     debugEnterM
   767                              <1>     push rbp
   768                              <1>     lea rbp, .l0000
   769                              <1>     call debPrintNullString
   770                              <1>     pop rbp
   771                              <1>     call debDPBBPBptr
   772                              <1>     ;call debMakeDebuggerRespond
   773                              <1>     jmp short .l0001
   774                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   775                              <1> .l0001:
   776                              <1>     debugExitM
   777                              <1>     %endif
   778                              <1>     return
    13                              <2> %%_ret:
    14 00007DAB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   779                              <1> 
   780                              <1> getVerifySetting:  ;ah = 54h
   781 00007DAC 8A05(D0030000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   782                              <1>     return
    13                              <2> %%_ret:
    14 00007DB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   783                              <1> 
   784                              <1> getExtendedError:  ;ah = 59h
   785 00007DB3 E81BF7FFFF          <1>     call getUserRegs
   786 00007DB8 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   787 00007DBF 8A2D(0A040000)      <1>     mov ch, byte [errorLocus]
   788 00007DC5 8A3D(0E040000)      <1>     mov bh, byte [errorClass]
   789 00007DCB 8A1D(0D040000)      <1>     mov bl, byte [errorAction]
   790 00007DD1 488B3D(0F040000)    <1>     mov rdi, qword [errorVolLbl]
   791 00007DD8 668906              <1>     mov word [rsi + callerFrame.rax], ax
   792 00007DDB 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   793 00007DDF 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   794 00007DE2 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi
   795                              <1> noOp:
   796                              <1>     return
    13                              <2> %%_ret:
    14 00007DE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   797                              <1> 
   798                              <1> systemServices: ;ah = 61h
   799                              <1> ;al = 0 -> Get Environment pointer in rdx
   800                              <1> ;   Output: rdx -> Environment Pointer. May be a null pointer. Caller checks!
   801                              <1> ;al = 1 -> Get Command Line Arguments Pointer in rdx
   802                              <1> ;   Output: rdx -> Pointer to whatever was passed as a CR terminated 
   803                              <1> ;                   command line.
   804                              <1> ;al = 2 -> Get ptr to ASCIIZ name for program in rdx. Might not be FQ.
   805                              <1> ;   Output: CF=NC: rdx -> Filename 
   806                              <1> ;           CF=CY: eax = Error code (errAccDen) if no filename ptr.
   807                              <1> ;                   The error case should only happen for special
   808                              <1> ;                   programs that are launched without an environment
   809                              <1> ;                   as DOS has nowhere to put the filename string.
   810                              <1> ;al > 2: Returns CF=CY and eax = Error code (errInvFnc).
   811 00007DE7 3C01                <1>     cmp al, 1
   812 00007DE9 7415                <1>     je .getCmdLineArgs
   813 00007DEB 3C02                <1>     cmp al, 2
   814 00007DED 761E                <1>     jbe .getEnvPtr
   815 00007DEF C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk  
   816 00007DF6 B801000000          <1>     mov eax, errInvFnc  ;Error, with invalid function number error
   817                              <1> .exitBad:
   818 00007DFB E9A9FBFFFF          <1>     jmp extErrExit
   819                              <1> .getCmdLineArgs:
   820 00007E00 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   821 00007E07 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   822 00007E0B EB53                <1>     jmp short .gepExitOk
   823                              <1> .getEnvPtr:
   824                              <1> ;Gets the environment pointer in rdx
   825 00007E0D 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   826 00007E14 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environment pointer
   827 00007E18 84C0                <1>     test al, al     ;Was al=0?
   828 00007E1A 7444                <1>     jz .gepExitOk   ;Exit if al = 0 since we have the pointer we need!
   829 00007E1C 4885D2              <1>     test rdx, rdx   ;Check if the env pointer is ok to use
   830 00007E1F 7420                <1>     jz .gepFail
   831 00007E21 4881FAFFFFFFFF      <1>     cmp rdx, -1
   832 00007E28 7417                <1>     je .gepFail
   833                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   834                              <1> ; pass the ptr to the word after.
   835 00007E2A 51                  <1>     push rcx
   836 00007E2B 31C9                <1>     xor ecx, ecx
   837 00007E2D B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   838                              <1> .gep0:
   839 00007E32 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   840 00007E37 7411                <1>     je short .gep1
   841 00007E39 48FFC2              <1>     inc rdx         ;Go to the next byte
   842 00007E3C FFC9                <1>     dec ecx
   843 00007E3E 75F2                <1>     jnz short .gep0
   844                              <1> .gep00:
   845                              <1> ;Failure here if we haven't hit the double null by the end of 32Kb
   846 00007E40 59                  <1>     pop rcx
   847                              <1> .gepFail:
   848 00007E41 31D2                <1>     xor edx, edx        ;Turn it into null pointer
   849 00007E43 B805000000          <1>     mov eax, errAccDen  ;Set error code here
   850 00007E48 EBB1                <1>     jmp short .exitBad  ;Return setting CF=CY and errAccDen (no pointer)
   851                              <1> .gep1:
   852 00007E4A 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   853 00007E51 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   854 00007E56 75E8                <1>     jne .gep00
   855 00007E58 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word.
   856 00007E5F 59                  <1>     pop rcx
   857                              <1> .gepExitOk:
   858 00007E60 E86EF6FFFF          <1>     call getUserRegs
   859 00007E65 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   860 00007E69 E92DFBFFFF          <1>     jmp extGoodExit
   861                              <1> 
   862                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   863                              <1> ;Wraps the generic disk IO call to get/set the disk serial number and
   864                              <1> ; associated information.
   865                              <1> ;Input:
   866                              <1> ;   al = 0: Get disk serial number
   867                              <1> ;   al = 1: Set disk serial number
   868                              <1> ;   ebx = 1-based drive number
   869                              <1> ;   rdx -> Pointer to an ID parameter block
   870 00007E6E 0FB6C0              <1>     movzx eax, al
   871 00007E71 B966080000          <1>     mov ecx, 0866h  ;Get Disk Serial Packet major/minor codes
   872 00007E76 85C0                <1>     test eax, eax
   873 00007E78 7417                <1>     jz .doIoctl
   874 00007E7A 81E920000000        <1>     sub ecx, 20h    ;Turn Get major/minor codes into a Set
   875 00007E80 3D01000000          <1>     cmp eax, 1      ;Is this a set?
   876 00007E85 740A                <1>     je .doIoctl
   877 00007E87 B801000000          <1>     mov eax, errInvFnc  ;Else, return error, invalid function!
   878 00007E8C E918FBFFFF          <1>     jmp extErrExit
   879                              <1> .doIoctl:
   880 00007E91 B80D000000          <1>     mov eax, 0Dh    ;Do block dev Generic IOCTL call
   881 00007E96 E88AD4FFFF          <1>     call ioctrl     ;Sets up the return state internally
   882                              <1>     return          ; so just return normally
    13                              <2> %%_ret:
    14 00007E9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                                  %include "./src/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 00007E9C 3C07                <1>     cmp al, 07h
     8 00007E9E 7204                <1>     jb .skip
     9 00007EA0 3C09                <1>     cmp al, 09h
    10 00007EA2 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 00007EA4 4889D6              <1>     mov rsi, rdx
    13 00007EA7 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 00007EAB 66891D(43040000)    <1>     mov word [machineNum], bx
    15 00007EB2 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 00007EB6 48891D(3B040000)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 00007EBD 488D1D22FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 00007EC4 53                  <1>     push rbx
    20 00007EC5 488B1D(E2190000)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 00007ECC 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 00007ECD 50                  <1>     push rax    ;Push al onto stack as a qword
    23 00007ECE E854010000          <1>     call serverFunctionSelect
    24 00007ED3 B801000000          <1>     mov eax, eLocUnk
    25 00007ED8 8805(0A040000)      <1>     mov byte [errorLocus], al
    26 00007EDE E9C6FAFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 00007EE3 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 00007EE4 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 00007EE5 5F                  <1>     pop rdi
    33 00007EE6 E8E8F5FFFF          <1>     call getUserRegs
    34 00007EEB 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 00007EEE 56                  <1>     push rsi
    36 00007EEF B906000000          <1>     mov ecx, 6
    37 00007EF4 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 00007EF7 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 00007EFE 48A5                <1>     movsq   ;Transfer r8...
    40 00007F00 48A5                <1>     movsq   ;... and r9
    41 00007F02 5E                  <1>     pop rsi
    42 00007F03 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 00007F06 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 00007F0A 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 00007F0E 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 00007F12 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 00007F16 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 00007F1A 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 00007F1E 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 00007F22 48891D(83040000)    <1>     mov qword [oldRBX], rbx
    51 00007F29 C605(02070000)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 00007F30 E91CF9FFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CDh 20h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 00007F35 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 00007F3C 66813BCD20          <1>     cmp word [rbx], 20CDh
    61 00007F41 740A                <1>     je .validTask
    62 00007F43 B805000000          <1>     mov eax, errAccDen
    63 00007F48 E95CFAFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 00007F4D 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 00007F4F E80AFAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 00007F54 53                  <1>     push rbx
    70 00007F55 E846D3FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 00007F5A 7225                <1>     jc .exit
    72 00007F5C 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 00007F61 7419                <1>     je .gotoNextFile
    74 00007F63 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 00007F68 7412                <1>     je .gotoNextFile
    76 00007F6A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir  ;Dont commit redirs
    77 00007F70 750A                <1>     jnz .gotoNextFile
    78 00007F72 E865D1FFFF          <1>     call setCurrentSFT ;Set this as the current SFT
    79 00007F77 E84DBFFFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 00007F7C 5B                  <1>     pop rbx
    83 00007F7D FFC3                <1>     inc ebx
    84 00007F7F EBD3                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 00007F81 E8E2F9FFFF          <1>     call dosCrit1Exit
    87 00007F86 5B                  <1>     pop rbx ;Align stack
    88 00007F87 E90FFAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 00007F8C FF15(E7000000)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 00007F92 0F8211FAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 00007F98 E9FEF9FFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 00007F9D FF15(D7000000)      <1>     call qword [closeCompShare]
   100 00007FA3 EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 00007FA5 FF15(DF000000)      <1>     call qword [closeTaskShare]
   104 00007FAB EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 00007FAD FF15(07010000)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 00007FB3 72DD                <1>     jc closeFilesByName.shareExitBad
   109 00007FB5 E819F5FFFF          <1>     call getUserRegs
   110 00007FBA 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 00007FBE 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 00007FC2 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 00007FC6 EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 00007FC8 488D3D(07040000)    <1>     lea rdi, sda
   124 00007FCF 48B9DB150000000000- <1>     mov rcx, sdaLen
   124 00007FD8 00                  <1>
   125 00007FD9 48BA2C000000000000- <1>     mov rdx, sdaLen - sdaDOSLen ;Get the difference
   125 00007FE2 00                  <1>
   126 00007FE3 E8EBF4FFFF          <1>     call getUserRegs
   127 00007FE8 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 00007FEC 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 00007FF0 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 00007FF2 50                  <1>     push rax
   133 00007FF3 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 00007FF8 CD2F                <1>     int 2Fh
   135 00007FFA 5B                  <1>     pop rbx
   136 00007FFB 7295                <1>     jc short closeFilesByName.shareExitBad
   137 00007FFD EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 00007FFF 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 00008001 668905(0B040000)    <1>     mov word [errorExCde], ax
   144 00008008 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Set the volume label pointer var
   145 0000800C 488905(0F040000)    <1>     mov qword [errorVolLbl], rax
   146 00008013 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 00008016 668905(0D040000)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 0000801D 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 00008020 8825(0A040000)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 00008026 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 00008027 55                  <1>     push rbp
   156 00008028 4889E5              <1>     mov rbp, rsp
   157 0000802B 53                  <1>     push rbx
   158 0000802C 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 00008030 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 00008033 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 00008036 7621                <1>     jbe short .argumentTooBig
   162 00008038 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx
   163 0000803C D1E3                <1>     shl ebx, 1  ;Convert to word offset
   164 0000803E FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 00008040 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   166 00008044 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   167 00008047 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   168 0000804B 48895D20            <1>     mov qword [rbp + 4*8], rbx  ;Store this address as the return address
   169 0000804F 5B                  <1>     pop rbx
   170 00008050 5D                  <1>     pop rbp
   171 00008051 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   172                              <1>     return
    13                              <2> %%_ret:
    14 00008058 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> .argumentTooBig:
   174 00008059 5B                  <1>     pop rbx
   175 0000805A 5D                  <1>     pop rbp
   176 0000805B C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   177                              <1> 
   178                              <1> netServices:   ;ah = 5Eh, do nothing
   179                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   180 0000805E 3C01                <1>     cmp al, 01
   181 00008060 7214                <1>     jb .getName
   182 00008062 7437                <1>     jz .setName
   183 00008064 3C06                <1>     cmp al, 6
   184 00008066 724C                <1>     jb .netRedir
   185 00008068 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   186 0000806F B001                <1>     mov al, errInvFnc
   187                              <1> .badExit:
   188 00008071 E933F9FFFF          <1>     jmp extErrExit
   189                              <1> .getName:
   190                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   191                              <1> ;Output: CF=NC => Success.
   192                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   193                              <1> ;        CL = NetBIOS number for the machine
   194                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   195                              <1> ;        CF=CY => Failure
   196                              <1> ;        AX = Errorcode
   197 00008076 4889D7              <1>     mov rdi, rdx
   198 00008079 0FB70D(1D000000)    <1>     movzx ecx, word [validNetNam]
   199 00008080 E84EF4FFFF          <1>     call getUserRegs
   200 00008085 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   201 00008089 488D35(D6030000)    <1>     lea rsi, machineName
   202                              <1> .nameCmn:
   203 00008090 31C0                <1>     xor eax, eax
   204 00008092 48A5                <1>     movsq
   205 00008094 A5                  <1>     movsd
   206 00008095 66A5                <1>     movsw
   207 00008097 A4                  <1>     movsb
   208 00008098 AA                  <1>     stosb   ;Store terminating null
   209 00008099 EB24                <1>     jmp short .exitGood
   210                              <1> .setName:
   211                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   212                              <1> ;       CH = 0 => Mark name as invalid
   213                              <1> ;         != 0 => Mark name as valid
   214                              <1> ;       CL = NetBIOS number for the name
   215 0000809B 66890D(1D000000)    <1>     mov word [validNetNam], cx
   216 000080A2 4889D6              <1>     mov rsi, rdx
   217 000080A5 FE05(D5030000)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   218 000080AB 488D3D(D6030000)    <1>     lea rdi, machineName
   219 000080B2 EBDC                <1>     jmp short .nameCmn
   220                              <1> 
   221                              <1> .netRedir:
   222 000080B4 50                  <1>     push rax
   223 000080B5 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   224 000080BA CD2F                <1>     int 2Fh
   225 000080BC 5A                  <1>     pop rdx
   226 000080BD 72B2                <1>     jc .badExit
   227                              <1> .exitGood:
   228 000080BF E9D7F8FFFF          <1>     jmp extGoodExit
   229                              <1> 
   230                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   231                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   232 000080C4 80FC07              <1>     cmp ah, 07h
   233 000080C7 7419                <1>     je .driveAction
   234 000080C9 80FC08              <1>     cmp ah, 08h
   235 000080CC 7414                <1>     je .driveAction
   236                              <1>     ;Else, use redirector to process request
   237 000080CE 50                  <1>     push rax
   238 000080CF B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   239 000080D4 CD2F                <1>     int 2Fh
   240 000080D6 5B                  <1>     pop rbx
   241                              <1> .badExit:
   242 000080D7 0F82CCF8FFFF        <1>     jc extErrExit
   243                              <1> .goodExit:
   244 000080DD E9B9F8FFFF          <1>     jmp extGoodExit
   245                              <1> .driveAction:
   246                              <1> ;dl must have valid 0-based drive number
   247 000080E2 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   248 000080E4 E8D9F4FFFF          <1>     call getCDSforDrive
   249 000080E9 72EC                <1>     jc short .badExit
   250                              <1>     ;rsi points to CDS
   251 000080EB 80EA07              <1>     sub dl, 7
   252 000080EE 7408                <1>     jz .enable
   253 000080F0 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   254 000080F6 EBE5                <1>     jmp short .goodExit
   255                              <1> .enable:
   256 000080F8 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   257 000080FE EBDD                <1>     jmp short .goodExit
    55                                  %include "./src/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer and install check for other DOS multiplex functions.
     2                              <1> ;Mainly to handle the DOS multiplexer, i.e. ah=12h. Three other 
     3                              <1> ; cases also handled as outlined below.
     4                              <1> ;------------------------------------------------------------------------
     5                              <1> ;Handle ah = 10h,11h,14h install check requests only (al=0).
     6                              <1> ; If al <> 0, return error, set CF and al = 1.
     7                              <1> ; For reference:
     8                              <1> ; ah = 10h, (SHARE)
     9                              <1> ;           Return: al = 0, not installed, ok to install
    10                              <1> ;                   al = 1, not installed, not ok to install
    11                              <1> ;                   al = -1, installed.
    12                              <1> ; ah = 11h, (REDIR)
    13                              <1> ; ah = 14h, (NLS)
    14                              <1> ;Any other value of ah simply falls through the IRETQ
    15                              <1> ;------------------------------------------------------------------------
    16                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    17                              <1> ; stack before the interrupt is called. This word is always read from the
    18                              <1> ; stack, but the stack is not rejiggled to remove it.
    19                              <1> 
    20                              <1> multiplexHdlr:          ;Int 2Fh, AH=12h, exposed internal functions
    21 00008100 80FC10              <1>     cmp ah, 10h ;Are we share?
    22 00008103 7411                <1>     je .installCheck
    23 00008105 80FC11              <1>     cmp ah, 11h ;Are we redir?
    24 00008108 740C                <1>     je .installCheck
    25 0000810A 80FC12              <1>     cmp ah, 12h
    26 0000810D 741E                <1>     je .goMplx
    27 0000810F 80FC14              <1>     cmp ah, 14h ;Are we NLS?
    28 00008112 7402                <1>     je .installCheck
    29 00008114 48CF                <1>     iretq
    30                              <1> 
    31                              <1> .installCheck:
    32                              <1> ;Here if a share, redir or NLS request.
    33                              <1> ;All of these should be installed over us if installed.
    34                              <1> ;Thus we are not installed. Return not installed, if that is what the 
    35                              <1> ;request wants. (AL=0)
    36                              <1> ;If anything else requested, return error.
    37 00008116 84C0                <1>     test al, al
    38 00008118 7411                <1>     jz .exit
    39                              <1> .exitBad:
    40 0000811A B801000000          <1>     mov eax, errInvFnc
    41 0000811F C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    42 00008126 804C241001          <1>     or byte [rsp + 8h*2], 1 ;Set CF
    43                              <1> .exit:
    44 0000812B 48CF                <1>     iretq
    45                              <1> 
    46                              <1> .goMplx:
    47 0000812D 3C30                <1>     cmp al, mDispTblL / 2
    48 0000812F 73E9                <1>     jae .exitBad   ;If above or equal, exit
    49                              <1>     ;Rejiggle stack! 
    50                              <1> 
    51 00008131 53                  <1>     push rbx    ;Storage for return from DOS ret addr
    52 00008132 53                  <1>     push rbx    ;Storage for DOS function
    53 00008133 53                  <1>     push rbx    ;Stores rbx value
    54 00008134 488D1D2E000000      <1>     lea rbx, .retAddr
    55 0000813B 48895C2410          <1>     mov qword [rsp + 2*8], rbx    ;Store ret addr from DOS routine
    56                              <1> 
    57 00008140 51                  <1>     push rcx
    58 00008141 488D1D5385FFFF      <1>     lea rbx, qword mDispTbl   ;Get mplx displacement tbl
    59 00008148 53                  <1>     push rbx
    60 00008149 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    61 0000814C D1E1                <1>     shl ecx, 1   ;multiply by 2
    62 0000814E 48FFC3              <1>     inc rbx         ;Go past the first byte (length count)
    63 00008151 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    64 00008155 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    65 00008156 4801CB              <1>     add rbx, rcx
    66 00008159 59                  <1>     pop rcx
    67 0000815A 48895C2408          <1>     mov qword [rsp + 8], rbx
    68 0000815F 5B                  <1>     pop rbx
    69 00008160 488B442428          <1>     mov rax, qword [rsp + 5*8]  ;Get the old stack pointer from the frame
    70 00008165 488B00              <1>     mov rax, qword [rax]        ;Get the argument we pushed on the stack
    71                              <1>     return  ;Now we have no alignement requirements :D 
    13                              <2> %%_ret:
    14 00008168 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    72                              <1> 
    73                              <1> .retAddr:
    74 00008169 53                  <1>     push rbx
    75 0000816A 9C                  <1>     pushfq
    76 0000816B 5B                  <1>     pop rbx
    77 0000816C 48895C2418          <1>     mov qword [rsp + 3*8], rbx
    78 00008171 5B                  <1>     pop rbx
    79 00008172 48CF                <1>     iretq
    80                              <1> 
    81                              <1> multiplexTest:
    82 00008174 B0FF                <1>     mov al, -1
    83 00008176 C3                  <1>     ret
    84                              <1> 
    85                              <1> getDosDataSeg:  ;Int 2Fh, AX=1203h
    86                              <1> ;Return: r8 = Dos Data Segment Pointer
    87 00008177 4C8D05(10000000)    <1>     lea r8, dosDataArea
    88                              <1>     return
    13                              <2> %%_ret:
    14 0000817E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    89                              <1> 
    90                              <1> mpxOpen:   ;Int 2Fh, AX=1226h, Open File
    91                              <1> ;Input: cl = open mode
    92                              <1> ;       rdx -> Ptr to filename to open
    93                              <1> ;Output: ax = Error code/handle with CF indicating failure/success
    94 0000817F 88C8                <1>     mov al, cl
    95 00008181 E8F1B4FFFF          <1>     call openFileHdl
    96                              <1>     return
    13                              <2> %%_ret:
    14 00008186 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    97                              <1> 
    98                              <1> mpxLseek:  ;Int 2Fh, AX=1228h, LSEEK
    99                              <1> ;Input:  
   100                              <1> ;   ebp = Low byte contains subfunction, in normal EP is provided by al
   101                              <1> ;   ebx = Handle to move (lower word only)
   102                              <1> ;   ecx = Number of bytes to move
   103                              <1> ;   edx = 0 (upper dword, reserved for now)
   104                              <1> ;Return:
   105                              <1> ;   eax = New pointer location
   106                              <1> ;   edx = 0
   107 00008187 FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   108 0000818D 488D05(211A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   109 00008194 488905(7B040000)    <1>     mov qword [oldRSP], rax
   110 0000819B 89E8                <1>     mov eax, ebp
   111 0000819D E800B7FFFF          <1>     call lseekHdl   ;Sets the values of our registers by how it exits
   112 000081A2 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   113                              <1>     return
    13                              <2> %%_ret:
    14 000081A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> mpxIOCTL:  ;Int 2Fh, AX=122Bh
   116                              <1> ;IO is done exactly as documented by DOS except al is passed in 
   117                              <1> ; low byte of bp.
   118 000081A9 FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   119 000081AF 488D05(211A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   120 000081B6 488905(7B040000)    <1>     mov qword [oldRSP], rax
   121 000081BD 89E8                <1>     mov eax, ebp
   122 000081BF E861D1FFFF          <1>     call ioctrl   ;Sets the values of our registers by how it exits
   123 000081C4 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   124                              <1>     return  
    13                              <2> %%_ret:
    14 000081CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> mpxChecksum:
   127                              <1> ;Computes the checksum of a number of bytes in memory
   128                              <1> ;Input: edx = Start value for checksum
   129                              <1> ;       ecx = number of bytes to sum
   130                              <1> ;       rsi -> Ptr to byte array to perform sum on
   131 000081CB 31C0                <1>     xor eax, eax
   132 000081CD 67E307              <1>     jecxz .exit
   133                              <1> .lp:
   134 000081D0 AC                  <1>     lodsb
   135 000081D1 01C2                <1>     add edx, eax
   136 000081D3 FFC9                <1>     dec ecx
   137 000081D5 75F9                <1>     jnz .lp
   138                              <1> .exit:
   139                              <1>     return
    13                              <2> %%_ret:
    14 000081D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   140                              <1> mpxSum: ;Could use in readDateTimeRecord (two places)
   141                              <1> ;Sums the values in a number of bytes in memory
   142                              <1> ;Input: rsi -> Byte array to sum values of
   143                              <1> ;       edx = Value limit (for the sum)
   144                              <1> ;       ecx = 0
   145 000081D8 31C0                <1>     xor eax, eax
   146                              <1> .lp:
   147 000081DA AC                  <1>     lodsb
   148 000081DB 39C2                <1>     cmp edx, eax
   149                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000081DD 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000081DF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   150 000081E0 29C2                <1>     sub edx, eax
   151 000081E2 FFC1                <1>     inc ecx
   152 000081E4 EBF4                <1>     jmp short .lp
    56                                  %include "./src/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 000081E6 B801000000          <1>     mov eax, errInvFnc
     6 000081EB 668905(0B040000)    <1>     mov word [errorExCde], ax
     7 000081F2 F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 000081F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 000081F4 E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 000081F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 000081FA F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 000081FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 000081FC FF15(C7000000)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 00008202 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 00008203 FF15(CF000000)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 00008209 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 0000820A 0FB71D(1F000000)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 00008211 53                  <1>     push rbx
    34 00008212 FF15(FF000000)      <1>     call qword [checkFileLockShare]
    35 00008218 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00008219 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000821B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    37 0000821C E806000000          <1>     call shareRetryCountdown
    38 00008221 FFCB                <1>     dec ebx
    39 00008223 75EC                <1>     jnz .mainLoop
    40 00008225 F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 00008226 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 00008227 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000822E 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00008230 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    48 00008231 51                  <1>     push rcx
    49 00008232 0FB70D(21000000)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 00008239 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 0000823C 51                  <1>     push rcx
    53 0000823D 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 0000823F 66FFC9              <1>     dec cx
    56 00008242 75FB                <1>     jnz .mainLoop
    57 00008244 59                  <1>     pop rcx
    58 00008245 FFC9                <1>     dec ecx
    59 00008247 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 00008249 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 0000824A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 0000824B 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB
    67 00008251 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 00008253 50                  <1>     push rax
    69 00008254 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 00008258 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 0000825D 58                  <1>     pop rax
    72 0000825E 7508                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 00008260 E870000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00008265 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00008267 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    76                              <1> .notInCompatMode:
    77 00008268 B820000000          <1>     mov eax, errShrVio
    78 0000826D F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 0000826E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resources within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87                              <1> ;Output: rdi -> Current SFT!!
    88 0000826F 51                  <1>     push rcx
    89                              <1> .reloadCounter:
    90 00008270 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    91                              <1> .keepLooping:
    92 00008277 E868CEFFFF          <1>     call getCurrentSFT
    93 0000827C 31C0                <1>     xor eax, eax
    94 0000827E 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    95 00008284 51                  <1>     push rcx
    96 00008285 E872FFFFFF          <1>     call openShareCallWrapper
    97 0000828A 59                  <1>     pop rcx
    98 0000828B 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    99 0000828D E895FFFFFF          <1>     call shareRetryCountdown
   100 00008292 FFC9                <1>     dec ecx
   101 00008294 75E1                <1>     jnz .keepLooping
   102 00008296 E842000000          <1>     call shareCriticalError
   103 0000829B 73D3                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   104                              <1> .exit:
   105 0000829D 59                  <1>     pop rcx
   106                              <1>     return
    13                              <2> %%_ret:
    14 0000829E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> 
   108                              <1> shareCheckWriteLockViolation:
   109 0000829F C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   110 000082A6 EB07                <1>     jmp short shareCheckReadLockViolation.common
   111                              <1> shareCheckReadLockViolation:
   112 000082A8 C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   113                              <1> .common:
   114                              <1> ;Input:
   115                              <1> ;rdi -> SFT for the file we are reading
   116 000082AF 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB
   117 000082B5 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   118 000082B7 50                  <1>     push rax
   119 000082B8 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   120 000082BC 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   121 000082C1 58                  <1>     pop rax
   122 000082C2 7508                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   123                              <1> .fcbQuirk:
   124 000082C4 E80C000000          <1>     call shareLockViolationCriticalError
   125                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000082C9 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000082CB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   126                              <1> .notInCompatMode:
   127 000082CC 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   128 000082CE B821000000          <1>     mov eax, errLokVio
   129 000082D3 F9                  <1>     stc ;Set the flag for error
   130                              <1>     return
    13                              <2> %%_ret:
    14 000082D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> shareLockViolationCriticalError:
   133                              <1> ;This does NOT force rwFlag to 0 and signals a lock violation
   134 000082D5 57                  <1>     push rdi
   135 000082D6 B821000000          <1>     mov eax, errLokVio
   136 000082DB EB08                <1>     jmp short shareCriticalError.common
   137                              <1> shareCriticalError: ;Int 2Fh AX=120Ah
   138                              <1> ;Used for share Read requests
   139                              <1> ;Input: eax = Error code
   140 000082DD 57                  <1>     push rdi
   141 000082DE C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Default to read
   142                              <1> .common:
   143 000082E5 C605(68040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   144 000082EC 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] 
   145 000082F3 31FF                <1>     xor edi, edi   ;Indicate that this was due to share
   146 000082F5 E834E7FFFF          <1>     call diskDevErr
   147 000082FA 5F                  <1>     pop rdi
   148 000082FB 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   149                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000082FD 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000082FF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   150 00008300 F9                  <1>     stc
   151                              <1>     return
    13                              <2> %%_ret:
    14 00008301 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    57                                  
    58                                  ;=========================END OF DOS MODULE==========================
    58          ------------------       info: assembly required 1+16+2 passes

