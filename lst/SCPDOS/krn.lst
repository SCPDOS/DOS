     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro rets 0
    81                              <1> cret s
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro retns 0
    85                              <1> cret ns
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro breakpoint 0
    89                              <1> xchg bx, bx
    90                              <1> %endmacro
     5                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     drvMAXCMD       equ 24
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn     equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut    equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev    equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev  equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut   equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL     equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL    equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvNotIBM    equ 2000h ;If set, buffer in Build BPB is scratch space
    70                              <1>     devDrvOutToBsy  equ 2000h ;If set, char dev supports output until busy
    71                              <1>     devDrvIOCTLRW   equ 4000h ;If set, IOCTL Read/Write supported
    72                              <1>     devDrvChar      equ 8000h ;If set, Char device
    73                              <1> ;Bit 0 1=console input
    74                              <1> ;    1 1=console output (character devices)
    75                              <1> ;    2 1=NUL device
    76                              <1> ;    3 1=CLOCK device
    77                              <1> ;    4 1=Int 29 output (CON)
    78                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    79                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    80                              <1> ;   11 1=open/close/removable media supported (3.0+)
    81                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    82                              <1> ;      1=media descriptor in FAT required (block devices)
    83                              <1> ;   14 1=IOCTL supported
    84                              <1> ;   15 0=block device
    85                              <1> ;      1=character device
    86                              <1> 
    87                              <1> ;Driver structures
    88                              <1> 
    89                              <1> %macro drvReqPktM 0 ;Driver Request Header Macro
    90                              <1> 
    91                              <1>     .hdrlen db ?  ;Length of the request header
    92                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    93                              <1>     .cmdcde db ?  ;Command code
    94                              <1>     .status dw ?  ;Status word
    95                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    96                              <1> 
    97                              <1> %endmacro
    98                              <1> 
    99                              <1> struc drvReqPkt
   100                              <1>     drvReqPktM
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   101                              <1> endstruc
   102                              <1> 
   103                              <1> struc initReqPkt  ;Init Request Packet
   104                              <1> 
   105                              <1>     drvReqPktM   ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   106 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   107 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   108 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   109 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   110                              <1> 
   111                              <1> endstruc
   112                              <1> 
   113                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   114                              <1> 
   115                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   116 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   117 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   118 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   123                              <1> 
   124                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   125 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   126 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   127 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   128                              <1> 
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc ioReqPkt   ;IO Request Packet
   132                              <1> 
   133                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   134 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   135 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   136 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   137 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   138 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   139                              <1> 
   140                              <1> endstruc
   141                              <1> 
   142                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   143                              <1>     
   144                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   145 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   146                              <1> 
   147                              <1> endstruc
   148                              <1> 
   149                              <1> struc statusReqPkt   ;Status Request Packet
   150                              <1> 
   151                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   152                              <1> 
   153                              <1> endstruc
   154                              <1> 
   155                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   156                              <1> 
   157                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   158                              <1>      
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc openReqPkt ;Open Device Request Packet
   162                              <1> 
   163                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   164                              <1>      
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc closeReqPkt ;Close Device Request Packet
   168                              <1> 
   169                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   170                              <1>      
   171                              <1> endstruc
   172                              <1> 
   173                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   174                              <1> 
   175                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   176                              <1>      
   177                              <1> endstruc
   178                              <1> 
   179                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   180                              <1> 
   181                              <1>     drvReqPktM    ;Common Driver Header Macro  
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   182 0000000D ??                  <1>     .majfun db ?  ;Major function number
   183 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   184 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   185 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   186 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   187                              <1> 
   188                              <1> endstruc
   189                              <1> 
   190                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   191                              <1>     
   192                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   193                              <1> 
   194                              <1> endstruc
   195                              <1> 
   196                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   197                              <1>     
   198                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   199                              <1> 
   200                              <1> endstruc
   201                              <1> ;IOCTL structs
   202                              <1> 
   203                              <1> struc lbaParamsBlock
   204 00000000 ??                  <1>     .bSize          db ?
   205 00000001 ??                  <1>     .bSpecFuncs     db ?    ;0 = Update drive info from medium and return that
   206                              <1>                             ;1 = Get current saved drive info w/o updating
   207                              <1>                             ;2 = Get physical parameters of the medium
   208                              <1>                             ;Only meaningful on get. Set must have this as 0
   209 00000002 ????                <1>     .wDevFlgs       dw ?    ;Only bits 0 and 1 are xmitted/read
   210 00000004 ????                <1>     .wFSType        dw ?    ;If one, it is a FAT type. Only valid on getlba
   211                              <1>                             ; If one, can use CHS functions with returned vals
   212 00000006 ????                <1>     .wRes           dw ?    ;Reserved word
   213 00000008 ????????????????    <1>     .qSectorSize    dq ?    ;Only the lower word is valid here
   214 00000010 ????????????????    <1>     .qNumSectors    dq ?    ;Only the lower dword is valid here
   215                              <1> ;The below is the absolute start sector of the partition. It is the 
   216                              <1> ; partition at which to find the BPB.
   217 00000018 ????????????????    <1>     .qStartSector   dq ?    ;Only the lower dword is valid here.
   218                              <1> endstruc
   219                              <1> 
   220                              <1> %macro lbIOCmnM 0   ;IOCTL LBA request common portion macro
   221                              <1>     .size           db ?
   222                              <1>     .numSectors     db ?  ;# sectors to act on. Returns sectors acted on
   223                              <1>     .res            db 6 dup (?)
   224                              <1>     .startSector    dq ?  ;Sector to start action on
   225                              <1> %endmacro
   226                              <1> 
   227                              <1> struc lbaIOBlock
   228                              <1>     lbIOCmnM
   221 00000000 ??                  <2>  .size db ?
   222 00000001 ??                  <2>  .numSectors db ?
   223 00000002 ????????????        <2>  .res db 6 dup (?)
   224 00000008 ????????????????    <2>  .startSector dq ?
   229 00000010 ????????????????    <1>     .xferBuffer     dq ?  ;Transfer buffer for data
   230                              <1> endstruc
   231                              <1> 
   232                              <1> struc lbaFormatBlock
   233                              <1>     lbIOCmnM
   221 00000000 ??                  <2>  .size db ?
   222 00000001 ??                  <2>  .numSectors db ?
   223 00000002 ????????????        <2>  .res db 6 dup (?)
   224 00000008 ????????????????    <2>  .startSector dq ?
   234                              <1> endstruc
   235                              <1> 
   236                              <1> struc chsParamsBlock
   237 00000000 ??                  <1>     .bSpecFuncs db ?    ;
   238 00000001 ??                  <1>     .bDevType   db ?    ;5 if fixed, 7 otherwise
   239 00000002 ????                <1>     .wDevFlgs   dw ?    ;Only bits 0 and 1 are xmitted/read
   240 00000004 ????                <1>     .wNumCyl    dw ?
   241 00000006 ??                  <1>     .bMedTyp    db ?    ;Perma 0 for us, meaningless. Reserved.
   242 00000007 <res 35h>           <1>     .deviceBPB  db 53 dup (?)   ;Full length with reserved bytes of BPB32
   243                              <1>     .TrackLayout:
   244                              <1> endstruc
   245                              <1> 
   246                              <1> ;Used for get and set params. Refer to DOS docs for meaning of bit.
   247                              <1> specFuncBPB equ 1<<0    ;Does BPB stuff
   248                              <1> ;Only used in setparams requests. Ignored for getparams 
   249                              <1> specFuncTrk equ 1<<1    ;Set if just track layout cpy. Clear if set all.
   250                              <1> specFuncSec equ 1<<2    ;Set if all sectors samze size. Clear if not.
   251                              <1> 
   252                              <1> 
   253                              <1> struc chsIOBlock
   254 00000000 ??                  <1>     .bSpecFuncs     db ?
   255 00000001 ????                <1>     .wStartHead     dw ?
   256 00000003 ????                <1>     .wStartCyl      dw ?    ;Zero based.
   257 00000005 ????                <1>     .wStartSector   dw ?    ;Zero based.
   258 00000007 ????                <1>     .wNumSectors    dw ?
   259 00000009 ????????????????    <1>     .pXferBuffer    dq ?
   260                              <1> endstruc
   261                              <1> 
   262                              <1> struc chsFormatBlock
   263 00000000 ??                  <1>     .bSpecFuncs db ?
   264 00000001 ????                <1>     .wStartHead dw ?
   265 00000003 ????                <1>     .wStartCyl  dw ?        ;Zero based.
   266                              <1> endstruc
   267                              <1> 
   268                              <1> struc accFlgBlk
   269 00000000 ??                  <1>     .bSpecFuncs db ?    ;Must be 0
   270 00000001 ??                  <1>     .bAccMode   db ?    ;Set if access allowed. Clear if not.
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc idParamBlk
   274 00000000 ????                <1>     .wCallLvl   dw ?    ;Should be zero
   275 00000002 ????????            <1>     .volId      dd ?    ;Volume Id
   276 00000006 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
   277 00000011 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
   278                              <1> endstruc
     6                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc oemHeader
    19 00000000 ??????              <1>     .jump       db 3 dup (?)    ;Jump instruction
    20 00000003 ????????????????    <1>     .oemString  db 8 dup (?)    ;OEM string
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc bpb          ;FAT 12 and 16 BPB
    24 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    25 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    26 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors, in volume
    27 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    28 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of 32 byte entries in Root directory
    29 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    30 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    31 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT
    32 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    33 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    34 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors, preceeding volume start
    35 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    36                              <1> endstruc
    37                              <1> 
    38                              <1> struc extBs
    39                              <1> ;Extended bootsector structure. If present, comes immediately after 
    40                              <1> ; BPB in bootsector
    41 00000000 ??                  <1>     .drvNum     db ?  ;Logical drive number (00h or 80h)
    42 00000001 ??                  <1>     .reserved1  db ?  ;Reserved byte
    43 00000002 ??                  <1>     .bootSig    db ?  ;Extended boot signature
    44 00000003 ????????            <1>     .volId      dd ?  ;Volume serial number
    45 00000007 <res Bh>            <1>     .volLab     db 11 dup (?) ;Volume label string
    46 00000012 ????????????????    <1>     .filSysType db 8 dup (?)  ;File system type string
    47                              <1> endstruc
    48                              <1> extBsSig    equ 29h
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB
    51 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    52 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    53 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors
    54 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    55 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of entries in Root directory
    56 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    57 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    58 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
    59 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    60 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    61 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors
    62 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    63 00000019 ????????            <1>     .FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
    64 0000001D ????                <1>     .extFlags   dw ?  ;Extended Flags word
    65 0000001F ????                <1>     .FSver      dw ?  ;File system version word, must be 0
    66 00000021 ????????            <1>     .RootClus   dd ?  ;First Cluster of Root Directory
    67 00000025 ????                <1>     .FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
    68 00000027 ????                <1>     .BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
    69 00000029 <res Ch>            <1>     .reserved   db 12 dup (?) ;Reserved 12 bytes
    70                              <1> endstruc
    71                              <1> 
    72                              <1> struc FSInfo
    73 00000000 ????????            <1>     .leadSig    dd ? ;Leading Signature, should be 041615252h
    74 00000004 <res 1E0h>          <1>     .reserved1  db 480 dup (?)
    75 000001E4 ????????            <1>     .strucSig   dd ?  ;Should be 061417272h
    76 000001E8 ????????            <1>     .freeCount  dd ?  ;Contains the last known free cluster on volume
    77 000001EC ????????            <1>     .nextFree   dd ?  ;Contains the first known free cluster on volume
    78 000001F0 <res Ch>            <1>     .reserved2  db 12 dup (?) ;Should be 0
    79 000001FC ????????            <1>     .trailSig   dd ?  ;Should be 0AA550000h
    80                              <1> endstruc
    81                              <1> 
    82                              <1> fsInfoSig1  equ 041615252h
    83                              <1> fsInfoSig2  equ 061417272h
    84                              <1> fsInfoSig3  equ 0AA550000h
    85                              <1> 
    86                              <1> struc mbr
    87 00000000 <res 1B8h>          <1>     .bsCode     db 440 dup (?)
    88 000001B8 ????????            <1>     .diskID     dd ?
    89 000001BC ????                <1>     .reserved   dw ?
    90 000001BE <res 10h>           <1>     .mbrEntry1  db 16 dup (?)
    91 000001CE <res 10h>           <1>     .mbrEntry2  db 16 dup (?)
    92 000001DE <res 10h>           <1>     .mbrEntry3  db 16 dup (?)
    93 000001EE <res 10h>           <1>     .mbrEntry4  db 16 dup (?)
    94 000001FE ????                <1>     .mbrSig     dw ?
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc ebr   ;A special type of MBR
    98 00000000 <res 1BEh>          <1>     .bsCode     db 446 dup (?)    ;Basic 16-bit code to error if launched into
    99 000001BE <res 10h>           <1>     .ebrVolHdr  db 16 dup (?) ;Information about the volume itself
   100 000001CE <res 10h>           <1>     .ebrLinkHdr db 16 dup (?) ;Link ptr to next logical volume in ebr
   101 000001DE <res 20h>           <1>     .reserved   db 32 dup (?) ;Reserved
   102 000001FE ????                <1>     .mbrSig     dw ?
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc mbrEntry
   106 00000000 ??                  <1>     .ptnAtrib   db ?  ;80h = active
   107 00000001 ??????              <1>     .chsStart   db 3 dup (?)  ;Ignore practically
   108 00000004 ??                  <1>     .ptnType    db ?  ;This being 00 means free
   109 00000005 ??????              <1>     .chsEnd     db 3 dup (?)  ;Ignore
   110 00000008 ????????            <1>     .lbaStart   dd ?  ;Start of partition in 32 bit LBA
   111 0000000C ????????            <1>     .numSectors dd ?  ;Number of sectors in partition
   112                              <1> endstruc
   113                              <1> 
   114                              <1> struc fatDirEntry
   115 00000000 <res Bh>            <1>     .name       db 11 dup (?) ;8.3 File Name w/o fullstop
   116 0000000B ??                  <1>     .attribute  db ?  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      db ?  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   db ?  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    dw ?  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    dw ?  ;Creation date
   121 00000012 ????                <1>     .lastAccDat dw ?  ;Last Read/Write date, not 100% supported (consider later)
   122 00000014 ????                <1>     .fstClusHi  dw ?  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    dw ?  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    dw ?  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  dw ?  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   dd ?  ;32-bit quantity with size of file described by entry
   127                              <1> endstruc
   128                              <1> ;Directory attribute equates
   129                              <1>     dirReadOnly     equ 01h
   130                              <1>     dirHidden       equ 02h
   131                              <1>     dirSystem       equ 04h
   132                              <1>     dirVolumeID     equ 08h
   133                              <1>     dirDirectory    equ 10h
   134                              <1>     dirArchive      equ 20h
   135                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1>     ;If any of the three bits are set, then ALL three bits are set
   138                              <1>     ; in addition to whatever the user passed to search for.
   139                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   140                              <1>     dirIncFiles     equ dirHidden | dirSystem
   141                              <1> 
   142                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   143                              <1> 
   144                              <1>     ;.jmpBoot                db 3 dup (?)
   145                              <1>     ;.oemName                db 8 dup (?)  ;OEM name
   146                              <1> ;BPB starts here
   147 00000000 <res 35h>           <1>     .MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
   148 00000035 ????????????????    <1>     .partitionOffset        dq ?  ;in sectors, 0 means ignore this field
   149 0000003D ????????????????    <1>     .volumeLength           dq ?  ;Volume Length in sectors
   150 00000045 ????????            <1>     .FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
   151 00000049 ????????            <1>     .FATlength              dd ?  ;FAT length, in sectors
   152 0000004D ????????            <1>     .clusterHeapOffset      dd ?  ;Start of data area, in sectors
   153 00000051 ????????            <1>     .clusterCount           dd ?  ;Number of clusters on medium
   154 00000055 ????????            <1>     .firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
   155 00000059 ????????            <1>     .volumeSerialNum        dd ?  ;Volume Serial Number
   156 0000005D ????                <1>     .FSrevision             dw ?  ;Should be 0001 (v1.00)
   157 0000005F ????                <1>     .volumeFlags            dw ?  ;Volume Flags, refer to documentation
   158 00000061 ??                  <1>     .bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
   159 00000062 ??                  <1>     .sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
   160 00000063 ??                  <1>     .numberOfFATs           db ?  ;Number of FATs, only 1 or 2
   161 00000064 ??                  <1>     .driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
   162 00000065 ??                  <1>     .percentInUse           db ?  ;Rounded down. FFh means unknown
   163 00000066 ??????????????      <1>     .reserved               db 7 dup (?)  ;Reserved for alignment
   164                              <1> 
   165                              <1> endstruc
     7                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;File/path length equates.
     8                              <1> MAX_FNAME_FCB   equ 8
     9                              <1> MAX_EXT_FCB     equ 3
    10                              <1> MAX_NAME_FCB    equ MAX_FNAME_FCB + MAX_EXT_FCB
    11                              <1> MAX_NAME_FCBZ   equ MAX_NAME_FCB + 1    ;Space for a null terminator
    12                              <1> ;Values below include the null terminator.
    13                              <1> MAX_FILE    equ 13  ;Maximum length of a filename (includes dot)
    14                              <1> MAX_DRIVE   equ 3   ;Maximum length of a drive string (X:<NUL>)
    15                              <1> MAX_FSPEC   equ 64  ;Maximum length of a path to a file (filespec)
    16                              <1> MAX_PATH    equ 67  ;Maximum length of a fully qualified pathspec
    17                              <1> ;MAX_PATH is X:\<string, maxlen 63 chars>,<null> so 67 chars total.
    18                              <1> ;Use this symbol to check the length of a filename after qualification.
    19                              <1> MAX_PSPEC   equ MAX_PATH - MAX_FILE - 1 ;54 bytes
    20                              <1> ;MAX_PSPEC is the max length of a path with space for a filename!
    21                              <1> ;Remember, filenames for us are just a string of, at most, 13 characters,
    22                              <1> ; which we always resolve into FCB format. Buffers need to make space for
    23                              <1> ; both the dot and terminating null
    24                              <1> ;------------------------------------------------------------------------;
    25                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
    26                              <1> ; its file system structure. This is used to locate files and structures
    27                              <1> ; on the device itself and to translate file requests to cluster chains
    28                              <1> ; to LBAs to pass to the disk driver..
    29                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    30                              <1> ; drivers Initialise routine has been called.
    31                              <1> ;------------------------------------------------------------------------;
    32                              <1> struc dpb        ;Drive Parameter Block
    33                              <1> 
    34 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    35 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    36 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    37 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    38 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    39 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    40 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    41 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    42 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    43 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    44 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    45 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    46                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    47 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    48 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    49 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    50 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    51 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    52 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    53                              <1> 
    54                              <1> endstruc
    55                              <1> 
    56                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    57                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    58                              <1> ;------------------------------------------------------------------------;
    59                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    60                              <1> ; All disk pathing requests go via the CDS for that drive.
    61                              <1> ; The default drive is the last accessed drive, this number is stored
    62                              <1> ; in the DOS data area.
    63                              <1> ; The CDS is stored as an array with the offset into the array being 
    64                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    65                              <1> ;
    66                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    67                              <1> ;------------------------------------------------------------------------;
    68                              <1> struc cds       ;Current Directory structure
    69 00000000 <res 43h>           <1>     .sCurrentPath        db MAX_PATH dup (?)    ;Current Directory Path String
    70 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    71 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    72 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    73 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    74 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    75 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    76                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    77                              <1> ; another, we save the number of chars to skip to that deep level).
    78                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    79                              <1> ; Only affects for SUBST drives, not JOIN
    80                              <1> ; Flags: Bit 15 set = Network drive
    81                              <1> ;        Bit 14 set = Physical drive
    82                              <1> ;        Bit 13 set = JOIN'ed drive
    83                              <1> ;        Bit 12 set = SUBST'ed drive
    84                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    85                              <1> endstruc
    86                              <1> ;CDS equates
    87                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    88                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    89                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    90                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    91                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    92                              <1> ;------------------------------------------------------------------------;
    93                              <1> ; The SFT is a way to allow applications to open file handles to files 
    94                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    95                              <1> ; under the first header, and then a second header will be linked to the 
    96                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    97                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    98                              <1> ; using the FCBS= command. Default FCBS=5.
    99                              <1> ;
   100                              <1> ; A file handle describes the file, and the location within the file that
   101                              <1> ; we are reading. The file handle can be manipulated without the file
   102                              <1> ; being in memory, thus allowing the user to access data without needing 
   103                              <1> ; to take up large portions of memory. Similarly, file handles allow for
   104                              <1> ; accessing devices, by treating them as files with their drivers 
   105                              <1> ; responding and translating the manipulations of the file handle itself.
   106                              <1> ; Neither the driver nor the application should see or use the SFT for
   107                              <1> ; the handle, as it is subject to change (and will change when file 
   108                              <1> ; sharing provisions are included). The DOS will make requests to the 
   109                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
   110                              <1> ; track of the information in the SFT entry for that handle. 
   111                              <1> ;
   112                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
   113                              <1> ; can point to the same file. It all depends on what the applications 
   114                              <1> ; want to do with the File.
   115                              <1> ;
   116                              <1> ; !!!!IMPORTANT!!!!
   117                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   118                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   119                              <1> ;
   120                              <1> ;Each SFT may look like this:
   121                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   122                              <1> ;            |                |
   123                              <1> ;       wNumFiles*sft    wNumFiles*sft
   124                              <1> ;
   125                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   126                              <1> ; System FCBs.
   127                              <1> ;
   128                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   129                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   130                              <1> ;
   131                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   132                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   133                              <1> ;------------------------------------------------------------------------;
   134                              <1> struc sfth   ;System file table header
   135                              <1> ; This is the SFT header.
   136                              <1> ; This structure comes before the start of the first file in the array/table.
   137 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   138 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   139                              <1> endstruc
   140                              <1> 
   141                              <1> struc sft
   142                              <1> ;This is the file struc itself
   143 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   144 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   145 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   146 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   147 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   148 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   149 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   150 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   151 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   152 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   153 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   154 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   155 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   156 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   157 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   158 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   159 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   160 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   161 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   162                              <1> ;                           0 means no record
   163                              <1> endstruc
   164                              <1> ;Open Mode equates
   165                              <1> ;Access modes   Bits[2:0]
   166                              <1> openRdAcc   equ 0h
   167                              <1> openWrAcc   equ 1h
   168                              <1> openRWAcc   equ 2h
   169                              <1> ;Bit 3 reserved 0
   170                              <1> ;Sharing modes  Bits[6:4]
   171                              <1> openCompat      equ 0h  ;Deny all, compatibility mode
   172                              <1> openDenRWShr    equ 10h ;Deny all, explicity read/write
   173                              <1> openDenWrShr    equ 20h ;Deny writes
   174                              <1> openDenRdShr    equ 30h ;Deny reads
   175                              <1> openDenNoShr    equ 40h ;Don't deny anything!
   176                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   177                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   178                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   179                              <1> openNetFCBShr   equ 70h
   180                              <1> openNoInherit   equ 80h
   181                              <1> 
   182                              <1> ;Bits 8-12 reserved 0
   183                              <1> ;Fancy open mode bits, cannot be user set! Yet!
   184                              <1> openFailOnI24   equ 2000h   ;If set, automatically FAIL all Int 24h
   185                              <1> openFlushWrites equ 4000h   ;If set, commit after each write call.
   186                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   187                              <1> openSFTFCB      equ 8000h   ;If set, file is SFT-FCB.
   188                              <1> 
   189                              <1> ;Attribute Byte
   190                              <1> attrFileRO          equ 1h
   191                              <1> attrFileHidden      equ 2h
   192                              <1> attrFileSys         equ 4h
   193                              <1> attrFileVolLbl      equ 8h
   194                              <1> attrFileDir         equ 10h ;Directory entry
   195                              <1> attrFileArchive     equ 20h
   196                              <1> attrFileChar        equ 40h ;Reserved, never found in dir
   197                              <1> 
   198                              <1> ;Device Info word equates
   199                              <1> ;For a block device, bits [5:0] contain the drive number
   200                              <1> devCharConIn    equ 1h  ;If set, device is CON input
   201                              <1> devCharConOut   equ 2h  ;If set, device is CON output
   202                              <1> devCharNulDev   equ 4h  ;If set, device is NULL device
   203                              <1> devCharClkDev   equ 8h  ;If set, device is CLOCK device
   204                              <1> 
   205                              <1> devCharFastOut  equ 10h ;If set, device supports INT 29h
   206                              <1> devCharBinary   equ 20h ;If set, r/w char device in Binary mode
   207                              <1> devCharNotEOF   equ 40h ;If set, device not yet at end of file
   208                              <1> devDiskNoFlush  equ 40h ;Set if file is synchronised with hard store!
   209                              <1> devCharDev      equ 80h ;If set, it is a char device!
   210                              <1> 
   211                              <1> ;The below two cannot be user set! Yet!
   212                              <1> devDiskI24onFull   equ 100h    ;If set, trigger Int 24h on disk full
   213                              <1> devCharNetSpool equ 800h    ;If set, device is a network spooler
   214                              <1> 
   215                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   216                              <1> devCharNamePipe equ 2000h   ;If set, device is a named pipe
   217                              <1> devDiskNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   218                              <1> devRedir        equ 8000h   ;If set, dev/file is redirected!
   219                              <1> ;------------------------------------------------------------------------;
   220                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   221                              <1> ; to an internal buffer, and then copying it to the specified location
   222                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   223                              <1> ; another request for the same sector from the same device is made, so 
   224                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   225                              <1> ; size, selected according to the largest detected sector size during 
   226                              <1> ; the initial loadup.
   227                              <1> ;
   228                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   229                              <1> ;
   230                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> 
   233                              <1> struc bufferHdr
   234 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   235                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   236 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   237 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   238 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   239 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   240 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   241 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   242 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   243                              <1>     .dataarea:             ;Points to the start of the data area
   244                              <1> endstruc
   245                              <1> ;Buffer Flag equates
   246                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   247                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   248                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   249                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   250                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   251                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   252                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   253                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   254                              <1> ;------------------------------------------------------------------------;
   255                              <1> ; Memory control block for each memory arena
   256                              <1> ;------------------------------------------------------------------------;
   257                              <1> struc mcb
   258 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   259 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   260 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   261                              <1>     ;The following byte is reserved outside of sysinit
   262 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   263 0000000E ????                <1>     .reserved   db 2 dup (?) 
   264                              <1>     .program:
   265                              <1> endstruc
   266                              <1> ;MCB equates
   267                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   268                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   269                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   270                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   271                              <1> mcbMarkCtn      equ "M"
   272                              <1> mcbMarkEnd      equ "Z"
   273                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   274                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   275                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   276                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   277                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   278                              <1> mcbSubIFS       equ "I" ;Unused for now
   279                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   280                              <1> mcbSubFCBS      equ "X" ;Unused for now
   281                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   282                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   283                              <1> mcbSubStacks    equ "S" ;Unused for now
   284                              <1> 
   285                              <1> 
   286                              <1> memFirstFit     equ 0   ;First free block goes to application
   287                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   288                              <1> memLastFit      equ 2   ;Last free block goes to application
   289                              <1> 
   290                              <1> ;Owner = Para aligned address => Owning application PSP
   291                              <1> ;...To consider...
   292                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   293                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   294                              <1> ;------------------------------------------------------------------------;
   295                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   296                              <1> ; following order, thus allowing for return values to be placed in the 
   297                              <1> ; registers by accessing the caller register stack frame.
   298                              <1> ;------------------------------------------------------------------------;
   299                              <1> struc callerFrame
   300 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   301 00000008 ????????????????    <1>     .rbx    dq ?    
   302 00000010 ????????????????    <1>     .rcx    dq ?
   303 00000018 ????????????????    <1>     .rdx    dq ?
   304 00000020 ????????????????    <1>     .rsi    dq ?
   305 00000028 ????????????????    <1>     .rdi    dq ?
   306 00000030 ????????????????    <1>     .rbp    dq ?
   307 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   308 00000040 ????????????????    <1>     .r9     dq ?
   309                              <1> ;Pushed by Processor when invoked via Interrupt
   310 00000048 ????????????????    <1>     .rip    dq ?
   311 00000050 ????????????????    <1>     .cs     dq ?
   312 00000058 ????????????????    <1>     .flags  dq ?
   313                              <1> endstruc
   314                              <1> 
   315                              <1> struc dpl
   316                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   317                              <1> ; server calls
   318 00000000 ????????????????    <1>     .rax    dq ?
   319 00000008 ????????????????    <1>     .rbx    dq ?
   320 00000010 ????????????????    <1>     .rcx    dq ?
   321 00000018 ????????????????    <1>     .rdx    dq ?
   322 00000020 ????????????????    <1>     .rsi    dq ?
   323 00000028 ????????????????    <1>     .rdi    dq ?
   324 00000030 ????????????????    <1>     .r8     dq ?
   325 00000038 ????????????????    <1>     .r9     dq ?
   326 00000040 ????????????????    <1>     .align  dq ?
   327 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   328 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   329                              <1> endstruc
   330                              <1> 
   331                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   332 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   333 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   334 00000010 ????????????????    <1>     .newSFTVal      dq ?
   335 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   336 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   337 00000028 ????????????????    <1>     .newLastdrive   dq ?
   338 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   339 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   340 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   341 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   342 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   343 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   344 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   345                              <1> endstruc
   346                              <1> 
   347                              <1> struc filename
   348                              <1> ;8.3 File name struct
   349 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   350 00000008 ??????              <1>     .fExt   db 3 dup (?)
   351                              <1> endstruc
   352                              <1> 
   353                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   354 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   355 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   356 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   357 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   358 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   359 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   360 00000016 ????                <1>     .fileTime   dw ?  ;File time
   361 00000018 ????                <1>     .fileDate   dw ?  ;File date
   362 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   363 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   364                              <1> endstruc
   365                              <1> 
   366                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   367                              <1> struc psp
   368 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   369 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   370 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   371 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   372 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   373 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   374 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   375                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   376                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   377                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   378                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   379                              <1> ; always used and jftSize.
   380                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   381 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   382 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   383 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   384 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   385 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   386 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   387 0000005B ??                  <1>                 db ?  ;Reserved byte
   388                              <1> ;The below are in the same place as in DOS.
   389                              <1>     .cmdLineArgPtr: ;Symbol for future use
   390 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   391 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   392                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   393 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   394 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   395                              <1> endstruc
   396                              <1> 
   397                              <1> struc clkStruc
   398 00000000 ????                <1>     .dateWord   dw ?
   399 00000002 ??                  <1>     .minutes    db ?
   400 00000003 ??                  <1>     .hours      db ?
   401 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   402 00000005 ??                  <1>     .seconds    db ?
   403                              <1> endstruc
   404                              <1> 
   405                              <1> 
   406                              <1> struc extCtryStruc
   407 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   408 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   409 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   410 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   411 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   412                              <1>                         ;0 = month day year hh:mm:ss
   413                              <1>                         ;1 = day month year hh:mm:ss
   414                              <1>                         ;2 = year month day hh:mm:ss
   415 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   416 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   417 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   418 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   419 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   420 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   421                              <1>                         ;0 = Symbol leads, without space
   422                              <1>                         ;1 = Symbol follows, without space
   423                              <1>                         ;2 = Symbol leads, one space
   424                              <1>                         ;3 = Symbol follows, one space
   425                              <1>                         ;4 = Symbol replace decimal separator
   426 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   427 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   428 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   429 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   430 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   431                              <1> endstruc
   432                              <1> 
   433                              <1> struc countryStruc
   434 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   435                              <1>                         ;0 = month day year hh:mm:ss
   436                              <1>                         ;1 = day month year hh:mm:ss
   437                              <1>                         ;2 = year month day hh:mm:ss
   438 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   439 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   440 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   441 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   442 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   443 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   444                              <1>                         ;0 = Symbol leads, without space
   445                              <1>                         ;1 = Symbol follows, without space
   446                              <1>                         ;2 = Symbol leads, one space
   447                              <1>                         ;3 = Symbol follows, one space
   448                              <1>                         ;4 = Symbol replace decimal separator
   449 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   450 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   451 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   452 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   453 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   454                              <1> endstruc
   455                              <1> 
   456                              <1> ;Critical Error AH bitfield equates
   457                              <1> critRead    equ 0h
   458                              <1> critWrite   equ 1h
   459                              <1> critDOS     equ 0h
   460                              <1> critFAT     equ 2h
   461                              <1> critDir     equ 4h
   462                              <1> critData    equ 6h
   463                              <1> critFailOK  equ 8h
   464                              <1> critRetryOK equ 10h
   465                              <1> critIgnorOK equ 20h
   466                              <1> critCharDev equ 80h
   467                              <1> 
   468                              <1> critIgnore  equ 0
   469                              <1> critRetry   equ 1
   470                              <1> critAbort   equ 2
   471                              <1> critFail    equ 3
   472                              <1> 
   473                              <1> ;MISC ASCII control chars
   474                              <1> NUL equ 00h ;^@         | ASCII Null
   475                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   476                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   477                              <1> BEL equ 07h ;^G         | ASCII Bell
   478                              <1> BSP equ 08h ;^H         | ASCII Backspace
   479                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   480                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   481                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   482                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   483                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   484                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   485                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   486                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   487                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   488                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   489                              <1> SPC equ 20h ;Printable  | ASCII Space
   490                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   491                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   492                              <1> 
   493                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   494                              <1> ;Extended Ascii Codes
   495                              <1> eF1     equ 3Bh ;F1 second byte
   496                              <1> eF2     equ 3Ch ;F2 second byte
   497                              <1> eF3     equ 3Dh ;F3 second byte
   498                              <1> eF4     equ 3Eh ;F4 second byte
   499                              <1> eF5     equ 3Fh ;F5 second byte
   500                              <1> eF6     equ 40h ;F6 second byte
   501                              <1> eF7     equ 41h ;F7 second byte
   502                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   503                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   504                              <1> eIns    equ 52h ;Insert second byte
   505                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   506                              <1> 
   507                              <1> ;Default Configuration for the system
   508                              <1> 
   509                              <1> buffersDefault  equ 30
   510                              <1> filesDefault    equ 20
   511                              <1> fcbsDefault     equ 4
   512                              <1> safeFcbsDeflt   equ 0
   513                              <1> lastDriveDeflt  equ 5   
   514                              <1> 
   515                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   516                              <1> ; then the char has this property.
   517                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   518                              <1> termChar    equ 2   ;Terminator char type
   519                              <1> sepChar     equ 4   ;Separator char type
   520                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> errDskFul   equ 38  ;Disk full error!
    46                              <1> 
    47                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    48                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    49                              <1> 
    50                              <1> errFilExist equ 80  ;File already exists
    51                              <1> errDirExist equ 82  ;Directory already exists
    52                              <1> errFI24     equ 83  ;Fail on Int 24h
    53                              <1> errRedir    equ 84  ;Too many levels of redirection
    54                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    55                              <1> errBadPass  equ 86  ;Bad password
    56                              <1> errBadParam equ 87  ;Bad parameter passed to request
    57                              <1> errNetWrite equ 88  ;Network Write Fault
    58                              <1> ;-----------------------------------------------------------------------------
    59                              <1> ;Error Loci
    60                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    61                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    62                              <1> eLocNet     equ 3   ;Network related issues
    63                              <1> eLocChr     equ 4   ;Serial/Character Device error
    64                              <1> eLocMem     equ 5   ;Related to RAM
    65                              <1> ;-----------------------------------------------------------------------------
    66                              <1> ;Error Actions
    67                              <1> eActRet     equ 1   ;Retry
    68                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    69                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    70                              <1> eActAbt     equ 4   ;Abort with cleanup
    71                              <1> eActKil     equ 5   ;Abort without cleanup
    72                              <1> eActIgn     equ 6   ;Ignore error
    73                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    74                              <1> ;-----------------------------------------------------------------------------
    75                              <1> ;Error classes
    76                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    77                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    78                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    79                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    80                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    81                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    82                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    83                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    84                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    85                              <1> eClsLocked  equ 10  ;Resource Locked
    86                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    87                              <1> eClsClash   equ 12  ;Resource already exists!
    88                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  %include "./src/Kernel/Debug/debSym.inc"    ;Always define debug symbols!
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> ;Switch the DEBUG to false in production!
     7                              <1> %define DEBUG false
     8                              <1> %define DPBINFO false
     9                              <1> %define REGS false
    10                              <1> %define ENDSTATUS false
    11                              <1> 
    12                              <1> 
    13                              <1> ;Use this space as the debug stack
    14                              <1> %define debStackTop 80000h
    12                                  
    13                                  ;========================START OF DOS MODULE=========================
    14                                  %include "./src/Kernel/dos.inc"
     1                              <1> ;DOS globals
     2                              <1> 
     3                              <1> ; DOS variables for reloc computations in sysinit
     4                              <1> GLOBAL dSegLen  ;Exported for calculations with dosSeg
     5                              <1> 
     6                              <1> ; DOS DATA AREA variables
     7                              <1> GLOBAL nulDevHdr
     8                              <1> GLOBAL anchorMcb
     9                              <1> GLOBAL dayOfMonth
    10                              <1> GLOBAL monthOfYear
    11                              <1> GLOBAL vConPtr
    12                              <1> GLOBAL clockPtr
    13                              <1> GLOBAL currentPSP
    14                              <1> GLOBAL editKeys
    15                              <1> GLOBAL shareCount
    16                              <1> GLOBAL shareDelay
    17                              <1> GLOBAL caseMapFunc
    18                              <1> GLOBAL charTableArray
    19                              <1> GLOBAL charTableArray.ucTable
    20                              <1> GLOBAL charTableArray.filenameUCTable
    21                              <1> GLOBAL charTableArray.filenameTerminatingTable
    22                              <1> GLOBAL charTableArray.collatingTable
    23                              <1> GLOBAL charTableArray.dbcsTable
    24                              <1> GLOBAL serverDispTbl
    25                              <1> GLOBAL machineName
    26                              <1> GLOBAL critPtchTbl
    27                              <1> GLOBAL dosCrit1Enter
    28                              <1> GLOBAL dosCrit1Exit
    29                              <1> GLOBAL dosCrit2Enter
    30                              <1> GLOBAL dosCrit2Exit
    31                              <1> GLOBAL dosMgrHooks
    32                              <1> GLOBAL dllHooks
    33                              <1> GLOBAL shareHooks
    34                              <1> GLOBAL goodDfltShareHook
    35                              <1> GLOBAL badDfltShareHook
    36                              <1> GLOBAL dosBIOSName
    37                              <1> GLOBAL biosVers
    38                              <1> GLOBAL biosPtr
    39                              <1> GLOBAL bootDrive
    40                              <1> GLOBAL numFiles
    41                              <1> GLOBAL lastdrvNum
    42                              <1> GLOBAL firstSftHeader
    43                              <1> GLOBAL mcbChainPtr
    44                              <1> GLOBAL vConPtr
    45                              <1> GLOBAL clockPtr
    46                              <1> GLOBAL extKeyFunc
    47                              <1> GLOBAL errorDrv
    48                              <1> GLOBAL currentNdx
    49                              <1> GLOBAL switchChar
    50                              <1> GLOBAL ctryTbl
    51                              <1> GLOBAL serverDispTblPtr
    52                              <1> GLOBAL currentDTA
    53                              <1> GLOBAL cdsHeadPtr
    54                              <1> GLOBAL dpbHeadPtr
    55                              <1> GLOBAL maxBytesSec
    56                              <1> GLOBAL bufHeadPtr
    57                              <1> GLOBAL sftHeadPtr
    58                              <1> GLOBAL numBuffers
    59                              <1> GLOBAL fcbsHeadPtr
    60                              <1> GLOBAL numPhysVol
    61                              <1> 
    62                              <1> GLOBAL i0
    63                              <1> GLOBAL i1
    64                              <1> GLOBAL i2
    65                              <1> GLOBAL i3
    66                              <1> GLOBAL i4
    67                              <1> GLOBAL i5
    68                              <1> GLOBAL i6
    69                              <1> GLOBAL i7
    70                              <1> GLOBAL i8
    71                              <1> GLOBAL i9
    72                              <1> GLOBAL i10
    73                              <1> GLOBAL i11
    74                              <1> GLOBAL i12
    75                              <1> GLOBAL i13
    76                              <1> GLOBAL i14
    77                              <1> GLOBAL i15
    78                              <1> GLOBAL i16
    79                              <1> GLOBAL i17
    80                              <1> GLOBAL i18
    81                              <1> GLOBAL i19
    82                              <1> GLOBAL i20
    83                              <1> GLOBAL i21
    84                              <1> 
    85                              <1> GLOBAL terminateProcess 
    86                              <1> GLOBAL functionDispatch 
    87                              <1> GLOBAL defaultIretq
    88                              <1> GLOBAL dosDefCritErrHdlr    
    89                              <1> GLOBAL absDiskRead      
    90                              <1> GLOBAL absDiskWrite     
    91                              <1> GLOBAL terminateRes     
    92                              <1> GLOBAL multiplexHdlr
    93                              <1> GLOBAL nulStrat
    94                              <1> GLOBAL nulIntr
    15                                  
    16                                  Segment dBSS bss private align=1
    17                                  ;---------------------------
    18                                  ;   DOS BSS data segment
    19                                  ;---------------------------
    20                                  %include "./src/Kernel/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2 00000000 <res 10h>           <1>     anchorMcb   db mcb_size dup (?) ;This is space for the anchor MCB
     3                              <1> dosDataArea:    ;The returned pointer points to the variables w/o anchor MCB
     4 00000010 ??                  <1>     bootDrive   db ?    ;The logical drive we booted from
     5 00000011 ????????            <1>     biosVers    dd ?    ;Indicates BIOS type. Each OEM picks a number
     6 00000015 ????????????????    <1>     biosPtr     dq ?    ;For saving a data ptr to be used by BIOS/drivers
     7                              <1> ;Above is the system stats
     8                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM validNetNam TO NUMJOINDRV
     9                              <1> ;Both below variables can be edited with Int 21h AX=440Bh
    10 0000001D ????                <1>     validNetNam dw ?    ;Flag if machinename valid, deflt no=0
    11 0000001F ????                <1>     shareCount  dw ?    ;Share Retry Count, number of repeats before fail.
    12 00000021 ????                <1>     shareDelay  dw ?    ;Share Delay, in multiples of ms. (TEMP, just loop)
    13 00000023 ????????????????    <1>                 dq ?    ;Unused ptr for future, current disk buffer
    14 0000002B ????????????????    <1>     vConHdlOff  dq ?    ;Ptr into buff to the next char to process in hdl req
    15                              <1>     ;   A value of 0 means no chars buffered.
    16 00000033 ????????????????    <1>     mcbChainPtr dq ?    ;Pointer to the MCB chain x
    17                              <1> sysVarsPtr:
    18 0000003B ????????????????    <1>     dpbHeadPtr  dq ?    ;Pointer to the first DPB in the DPB chain x
    19 00000043 ????????????????    <1>     sftHeadPtr  dq ?    ;Pointer to the first SFT header in SFT chain
    20 0000004B ????????????????    <1>     clockPtr    dq ?    ;Pointer to the current active CLOCK$ device header x
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000053 ????????????????    <1>     vConPtr     dq ?    ;Ptr to the devdrv of the char dev controlling vCon x
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000005B ????                <1>     maxBytesSec dw ?    ;Maximum number of bytes per sector (size of buffers)x
    25 0000005D ????????????????    <1>     bufHeadPtr  dq ?    ;Pointer to the head of the disk buffer chain x
    26 00000065 ????????????????    <1>     cdsHeadPtr  dq ?    ;Pointer to the head of the CDS array x
    27 0000006D ????????????????    <1>     fcbsHeadPtr dq ?    ;Pointer to the head of the System FCB chain
    28 00000075 ????                <1>     numSafeSFCB dw ?    ;Number of protected FCBs (y in FCBS=x,y)
    29 00000077 ??                  <1>     numPhysVol  db ?    ;Number of physical volumes in the system x
    30 00000078 ??                  <1>     lastdrvNum  db ?    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    31 00000079 ??                  <1>     numBuffers  db ?    ;Buffers=30 default
    32 0000007A <res 22h>           <1>     nulDevHdr   db drvHdr_size dup (?)
    33 0000009C ??                  <1>     numJoinDrv  db ?    ;Number of Joined Drives
    34                              <1> ;Additional internal variables
    35 0000009D ??                  <1>     numFiles    db ?    ;FILES=5 default, max 255
    36                              <1>     ;DOSMGR hook functions and variable here
    37                              <1>     ;All DOSMGR hooks are 8 byte pointers and have been introduced to allow
    38                              <1>     ; an external application to install itself as a multitasker into the
    39                              <1>     ; DOS kernel. DOS's behaviour changes accordingly when a multitasker 
    40                              <1>     ; is installed. It is recommended that a multitasker NOT be installed
    41                              <1>     ; when a file sharing broker is not installed but that is up to the 
    42                              <1>     ; implementer to decide.  
    43                              <1>     ;Three function hooks are provided. NOTE, all functions must preserve
    44                              <1>     ; ALL registers used.
    45                              <1>     ;
    46                              <1>     ;launchTask:
    47                              <1>     ;This allows for a multitasker to install its handling routine for 
    48                              <1>     ; launching tasks. Note this is called after all setup
    49                              <1>     ; for the EXE has been done except for setting the PSP.
    50                              <1>     ; If the mode bSuFunc = 4, then we have we have the following:
    51                              <1>     ;       ecx = mode of termination
    52                              <1>     ;           = 00 -> Upon terminating, leave task in Zombie mode
    53                              <1>     ;                   awaiting for a task to read it's return code
    54                              <1>     ;           = 01 -> Upon terminating, discard all resources allocated
    55                              <1>     ;                   to the task.
    56                              <1>     ;           > 01 -> Error code, unknown function (01h).
    57                              <1>     ;This function must return to the caller via DOS with CF=CY if an error 
    58                              <1>     ;   and eax = Error code or CF=NC if all ok. DOS will then return to
    59                              <1>     ;   the parent task, with the background task hopefully scheduled to run
    60                              <1>     ;   in the DOSMGR.
    61                              <1>     ;Either before or on initial run, DOSMGR must set currentDTA in a bgTasks'
    62                              <1>     ; SDA to psp+80h. This can be done in launchBgTask.
    63                              <1>     ;
    64                              <1>     ;terminateTask:
    65                              <1>     ;This allows for a multitasker to install its handling routine for
    66                              <1>     ; cleaning up resources allocated to a task. 
    67                              <1>     ;
    68                              <1>     ;Specific function definitions:
    69                              <1>     ;
    70                              <1>     ;If we enter
    71                              <1>     ;   Input:  bx = FCB drive statuses
    72                              <1>     ;           ecx = Termination mode setting
    73                              <1>     ;           rsi = RSP value to start with
    74                              <1>     ;           rbp = execFrame. Use this to get parentPSP data et al.
    75                              <1>     ;           qword [rbp - execFrame.pProgEP] = RIP value to launch from
    76                              <1>     ;   Output: CF=NC -> Proceed with launch of bg task
    77                              <1>     ;           CF=CY -> Error exit, errorcode in eax
    78                              <1> dosMgrHooks:
    79 0000009E ??                  <1>     dosMgrPresent   db ?    ;Clear if no mgr, else set to -1
    80 0000009F ????????????????    <1>     launchTask      dq ?    ;Registers a new task, with specifics based on bSubfunc
    81 000000A7 ????????????????    <1>     terminateTask   dq ?    ;Called to tell the MGR that this task is ending
    82                              <1> 
    83                              <1>     ;DLL Manager hook functions here
    84                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    85                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    86                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    87                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    88                              <1>     ; and from within EXIT. 
    89                              <1>     ;
    90                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    91                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    92                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    93                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    94                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    95                              <1>     ; there is already an overlay there, to remove it's functions from the 
    96                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    97                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    98                              <1>     ; on EXIT, they can be removed from the registry. 
    99                              <1>     ;
   100                              <1>     ;In EXIT, the PSP of the ending task must be taken
   101                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
   102                              <1>     ; is a .COM file or an .EXE with no exports.
   103                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
   104                              <1>     ; it must return CF=CY.
   105                              <1> dllHooks:
   106 000000AF ????????????????    <1>     registerDLL     dq ?  ;Entered with rbp = execFrame
   107 000000B7 ????????????????    <1>     unloadDLLHook   dq ?  ;
   108                              <1> 
   109                              <1>     ;Share hook functions here
   110                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
   111                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
   112                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
   113                              <1> shareHooks:
   114 000000BF ????????????????    <1>     markerShare         dq ?  ;Marker Share hook
   115 000000C7 ????????????????    <1>     openShare           dq ?  ;Share called on open. 
   116 000000CF ????????????????    <1>     closeShare          dq ?  ;Share called on close.
   117 000000D7 ????????????????    <1>     closeCompShare      dq ?  ;Share to close all files for a machine.
   118 000000DF ????????????????    <1>     closeTaskShare      dq ?  ;Share to close all files for a task.
   119 000000E7 ????????????????    <1>     closeNameShare      dq ?  ;Share to close file by name.
   120 000000EF ????????????????    <1>     lockFileShare       dq ?  ;Share to lock file region.
   121 000000F7 ????????????????    <1>     unlockFileShare     dq ?  ;Share to unlock file region.
   122 000000FF ????????????????    <1>     checkFileLockShare  dq ?  ;Share to check file region locked.
   123 00000107 ????????????????    <1>     openFileListShare   dq ?  ;Share to get open file list entry.
   124 0000010F ????????????????    <1>     updateFCBfromSFTShr dq ?  ;Share to update FCB from the SFT.    UNUSED
   125 00000117 ????????????????    <1>     fstClstOfFCBShare   dq ?  ;Share to get first cluster of FCB.   UNUSED
   126 0000011F ????????????????    <1>     closeDupFileShare   dq ?  ;Share to close file if dup for proc.
   127 00000127 ????????????????    <1>     closeNewHdlShare    dq ?  ;Share to close hdls of rec opened file.
   128 0000012F ????????????????    <1>     updateDirShare      dq ?  ;Share to update dir info in SFT. 
   129                              <1> 
   130                              <1> ;Create SFT header and corresponding array of five default sft entries
   131 00000137 <res Ah>            <1>     firstSftHeader  db sfth_size dup (?)
   132 00000141 <res 4Fh>           <1>     firstSft        db sft_size dup (?)
   133 00000190 <res 4Fh>           <1>     secondSft       db sft_size dup (?)
   134 000001DF <res 4Fh>           <1>     thirdSft        db sft_size dup (?)
   135 0000022E <res 4Fh>           <1>     fourthSft       db sft_size dup (?)
   136 0000027D <res 4Fh>           <1>     fifthSft        db sft_size dup (?)
   137                              <1> 
   138                              <1> ;Virtual CONsole Buffers
   139 000002CC ??                  <1>     vConCursPos db ?     ;Keeps track for tabs stops (and var with 7)
   140                              <1>     ;Only incremented when CON device runs vCon
   141                              <1> vConBuf:    ;Proper buffer symbol
   142 000002CD ??                  <1>     vConCurCnt  db ?     ;Current count of chars in vConBuffer
   143 000002CE <res 80h>           <1>     vConBuffer  db 128 dup (?)   ;General Buffer for vCon 256 bytes. 
   144                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   145 0000034E <res 80h>           <1>     vConInBuf   db 128 dup (?)   ;vConsole buffer for reads ONLY
   146 000003CE ??                  <1>                 db ?     ;Padding Buffer!
   147                              <1> 
   148 000003CF ??                  <1>     printEcho   db ?  ;If 0, no echo. Non-zero => Echo to PRN
   149 000003D0 ??                  <1>     verifyFlag  db ?  ;If set, writes are replaces with write/verify x
   150 000003D1 ??                  <1>     switchChar  db ?  ;Editable by 21h/37h. Set to / by default
   151 000003D2 ??                  <1>     vConErr     db ?  ;Inc on each char output call
   152                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   153                              <1> 
   154 000003D3 ??                  <1>     allocStrat  db ?  ;Allocation strategy. First, Best or Last fit
   155                              <1> ;Server stuff. Default to all zeros (blank)
   156 000003D4 ??                  <1>     shareFlag   db ?  ;Sharing flag, set to 0 for now (future expansion)
   157                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   158 000003D5 ??                  <1>     serverCnt   db ?  ;Increments on each 21h/5E01h call
   159 000003D6 <res 10h>           <1>     machineName db 16 dup (?) ;Machine name (Set via 21h/5E01h) (set to SPC)    
   160                              <1> ;Swappable Data Area
   161 000003E6 <res 20h>           <1>     critPtchTbl dq 4 dup (?)  ;Offsets from DosDataArea addr to the 4 funcs
   162 00000406 ??                  <1>                 db ?  ;Alignment byte
   163                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   164 00000407 ??                  <1>     critErrFlag db ?  ;Critical error flag, set on entry to Int 24h x
   165 00000408 ??                  <1>     inDOS       db ?  ;Inc on each DOS call, dec when leaving x
   166 00000409 ??                  <1>     errorDrv    db ?  ;Drive on which error occured or FFh x
   167 0000040A ??                  <1>     errorLocus  db ?  ;Where the error took place  
   168 0000040B ????                <1>     errorExCde  dw ?  ;Extended Error Code
   169 0000040D ??                  <1>     errorAction db ?  ;Suggested action for error  
   170 0000040E ??                  <1>     errorClass  db ?  ;Error Class
   171 0000040F ????????????????    <1>     errorVolLbl dq ?    ;Sets a ptr to the volume label of the error disk
   172 00000417 ????????????????    <1>     currentDTA  dq ?  ;Address of the current DTA x
   173 0000041F ????????????????    <1>     currentPSP  dq ?  ;Address of current PSP x
   174                              <1> 
   175 00000427 ????????????????    <1>     xInt23hRSP  dq ?  ;Saves RSP across an Int 23h call
   176 0000042F ????                <1>     errorLevel  dw ?  ;Last return code returned by Int 21h/4Ch x
   177                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 21h/31h
   178                              <1>     ;Lower byte: User Specified
   179 00000431 ??                  <1>     currentDrv  db ?  ;Default drive x
   180 00000432 ??                  <1>     breakFlag   db ?  ;If set, check for CTRL+C on all DOS calls x
   181                              <1> ;SDA, needs to be replaced between processes
   182                              <1> sdaDOSSwap:
   183 00000433 ????????????????    <1>     oldRAX      dq ?  ;Store rax on entering Int21h or returning Int 23h
   184 0000043B ????????????????    <1>     serverPSP   dq ?  ;PSP of prog making server request, used by net & share
   185 00000443 ????                <1>     machineNum  dw ?  ;for sharing/networking 00h = default number (us)
   186 00000445 ????????????????    <1>     firstMCB    dq ?  ;First fit MCB for request
   187 0000044D ????????????????    <1>     bestMCB     dq ?  ;Best fit MCB for request
   188 00000455 ????????????????    <1>     lastMCB     dq ?  ;Last fit MCB for request
   189 0000045D ????                <1>     dirEntryNum dw ?  ;Offset into directory of entry we are looking for
   190 0000045F ??                  <1>     volIdFlag   db ?   ;If set, we are searching for a volume ID
   191 00000460 ????????????????    <1>     xInt24hRSP  dq ?  ;RSP across an Int 24h call
   192 00000468 ??                  <1>     Int24bitfld db ?  ;Copies the bit field given to the Int 24h handler
   193 00000469 ??                  <1>     fileDirFlag db ?  ;File/Directory flag. 0 = Dir, ¬0 = File
   194 0000046A ??                  <1>     Int24Fail   db ?  ;Set if Int 24h returned fail
   195                              <1> 
   196 0000046B ????????????????    <1>     oldoldRSP   dq ?  ;RSP at prev Int 21h entry if called from within Int 21h
   197 00000473 ????????????????    <1>     dosReturn   dq ?  ;Used as a var to return when juggling stack
   198 0000047B ????????????????    <1>     oldRSP      dq ?  ;RSP when entering Int 21h
   199 00000483 ????????????????    <1>     oldRBX      dq ?  ;Temp var to save value of rbx during an Int 21 call
   200 0000048B ??                  <1>     dirFlag     db ?  ;Directory Flag. 0 => Search for Dir, 1 => for File
   201                              <1> ;The below flag tells DOS to print ^C in the termination function
   202 0000048C ??                  <1>     ctrlCExit   db ?  ;-1 => CTRL+BREAK termination, 0 otherwise
   203 0000048D ??                  <1>     fcbSpaceOk  db ?  ;If set, we allow embedded spaces in the filenames
   204                              <1> ;Time stuff
   205                              <1> ;Read the below two as a word
   206 0000048E ??                  <1>     dayOfMonth  db ?  ;01h - 1Fh (1 - 31)
   207 0000048F ??                  <1>     monthOfYear db ?  ;01h - 0Ch (1 - 12)
   208 00000490 ??                  <1>     years       db ?  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   209 00000491 ????                <1>     daysOffset  dw ?  ;Days since 1-1-1980
   210 00000493 ??                  <1>     dayOfWeek   db ?  ;0 = Sunday <-> 6 = Saturday
   211                              <1> 
   212 00000494 ??                  <1>     vConDrvSwp  db ?  ;Set if vCon controlled by a different driver to vConPtr
   213 00000495 ??                  <1>     int28Flag   db ?  ;If set, Int 28h should be called, if clear no
   214 00000496 ??                  <1>     procExiting db ?  ;Set to -1 if in process termination
   215                              <1> ;A request routed through the FCB or handle uses primReqPkt for its main IO.
   216                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   217                              <1> ; without forcing to re-build the whole primary request block.
   218                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   219                              <1> ; with secondary char output going through the secondary header
   220                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   221                              <1> ; for output)
   222                              <1> ;ioReqPkt is the largest possible packet
   223 00000497 <res 2Ah>           <1>     secdReqPkt  db ioReqPkt_size dup (?) ;Secondary, Char IO Reqhdr
   224 000004C1 <res 2Ah>           <1>     primReqPkt  db ioReqPkt_size dup (?) ;Main Drv Reqhdr 
   225                              <1> altRet: ;Accessed as a qword
   226 000004EB <res 2Ah>           <1>     critReqPkt  db ioReqPkt_size dup (?)  ;Used for ^C detection!
   227 00000515 ??                  <1>     pspCopyFlg  db ?  ;Set to -1 for child process PSP, 0 for simple PSP copy
   228                              <1> ;Swappable Buffers
   229 00000516 ????????????        <1>     CLOCKrecrd  db 6 dup (?)  ;Clock driver record
   230                              <1>     ;We add an additional byte to save ah too
   231 0000051C ????                <1>     singleIObyt dw ?  ;For single IO byte buffers
   232                              <1> extErrByteBuf:  ;Used by DOS execpt hdlr to build strings. Immediate abort!
   233                              <1> exeHdrSpace:    ;This needs 112 bytes in EXEC only, buffer is free for use!
   234 0000051E <res 80h>           <1>     buffer1     db 2*MAX_FSPEC dup (?)  ;Space for max expanded MAX_FSPEC
   235                              <1> sectHdr:        ;This needs 20 bytes in EXEC only
   236 0000059E <res 80h>           <1>     buffer2     db 2*MAX_FSPEC dup (?) ;Space for a second path
   237 0000061E ????????????????    <1>     fname1Ptr   dq ?  ;Ptr to first filename argument
   238 00000626 ????????????????    <1>     fname2Ptr   dq ?  ;Ptr to second filename argument
   239 0000062E ??                  <1>     skipDisk    db ?  ;Set => Read Disk, Clear => Skip checking on disk
   240                              <1> ;Misc bookkeeping flags and vars
   241 0000062F <res 2Bh>           <1>     dosffblock  db ffBlock_size dup (?)  ;FF block (fullsize unlike DOS)
   242 0000065A <res 20h>           <1>     curDirCopy  db fatDirEntry_size dup (?)  ;Dir copy
   243 0000067A <res 5Fh>           <1>     tmpCDS      db cds_size dup (?)  ;For server calls that need a tmp CDS
   244                              <1> ;These two are used to expand filenames into FCB format. The extra char 
   245                              <1> ; is used to store the terminator of the portion (either a pathsep or null)
   246 000006D9 <res Ch>            <1>     fcbName     db MAX_NAME_FCBZ dup (?)
   247 000006E5 <res Ch>            <1>     wcdFcbName  db MAX_NAME_FCBZ dup (?)  ;Expands wildcards for rename
   248 000006F1 ????????????????    <1>     fileDirSect dq ?  ;File/Directory starting sector, for each level
   249 000006F9 ??                  <1>     volIncmpFCB db ?  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   250 000006FA ??                  <1>     extFCBAttr  db ?  ;Extended FCB file attribute
   251 000006FB ??                  <1>     extFCBFlag  db ?  ;Set to -1 if Extended FCB
   252 000006FC ??                  <1>     searchAttr  db ?  ;Directory Search attributes
   253 000006FD ??                  <1>     fileOpenMd  db ?  ;Open mode (compat, r/w/rw?)
   254                              <1> renSamePar:         ;Used in rename. Set if both paths have same parent dir
   255 000006FE ??                  <1>     fileFDflg   db ?  ;01h = File Found!, 04h = File deleted!
   256 000006FF ??                  <1>     badNameRen  db ?  ;Device name or File not found for rename
   257 00000700 ??                  <1>     rwFlag      db ?  ;00h=Read, 1=Write, read/write/share error reporting
   258 00000701 ??                  <1>     spliceFlag  db ?  ;00 = Relative path, !0 = Full path
   259 00000702 ??                  <1>     dosInvoke   db ?  ;0 = Invoked via Int 21h, -1 = Invoked via 21h/5D01h
   260                              <1> 
   261 00000703 ??                  <1>     vConInsert  db ?  ;Insert mode on 21/0ah (0 = not insert, !0 = insert)
   262 00000704 ??                  <1>     fileExist   db ?  ;-1 if file in pathspec exists (create/open)
   263 00000705 ??                  <1>     parDirExist db ?  ;-1 if parent directory for file exists (create/open)
   264 00000706 ??                  <1>     exitType    db ?  ;Forms the upper byte of the errorlvl
   265 00000707 ??                  <1>     openCreate  db ?  ;If open, set to 0, if Create set to -1
   266                              <1> ;Set to E5h for renaming and deletion. Can be set to 0 if *.* chosen
   267                              <1> ; to speed up the deletion but we don't use this (yet) as we would not 
   268                              <1> ; be releasing the FAT sectors of the remaining entries in the directory.
   269 00000708 ??                  <1>     delChar     db ?
   270 00000709 ??                  <1>     workingDrv  db ?  ;Working drive number, 0 based, from DPB
   271                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   272                              <1> workingDD:  ;Create a symbol for the working device driver too
   273 0000070A ????????????????    <1>     workingDPB  dq ?  ;Ptr to the DPB of the drive being accessed
   274 00000712 ????????????????    <1>     workingCDS  dq ?  ;Ptr to the CDS of the drive being accessed
   275 0000071A ????????????????    <1>     workingFCB  dq ?  ;Ptr to the caller FCB for FCB function
   276                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   277                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   278 00000722 ????????????????    <1>     workingSFT  dq ?  ;Temporary SFT (may not be not current) ptr being used
   279 0000072A ????????????????    <1>     curHdlPtr   dq ?  ;Ptr to JFT handle entry in current PSP
   280 00000732 ????????????????    <1>     currentSFT  dq ?  ;Ptr to the SFT of the file being accessed
   281 0000073A ????                <1>     currentNdx  dw ?  ;Used to access the current SFTNdx being opened/created
   282 0000073C ????                <1>     currentHdl  dw ?  ;The current file handle is saved here
   283 0000073E ????????????????    <1>     currBuff    dq ?  ;Ptr to the Current Buffer (hdr) being accessed
   284                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   285                              <1> ; and 32 byte offset into the sector for directory
   286 00000746 ????????????????    <1>     tempSect    dq ?  ;A scratch sector number
   287                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   288 0000074E ????                <1>     entry       dw ?  ;32 byte offset into a sector or #fats sectors/fat
   289                              <1> ;***************************************************|
   290                              <1> ; Needs to be set up before any file access         |
   291                              <1> ; These vars keep track of file access properties   |
   292                              <1> ;   and must be used only for such purposes.        |
   293                              <1> ;***************************************************|
   294 00000750 ????????            <1>     currClustF  dd ?  ;Relative cluster in file being r/w to/from
   295 00000754 ????????            <1>     currClustD  dd ?  ;Current Disk Cluster being r/w to/from
   296                              <1> 
   297 00000758 ????????            <1>     currSectF   dd ?  ;Current Sector in File being r/w to/from
   298 0000075C ??                  <1>     currSectC   db ?  ;Current Sector in Cluster being r/w to/from
   299 0000075D ????????????????    <1>     currSectD   dq ?  ;Current absolute Sector number on Disk
   300                              <1> 
   301 00000765 ????                <1>     currByteS   dw ?  ;Current Byte in sector being r/w to/from
   302 00000767 ????????            <1>     currByteF   dd ?  ;Current Byte in file being r/w to/from
   303                              <1> ;***************************************************|
   304 0000076B ????????            <1>     lastClust   dd ?  ;Number of the last (rel) cluster of the file
   305 0000076F ????????            <1>     lastClustA  dd ?  ;Number of the last (abs) cluster of file on disk
   306 00000773 ????????            <1>     tfrLen      dd ?  ;Number of bytes to transfer
   307 00000777 ????????            <1>     tfrCntr     dd ?  ;Number of bytes left to transfer
   308                              <1> ;Directory stuff
   309 0000077B ????????            <1>     dirClustPar dd ?  ;Absolute disk cluster of the start of the parent dir
   310 0000077F ????????            <1>     dirClustA   dd ?  ;Absolute cluster number of current directory
   311 00000783 ????                <1>     dirSect     dw ?  ;Sector of current directory cluster
   312 00000785 ????????            <1>     dirEntry    dd ?  ;32 byte offset in dir for file being searched for
   313                              <1> ;Error DPB 
   314 00000789 ????????????????    <1>     tmpDPBPtr   dq ?  ;A DPB for error/temporary situations
   315                              <1> ;No clash recycling below var as the vars in SDA are invalid if in CPU 
   316                              <1> ; exception hdlr. This var gets cleared on entry to the exception handler. 
   317                              <1> ;If it remains clear, the task will Abort. If it gets set, DOS or COMMAND.COM 
   318                              <1> ; caused CPU exception or we have an NMI. Then we freeze as we cant guarantee 
   319                              <1> ; anything anymore.
   320                              <1> haltDOS:
   321 00000791 ??                  <1>     mediaByte   db ?  ;Calls 1Bh and 1Ch return ptr to here
   322                              <1>     
   323 00000792 <res 2Bh>           <1>     renameFFBlk db ffBlock_size dup (?)  ;Source file "find first" block
   324 000007BD <res 20h>           <1>     renameDir   db fatDirEntry_size dup (?)  ;Build new file dir entry here
   325                              <1> ;Stacks and scratch SFT
   326 000007DD ??????              <1>     alignb  8
   327 000007E0 <res 528h>          <1>     critStack   dq 165 dup (?)
   328 00000D08 ????????????????    <1>     critStakTop dq ?
   329                              <1> 
   330 00000D10 <res 4Fh>           <1>     scratchSFT  db sft_size dup (?)  ;Used in FCB calls to emulate a SFT
   331                              <1>     
   332 00000D5F ??                  <1>     alignb  8
   333 00000D60 <res 638h>          <1>     AuxStack    dq 199 dup (?)
   334 00001398 ????????????????    <1>     AuxStakTop  dq ?  ;Auxilliary stack (Char IO, Int 25h/46h etc)
   335 000013A0 <res 638h>          <1>     DiskStack   dq 199 dup (?)
   336 000019D8 ????????????????    <1>     DiskStakTop dq ?
   337                              <1> 
   338 000019E0 ??                  <1>     lookahead   db ?  ;-1 => Lookahead on select Char function calls!
   339                              <1> ;Below is used in create and delete for vol lbl only. Else is -1.
   340 000019E1 ??                  <1>     rebuildDrv  db ?  ;Stores the drive letter of the dpb to reset.
   341                              <1>     sdaLen      equ     $ - sda 
   342                              <1>     sdaDOSLen   equ     $ - sdaDOSSwap
   343                              <1> 
   344                              <1> ;Additional variables NOT in the SDA
   345 000019E2 ????????????????    <1>     serverDispTblPtr    dq ?  ;DO NOT MOVE! Used to find server dispatch tbl
   346                              <1> ;A backup header to allow copying to for saving the current header when 
   347                              <1> ; quickly doing a second request
   348 000019EA <res 2Ah>           <1>     bkupReqHdr          db ioReqPkt_size dup (?)  
   349                              <1> ;Prevent toggling print if in the middle of reading an extended ASCII char
   350                              <1> inExtASCII:
   351 00001A14 ??                  <1>     noPrintTog  db ?  ;00 = Toggle as usual, 01 = Prevent toggle
   352 00001A15 ????                <1>     keybTicks   dw ?  ;Counts the number of cycles spent in a kb loop.
   353                              <1> ;Every time this overflows, we read the clock and update the DOS internal
   354                              <1> ; copy of the date/time record
   355                              <1> ;The idt doesnt need to be in the SDA as we will halt interrupts
   356                              <1> ; until we get/set the address. Thus the IDT entry returned is the 
   357                              <1> ; correct one AT the time of calling up to "the time it takes to get
   358                              <1> ; to the read IDT routine".
   359                              <1> dosIdtPtr:          ;21h/25h will always read a new copy of IDT here
   360 00001A17 ????                <1>     .limit  dw ?    ;Overlap this with stack below as no call overlap
   361 00001A19 ????????????????    <1>     .base   dq ?
   362                              <1> ;Lseek and IOCTL return data in registers as well as on the caller's 
   363                              <1> ; stack. In Int 2Fh, this could overwrite user data if the functions
   364                              <1> ; were allowed to write to original callers register stack. 
   365                              <1> ; So we have this structure below that is used by these functions to 
   366                              <1> ; write their "return" data onto a "stack", even though when accessed 
   367                              <1> ; through the multiplexer we never will read this structure. 
   368                              <1> ; Really only 4 qwords are needed (rax-rdx) but yaknow... safety
   369 00001A21 <res 60h>           <1>     mplxRegStack    db callerFrame_size dup (?) 
    21                                  dSegLen equ ($-$$)
    22                                  
    23                                  Segment dtext code private align=1 use64
    24                                  ;---------------------------
    25                                  ;       DOS segment
    26                                  ;---------------------------
    27                                  ;DOS main data/code seg. 
    28                                  ;No separation, as this is a single binary blob.
    29                                  %include "./src/Kernel/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5                              <1> ;Encode the true version number as a macro!
     6                              <1> ;This is to avoid mutability of the true number by obtaining a pointer to it.
     7                              <1> ;Initialise the reporting version number of DOS to the true version number
     8                              <1> dosMajor equ 0  ;Version 0
     9                              <1> dosMinor equ 99 ;.99
    10                              <1> ;Revision and version flags are a Byte at most.
    11                              <1> dosRev   equ 2  
    12                              <1> dosVerFlags equ 1   ;First proper testing of kernel (Beta)
    13                              <1> dosVerMac equ (dosMinor << 8) | dosMajor    ;DOS version macro
    14                              <1> 
    15 00000000 0063                <1> dosVersion  dw dosVerMac    ;DOS version number
    16 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    16 0000000B 535953              <1>
    17 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
    17 00000017 535953              <1>
    18                              <1> ;-----------------------------------:
    19                              <1> ;        Static Data Tables         :
    20                              <1> ;-----------------------------------:
    21                              <1> ;IO Char table
    22                              <1> ;This table has Request header length, command code and error flags
    23                              <1> ; as a packed DWORD entry
    24                              <1> ioRqCmdErrTbl:
    25                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    26                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    27 0000001A 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    28 0000001E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    29 00000022 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    30 00000026 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    31 0000002A 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    32 0000002E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    33                              <1> 
    34                              <1> 
    35                              <1> 
    36                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    37                              <1> ; wish to install their own custom logic. The table below is NOT patched
    38                              <1> ; but instead, the function below gets replaced. By default, it points to 
    39                              <1> ; the function editKeys in charFunc.asm. 
    40 00000032 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    41 0000003A 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    42 0000003B 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    43                              <1> ;Extended ASCII keys with special meanings
    44 0000003C 3B                  <1> extKeyTbl   db eF1
    45 0000003D FE2C                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    46 0000003F 3C                  <1>             db eF2
    47 00000040 F02C                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    48 00000042 3D                  <1>             db eF3
    49 00000043 F72C                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    50 00000045 3E                  <1>             db eF4
    51 00000046 2C2D                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    52 00000048 3F                  <1>             db eF5
    53 00000049 712D                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    54 0000004B 40                  <1>             db eF6
    55 0000004C 872D                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    56 0000004E 41                  <1>             db eF7
    57 0000004F 8E2D                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    58 00000051 4B                  <1>             db eCursL
    59 00000052 532C                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    60 00000054 4D                  <1>             db eCursR
    61 00000055 FE2C                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    62 00000057 52                  <1>             db eIns
    63 00000058 992D                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    64 0000005A 53                  <1>             db eDel
    65 0000005B A02D                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    66                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    67                              <1> 
    68                              <1> ;When counting the number of days, first compute the number of years since
    69                              <1> ; 1980 and your year. 
    70                              <1> ;Then, using the table below, find the number of leap years between 1980
    71                              <1> ; and (YourYear - 1). 
    72                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    73                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    74                              <1> ;
    75                              <1> ;Use the months table to get the number of days in a normal month as leap 
    76                              <1> ; years are added using the previous comment.
    77                              <1> 
    78                              <1> ;This table is the number of days in the month
    79                              <1> ;The function which updates the days in Feb writes the number to this table
    80                              <1> monthsTbl:  
    81 0000005D 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    81 00000066 1F1E1F              <1>
    82                              <1> 
    83                              <1> ;Error tables
    84                              <1> hardXlatTbl:
    85                              <1> ;Hard error xlat table. Used so that it can be patched by 
    86                              <1> ; multitaskers and network tools as opposed to having a static
    87                              <1> ; conversion factor as was initially. Not extensible though (thats ok)
    88 00000069 13                  <1>     db errWpd       ;Attempt to write on write protected disk
    89 0000006A 14                  <1>     db errUnkUnt    ;Unknown Unit
    90 0000006B 15                  <1>     db errDrvNR     ;Drive not ready
    91 0000006C 16                  <1>     db errUnkCmd    ;Unknown Command
    92 0000006D 17                  <1>     db errCRCerr    ;Data (CRC) error
    93 0000006E 18                  <1>     db errBadRLn    ;Bad request structure length
    94 0000006F 19                  <1>     db errSekErr    ;Seek error
    95 00000070 1A                  <1>     db errUnkMed    ;Unknown media type
    96 00000071 1B                  <1>     db errSecNF     ;Sector not Found
    97 00000072 1C                  <1>     db errNoPap     ;Printer out of paper
    98 00000073 1D                  <1>     db errWF        ;Write fault
    99 00000074 1E                  <1>     db errRF        ;Read fault
   100 00000075 1F                  <1>     db errGF        ;General fault
   101                              <1>     ;The following two adjust for share errors
   102 00000076 1F                  <1>     db errGF        ;Sharing violations
   103 00000077 1F                  <1>     db errGF        ;File Lock violation
   104 00000078 22                  <1>     db errIDC       ;Invalid Disk Change
   105                              <1> hardXlatTblL equ $ - hardXlatTbl
   106                              <1> errXlatTbl:
   107                              <1> ;Each entry is n bytes long, defined as
   108                              <1> ; Byte 0      : DOS function number for which translation will occur
   109                              <1> ; Byte 1      : Length of the table entry - 2
   110                              <1> ; Bytes n - 3 : Acceptable Error codes
   111                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   112                              <1> ;The table is terminated with a single -1 byte
   113                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   114                              <1> ; only on entry to a disk function
   115 00000079 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   116 0000007D 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   117 00000082 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   118 00000088 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   119 0000008C 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   120 00000092 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   121 00000099 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   122 0000009C 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   123 000000A0 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   124 000000A4 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   125 000000A9 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   126 000000AD 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   127 000000B3 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   128 000000BA 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   129 000000BE 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   130 000000C2 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   131 000000C5 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   132 000000C9 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   133 000000CD 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   134 000000D2 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   135 000000DA 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   136 000000DC 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   137 000000E1 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   138 000000E4 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   139 000000EA 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   140 000000EE 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   141 000000F1 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   142 000000F7 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   143 000000FE 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   144 00000104 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   145 00000108 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   146 0000010C 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   147 00000111 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   148 00000114 FF                  <1>     db -1   ;End Of Table marker
   149                              <1> 
   150                              <1> 
   151                              <1> extErrTbl:
   152                              <1> ;This table contains the default values for how to respond
   153                              <1> ; to particular errors. Fields with -1 need to be filled in before
   154                              <1> ; setting variables using this table.
   155                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   156                              <1> ; Byte 0: Extended Error Code as a byte
   157                              <1> ; Byte 1: Error Class
   158                              <1> ; Byte 2: Error Suggested Action
   159                              <1> ; Byte 3: Error Locus
   160                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   161                              <1> ;
   162                              <1> ;Error 01: Invalid function number
   163 00000115 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   164                              <1> ;Error 02: File not found
   165 00000119 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   166                              <1> ;Error 03: Path not found
   167 0000011D 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   168                              <1> ;Error 04: Too many open handles, and no handles are left
   169 00000121 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   170                              <1> ;Error 05: Access being denied
   171 00000125 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   172                              <1> ;Error 06: Invalid File handle being provided
   173 00000129 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   174                              <1> ;Error 07: MCB chain destroyed
   175 0000012D 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   176                              <1> ;Error 08: No Memory remaining
   177 00000131 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   178                              <1> ;Error 09: Invalid MCB block Address
   179 00000135 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   180                              <1> ;Error 0A: Bad Environment block
   181 00000139 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   182                              <1> ;Error 0B: Data provided in a bad format
   183 0000013D 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   184                              <1> ;Error 0C: Access Code Invalid
   185 00000141 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   186                              <1> ;Error 0D: Error due to Invalid Data provided
   187 00000145 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   188                              <1> ;Error 0F: Error due to a bad drive letter being provided
   189 00000149 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   190                              <1> ;Error 10: Error due to attempting to delete the CWD
   191 0000014D 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   192                              <1> ;Error 11: Error due to a unknown device being used
   193 00000151 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   194                              <1> ;Error 12: No more file handles available
   195 00000155 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   196                              <1> ;Error 50: Network request not supported
   197 00000159 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   198                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   199 0000015D 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   200                              <1> ;Error 21: File Locking Violation
   201 00000161 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   202                              <1> ;Error 54: Too many levels of redirection error
   203 00000165 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   204                              <1> ;Error 56: Bad resource password provided
   205 00000169 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   206                              <1> ;Error 52: Directory already exists
   207 0000016D 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   208                              <1> ;Error 32: Network request not supported by DOS
   209 00000171 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   210                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   211 00000175 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   212                              <1> ;Error 57: Bad parameter in request
   213 00000179 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   214                              <1> ;Error 53: Fail was returned from Int 24h
   215 0000017D 530D0401            <1>     db errFI24, eClsUnk, eActAbt, eLocUnk
   216                              <1> ;Error 24: Sharing Buffer Full
   217 00000181 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   218 00000185 FFFFFFFF            <1>     dd -1   ;End of table signature
   219                              <1> 
   220                              <1> ;Nationalisation stuff
   221                              <1> dosNLSPtr:      ;Symbol to point to the DOS internal NLS data
   222 00000189 0000000000000000    <1> leadingZeros:   db 8 dup (0)    ;Unknown why they are 0 in DOS
   223 00000191 5C434F554E5452592E- <1> defltCtry:      db "\COUNTRY.SYS", (64-12) dup (0) ;FQ Path to COUNTRY.SYS file
   223 0000019A 535953000000000000- <1>
   223 000001A3 000000000000000000- <1>
   223 000001AC 000000000000000000- <1>
   223 000001B5 000000000000000000- <1>
   223 000001BE 000000000000000000- <1>
   223 000001C7 000000000000000000- <1>
   223 000001D0 00                  <1>
   224 000001D1 B501                <1> defaultCP:      dw 437  ;Set to CP437 default
   225 000001D3 0600                <1> ctryFunctions:  dw 6    ;Support 6 extended functions: al=01,02,04,05,06,07
   226                              <1> charTableArray: ;All the qwords need fixing up here
   227                              <1> .ucTable:   ;Each table length is 9 bytes in length (except the last one)
   228 000001D5 02                  <1>     db 2
   229 000001D6 [2F02000000000000]  <1>     dq ucTblExt
   230                              <1> .filenameUCTable:
   231 000001DE 04                  <1>     db 4
   232 000001DF [B102000000000000]  <1>     dq fileUCTblExt
   233                              <1> .filenameTerminatingTable:
   234 000001E7 05                  <1>     db 5
   235 000001E8 [3303000000000000]  <1>     dq fileTermTblExt
   236                              <1> .collatingTable:
   237 000001F0 06                  <1>     db 6
   238 000001F1 [6303000000000000]  <1>     dq collTblExt
   239                              <1> .dbcsTable:
   240 000001F9 07                  <1>     db 7
   241 000001FA [6504000000000000]  <1>     dq dbcsTblExt
   242                              <1> ;Extended country table
   243                              <1> extCtryTbl:
   244 00000202 01                  <1>     db 1    ;infoIDCode (always 1), also matches function 1 value
   245                              <1>     ;Below: Length of structure (not including this word and above byte)
   246 00000203 2A00                <1>     dw extCtryTblL
   247                              <1> .countryCode:
   248 00000205 2C00                <1>     dw 044  ;Current (Active) Country ID (044 is UK)
   249                              <1> .activeCP:
   250 00000207 B501                <1>     dw 437  ;Current (Active) Code page (starts same as default)
   251                              <1> ;Regular country table
   252                              <1> ctryTbl:
   253                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
   254 00000209 0100                <1>     dw 1    ;Date format, UK style
   255 0000020B 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
   256 00000210 2C00                <1>     db ",",0    ;Thousand separator
   257 00000212 2E00                <1>     db ".",0    ;Decimal separator
   258 00000214 2D00                <1>     db "-",0    ;Date separator
   259 00000216 3A00                <1>     db ":",0    ;Time separator
   260 00000218 00                  <1>     db 0        ;Currency format, symbol leads with no space
   261 00000219 02                  <1>     db 2        ;Number of digits after decimal point
   262 0000021A 00                  <1>     db 0        ;Time format, 12hr clock
   263 0000021B 0000000000000000    <1>     dq 0        ;Map to function that does UC conversions
   264 00000223 2C00                <1>     db ",",0    ;Data list separator
   265 00000225 000000000000000000- <1>     db 10 dup (0)
   265 0000022E 00                  <1>
   266                              <1> extCtryTblL equ $ - extCtryTbl.countryCode
   267                              <1> 
   268                              <1> ucTblExt:   ;External pointer to the uppercase table
   269 0000022F 8000                <1>     dw 80h
   270                              <1> ucTbl:    ;Internal ptr, used by casemapfunc
   271 00000231 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   272 00000239 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   273 00000241 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   274 00000249 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   275 00000251 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   276 00000259 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   277 00000261 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   278 00000269 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   279 00000271 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   280 00000279 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   281 00000281 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   282 00000289 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   283 00000291 E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   284 00000299 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   285 000002A1 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   286 000002A9 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   287                              <1> 
   288                              <1> fileUCTblExt:   ;External ptr to the uc table for filenames
   289 000002B1 8000                <1>     dw 80h
   290                              <1> fileUCTbl:    ;Internal ptr, used to convert pathspecs correctly
   291 000002B3 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   292 000002BB 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   293 000002C3 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   294 000002CB 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   295 000002D3 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   296 000002DB A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   297 000002E3 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   298 000002EB B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   299 000002F3 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   300 000002FB C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   301 00000303 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   302 0000030B D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   303 00000313 E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   304 0000031B E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   305 00000323 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   306 0000032B F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   307                              <1> 
   308                              <1> fileTermTblExt:
   309 00000333 1600                <1>     dw filenameTermTblExt_len - 2   ;Length not including this word
   310 00000335 01                  <1>     db 1    ;Signature byte for the table (1)
   311 00000336 00                  <1>     db 0    ;Lowest permissible char value for filename
   312 00000337 FF                  <1>     db -1   ;Highest permissible char value for filename
   313 00000338 00                  <1>     db 0    ;Signature byte for DOS 3.3 (0)
   314                              <1> .startBadRange:
   315 00000339 00                  <1>     db 0    ;Start of the illegal range of filename chars
   316                              <1> .endBadRange:
   317 0000033A 20                  <1>     db 20h  ;End of the illegal range of filename chars (inclusive)
   318 0000033B 02                  <1>     db 2    ;Signature byte for DOS 3.3 (2)
   319                              <1> fileTermTbl:
   320 0000033C 0E                  <1>     db fileTermTbl_len - 1 ;Length of the table below
   321 0000033D 2E222F5C5B5D        <1>     db ".", '"', "/", "\", "[", "]", 
   322 00000343 3A7C3C3E2B3D3B2C    <1>     db ":", "|", "<",">","+","=",";",","
   323                              <1>     fileTermTbl_len equ $ - fileTermTbl
   324                              <1>     filenameTermTblExt_len equ $ - fileTermTblExt
   325                              <1>     ;Buffer space
   326 0000034B 000000000000000000- <1>     db 24 dup (0) ;DOS 3.30 has this buffer present
   326 00000354 000000000000000000- <1>
   326 0000035D 000000000000        <1>
   327                              <1> 
   328                              <1> collTblExt:  ;Collating sequence table, for sorting
   329 00000363 0001                <1>     dw 0100h
   330                              <1> collTbl:
   331 00000365 0001020304050607    <1>     db 000h, 001h, 002h, 003h, 004h, 005h, 006h, 007h
   332 0000036D 08090A0B0C0D0E0F    <1>     db 008h, 009h, 00Ah, 00Bh, 00Ch, 00Dh, 00Eh, 00Fh
   333 00000375 1011121314151617    <1>     db 010h, 011h, 012h, 013h, 014h, 015h, 016h, 017h
   334 0000037D 18191A1B1C1D1E1F    <1>     db 018h, 019h, 01Ah, 01Bh, 01Ch, 01Dh, 01Eh, 01Fh
   335 00000385 2021222324252627    <1>     db 020h, 021h, 022h, 023h, 024h, 025h, 026h, 027h
   336 0000038D 28292A2B2C2D2E2F    <1>     db 028h, 029h, 02Ah, 02Bh, 02Ch, 02Dh, 02Eh, 02Fh
   337 00000395 3031323334353637    <1>     db 030h, 031h, 032h, 033h, 034h, 035h, 036h, 037h
   338 0000039D 38393A3B3C3D3E3F    <1>     db 038h, 039h, 03Ah, 03Bh, 03Ch, 03Dh, 03Eh, 03Fh
   339 000003A5 4041424344454647    <1>     db 040h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   340 000003AD 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   341 000003B5 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   342 000003BD 58595A5B5C5D5E5F    <1>     db 058h, 059h, 05Ah, 05Bh, 05Ch, 05Dh, 05Eh, 05Fh
   343 000003C5 6041424344454647    <1>     db 060h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   344 000003CD 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   345 000003D5 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   346 000003DD 58595A7B7C7D7E7F    <1>     db 058h, 059h, 05Ah, 07Bh, 07Ch, 07Dh, 07Eh, 07Fh
   347 000003E5 4355454141414143    <1>     db 043h, 055h, 045h, 041h, 041h, 041h, 041h, 043h
   348 000003ED 4545454949494141    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 041h, 041h
   349 000003F5 4541414F4F4F5555    <1>     db 045h, 041h, 041h, 04Fh, 04Fh, 04Fh, 055h, 055h
   350 000003FD 594F552424242424    <1>     db 059h, 04Fh, 055h, 024h, 024h, 024h, 024h, 024h
   351 00000405 41494F554E4EA6A7    <1>     db 041h, 049h, 04Fh, 055h, 04Eh, 04Eh, 0A6h, 0A7h
   352 0000040D 3FA9AAABAC212222    <1>     db 03Fh, 0A9h, 0AAh, 0ABh, 0ACh, 021h, 022h, 022h
   353 00000415 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   354 0000041D B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   355 00000425 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   356 0000042D C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   357 00000435 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   358 0000043D D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   359 00000445 E053E2E3E4E5E6E7    <1>     db 0E0h, 053h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   360 0000044D E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   361 00000455 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   362 0000045D F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   363                              <1> 
   364                              <1> dbcsTblExt:
   365 00000465 0600                <1>     dw 6    ;Length of the DBCS table. Doesn't exceed 6 bytes.
   366                              <1> dbcsTbl:
   367                              <1> ;The default DBCS table for our CP is just zeros.
   368                              <1> ;COUNTRY can change this.
   369 00000467 000000000000        <1>     db 6 dup (0)
   370                              <1> 
   371                              <1> asciiCharProperties:   ;This table is const. Gives "properties" of chars.
   372                              <1> ;Bit[0]=Clear if the char is an invalid filename character.
   373                              <1> ;Bit[1]=Clear if the char of a terminating type.
   374                              <1> ;Bit[2]=Clear if the char is of separator type.
   375                              <1> ;Bit[3]=Clear if the char is an invalid FCB name character.
   376                              <1> ;Bit[4-7]=Unused.    
   377                              <1> 
   378 0000046D F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 00h-07h
   379 00000475 F6F0F6F6F6F6F6F6    <1>     db 0F6h, 0F0h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 08h-0Fh
   380 0000047D F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 10h-17h
   381 00000485 F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 18h-1Fh
   382 0000048D F8FFF6FFFFFFFFFF    <1>     db 0F8h, 0FFh, 0F6h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 20h-27h
   383 00000495 FFFFFFF4F4FFFEF6    <1>     db 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h   ;Chars 28h-2Fh
   384 0000049D FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 30h-37h
   385 000004A5 FFFFF4F4F4F4F4FF    <1>     db 0FFh, 0FFh, 0F4h, 0F4h, 0F4h, 0F4h, 0F4h, 0FFh   ;Chars 38h-3Fh
   386 000004AD FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 40h-47h
   387 000004B5 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 48h-4Fh
   388 000004BD FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 50h-57h
   389 000004C5 FFFFFFF6F6F6FFFF    <1>     db 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh   ;Chars 58h-5Fh
   390 000004CD FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 60h-67h
   391 000004D5 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 68h-6Fh
   392 000004DD FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 70h-77h
   393 000004E5 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   ;Chars 78h-7Fh
   394 000004ED FFFFFFFFFFFFFFFFFF- <1>     db 128 dup (0FFh)                                   ;Chars 80h-100h
   394 000004F6 FFFFFFFFFFFFFFFFFF- <1>
   394 000004FF FFFFFFFFFFFFFFFFFF- <1>
   394 00000508 FFFFFFFFFFFFFFFFFF- <1>
   394 00000511 FFFFFFFFFFFFFFFFFF- <1>
   394 0000051A FFFFFFFFFFFFFFFFFF- <1>
   394 00000523 FFFFFFFFFFFFFFFFFF- <1>
   394 0000052C FFFFFFFFFFFFFFFFFF- <1>
   394 00000535 FFFFFFFFFFFFFFFFFF- <1>
   394 0000053E FFFFFFFFFFFFFFFFFF- <1>
   394 00000547 FFFFFFFFFFFFFFFFFF- <1>
   394 00000550 FFFFFFFFFFFFFFFFFF- <1>
   394 00000559 FFFFFFFFFFFFFFFFFF- <1>
   394 00000562 FFFFFFFFFFFFFFFFFF- <1>
   394 0000056B FFFF                <1>
    30                                  %include "./src/Kernel/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 0000056D 4D58                <1>     dw simpleTerminate - kDispTbl       ;AH = 00H, PROCESS MANAGEMENT
     5 0000056F 9121                <1>     dw charIn_BE - kDispTbl             ;AH = 01H, CHAR IO
     6 00000571 9E21                <1>     dw charOut_B - kDispTbl             ;AH = 02H, CHAR IO
     7 00000573 7422                <1>     dw auxIn_B - kDispTbl               ;AH = 03H, CHAR IO
     8 00000575 9E22                <1>     dw auxOut_B - kDispTbl              ;AH = 04H, CHAR IO
     9 00000577 A622                <1>     dw prnOut_B - kDispTbl              ;AH = 05H, CHAR IO
    10 00000579 BE22                <1>     dw directConIO - kDispTbl           ;AH = 06H, CHAR IO
    11 0000057B F222                <1>     dw charIn - kDispTbl                ;AH = 07H, CHAR IO
    12 0000057D 1823                <1>     dw charIn_B - kDispTbl              ;AH = 08H, CHAR IO
    13 0000057F 7723                <1>     dw printString_B - kDispTbl         ;AH = 09H, CHAR IO
    14 00000581 3026                <1>     dw buffCharInput_BE - kDispTbl      ;AH = 0AH, CHAR IO
    15 00000583 8723                <1>     dw checkStdinStatus - kDispTbl      ;AH = 0BH, CHAR IO
    16 00000585 9423                <1>     dw clearbuffDoFunc - kDispTbl       ;AH = 0CH, CHAR IO
    17 00000587 E674                <1>     dw diskReset - kDispTbl             ;AH = 0DH, DISK MANAGEMENT
    18 00000589 1A75                <1>     dw selectDisk - kDispTbl            ;AH = 0EH, DISK MANAGEMENT
    19 0000058B 0D2E                <1>     dw openFileFCB - kDispTbl           ;AH = 0FH, FILE OPERATION       FCB
    20 0000058D 802E                <1>     dw closeFileFCB - kDispTbl          ;AH = 10H, FILE OPERATION       FCB
    21 0000058F A82B                <1>     dw findFirstFileFCB - kDispTbl      ;AH = 11H, FILE OPERATION       FCB
    22 00000591 642C                <1>     dw findNextFileFCB - kDispTbl       ;AH = 12H, FILE OPERATION       FCB
    23 00000593 EB2C                <1>     dw deleteFileFCB - kDispTbl         ;AH = 13H, FILE OPERATION       FCB
    24 00000595 972E                <1>     dw sequentialReadFCB - kDispTbl     ;AH = 14H, RECORD OPERATION     FCB
    25 00000597 972E                <1>     dw sequentialWriteFCB - kDispTbl    ;AH = 15H, RECORD OPERTAION     FCB
    26 00000599 0D2E                <1>     dw createFileFCB - kDispTbl         ;AH = 16H, FILE OPERATION       FCB
    27 0000059B 1A2D                <1>     dw renameFileFCB - kDispTbl         ;AH = 17H, FILE OPERATION       FCB
    28 0000059D CA77                <1>     dw noOp - kDispTbl                  ;AH = 18H, RESERVED
    29 0000059F 3375                <1>     dw getCurrentDisk - kDispTbl        ;AH = 19H, DISK MANAGEMENT
    30 000005A1 D82D                <1>     dw setDTA - kDispTbl                ;AH = 1AH, RECORD OPERATION     F/H
    31 000005A3 3A75                <1>     dw FATinfoDefault - kDispTbl        ;AH = 1BH, DISK MANAGEMENT
    32 000005A5 3C75                <1>     dw FATinfoDevice - kDispTbl         ;AH = 1CH, DISK MANAGEMENT
    33 000005A7 CA77                <1>     dw noOp - kDispTbl                  ;AH = 1DH, RESERVED
    34 000005A9 CA77                <1>     dw noOp - kDispTbl                  ;AH = 1EH, RESERVED
    35 000005AB E975                <1>     dw getCurrentDPBptr - kDispTbl      ;AH = 1FH, INTERNAL, GET CURR DRIVE DPB PTR
    36 000005AD CA77                <1>     dw noOp - kDispTbl                  ;AH = 20H, RESERVED
    37 000005AF 972E                <1>     dw randomReadFCB - kDispTbl         ;AH = 21H, RECORD OPERATION     FCB
    38 000005B1 972E                <1>     dw randomWriteFCB - kDispTbl        ;AH = 22H, RECORD OPERATION     FCB
    39 000005B3 852D                <1>     dw getFileSizeFCB - kDispTbl        ;AH = 23H, FILE OPERATION       FCB
    40 000005B5 972E                <1>     dw setRelRecordFCB - kDispTbl       ;AH = 24H, RECORD OPERATION     FCB
    41 000005B7 8575                <1>     dw setIntVector - kDispTbl          ;AH = 25H, MISC. SYS. FUNCTION
    42 000005B9 5257                <1>     dw copyPSP - kDispTbl               ;AH = 26H, PROCESS MANAGEMENT
    43 000005BB 972E                <1>     dw randBlockReadFCB - kDispTbl      ;AH = 27H, RECORD OPERATION     FCB
    44 000005BD 972E                <1>     dw randBlockWriteFCB - kDispTbl     ;AH = 28H, RECORD OPERATION     FCB
    45 000005BF FE2D                <1>     dw parseFilenameFCB - kDispTbl      ;AH = 29H, FILE OPERATION       FCB
    46 000005C1 B628                <1>     dw getDate - kDispTbl               ;AH = 2AH, TIME AND DATE
    47 000005C3 E328                <1>     dw setDate - kDispTbl               ;AH = 2BH, TIME AND DATE
    48 000005C5 F328                <1>     dw getTime - kDispTbl               ;AH = 2CH, TIME AND DATE
    49 000005C7 1429                <1>     dw setTime - kDispTbl               ;AH = 2DH, TIME AND DATE
    50 000005C9 AF75                <1>     dw setResetVerify - kDispTbl        ;AH = 2EH, DISK MANAGEMENT
    51 000005CB EB2D                <1>     dw getDTA - kDispTbl                ;AH = 2FH, RECORD OPERATION     F/H
    52 000005CD BD75                <1>     dw getDOSversion - kDispTbl         ;AH = 30H, MISC. SYS. FUNCTION
    53 000005CF 1F58                <1>     dw terminateStayRes - kDispTbl      ;AH = 31H, PROCESS MANAGEMENT
    54 000005D1 EB75                <1>     dw getDeviceDPBptr - kDispTbl       ;AH = 32H, INTERNAL, GET DEVICE DPB PTR
    55 000005D3 5374                <1>     dw cbcServer - kDispTbl             ;AH = 33H, MISC. SYS. FUNCTION
    56 000005D5 2376                <1>     dw getInDOSflagPtr - kDispTbl       ;AH = 34H, GET PTR TO INDOS FLAG
    57 000005D7 3476                <1>     dw getIntVector - kDispTbl          ;AH = 35H, MISC. SYS. FUNCTION
    58 000005D9 4376                <1>     dw getDiskFreeSpace - kDispTbl      ;AH = 36H, DISK MANAGEMENT
    59 000005DB E160                <1>     dw getsetSwitchChar - kDispTbl      ;AH = 37H, INTERNAL, CHANGE SWITCH CHAR
    60 000005DD 0A61                <1>     dw getsetCountryInfo - kDispTbl     ;AH = 38H, MISC. SYS. FUNCTION
    61 000005DF 9717                <1>     dw makeDIR - kDispTbl               ;AH = 39H, DIRECTORY OPERATION
    62 000005E1 181A                <1>     dw removeDIR - kDispTbl             ;AH = 3AH, DIRECTORY OPERATION
    63 000005E3 0E1C                <1>     dw setCurrentDIR - kDispTbl         ;AH = 3BH, DIRECTORY OPERATION
    64 000005E5 9930                <1>     dw createFileHdl - kDispTbl         ;AH = 3CH, FILE OPERATION       HANDLE
    65 000005E7 AA30                <1>     dw openFileHdl - kDispTbl           ;AH = 3DH, FILE OPERATION       HANDLE
    66 000005E9 EC31                <1>     dw closeFileHdl - kDispTbl          ;AH = 3EH, FILE OPERATION       HANDLE
    67 000005EB 2A32                <1>     dw readFileHdl - kDispTbl           ;AH = 3FH, RECORD OPERATION     HANDLE
    68 000005ED 6532                <1>     dw writeFileHdl - kDispTbl          ;AH = 40H, RECORD OPERATION     HANDLE
    69 000005EF 7132                <1>     dw deleteFileHdl - kDispTbl         ;AH = 41H, FILE OPERATION       HANDLE
    70 000005F1 D632                <1>     dw lseekHdl - kDispTbl              ;AH = 42H, RECORD OPERATION     HANDLE
    71 000005F3 4733                <1>     dw changeFileModeHdl - kDispTbl     ;AH = 43H, FILE OPERATION       HANDLE
    72 000005F5 494D                <1>     dw ioctrl - kDispTbl                ;AH = 44H, MISC. SYS. FUNCTION  HANDLE
    73 000005F7 6534                <1>     dw duplicateHandle - kDispTbl       ;AH = 45H, FILE OPERATION       HANDLE
    74 000005F9 A534                <1>     dw forceDuplicateHdl - kDispTbl     ;AH = 46H, FILE OPERATION       HANDLE
    75 000005FB 961D                <1>     dw getCurrentDIR - kDispTbl         ;AH = 47H, DIRECTORY OPERATION
    76 000005FD DF51                <1>     dw allocateMemory - kDispTbl        ;AH = 48H, MEMORY MANAGEMENT
    77 000005FF E353                <1>     dw freeMemory - kDispTbl            ;AH = 49H, MEMORY MANAGEMENT
    78 00000601 EB54                <1>     dw reallocMemory - kDispTbl         ;AH = 4AH, MEMORY MANAGEMENT
    79 00000603 AB59                <1>     dw loadExecChild - kDispTbl         ;AH = 4BH, PROCESS MANAGEMENT
    80 00000605 4F58                <1>     dw terminateClean - kDispTbl        ;AH = 4CH, PROCESS MANAGEMENT
    81 00000607 8776                <1>     dw getRetCodeChild - kDispTbl       ;AH = 4DH, PROCESS MANAGEMENT
    82 00000609 BA34                <1>     dw findFirstFileHdl - kDispTbl      ;AH = 4EH, FILE OPERATION       HANDLE
    83 0000060B 2535                <1>     dw findNextFileHdl - kDispTbl       ;AH = 4FH, FILE OPERATION       HANDLE
    84 0000060D B174                <1>     dw scpspServer - kDispTbl           ;AH = 50H, INTERNAL, SET CURRENT PROCESS ID
    85 0000060F C074                <1>     dw gcpspServer - kDispTbl           ;AH = 51H, INTERNAL, GET CURRENT PROCESS ID
    86 00000611 9576                <1>     dw getSysVarsPtr - kDispTbl         ;AH = 52H, INTERNAL, GET SYSVARS POINTER
    87 00000613 A676                <1>     dw createDPB - kDispTbl             ;AH = 53H, INTERNAL, TRANSLATE A BPB TO DPB
    88 00000615 9077                <1>     dw getVerifySetting - kDispTbl      ;AH = 54H, DISK MANAGEMENT
    89 00000617 3F57                <1>     dw createPSP - kDispTbl             ;AH = 55H, INTERNAL, CREATE PSP
    90 00000619 5535                <1>     dw renameFile - kDispTbl            ;AH = 56H, FILE OPERATION       HANDLE
    91 0000061B E135                <1>     dw getSetFileDateTime - kDispTbl    ;AH = 57H, FILE OPERATION       HANDLE
    92 0000061D 9356                <1>     dw getsetMallocStrat - kDispTbl     ;AH = 58H, MEMORY MANAGEMENT
    93 0000061F 9777                <1>     dw getExtendedError - kDispTbl      ;AH = 59H, MISC. SYS. FUNCTION
    94 00000621 5136                <1>     dw createUniqueFile - kDispTbl      ;AH = 5AH, FILE OPERATION       HANDLE
    95 00000623 1937                <1>     dw createNewFile - kDispTbl         ;AH = 5BH, FILE OPERATION       HANDLE
    96 00000625 2D37                <1>     dw lockUnlockFile - kDispTbl        ;AH = 5CH, RECORD OPERATION     HANDLE
    97 00000627 8078                <1>     dw dosServer - kDispTbl             ;AH = 5DH, INTERNAL, SERVER ACTIONS
    98 00000629 427A                <1>     dw netServices - kDispTbl           ;AH = 5EH, NETWORK FUNCTIONS
    99 0000062B A87A                <1>     dw netRedir - kDispTbl              ;AH = 5FH, NETWORK FUNCTIONS
   100 0000062D 0B1E                <1>     dw trueName - kDispTbl              ;AH = 60H, INTERNAL, GET TRUE NAME
   101 0000062F CB77                <1>     dw systemServices - kDispTbl        ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 00000631 C074                <1>     dw gcpspServer - kDispTbl           ;AH = 62H, PROCESS MANAGEMENT
   103 00000633 CA77                <1>     dw noOp - kDispTbl                  ;AH = 63H, RESERVED
   104 00000635 DE74                <1>     dw sdlServer - kDispTbl             ;AH = 64H, INTERNAL, DRIVER LOOKAHEAD
   105 00000637 A361                <1>     dw getExtLocalInfo - kDispTbl       ;AH = 65H, MISC. SYS. FUNCTION
   106 00000639 F362                <1>     dw getsetGlobalCP - kDispTbl        ;AH = 66H, MISC. SYS. FUNCTION
   107 0000063B 9937                <1>     dw setHandleCount - kDispTbl        ;AH = 67H, FILE OPERAITON       F/H
   108 0000063D D738                <1>     dw commitFile - kDispTbl            ;AH = 68H, FILE OPERATION       HANDLE
   109 0000063F 5278                <1>     dw getsetDiskSerial - kDispTbl      ;AH = 69H, INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 00000641 30                  <1>     db mDispTblL/2  ;Number of entries in table
   114 00000642 847A                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   115 00000644 D641                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   116 00000646 AE6D                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   117 00000648 877A                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   118 0000064A FD6E                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   119 0000064C CC20                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   120 0000064E A163                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   121 00000650 7800                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   122 00000652 2F4C                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   123 00000654 7901                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   124 00000656 ED7B                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   125 00000658 5B7B                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   126 0000065A 533E                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   127 0000065C C12A                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   128 0000065E B300                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   129 00000660 CD00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   130 00000662 DB00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   131 00000664 786F                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   132 00000666 596F                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   133 00000668 096F                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   134 0000066A 9370                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   135 0000066C 4A01                <1>     dw flushAndCleanBuffer - mDispTbl   ;AX=1215h
   136 0000066E 534B                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   137 00000670 CB6E                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   138 00000672 DC6D                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   139 00000674 706E                <1>     dw getCDS - mDispTbl    ;AX=1219h
   140 00000676 6B0E                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   141 00000678 542A                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   142 0000067A DB7A                <1>     dw mpxChecksum - mDispTbl  ;AX=121Ch -> Checksum memory
   143 0000067C E87A                <1>     dw mpxSum - mDispTbl  ;AX=121Dh -> Sum Memory
   144 0000067E 916F                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   145 00000680 1A6E                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   146 00000682 884B                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   147 00000684 2D1D                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   148 00000686 1273                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   149 00000688 2F16                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   150 0000068A 377B                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   151 0000068C 4E6F                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   152                              <1>     ;The file ops need all vars setup as if accessing thru DOS
   153 0000068E 8F7A                <1>     dw mpxOpen - mDispTbl       ;AX=1226h, Open File
   154 00000690 1831                <1>     dw closeFileHdl - mDispTbl  ;AX=1227h, Close File
   155 00000692 977A                <1>     dw mpxLseek - mDispTbl      ;AX=1228h, LSEEK
   156 00000694 5631                <1>     dw readFileHdl - mDispTbl   ;AX=1229h, Read File
   157 00000696 F676                <1>     dw noOp - mDispTbl          ;AX=122Ah, Nop, Set FASTOPEN EP (reserved)
   158 00000698 B97A                <1>     dw mpxIOCTL - mDispTbl      ;AX=122Bh, IOCTL
   159 0000069A C770                <1>     dw getDrvChain - mDispTbl   ;AX=122Ch, Get device Chain (ptr in rax)
   160 0000069C D270                <1>     dw getExtErrCde - mDispTbl  ;AX=122Dh, Get extended error code
   161 0000069E F676                <1>     dw noOp - mDispTbl          ;AX=122Eh, Nop, Get/Set error table (reserved)
   162 000006A0 FE74                <1>     dw setDOSversion - mDispTbl ;AX=122Fh, Set DOS version to report. Undocumented.
   163                              <1> mDispTblL   equ     $ - mDispTbl
   164                              <1> 
   165                              <1> serverDispTbl:  ;Server Dispatch functions
   166 000006A2 0B                  <1>     db serverDispTblL/2                         ;Number of entries
   167 000006A3 9277                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   168 000006A5 E477                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   169 000006A7 3B78                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   170 000006A9 4C78                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   171 000006AB 5478                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   172 000006AD 5C78                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   173 000006AF 7778                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   174 000006B1 A178                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   175 000006B3 A178                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   176 000006B5 A178                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   177 000006B7 AE78                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
   178                              <1> serverDispTblL   equ     $ - serverDispTbl
    31                                  %if DEBUG
    32                                  %include "./src/Kernel/Debug/debug.asm" ;Only include if debug symbols on!
    33                                  %endif
    34                                  %include "./src/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 2Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 000006B9 48393D(5D000000)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000006C0 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000006C2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    13 000006C3 56                  <1>     push rsi
    14 000006C4 488B35(5D000000)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 000006CB 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 000006CE 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 000006D0 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 000006D3 EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 000006D5 57                  <1>     push rdi
    22 000006D6 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 000006D9 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 000006DC 5F                  <1>     pop rdi ;Get original buf back
    25 000006DD 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 000006E0 488735(5D000000)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 000006E7 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 000006EA 5E                  <1>     pop rsi
    29                              <1>     return
    13                              <2> %%_ret:
    14 000006EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                              <1> 
    31                              <1> markBuffersAsUnreferencedWrapper:
    32                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    33                              <1> ; and preserves rdi
    34 000006EC 57                  <1>     push rdi
    35 000006ED E802000000          <1>     call markBuffersAsUnreferenced
    36 000006F2 5F                  <1>     pop rdi
    37                              <1>     return
    13                              <2> %%_ret:
    14 000006F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                              <1> 
    39                              <1> markBuffersAsUnreferenced:  ;Int 2Fh AX=120Eh
    40                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    41                              <1> ;Output: rdi = First disk buffer
    42 000006F4 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
    43 000006FB 57                  <1>     push rdi
    44                              <1> .lp:
    45 000006FC 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    46 00000700 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    47 00000703 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    48 0000070A 75F0                <1>     jne .lp
    49 0000070C 5F                  <1>     pop rdi
    50                              <1>     return
    13                              <2> %%_ret:
    14 0000070D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    51                              <1> 
    52                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 2Fh AX=120Fh
    53                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    54                              <1> ; second buffer in the chain in rdi
    55                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    56                              <1> ;Output: rdi = Second buffer in the chain
    57 0000070E 52                  <1>     push rdx
    58 0000070F 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    59 00000712 E8A2FFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    60 00000717 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    61 0000071A 5A                  <1>     pop rdx
    62                              <1>     return
    13                              <2> %%_ret:
    14 0000071B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> findUnreferencedBuffer: ;Int 2Fh AX=1210h
    65                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    66                              <1> ;Input: rdi = Buffer header to start searching at
    67                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    68                              <1> ;        ZF=ZE => No unreferenced buffer found
    69 0000071C 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Start by checking rdi is not at the end of the list already :)
    70                              <1>     rete    ;Return preserving ZF is so
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000723 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000725 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    71 00000726 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    72 0000072A 7405                <1>     jz .exit    ;Unreferenced buffer found!
    73 0000072C 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    74 0000072F EBEB                <1>     jmp short findUnreferencedBuffer  ;Check next buffer
    75                              <1> .exit:
    76 00000731 50                  <1>     push rax
    77 00000732 0D01000000          <1>     or eax, 1   ;Clear ZF
    78 00000737 58                  <1>     pop rax
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000738 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> flushAllBuffersForDPB:  ;External linkage
    82                              <1> ;Wrapper to allow calls to the below functions from the workingDPB
    83 00000739 50                  <1>     push rax
    84 0000073A 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
    85 00000741 0FB600              <1>     movzx eax, byte [rax + dpb.bDriveNumber]
    86 00000744 E802000000          <1>     call flushAllBuffersForDrive
    87 00000749 58                  <1>     pop rax
    88                              <1>     return
    13                              <2> %%_ret:
    14 0000074A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    89                              <1> 
    90                              <1> flushAllBuffersForDrive:    ;External linkage (2 - diskReset/exit)
    91                              <1> ; Flushes and resets the dirty bit for all dirty bufs in buffer chain.
    92                              <1> ; Used also to allow flushing all buffers
    93                              <1> ; Input: al = 0-based physical drive number we are xacting on
    94                              <1> ; Returns: CF=NC => All is well, buffers flushed and dirty bits cleaned
    95                              <1> ;          CF=CY => A Buffer failed to flush, it was lost.
    96 0000074B 57                  <1>     push rdi
    97 0000074C 50                  <1>     push rax
    98 0000074D 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
    99 00000754 B4FF                <1>     mov ah, -1  ;Set to ignore no buffers
   100                              <1> .mainLp:
   101 00000756 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   102 0000075D 741E                <1>     je .exit   
   103 0000075F E827000000          <1>     call flushAndCleanBuffer    ;Flush this buffer if it is on the DPB we want
   104 00000764 50                  <1>     push rax
   105 00000765 0FB64708            <1>     movzx eax, byte [rdi + bufferHdr.driveNumber]
   106 00000769 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this a buffer on the error drive?
   107 0000076F 58                  <1>     pop rax
   108 00000770 7405                <1>     je .errDrv    ;If not, goto next buffer
   109                              <1> .nextBuffer:
   110 00000772 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   111 00000775 EBDF                <1>     jmp short .mainLp
   112                              <1> .errDrv:
   113 00000777 C64708FF            <1>     mov byte [rdi + bufferHdr.driveNumber], -1  ;Free the buffer if caused error
   114 0000077B EBF5                <1>     jmp short .nextBuffer
   115                              <1> .exit:
   116 0000077D 58                  <1>     pop rax
   117 0000077E 5F                  <1>     pop rdi
   118 0000077F F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;Did we xlat error?
   119                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000786 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000788 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   120 00000789 F9                  <1>     stc ;If so, return CF=CY
   121                              <1>     return
    13                              <2> %%_ret:
    14 0000078A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   122                              <1> 
   123                              <1> flushAndCleanBuffer:   ;Internal Linkage Int 2Fh AX=1215h
   124                              <1> ;Flushes and cleans the dirty bit from the buffer
   125                              <1> ;Input: AH = Drives to ignore flush for
   126                              <1> ;       AL = Drive to flush for. If AL=AH, take this buffer unless ignored!
   127                              <1> ;       rdi -> Buffer in question
   128 0000078B 3A6708              <1>     cmp ah, byte [rdi + bufferHdr.driveNumber]  ;Is this an ignorable drv number?
   129                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000078E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000790 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   130 00000791 38C4                <1>     cmp ah, al  ;Do we ignore ourselves?
   131 00000793 7407                <1>     je .takeThisBuffer
   132 00000795 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber] ;Is this an acceptable buffer?
   133 00000798 F8                  <1>     clc
   134                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000799 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000079B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   135                              <1> .takeThisBuffer:
   136 0000079C F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer   ;Is it dirty?
   137                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000007A0 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000007A2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   138 000007A3 50                  <1>     push rax    ;Save the drive number
   139 000007A4 0FB74708            <1>     movzx eax, word [rdi + bufferHdr.wDrvNumFlg]
   140 000007A8 50                  <1>     push rax    ;Save the buffer flags
   141 000007A9 E80C000000          <1>     call flushAndFreeBuffer
   142 000007AE 58                  <1>     pop rax     ;Get back the flags
   143 000007AF 7207                <1>     jc .exit
   144 000007B1 80E4BF              <1>     and ah, ~dirtyBuffer    ;Clean the dirty bit
   145 000007B4 66894708            <1>     mov word [rdi + bufferHdr.wDrvNumFlg], ax  ;And return the drv/flags!
   146                              <1> .exit:  
   147 000007B8 58                  <1>     pop rax     ;Get back the drive number
   148                              <1>     return
    13                              <2> %%_ret:
    14 000007B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> 
   150                              <1> flushAndFreeBuffer:    ;Int 2Fh AX=1209h 
   151                              <1> ;Frees, then attempts flushes the data in a sector buffer to disk!
   152                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   153                              <1> ;Exit:  CF=NC : Success
   154                              <1> ;       CF=CY : Fail, terminate the request
   155 000007BA 50                  <1>     push rax
   156 000007BB 53                  <1>     push rbx
   157 000007BC 51                  <1>     push rcx
   158 000007BD 52                  <1>     push rdx
   159 000007BE 56                  <1>     push rsi
   160 000007BF 55                  <1>     push rbp
   161                              <1> ;If the buffer is freed, skip flushing to avoid issues
   162 000007C0 B8FF000000          <1>     mov eax, freeBuffer
   163 000007C5 66874708            <1>     xchg ax, word [rdi + bufferHdr.driveNumber] ;Free the buffer, get flags
   164                              <1>     ;ah = Flags, al = Drive number
   165 000007C9 3CFF                <1>     cmp al, -1  ;-1 means free buffer
   166 000007CB 7470                <1>     je .fbFreeExit  ;If it was free, exit
   167 000007CD F6C440              <1>     test ah, dirtyBuffer    ;Data modified?
   168 000007D0 746B                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   169 000007D2 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this drive the error drive?    
   170 000007D8 7463                <1>     je .fbFreeExit  ;Skip write if this disk has caused an error
   171 000007DA C605(68040000)19    <1>     mov byte [Int24bitfld], critWrite | critRetryOK | critFailOK
   172 000007E1 F6C408              <1>     test ah, dataBuffer
   173 000007E4 7407                <1>     jz .fbWriteSetup
   174 000007E6 800D(68040000)20    <1>     or byte [Int24bitfld], critIgnorOK  ;If this is a data buffer, we can ignore too
   175                              <1> .fbWriteSetup:
   176 000007ED BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   177 000007F2 F6C402              <1>     test ah, fatBuffer
   178 000007F5 7406                <1>     jz .fbWriteNotFat
   179 000007F7 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   180                              <1> .fbWriteNotFat:
   181 000007FD 0FB64F12            <1>     movzx ecx, byte [rdi + bufferHdr.bufFATcopy]   ;And FAT copies (if FAT sector)
   182 00000801 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   183 00000805 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   184 00000809 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   185                              <1> .fbWriteDisk:
   186 0000080D 50                  <1>     push rax    ;Save the drive number and flags
   187 0000080E 53                  <1>     push rbx    ;Has pointer to buffer data area
   188 0000080F 51                  <1>     push rcx    ;# of FAT sectors
   189 00000810 52                  <1>     push rdx    ;The LBA of the buffer that we are writing
   190 00000811 56                  <1>     push rsi    ;Error counter (5 for FAT sectors, 3 otherwise) 
   191 00000812 55                  <1>     push rbp    ;DPB ptr for drive
   192 00000813 B901000000          <1>     mov ecx, 1  ;One sector to copy
   193 00000818 E8926A0000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   194 0000081D E89D680000          <1>     call absDiskDriverCall    ;Make Driver Request
   195 00000822 5D                  <1>     pop rbp
   196 00000823 5E                  <1>     pop rsi
   197 00000824 5A                  <1>     pop rdx
   198 00000825 59                  <1>     pop rcx
   199 00000826 5B                  <1>     pop rbx
   200                              <1>     ;Don't pop rax here to carry the error code if error!
   201 00000827 751C                <1>     jnz .fbFail
   202                              <1> ;Now check if the buffer was a FAT, to write additional copies
   203 00000829 58                  <1>     pop rax ;Now pop the drive number and flags off the stack
   204 0000082A F6C402              <1>     test ah, fatBuffer ;FAT buffer?
   205 0000082D 740E                <1>     jz .fbFreeExit  ;If not, exit
   206 0000082F FFC9                <1>     dec ecx
   207 00000831 740A                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   208 00000833 50                  <1>     push rax
   209 00000834 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   210 00000837 4801C2              <1>     add rdx, rax ;Add the FAT size to the LBA (rdx has LBA number)
   211 0000083A 58                  <1>     pop rax
   212 0000083B EBD0                <1>     jmp short .fbWriteDisk ;Make another request for the other FAT copy
   213                              <1> .fbFreeExit:
   214 0000083D F8                  <1>     clc
   215                              <1> .fbExitFail:
   216 0000083E 5D                  <1>     pop rbp
   217 0000083F 5E                  <1>     pop rsi
   218 00000840 5A                  <1>     pop rdx
   219 00000841 59                  <1>     pop rcx
   220 00000842 5B                  <1>     pop rbx
   221 00000843 58                  <1>     pop rax
   222                              <1>     return
    13                              <2> %%_ret:
    14 00000844 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   223                              <1> .fbFail:
   224                              <1> ;Enter here only if the request failed
   225 00000845 FFCE                <1>     dec esi
   226 00000847 7403                <1>     jz .fbHardError ;Once we have tried it a number of times, fail!
   227 00000849 58                  <1>     pop rax     ;Else pop back the drive number and flags
   228 0000084A EBC1                <1>     jmp short .fbWriteDisk ;Try the request again!
   229                              <1> .fbHardError:
   230                              <1> ;Request failed thrice, critical error call
   231                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   232 0000084C E8A4600000          <1>     call diskIOError ;Call with rdi = Buffer header and eax = Status Word
   233 00000851 3C01                <1>     cmp al, critRetry
   234 00000853 58                  <1>     pop rax     ;Now pop back the drive number and flags from the stack!
   235 00000854 7497                <1>     je .fbWriteSetup   ;If we retry, we rebuild the stack, values possibly trashed
   236                              <1>     ;Else we fail (Ignore=Fail here)
   237 00000856 F9                  <1>     stc ;Set error flag to indicate fail
   238 00000857 EBE5                <1>     jmp short .fbExitFail
   239                              <1> 
   240                              <1> testDirtyBufferForDrive:    ;External linkage
   241                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   242                              <1> ;Input: al = Drive number (0 based)
   243                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   244                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   245 00000859 53                  <1>     push rbx
   246 0000085A 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   247                              <1> .tdbfdCheckBuffer:
   248 00000861 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   249 00000864 7509                <1>     jne .tdbfdGotoNextBuffer
   250 00000866 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   251 0000086A 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   252 0000086C F9                  <1>     stc ;Else dirty buffer found, set carry flag
   253                              <1> .tdbfdExit:
   254 0000086D 5B                  <1>     pop rbx
   255                              <1>     return
    13                              <2> %%_ret:
    14 0000086E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .tdbfdGotoNextBuffer:
   257 0000086F 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   258 00000872 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   259 00000879 74F2                <1>     je .tdbfdExit
   260 0000087B EBE4                <1>     jmp short .tdbfdCheckBuffer
   261                              <1> 
   262                              <1> freeBuffersForDrive:  ;External Linkage (Before Get BPB in medchk)
   263                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   264                              <1> ; to have a drive number of -1, thus freeing it
   265                              <1> ;Given Drive number is in al
   266 0000087D 57                  <1>     push rdi
   267 0000087E 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   268                              <1> .i0:
   269 00000885 4881FFFFFFFFFF      <1>     cmp rdi, -1
   270 0000088C 7417                <1>     je .exit
   271 0000088E 384708              <1>     cmp byte [rdi + bufferHdr.driveNumber], al  ;Chosen Drive?
   272 00000891 750D                <1>     jne .i1 ;If no, skip freeing
   273 00000893 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   274 00000899 E870FEFFFF          <1>     call makeBufferMostRecentlyUsedGetNext
   275 0000089E EBE5                <1>     jmp short .i0
   276                              <1> .i1:
   277 000008A0 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;goto next buffer
   278 000008A3 EBE0                <1>     jmp short .i0
   279                              <1> .exit:
   280 000008A5 5F                  <1>     pop rdi
   281                              <1>     return
    13                              <2> %%_ret:
    14 000008A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> markBufferDirty:
   284 000008A7 55                  <1>     push rbp
   285 000008A8 9C                  <1>     pushfq
   286 000008A9 488B2D(3E070000)    <1>     mov rbp, qword [currBuff]
   287 000008B0 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   288 000008B4 9D                  <1>     popfq
   289 000008B5 5D                  <1>     pop rbp
   290                              <1>     return
    13                              <2> %%_ret:
    14 000008B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   291                              <1> 
   292                              <1> getBuffer: ;Internal Linkage ONLY
   293                              <1> ;
   294                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   295                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   296                              <1> ;Flushes if not in disk change mode. 
   297                              <1> ;If in disk change mode, will check to see if the selected buffer 
   298                              <1> ; has data referring a device using the same DPB as we are changing.
   299                              <1> ; If it is, skip flushing, if not, flush first!
   300                              <1> ;
   301                              <1> ;This function will return a pointer to the desired data sector OR 
   302                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   303                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   304                              <1> ;Entry: rax = Sector to read
   305                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   306                              <1> ;       rsi = DPB to use for transaction
   307                              <1> ;Exit:  CF=NC => 
   308                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   309                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   310 000008B7 51                  <1>     push rcx
   311 000008B8 52                  <1>     push rdx
   312 000008B9 56                  <1>     push rsi
   313 000008BA 57                  <1>     push rdi
   314 000008BB 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   315 000008BD E81F010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   316 000008C2 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   317 000008C9 741F                <1>     je .rbReadNewSector
   318 000008CB 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   319 000008D2 E8E2FDFFFF          <1>     call makeBufferMostRecentlyUsed
   320 000008D7 F8                  <1>     clc
   321                              <1> .rbExit:
   322 000008D8 5F                  <1>     pop rdi
   323 000008D9 5E                  <1>     pop rsi
   324 000008DA 5A                  <1>     pop rdx
   325 000008DB 59                  <1>     pop rcx
   326 000008DC 9C                  <1>     pushfq
   327 000008DD 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   328 000008E4 804B0920            <1>     or byte [rbx + bufferHdr.bufferFlags], refBuffer    ;Mark as referenced!
   329 000008E8 9D                  <1>     popfq
   330                              <1>     return
    13                              <2> %%_ret:
    14 000008E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   331                              <1> .rbReadNewSector:
   332 000008EA E89B000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   333 000008EF E8C6FEFFFF          <1>     call flushAndFreeBuffer
   334 000008F4 72E2                <1>     jc .rbExit    ;Preserve the set carry flag
   335                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   336                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   337                              <1>     ; is no longer owned by that File so we mark the owner as none
   338 000008F6 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   339 000008F9 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   340 000008FC 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   341 00000900 80F902              <1>     cmp cl, fatBuffer
   342 00000903 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   343 00000905 7503                <1>     jne .rbNonFATbuffer
   344 00000907 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   345                              <1> .rbNonFATbuffer:
   346 0000090A 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   347 0000090D 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   348 00000910 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   349 00000913 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   350 00000917 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   351 0000091B E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   352 00000920 EBB6                <1>     jmp short .rbExit   ;Jump preserving the carry flag
   353                              <1> 
   354                              <1> readSectorBuffer:   ;Internal Linkage
   355                              <1> ;Reads a sector into a built sector buffer
   356                              <1> ;Entry: rdi = Pointer to buffer header
   357                              <1> ;Exit:  CF=NC : Success
   358                              <1> ;       CF=CY : Fail, terminate the request
   359                              <1> ;       rbx pointing to buffer header
   360                              <1> ;First make request to device driver
   361 00000922 50                  <1>     push rax
   362 00000923 53                  <1>     push rbx
   363 00000924 51                  <1>     push rcx
   364 00000925 52                  <1>     push rdx
   365 00000926 56                  <1>     push rsi
   366 00000927 55                  <1>     push rbp
   367                              <1> .rsRequest0:
   368 00000928 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   369 0000092D F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   370 00000931 7406                <1>     jz .rsRequest1
   371 00000933 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   372                              <1> .rsRequest1:
   373 00000939 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   374 0000093C B901000000          <1>     mov ecx, 1  ;One sector to copy
   375 00000941 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   376 00000945 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   377 00000949 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   378 0000094D E868690000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   379 00000952 E868670000          <1>     call absDiskDriverCall    ;Make Driver Request
   380 00000957 7508                <1>     jnz .rsFail
   381                              <1> .rsExit:
   382 00000959 F8                  <1>     clc
   383                              <1> .rsExitFail:
   384 0000095A 5D                  <1>     pop rbp
   385 0000095B 5E                  <1>     pop rsi
   386 0000095C 5A                  <1>     pop rdx
   387 0000095D 59                  <1>     pop rcx
   388 0000095E 5B                  <1>     pop rbx
   389 0000095F 58                  <1>     pop rax
   390                              <1>     return
    13                              <2> %%_ret:
    14 00000960 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   391                              <1> .rsFail:
   392                              <1> ;Enter here only if the request failed
   393 00000961 FFCE                <1>     dec esi
   394 00000963 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   395                              <1> ;Request failed thrice, critical error call
   396                              <1> ;First free the buffer if we failed to read data into it. 
   397                              <1> ;We free this buffer to free the resource if the user aborts.
   398                              <1> ;This function is called in a critical section so the buffer pointer
   399                              <1> ; is under no thread of being reallocated.
   400                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   401 00000965 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer ;Free buffer
   402 0000096B C605(68040000)18    <1>     mov byte [Int24bitfld], critRead | critFailOK | critRetryOK
   403 00000972 E87E5F0000          <1>     call diskIOError    ;Returns rbp -> DPB and rdi -> Buffer, al = Action code
   404 00000977 3C01                <1>     cmp al, critRetry
   405 00000979 7509                <1>     jne .fail   ;Else we fail
   406 0000097B 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]    ;Get drv num to put back
   407 0000097F 884708              <1>     mov byte [rdi + bufferHdr.driveNumber], al ;Put it back (buffer type bits set)
   408 00000982 EBA4                <1>     jmp short .rsRequest0
   409                              <1> .fail:
   410 00000984 F9                  <1>     stc ;Set error flag to indicate fail
   411 00000985 E9D0FFFFFF          <1>     jmp .rsExitFail
   412                              <1>     
   413                              <1> findLRUBuffer: ;Internal Linkage
   414                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   415                              <1> ; in rdi and the currBuff variable
   416                              <1> ;Input: Nothing
   417                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   418                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   419 0000098A 52                  <1>     push rdx
   420 0000098B 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   421 00000992 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   422 00000996 7436                <1>     je .flbExit 
   423 00000998 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   424 0000099F 742D                <1>     je .flbExit
   425                              <1> .flbWalk:
   426 000009A1 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   427 000009A4 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   428 000009A7 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   429 000009AB 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   430 000009AD 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   431 000009B4 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   432 000009B6 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   433                              <1> .flbHeadLink:
   434 000009BD 488B15(5D000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   435 000009C4 48893D(5D000000)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   436 000009CB 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   437                              <1> .flbExit:
   438 000009CE 5A                  <1>     pop rdx
   439 000009CF 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   440                              <1>     return
    13                              <2> %%_ret:
    14 000009D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   441                              <1> .flbFreeLink:
   442 000009D7 51                  <1>     push rcx
   443 000009D8 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   444 000009DB 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   445 000009DE 59                  <1>     pop rcx
   446 000009DF EBDC                <1>     jmp short .flbHeadLink
   447                              <1> 
   448                              <1> findSectorInBuffer:     ;Internal linkage
   449                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   450                              <1> ;If the sector is not in a buffer, returns with a -1
   451                              <1> ;Input: rax = Sector number
   452                              <1> ;       dl = Drive number
   453                              <1> ;Output: rdi = Buffer hdr pointer or -1
   454 000009E1 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   455                              <1> .fsiCheckBuffer:
   456 000009E8 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   457 000009EB 7507                <1>     jne .fsiGotoNextBuffer
   458 000009ED 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   459 000009F1 7501                <1>     jne .fsiGotoNextBuffer
   460                              <1> .fsiExit:
   461                              <1>     return
    13                              <2> %%_ret:
    14 000009F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   462                              <1> .fsiGotoNextBuffer:
   463 000009F4 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   464 000009F7 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   465 000009FE 74F3                <1>     je .fsiExit
   466 00000A00 EBE6                <1>     jmp short .fsiCheckBuffer
   467                              <1> 
   468                              <1> ;-----------------------------------------------------------------------------
   469                              <1> ;SPECIAL BUFFER FUNCTIONS
   470                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   471                              <1> ; ALL sector types need to setup [workingDPB] to make the transfer
   472                              <1> ;-----------------------------------------------------------------------------
   473                              <1> getBufForDOS:
   474                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   475                              <1> ;Input: [workingDPB] = DPB to transact on
   476                              <1> ;       rax = Sector to transfer
   477                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   478 00000A02 51                  <1>     push rcx
   479 00000A03 B101                <1>     mov cl, dosBuffer
   480 00000A05 EB0D                <1>     jmp short getBufCommon
   481                              <1> getBufForFat:
   482                              <1> ;Returns a buffer to use for fat data in rbx
   483                              <1> ;Input: [workingDPB] = DPB to transact on
   484                              <1> ;       rax = Sector to transfer
   485                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   486 00000A07 51                  <1>     push rcx
   487 00000A08 B102                <1>     mov cl, fatBuffer
   488 00000A0A EB08                <1>     jmp short getBufCommon
   489                              <1> getBufForDir:
   490                              <1> ;Returns a buffer to use for disk directory data in rbx
   491                              <1> ;Input: [workingDPB] = File to manipulate
   492                              <1> ;       rax = Sector to transfer
   493                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   494 00000A0C 51                  <1>     push rcx
   495 00000A0D B104                <1>     mov cl, dirBuffer
   496 00000A0F EB03                <1>     jmp short getBufCommon
   497                              <1> getBufForData:
   498                              <1> ;Returns a buffer to use for disk data in rbx
   499                              <1> ;Requires a File Handle.
   500                              <1> ;Input: [workingDPB] = File to manipulate
   501                              <1> ;       rax = Sector to transfer
   502                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   503 00000A11 51                  <1>     push rcx
   504 00000A12 B108                <1>     mov cl, dataBuffer
   505                              <1> getBufCommon:
   506 00000A14 56                  <1>     push rsi
   507 00000A15 57                  <1>     push rdi
   508 00000A16 488B35(0A070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   509                              <1> .makeReq:
   510 00000A1D E895FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   511 00000A22 5F                  <1>     pop rdi
   512 00000A23 5E                  <1>     pop rsi
   513 00000A24 59                  <1>     pop rcx
   514                              <1>     return
    13                              <2> %%_ret:
    14 00000A25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    35                                  %include "./src/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 00000A26 53                  <1>     push rbx
     9 00000A27 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr]
    10 00000A2A B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 00000A2F 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 00000A35 730C                <1>     jae .exit
    13 00000A37 FFC9                <1>     dec ecx     ;FAT 16 marker
    14 00000A39 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 00000A3F 7302                <1>     jae .exit
    16 00000A41 FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 00000A43 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 00000A44 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 00000A45 53                  <1>     push rbx
    29 00000A46 55                  <1>     push rbp
    30 00000A47 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    31 00000A4E 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr]
    32 00000A51 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 00000A57 731E                <1>     jae .fat32
    34 00000A59 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 00000A5F 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 00000A61 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 00000A63 6801000000          <1>     push qword 1
    39 00000A68 EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000A6A 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000A6C D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000A6E 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 00000A70 6800000000          <1>     push qword 0
    45 00000A75 EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000A77 6802000000          <1>     push qword 2
    48 00000A7C C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000A7F 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 00000A83 31D2                <1>     xor edx, edx    ;edx = 0
    53 00000A85 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000A87 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000A8B 01D8                <1>     add eax, ebx
    56 00000A8D 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000A8E 5D                  <1>     pop rbp
    58 00000A8F 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000A90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 00000A91 51                  <1>     push rcx
    68 00000A92 09C0                <1>     or eax, eax ;Zero upper dword
    69 00000A94 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 00000A96 482D02000000        <1>     sub rax, 2
    72 00000A9C 8A4D05              <1>     mov cl, byte [rbp + dpb.bSecPerClustShift]
    73 00000A9F 48D3E0              <1>     shl rax, cl
    74 00000AA2 31C9                <1>     xor ecx, ecx
    75 00000AA4 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000AA7 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000AAA 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000AAB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000AAC 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000AAF E872FFFFFF          <1>     call getFATtype
    83 00000AB4 81F902000000        <1>     cmp ecx, 2
    84 00000ABA 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000ABC 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000ABD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000ABE 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000AC0 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AC2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    97 00000AC3 53                  <1>     push rbx
    98                              <1> .lp:
    99 00000AC4 89C3                <1>     mov ebx, eax
   100 00000AC6 E858020000          <1>     call readFAT
   101 00000ACB 7209                <1>     jc .exit
   102 00000ACD 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 00000AD2 75F0                <1>     jne .lp
   104 00000AD4 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 00000AD6 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 00000AD7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000AD8 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000ADA 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000ADC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   116 00000ADD 51                  <1>     push rcx
   117 00000ADE 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000AE0 FFC1                <1>     inc ecx
   120 00000AE2 E83C020000          <1>     call readFAT
   121 00000AE7 7209                <1>     jc .exit
   122 00000AE9 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000AEE 75F0                <1>     jne .lp
   124 00000AF0 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000AF2 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000AF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 00000AF4 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000AF6 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AF8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   139 00000AF9 53                  <1>     push rbx
   140 00000AFA 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 00000AFD 89C3                <1>     mov ebx, eax
   143 00000AFF E81F020000          <1>     call readFAT
   144 00000B04 7206                <1>     jc .exit
   145 00000B06 FFC9                <1>     dec ecx
   146 00000B08 75F3                <1>     jnz .lp
   147 00000B0A 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 00000B0C 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000B0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 00000B0E 53                  <1>     push rbx
   157 00000B0F 56                  <1>     push rsi
   158 00000B10 E874000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 00000B15 7223                <1>     jc .exit    ;Disk read error?
   160 00000B17 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 00000B1C 7415                <1>     je .exit2   ;Exit synching disk full status
   162 00000B1E BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 00000B23 89C3                <1>     mov ebx, eax
   164 00000B25 E8A5020000          <1>     call writeFAT
   165 00000B2A 720E                <1>     jc .exit 
   166 00000B2C 89D8                <1>     mov eax, ebx
   167 00000B2E E87C030000          <1>     call decrementFreeClusterCount
   168                              <1> .exit2:
   169 00000B33 50                  <1>     push rax
   170 00000B34 E821040000          <1>     call writeFSInfoSector
   171 00000B39 58                  <1>     pop rax
   172                              <1> .exit:
   173 00000B3A 5E                  <1>     pop rsi
   174 00000B3B 5B                  <1>     pop rbx
   175                              <1>     return
    13                              <2> %%_ret:
    14 00000B3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   176                              <1> 
   177                              <1> allocateClusters:
   178                              <1> ;Working dpb must be set. 
   179                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   180                              <1> ;       ebx = Cluster to link to the new cluster
   181                              <1> ;Output:    
   182                              <1> ;   ecx = Number of allocated clusters
   183                              <1> ;   CF=NC => Complete.
   184                              <1> ;   If eax = -1, then no more free clusters. 
   185                              <1> ;   CF=CY => Hard error, exit
   186 00000B3D F8                  <1>     clc ;Always clear the flags before starting
   187 00000B3E 53                  <1>     push rbx
   188 00000B3F 56                  <1>     push rsi
   189 00000B40 51                  <1>     push rcx    ;Save tfr count on stack
   190 00000B41 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   191                              <1> .allocateLoop:
   192 00000B44 E840000000          <1>     call findFreeCluster
   193 00000B49 722B                <1>     jc .exit
   194 00000B4B 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   195 00000B50 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   196                              <1>     ;eax has first free cluster value to use
   197                              <1>     ;First we link the previous cluster to this cluster
   198 00000B52 BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   199 00000B57 50                  <1>     push rax
   200 00000B58 E872020000          <1>     call writeFAT   ;Allocate this cluster first
   201 00000B5D 58                  <1>     pop rax
   202 00000B5E 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   203 00000B60 E84A030000          <1>     call decrementFreeClusterCount
   204                              <1>     ;eax points to this allocated cluster
   205                              <1>     ;ebx points to the previous last cluster
   206 00000B65 89C6                <1>     mov esi, eax    ;New cluster as "value"
   207 00000B67 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   208 00000B69 E861020000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   209 00000B6E 7206                <1>     jc .exit
   210 00000B70 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   211 00000B72 FFC9                <1>     dec ecx ;One less cluster allocated
   212 00000B74 75CE                <1>     jnz .allocateLoop
   213                              <1> .exit:
   214 00000B76 5E                  <1>     pop rsi ;Pop the tfr count into esi
   215 00000B77 9C                  <1>     pushfq
   216 00000B78 F7D9                <1>     neg ecx
   217 00000B7A 01F1                <1>     add ecx, esi
   218 00000B7C 50                  <1>     push rax
   219 00000B7D 51                  <1>     push rcx
   220 00000B7E E8D7030000          <1>     call writeFSInfoSector
   221 00000B83 59                  <1>     pop rcx
   222 00000B84 58                  <1>     pop rax
   223 00000B85 9D                  <1>     popfq
   224 00000B86 5E                  <1>     pop rsi
   225 00000B87 5B                  <1>     pop rbx
   226                              <1>     return
    13                              <2> %%_ret:
    14 00000B88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> findFreeCluster:
   229                              <1> ;Walks the FAT to find a free cluster and returns the 
   230                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   231                              <1> ;Starts from the pervious first free cluster and wraps around if 
   232                              <1> ; we hit the max disk size and keeps searching until we get back
   233                              <1> ; to the starting cluster value. 
   234                              <1> ;If the first free cluster is unknown, we start from 2. If we hit the 
   235                              <1> ; max disk size in that case, we fail.
   236                              <1> ;Works on the workingDPB.
   237                              <1> ;If returns with CF=CY => Fail set, return immediately to caller.
   238 00000B89 53                  <1>     push rbx
   239 00000B8A 52                  <1>     push rdx
   240 00000B8B 55                  <1>     push rbp
   241 00000B8C 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   242 00000B93 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]
   243 00000B96 3DFFFFFFFF          <1>     cmp eax, -1     ;Do we have a good starting free cluster? 
   244 00000B9B 7511                <1>     jne .lp
   245                              <1>     ;Check if the count of free clusters is 0. If so, we are full!
   246 00000B9D 817D3100000000      <1>     cmp dword [rbp + dpb.dFreeClustCnt], 0
   247 00000BA4 742D                <1>     je .diskFull
   248                              <1>     ;Else, we just have unreliable metadata. Start search from 2!
   249 00000BA6 B802000000          <1>     mov eax, 2      ;If not, start searching from 2.
   250 00000BAB 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax    ;Start searching here!
   251                              <1> .lp:
   252 00000BAE 89C3                <1>     mov ebx, eax
   253 00000BB0 E86E010000          <1>     call readFAT    ;Deref the cluster value of ebx into eax
   254 00000BB5 722E                <1>     jc .exitFast
   255 00000BB7 85C0                <1>     test eax, eax   ;Now eax = DATA [ebx]. If 0, this is free!
   256 00000BB9 7424                <1>     jz .freeFnd
   257 00000BBB 678D4301            <1>     lea eax, dword [ebx + 1]    ;Else, get sequentially the next cluster
   258                              <1>     ;If these are equal, we've gone through the whole FAT. Disk full!
   259 00000BBF 3B452D              <1>     cmp eax, dword [rbp + dpb.dNextFreeClst]
   260 00000BC2 740F                <1>     je .diskFull    
   261                              <1>     ;Are we past the max cluster address?
   262 00000BC4 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   263 00000BC7 76E5                <1>     jbe .lp ;If not, use this next cluster value!
   264                              <1> ;Else, we are past end of the disk. Start from 2 again or disk full?
   265 00000BC9 B802000000          <1>     mov eax, 2  ;Default to search from 2 again
   266                              <1>     ;If the firstfreecluster = 2, then we've searched everything. Fail.
   267 00000BCE 39452D              <1>     cmp dword [rbp + dpb.dNextFreeClst], eax    
   268 00000BD1 75DB                <1>     jne .lp
   269                              <1> .diskFull:
   270                              <1> ;Set free cluster count to 0 and first free cluster to -1
   271 00000BD3 C7453100000000      <1>     mov dword [rbp + dpb.dFreeClustCnt], 0  ;Set the free clusters
   272 00000BDA BBFFFFFFFF          <1>     mov ebx, -1     ;Set cluster value to -1
   273                              <1> .freeFnd:
   274 00000BDF 89D8                <1>     mov eax, ebx    ;Get the free cluster value into eax
   275 00000BE1 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax    ;Save first free cluster!
   276 00000BE4 F8                  <1>     clc
   277                              <1> .exitFast:
   278 00000BE5 5D                  <1>     pop rbp
   279 00000BE6 5A                  <1>     pop rdx
   280 00000BE7 5B                  <1>     pop rbx
   281                              <1>     return
    13                              <2> %%_ret:
    14 00000BE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> findFreeClusterData:
   284                              <1> ;Walks the FAT to find a free cluster and returns the 
   285                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   286                              <1> ; Also finds NumberOfFreeClusters, if it is unknown. 
   287                              <1> ; Both fields get filled in the workingDPB
   288                              <1> ;Works on the workingDPB
   289                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   290 00000BE9 53                  <1>     push rbx
   291 00000BEA 51                  <1>     push rcx
   292 00000BEB 52                  <1>     push rdx
   293 00000BEC 55                  <1>     push rbp
   294 00000BED 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   295 00000BF4 E82DFEFFFF          <1>     call getFATtype
   296 00000BF9 81F902000000        <1>     cmp ecx, 2  ;If not FAT32, always get afresh
   297 00000BFF 7512                <1>     jne .getNew
   298                              <1>     ;Else, if either entry is unknown, get both!
   299 00000C01 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   300 00000C08 7409                <1>     je .getNew
   301 00000C0A 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dNextFreeClst], -1
   302 00000C11 7543                <1>     jne .exit
   303                              <1> .getNew:
   304                              <1>     ;Reset this data. Get first free cluster
   305 00000C13 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1
   306 00000C1A C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1
   307 00000C21 E863FFFFFF          <1>     call findFreeCluster
   308 00000C26 7237                <1>     jc .exitFail
   309 00000C28 C7453100000000      <1>     mov dword [rbp + dpb.dFreeClustCnt], 0  ;Set to 0 for new count
   310 00000C2F 3DFFFFFFFF          <1>     cmp eax, -1 ;First free cluster = -1 means disk full!
   311 00000C34 7420                <1>     je .exit
   312                              <1>     ;Else, eax has the first free cluster. Keep reading FAT
   313 00000C36 E865020000          <1>     call incrementFreeClusterCount  ;Increment the count for the first clust!
   314                              <1> .lp:
   315 00000C3B 89C3                <1>     mov ebx, eax    ;Save the cluster number
   316 00000C3D E8E1000000          <1>     call readFAT    ;Get dereferenced value in eax
   317 00000C42 721B                <1>     jc .exitFail
   318 00000C44 85C0                <1>     test eax, eax
   319 00000C46 7505                <1>     jnz .notFree
   320 00000C48 E853020000          <1>     call incrementFreeClusterCount  ;Increment the count!
   321                              <1> .notFree:
   322 00000C4D 678D4301            <1>     lea eax, dword [ebx + 1]    ;Get the next consecutive cluster
   323 00000C51 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   324 00000C54 76E5                <1>     jbe .lp
   325                              <1> .exit:
   326 00000C56 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]  ;Get first free cluster in eax
   327 00000C59 E8FC020000          <1>     call writeFSInfoSector
   328 00000C5E F8                  <1>     clc
   329                              <1> .exitFail:      ;Keep carry flag
   330 00000C5F 5D                  <1>     pop rbp
   331 00000C60 5A                  <1>     pop rdx
   332 00000C61 59                  <1>     pop rcx
   333 00000C62 5B                  <1>     pop rbx
   334                              <1>     return
    13                              <2> %%_ret:
    14 00000C63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   335                              <1> 
   336                              <1> getNextSectorOfFile:
   337                              <1> ;This function will return the next sector of a file in rax
   338                              <1> ;If the next sector to be read lives in the next cluster, it will update
   339                              <1> ; the vars appropriately
   340                              <1> ;
   341                              <1> ;Input: rbp = dpb pointer
   342                              <1> ;Output:
   343                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   344                              <1> ;           If ZF=ZE => [currClustF] = Last Cluster of File.
   345                              <1> ;       CF=CY => Critical error occurred and was FAILed
   346                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   347                              <1> ; next cluster and read first sector 
   348                              <1>     ;Check if we need to go to next cluster
   349 00000C64 8A05(5C070000)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   350 00000C6A 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   351 00000C6D 741C                <1>     je .gotoNextCluster
   352                              <1>     ;Goto next sector in same cluster
   353 00000C6F FE05(5C070000)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   354 00000C75 48FF05(5D070000)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   355 00000C7C 488B05(5D070000)    <1>     mov rax, qword [currSectD]
   356                              <1> .exit:
   357 00000C83 50                  <1>     push rax
   358 00000C84 31C0                <1>     xor eax, eax
   359 00000C86 FFC0                <1>     inc eax ;Ensure ZF=NZ
   360 00000C88 58                  <1>     pop rax
   361 00000C89 F8                  <1>     clc     ;And CF=NC
   362                              <1>     return
    13                              <2> %%_ret:
    14 00000C8A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   363                              <1> .gotoNextCluster:
   364 00000C8B 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   365 00000C91 E88D000000          <1>     call readFAT
   366                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000C96 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000C98 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   367                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   368 00000C99 3DFFFFFFFF          <1>     cmp eax, -1 ;ZF=ZE and CF=NC if they are equal
   369                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000C9E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000CA0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   370                              <1> ;Update the new cluster and sector information
   371 00000CA1 8905(54070000)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   372 00000CA7 FF05(50070000)      <1>     inc dword [currClustF]   ;Goto next file cluster
   373 00000CAD E8DFFDFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   374 00000CB2 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save it
   375 00000CB9 C605(5C070000)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   376 00000CC0 EBC1                <1>     jmp short .exit
   377                              <1> 
   378                              <1> 
   379                              <1> truncateFAT:
   380                              <1> ;Same as below but always sets the cluster we are unlinking at to EOC.
   381                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   382                              <1> ;       rbp = Current DPB to use for disk
   383                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   384 00000CC2 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   385 00000CC3 56                  <1>     push rsi
   386 00000CC4 E82B000000          <1>     call freeChainFAT   ;Preserves eax, frees the full chain.
   387 00000CC9 721B                <1>     jc .exit
   388 00000CCB BEFFFFFFFF          <1>     mov esi, -1         ;Realloc the cluster we are freeing from as EOC
   389 00000CD0 50                  <1>     push rax            ;Save the cluster we are writing at
   390 00000CD1 E8F9000000          <1>     call writeFAT
   391 00000CD6 58                  <1>     pop rax
   392 00000CD7 720D                <1>     jc .exit
   393 00000CD9 E8D1010000          <1>     call decrementFreeClusterCount  ;Remove it from the free cluster count!
   394                              <1> .setFree:
   395                              <1> ;Do this stuff here, because we want to update the free count too!
   396 00000CDE 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax ;And set this to search from
   397 00000CE1 E874020000          <1>     call writeFSInfoSector  ;New first free cluster values
   398                              <1> .exit:
   399 00000CE6 5E                  <1>     pop rsi
   400 00000CE7 58                  <1>     pop rax
   401                              <1>     return
    13                              <2> %%_ret:
    14 00000CE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   402                              <1> unlinkFAT:
   403                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   404                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   405                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   406                              <1> ; cluster must be set to EOC before this proc is called.
   407                              <1> ;Stops at first invalid cluster number.
   408                              <1> ;
   409                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   410                              <1> ;       rbp = Current DPB to use for disk
   411                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   412                              <1> 
   413 00000CE9 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   414 00000CEA 56                  <1>     push rsi
   415                              <1> ;The below call decrements the cluster count for the full chain freed including
   416                              <1> ; the starting cluster address.
   417 00000CEB E804000000          <1>     call freeChainFAT    ;Preserved eax. May set eax to first free cluster.
   418 00000CF0 73EC                <1>     jnc truncateFAT.setFree ;Set the first free sector to eax
   419 00000CF2 EBF2                <1>     jmp short truncateFAT.exit  ;If an error, skip updating the FSInfo sector
   420                              <1> 
   421                              <1> freeChainFAT:
   422                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   423                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   424                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   425                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   426                              <1> ;Stops at first invalid cluster number.
   427                              <1> ;
   428                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   429                              <1> ;       rbp = Current DPB to use for disk
   430                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   431 00000CF4 50                  <1>     push rax
   432 00000CF5 53                  <1>     push rbx
   433 00000CF6 51                  <1>     push rcx
   434 00000CF7 56                  <1>     push rsi
   435 00000CF8 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   436                              <1> .lp:
   437 00000CFA E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   438 00000CFF 721D                <1>     jc .exit    ;Error exit
   439 00000D01 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   440 00000D03 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   441 00000D04 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   442 00000D06 E8C4000000          <1>     call writeFAT
   443 00000D0B 7211                <1>     jc .exit    ;Error exit
   444 00000D0D E88E010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   445 00000D12 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   446 00000D18 7404                <1>     je .exit
   447 00000D1A 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   448 00000D1C EBDC                <1>     jmp short .lp
   449                              <1> .exit:
   450 00000D1E 5E                  <1>     pop rsi
   451 00000D1F 59                  <1>     pop rcx
   452 00000D20 5B                  <1>     pop rbx
   453 00000D21 58                  <1>     pop rax
   454                              <1>     return
    13                              <2> %%_ret:
    14 00000D22 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   455                              <1> readFAT:
   456                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   457                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   458                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   459                              <1> ;       rbp = DPB
   460                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   461                              <1> ;If carry set, getBuffer failed!
   462 00000D23 53                  <1>     push rbx
   463 00000D24 51                  <1>     push rcx
   464 00000D25 52                  <1>     push rdx
   465 00000D26 57                  <1>     push rdi
   466 00000D27 55                  <1>     push rbp
   467 00000D28 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   468 00000D2A E816FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   469                              <1>     ;and FAT type in ecx
   470 00000D2F E8D3FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   471 00000D34 7232                <1>     jc .exitFail
   472                              <1>     ;Check if FAT 12, 16, 32
   473 00000D36 85C9                <1>     test ecx, ecx
   474 00000D38 7434                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   475 00000D3A F7C101000000        <1>     test ecx, 1
   476 00000D40 740E                <1>     jz .goToNextClusterFat32
   477                              <1>     ;Here we handle FAT16
   478 00000D42 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   479 00000D47 3DF7FF0000          <1>     cmp eax, 0FFF7h  ;Valid cluster number?
   480 00000D4C 7219                <1>     jb .exit
   481 00000D4E EB0B                <1>     jmp short .eocExit
   482                              <1> .goToNextClusterFat32:
   483 00000D50 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   484 00000D54 3DF7FFFF0F          <1>     cmp eax, 0FFFFFF7h ;First reserved value. Any Reserved number = EOC
   485 00000D59 7207                <1>     jb .validCluster32   
   486                              <1> .eocExit:
   487 00000D5B B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   488 00000D60 EB05                <1>     jmp short .exit
   489                              <1> .validCluster32:
   490 00000D62 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   491                              <1> .exit:
   492 00000D67 F8                  <1>     clc
   493                              <1> .exitFail:
   494 00000D68 5D                  <1>     pop rbp
   495 00000D69 5F                  <1>     pop rdi
   496 00000D6A 5A                  <1>     pop rdx
   497 00000D6B 59                  <1>     pop rcx
   498 00000D6C 5B                  <1>     pop rbx
   499                              <1>     return
    13                              <2> %%_ret:
    14 00000D6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .gotoNextClusterFat12:
   501                              <1> ;eax has the sector number of the FAT
   502                              <1> ;edx has byte offset into the sector
   503                              <1> ;edi has current cluster number
   504                              <1> ;rbx has ptr to buffer header
   505 00000D6E 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   506 00000D72 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   507 00000D78 741C                <1>     jz .gotoNextClusterFat12Even
   508                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   509 00000D7A 29D1                <1>     sub ecx, edx
   510 00000D7C FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   511 00000D7E 750C                <1>     jnz .gotoNextClusterFat12OddNoX
   512 00000D80 E833000000          <1>     call .xBndry        ;Boundary cross, build entry properly
   513 00000D85 72E1                <1>     jc .exitFail    
   514 00000D87 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   515 00000D8A EB23                <1>     jmp short .checkIfLastFAT12Cluster
   516                              <1> .gotoNextClusterFat12OddNoX:
   517 00000D8C 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   518 00000D91 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   519 00000D94 EB19                <1>     jmp short .checkIfLastFAT12Cluster
   520                              <1> .gotoNextClusterFat12Even:
   521 00000D96 29D1                <1>     sub ecx, edx
   522 00000D98 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   523 00000D9A 7509                <1>     jnz .gotoNextClusterFat12EvenNoX
   524 00000D9C E817000000          <1>     call .xBndry    ;Save the lower three nybbles
   525 00000DA1 72C5                <1>     jc .exitFail
   526 00000DA3 EB05                <1>     jmp short .evenCmn
   527                              <1> .gotoNextClusterFat12EvenNoX:
   528                              <1>     ;Here the cluster is even and can't cross a sector boundary
   529 00000DA5 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   530                              <1> .evenCmn:
   531 00000DAA 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   532                              <1> .checkIfLastFAT12Cluster:
   533 00000DAF 3DF70F0000          <1>     cmp eax, 0FF7h   ;Is it below the first invalid cluster number?
   534 00000DB4 72B1                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   535 00000DB6 EBA3                <1>     jmp short .eocExit
   536                              <1> .xBndry:
   537                              <1> ;Gets a word that goes across a boundary in ax. It is left to the caller it 
   538                              <1> ; do what they will with it. If CF=CY on return, something went wrong.
   539 00000DB8 0FB65C1320          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   540 00000DBD FFC0                <1>     inc eax ;Get next FAT sector
   541 00000DBF 53                  <1>     push rbx
   542 00000DC0 E842FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   543 00000DC5 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   544                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000DC6 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000DC8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   545 00000DC9 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   546 00000DCB 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   547                              <1>     return
    13                              <2> %%_ret:
    14 00000DCE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   548                              <1> 
   549                              <1> writeFAT:
   550                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   551                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   552                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   553                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   554                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   555 00000DCF 53                  <1>     push rbx
   556 00000DD0 51                  <1>     push rcx
   557 00000DD1 52                  <1>     push rdx
   558 00000DD2 56                  <1>     push rsi
   559 00000DD3 57                  <1>     push rdi
   560 00000DD4 55                  <1>     push rbp
   561 00000DD5 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   562 00000DD7 E869FCFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   563                              <1>     ;and FAT type in ecx
   564 00000DDC E826FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   565 00000DE1 7223                <1>     jc .exitFail
   566                              <1>     ;Check if FAT 12, 16, 32
   567 00000DE3 85C9                <1>     test ecx, ecx
   568 00000DE5 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   569 00000DE7 F7C101000000        <1>     test ecx, 1
   570 00000DED 7407                <1>     jz .goToNextClusterFat32
   571                              <1>     ;Here we handle FAT16
   572 00000DEF 6689741320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   573 00000DF4 EB0A                <1>     jmp short .exit
   574                              <1> .goToNextClusterFat32:
   575 00000DF6 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   576 00000DFC 89741320            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   577                              <1> .exit:
   578 00000E00 E8A2FAFFFF          <1>     call markBufferDirty
   579 00000E05 F8                  <1>     clc
   580                              <1> .exitFail:
   581 00000E06 5D                  <1>     pop rbp
   582 00000E07 5F                  <1>     pop rdi
   583 00000E08 5E                  <1>     pop rsi
   584 00000E09 5A                  <1>     pop rdx
   585 00000E0A 59                  <1>     pop rcx
   586 00000E0B 5B                  <1>     pop rbx
   587                              <1>     return
    13                              <2> %%_ret:
    14 00000E0C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   588                              <1> .gotoNextClusterFat12:
   589                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   590                              <1> ;eax has the sector number of the FAT
   591                              <1> ;edx has byte offset into the sector
   592                              <1> ;edi has current cluster number
   593                              <1> ;rbx has ptr to buffer header
   594 00000E0D 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   595 00000E11 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   596 00000E17 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   597 00000E1D 7432                <1>     jz .gotoNextClusterFat12Even
   598                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   599 00000E1F 29D1                <1>     sub ecx, edx
   600 00000E21 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   601 00000E23 7556                <1>     jnz .gotoNextClusterFat12OddNoX
   602                              <1>     ;Boundary cross, build entry properly
   603                              <1>     ;Replace the high nybble of the low byte
   604 00000E25 0FB64C1320          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   605 00000E2A 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   606 00000E30 C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   607 00000E33 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   608 00000E35 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   609 00000E38 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   610 00000E3C E866FAFFFF          <1>     call markBufferDirty
   611 00000E41 FFC0                <1>     inc eax ;Get next FAT sector
   612 00000E43 E8BFFBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   613 00000E48 72BC                <1>     jc .exitFail
   614 00000E4A 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   615 00000E4C 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   616 00000E4F EBAF                <1>     jmp short .exit
   617                              <1> .gotoNextClusterFat12Even:
   618 00000E51 29D1                <1>     sub ecx, edx
   619 00000E53 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   620 00000E55 7533                <1>     jnz .gotoNextClusterFat12EvenNoX
   621 00000E57 89F1                <1>     mov ecx, esi
   622 00000E59 80E50F              <1>     and ch, 0Fh ;Save only the lower nybble of ch
   623 00000E5C 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl   ;Store the first byte
   624 00000E60 E842FAFFFF          <1>     call markBufferDirty
   625 00000E65 FFC0                <1>     inc eax ;Get next FAT sector
   626 00000E67 E89BFBFFFF          <1>     call getBufForFat
   627 00000E6C 7298                <1>     jc .exitFail
   628 00000E6E 8A4B20              <1>     mov cl, byte [rbx + bufferHdr.dataarea] ;Get the first data byte from buffer
   629 00000E71 80E1F0              <1>     and cl, 0F0h    ;Clear the lower nybble of this entry
   630 00000E74 08E9                <1>     or cl, ch       ;Add our entry in
   631 00000E76 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl ;Write it back
   632 00000E79 EB85                <1>     jmp short .exit    
   633                              <1> .gotoNextClusterFat12OddNoX:
   634 00000E7B 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   635 00000E80 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   636 00000E85 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   637 00000E88 EB0A                <1>     jmp short .fat12common
   638                              <1> .gotoNextClusterFat12EvenNoX:
   639                              <1>     ;Here the cluster is even and can't cross a sector boundary
   640 00000E8A 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   641 00000E8F 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   642                              <1> .fat12common:
   643 00000E94 09F0                <1>     or eax, esi     ;Add the new entry bits
   644 00000E96 6689441320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   645 00000E9B E960FFFFFF          <1>     jmp .exit
   646                              <1> 
   647                              <1> incrementFreeClusterCount:
   648                              <1> ;Cluster Deallocated Function
   649 00000EA0 9C                  <1>     pushfq
   650 00000EA1 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   651 00000EA8 7403                <1>     je .exit
   652 00000EAA FF4531              <1>     inc dword [rbp + dpb.dFreeClustCnt]
   653                              <1> .exit:
   654 00000EAD 9D                  <1>     popfq
   655                              <1>     return
    13                              <2> %%_ret:
    14 00000EAE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   656                              <1> decrementFreeClusterCount:
   657                              <1> ;Cluster Allocated Function
   658 00000EAF 9C                  <1>     pushfq
   659 00000EB0 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   660 00000EB7 7403                <1>     je .exit
   661 00000EB9 FF4D31              <1>     dec dword [rbp + dpb.dFreeClustCnt]
   662                              <1> .exit:
   663 00000EBC 9D                  <1>     popfq
   664                              <1>     return
    13                              <2> %%_ret:
    14 00000EBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   665                              <1> 
   666                              <1> getBytesPerCluster:
   667                              <1> ;Gets the bytes per cluster
   668                              <1> ;Input: rbp -> Current DPB
   669                              <1> ;Output: ecx = Total bytes per cluster
   670 00000EBE 50                  <1>     push rax
   671 00000EBF 52                  <1>     push rdx
   672 00000EC0 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   673 00000EC4 0FB64D04            <1>     movzx ecx, byte [rbp + dpb.bMaxSectorInCluster]
   674 00000EC8 FFC1                <1>     inc ecx
   675 00000ECA F7E1                <1>     mul ecx
   676 00000ECC 89C1                <1>     mov ecx, eax
   677 00000ECE 5A                  <1>     pop rdx
   678 00000ECF 58                  <1>     pop rax
   679                              <1>     return
    13                              <2> %%_ret:
    14 00000ED0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   680                              <1> 
   681                              <1> readFSInfoSector:
   682                              <1> ;Given a DPB, will attempt to read the FS Info sector. Destroys all regs.
   683                              <1> ;Input: rbp -> DPB pointer for FAT32 volume. Silently returns ok
   684                              <1> ;               if the DPB is not FAT32.
   685                              <1> ;       rsi -> BPB for the FAT32 volume.
   686                              <1> ;Output: rbp -> DPB dNextFreeClst and dNumberOfFreeCluster fields
   687                              <1> ;               correctly filled in from the FSInfo sector, if appropriate.
   688 00000ED1 51                  <1>     push rcx
   689 00000ED2 E84FFBFFFF          <1>     call getFATtype
   690 00000ED7 81F902000000        <1>     cmp ecx, 2  ;Is the DPB a FAT32 DPB?
   691 00000EDD 59                  <1>     pop rcx
   692 00000EDE 7578                <1>     jne .exit
   693                              <1> ;Only read the FSinfo sector if the drive has never been accessed before!
   694 00000EE0 F64524FF            <1>     test byte [rbp + dpb.bAccessFlag], -1
   695 00000EE4 7472                <1>     jz .exit
   696 00000EE6 0FB74625            <1>     movzx eax, word [rsi + bpb32.FSinfo]    ;Get the FSInfo sector number
   697 00000EEA 85C0                <1>     test eax, eax   ;0 is an invalid value for this 
   698                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000EEC 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000EEE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   699 00000EEF 3DFFFF0000          <1>     cmp eax, 0FFFFh ;If this is unknown, return
   700                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000EF4 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000EF6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   701 00000EF7 48892D(0A070000)    <1>     mov qword [workingDPB], rbp ;Set this because it isnt set yet!
   702 00000EFE E8FFFAFFFF          <1>     call getBufForDOS   ;Now get the sector number
   703                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F03 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F05 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   704                              <1>     ;Now sanity check the sector data itself
   705 00000F06 817B2052526141      <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.leadSig], fsInfoSig1
   706 00000F0D 7549                <1>     jne .exit
   707 00000F0F 81BB04020000727241- <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.strucSig], fsInfoSig2
   707 00000F18 61                  <1>
   708 00000F19 753D                <1>     jne .exit
   709 00000F1B 81BB1C020000000055- <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.trailSig], fsInfoSig3
   709 00000F24 AA                  <1>
   710 00000F25 7531                <1>     jne .exit
   711                              <1> ;Here we can assume the struct is accessible. 
   712                              <1> ;We sanity check the struct values to ensure they are possible.
   713                              <1> ;We reset with some sane defaults in the event of bad data
   714 00000F27 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1  ;Start is default (clust 2)
   715 00000F2E C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1  ;Unknown
   716                              <1>     ;Start with next free check
   717 00000F35 8B830C020000        <1>     mov eax, dword [rbx + bufferHdr.dataarea + FSInfo.nextFree] 
   718 00000F3B 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   719 00000F3E 770A                <1>     ja .skipFirstFree
   720 00000F40 3D02000000          <1>     cmp eax, 2
   721 00000F45 7203                <1>     jb .skipFirstFree
   722 00000F47 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax
   723                              <1> .skipFirstFree:
   724                              <1>     ;Now we do free count check
   725 00000F4A 8B8308020000        <1>     mov eax, dword [rbx + bufferHdr.dataarea + FSInfo.freeCount]
   726 00000F50 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   727 00000F53 7703                <1>     ja .exit
   728 00000F55 894531              <1>     mov dword [rbp + dpb.dFreeClustCnt], eax
   729                              <1> .exit:
   730 00000F58 F8                  <1>     clc
   731                              <1>     return
    13                              <2> %%_ret:
    14 00000F59 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   732                              <1> 
   733                              <1> writeFSInfoSector:
   734                              <1> ;Will write an FS Info sector back to the disk.
   735                              <1> ;Input: rbp -> DPB of the disk we are writing the FSInfo date for.
   736                              <1> ;Output: CF=NC: Updated FSInfo fields if FAT32. CF=CY: Error reading disk
   737                              <1> 
   738 00000F5A 51                  <1>     push rcx
   739 00000F5B E8C6FAFFFF          <1>     call getFATtype
   740 00000F60 81F902000000        <1>     cmp ecx, 2  ;Is the DPB a FAT32 DPB?
   741 00000F66 59                  <1>     pop rcx
   742 00000F67 F8                  <1>     clc         ;Clear the CF flag if not FAT32
   743                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F68 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F6A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   744                              <1> 
   745 00000F6B 50                  <1>     push rax
   746 00000F6C 53                  <1>     push rbx
   747 00000F6D 51                  <1>     push rcx
   748 00000F6E 52                  <1>     push rdx
   749 00000F6F 56                  <1>     push rsi
   750 00000F70 57                  <1>     push rdi
   751                              <1> 
   752 00000F71 31C0                <1>     xor eax, eax        ;Get sector 0
   753 00000F73 E88AFAFFFF          <1>     call getBufForDOS   ;Get a buffer Sector 0 pointed to be rbx
   754 00000F78 0F8281000000        <1>     jc .exit
   755 00000F7E 0FB74345            <1>     movzx eax, word [rbx + bufferHdr.dataarea + bpb32.FSinfo]
   756 00000F82 85C0                <1>     test eax, eax
   757 00000F84 7479                <1>     jz .exit
   758 00000F86 3DFFFF0000          <1>     cmp eax, 0FFFFh ;If this is unknown, return
   759 00000F8B 7472                <1>     je .exit
   760                              <1> ;First compute where the backup FSInfo is
   761 00000F8D 89C1                <1>     mov ecx, eax    ;(e)ax has FSInfo sector number
   762 00000F8F 66034B47            <1>     add cx, word [rbx + bufferHdr.dataarea + bpb32.BkBootSec]    
   763                              <1>     ;cx now has the backup sector
   764                              <1> ;If they are equal, because backup boot sector is 0, set ecx to -1
   765 00000F93 39C1                <1>     cmp ecx, eax
   766 00000F95 BAFFFFFFFF          <1>     mov edx, -1
   767 00000F9A 0F44CA              <1>     cmove ecx, edx  ;Set ecx to -1 to avoid writing the same sector twice
   768                              <1>     
   769 00000F9D 51                  <1>     push rcx            ;Save the backup FSInfo sector value
   770 00000F9E E85FFAFFFF          <1>     call getBufForDOS   ;Now get the primary FSInfo sector
   771 00000FA3 5F                  <1>     pop rdi             ;Return the backup FSInfo sector value in rdi
   772 00000FA4 7259                <1>     jc .exit
   773                              <1> 
   774 00000FA6 31F6                <1>     xor esi, esi    ;Use as a dirty marker
   775 00000FA8 8B4D31              <1>     mov ecx, dword [rbp + dpb.dFreeClustCnt]
   776 00000FAB 398B08020000        <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], ecx
   777 00000FB1 7408                <1>     je .checkFirst
   778                              <1>     ;Update the value
   779 00000FB3 898B08020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], ecx 
   780 00000FB9 FFC6                <1>     inc esi
   781                              <1> .checkFirst:
   782 00000FBB 8B4D2D              <1>     mov ecx, dword [rbp + dpb.dNextFreeClst]
   783 00000FBE 398B0C020000        <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], ecx
   784 00000FC4 7408                <1>     je .checkFlush
   785 00000FC6 898B0C020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], ecx
   786 00000FCC FFC6                <1>     inc esi
   787                              <1> .checkFlush:
   788 00000FCE 85F6                <1>     test esi, esi   ;If this is zero, we didn't write new values. Return
   789 00000FD0 742D                <1>     jz .exit
   790 00000FD2 E8D0F8FFFF          <1>     call markBufferDirty    ;Else, the sector is dirty. Mark for flushing!
   791                              <1>     ;Now since we have a dirty sector, we need to sync the backup sector too!
   792 00000FD7 81FFFFFFFFFF        <1>     cmp edi, -1 ;Do we have a backup sector? If not, simply return
   793 00000FDD 7420                <1>     je .exit
   794 00000FDF 89F8                <1>     mov eax, edi    ;Else get the backup FSInfo sector value in eax
   795 00000FE1 E81CFAFFFF          <1>     call getBufForDOS   ;Now get the sector pointer   
   796 00000FE6 7217                <1>     jc .exit            ;Fail to sync if this fails
   797                              <1>     ;Now we know there is something to write so write it!
   798                              <1>     ;Also CF=NC here
   799 00000FE8 8B4531              <1>     mov eax, dword [rbp + dpb.dFreeClustCnt]
   800 00000FEB 898308020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], eax 
   801 00000FF1 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]
   802 00000FF4 89830C020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], eax
   803 00000FFA E8A8F8FFFF          <1>     call markBufferDirty    ;Mark this buffer as dirty too
   804                              <1> .exit:
   805 00000FFF 5F                  <1>     pop rdi
   806 00001000 5E                  <1>     pop rsi
   807 00001001 5A                  <1>     pop rdx
   808 00001002 59                  <1>     pop rcx
   809 00001003 5B                  <1>     pop rbx
   810 00001004 58                  <1>     pop rax
   811                              <1>     return
    13                              <2> %%_ret:
    14 00001005 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                                  %include "./src/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00001006 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 0000100D F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00001010 7408                <1>     jz .notNet
     6 00001012 B81C110000          <1>     mov eax, 0111Ch ;Network find next
     7 00001017 CD2F                <1>     int 2Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00001019 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 0000101A C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    11 00001021 E889680000          <1>     call dosCrit1Enter
    12 00001026 488D05(7A060000)    <1>     lea rax, tmpCDS
    13 0000102D 488905(12070000)    <1>     mov qword [workingCDS], rax ;Set the working CDS to be the tmp cds!
    14 00001034 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]   ;Get 1 based number back!
    15 00001036 0440                <1>     add al, "@"  ;Convert into letter
    16 00001038 E81E640000          <1>     call buildNewCDS     ;Build a new CDS bypassing the real CDS!
    17 0000103D 7235                <1>     jc .critError   ;Return error if this fails
    18 0000103F 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
    19 00001046 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr] 
    20 0000104A E832630000          <1>     call setWorkingDPB
    21 0000104F 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]
    22 00001053 8805(09070000)      <1>     mov byte [workingDrv], al
    23                              <1>     ;mov byte [delChar], 0E5h
    24 00001059 C605(E4060000)00    <1>     mov byte [fcbName + 11], 0  ;Set to this being a file we are searching for
    25 00001060 C605(69040000)FF    <1>     mov byte [fileDirFlag], -1  ;Set to searching for a file!
    26 00001067 E80F000000          <1>     call searchMoreDir  ;Now find the next one!
    27 0000106C 7206                <1>     jc .critError   ;Return error if this fails
    28                              <1> .errExit:
    29 0000106E E846680000          <1>     call dosCrit1Exit
    30                              <1>     return
    13                              <2> %%_ret:
    14 00001073 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> .critError:
    32 00001074 B812000000          <1>     mov eax, errNoFil
    33 00001079 EBF3                <1>     jmp short .errExit
    34                              <1> searchMoreDir:
    35                              <1> ;The three directory variables are set up from the ffblock. 
    36                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    37                              <1> ;Current DTA is also used to contain the ff block address
    38                              <1> ;All registers can be trashed
    39 0000107B 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    40                              <1>     ;First copy the search template back then setup dirClustA and dirSect vars
    41 00001082 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
    42 00001089 57                  <1>     push rdi
    43 0000108A 488D7701            <1>     lea rsi, qword [rdi + ffBlock.template]
    44 0000108E 488D3D(D9060000)    <1>     lea rdi, fcbName
    45 00001095 B90B000000          <1>     mov ecx, 11
    46 0000109A F3A4                <1>     rep movsb   ;Get copy the search template!
    47 0000109C 5F                  <1>     pop rdi
    48 0000109D F6471540            <1>     test byte [rdi + ffBlock.attribFnd], dirCharDev  ;Did we find a char dev?
    49 000010A1 0F85F0000000        <1>     jnz .errorExit                              ;No more files if so!!
    50 000010A7 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    51 000010AA 8805(FC060000)      <1>     mov byte [searchAttr], al   ;... and save it!
    52 000010B0 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    53 000010B3 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    54 000010B9 8905(7B070000)      <1>     mov dword [dirClustPar], eax
    55                              <1>     ;Get number of 32 byte entries in a sector
    56 000010BF 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    57 000010C2 3DFFFFFFFF          <1>     cmp eax, -1 ;If this is an invalid value, exit error!
    58 000010C7 0F84CA000000        <1>     je .errorExit
    59 000010CD 8905(85070000)      <1>     mov dword [dirEntry], eax
    60                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    61 000010D3 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    62                              <1>     ;Now get bytes per cluster
    63 000010D6 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    64 000010D8 813D(7F070000)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    64 000010E0 0000                <1>
    65 000010E2 0F8492000000        <1>     je .oldFat
    66 000010E8 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    67 000010EC 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSecPerClustShift]
    68 000010F0 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    69 000010F2 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    70 000010F4 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    71 000010F6 31D2                <1>     xor edx, edx
    72 000010F8 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    73                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    74                              <1>     ;edx has byte offset into cluster (or Root dir)
    75 000010FA 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    76                              <1>     ;Now compute sector offset into cluster
    77 000010FC 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    78 00001100 89D0                <1>     mov eax, edx    ;Move offset into cluster
    79 00001102 31D2                <1>     xor edx, edx
    80 00001104 F7F1                <1>     div ecx 
    81                              <1>     ;eax now has sector offset into cluster
    82                              <1>     ;edx has byte offset into sector 
    83 00001106 668905(83070000)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    84 0000110D 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    85                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    86 00001113 89D9                <1>     mov ecx, ebx
    87 00001115 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    88                              <1> .fatlp:
    89 00001118 E806FCFFFF          <1>     call readFAT
    90 0000111D 3DFFFFFFFF          <1>     cmp eax, -1
    91 00001122 7473                <1>     je .errorExit
    92 00001124 FFC9                <1>     dec ecx
    93 00001126 75F0                <1>     jnz .fatlp
    94 00001128 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    95                              <1> .skipFatWalk:
    96 0000112E 488D05BC000000      <1>     lea rax, searchDir.nextEp
    97 00001135 50                  <1>     push rax    ;Push the return address onto stack
    98 00001136 8B05(7F070000)      <1>     mov eax, dword [dirClustA]
    99 0000113C E850F9FFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   100 00001141 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   101 00001148 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   102                              <1> .common:
   103 0000114B E8BCF8FFFF          <1>     call getBufForDir
   104 00001150 0F826B010000        <1>     jc searchDir.fnfError
   105 00001156 E86A010000          <1>     call prepSectorSearch  ;rbx has the buffer ptr for this dir sector
   106                              <1>     ;Gets also in ecx the # of 32 byte entries a sector
   107 0000115B 8B05(85070000)      <1>     mov eax, dword [dirEntry]   ;Get 32 byte offset into directory
   108                              <1>     ;Need to convert into an offset into this sector
   109 00001161 52                  <1>     push rdx
   110 00001162 31D2                <1>     xor edx, edx
   111 00001164 F7F1                <1>     div ecx     ;Divide dirEntry by max entries in sector. Remainder in edx.
   112 00001166 29D1                <1>     sub ecx, edx ;Subtract the offset to get the number of entries left
   113 00001168 C1E205              <1>     shl edx, 5  ;Multiply by 32 to turn into bytes to add to rsi
   114 0000116B 4801D6              <1>     add rsi, rdx    ;rsi points to current entry in the sector.
   115 0000116E 5A                  <1>     pop rdx
   116                              <1>     ;We continue AS IF this entry was bad
   117                              <1>     ;Now setup al as upon normal entry 
   118 0000116F 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   119 00001175 E9C4010000          <1>     jmp findInBuffer.nextEntry ;Proceed from within to resume search properly!
   120                              <1>     ;The return address on the stack will return to the ep's pushed
   121                              <1> .oldFat:
   122                              <1> ;Old FAT 12/16 root dirs fall thru here only
   123                              <1> ;esi = byte ptr in root dir of entry
   124 0000117A 488D0509010000      <1>     lea rax, searchDir.oldNextEP
   125 00001181 50                  <1>     push rax    ;Push return address onto the stack
   126 00001182 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   127 00001186 31D2                <1>     xor edx, edx
   128 00001188 96                  <1>     xchg esi, eax
   129 00001189 F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   130                              <1>     ;eax = Sector number 
   131                              <1>     ;edx = Byte offset within the sector
   132 0000118B 668905(83070000)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   133 00001192 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   134 00001195 EBB4                <1>     jmp short .common
   135                              <1> .errorExit:
   136 00001197 F9                  <1>     stc
   137                              <1>     return
    13                              <2> %%_ret:
    14 00001198 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> searchDir:
   139                              <1> ;Called in a level 1 critical section. 
   140                              <1> ;The directory variables are set and fcbName has the pattern to match
   141                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   142                              <1> ;All registers can be trashed
   143                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   144                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   145                              <1> 
   146 00001199 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   147 000011A0 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   148 000011A7 F605(FC060000)08    <1>     test byte [searchAttr], dirVolumeID  ;If the attr has volid, intervene
   149 000011AE 7509                <1>     jnz .volIdSearch
   150 000011B0 F605(5F040000)FF    <1>     test byte [volIdFlag], -1  ;Is volid search override flag set?
   151 000011B7 7410                <1>     jz .notVolSearch    ;Skip the intervention if not set
   152                              <1> .volIdSearch:
   153                              <1> ;Here we do a volid search intervention. Always searches root dir.
   154 000011B9 F605(69040000)FF    <1>     test byte [fileDirFlag], -1 ;If we are going down path, avoid invervention
   155 000011C0 7407                <1>     jz .notVolSearch
   156 000011C2 31C0                <1>     xor eax, eax ;Search the root dir.
   157 000011C4 E89A060000          <1>     call prepSetupDirSearchVars
   158                              <1> .notVolSearch:
   159 000011C9 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   160 000011CF 85C0                <1>     test eax, eax
   161 000011D1 0F8498000000        <1>     jz .oldRoot
   162 000011D7 E8B5F8FFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   163                              <1> .sectorLoop:
   164 000011DC E82BF8FFFF          <1>     call getBufForDir
   165 000011E1 0F82DA000000        <1>     jc .fnfError
   166 000011E7 E8D9000000          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   167                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   168 000011EC E8E0000000          <1>     call findInBuffer
   169                              <1> .nextEp:
   170                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000011F1 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000011F3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   171 000011F4 0F84A8000000        <1>     jz .chardev    ;CF=CY AND ZF=ZE => File not found
   172                              <1>     ;If ZF=ZE then chardev (i.e. we hit an entry starting with 00)
   173                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   174                              <1>     ;IF however, the next cluster is -1, then we return fail
   175 000011FA 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   176 00001200 8905(54070000)      <1>     mov dword [currClustD], eax
   177 00001206 668B05(83070000)    <1>     mov ax, word [dirSect]
   178 0000120D 8805(5C070000)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   179 00001213 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   180 00001217 488905(5D070000)    <1>     mov qword [currSectD], rax  
   181 0000121E C705(50070000)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   181 00001226 0000                <1>
   182 00001228 E837FAFFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
   183 0000122D 0F828E000000        <1>     jc .fnfError
   184 00001233 746D                <1>     jz .chardev    ;We are at the end of the directory and didnt find the file
   185 00001235 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Store the sector number here
   186 0000123C 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector in cluster
   187 00001243 50                  <1>     push rax    ;Save the next sector we need to read
   188 00001244 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   189 0000124A 3B05(54070000)      <1>     cmp eax, dword [currClustD] ;Did it change?
   190 00001250 58                  <1>     pop rax
   191 00001251 7489                <1>     je .sectorLoop  ;If not, we advanced sectors only
   192 00001253 66C705(83070000)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   192 0000125B 00                  <1>
   193 0000125C 50                  <1>     push rax
   194 0000125D 8B05(54070000)      <1>     mov eax, dword [currClustD]
   195 00001263 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Put new cluster number in var
   196 00001269 58                  <1>     pop rax
   197 0000126A E96DFFFFFF          <1>     jmp .sectorLoop
   198                              <1> 
   199                              <1> .oldRoot:
   200                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   201                              <1> ; one large contiguous cluster.
   202                              <1> .oldSectorLp:
   203 0000126F 0FB705(83070000)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   204 00001276 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   205 00001279 E88EF7FFFF          <1>     call getBufForDir
   206 0000127E 7241                <1>     jc .fnfError
   207 00001280 E840000000          <1>     call prepSectorSearch      ;rbx has the buffer pointer for this dir sector
   208 00001285 E847000000          <1>     call findInBuffer
   209                              <1> .oldNextEP:
   210                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000128A 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000128C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   211 0000128D 7413                <1>     jz .chardev
   212 0000128F 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector in directory
   213 00001296 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   214 0000129A 3905(85070000)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   215 000012A0 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   216                              <1> .chardev:
   217                              <1> ;Now check for a char device ONLY if we are checking for file or dir!
   218                              <1> ;If exclusive dir on, fail!
   219 000012A2 F605(69040000)FF    <1>     test byte [fileDirFlag], -1 ;Set if file/dir. Clear if only dir!
   220 000012A9 7416                <1>     jz .fnfError    
   221 000012AB E8C0090000          <1>     call checkIfCharDevice
   222 000012B0 720F                <1>     jc .fnfError    ;Not a char dev? Exit!
   223 000012B2 E8F0090000          <1>     call buildCharDir
   224 000012B7 31F6                <1>     xor esi, esi        ;Clear the CF flag
   225 000012B9 488D35(5A060000)    <1>     lea rsi, curDirCopy ;Return with rsi pointing to the dir copy!
   226                              <1>     return
    13                              <2> %%_ret:
    14 000012C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> .fnfError:
   228 000012C1 F9                  <1>     stc
   229 000012C2 B012                <1>     mov al, errNoFil
   230                              <1>     return
    13                              <2> %%_ret:
    14 000012C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> prepSectorSearch:
   232                              <1> ;Input: rbx -> Buffer with Dir sector to search
   233                              <1> ;Output: rsi -> Start of the dir data area
   234                              <1> ;        ecx = Max number of 32 byte dir entries in sector buffer
   235 000012C5 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   236 000012C9 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   237 000012CD C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   238                              <1>     return
    13                              <2> %%_ret:
    14 000012D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> findInBuffer:
   241                              <1> ;Input:  rsi = Sector buffer data area
   242                              <1> ;        cx = Number of entries to check in the sector
   243                              <1> ;Output: CF=CY => No entries found
   244                              <1> ;        ZF=NE => Keep searching in subsequent directories
   245                              <1> ;        ZF=ZE => End of directory reached early, stop
   246                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   247                              <1> ;        rsi = Points to start of the disk buffer directory entry
   248 000012D1 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   249 000012D7 E8B5000000          <1>     call adjustSearchAttr   ;Adjust the search attributes, including volid
   250                              <1> .searchMainLp:
   251                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   252 000012DC 8A25(08070000)      <1>     mov ah, byte [delChar]
   253 000012E2 803E00              <1>     cmp byte [rsi], 00h
   254 000012E5 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   255 000012E7 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   256 000012E9 7510                <1>     jne .notLookingForEmpty
   257                              <1> .emptySlot:
   258                              <1> ;Here we check if we are looking for an empty directory entry or
   259                              <1> ; we have reached the end of the file (if the first byte is 00h)
   260                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   261 000012EB 3A25(D9060000)      <1>     cmp ah, byte [fcbName] 
   262                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000012F1 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000012F3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   263                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   264 000012F4 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   265 000012F7 7545                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   266 000012F9 F9                  <1>     stc
   267                              <1>     return
    13                              <2> %%_ret:
    14 000012FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   268                              <1> .notLookingForEmpty:
   269 000012FB 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   270 000012FE 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   271 00001301 F605(5F040000)FF    <1>     test byte [volIdFlag], -1   ;If this is set, intervene in search.
   272 00001308 7406                <1>     jz .notVolIdExclusive
   273 0000130A F6C408              <1>     test ah, dirVolumeID   ;If we are a volid, clear CF return
   274 0000130D 742F                <1>     jz .nextEntry
   275                              <1>     return
    13                              <2> %%_ret:
    14 0000130F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> .notVolIdExclusive:
   277                              <1> ;If any entry has the volid bit set, it is considered a VOL id only.
   278 00001310 803D(69040000)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   279 00001317 743C                <1>     je .exclusiveDir
   280 00001319 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume label?
   281 0000131B 743F                <1>     je .volFile ;If so, go here
   282 0000131D F6C408              <1>     test ah, dirVolumeID ;Is this file a vollbl that we are not looking for?
   283 00001320 751C                <1>     jnz .nextEntry
   284 00001322 84E4                <1>     test ah, ah ;Regular files are always accepted at this point!
   285 00001324 7408                <1>     jz .scanName
   286 00001326 3C16                <1>     cmp al, dirInclusive    ;Is this an inclusive search?
   287 00001328 7404                <1>     je .scanName            ;If so, we accept this file!
   288 0000132A 38C4                <1>     cmp ah, al              ;(ah=File bits)==(al=Search bits)?
   289 0000132C 7510                <1>     jne .nextEntry          ;If bits dont match now, we ignore entry
   290                              <1> .scanName:
   291                              <1> ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   292 0000132E 56                  <1>     push rsi
   293 0000132F 488D3D(D9060000)    <1>     lea rdi, fcbName ;Goto name template to search for
   294 00001336 E83E000000          <1>     call .nameCompare
   295 0000133B 5E                  <1>     pop rsi
   296 0000133C 7424                <1>     je .searchEntryFound
   297                              <1> .nextEntry:
   298                              <1> ;Go to next entry
   299 0000133E 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   300 00001345 FF05(85070000)      <1>     inc dword [dirEntry] ;And denote that in variable
   301 0000134B FFC9                <1>     dec ecx
   302 0000134D 758D                <1>     jnz .searchMainLp
   303                              <1> .badExit:
   304 0000134F 31C0                <1>     xor eax, eax
   305 00001351 FFC0                <1>     inc eax ;Clear ZF
   306 00001353 F9                  <1>     stc
   307                              <1>     return
    13                              <2> %%_ret:
    14 00001354 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   308                              <1> .exclusiveDir:
   309                              <1> ;Used when going down a path, dir bit simply need be set
   310 00001355 F6C410              <1>     test ah, dirDirectory
   311 00001358 75D4                <1>     jnz .scanName
   312 0000135A EBE2                <1>     jmp short .nextEntry
   313                              <1> 
   314                              <1> .volFile:
   315 0000135C 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   316 0000135E 74CE                <1>     je .scanName       ;If so, scan the name agrees
   317 00001360 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   318                              <1> 
   319                              <1> .searchEntryFound:
   320                              <1> ;Here a good entry was found!
   321 00001362 56                  <1>     push rsi
   322 00001363 57                  <1>     push rdi
   323 00001364 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   324 00001366 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   325 0000136D B904000000          <1>     mov ecx, 32/8
   326 00001372 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   327 00001375 5F                  <1>     pop rdi
   328 00001376 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   329 00001377 F8                  <1>     clc
   330                              <1>     return
    13                              <2> %%_ret:
    14 00001378 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   331                              <1> 
   332                              <1> .nameCompare:
   333                              <1> ;Input: rsi = source string
   334                              <1> ;       rdi = string template to compare against
   335                              <1> ;Output: ZF=ZE => Strings are ok
   336                              <1> ;        ZF=NZ => Strings not ok
   337                              <1> ;Accepts wildcards. Trashes al
   338 00001379 51                  <1>     push rcx
   339 0000137A 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   340                              <1> .ncLp:
   341 0000137C 81F90B000000        <1>     cmp ecx, 11
   342 00001382 740B                <1>     je .ncExit
   343 00001384 FFC1                <1>     inc ecx
   344 00001386 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   345 00001387 74F3                <1>     je .ncLp    ;If equal, keep going
   346 00001389 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   347 0000138D 74ED                <1>     je .ncLp
   348                              <1> .ncExit:
   349 0000138F 59                  <1>     pop rcx
   350                              <1>     return
    13                              <2> %%_ret:
    14 00001390 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> adjustSearchAttr:
   352                              <1> ;Converts the byte to a system only if the bit is set
   353                              <1> ;Input: eax = User selected search mask
   354                              <1> ;Output: eax = Modified search mask
   355 00001391 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   356 00001396 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   357                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000139B 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000139D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   358 0000139E B808000000          <1>     mov eax, dirVolumeID
   359                              <1>     return
    13                              <2> %%_ret:
    14 000013A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> asciiToFCB:
   362                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   363                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   364                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   365                              <1> ;Name is space padded.
   366                              <1> ;Input: rsi = ASCII string buffer
   367                              <1> ;       rdi = FCB name buffer
   368                              <1> ;Output: al = Char that terminated the source string 
   369 000013A4 53                  <1>     push rbx    
   370 000013A5 57                  <1>     push rdi
   371 000013A6 B90B000000          <1>     mov ecx, 11
   372 000013AB B020                <1>     mov al, " "
   373 000013AD F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   374 000013AF 5F                  <1>     pop rdi
   375 000013B0 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   376                              <1> .processName:
   377 000013B3 AC                  <1>     lodsb   ;Get the char in al
   378 000013B4 E891610000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   379 000013B9 84C0                <1>     test al, al
   380 000013BB 742D                <1>     jz .exit
   381 000013BD 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   382 000013BF 740E                <1>     je .extSpace
   383 000013C1 3C2E                <1>     cmp al, "."
   384 000013C3 7413                <1>     je .ext
   385                              <1>     ;Test if the char is valid
   386 000013C5 E802630000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   387 000013CA 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   388 000013CC AA                  <1>     stosb   ;Store the char
   389 000013CD EBE4                <1>     jmp short .processName
   390                              <1> .extSpace:
   391                              <1> ;Now we scan for a period in the name
   392 000013CF AC                  <1>     lodsb   ;Get a char and increase rsi
   393 000013D0 84C0                <1>     test al, al
   394 000013D2 7416                <1>     jz .exit
   395 000013D4 3C2E                <1>     cmp al, "."     ;If al is not a period...
   396 000013D6 75F7                <1>     jne .extSpace   ; keep searching
   397                              <1> .ext:
   398 000013D8 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   399                              <1> .processExt:
   400 000013DC AC                  <1>     lodsb
   401 000013DD 84C0                <1>     test al, al
   402 000013DF 7409                <1>     jz .exit
   403 000013E1 3C20                <1>     cmp al, " "
   404 000013E3 7405                <1>     je .exit
   405 000013E5 AA                  <1>     stosb
   406 000013E6 EBF4                <1>     jmp short .processExt
   407                              <1> .exitBadChar:
   408 000013E8 30C0                <1>     xor al, al  ;Return a null terminator
   409                              <1> .exit:
   410 000013EA 5B                  <1>     pop rbx
   411                              <1>     return
    13                              <2> %%_ret:
    14 000013EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> 
   413                              <1> FCBToAsciiz:
   414                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   415                              <1> ;Name is space padded too
   416                              <1> ;Input: rsi = FCB name buffer
   417                              <1> ;       rdi = ASCIIZ string buffer
   418 000013EC B908000000          <1>     mov ecx, 8
   419 000013F1 F3A4                <1>     rep movsb   ;Move the name over
   420                              <1> .scanNameSpace:
   421 000013F3 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   422 000013F7 750D                <1>     jne .ext
   423 000013F9 48FFCF              <1>     dec rdi
   424 000013FC FFC1                <1>     inc ecx
   425 000013FE 81F908000000        <1>     cmp ecx, 8
   426 00001404 72ED                <1>     jb .scanNameSpace
   427                              <1> .ext:
   428 00001406 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   429 0000140B 7506                <1>     jne .validExt
   430 0000140D 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   431 00001411 7415                <1>     je .exit
   432                              <1> .validExt:
   433 00001413 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   434 00001415 AA                  <1>     stosb
   435 00001416 B903000000          <1>     mov ecx, 3
   436 0000141B F3A4                <1>     rep movsb   ;Move the three extension chars over
   437                              <1> .scanExtSpace:
   438 0000141D 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   439 00001421 7505                <1>     jne .exit
   440 00001423 48FFCF              <1>     dec rdi
   441 00001426 EBF5                <1>     jmp short .scanExtSpace
   442                              <1> .exit:
   443 00001428 31C0                <1>     xor eax, eax
   444 0000142A AA                  <1>     stosb   ;Store a null at the end
   445                              <1>     return
    13                              <2> %%_ret:
    14 0000142B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> setupFFBlock:
   448                              <1> ;Sets up the find first block for the search
   449                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   450 0000142C 50                  <1>     push rax
   451 0000142D 53                  <1>     push rbx
   452 0000142E 56                  <1>     push rsi
   453 0000142F 57                  <1>     push rdi
   454 00001430 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   455 00001433 8A05(FC060000)      <1>     mov al, byte [searchAttr]
   456 00001439 243F                <1>     and al, 3Fh ;Clear upper two bits
   457 0000143B 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   458 0000143E 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   459 00001445 FEC0                <1>     inc al  ;Convert into 1 based number to agree with DOS
   460 00001447 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   461 00001449 488D35(D9060000)    <1>     lea rsi, fcbName
   462 00001450 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   463 00001454 57                  <1>     push rdi
   464 00001455 48B820202020202020- <1>     mov rax, "        "
   464 0000145E 20                  <1>
   465 0000145F 48AB                <1>     stosq
   466 00001461 66AB                <1>     stosw
   467 00001463 AA                  <1>     stosb
   468 00001464 5F                  <1>     pop rdi
   469 00001465 48A5                <1>     movsq   ;Move 8 chars
   470 00001467 66A5                <1>     movsw   ;Move 2 chars
   471 00001469 A4                  <1>     movsb   ;Move the final char
   472                              <1> 
   473 0000146A 8B05(85070000)      <1>     mov eax, dword [dirEntry]
   474 00001470 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   475 00001473 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
   476 00001479 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   477 0000147C 8A05(65060000)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   478 00001482 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   479 00001485 8B05(70060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   480 0000148B 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   481 0000148E 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   482 00001494 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   483 00001497 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   484 0000149B 488D35(5A060000)    <1>     lea rsi, curDirCopy
   485 000014A2 E845FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   486                              <1> 
   487 000014A7 5F                  <1>     pop rdi
   488 000014A8 5E                  <1>     pop rsi
   489 000014A9 5B                  <1>     pop rbx
   490 000014AA 58                  <1>     pop rax
   491                              <1>     return
    13                              <2> %%_ret:
    14 000014AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> getDrvLetterFromPath:   ;Int 2Fh, AX=121Ah
   494                              <1> ;Gets the drive letter for the path in al
   495                              <1> ;Input: rsi = Buffer to process
   496                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   497                              <1> ;       ZF=ZE and al = 0 => Null path
   498                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   499                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   500                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   501 000014AC 30C0                <1>     xor al, al
   502 000014AE 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   503                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000014B1 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000014B3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   504 000014B4 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   505                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000014B8 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000014BA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   506 000014BB 66AD                <1>     lodsw   ;Get first word, rsi += 2
   507                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   508 000014BD 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   509 000014BF 2C60                <1>     sub al, 60h
   510                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000014C1 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000014C3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   511 000014C4 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   512                              <1>     return
    13                              <2> %%_ret:
    14 000014C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> getDirPath:
   515 000014C7 30C0                <1>     xor al, al   ;Set to Directory
   516 000014C9 EB02                <1>     jmp short getPath
   517                              <1> getFilePath:
   518 000014CB B0FF                <1>     mov al, -1  ;Set to File
   519                              <1> getPath:
   520                              <1> ;Called with:
   521                              <1> ; rdi = SDA Buffer for filename
   522                              <1> ; rsi = Potentially unqualified filename
   523                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   524 000014CD 50                  <1>     push rax
   525 000014CE 57                  <1>     push rdi
   526 000014CF E877000000          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   527 000014D4 5F                  <1>     pop rdi
   528 000014D5 58                  <1>     pop rax
   529                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000014D6 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000014D8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   530                              <1>     ;Now our name is FQ, we can search the for it!
   531 000014D9 48813D(12070000)FF- <1>     cmp qword [workingCDS], -1  ;If there is no CDS associated with this path
   531 000014E1 FFFFFF              <1>
   532 000014E4 0F849B010000        <1>     je getPathNoCanon.netFFnoCDS ;It must be a net no CDS search!
   533 000014EA 8805(69040000)      <1>     mov byte [fileDirFlag], al 
   534 000014F0 B0FF                <1>     mov al, -1
   535 000014F2 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   536 000014F8 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   537 000014FE C605(05070000)00    <1>     mov byte [parDirExist], 0   
   538 00001505 C605(04070000)00    <1>     mov byte [fileExist], 0     
   539 0000150C 8A05(09070000)      <1>     mov al, byte [workingDrv]
   540 00001512 FEC0                <1>     inc al
   541 00001514 488D7301            <1>     lea rsi, qword [rbx + 1]    ;Move the pointers past the machine name pathsep
   542 00001518 66813F5C5C          <1>     cmp word [rdi], "\\"        ;Did we resolve to remote path?
   543 0000151D 7424                <1>     je .net
   544 0000151F 488B1D(1E060000)    <1>     mov rbx, qword [fname1Ptr]
   545 00001526 4881C302000000      <1>     add rbx, 2  ;Now our path is completely normalised so this always works!
   546 0000152D 488D7301            <1>     lea rsi, qword [rbx + 1]
   547 00001531 FF35(12070000)      <1>     push qword [workingCDS] ;Save the original CDS to allow for subst to work
   548 00001537 E898010000          <1>     call pathWalk
   549 0000153C 8F05(12070000)      <1>     pop qword [workingCDS]
   550                              <1>     return
    13                              <2> %%_ret:
    14 00001542 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> .net:
   552 00001543 4889F7              <1>     mov rdi, rsi                ;Else, skip setting up vars for drive access
   553 00001546 E994010000          <1>     jmp pathWalk.netEp          ;Still do all drive access using CDS, but over redir
   554                              <1>     ;The reason why this works is that DOS doesn't need to keep track of the 
   555                              <1>     ; internal vars for accessing a net drive. All accesses still occur via the
   556                              <1>     ; redir, and the redir can update its vars as it needs. The DOS pointers
   557                              <1>     ; point as is necessary on the path (with machine name prefix), and in the SDA
   558                              <1>     ; so the redir can do it's job.
   559                              <1> 
   560                              <1> canonicaliseFileName:
   561                              <1> ;Always trying to build and qualify a full pathname
   562                              <1> ;Does getPath without hitting the disk
   563 0000154B B0FF                <1>     mov al, -1
   564 0000154D 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   565 00001553 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   566 00001559 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   567 00001560 FEC0                <1>     inc al  ;make al = 0
   568 00001562 8805(2E060000)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   569 00001568 E839000000          <1>     call getPathNoCanon.epAlt
   570                              <1>     retc    ;Error return
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000156D 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000156F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   571                              <1>     ;Check the last two chars to see if we have a null terminator.
   572                              <1>     ;If neither has a null terminator, add one
   573 00001570 31C0                <1>     xor eax, eax
   574 00001572 3807                <1>     cmp byte [rdi], al
   575                              <1>     retz                
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001574 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001576 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   576 00001577 3847FF              <1>     cmp byte [rdi - 1], al 
   577                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000157A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000157C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   578 0000157D AA                  <1>     stosb
   579                              <1>     return
    13                              <2> %%_ret:
    14 0000157E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   580                              <1> 
   581                              <1> getDirPathNoCanon:
   582                              <1> ;FCB only
   583 0000157F 31C0                <1>     xor eax, eax
   584 00001581 4889FE              <1>     mov rsi, rdi
   585 00001584 EB05                <1>     jmp short getPathNoCanon
   586                              <1> getFilePathNoCanon:
   587                              <1> ;Used when the path is constructed internally (as for FCB functions), and renameMain
   588                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   589 00001586 B0FF                <1>     mov al, -1
   590 00001588 4889FE              <1>     mov rsi, rdi
   591                              <1> getPathNoCanon:
   592                              <1> ;Called with:
   593                              <1> ; rdi = SDA Buffer for filename
   594                              <1> ; rsi = Potentially unqualified filename
   595                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   596 0000158B 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   597 00001591 B0FF                <1>     mov al, -1
   598 00001593 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   599 00001599 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   600 000015A0 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   601                              <1> .epAlt:
   602 000015A6 C605(05070000)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   603 000015AD C605(04070000)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   604 000015B4 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   605 000015BB 7431                <1>     jz .notServer
   606 000015BD E8EAFEFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in "X:\"
   607 000015C2 E8EA5E0000          <1>     call getCDS ;Get the cds for the drive letter on the path
   608 000015C7 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   609 000015C9 56                  <1>     push rsi
   610 000015CA 57                  <1>     push rdi
   611 000015CB 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   612 000015D2 50                  <1>     push rax
   613 000015D3 E8D7620000          <1>     call dosCrit1Enter
   614 000015D8 E8075B0000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   615 000015DD E8D7620000          <1>     call dosCrit1Exit
   616 000015E2 58                  <1>     pop rax
   617 000015E3 5F                  <1>     pop rdi
   618 000015E4 5E                  <1>     pop rsi
   619 000015E5 0F83B4000000        <1>     jnc .driveOk
   620                              <1> .serverExit:
   621 000015EB B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   622                              <1>     return
    13                              <2> %%_ret:
    14 000015ED C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   623                              <1> .notServer:
   624                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   625                              <1>     ; and only in truename mode
   626 000015EE F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;If set, we on disk hit mode
   627 000015F5 7515                <1>     jnz .skipRemoteQualify      ;So skip!
   628 000015F7 48C705(12070000)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   628 000015FF FFFFFF              <1>
   629 00001602 B823110000          <1>     mov eax, 1123h  ;Net Qualify Path name
   630 00001607 CD2F                <1>     int 2fh ;CF=CY if not resolved. CF=NC if resolved
   631                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001609 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000160B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   632                              <1> .skipRemoteQualify:
   633 0000160C E89BFEFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   634 00001611 9C                  <1>     pushfq  ;Save the flag state on stack
   635 00001612 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   636 00001613 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   637 00001616 E8235F0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   638 0000161B 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. UNC)
   639 0000161D E81C5F0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   640 00001622 756B                <1>     jnz .notNet
   641 00001624 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   642 00001626 7567                <1>     jne .notNet
   643 00001628 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   644 00001629 9D                  <1>     popfq
   645 0000162A 66AD                <1>     lodsw
   646 0000162C 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   647 00001630 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   648                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   649                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   650                              <1> ; redirector Find First Without CDS
   651 00001632 8A1D(2E060000)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   652 00001638 C605(2E060000)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   653 0000163F 53                  <1>     push rbx
   654                              <1> .moveNetName: ;This sets up the machine name portion of the UNC path
   655 00001640 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   656 00001641 E8045F0000          <1>     call uppercaseChar  ;Make char in al uppercase
   657 00001646 84C0                <1>     test al, al
   658 00001648 7435                <1>     jz .netEnd
   659 0000164A E8EF5E0000          <1>     call swapPathSeparator  ;If path sep, swap it
   660 0000164F AA                  <1>     stosb
   661 00001650 75EE                <1>     jnz .moveNetName  ;If not a path separating char in al, keep looking
   662                              <1>     ;Skip all following pathseps if there are any
   663                              <1> .moveNetSharePtr:
   664 00001652 AC                  <1>     lodsb
   665 00001653 E8E65E0000          <1>     call swapPathSeparator
   666 00001658 74F8                <1>     jz .moveNetSharePtr
   667 0000165A C60700              <1>     mov byte [rdi], 0   ;Null terminate path to make ASCIIZ
   668 0000165D 48FFCE              <1>     dec rsi ;More rsi back to the first char past the seps
   669 00001660 84C0                <1>     test al, al ;Was this char null?
   670 00001662 741B                <1>     jz .netEnd  ;Skip processing if so!
   671 00001664 4889FB              <1>     mov rbx, rdi
   672 00001667 48FFCB              <1>     dec rbx ;rbx points at the pathsep before the space for the first char
   673 0000166A E870000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   674 0000166F 721C                <1>     jc .netExitBad
   675                              <1>     ;Now if we have a trailing backslash, throw it away
   676                              <1>     ;rdi points to the null char of the path
   677 00001671 8A47FF              <1>     mov al, byte [rdi - 1]  ;Get the char before the nullsep
   678 00001674 E8C55E0000          <1>     call swapPathSeparator  ;Is it a pathsep?
   679 00001679 7504                <1>     jnz .netEnd
   680 0000167B C647FF00            <1>     mov byte [rdi - 1], 0   ;Write a null if it is
   681                              <1> .netEnd:
   682 0000167F 5B                  <1>     pop rbx
   683 00001680 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   684                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001682 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001684 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   685                              <1> .netFFnoCDS:
   686 00001685 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   687 0000168A CD2F                <1>     int 2Fh
   688                              <1>     return
    13                              <2> %%_ret:
    14 0000168C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   689                              <1> .netExitBad:
   690 0000168D 5B                  <1>     pop rbx
   691                              <1>     return
    13                              <2> %%_ret:
    14 0000168E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   692                              <1> .notNet:
   693                              <1> ;This is the normal case; paths can be relative, or absolute.
   694 0000168F 58                  <1>     pop rax ;Get the drive letter back
   695 00001690 9D                  <1>     popfq   ;Get the flag state back
   696 00001691 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   697                              <1> .pnfErr:
   698 00001693 B003                <1>     mov al, errPnf  ;Null path error
   699 00001695 F9                  <1>     stc
   700                              <1>     return
    13                              <2> %%_ret:
    14 00001696 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   701                              <1> .notNull:
   702 00001697 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   703 00001699 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   704 0000169B B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   705 0000169D F9                  <1>     stc
   706                              <1>     return
    13                              <2> %%_ret:
    14 0000169E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> .driveOk:
   708 0000169F 84C0                <1>     test al, al
   709 000016A1 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   710                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   711 000016A3 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   712 000016A6 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   713 000016A8 50                  <1>     push rax    ;Save the drive letter
   714 000016A9 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   715 000016AA 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   716 000016AD E88C5E0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   717                              <1>     ;If al is a path separator, then this path is absolute.
   718 000016B2 58                  <1>     pop rax ;Get back the drive letter
   719 000016B3 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   720                              <1> .absoPath:
   721                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   722 000016B5 48FFC6              <1>     inc rsi
   723 000016B8 EB1A                <1>     jmp short .commonDir
   724                              <1> .curPath:
   725                              <1> ;This is only jumped to if we are relative the current drive
   726                              <1> ;rsi points to first char in path
   727                              <1> ;If this char is \ or /, then it is an absolute path.
   728 000016BA 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   729 000016C0 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   730 000016C2 50                  <1>     push rax    ;Save the current drive number
   731 000016C3 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   732 000016C5 E8745E0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   733 000016CA 58                  <1>     pop rax ;Get back the current drive number
   734 000016CB 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   735                              <1> .relMain:
   736 000016CD C605(01070000)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   737                              <1> .commonDir:
   738                              <1> ;rsi points to the start of the string we will be appending
   739                              <1> ;Fall through now
   740                              <1> pathWalk:
   741                              <1> ;Input: rsi must point to source buffer for path to expand
   742                              <1> ;       rdi must point to a destination buffer
   743                              <1> ;       al must contain the drive 1 based number
   744 000016D4 E8E9000000          <1>     call prepareDir    ;Prepare the start of the path
   745 000016D9 0F82D5000000        <1>     jc .badDriveExit 
   746                              <1> .netEp:
   747                              <1> ;For net path resolution (resolution ONLY) ptrs must point past "\\".
   748                              <1> ;For subst, resolution cannot go past backslash offset.
   749                              <1> ;For join, it is transparent.
   750 000016DF F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;Clear if not hitting disk!
   751 000016E6 7420                <1>     jz .notNet                  ;Skip this if not hitting disk!
   752                              <1> ;Start diskhit by checking the cds here if hitting the disk. 
   753                              <1> ;If it is a network cds we make findfirst req. 
   754 000016E8 57                  <1>     push rdi
   755 000016E9 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   756 000016F0 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   757 000016F6 5F                  <1>     pop rdi
   758 000016F7 740F                <1>     jz .notNet
   759 000016F9 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS as in DOS, undocumented
   760 00001700 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS!
   761 00001705 CD2F                <1>     int 2fh 
   762                              <1>     return
    13                              <2> %%_ret:
    14 00001707 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   763                              <1> .notNet:
   764 00001708 803E00              <1>     cmp byte [rsi], 0   ;If rsi at the end of the string, exit for ROOT dir
   765 0000170B 7543                <1>     jnz .mainlp
   766                              <1>     ;Setup dummy dir data for Root directory
   767 0000170D 31C0                <1>     xor eax, eax
   768 0000170F 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   769 00001716 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   770 0000171D C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   771                              <1>     ;Now we check if we are on a JOIN drive. If so, we swap back to the 
   772                              <1>     ; join host! Only when hitting the disk though.
   773 00001724 F605(2E060000)FF    <1>     test byte [skipDisk], -1
   774 0000172B 0F8489000000        <1>     jz .exitGood
   775 00001731 57                  <1>     push rdi
   776 00001732 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]     ;Get the current CDS
   777 00001739 66F747430020        <1>     test word [rdi + cds.wFlags], cdsJoinDrive
   778 0000173F 5F                  <1>     pop rdi
   779 00001740 7478                <1>     jz .exitGood    ;If not a join drive, exit (this never happens?)
   780 00001742 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Use the join client CDS as source string!
   781 00001749 B0FF                <1>     mov al, -1  ;Set to search for a dir as only dir can be mntpoint
   782 0000174B E93BFEFFFF          <1>     jmp getPathNoCanon
   783                              <1> .mainlp:
   784                              <1>     ;rbx must remain constant in this portion,
   785                              <1>     ; and is used to signify the first writable byte in the path
   786 00001750 53                  <1>     push rbx
   787 00001751 E83F010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   788 00001756 5B                  <1>     pop rbx
   789 00001757 7268                <1>     jc .exit    ;If this errors (bad chars in filename portion), exit bad 
   790 00001759 84C0                <1>     test al, al
   791 0000175B 7507                <1>     jnz .notFile
   792 0000175D C605(05070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   793                              <1> .notFile:
   794 00001764 53                  <1>     push rbx                ;The below messes up rbx
   795 00001765 E866040000          <1>     call checkDevPath       ;Silently intervene DEVs if in truename mode!
   796 0000176A 5B                  <1>     pop rbx
   797 0000176B E80B020000          <1>     call searchForPathspec  ;Now search the directory
   798 00001770 724F                <1>     jc .exit    ;If CF=CY, error exit. al has error code
   799 00001772 E880020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   800 00001777 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   801 00001779 84C0                <1>     test al, al ;Exit if this pathspec was a file
   802 0000177B 743D                <1>     jz .exitGood
   803                              <1>     ;Here I have to take the cluster data from the found directory entry
   804                              <1>     ; and setup the search for the next pathspec portion
   805                              <1>     ;Copy necessary data from the current directory copy
   806 0000177D 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   807 00001784 74CA                <1>     jz .mainlp
   808 00001786 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   809 0000178D C1E010              <1>     shl eax, 10h    ;Shift it high
   810 00001790 668B05(74060000)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   811                              <1>     ;eax now has the cluster number of the search
   812 00001797 8905(7F070000)      <1>     mov dword [dirClustA], eax
   813 0000179D 8905(7B070000)      <1>     mov dword [dirClustPar], eax
   814 000017A3 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   815 000017A5 8905(85070000)      <1>     mov dword [dirEntry], eax
   816 000017AB 668905(83070000)    <1>     mov word [dirSect], ax
   817 000017B2 EB9C                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   818                              <1> .badDriveExit:
   819 000017B4 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   820                              <1>     return
    13                              <2> %%_ret:
    14 000017B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   821                              <1> .exitGood:
   822 000017BA C605(04070000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   823                              <1> .exit:
   824                              <1>     return
    13                              <2> %%_ret:
    14 000017C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   825                              <1> 
   826                              <1> prepareDir:
   827                              <1> ;Used to transfer the current directory if it is necessary.
   828                              <1> ;Always necessary if the user specified a subst drive. Else only if 
   829                              <1> ; a relative path is specified.
   830                              <1> ;Input: al = 1-based drive letter
   831                              <1> ;Output: rdi = Pointing at where to place chars from source string
   832                              <1> ;        rbx -> Pointing at the point before which chars cannot be placed
   833                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   834 000017C2 56                  <1>     push rsi    ;Push ptr to source string
   835 000017C3 E8E7600000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   836 000017C8 E8745C0000          <1>     call getCDSNotJoin   ;Set internal variables, working CDS etc etc
   837 000017CD 7320                <1>     jnc .notJoin ;Very valid disk
   838 000017CF F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;Are we a join drive in truename?
   839 000017D6 7510                <1>     jnz .okJoin                 ;If not, proceed. If so, fail.    
   840 000017D8 F9                  <1>     stc
   841 000017D9 EB19                <1>     jmp short .critExit    ;If the drive number in al is too great or a join drive specified.
   842                              <1> .getDPB: 
   843 000017DB 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
   844 000017E2 E8FD580000          <1>     call getDiskDPB  ;Update working DPB and drv before searching
   845                              <1>     return
    13                              <2> %%_ret:
    14 000017E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   846                              <1> .okJoin:
   847 000017E8 E8EEFFFFFF          <1>     call .getDPB
   848 000017ED EB3A                <1>     jmp short .joinEp
   849                              <1> .notJoin:
   850 000017EF E8E7FFFFFF          <1>     call .getDPB
   851                              <1>     ;rbp = DPB ptr now
   852                              <1> .critExit:
   853 000017F4 E8C0600000          <1>     call dosCrit1Exit
   854 000017F9 7253                <1>     jc .badDriveExit 
   855 000017FB 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   856                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   857                              <1>     ;If this CDS is a join drive... it can't be unless we truenamed our path!
   858                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   859                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   860                              <1>     ;Before we begin, we init rbx to point at the backslash offset of the path
   861 00001802 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Now get the CDS ptr into rsi
   862 00001809 4889FB              <1>     mov rbx, rdi
   863 0000180C 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   864 00001810 4801C3              <1>     add rbx, rax    ;Move rbx to the backslash offset for this drive
   865                              <1>     ;Now check if we have a subst to handle
   866 00001813 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   867 00001819 7535                <1>     jnz .prepDirSubst
   868 0000181B F605(01070000)FF    <1>     test byte [spliceFlag], -1
   869 00001822 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   870                              <1>     ;Else we copy the first two chars only (X:)
   871 00001824 66A5                <1>     movsw  
   872 00001826 B05C                <1>     mov al, "\"
   873 00001828 AA                  <1>     stosb   ;Store the path separator in internal buffer and increment rdi
   874                              <1> .joinEp:
   875 00001829 31C0                <1>     xor eax, eax    ;Get cluster 0
   876 0000182B EB1B                <1>     jmp short .prepDirExitSkip
   877                              <1> .prepLoop:
   878 0000182D AC                  <1>     lodsb
   879 0000182E 84C0                <1>     test al, al ;If al was null, then we stop
   880 00001830 7403                <1>     jz .prepDirExit
   881 00001832 AA                  <1>     stosb
   882 00001833 EBF8                <1>     jmp short .prepLoop
   883                              <1> .prepDirExit:
   884 00001835 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   885 00001839 7403                <1>     je .prepDirExitSkipPathsep
   886 0000183B B05C                <1>     mov al, "\"
   887 0000183D AA                  <1>     stosb   ;Store the path separator and increment rdi
   888                              <1> .prepDirExitSkipPathsep:
   889 0000183E 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   890 00001845 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   891                              <1> .prepDirExitSkip:
   892 00001848 E816000000          <1>     call prepSetupDirSearchVars
   893 0000184D F8                  <1>     clc ;Clear carry before exiting
   894                              <1> .badDriveExit:
   895 0000184E 5E                  <1>     pop rsi
   896                              <1>     return
    13                              <2> %%_ret:
    14 0000184F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   897                              <1> .prepDirSubst:
   898 00001850 51                  <1>     push rcx
   899 00001851 0FB74E5D            <1>     movzx ecx, word [rsi + cds.wBackslashOffset]
   900                              <1> .prepDirCopy1:
   901 00001855 F3A4                <1>     rep movsb   ;Copy the string over
   902 00001857 59                  <1>     pop rcx
   903 00001858 F605(01070000)FF    <1>     test byte [spliceFlag], -1
   904 0000185F 75D4                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   905 00001861 EBCA                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   906                              <1> prepSetupDirSearchVars:
   907                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   908                              <1> ;       rbp -> Working DPB
   909 00001863 51                  <1>     push rcx
   910 00001864 31C9                <1>     xor ecx, ecx
   911 00001866 66890D(83070000)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   912 0000186D 890D(85070000)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   913 00001873 E8AEF1FFFF          <1>     call getFATtype ;Get type of fat
   914 00001878 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   915 0000187E 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   916                              <1>     ;FAT 32 here
   917 00001880 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   918 00001882 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   919 00001884 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   920                              <1> .psdsvExit:
   921 00001887 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   922 0000188D 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   923 00001893 59                  <1>     pop rcx
   924                              <1>     return 
    13                              <2> %%_ret:
    14 00001894 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   925                              <1> 
   926                              <1> copyPathspec:
   927                              <1> ;1) Copies a path portion from the source buffer to the destination
   928                              <1> ;2) Advances rsi to the next null, \ or /
   929                              <1> ;3) Expands all * to ?'s
   930                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   931                              <1> ;    next path separator and rdi pointing to the previous pathsep
   932                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   933                              <1> ;    with rsi moving to path separator
   934                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   935                              <1> ;
   936                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   937                              <1> ;           rdi = Points to where to store it
   938                              <1> ;
   939                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   940                              <1> ;           rdi = First char of next space to store next pathspec
   941                              <1> ;           al = Last char stored (either \ or NULL)
   942                              <1> ;           CF=NC = OK path
   943                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   944                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   945 00001895 57                  <1>     push rdi    ;Save the pointer into the user buffer
   946 00001896 C605(8D040000)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   947 0000189D 488D3D(D9060000)    <1>     lea rdi, fcbName
   948 000018A4 57                  <1>     push rdi
   949 000018A5 B903000000          <1>     mov ecx, 3
   950 000018AA B820202020          <1>     mov eax, "    " ;Four spaces
   951 000018AF F3AB                <1>     rep stosd   ;Store 12 spaces
   952 000018B1 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   953                              <1> 
   954 000018B2 488D1D(E4060000)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   955 000018B9 AC                  <1>     lodsb   ;Get first char from user path in al
   956 000018BA 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   957 000018BC 746B                <1>     je .cpsDots
   958 000018BE 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   959                              <1> ;First char is not a dot, so now check if starts with E5h? 
   960                              <1> ;If so, store 05h in its place!
   961 000018C1 3CE5                <1>     cmp al, 0E5h
   962 000018C3 7506                <1>     jne .cpsMainLoop
   963 000018C5 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   964 000018C8 B005                <1>     mov al, 05h
   965 000018CA AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   966                              <1> .cpsMainLoop:
   967 000018CB AC                  <1>     lodsb   ;Get the char in al and advance rsi
   968 000018CC 84C0                <1>     test al, al ;Is it the null char?
   969 000018CE 0F848A000000        <1>     jz .cpsStore  ;If so, terminate immediately
   970 000018D4 E8655C0000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   971 000018D9 0F848D000000        <1>     jz .cpsSkipPathseps ; and then exit with the final converted pathsep in al
   972 000018DF 3C2E                <1>     cmp al, "." ;Filename extension separator
   973 000018E1 7420                <1>     je .cpsExtension
   974                              <1>     ;If we have space in the filename, we check to see if the next char is *
   975 000018E3 3C2A                <1>     cmp al, "*" ;Wildcard?
   976 000018E5 7430                <1>     je .cpsWildcard
   977 000018E7 3C3F                <1>     cmp al, "?" ;Good wildcard?
   978 000018E9 740C                <1>     je .store
   979 000018EB E85A5C0000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   980 000018F0 E8D75D0000          <1>     call checkCharValid ; and check it is a valid char
   981 000018F5 7472                <1>     je .cpsExitError
   982                              <1> .store:
   983 000018F7 4839DF              <1>     cmp rdi, rbx
   984 000018FA 7442                <1>     je .cpsProcessName ;Skip any non-terminating chars
   985 000018FC AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   986 000018FD EBCC                <1>     jmp short .cpsMainLoop
   987                              <1> .cpsInvalidChar:
   988 000018FF 30C0                <1>     xor al, al
   989 00001901 EB3B                <1>     jmp short .cpsProcessName
   990                              <1> .cpsExtension:
   991                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   992 00001903 B903000000          <1>     mov ecx, 3 
   993 00001908 488D3D(E1060000)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   994 0000190F 57                  <1>     push rdi
   995 00001910 B020                <1>     mov al, " "
   996 00001912 F3AA                <1>     rep stosb
   997 00001914 5F                  <1>     pop rdi
   998 00001915 EBB4                <1>     jmp short .cpsMainLoop
   999                              <1> .cpsWildcard:
  1000                              <1> ;Fill the entire FCB filespec with ?'s.
  1001                              <1> ;We lookahead to the first char past the final "*" to prevent multiple
  1002                              <1> ; *'s from crashing DOS :)
  1003 00001917 AC                  <1>     lodsb   ;Get char, inc rsi
  1004 00001918 3C2A                <1>     cmp al, "*"
  1005 0000191A 74FB                <1>     je short .cpsWildcard
  1006 0000191C 48FFCE              <1>     dec rsi ;Go back to the first non-star char
  1007 0000191F B03F                <1>     mov al, "?"
  1008                              <1> .cpsWildcardLp:
  1009 00001921 AA                  <1>     stosb
  1010 00001922 4839DF              <1>     cmp rdi, rbx    ;We filled the FCB name field yet?
  1011 00001925 75FA                <1>     jne short .cpsWildcardLp
  1012 00001927 EBA2                <1>     jmp short .cpsMainLoop
  1013                              <1> 
  1014                              <1> .cpsDots:
  1015 00001929 AA                  <1>     stosb   ;Store the first dot
  1016 0000192A 8A06                <1>     mov al, byte [rsi]
  1017 0000192C 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
  1018 0000192E 752E                <1>     jne .cpsStore
  1019 00001930 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
  1020 00001931 8A06                <1>     mov al, byte [rsi]  ;Ensure that the .. is not followed by any chars
  1021 00001933 84C0                <1>     test al, al
  1022 00001935 7407                <1>     jz .cpsProcessName
  1023 00001937 E8025C0000          <1>     call swapPathSeparator  ;If the char following the .. is not null or pathsep, error
  1024 0000193C 752B                <1>     jnz .cpsExitError
  1025                              <1> .cpsProcessName:
  1026                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
  1027 0000193E 84C0                <1>     test al, al 
  1028 00001940 741C                <1>     jz .cpsStore
  1029 00001942 E8F75B0000          <1>     call swapPathSeparator
  1030 00001947 7415                <1>     jz .cpsStore
  1031                              <1> .cpsFindTerminator:
  1032 00001949 AC                  <1>     lodsb
  1033 0000194A 84C0                <1>     test al, al 
  1034 0000194C 7410                <1>     jz .cpsStore
  1035 0000194E E8EB5B0000          <1>     call swapPathSeparator
  1036 00001953 7409                <1>     jz .cpsStore
  1037 00001955 E8725D0000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
  1038 0000195A 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
  1039                              <1>     ;If we encounter a terminator, convert to 0
  1040 0000195C 30C0                <1>     xor al, al
  1041                              <1> .cpsStore:
  1042 0000195E 488D3D(E4060000)    <1>     lea rdi, fcbName+11
  1043 00001965 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
  1044 00001966 5F                  <1>     pop rdi
  1045 00001967 F8                  <1>     clc
  1046                              <1>     return
    13                              <2> %%_ret:
    14 00001968 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1047                              <1> .cpsExitError:
  1048 00001969 5F                  <1>     pop rdi
  1049 0000196A F9                  <1>     stc
  1050                              <1>     return
    13                              <2> %%_ret:
    14 0000196B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1051                              <1> .cpsSkipPathseps:
  1052 0000196C AC                  <1>     lodsb
  1053 0000196D E8CC5B0000          <1>     call swapPathSeparator
  1054 00001972 74F8                <1>     jz .cpsSkipPathseps
  1055 00001974 48FFCE              <1>     dec rsi ;Go back to the first char in next section of the pathspec
  1056 00001977 B05C                <1>     mov al, "\" ;Make sure to store a pathsep char
  1057 00001979 EBE3                <1>     jmp short .cpsStore
  1058                              <1> 
  1059                              <1> searchForPathspec:
  1060                              <1>     ;Now search the current directory for this filename
  1061                              <1>     ;Find first using SDA ffBlock
  1062                              <1>     ;If al = 0, we have final file name or directory name
  1063                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
  1064                              <1>     ;Output: CF=CY => Error occured, al has error code (Fnf or Pnf)
  1065                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
  1066                              <1>     ;                 FF block somewhat setup
  1067                              <1>     ;Preserves rax, rbx, rsi,  rdi
  1068 0000197B 50                  <1>     push rax
  1069 0000197C 53                  <1>     push rbx
  1070 0000197D 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
  1071 0000197E 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
  1072 0000197F 0FB61D(69040000)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
  1073 00001986 53                  <1>     push rbx    ;and push it onto the stack
  1074                              <1> ;Evaluate whether we are searching for a file for a directory
  1075 00001987 84C0                <1>     test al, al
  1076 00001989 741D                <1>     jz .sfpPNfile
  1077                              <1>     ;Fall if subdir
  1078 0000198B 488D3D(D9060000)    <1>     lea rdi, fcbName
  1079 00001992 B03F                <1>     mov al, "?" ;Search for wildcard
  1080 00001994 B90B000000          <1>     mov ecx, 11
  1081 00001999 F2AE                <1>     repne scasb
  1082 0000199B 7452                <1>     je .sfpPnf  ;Path not found if a ? found in the name
  1083 0000199D B010                <1>     mov al, dirDirectory    ;We want a directory only search.
  1084 0000199F C605(69040000)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
  1085 000019A6 EB07                <1>     jmp short .sfpPNMain
  1086                              <1> .sfpPNfile:
  1087                              <1>     ;Here if we are searching for a file or directory as setup by search init
  1088 000019A8 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
  1089                              <1> .sfpPNMain:
  1090 000019AF 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1091 000019B6 7418                <1>     je .sfpPNNoDisk
  1092 000019B8 E8DCF7FFFF          <1>     call searchDir
  1093 000019BD 7211                <1>     jc .sfpPNNoDisk
  1094 000019BF 803D(5A060000)05    <1>     cmp byte [curDirCopy], 05h 
  1095 000019C6 7507                <1>     jne .noAdjust
  1096                              <1>     ;Readjust when the start of a dir entry name is 05h
  1097 000019C8 C605(5A060000)E5    <1>     mov byte [curDirCopy], 0E5h
  1098                              <1> .noAdjust:
  1099 000019CF F8                  <1>     clc ;Ensure the carry flag is clear here!
  1100                              <1> .sfpPNNoDisk:
  1101 000019D0 5B                  <1>     pop rbx
  1102 000019D1 881D(69040000)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1103 000019D7 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1104 000019D8 5E                  <1>     pop rsi
  1105 000019D9 5B                  <1>     pop rbx
  1106 000019DA 58                  <1>     pop rax ;Get back the original al value
  1107                              <1>     retnc   ;Return if file found. Else, report what was not found correctly!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000019DB 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000019DD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1108 000019DE 84C0                <1>     test al, al ;If we are on the last path comp, fail pnf!
  1109 000019E0 F9                  <1>     stc         ;Dont forget to set CF again!!
  1110 000019E1 B802000000          <1>     mov eax, errFnf
  1111                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000019E6 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000019E8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1112 000019E9 B803000000          <1>     mov eax, errPnf ;Else it is path not found!
  1113                              <1>     return
    13                              <2> %%_ret:
    14 000019EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1114                              <1> .sfpPnf:
  1115 000019EF B803000000          <1>     mov eax, errPnf
  1116                              <1> .sfpErrExit:
  1117 000019F4 F9                  <1>     stc ;Set carry
  1118 000019F5 EBD9                <1>     jmp short .sfpPNNoDisk
  1119                              <1> 
  1120                              <1> addPathspecToBuffer:
  1121                              <1> ;Input: fcbName = Qualified pathname portion
  1122                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1123                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1124                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1125                              <1> ;rbx points to the "head of the path"
  1126                              <1> ;rsi points to the first char of the next portion if al is pathsep
  1127                              <1> ;Converts the special char if the filename starts with it!
  1128 000019F7 F605(2E060000)FF    <1>     test byte [skipDisk], -1
  1129                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000019FE 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001A00 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1130 00001A01 803D(D9060000)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1131 00001A08 746A                <1>     je .aptbDots
  1132                              <1>     ;Copy filename over to internal buffer
  1133                              <1> .aptbAddNull:
  1134 00001A0A 56                  <1>     push rsi    ;Save source pointer position
  1135 00001A0B 488D35(D9060000)    <1>     lea rsi, fcbName
  1136 00001A12 803E05              <1>     cmp byte [rsi], 05h
  1137 00001A15 7503                <1>     jne .notSpecialChar
  1138 00001A17 C606E5              <1>     mov byte [rsi], 0E5h
  1139                              <1> .notSpecialChar:
  1140 00001A1A E8CDF9FFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1141 00001A1F 48FFCF              <1>     dec rdi ;Go back to the in-situ null terminator char
  1142 00001A22 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1143 00001A23 E8C6000000          <1>     call .aptbInterveneEnterJoin
  1144                              <1>     retc    ;Return bad if a disk error occured.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001A28 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001A2A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1145                              <1> .aptbHandleTerminator:
  1146 00001A2B 8A05(E4060000)      <1>     mov al, byte [fcbName + 11] ;Get the actual terminator for this portion.
  1147 00001A31 84C0                <1>     test al, al
  1148 00001A33 741A                <1>     jz .aptbHandleNull
  1149 00001A35 E8045B0000          <1>     call swapPathSeparator
  1150 00001A3A 0F85C7000000        <1>     jnz .aptbErrorExit
  1151                              <1> ;Handle path separator here directly
  1152 00001A40 50                  <1>     push rax    ;Preserve the terminator char
  1153 00001A41 8A47FF              <1>     mov al, byte [rdi - 1]
  1154 00001A44 E8F55A0000          <1>     call swapPathSeparator  ;If the char before us is a pathsep, do nothing.
  1155 00001A49 58                  <1>     pop rax
  1156 00001A4A 7426                <1>     jz .aptbExitOk 
  1157 00001A4C AA                  <1>     stosb   ;Now go past the pathsep we just placed
  1158 00001A4D EB23                <1>     jmp short .aptbExitOk
  1159                              <1> .aptbHandleNull:
  1160 00001A4F E85B000000          <1>     call .aptbAtHeadOfPath
  1161 00001A54 7411                <1>     je .aptbHandleNullNoOverwritePrim
  1162 00001A56 50                  <1>     push rax
  1163 00001A57 8A47FF              <1>     mov al, byte [rdi - 1]  ;Is previous char a pathsep?
  1164 00001A5A E8DF5A0000          <1>     call swapPathSeparator
  1165 00001A5F 58                  <1>     pop rax
  1166 00001A60 750E                <1>     jnz .aptbHandleNullNoOverwrite
  1167 00001A62 8847FF              <1>     mov byte [rdi - 1], al  ;Overwrite it!
  1168 00001A65 EB0B                <1>     jmp short .aptbExitOk
  1169                              <1> .aptbHandleNullNoOverwritePrim:
  1170 00001A67 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1171 00001A6B 7403                <1>     je short .aptbHandleNullNoOverwrite
  1172                              <1>     ;This handles trailing slashes that are not right at the head of the path
  1173 00001A6D 48FFCF              <1>     dec rdi
  1174                              <1> .aptbHandleNullNoOverwrite:
  1175 00001A70 8807                <1>     mov byte [rdi], al  ;Write in a null
  1176                              <1> .aptbExitOk:
  1177 00001A72 F8                  <1>     clc
  1178                              <1>     return
    13                              <2> %%_ret:
    14 00001A73 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1179                              <1> .aptbDots:
  1180                              <1> ;For one dot, we pull the terminating null to rdi
  1181                              <1> ;For two dots, we search backwards for the previous "\"
  1182 00001A74 803D(DA060000)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1183 00001A7B 7409                <1>     je .aptbMoreDots
  1184 00001A7D C605(D9060000)20    <1>     mov byte [fcbName], " "
  1185 00001A84 EB84                <1>     jmp short .aptbAddNull
  1186                              <1> .aptbMoreDots:
  1187                              <1> ;Here we have two dots
  1188 00001A86 E824000000          <1>     call .aptbAtHeadOfPath  ;Are we at the start of the path?
  1189 00001A8B 742B                <1>     je .aptbInterveneExitJoin ;If so, it must be join or fail
  1190                              <1> ;Else, we are able to decrement.
  1191 00001A8D 4881EF02000000      <1>     sub rdi, 2  ;Go past the pathsep infront of us.
  1192                              <1> .aptbDotsLp:
  1193 00001A94 E816000000          <1>     call .aptbAtHeadOfPath  ;Are we safe to proceed?
  1194 00001A99 7490                <1>     je .aptbHandleTerminator
  1195 00001A9B 48FFCF              <1>     dec rdi ;Decrement the pointer by one
  1196 00001A9E 8A07                <1>     mov al, byte [rdi]  ;Get the char
  1197 00001AA0 E8995A0000          <1>     call swapPathSeparator  ;Is this a valid pathsep?
  1198 00001AA5 75ED                <1>     jnz .aptbDotsLp ;If not, keep searching
  1199 00001AA7 48FFC7              <1>     inc rdi ;Now go just past the new pathsep
  1200 00001AAA E97CFFFFFF          <1>     jmp .aptbHandleTerminator
  1201                              <1> .aptbAtHeadOfPath:
  1202                              <1> ;Returns ZF=ZE if at head of path.
  1203 00001AAF 57                  <1>     push rdi
  1204 00001AB0 48FFCF              <1>     dec rdi
  1205 00001AB3 4839FB              <1>     cmp rbx, rdi    ;Are we right at the start of the path?
  1206 00001AB6 5F                  <1>     pop rdi
  1207                              <1>     return
    13                              <2> %%_ret:
    14 00001AB7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1208                              <1> .aptbInterveneExitJoin:
  1209                              <1> ;Here, if we are on a join CDS, go to the root of the original drive.
  1210 00001AB8 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1211 00001ABF 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsJoinDrive | cdsValidDrive
  1212 00001AC5 7540                <1>     jne .aptbErrorExit    ;If it is not, we error return (filenotfound)
  1213                              <1>     ;Now we change the drive letter and return
  1214 00001AC7 8A4500              <1>     mov al, byte [rbp]  ;Get the first char of the path 
  1215 00001ACA 8847FD              <1>     mov byte [rdi - 3], al  ;Replace the char in destination buffer
  1216 00001ACD 2C40                <1>     sub al, "@" ;Convert to a 1 based drive number
  1217 00001ACF E86D590000          <1>     call getCDSNotJoin
  1218                              <1>     retc ;If this errors, something is really wrong. Propagate error.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001AD4 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001AD6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1219 00001AD7 56                  <1>     push rsi
  1220 00001AD8 57                  <1>     push rdi
  1221 00001AD9 53                  <1>     push rbx
  1222 00001ADA 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1223 00001AE1 E8FE550000          <1>     call getDiskDPB 
  1224 00001AE6 5B                  <1>     pop rbx
  1225 00001AE7 5F                  <1>     pop rdi
  1226 00001AE8 5E                  <1>     pop rsi
  1227 00001AE9 E93DFFFFFF          <1>     jmp .aptbHandleTerminator
  1228                              <1> .aptbInterveneEnterJoin:
  1229                              <1> ;Handles join paths.
  1230 00001AEE F605(9C000000)FF    <1>     test byte [numJoinDrv], -1  ;Test if we have any join drives
  1231                              <1>     retz    ;Return if not 
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001AF5 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001AF7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1232 00001AF8 56                  <1>     push rsi    ;rsi already points to the next pathspec
  1233 00001AF9 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
  1234 00001B00 E81B000000          <1>     call handleJoin ;Enters crit section, changes the CDS
  1235 00001B05 5E                  <1>     pop rsi
  1236                              <1>     return
    13                              <2> %%_ret:
    14 00001B06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1237                              <1> .aptbErrorExit:
  1238 00001B07 B002                <1>     mov al, errFnf
  1239 00001B09 C605(0D040000)03    <1>     mov byte [errorAction], eActUsr
  1240 00001B10 C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
  1241 00001B17 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
  1242 00001B1E F9                  <1>     stc
  1243                              <1>     return
    13                              <2> %%_ret:
    14 00001B1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1244                              <1> 
  1245                              <1> handleJoin:
  1246                              <1> ;Intervenes if the subdirectory we are entering is joined.
  1247                              <1> ;This path cannot be on a net redir drive, local redir is ok.
  1248                              <1> ;Input:
  1249                              <1> ; rsi = First char of potential JOIN'ed pathspec.
  1250                              <1> ; rbx = Ptr to the pathsep behind which we cannot traverse.
  1251                              <1> ; rax = 0
  1252                              <1> ;Output:
  1253                              <1> ;If no match, no effect.
  1254                              <1> ;If a matched path is found, working CDS, DPB and drv are set for the
  1255                              <1> ; join drive. rsi is advanced to the next path componant.
  1256                              <1> ;If CF=CY => Disk detection error
  1257 00001B20 51                  <1>     push rcx
  1258 00001B21 55                  <1>     push rbp
  1259 00001B22 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1260 00001B29 0FB74D43            <1>     movzx ecx, word [rbp + cds.wFlags]
  1261 00001B2D F7C100800000        <1>     test ecx, cdsRedirDrive     ;Cannot join over networks.
  1262 00001B33 740C                <1>     jz .okToGo
  1263 00001B35 F7C180000000        <1>     test ecx, cdsRdirLocDrive   ;If not a local redir, exit (cannot be net).
  1264 00001B3B 0F848C000000        <1>     jz .exitNoCrit
  1265                              <1> .okToGo:
  1266 00001B41 E8695D0000          <1>     call dosCrit1Enter
  1267 00001B46 488B2D(65000000)    <1>     mov rbp, qword [cdsHeadPtr]
  1268 00001B4D 31C9                <1>     xor ecx, ecx    ;Use as a CDS counter
  1269                              <1> .checkCDS:
  1270 00001B4F 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsValidDrive | cdsJoinDrive
  1271 00001B55 7560                <1>     jne .gotoNextCDS
  1272                              <1> .scanCDSName:
  1273                              <1> ;Get the length of the CDS path componant to check
  1274 00001B57 51                  <1>     push rcx
  1275 00001B58 57                  <1>     push rdi
  1276 00001B59 56                  <1>     push rsi        ;Have rsi point to the user path buffer
  1277 00001B5A 4889EF              <1>     mov rdi, rbp    ;Have rdi point to the CDS path
  1278 00001B5D E8385A0000          <1>     call strlen     ;Get length of the path componant in ecx
  1279 00001B62 FFC9                <1>     dec ecx ;Dont wanna compare the terminator
  1280 00001B64 F3A6                <1>     repe cmpsb      ;Ensure strings are equal
  1281 00001B66 754C                <1>     jnz .notString
  1282                              <1>     ;Now ensure rsi is pointing at a pathsep/terminator char too.
  1283 00001B68 AC                  <1>     lodsb   ;Get this char and advance rsi to next path componant.
  1284 00001B69 E8D0590000          <1>     call swapPathSeparator
  1285 00001B6E 7407                <1>     jz .goodString
  1286 00001B70 84C0                <1>     test al, al
  1287 00001B72 7540                <1>     jnz .notString
  1288 00001B74 48FFCE              <1>     dec rsi ;If this is a null char, point rsi back to it
  1289                              <1> .goodString:
  1290                              <1>     ;Here we know we have the right string.
  1291 00001B77 59                  <1>     pop rcx ;Trash original rsi
  1292 00001B78 5F                  <1>     pop rdi ;Get original rdi value (i.e. our internal built path).
  1293 00001B79 59                  <1>     pop rcx 
  1294                              <1>     ;Now store the path in the original CDS before intervening
  1295                              <1>     ; in the path
  1296 00001B7A 48892D(12070000)    <1>     mov qword [workingCDS], rbp  ;Save the pointer here
  1297 00001B81 56                  <1>     push rsi    ;Save ptr to the possible null char!
  1298 00001B82 57                  <1>     push rdi
  1299 00001B83 4889EF              <1>     mov rdi, rbp    ;Needs to be called with rdi = CDS ptr
  1300 00001B86 53                  <1>     push rbx    ;Preserve the head of the path
  1301 00001B87 E858550000          <1>     call getDiskDPB ;Rebuild DPB if needed. Sets working DPB and drive
  1302 00001B8C 5B                  <1>     pop rbx
  1303 00001B8D 5F                  <1>     pop rdi
  1304 00001B8E 5E                  <1>     pop rsi
  1305 00001B8F 7237                <1>     jc .exit ;If return with CF=CY, this failed. Error exit
  1306 00001B91 8A05(09070000)      <1>     mov al, byte [workingDrv]   ;Get 0 based number
  1307 00001B97 0441                <1>     add al, "A" ;Turn into the letter to store in CDS path
  1308 00001B99 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1309 00001B9D 7403                <1>     je .notNet
  1310 00001B9F F9                  <1>     stc     ;Net drives should be explicitly mounted on a drive first!
  1311 00001BA0 EB26                <1>     jmp short .exit
  1312                              <1> .notNet:
  1313                              <1> ; Join entry intervention occurs here.
  1314 00001BA2 8843FE              <1>     mov byte [rbx - 2], al
  1315 00001BA5 488D7B01            <1>     lea rdi, qword [rbx + 1]    ;Go to first byte past pathsep
  1316                              <1> .pullLp:
  1317 00001BA9 AC                  <1>     lodsb
  1318 00001BAA AA                  <1>     stosb
  1319 00001BAB 84C0                <1>     test al, al
  1320 00001BAD 75FA                <1>     jnz .pullLp
  1321 00001BAF 48FFCF              <1>     dec rdi
  1322 00001BB2 EB14                <1>     jmp short .exit
  1323                              <1> .notString:
  1324 00001BB4 5E                  <1>     pop rsi
  1325 00001BB5 5F                  <1>     pop rdi
  1326 00001BB6 59                  <1>     pop rcx
  1327                              <1> .gotoNextCDS:
  1328 00001BB7 4881C55F000000      <1>     add rbp, cds_size
  1329 00001BBE FFC1                <1>     inc ecx 
  1330 00001BC0 3A0D(78000000)      <1>     cmp cl, byte [lastdrvNum]
  1331 00001BC6 7587                <1>     jnz .checkCDS
  1332                              <1> .exit:
  1333 00001BC8 E8EC5C0000          <1>     call dosCrit1Exit
  1334                              <1> .exitNoCrit:
  1335 00001BCD 5D                  <1>     pop rbp
  1336 00001BCE 59                  <1>     pop rcx
  1337                              <1>     return
    13                              <2> %%_ret:
    14 00001BCF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1338                              <1> 
  1339                              <1> checkDevPath:
  1340                              <1> ;Only works in truename and in the root dir of a disk. If the search pattern
  1341                              <1> ; is a char device, replace the root pathsep with a UNIX pathsep.
  1342                              <1> ;Else if we are searching for the DEV folder in the root of a disk
  1343                              <1> ; and the next componant we are searching for is a char device, we 
  1344                              <1> ; only copy over the char device to the destination buffer with a UNIX
  1345                              <1> ; pathsep. Else, we do nothing. Clobbers rbx!
  1346                              <1> ;Input: rsi = Pointer to the next path spec
  1347                              <1> ;       rdi = Buffer where to add it
  1348                              <1> ;Output: If \DEV\devicename then copy /devicename to buffer.
  1349                              <1> ;        If devicename in the root dir, then replace pathsep
  1350 00001BD0 F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;If set, return!
  1351                              <1>     retnz             
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001BD7 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001BD9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1352                              <1> ;First check we are searching in the root dir!
  1353 00001BDA 66817FFE3A5C        <1>     cmp word [rdi - 2], ":\" 
  1354                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001BE0 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001BE2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1355                              <1> ;Now check to see if fcbname is DEV
  1356 00001BE3 50                  <1>     push rax
  1357 00001BE4 48B844455620202020- <1>     mov rax, "DEV     "
  1357 00001BED 20                  <1>
  1358 00001BEE 483905(D9060000)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1359 00001BF5 58                  <1>     pop rax
  1360 00001BF6 7566                <1>     jne .checkDevice   ;Maybe this is a device if not DEV
  1361 00001BF8 813D(E1060000)2020- <1>     cmp dword [fcbName + 8], "   \"
  1361 00001C00 205C                <1>
  1362 00001C02 755A                <1>     jne .checkDevice    ;Was not \DEV\, check if it was \CON or something
  1363                              <1>     ;So here we are in the DEV dir. Check if \DEV or just DEV
  1364 00001C04 F605(01070000)FF    <1>     test byte [spliceFlag], -1
  1365                              <1>     retz    ;Exit if relative!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001C0B 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001C0D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1366                              <1>     ;Else, don't add DEV to the name, replace "\" with a "/", move rsi past it
  1367 00001C0E 56                  <1>     push rsi    ;Save if not followed by dev!
  1368 00001C0F 57                  <1>     push rdi    ;If followed by dev, not a problem, we end the pathbuild!
  1369 00001C10 488D3D(D9060000)    <1>     lea rdi, fcbName
  1370 00001C17 E888F7FFFF          <1>     call asciiToFCB    ;Advances rsi
  1371                              <1>     ;Returns in al the terminating char of the source string
  1372 00001C1C 5F                  <1>     pop rdi
  1373 00001C1D 5E                  <1>     pop rsi
  1374                              <1>     ;If al is a pathsep, fail 
  1375 00001C1E E81B590000          <1>     call swapPathSeparator  ;Device names cannot be terminated with a "\" or "/"
  1376 00001C23 7409                <1>     jz .repDev   ;Thus this is not a device, normal search!
  1377                              <1>     ;mov byte [fcbName + 11], 0 ;Store terminator in fcbName field
  1378 00001C25 53                  <1>     push rbx
  1379 00001C26 E845000000          <1>     call checkIfCharDevice
  1380 00001C2B 5B                  <1>     pop rbx ;Don't need bh yet
  1381 00001C2C 7322                <1>     jnc .pathSepExit    ;If this is a char dev, jump down
  1382                              <1> .repDev:
  1383                              <1> ;Componant after DEV was not a char dev, replace DEV back in the count!
  1384 00001C2E C705(D9060000)4445- <1>     mov dword [fcbName], "DEV "
  1384 00001C36 5620                <1>
  1385 00001C38 C705(DD060000)2020- <1>     mov dword [fcbName + 4], "    "
  1385 00001C40 2020                <1>
  1386 00001C42 C705(E1060000)2020- <1>     mov dword [fcbName + 8], "   \" 
  1386 00001C4A 205C                <1>
  1387 00001C4C B05C                <1>     mov al, "\" ;\DEV\ was a dir, report it was so!
  1388 00001C4E EB0C                <1>     jmp short .exit
  1389                              <1> .pathSepExit:
  1390                              <1> ;Here only if the device was determined to be a char device.
  1391 00001C50 30C0                <1>     xor al, al
  1392 00001C52 8805(E4060000)      <1>     mov byte [fcbName + 11], al ;Store null pathsep here!
  1393 00001C58 C647FF2F            <1>     mov byte [rdi - 1], "/" ;Store reverse pathsep here!
  1394                              <1> .exit:
  1395 00001C5C F8                  <1>     clc
  1396                              <1>     return
    13                              <2> %%_ret:
    14 00001C5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1397                              <1> .checkDevice:
  1398 00001C5E E80D000000          <1>     call checkIfCharDevice  ;Check if what we already have is a chardev?
  1399 00001C63 72F7                <1>     jc .exit                ;If not a device, silently return
  1400 00001C65 803D(E4060000)00    <1>     cmp byte [fcbName + 11], 0  ;If null, its a char dev in the root!
  1401 00001C6C 74E2                <1>     je .pathSepExit
  1402 00001C6E EBEC                <1>     jmp short .exit         ;Else its gonna fail! Char dev as path comp... eek!
  1403                              <1> 
  1404                              <1> checkIfCharDevice:  ;Int 2Fh AX=1223h
  1405                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1406                              <1> ; device driver chain. 
  1407                              <1> ;Output: CF=CY if not found
  1408                              <1> ;        CF=NC if found
  1409                              <1> ;           BH = Low byte of the device attribute word
  1410 00001C70 50                  <1>     push rax
  1411 00001C71 57                  <1>     push rdi
  1412 00001C72 488B05(D9060000)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1413 00001C79 488D3D(7A000000)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1414                              <1> .checkName:
  1415 00001C80 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1416 00001C84 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1417 00001C86 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1418 00001C89 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1419 00001C8B 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1420 00001C8E 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1421 00001C91 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1422 00001C95 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1423                              <1> .walkList:
  1424 00001C97 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1425 00001C9A 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1426 00001CA1 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1427 00001CA3 F9                  <1>     stc
  1428                              <1> .exit:
  1429 00001CA4 5F                  <1>     pop rdi
  1430 00001CA5 58                  <1>     pop rax
  1431                              <1>     return
    13                              <2> %%_ret:
    14 00001CA6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1432                              <1> 
  1433                              <1> buildCharDir:
  1434                              <1> ;Build a dummy directory entry for the char device in FCBName
  1435                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1436 00001CA7 50                  <1>     push rax
  1437 00001CA8 57                  <1>     push rdi
  1438 00001CA9 C605(E4060000)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1439 00001CB0 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1440                              <1>     ;Zero the directory copy (32 bytes)
  1441 00001CB7 50                  <1>     push rax
  1442 00001CB8 51                  <1>     push rcx
  1443 00001CB9 57                  <1>     push rdi
  1444 00001CBA 31C0                <1>     xor eax, eax    ;Zero rax
  1445 00001CBC B904000000          <1>     mov ecx, 4
  1446 00001CC1 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1447 00001CC4 5F                  <1>     pop rdi
  1448 00001CC5 59                  <1>     pop rcx
  1449 00001CC6 58                  <1>     pop rax
  1450 00001CC7 C705(85070000)FFFF- <1>     mov dword [dirEntry], -1    ;Indicate invalid offset into dir
  1450 00001CCF FFFF                <1>
  1451 00001CD1 488B05(D9060000)    <1>     mov rax, qword [fcbName]
  1452 00001CD8 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1453 00001CDB B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1454 00001CE0 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1455 00001CE3 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1456                              <1>     ;Get date and time and set the write time in the directory entry
  1457 00001CE7 E8E1120000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1458 00001CEC E8C7130000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1459 00001CF1 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1460 00001CF4 31C0                <1>     xor eax, eax
  1461 00001CF6 5F                  <1>     pop rdi
  1462 00001CF7 58                  <1>     pop rax
  1463                              <1>     return
    13                              <2> %%_ret:
    14 00001CF8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1464                              <1> 
  1465                              <1> checkFailingComp:
  1466                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1467                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1468                              <1> ;Returns: ZF=ZE => Last path componant
  1469                              <1> ;         ZF=NZ => Not last path componant
  1470 00001CF9 50                  <1>     push rax
  1471 00001CFA 8A05(E4060000)      <1>     mov al, byte [fcbName + 11]
  1472 00001D00 84C0                <1>     test al, al
  1473 00001D02 58                  <1>     pop rax
  1474                              <1>     return
    13                              <2> %%_ret:
    14 00001D03 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                                  %include "./src/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 00001D04 4889D7              <1>     mov rdi, rdx
     8 00001D07 E88E580000          <1>     call strlen
     9 00001D0C 81F940000000        <1>     cmp ecx, MAX_FSPEC
    10 00001D12 761E                <1>     jbe .okLength
    11                              <1> .badLen:
    12 00001D14 B805000000          <1>     mov eax, errAccDen
    13 00001D19 E9DC5B0000          <1>     jmp extErrExit
    14                              <1> .badFile:
    15 00001D1E B802000000          <1>     mov eax, errFnf
    16 00001D23 E9D25B0000          <1>     jmp extErrExit
    17                              <1> .badPath:
    18 00001D28 B803000000          <1>     mov eax, errPnf
    19 00001D2D E9C85B0000          <1>     jmp extErrExit
    20                              <1> .okLength:
    21 00001D32 4889D6              <1>     mov rsi, rdx
    22 00001D35 E8C4580000          <1>     call checkPathspecOK
    23 00001D3A 72D8                <1>     jc .badLen  ;Don't allow any malformed chars, exit Acc den
    24                              <1> .pathOk:
    25 00001D3C E878590000          <1>     call scanPathWC
    26 00001D41 72E5                <1>     jc .badPath ;Dont allow wildcards
    27                              <1>     ;Path is ok, now proceed
    28 00001D43 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive
    29 00001D4A 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    30 00001D51 E875F7FFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    31                              <1>     ;If the path exists, exit error
    32 00001D56 0F839E5B0000        <1>     jnc extErrExit
    33 00001D5C E839580000          <1>     call strlen ;Get the length again
    34 00001D61 81F943000000        <1>     cmp ecx, MAX_PATH
    35 00001D67 77AB                <1>     ja .badLen
    36                              <1>     ;Handle resolved null paths here!!!
    37 00001D69 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
    38 00001D6F 30C0                <1>     xor al, al
    39 00001D71 3D003A5C00          <1>     cmp eax, 005C3A00h
    40 00001D76 74A6                <1>     je .badFile
    41                              <1>     ;-----------------------------
    42                              <1>     ;TEST THAT THE DRIVE IS VALID
    43                              <1>     ;This is clearly unnecessary
    44                              <1>     ;    Keep it for now...
    45                              <1>     ;-----------------------------
    46 00001D78 57                  <1>     push rdi
    47 00001D79 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    48 00001D80 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive ;Cannot make on invalid drive
    49 00001D86 5F                  <1>     pop rdi
    50 00001D87 0F846D5B0000        <1>     jz extErrExit  ;Exit access denied
    51                              <1>     ;-------------------------------------------
    52                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    53 00001D8D E867FFFFFF          <1>     call checkFailingComp
    54 00001D92 0F85625B0000        <1>     jnz extErrExit
    55                              <1>     ;So all is well, the new subdirectories name is in fcbName
    56                              <1>     ;The parent dir's directory entry is in the curDirCopy
    57 00001D98 E8EC550000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    58                              <1>     ;returns in rdi the working cds ptr
    59 00001D9D 7312                <1>     jnc .notNet
    60 00001D9F B803110000          <1>     mov eax, 1103h
    61 00001DA4 CD2F                <1>     int 2fh
    62 00001DA6 0F824E5B0000        <1>     jc extErrExit
    63 00001DAC E93B5B0000          <1>     jmp extGoodExit
    64                              <1> .notNet:
    65 00001DB1 E8F95A0000          <1>     call dosCrit1Enter
    66                              <1>     ;Current dpb ptr is already set
    67                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    68                              <1>     ;First we make a dummy dir in curDirCopy
    69                              <1>     ;mov byte [delChar], 0E5h    ;Setup delchar
    70 00001DB6 C605(07070000)FF    <1>     mov byte [openCreate], -1   ;Creating special file!
    71 00001DBD 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    72 00001DC4 488D35(D9060000)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    73 00001DCB 488D3D(5A060000)    <1>     lea rdi, curDirCopy
    74 00001DD2 48A5                <1>     movsq   ;Copy the name over
    75 00001DD4 A5                  <1>     movsd
    76 00001DD5 E8F3110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    77 00001DDA E8D9120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    78 00001DDF 8905(68060000)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    79 00001DE5 8905(70060000)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    80 00001DEB 31C0                <1>     xor eax, eax
    81 00001DED 8905(76060000)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    82 00001DF3 C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    83 00001DFA 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
    84                              <1> .searchForDirSpace:
    85 00001E00 8905(7F070000)      <1>     mov dword [dirClustA], eax
    86 00001E06 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    87 00001E08 668905(83070000)    <1>     mov word [dirSect], ax
    88 00001E0F 8905(85070000)      <1>     mov dword [dirEntry], eax
    89 00001E15 E898050000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    90 00001E1A 7328                <1>     jnc .dirEntryFnd
    91 00001E1C 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    91 00001E24 0000                <1>
    92 00001E26 0F844A010000        <1>     je .bad ;Set CF and exit
    93 00001E2C E86E060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    94 00001E31 0F823F010000        <1>     jc .bad
    95 00001E37 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    96 00001E3C 0F8434010000        <1>     je .bad
    97                              <1>     ;Else eax = Newly allocated cluster
    98 00001E42 EBBC                <1>     jmp short .searchForDirSpace
    99                              <1> .dirEntryFnd:
   100                              <1> ;rdi points to current directory copy
   101                              <1> ;rsi now points to offset in the buffer to write the entry to
   102                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
   103 00001E44 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
   104 00001E4B 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   105                              <1>      
   106 00001E4F 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
   107 00001E56 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   108 00001E5D 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   109 00001E60 668935(4E070000)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   110                              <1> ;Must now request a cluster and sanitise it
   111 00001E67 E8A2ECFFFF          <1>     call startNewChain      ;Get cluster number in eax
   112 00001E6C 0F8209010000        <1>     jc .badExit
   113 00001E72 E864060000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
   114 00001E77 0F82FE000000        <1>     jc .badExit
   115                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   116 00001E7D 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   117 00001E84 C1E810              <1>     shr eax, 10h    ;Get high word low
   118 00001E87 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   119 00001E8E 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   120 00001E95 E872EBFFFF          <1>     call getBufForDir
   121 00001E9A 0F82DB000000        <1>     jc .badExit
   122 00001EA0 0FB705(4E070000)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   123 00001EA7 488D35(5A060000)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   124 00001EAE 488D7C0320          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   125 00001EB3 B904000000          <1>     mov ecx, 4
   126 00001EB8 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   127 00001EBB E8E7E9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   128                              <1>     ;Now need to read in data sector and make two entries . and ..
   129 00001EC0 57                  <1>     push rdi
   130 00001EC1 51                  <1>     push rcx
   131 00001EC2 B90B000000          <1>     mov ecx, 11
   132 00001EC7 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   133 00001ECE B020                <1>     mov al, " "
   134 00001ED0 F3AA                <1>     rep stosb
   135 00001ED2 59                  <1>     pop rcx
   136 00001ED3 5F                  <1>     pop rdi
   137 00001ED4 48B82E000000000000- <1>     mov rax, "."
   137 00001EDD 00                  <1>
   138 00001EDE 8805(5A060000)      <1>     mov byte [curDirCopy], al
   139 00001EE4 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   140 00001EEB 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   141 00001EF2 C605(65060000)30    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory | dirArchive 
   142 00001EF9 C1E210              <1>     shl edx, 10h
   143 00001EFC 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   144 00001EFE E88EEBFFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   145 00001F03 E804EBFFFF          <1>     call getBufForDir
   146 00001F08 7271                <1>     jc .badExit
   147                              <1>     ;rbx has buffer pointer now
   148 00001F0A 488D35(5A060000)    <1>     lea rsi, curDirCopy
   149 00001F11 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   150 00001F15 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   151 00001F1A F348A5              <1>     rep movsq
   152                              <1>     ;Now create .. entry
   153 00001F1D C605(5B060000)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   154 00001F24 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   155 00001F2A E8F7EAFFFF          <1>     call getFATtype
   156 00001F2F 81F902000000        <1>     cmp ecx, 2
   157 00001F35 7207                <1>     jb .notFAT32
   158 00001F37 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   159 00001F3A 7502                <1>     jne .notFAT32
   160 00001F3C 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   161                              <1> .notFAT32:
   162 00001F3E 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   163 00001F45 C1E810              <1>     shr eax, 10h
   164 00001F48 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   165 00001F4F 488D35(5A060000)    <1>     lea rsi, curDirCopy
   166 00001F56 B904000000          <1>     mov ecx, 4
   167 00001F5B F348A5              <1>     rep movsq
   168 00001F5E E844E9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   169 00001F63 E8D1E7FFFF          <1>     call flushAllBuffersForDPB    ;Write the buffers to disk
   170 00001F68 7211                <1>     jc .badExit
   171                              <1> .okExit:
   172                              <1>     ;AND WE ARE DONE!
   173 00001F6A E84A590000          <1>     call dosCrit1Exit
   174 00001F6F 31C0                <1>     xor eax, eax
   175 00001F71 E976590000          <1>     jmp extGoodExit
   176                              <1> .bad:
   177 00001F76 B805000000          <1>     mov eax, errAccDen
   178                              <1> .badExit:
   179 00001F7B E839590000          <1>     call dosCrit1Exit
   180 00001F80 E975590000          <1>     jmp extErrExit
   181                              <1> 
   182                              <1> removeDIR:         ;ah = 3Ah
   183 00001F85 4889D7              <1>     mov rdi, rdx
   184 00001F88 E80D560000          <1>     call strlen
   185 00001F8D 81F940000000        <1>     cmp ecx, MAX_FSPEC
   186 00001F93 7613                <1>     jbe .okLength
   187                              <1> .badPath:
   188 00001F95 B005                <1>     mov al, errAccDen
   189 00001F97 E95E590000          <1>     jmp extErrExit
   190                              <1> .pnf:
   191 00001F9C E818590000          <1>     call dosCrit1Exit   ;Only jumped to in a critical section
   192 00001FA1 B003                <1>     mov al, errPnf
   193 00001FA3 E952590000          <1>     jmp extErrExit
   194                              <1> .okLength:
   195 00001FA8 4889D6              <1>     mov rsi, rdx
   196 00001FAB E84E560000          <1>     call checkPathspecOK
   197 00001FB0 72E3                <1>     jc .badPath  ;Don't allow any malformed chars
   198                              <1> .pathOk:
   199 00001FB2 E802570000          <1>     call scanPathWC
   200 00001FB7 72DC                <1>     jc .badPath ;Dont allow wildcards
   201                              <1>     ;Path is ok, now proceed
   202 00001FB9 E8F1580000          <1>     call dosCrit1Enter  ;Don't let another DOS task interrupt us!
   203 00001FBE C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   204 00001FC5 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   205 00001FCC E8F6F4FFFF          <1>     call getDirPath     ;Get a Directory path in buffer1, hitting the disk
   206 00001FD1 72C9                <1>     jc .pnf             ;Path Doesn't exist
   207 00001FD3 E8B1530000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   208 00001FD8 7312                <1>     jnc .notNet
   209 00001FDA B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   210 00001FDF CD2F                <1>     int 2fh
   211 00001FE1 0F8213590000        <1>     jc extErrExit
   212 00001FE7 E900590000          <1>     jmp extGoodExit
   213                              <1> .notNet:
   214 00001FEC 488D3D(1E050000)    <1>     lea rdi, buffer1
   215 00001FF3 E8A2550000          <1>     call strlen ;Get the length of the full qualified name in ecx
   216 00001FF8 66890D(4E070000)    <1>     mov word [pathLen], cx
   217 00001FFF 6681F90400          <1>     cmp cx, 4   ;Only way to get this after truename is if root dir (i.e. join)
   218 00002004 7614                <1>     jbe .cantDelCD
   219                              <1>     ;Now we scan all the CDS's to ensure this path is not the current dir anywhere
   220 00002006 31C0                <1>     xor eax, eax
   221                              <1> .scanLoop:
   222 00002008 E8FF540000          <1>     call getCDSforDrive ;Gets a CDS string ptr in rsi
   223 0000200D 721A                <1>     jc .notCurrent
   224 0000200F E8BE550000          <1>     call compareFileNames
   225 00002014 7404                <1>     jz .cantDelCD
   226 00002016 FFC0                <1>     inc eax
   227 00002018 EBEE                <1>     jmp short .scanLoop
   228                              <1> .cantDelCD:
   229 0000201A B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   230 0000201F E895580000          <1>     call dosCrit1Exit
   231 00002024 E9D1580000          <1>     jmp extErrExit
   232                              <1> .notCurrent:
   233                              <1>     ;mov byte [delChar], 0E5h    ;Setup delchar
   234 00002029 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   235                              <1>     ;Now let use check that our directory is not the CDS currentdir
   236 00002030 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   237 00002037 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   238                              <1>     ;If the given path length is one more than the backslash offset
   239                              <1>     ; due to the terminating null, then the user is trying to delete the 
   240                              <1>     ; root dir. Fail this.
   241 0000203A 0FB74F5D            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   242 0000203E FFC1                <1>     inc ecx
   243 00002040 663B0D(4E070000)    <1>     cmp cx, word [pathLen]
   244 00002047 0F841E010000        <1>     je .accessDenied
   245 0000204D E874030000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   246                              <1>     ;for the entry in the sector we are hoping to delete
   247 00002052 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   248 00002059 C1E010              <1>     shl eax, 10h
   249 0000205C 0FB71D(74060000)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   250 00002063 09D8                <1>     or eax, ebx
   251 00002065 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   252 0000206B E821EAFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   253 00002070 E897E9FFFF          <1>     call getBufForDir
   254 00002075 0F82F5000000        <1>     jc .exitBad
   255                              <1>     ;rbx points to buffer
   256 0000207B 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   257 0000207F 48B82E202020202020- <1>     mov rax, ".       "
   257 00002088 20                  <1>
   258 00002089 483906              <1>     cmp qword [rsi], rax
   259 0000208C 0F85D9000000        <1>     jne .accessDenied
   260 00002092 B42E                <1>     mov ah, "." ;Screw the partial stall
   261 00002094 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   262 00002098 0F85CD000000        <1>     jne .accessDenied
   263 0000209E 4881C620000000      <1>     add rsi, fatDirEntry_size
   264 000020A5 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   265 000020AC B904000000          <1>     mov ecx, 4
   266 000020B1 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   267                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   268                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   269 000020B4 488D3D(D9060000)    <1>     lea rdi, fcbName
   270 000020BB B03F                <1>     mov al, "?"
   271 000020BD B90B000000          <1>     mov ecx, 11
   272 000020C2 F3AA                <1>     rep stosb   ;Store the pattern to search for
   273 000020C4 30C0                <1>     xor al, al  ;Store a terminating zero
   274 000020C6 AA                  <1>     stosb
   275 000020C7 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   276 000020CD 50                  <1>     push rax    ;Save on stack temporarily
   277 000020CE 8905(7F070000)      <1>     mov dword [dirClustA], eax
   278 000020D4 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   279 000020D6 668905(83070000)    <1>     mov word [dirSect], ax
   280 000020DD C705(85070000)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   280 000020E5 0000                <1>
   281 000020E7 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   282 000020EE 58                  <1>     pop rax
   283 000020EF E89DE9FFFF          <1>     call getStartSectorOfCluster
   284 000020F4 E813E9FFFF          <1>     call getBufForDir   
   285 000020F9 7275                <1>     jc .exitBad
   286 000020FB E8C5F1FFFF          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   287 00002100 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   288 00002107 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   289 0000210D C605(69040000)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   290 00002114 E8D3F0FFFF          <1>     call searchDir.rmdirEP
   291 00002119 7350                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   292                              <1>     ;Else, this is a empty dir, we can remove it
   293                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   294 0000211B 488B05(46070000)    <1>     mov rax, qword [tempSect]
   295 00002122 E8E5E8FFFF          <1>     call getBufForDir
   296 00002127 7247                <1>     jc .exitBad
   297 00002129 E897F1FFFF          <1>     call prepSectorSearch
   298 0000212E 0FB705(4E070000)    <1>     movzx eax, word [entry]
   299 00002135 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   300 00002139 4801C6              <1>     add rsi, rax    
   301 0000213C C606E5              <1>     mov byte [rsi], 0E5h  ;Store delchar now to remove the entry
   302 0000213F 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   303 00002143 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   304 00002147 E85BE7FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   305 0000214C C1E210              <1>     shl edx, 10h
   306 0000214F 09D0                <1>     or eax, edx
   307                              <1> ;Now remove the FAT chain
   308 00002151 E893EBFFFF          <1>     call unlinkFAT
   309 00002156 7218                <1>     jc .exitBad
   310 00002158 E8DCE5FFFF          <1>     call flushAllBuffersForDPB
   311 0000215D 7211                <1>     jc .exitBad
   312 0000215F E855570000          <1>     call dosCrit1Exit
   313 00002164 31C0                <1>     xor eax, eax
   314 00002166 E981570000          <1>     jmp extGoodExit
   315                              <1> .accessDenied:
   316 0000216B B805000000          <1>     mov eax, errAccDen
   317                              <1> .exitBad:
   318 00002170 F9                  <1>     stc
   319 00002171 E843570000          <1>     call dosCrit1Exit
   320 00002176 E97F570000          <1>     jmp extErrExit
   321                              <1> 
   322                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   323                              <1> ;Input: rdx = Pointer to ASCIIZ string
   324 0000217B 4889D7              <1>     mov rdi, rdx
   325 0000217E E817540000          <1>     call strlen
   326 00002183 81F940000000        <1>     cmp ecx, MAX_FSPEC
   327 00002189 7618                <1>     jbe .okLength
   328                              <1> .badPath:
   329 0000218B B003                <1>     mov al, errPnf
   330 0000218D E968570000          <1>     jmp extErrExit
   331                              <1> .badPathCrit:
   332 00002192 E822570000          <1>     call dosCrit1Exit
   333 00002197 EBF2                <1>     jmp short .badPath
   334                              <1> .badCrit:
   335 00002199 E81B570000          <1>     call dosCrit1Exit
   336 0000219E E957570000          <1>     jmp extErrExit
   337                              <1> .okLength:
   338 000021A3 4889D6              <1>     mov rsi, rdx
   339 000021A6 E853540000          <1>     call checkPathspecOK
   340 000021AB 7302                <1>     jnc .notBad     ;Don't allow any malformed chars or wildcards
   341 000021AD 74DC                <1>     jz .badPath     ;If wildcards found, exit error!
   342                              <1>     ;Malformed chars get caught later! Allow for "X:\",0" style paths
   343                              <1> .notBad:
   344 000021AF E824550000          <1>     call checkPathNet   ;Never allow network paths
   345 000021B4 74D5                <1>     jz .badPath ;Or Net paths
   346                              <1>     ;Path is ok, now proceed
   347 000021B6 E8F4560000          <1>     call dosCrit1Enter  ;ENTER DOS CRITICAL SECTION HERE!!
   348 000021BB C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   349 000021C2 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   350 000021C9 E8F9F2FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   351 000021CE 72C9                <1>     jc .badCrit   ;Exit with error code in eax
   352                              <1>     ;Now we check to make sure the path provided is not past the maximum
   353                              <1>     ; length of a CDS path. This accounts for the possibility that a SUBST
   354                              <1>     ; moved the path past the end.
   355 000021D0 488D3D(1E050000)    <1>     lea rdi, buffer1
   356 000021D7 E8BE530000          <1>     call strlen ;Get the length of this path
   357 000021DC 81F943000000        <1>     cmp ecx, MAX_PATH
   358 000021E2 77AE                <1>     ja .badPathCrit
   359                              <1>     ;The path must've been ok, so now copy the path into the CDS
   360                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   361                              <1>     ;Copy the workingCDS to the tmpCDS
   362 000021E4 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   363 000021EB 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   364 000021F1 0F85E6000000        <1>     jnz .net    ;This is done by the redirector for redirector drives
   365 000021F7 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Are we a join drive?
   366 000021FD 0F848D000000        <1>     jz .notJoin     ;Skip the join intervention if not.
   367                              <1>     ;!!!! JOIN INTERVENTION BELOW !!!!
   368 00002203 4889FD              <1>     mov rbp, rdi    ;Save the ptr to the pathname here
   369 00002206 E8E4000000          <1>     call .getFatCluster
   370 0000220B 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set cluster
   371                              <1>     ;ecx has the length of the path in the buffer
   372 0000220E 89C8                <1>     mov eax, ecx    ;Save the number of chars in the buffer
   373 00002210 2D02000000          <1>     sub eax, 2      ;Remove the X: prefix
   374 00002215 4889F7              <1>     mov rdi, rsi    ;Get the ptr to the cds to get it's length
   375 00002218 E87D530000          <1>     call strlen
   376 0000221D 01C8                <1>     add eax, ecx    ;Add the lengths of the two strings together
   377 0000221F 3D43000000          <1>     cmp eax, MAX_PATH
   378 00002224 0F8768FFFFFF        <1>     ja .badPathCrit
   379 0000222A 51                  <1>     push rcx
   380 0000222B 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Copy the join-disabled CDS over to tmpCDS
   381 00002232 B95F000000          <1>     mov ecx, cds_size
   382 00002237 F3A4                <1>     rep movsb   
   383 00002239 59                  <1>     pop rcx
   384 0000223A FFC9                <1>     dec ecx ;Remove the trailing null from the count
   385 0000223C 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   386 00002243 57                  <1>     push rdi
   387 00002244 4801CF              <1>     add rdi, rcx    ;Move the destination ptr to the trailing null
   388 00002247 488D7502            <1>     lea rsi, qword [rbp + 2]    ;Skip the first two chars from path to copy
   389 0000224B F3A4                <1>     rep movsb   ;Copy the new part of the path back in
   390 0000224D 5F                  <1>     pop rdi
   391 0000224E 4889FE              <1>     mov rsi, rdi
   392 00002251 31C0                <1>     xor eax, eax
   393 00002253 31C9                <1>     xor ecx, ecx
   394 00002255 FFC9                <1>     dec ecx
   395 00002257 F2AE                <1>     repne scasb   ;Search for the terminating null
   396 00002259 4881EF02000000      <1>     sub rdi, 2
   397 00002260 8A07                <1>     mov al, byte [rdi]  ;Get the second to last char
   398 00002262 E8D7520000          <1>     call swapPathSeparator
   399 00002267 7503                <1>     jnz .notSlash
   400 00002269 C60700              <1>     mov byte [rdi], 0   ;If it is a pathsep, put a null here
   401                              <1> .notSlash:
   402 0000226C 0FB606              <1>     movzx eax, byte [rsi]    ;Get the drive letter here
   403 0000226F 2C41                <1>     sub al, "A"     ;Turn into a 1 based drive number
   404 00002271 E896520000          <1>     call getCDSforDrive ;Set working CDS and move ptr in rsi 
   405 00002276 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Put tmpCDS in rdi
   406 0000227D 4887F7              <1>     xchg rsi, rdi   ;And swap the pointers
   407 00002280 C7474DFFFFFFFF      <1>     mov dword [rdi + cds.dStartCluster], -1 ;Finally, set the start cluster to welp.
   408                              <1>     ;mov word [rdi + cds.wBackslashOffset], 2    ;Make sure this is 2 if it changed...
   409                              <1>     ;Backslash offset must always be 2 on a join host
   410 00002287 B943000000          <1>     mov ecx, MAX_PATH
   411 0000228C F3A4                <1>     rep movsb   ;Copy in the CDS path only, to keep all other fields ok.
   412 0000228E EB41                <1>     jmp short .exitGood
   413                              <1> .notJoin:
   414                              <1> ;rsi -> workingCDS
   415                              <1> ;Lets first copy the working CDS into tmpCDS
   416 00002290 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   417 00002297 B95F000000          <1>     mov ecx, cds_size
   418 0000229C F3A4                <1>     rep movsb         ;Copy the workingCDS into tmpCDS
   419 0000229E E84C000000          <1>     call .getFatCluster ;Now get the start cluster from the directory copy
   420 000022A3 8905(C7060000)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   421 000022A9 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   422 000022B0 488D35(1E050000)    <1>     lea rsi, buffer1    ;Now copy the FQ pathname into the CDS
   423 000022B7 E8ED520000          <1>     call strcpy
   424 000022BC 488D35(7A060000)    <1>     lea rsi, tmpCDS     ;And copy back the tmpCDS into the CDS itself
   425 000022C3 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   426 000022CA B95F000000          <1>     mov ecx, cds_size
   427 000022CF F3A4                <1>     rep movsb
   428                              <1> .exitGood:
   429 000022D1 E8E3550000          <1>     call dosCrit1Exit
   430 000022D6 31C0                <1>     xor eax, eax
   431 000022D8 E90F560000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   432                              <1> .net:
   433                              <1> ;SDA Vars are setup for this request
   434 000022DD B805110000          <1>     mov eax, 1105h
   435 000022E2 CD2F                <1>     int 2fh
   436 000022E4 0F8210560000        <1>     jc extErrExit
   437 000022EA E9FD550000          <1>     jmp extGoodExit
   438                              <1> .getFatCluster:
   439 000022EF 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   440 000022F6 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   441 000022FD C1E010              <1>     shl eax, 10h
   442 00002300 09D0                <1>     or eax, edx ;Add low bits to eax
   443                              <1>     return
    13                              <2> %%_ret:
    14 00002302 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   444                              <1> 
   445                              <1> getCurrentDIR:     ;ah = 47h
   446                              <1> ;Returns the path for a drive with no X:\.
   447                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   448                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   449 00002303 88D0                <1>     mov al, dl  ;Move drive number into al
   450 00002305 E8A5550000          <1>     call dosCrit1Enter
   451 0000230A E832510000          <1>     call getCDSNotJoin ;Set drive variables if it is valid and NOT join
   452 0000230F 730F                <1>     jnc .okDrive    ;Cant get current dir of a join drive
   453                              <1> .badDrvExit:
   454 00002311 E8A3550000          <1>     call dosCrit1Exit
   455 00002316 B80F000000          <1>     mov eax, errBadDrv
   456 0000231B E9DA550000          <1>     jmp extErrExit
   457                              <1> .okDrive:
   458                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   459 00002320 56                  <1>     push rsi    ;Save the callers buffer on the stack.
   460 00002321 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the current Working CDS ptr in rsi
   461 00002328 56                  <1>     push rsi    ;Save desired workingCDS on pointer on the stack!
   462 00002329 C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   463 00002330 488D3D(1E050000)    <1>     lea rdi, buffer1
   464 00002337 E88BF1FFFF          <1>     call getDirPath   ;Canonicalise the filename and check if directory exists!
   465 0000233C 5E                  <1>     pop rsi ;Get back the original workingCDS
   466 0000233D 5F                  <1>     pop rdi ;Get the callers buffer into rdi
   467 0000233E 72D1                <1>     jc .badDrvExit
   468                              <1>     ;Now buffer1 has the truenamed form of the directory entry. 
   469                              <1>     ;We don't copy that, instead copying the path directly from the cds entry.
   470                              <1>     ;since we confirmed it exists! This avoids join issues :D 
   471 00002340 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   472 00002344 4801C6              <1>     add rsi, rax    ;Skip any prefixed chars (handle SUBST)
   473 00002347 803E5C              <1>     cmp byte [rsi],"\" ;Skip if pathsep (these pathseps are always proper)
   474 0000234A 7503                <1>     jne .dontSkipChar
   475 0000234C 48FFC6              <1>     inc rsi ;Skip leading pathseps on the path
   476                              <1> .dontSkipChar:
   477 0000234F AC                  <1>     lodsb   ;Get char
   478 00002350 84C0                <1>     test al, al
   479 00002352 7406                <1>     jz .notSpecialChar
   480 00002354 3C05                <1>     cmp al, 05h     ;Special char case?
   481 00002356 7502                <1>     jne .notSpecialChar
   482 00002358 B0E5                <1>     mov al, 0E5h    ;Replace with the correct "replacement" char
   483                              <1> .notSpecialChar:
   484 0000235A AA                  <1>     stosb
   485 0000235B 84C0                <1>     test al, al ;Did we store a terminator char?
   486 0000235D 75F0                <1>     jnz .dontSkipChar   ;If not, keep copying
   487 0000235F E855550000          <1>     call dosCrit1Exit
   488 00002364 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   489 00002369 E97E550000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   490                              <1> 
   491                              <1> trueNameMultiplex:  ;Int 2Fh, AX=1221h
   492 0000236E 50                  <1>     push rax
   493 0000236F B800600000          <1>     mov eax, 6000h
   494 00002374 CD21                <1>     int 21h
   495 00002376 58                  <1>     pop rax
   496                              <1>     return
    13                              <2> %%_ret:
    14 00002377 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   497                              <1>     
   498                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   499                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   500 00002378 E881520000          <1>     call checkPathspecOK    ;This preserves rsi
   501 0000237D 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   502 0000237F 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   503                              <1> .badPath:
   504 00002381 B805000000          <1>     mov eax, errAccDen
   505 00002386 E96F550000          <1>     jmp extErrExit
   506                              <1> .pathspecOk:
   507 0000238B 57                  <1>     push rdi    ;Save the destination
   508 0000238C 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   509 00002393 E8B3F1FFFF          <1>     call canonicaliseFileName
   510 00002398 5F                  <1>     pop rdi
   511 00002399 0F825B550000        <1>     jc extErrExit
   512 0000239F 488D35(1E050000)    <1>     lea rsi, buffer1
   513 000023A6 E8FE510000          <1>     call strcpy
   514 000023AB 31C0                <1>     xor eax, eax
   515 000023AD E93A550000          <1>     jmp extGoodExit
   516                              <1> 
   517                              <1> ;-----------------------------------
   518                              <1> ;    General Directory Routines    :
   519                              <1> ;-----------------------------------
   520                              <1> 
   521                              <1> 
   522                              <1> findFreeDiskDirEntry:
   523                              <1> ;Find a space in the directory we are searching for a directory entry
   524                              <1> ;Accept first entry starting with a 0E5h or 00h
   525                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   526                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   527                              <1> ; be called for CDS's that are NOT net CDS's).
   528                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   529                              <1> ;       Directory vars must be set up for the directory we are searching in
   530                              <1> ;Output: CF=CY => Error, eax has error code
   531                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   532 000023B2 8A05(08070000)      <1>     mov al, byte [delChar]
   533 000023B8 8805(D9060000)      <1>     mov byte [fcbName], al
   534 000023BE E8D6EDFFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   535                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000023C3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000023C5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   536                              <1> ;Free entry found, dir variables are set for the free entry. 
   537                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   538                              <1> getDiskDirectoryEntry:
   539                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   540                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   541                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   542                              <1> ;        qword [tempSect] = Disk sector number of directory
   543                              <1> ;        word [entry] = 32 byte offset into sector
   544                              <1> ;        CF=CY => Error, exit 
   545 000023C6 53                  <1>     push rbx
   546 000023C7 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  
   547                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   548                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   549 000023CD 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]
   550 000023D4 85C0                <1>     test eax, eax
   551 000023D6 7407                <1>     jz .skipCluster
   552 000023D8 E8B4E6FFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   553 000023DD EB1B                <1>     jmp short .skipOldFat
   554                              <1> .skipCluster:
   555 000023DF 55                  <1>     push rbp
   556 000023E0 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   557 000023E7 0FB705(83070000)    <1>     movzx eax, word [dirSect]
   558 000023EE 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   559                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   560 000023F1 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   561 000023F5 5D                  <1>     pop rbp
   562 000023F6 7202                <1>     jb .skipOldFat
   563 000023F8 F9                  <1>     stc
   564                              <1>     return
    13                              <2> %%_ret:
    14 000023F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   565                              <1> .skipOldFat:
   566 000023FA 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   567 000023FD 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save this sector number
   568 00002404 E803E6FFFF          <1>     call getBufForDir   ;Get buffer for dir in rbx
   569 00002409 5B                  <1>     pop rbx
   570                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000240A 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000240C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   571 0000240D 53                  <1>     push rbx
   572 0000240E 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
   573 00002415 E8ABEEFFFF          <1>     call prepSectorSearch
   574                              <1>     ;Above function gets data buffer ptr in rsi
   575 0000241A 31D2                <1>     xor edx, edx
   576 0000241C 8B05(85070000)      <1>     mov eax, dword [dirEntry]   ;Get offset into dir file cluster
   577 00002422 C1E005              <1>     shl eax, 5  ;Multiply by 32 to get byte offset
   578                              <1>     ;Make the amount we add to rsi modulo size of bytes per sector
   579 00002425 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   580 00002429 F7F3                <1>     div ebx ;Divide eax by ebx. Get remainer in dx
   581 0000242B 4801D6              <1>     add rsi, rdx    ;rsi now points to the entry
   582 0000242E 668915(4E070000)    <1>     mov word [entry], dx
   583 00002435 5B                  <1>     pop rbx
   584                              <1>     return
    13                              <2> %%_ret:
    14 00002436 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> updateSFTDateTimeFields:    
   587                              <1> ;Updates the SFT time/date entries for disk files
   588                              <1> ;Called with:
   589                              <1> ;   [workingDPB] = DPB pointer for the disk device
   590                              <1> ;   [currentSFT] = Current SFT pointer
   591                              <1> ;   bx = attribute byte from the SFT
   592 00002437 66F7C3C000          <1>     test bx, devDiskNoFlush | devCharDev
   593                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000243C 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000243E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   594 0000243F 66F7C30040          <1>     test bx, devDiskNoDTonClose
   595                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002444 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002446 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   596 00002447 50                  <1>     push rax
   597 00002448 53                  <1>     push rbx
   598 00002449 E87F0B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   599                              <1>     ;Build date and time words
   600 0000244E E8650C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   601                              <1>     ;Update SFT fields
   602 00002453 66894713            <1>     mov word [rdi + sft.wTime], ax
   603 00002457 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   604 0000245A 66894715            <1>     mov word [rdi + sft.wDate], ax
   605 0000245E 31C0                <1>     xor eax, eax
   606 00002460 FF15(2F010000)      <1>     call qword [updateDirShare]
   607 00002466 5B                  <1>     pop rbx
   608 00002467 58                  <1>     pop rax
   609                              <1>     return
    13                              <2> %%_ret:
    14 00002468 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   610                              <1> 
   611                              <1> getAndUpdateDirSectorForFile:
   612                              <1> ;Must be called with currentSFT pointing to the file we operate on!
   613                              <1> ;Input: rdi -> SFT
   614                              <1> ;Output: CF=NC: rsi -> Updated dir entry in buffer
   615                              <1> ;               rdi -> SFT
   616 00002469 E83F2E0000          <1>     call setDPBfromSFT
   617                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000246E 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002470 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   618 00002471 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   619 00002475 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   620 0000247C C605(68040000)18    <1>     mov byte [Int24bitfld], critFailOK | critRetryOK
   621 00002483 E884E5FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx for sector in rax
   622                              <1>     retc    ;If an error is to be returned from, we skip the rest of this
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002488 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000248A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   623 0000248B E8E52B0000          <1>     call getCurrentSFT ;Reobtain the SFT ptr in rdi
   624 00002490 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   625 00002494 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   626 00002498 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   627 0000249B 4801DE              <1>     add rsi, rbx    ;Move rsi to point to the directory entry
   628                              <1>     return
    13                              <2> %%_ret:
    14 0000249E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   629                              <1> 
   630                              <1> growDirectory:
   631                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   632                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   633                              <1> ;                 eax = New Cluster number
   634                              <1> ;               TWO NON CF ERROR CASES.
   635                              <1> ;               If eax = -1 => disk full!
   636                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   637                              <1> ;        CF=CY => Something went wrong. Rip. 
   638 0000249F 53                  <1>     push rbx
   639 000024A0 51                  <1>     push rcx
   640 000024A1 57                  <1>     push rdi
   641 000024A2 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   642 000024A8 85C0                <1>     test eax, eax
   643 000024AA 742B                <1>     jz .exit
   644 000024AC E80DE6FFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   645 000024B1 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   646 000024B3 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   647 000024B8 E880E6FFFF          <1>     call allocateClusters   ;ebx has last cluster value
   648 000024BD 7218                <1>     jc .exit
   649 000024BF 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   650 000024C4 7411                <1>     je .exit
   651 000024C6 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   652 000024C8 E856E8FFFF          <1>     call readFAT
   653 000024CD 7208                <1>     jc .exit
   654 000024CF E807000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   655 000024D4 7201                <1>     jc .exit
   656 000024D6 F8                  <1>     clc
   657                              <1> .exit:
   658 000024D7 5F                  <1>     pop rdi
   659 000024D8 59                  <1>     pop rcx
   660 000024D9 5B                  <1>     pop rbx
   661                              <1>     return   
    13                              <2> %%_ret:
    14 000024DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   662                              <1> sanitiseCluster:
   663                              <1> ;Sanitises the cluster in eax to all zeros
   664                              <1> ;Does not move file pointers
   665                              <1> ;Currently, is only called to sanitise subdirectory clusters
   666                              <1> ;Input: eax = Cluster number
   667                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   668                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   669                              <1> ;        If CF=CY => Error, exit
   670 000024DB 50                  <1>     push rax
   671 000024DC 53                  <1>     push rbx
   672 000024DD 51                  <1>     push rcx
   673 000024DE 52                  <1>     push rdx
   674 000024DF 56                  <1>     push rsi
   675 000024E0 55                  <1>     push rbp
   676 000024E1 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   677 000024E8 E8A4E5FFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   678 000024ED 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   679 000024F1 FFC2                <1>     inc edx ;Make it a count of sectors
   680                              <1> .getSectorInCluster:
   681 000024F3 E814E5FFFF          <1>     call getBufForDir  ;Get a generic data buffer in rbx
   682 000024F8 721E                <1>     jc .exitBad
   683 000024FA 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   684 000024FE 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   685 00002502 31C0                <1>     xor eax, eax
   686 00002504 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   687 00002506 E89CE3FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   688                              <1> 
   689 0000250B FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   690 0000250D 740A                <1>     jz .exit    ;Jump if we done
   691 0000250F 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   692 00002513 48FFC0              <1>     inc rax ;Goto next sector in cluster
   693 00002516 EBDB                <1>     jmp short .getSectorInCluster
   694                              <1> .exitBad:
   695 00002518 F9                  <1>     stc
   696                              <1> .exit:
   697 00002519 5D                  <1>     pop rbp
   698 0000251A 5E                  <1>     pop rsi
   699 0000251B 5A                  <1>     pop rdx
   700 0000251C 59                  <1>     pop rcx
   701 0000251D 5B                  <1>     pop rbx
   702 0000251E 58                  <1>     pop rax
   703                              <1>     return
    13                              <2> %%_ret:
    14 0000251F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                                  %include "./src/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqPkt and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 00002520 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 00002521 488D1D(1C050000)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 00002528 48891D(A5040000)    <1>     mov qword [secdReqPkt + ioReqPkt.bufptr], rbx
    59 0000252F 5B                  <1>     pop rbx
    60 00002530 C705(AD040000)0100- <1>     mov dword [secdReqPkt + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 00002538 0000                <1>
    61 0000253A 668905(1C050000)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 00002541 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedir
    63 00002547 0F85A1000000        <1>     jnz .notChar
    64 0000254D 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 00002553 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 00002559 E83A530000          <1>     call dosPushRegs    ;Save context here
    68 0000255E 488D1DB5DAFFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 00002565 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 00002568 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 0000256B 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 0000256E 890D(97040000)      <1>     mov dword [secdReqPkt], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 00002574 31C9                <1>     xor ecx, ecx
    75 00002576 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 00002579 7506                <1>     jne .skipBsySet
    77 0000257B 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 00002581 66870D(9A040000)    <1>     xchg cx, word [secdReqPkt + drvReqPkt.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 00002588 488D1D(97040000)    <1>     lea rbx, secdReqPkt
    82 0000258F E8DA490000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 00002594 668B3D(9A040000)    <1>     mov di, word [secdReqPkt + drvReqPkt.status]    ;Get status
    84 0000259B F7C700800000        <1>     test edi, drvErrStatus
    85 000025A1 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 000025A3 803D(99040000)05    <1>     cmp byte [secdReqPkt + drvReqPkt.cmdcde], drvNONDESTREAD
    88 000025AA 750C                <1>     jne .notNDRead
    89 000025AC 8A05(A4040000)      <1>     mov al, byte [secdReqPkt + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 000025B2 8805(1C050000)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 000025B8 8A25(9B040000)      <1>     mov ah, byte [secdReqPkt + drvReqPkt.status + 1]  ;Get hibyte of status word
    93 000025BE F6D4                <1>     not ah
    94 000025C0 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 000025C3 E8B9520000          <1>     call dosPopRegs ;Get back the context
    96 000025C8 668B05(1C050000)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 000025CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 000025D0 88CC                <1>     mov ah, cl
   101 000025D2 E864430000          <1>     call charDevErr
   102 000025D7 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 000025D9 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 000025DB E8A1520000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 000025E0 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 000025E5 8025(9B040000)FD    <1>     and byte [secdReqPkt + drvReqPkt.status + 1], ~(drvBsyStatus >> 8)
   110 000025EC EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 000025EE 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 000025F0 7409                <1>     jz .makeDiskNetReadReq
   115 000025F2 FECC                <1>     dec ah
   116 000025F4 7422                <1>     jz .makeDiskNetNonDestReq
   117 000025F6 FECC                <1>     dec ah
   118 000025F8 742A                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 000025FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 000025FB E834000000          <1>     call .prepDiskNetIO
   123 00002600 E8DD220000          <1>     call readBytes
   124 00002605 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 00002607 E858000000          <1>     call .cleanDiskNetIO
   126 0000260C 8A05(1C050000)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002612 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002614 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   128 00002615 B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 00002617 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 00002618 FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 0000261B E8DBFFFFFF          <1>     call .makeDiskNetReadReq
   134 00002620 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 00002623 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 00002624 E80B000000          <1>     call .prepDiskNetIO
   138 00002629 E80E260000          <1>     call writeBytes
   139 0000262E E831000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002633 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 00002634 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   145 0000263A E859520000          <1>     call dosPushRegs
   146 0000263F FF35(17040000)      <1>     push qword [currentDTA]
   147 00002645 488D0D(1C050000)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 0000264C 48890D(17040000)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 00002653 488935(32070000)    <1>     mov qword [currentSFT], rsi ;Set this sft ptr as the current SFT
   150 0000265A 31C9                <1>     xor ecx, ecx
   151 0000265C FFC1                <1>     inc ecx ;IO 1 byte only
   152                              <1> .cleanDNIOReturn:
   153 0000265E FF25(EB040000)      <1>     jmp qword [altRet]
   154                              <1> .cleanDiskNetIO:
   155 00002664 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   156 0000266A 8F05(17040000)      <1>     pop qword [currentDTA]
   157 00002670 E80C520000          <1>     call dosPopRegs
   158 00002675 EBE7                <1>     jmp short .cleanDNIOReturn
   159                              <1> 
   160                              <1> openSFT:
   161                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   162                              <1> ;Input: rdi = SFT pointer
   163 00002677 E81C520000          <1>     call dosPushRegs
   164 0000267C B00D                <1>     mov al, drvOPEN
   165 0000267E EB07                <1>     jmp short openCloseCommon
   166                              <1> closeSFT:
   167                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   168 00002680 E813520000          <1>     call dosPushRegs
   169 00002685 B00E                <1>     mov al, drvCLOSE
   170                              <1> openCloseCommon:
   171                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   172 00002687 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir  ;We a network device?
   173 0000268D 7569                <1>     jnz .exit    ;Exit if so
   174 0000268F F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   175 00002693 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   176 00002697 7512                <1>     jnz .charDev
   177                              <1>     ;Here a disk drive, rdi is a DPB ptr
   178 00002699 F605(D4030000)FF    <1>     test byte [shareFlag], -1    ;Is SHARE loaded?
   179 000026A0 7456                <1>     jz .exit   ;Exit if share flag is zero (Share not loaded)
   180 000026A2 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   181 000026A5 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   182 000026A7 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   183                              <1> .charDev:
   184 000026AB 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   185 000026B1 7445                <1>     jz .exit    ;No, exit!
   186 000026B3 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   187 000026B6 488D1D(C1040000)    <1>     lea rbx, primReqPkt ;Get the primary request header space in rbx
   188 000026BD 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   189                              <1> .retryEP:
   190 000026C0 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   191 000026C3 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   192 000026C6 50                  <1>     push rax    ;Save the dword
   193 000026C7 E8A6480000          <1>     call goDriver
   194 000026CC 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + drvReqPkt.status] ;Get the status
   195 000026D3 F7C700800000        <1>     test edi, drvErrStatus
   196 000026D9 741C                <1>     jz .exitPop
   197                              <1>     ;Error here, check if char or block drive
   198 000026DB 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   199 000026E1 7404                <1>     jz .blockError
   200                              <1>     ;Char error here
   201 000026E3 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   202 000026E5 EB04                <1>     jmp short .errorCmn
   203                              <1> .blockError:
   204 000026E7 88C8                <1>     mov al, cl  ;Move drive number into al
   205 000026E9 B406                <1>     mov ah, critData    ;Data on block dev error
   206                              <1> .errorCmn:
   207                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   208 000026EB E84B420000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   209 000026F0 B001                <1>     mov al, critRetry   ;al returns user response
   210 000026F2 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   211 000026F4 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   212 000026F5 EBC9                <1>     jmp short .retryEP  ;Reset
   213                              <1> .exitPop:
   214 000026F7 58                  <1>     pop rax    
   215                              <1> .exit:
   216 000026F8 E884510000          <1>     call dosPopRegs
   217                              <1>     return
    13                              <2> %%_ret:
    14 000026FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                                  %include "./src/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 000026FE E882010000          <1>     call charIn_B
    17 00002703 50                  <1>     push rax
    18 00002704 E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 00002709 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 0000270A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 0000270B 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 2Fh, AX=1205h
    26 0000270D 3C20                <1>     cmp al, asciiCaret
    27 0000270F 0F8287000000        <1>     jb .control
    28 00002715 3C7F                <1>     cmp al, DEL ;DEL char?
    29 00002717 7406                <1>     je .skipCurs
    30 00002719 FE05(CC020000)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 0000271F FE05(D2030000)      <1>     inc byte [vConErr]   ;Increment 2 char error checker
    33 00002725 8025(D2030000)03    <1>     and byte [vConErr], 3
    34 0000272C 56                  <1>     push rsi
    35 0000272D 7507                <1>     jnz .skipErrorCheck
    36 0000272F 50                  <1>     push rax
    37 00002730 E89F020000          <1>     call vConCtrlCheck
    38 00002735 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 00002736 E826020000          <1>     call outputOnStdout
    41 0000273B 5E                  <1>     pop rsi
    42 0000273C F605(CF030000)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002743 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002745 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    44 00002746 53                  <1>     push rbx
    45 00002747 56                  <1>     push rsi
    46 00002748 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 0000274D E84D030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 00002752 0F82D0000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 00002758 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 0000275C F7C300800000        <1>     test ebx, devRedir
    52 00002762 0F85C0000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 00002768 F7C380000000        <1>     test ebx, devCharDev
    54 0000276E 0F84B4000000        <1>     jz auxOutCmn.exit
    55 00002774 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 00002779 E821030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 0000277E 0F82A4000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 00002784 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], devCharNetSpool  ;Network printer?
    59 0000278A 0F8493000000        <1>     jz auxOutCmn.diskFileEP
    60 00002790 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 00002797 E98C000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 0000279C 3C0D                <1>     cmp al, CR
    64 0000279E 742A                <1>     je .newline
    65 000027A0 3C08                <1>     cmp al, BSP
    66 000027A2 7432                <1>     je .back
    67 000027A4 3C09                <1>     cmp al, TAB
    68 000027A6 0F8573FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70 000027AC 8A05(CC020000)      <1>     mov al, byte [vConCursPos]
    71 000027B2 0CF8                <1>     or al, ~7
    72 000027B4 F6D8                <1>     neg al
    73                              <1> .outputATab:   ;Called with al = Number of chars into the tabstop we are!
    74 000027B6 51                  <1>     push rcx
    75 000027B7 0FB6C8              <1>     movzx ecx, al
    76 000027BA 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    77                              <1> .tabloop:
    78 000027BD B020                <1>     mov al, SPC
    79 000027BF E849FFFFFF          <1>     call charOut_B.in   ;Output the char
    80 000027C4 FEC9                <1>     dec cl
    81 000027C6 75F5                <1>     jnz .tabloop
    82                              <1> .stopTab:
    83 000027C8 59                  <1>     pop rcx
    84                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 000027C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> .newline:
    86 000027CA C605(CC020000)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    87 000027D1 E949FFFFFF          <1>     jmp .skipCurs   ;And echo 
    88                              <1> .back:
    89 000027D6 FE0D(CC020000)      <1>     dec byte [vConCursPos]
    90 000027DC E93EFFFFFF          <1>     jmp .skipCurs   ;And echo
    91                              <1> 
    92                              <1> auxIn_B:        ;ah = 03h
    93 000027E1 E8EE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    94 000027E6 BB03000000          <1>     mov ebx, 3
    95 000027EB E8AF020000          <1>     call getCharDevSFT
    96                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000027F0 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000027F2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    97                              <1> .auxloop:
    98 000027F3 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    99 000027F5 E826FDFFFF          <1>     call mainCharIO
   100 000027FA 7408                <1>     jz .signalLoop
   101 000027FC 30E4                <1>     xor ah, ah  ;Read the char in
   102 000027FE E81DFDFFFF          <1>     call mainCharIO
   103                              <1>     return
    13                              <2> %%_ret:
    14 00002803 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> .signalLoop:
   105 00002804 E8A8010000          <1>     call callInt28h
   106 00002809 EBE8                <1>     jmp short .auxloop
   107                              <1> 
   108                              <1> auxOut_B:       ;ah = 04h
   109 0000280B 53                  <1>     push rbx
   110 0000280C BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   111 00002811 EB06                <1>     jmp short auxOutCmn
   112                              <1> prnOut_B:       ;ah = 05h
   113 00002813 53                  <1>     push rbx
   114 00002814 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   115                              <1> auxOutCmn: ;Auxilliary output device common 
   116 00002819 88D0                <1>     mov al, dl  ;Get the char into al
   117 0000281B 50                  <1>     push rax
   118 0000281C E8B3010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   119 00002821 58                  <1>     pop rax
   120 00002822 56                  <1>     push rsi
   121                              <1> .diskFileEP:
   122 00002823 E866010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   123                              <1> .netFileEP:
   124                              <1> .exit:
   125 00002828 5E                  <1>     pop rsi
   126 00002829 5B                  <1>     pop rbx
   127                              <1>     return
    13                              <2> %%_ret:
    14 0000282A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> directConIO:    ;ah = 06h
   130 0000282B 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   131 0000282D 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   132 0000282F 0F852C010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   133                              <1> ;Here is the read char direct function
   134 00002835 31DB                <1>     xor ebx, ebx    
   135 00002837 E863020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   136                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000283C 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000283E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   137 0000283F 488B2D(7B040000)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   138 00002846 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   139 00002848 E8D3FCFFFF          <1>     call mainCharIO
   140 0000284D E85F010000          <1>     call callInt28h ;This preserves flags so call here!
   141 00002852 7507                <1>     jnz .readChar
   142 00002854 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   143 00002858 30C0                <1>     xor al, al  ;Set caller return code to 0
   144                              <1>     return
    13                              <2> %%_ret:
    14 0000285A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   145                              <1> .readChar:
   146 0000285B 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   147                              <1>     ;Fallthrough here to get the char at STDIN
   148                              <1> charIn:         ;ah = 07h
   149                              <1> ;Return char in al from STDIN without waiting
   150 0000285F 31DB                <1>     xor ebx, ebx
   151 00002861 E839020000          <1>     call getCharDevSFT
   152                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002866 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002868 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   153 00002869 B401                <1>     mov ah, 01  ;ND read for char
   154 0000286B E8B0FCFFFF          <1>     call mainCharIO
   155 00002870 750B                <1>     jnz .getChar
   156 00002872 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   157 00002874 CD2A                <1>     int 2Ah
   158 00002876 E836010000          <1>     call callInt28h
   159 0000287B EBE2                <1>     jmp short charIn    ;Loop again awaiting the char
   160                              <1> .getChar:
   161                              <1>     ;Get the char in al and exit
   162 0000287D 30E4                <1>     xor ah, ah
   163 0000287F E89CFCFFFF          <1>     call mainCharIO
   164                              <1>     return
    13                              <2> %%_ret:
    14 00002884 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> charIn_B:       ;ah = 08h
   166                              <1> ;Return char in al from STDIN
   167 00002885 56                  <1>     push rsi
   168                              <1> .readAgain:
   169 00002886 E849010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   170                              <1>     ;Also sets rsi to point to the device SFT for 
   171 0000288B 7543                <1>     jnz .pullChar
   172 0000288D 803D(E0190000)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   173 00002894 7507                <1>     jne .skiplookahead
   174 00002896 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   175 00002898 E883FCFFFF          <1>     call mainCharIO
   176                              <1> .skiplookahead:
   177 0000289D B484                <1>     mov ah, 84h
   178 0000289F CD2A                <1>     int 2ah ;Multitasking keyboard loop
   179 000028A1 66813D(151A0000)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   179 000028A9 FF                  <1>
   180 000028AA 751B                <1>     jne .skipClockRead
   181 000028AC E8E74F0000          <1>     call dosPushRegs
   182 000028B1 F8                  <1>     clc ;Clear CF, write primary header to backup
   183 000028B2 E884000000          <1>     call swapPrimaryHeader
   184 000028B7 E811070000          <1>     call readDateTimeRecord
   185 000028BC F9                  <1>     stc ;Set CF, write backup to primary header
   186 000028BD E879000000          <1>     call swapPrimaryHeader
   187 000028C2 E8BA4F0000          <1>     call dosPopRegs
   188                              <1> .skipClockRead:
   189 000028C7 66FF05(151A0000)    <1>     inc word [keybTicks]
   190 000028CE EBB6                <1>     jmp short .readAgain
   191                              <1> .pullChar:
   192 000028D0 30E4                <1>     xor ah, ah
   193 000028D2 E849FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   194 000028D7 5E                  <1>     pop rsi
   195 000028D8 3C00                <1>     cmp al, NUL ;Is this the null char?
   196 000028DA 7507                <1>     jne .exit
   197                              <1>     ;We are mid extended ascii, prevent printer toggling
   198 000028DC C605(141A0000)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   199                              <1> .exit:
   200                              <1>     return
    13                              <2> %%_ret:
    14 000028E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> 
   202                              <1> printString_B:      ;ah = 09h
   203 000028E4 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   204                              <1> .ps0:
   205 000028E7 AC                  <1>     lodsb   ;Get char in al and inc rsi
   206 000028E8 3C24                <1>     cmp al, "$" ;End of string char?
   207                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000028EA 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000028EC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   208 000028ED E81BFEFFFF          <1>     call charOut_B.in
   209 000028F2 EBF3                <1>     jmp short .ps0
   210                              <1> 
   211                              <1> checkStdinStatus:  ;ah = 0Bh
   212                              <1> ;Returns the status of the driver controlling vCon
   213 000028F4 E8DB000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   214 000028F9 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   215                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000028FB 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000028FD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   216 000028FE FEC8                <1>     dec al  ;Set al to -1 if char available
   217                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 00002900 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> clearbuffDoFunc:   ;ah = 0Ch
   219                              <1> ;Clears any buffers and issues a console read command (the command in al)
   220                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   221 00002901 50                  <1>     push rax
   222 00002902 52                  <1>     push rdx
   223 00002903 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   224 00002905 E895010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   225 0000290A 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   226 0000290C B404                <1>     mov ah, 04h ;Flush input buffers
   227 0000290E E80DFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   228                              <1> .skipFlush:
   229 00002913 5A                  <1>     pop rdx
   230 00002914 58                  <1>     pop rax
   231 00002915 88C4                <1>     mov ah, al  ;Move function number into ah
   232 00002917 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   233 00002919 7507                <1>     jne .others
   234 0000291B 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   235 0000291E 7412                <1>     jz .bad ;Yes, exit
   236 00002920 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   237                              <1> .others:
   238 00002922 3C01                <1>     cmp al, 01h
   239 00002924 740F                <1>     je .callFunction
   240 00002926 3C07                <1>     cmp al, 07h
   241 00002928 740B                <1>     je .callFunction
   242 0000292A 3C08                <1>     cmp al, 08h
   243 0000292C 7407                <1>     je .callFunction
   244 0000292E 3C0A                <1>     cmp al, 0Ah
   245 00002930 7403                <1>     je .callFunction
   246                              <1> .bad:
   247 00002932 30C0                <1>     xor al, al
   248                              <1>     return
    13                              <2> %%_ret:
    14 00002934 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   249                              <1> .callFunction:
   250 00002935 FA                  <1>     cli ;Prepare to swap stack pointer
   251                              <1>     ;The below address avoids "properly" reentering DOS
   252                              <1>     ;We simply reuse the function dispatch aspect. 
   253                              <1>     ;this means we dont trash the caller's register frame 
   254 00002936 E9604E0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   255                              <1> ;------------------------
   256                              <1> ;  Primitive functions  :
   257                              <1> ;------------------------
   258                              <1> swapPrimaryHeader:
   259                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   260                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   261 0000293B 56                  <1>     push rsi
   262 0000293C 57                  <1>     push rdi
   263 0000293D 51                  <1>     push rcx
   264 0000293E 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   264 00002947 00                  <1>
   265 00002948 488D35(C1040000)    <1>     lea rsi, primReqPkt
   266 0000294F 488D3D(EA190000)    <1>     lea rdi, bkupReqHdr
   267 00002956 7303                <1>     jnc .read
   268 00002958 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   269                              <1> .read:
   270 0000295B F3A4                <1>     rep movsb   ;Swap
   271 0000295D 59                  <1>     pop rcx
   272 0000295E 5F                  <1>     pop rdi
   273 0000295F 5E                  <1>     pop rsi
   274                              <1>     return
    13                              <2> %%_ret:
    14 00002960 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> outputOnStdout:
   276                              <1> ;Input: al = Char to output
   277                              <1> ;Output: CF=CY, all good
   278 00002961 53                  <1>     push rbx
   279 00002962 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   280 00002967 E833010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   281 0000296C 7217                <1>     jc .exit
   282 0000296E 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   283 00002974 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   284 00002976 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   285 0000297A 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 29?
   286 00002980 7405                <1>     jz .notCharDevOrFast
   287 00002982 CD29                <1>     int 29h ;Fast output
   288                              <1> .exitOk:
   289 00002984 F8                  <1>     clc
   290                              <1> .exit:
   291 00002985 5B                  <1>     pop rbx
   292                              <1>     return
    13                              <2> %%_ret:
    14 00002986 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   293                              <1> .notCharDevOrFast:
   294 00002987 E80A000000          <1>     call outputOnSFT
   295 0000298C 5B                  <1>     pop rbx
   296                              <1>     return
    13                              <2> %%_ret:
    14 0000298D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> outputToHandle:
   299                              <1> ;Char to output must be in al
   300 0000298E E80C010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   301                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002993 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002995 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   302                              <1> outputOnSFT:
   303                              <1> ;Output char in al to SFT in rsi
   304                              <1> ;Waits until device is not busy to send char.
   305                              <1> ;Calls int 28h if device busy
   306 00002996 50                  <1>     push rax
   307 00002997 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   308 00002999 E882FBFFFF          <1>     call mainCharIO
   309 0000299E 58                  <1>     pop rax
   310 0000299F 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   311 000029A1 B402                <1>     mov ah, 02h ;Output char in al
   312 000029A3 E878FBFFFF          <1>     call mainCharIO
   313 000029A8 F8                  <1>     clc
   314                              <1>     return
    13                              <2> %%_ret:
    14 000029A9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> .signalLoop:
   316 000029AA E802000000          <1>     call callInt28h
   317 000029AF EBE5                <1>     jmp short outputOnSFT
   318                              <1> 
   319                              <1> callInt28h:
   320                              <1> ;Preserve full state, including "safetocallint28" flag and flags
   321 000029B1 9C                  <1>     pushfq
   322 000029B2 F605(95040000)FF    <1>     test byte [int28Flag], -1
   323 000029B9 7417                <1>     jz .exit    ;If zero, not safe
   324 000029BB F605(07040000)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   325 000029C2 750E                <1>     jnz .exit
   326                              <1> ;Preserve stack alignment!!! Push Qword including and after int28Flag 
   327 000029C4 FF35(95040000)      <1>     push qword [int28Flag] 
   328 000029CA CD28                <1>     int 28h
   329 000029CC 8F05(95040000)      <1>     pop qword [int28Flag]    ;Return original value
   330                              <1> .exit:
   331 000029D2 9D                  <1>     popfq
   332                              <1>     return
    13                              <2> %%_ret:
    14 000029D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> 
   334                              <1> 
   335                              <1> vConCtrlCheck:
   336                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   337                              <1> ; the processing. 
   338                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   339                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   340                              <1> ;
   341                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   342                              <1> ;^S will pause screen processing until another key is processed by vCon input
   343                              <1> ;^P will toggle the printer echo feature of the vConsole
   344                              <1> ;
   345                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   346                              <1> ; in ASCII mode when called using 21h/3Fh (Handle Read)
   347                              <1> ;
   348                              <1> ;Output: 
   349                              <1> ;   CF=CY : Error
   350                              <1> ;   CF=NC : ...
   351                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   352                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   353 000029D4 E829010000          <1>     call checkBreak ;Check if there is a ^C on CON
   354 000029D9 53                  <1>     push rbx
   355 000029DA 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   356 000029DC E8BE000000          <1>     call getCharDevSFT
   357 000029E1 5B                  <1>     pop rbx
   358                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000029E2 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000029E4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   359 000029E5 B401                <1>     mov ah, 01  ;Non destructively read CON
   360 000029E7 E834FBFFFF          <1>     call mainCharIO
   361 000029EC 74C3                <1>     jz callInt28h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 28h
   362                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   363 000029EE 3C13                <1>     cmp al, DC3 ;^S ?
   364 000029F0 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   365 000029F2 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   366 000029F4 E827FBFFFF          <1>     call mainCharIO
   367 000029F9 E963000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   368                              <1> .checkPrintOrExit:
   369 000029FE 3C10                <1>     cmp al, DLE ;Do we have ^P?
   370 00002A00 7468                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   371 00002A02 3C03                <1>     cmp al, ETX ;Do we have ^C?
   372 00002A04 7464                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   373                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   374                              <1>     return 
    13                              <2> %%_ret:
    14 00002A06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   375                              <1> .printToggle:
   376 00002A07 F615(CF030000)      <1>     not byte [printEcho]    ;Compliment the flag.
   377 00002A0D 53                  <1>     push rbx
   378 00002A0E BB04000000          <1>     mov ebx, 4  ;PRN handle
   379 00002A13 E887000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   380 00002A18 5B                  <1>     pop rbx
   381                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002A19 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002A1B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   382 00002A1C 57                  <1>     push rdi
   383 00002A1D 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   384 00002A20 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], devCharNetSpool  ;Check if net spooler
   385 00002A26 741D                <1>     jz .notNet
   386 00002A28 50                  <1>     push rax
   387 00002A29 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   388 00002A2E CD2F                <1>     int 2Fh
   389 00002A30 58                  <1>     pop rax
   390 00002A31 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   391                              <1>     ;If something went wrong, turn off echo
   392 00002A33 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   393 00002A3A 50                  <1>     push rax
   394 00002A3B B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   395 00002A40 CD2F                <1>     int 2Fh
   396 00002A42 58                  <1>     pop rax
   397 00002A43 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   398                              <1> .notNet:
   399                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   400                              <1> ; 0Dh or 0Eh
   401 00002A45 803D(CF030000)00    <1>     cmp byte [printEcho], 00
   402 00002A4C 7507                <1>     jnz .echoOn
   403 00002A4E E82DFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   404 00002A53 EB05                <1>     jmp short .printExit
   405                              <1> .echoOn:
   406 00002A55 E81DFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   407                              <1> .printExit:
   408 00002A5A 5F                  <1>     pop rdi
   409                              <1>     return
    13                              <2> %%_ret:
    14 00002A5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   410                              <1> .sigNextChar:   ;Signal Int 28h before waiting for the next char
   411 00002A5C E850FFFFFF          <1>     call callInt28h
   412                              <1> .waitNextChar:   ;Here get next char
   413 00002A61 B401                <1>     mov ah, 01h ;ND read
   414 00002A63 E8B8FAFFFF          <1>     call mainCharIO
   415 00002A68 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 28h and keep waiting
   416                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   417 00002A6A 53                  <1>     push rbx
   418 00002A6B 31DB                <1>     xor ebx, ebx
   419 00002A6D E82D000000          <1>     call getCharDevSFT
   420 00002A72 5B                  <1>     pop rbx
   421                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002A73 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002A75 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   422 00002A76 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   423 00002A78 E8A3FAFFFF          <1>     call mainCharIO
   424 00002A7D 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   425 00002A7F 7514                <1>     jnz .checkBreak2
   426 00002A81 803D(141A0000)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   427 00002A88 0F8479FFFFFF        <1>     jz .printToggle ;If 0, toggle!
   428 00002A8E C605(141A0000)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   429                              <1> .checkBreak2:
   430 00002A95 3C03                <1>     cmp al, ETX
   431                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002A97 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002A99 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   432 00002A9A E95C400000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   433                              <1> 
   434                              <1> 
   435                              <1> getCharDevSFT:
   436                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   437                              <1> ;Input: bx = zero extended handle number
   438                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   439                              <1> ;        CF=CY => al = Error code, abort operation
   440 00002A9F F605(94040000)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   441 00002AA6 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   442                              <1> .getSFT:
   443 00002AA8 57                  <1>     push rdi
   444 00002AA9 E883270000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   445 00002AAE 4889FE              <1>     mov rsi, rdi
   446 00002AB1 5F                  <1>     pop rdi
   447                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 00002AB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> .swap:
   449                              <1> ;workingSFT is only set for CON calls
   450 00002AB3 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   451 00002AB9 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   452 00002ABB 488B35(22070000)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   453 00002AC2 F8                  <1>     clc
   454                              <1>     return
    13                              <2> %%_ret:
    14 00002AC3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   455                              <1> 
   456                              <1> ;------------------------
   457                              <1> ;   Utility functions   :
   458                              <1> ;------------------------
   459                              <1> printCaretASCII:
   460                              <1> ;Input: al = Char to print with a caret
   461                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   462                              <1> ;First check if the char should be careted, and then print normally if so
   463 00002AC4 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   464 00002AC6 0F8341FCFFFF        <1>     jae charOut_B.in
   465 00002ACC 3C09                <1>     cmp al, TAB
   466 00002ACE 0F8439FCFFFF        <1>     je charOut_B.in
   467 00002AD4 3C15                <1>     cmp al, NAK
   468 00002AD6 0F8431FCFFFF        <1>     je charOut_B.in
   469 00002ADC 3C14                <1>     cmp al, DC4
   470 00002ADE 0F8429FCFFFF        <1>     je charOut_B.in
   471 00002AE4 50                  <1>     push rax
   472 00002AE5 B05E                <1>     mov al, "^" ;Get caret in place
   473 00002AE7 E821FCFFFF          <1>     call charOut_B.in
   474 00002AEC 58                  <1>     pop rax
   475 00002AED 0440                <1>     add al, "@" ;Turn into an ASCII Char
   476 00002AEF E919FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   477                              <1> printCRLF:
   478 00002AF4 B00D                <1>     mov al, CR
   479 00002AF6 E812FCFFFF          <1>     call charOut_B.in
   480 00002AFB B00A                <1>     mov al, LF
   481 00002AFD E90BFCFFFF          <1>     jmp charOut_B.in
   482                              <1> 
   483                              <1> checkBreak:
   484                              <1> ;Reads bytes from CON if there are any bytes to read and 
   485                              <1> ; if it is a ^C or CTRL+BREAK, then exit via Int 23h
   486 00002B02 803D(08040000)01    <1>     cmp byte [inDOS], 1
   487                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002B09 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002B0B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   488                              <1> ;Returns in al the keystroke that is available IF one is available
   489                              <1> ; or al=0 if no keystroke available
   490 00002B0C 53                  <1>     push rbx
   491 00002B0D 56                  <1>     push rsi
   492 00002B0E 488B35(53000000)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   493                              <1>     ;Place command code and a zero status word at the same time
   494 00002B15 C705(ED040000)0500- <1>     mov dword [critReqPkt + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   494 00002B1D 0000                <1>
   495                              <1>     ;Place the packet size in the hdrlen field
   496 00002B1F C605(EB040000)0E    <1>     mov byte [critReqPkt + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   497 00002B26 488D1D(EB040000)    <1>     lea rbx, critReqPkt
   498 00002B2D E840440000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   499                              <1>     ;Check if the busy bit is set (No keystroke available)
   500 00002B32 66F705(EE040000)00- <1>     test word [critReqPkt + ndInNoWaitPkt.status], drvBsyStatus
   500 00002B3A 02                  <1>
   501 00002B3B 7405                <1>     jz .charFound
   502                              <1> .exit:
   503 00002B3D 30C0                <1>     xor al, al
   504 00002B3F 5E                  <1>     pop rsi
   505 00002B40 5B                  <1>     pop rbx
   506                              <1>     return
    13                              <2> %%_ret:
    14 00002B41 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> .charFound:
   508                              <1> ;Keystroke available, proceed
   509 00002B42 8A05(F8040000)      <1>     mov al, byte [critReqPkt + ndInNoWaitPkt.retbyt]    ;Get char
   510 00002B48 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   511 00002B4A 75F1                <1>     jne .exit   ;If not equal exit
   512                              <1> ;Now we pull the char out of the buffer
   513 00002B4C C705(ED040000)0400- <1>     mov dword [critReqPkt + ioReqPkt.cmdcde], drvREAD ;Read command
   513 00002B54 0000                <1>
   514 00002B56 C605(EB040000)2A    <1>     mov byte [critReqPkt + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   515                              <1>     ;Place pointers and number of chars
   516 00002B5D C705(01050000)0100- <1>     mov dword [critReqPkt + ioReqPkt.tfrlen], 1 ;One char to be read
   516 00002B65 0000                <1>
   517                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   518 00002B67 488D05(F8040000)    <1>     lea rax, qword [critReqPkt + ioReqPkt.medesc]
   519 00002B6E 488905(F9040000)    <1>     mov qword [critReqPkt + ioReqPkt.bufptr], rax
   520 00002B75 E8F8430000          <1>     call goDriver   ;RSI and RBX as before
   521 00002B7A E97C3F0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   522                              <1> 
   523                              <1> vConSwapDriver:
   524                              <1> ;Sets up the vCon to use the alternative SFT pointer
   525 00002B7F 57                  <1>     push rdi
   526 00002B80 C605(94040000)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   527 00002B87 E8E9240000          <1>     call getCurrentSFT ;Get current SFT pointer
   528 00002B8C 48893D(22070000)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   529 00002B93 5F                  <1>     pop rdi
   530                              <1>     return
    13                              <2> %%_ret:
    14 00002B94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> vConRetDriver:
   533                              <1> ;Returns the original driver (sets flag down)
   534 00002B95 C605(94040000)00    <1>     mov byte [vConDrvSwp], 0
   535                              <1>     return
    13                              <2> %%_ret:
    14 00002B9C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   536                              <1> 
   537                              <1> ;--------------------------------------------------
   538                              <1> ;      Main Keyboard Buffered Input Function      :
   539                              <1> ;--------------------------------------------------
   540                              <1> buffCharInput_BE:  ;ah = 0Ah
   541                              <1> ;Buffer pointer in rdx
   542                              <1> ; byte [rdx + 0], buffer length
   543                              <1> ; byte [rdx + 1], number of chars in buffer
   544                              <1> ; byte [rdx + 2], buffer start
   545                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   546                              <1> ;Register use
   547                              <1> ; dh = Char offset in internal buffer
   548                              <1> ; dl = Buffer length
   549                              <1> ; bh = Char offset in user buffer
   550                              <1> ; bl = Number of chars already in the buffer
   551                              <1> ; rdi = Internal buffer
   552                              <1> ; rsi = User buffer
   553 00002B9D 4889D6              <1>     mov rsi, rdx
   554 00002BA0 66AD                <1>     lodsw   ;Get buffer metadata in ax
   555 00002BA2 84C0                <1>     test al, al
   556                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002BA4 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002BA6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   557 00002BA7 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   558 00002BAA 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   559 00002BAC 7606                <1>     jbe .avoidcheck
   560 00002BAE 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   561 00002BB2 7402                <1>     je .functionKeyOk
   562                              <1> .avoidcheck:
   563 00002BB4 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   564                              <1> .functionKeyOk:
   565 00002BB6 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   566 00002BB9 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   567                              <1> .breakEP:
   568 00002BBB 8A05(CC020000)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   569 00002BC1 8805(CD020000)      <1>     mov byte [vConCurCnt], al
   570 00002BC7 56                  <1>     push rsi    ;Push user buffer address
   571 00002BC8 488D3D(CE020000)    <1>     lea rdi, vConBuffer
   572 00002BCF C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   573 00002BD6 30F6                <1>     xor dh, dh  ;Ensure these are 0 when coming back from break!
   574 00002BD8 30FF                <1>     xor bh, bh  ;They should be... earmark
   575 00002BDA E8A6FCFFFF          <1>     call charIn_B   ;Get a char in AL from 21/08h
   576 00002BDF 3C0A                <1>     cmp al, LF
   577 00002BE1 7505                <1>     jne .checkControlChars
   578                              <1> .mainLoop:
   579 00002BE3 E89DFCFFFF          <1>     call charIn_B
   580                              <1> .checkControlChars:
   581 00002BE8 3C06                <1>     cmp al, ACK
   582 00002BEA 74F7                <1>     je .mainLoop   ;Get another char
   583 00002BEC 3A0548D4FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   584 00002BF2 0F842E010000        <1>     je .escape
   585 00002BF8 3C7F                <1>     cmp al, DEL
   586 00002BFA 0F848F000000        <1>     je .delete
   587 00002C00 3C08                <1>     cmp al, BSP
   588 00002C02 0F8487000000        <1>     je .delete
   589 00002C08 3C17                <1>     cmp al, ETB
   590                              <1>     ;Add space for patched jump instructions
   591 00002C0A 9090909090          <1>     db 5 dup (90h)  ;NOP
   592 00002C0F 3C15                <1>     cmp al, NAK
   593 00002C11 9090909090          <1>     db 5 dup (90h)
   594 00002C16 3C0D                <1>     cmp al, CR
   595 00002C18 7452                <1>     je .carriageReturn
   596 00002C1A 3C0A                <1>     cmp al, LF
   597 00002C1C 7467                <1>     je .lineFeed
   598 00002C1E 3A0517D4FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   599 00002C24 7429                <1>     je .break
   600                              <1> .checkIfCanInsert:
   601 00002C26 38D6                <1>     cmp dh, dl
   602 00002C28 731C                <1>     jae .bufOflw
   603 00002C2A AA                  <1>     stosb   ;Store the byte and increment rdi!
   604 00002C2B FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   605 00002C2D E892FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   606 00002C32 803D(03070000)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   607 00002C39 75A8                <1>     jne .mainLoop
   608                              <1>     ;IF not in insert mode, we fall here
   609                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   610                              <1>     ; or insert chars if needed.
   611 00002C3B 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   612 00002C3D 73A4                <1>     jae .mainLoop  ;If geq dont follow in user buffer
   613 00002C3F 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   614 00002C42 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   615 00002C44 EB9D                <1>     jmp short .mainLoop
   616                              <1> .bufOflw:
   617                              <1> ;Buffer overflow
   618 00002C46 B007                <1>     mov al, BEL ;Sound the bell
   619 00002C48 E8C0FAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   620 00002C4D EB94                <1>     jmp short .mainLoop
   621                              <1> .break:
   622                              <1> ;Break, Place a "\", and do a CRLF
   623 00002C4F B05C                <1>     mov al, "\"
   624 00002C51 E8B7FAFFFF          <1>     call charOut_B.in
   625 00002C56 5E                  <1>     pop rsi ;Realign stack
   626                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   627 00002C57 E898FEFFFF          <1>     call printCRLF
   628                              <1>     ;Align to next tabstop
   629 00002C5C 8A05(CD020000)      <1>     mov al, byte [vConCurCnt]  ;Get without rounding!!
   630 00002C62 E84FFBFFFF          <1>     call charOut_B.outputATab
   631 00002C67 E94FFFFFFF          <1>     jmp .breakEP
   632                              <1> .carriageReturn:
   633 00002C6C AA                  <1>     stosb
   634 00002C6D E89BFAFFFF          <1>     call charOut_B.in
   635 00002C72 5F                  <1>     pop rdi ;User buffer address was pushed 
   636 00002C73 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   637 00002C76 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   638                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   639 00002C78 488D35(CE020000)    <1>     lea rsi, vConBuffer
   640 00002C7F 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   641 00002C82 F3A4                <1>     rep movsb  ;If the inc dh cause an overflow, dont copy! 
   642                              <1>     return
    13                              <2> %%_ret:
    14 00002C84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   643                              <1> .lineFeed:
   644 00002C85 E86AFEFFFF          <1>     call printCRLF
   645 00002C8A E954FFFFFF          <1>     jmp .mainLoop
   646                              <1> .delete:
   647 00002C8F E805000000          <1>     call .removeChar
   648 00002C94 E94AFFFFFF          <1>     jmp .mainLoop
   649                              <1> .removeChar:
   650 00002C99 84F6                <1>     test dh, dh ;Is char count 0?
   651 00002C9B 741C                <1>     jz .normalChar   ;If so, skip going back!
   652 00002C9D E86A000000          <1>     call .vConErase
   653 00002CA2 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   654 00002CA4 3C20                <1>     cmp al, SPC
   655 00002CA6 7311                <1>     jae .normalChar
   656 00002CA8 3C09                <1>     cmp al, TAB
   657 00002CAA 7422                <1>     je .eraTab
   658 00002CAC 3C15                <1>     cmp al, NAK
   659 00002CAE 7409                <1>     je .normalChar
   660 00002CB0 3C14                <1>     cmp al, DC4
   661 00002CB2 7405                <1>     je .normalChar
   662 00002CB4 E858000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   663                              <1> .normalChar:
   664 00002CB9 803D(03070000)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   665                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002CC0 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002CC2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   666 00002CC3 84FF                <1>     test bh, bh ;Beginning of user buffer?
   667                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002CC5 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002CC7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   668 00002CC8 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   669 00002CCB FECF                <1>     dec bh
   670                              <1>     return
    13                              <2> %%_ret:
    14 00002CCD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> .eraTab:
   672                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   673                              <1> ; up to a tab stop worth of space chars printed
   674 00002CCE 57                  <1>     push rdi
   675 00002CCF 48FFCF              <1>     dec rdi
   676 00002CD2 FD                  <1>     std ;Go backwards
   677 00002CD3 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   678 00002CD6 B020                <1>     mov al, SPC
   679 00002CD8 53                  <1>     push rbx
   680 00002CD9 BB07000000          <1>     mov ebx, 7
   681 00002CDE 67E30D              <1>     jecxz .onTabstop
   682                              <1> .scanString:
   683 00002CE1 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   684 00002CE2 7608                <1>     jbe .notChar    ;No, skip handling
   685 00002CE4 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   686 00002CE8 740A                <1>     je .tabChar
   687 00002CEA FECB                <1>     dec bl
   688                              <1> .notChar:
   689 00002CEC E2F3                <1>     loop .scanString
   690                              <1> .onTabstop:
   691 00002CEE 2A1D(CD020000)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   692                              <1> .tabChar:
   693 00002CF4 28F3                <1>     sub bl, dh  ;Same on tabstop
   694 00002CF6 00D9                <1>     add cl, bl
   695 00002CF8 80E107              <1>     and cl, 7
   696 00002CFB 5B                  <1>     pop rbx
   697 00002CFC 5F                  <1>     pop rdi
   698 00002CFD FC                  <1>     cld
   699 00002CFE 74B9                <1>     jz .normalChar
   700                              <1>     ;Now erase all the spaces placed on the vCon
   701                              <1> .vConDelTab:
   702 00002D00 E80C000000          <1>     call .vConEraseNoDec
   703 00002D05 E2F9                <1>     loop .vConDelTab
   704 00002D07 E9ADFFFFFF          <1>     jmp .normalChar
   705                              <1> .vConErase:
   706                              <1> ;Erase the char on the vCon
   707                              <1> ;Return through the output function
   708 00002D0C 48FFCF              <1>     dec rdi ;Go back a space in the 
   709 00002D0F FECE                <1>     dec dh  ;Decrement char count in the buffer
   710                              <1> .vConEraseNoDec:
   711 00002D11 B008                <1>     mov al, BSP ;Move cursor back
   712 00002D13 E8F5F9FFFF          <1>     call charOut_B.in
   713 00002D18 B020                <1>     mov al, SPC ;Replace with a space
   714 00002D1A E8EEF9FFFF          <1>     call charOut_B.in
   715 00002D1F B008                <1>     mov al, BSP ;Move cursor back again
   716 00002D21 E9E7F9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   717                              <1> .escape:
   718                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   719                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   720                              <1> ; including the function keys.
   721 00002D26 FF2506D3FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   722                              <1> .f2:
   723 00002D2C E846000000          <1>     call .fCommon2
   724 00002D31 EB0C                <1>     jmp short .fCommon
   725                              <1> .f3:
   726 00002D33 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   727 00002D36 28F9                <1>     sub cl, bh  ;Sub our current position
   728 00002D38 EB05                <1>     jmp short .fCommon
   729                              <1> .f1:
   730 00002D3A B901000000          <1>     mov ecx, 1  ;Get one char
   731                              <1> .fCommon:
   732 00002D3F C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   733 00002D46 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   734 00002D48 0F8495FEFFFF        <1>     je .mainLoop
   735 00002D4E 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   736 00002D50 0F848DFEFFFF        <1>     je .mainLoop
   737                              <1>     ;Else, copy byte by byte, and retain char in al
   738 00002D56 AC                  <1>     lodsb
   739 00002D57 AA                  <1>     stosb
   740 00002D58 E867FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   741 00002D5D FEC7                <1>     inc bh
   742 00002D5F FEC6                <1>     inc dh
   743 00002D61 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   744 00002D63 E97BFEFFFF          <1>     jmp .mainLoop
   745                              <1> .f4:
   746 00002D68 E80A000000          <1>     call .fCommon2
   747 00002D6D 4801CE              <1>     add rsi, rcx
   748 00002D70 00CF                <1>     add bh, cl
   749 00002D72 E96CFEFFFF          <1>     jmp .mainLoop
   750                              <1> .fCommon2:
   751 00002D77 E809FBFFFF          <1>     call charIn_B   ;Get a char in al
   752 00002D7C 3A05B8D2FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   753 00002D82 750B                <1>     jne .fnotEscape
   754                              <1>     ;Get another char if they typed escape and force it in the buffer
   755                              <1>     ; Do not return to caller
   756 00002D84 E8FCFAFFFF          <1>     call charIn_B
   757                              <1> .fforceExit:
   758 00002D89 59                  <1>     pop rcx ;Get original return address from stack
   759 00002D8A E954FEFFFF          <1>     jmp .mainLoop
   760                              <1> .fnotEscape:
   761 00002D8F 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   762 00002D92 28F9                <1>     sub cl, bh
   763 00002D94 74F3                <1>     jz .fforceExit
   764 00002D96 FFC9                <1>     dec ecx
   765 00002D98 74EF                <1>     jz .fforceExit
   766 00002D9A 57                  <1>     push rdi
   767 00002D9B 4889F7              <1>     mov rdi, rsi
   768 00002D9E 48FFC7              <1>     inc rdi
   769 00002DA1 F2AE                <1>     repne scasb ;Search for the char to start printing from
   770 00002DA3 5F                  <1>     pop rdi
   771 00002DA4 75E3                <1>     jne .fforceExit ;If char not found, return
   772 00002DA6 F6D1                <1>     not cl
   773 00002DA8 00D9                <1>     add cl, bl
   774 00002DAA 28F9                <1>     sub cl, bh
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002DAC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> .f5:
   777 00002DAD B040                <1>     mov al, "@"
   778 00002DAF E859F9FFFF          <1>     call charOut_B.in   ;Print the char
   779 00002DB4 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   780 00002DB5 57                  <1>     push rdi
   781 00002DB6 E8BDFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   782 00002DBB 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   783 00002DBC 88F3                <1>     mov bl, dh
   784 00002DBE E994FEFFFF          <1>     jmp .breakAlt
   785                              <1> .f6:
   786                              <1> ;If the user wants to insert a EOF, they can use F6
   787 00002DC3 B01A                <1>     mov al, EOF
   788 00002DC5 E95CFEFFFF          <1>     jmp .checkIfCanInsert
   789                              <1> .f7:
   790                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   791 00002DCA 8A056AD2FFFF        <1>     mov al, byte [extESC]
   792 00002DD0 E951FEFFFF          <1>     jmp .checkIfCanInsert
   793                              <1> .toggleIns:
   794 00002DD5 F615(03070000)      <1>     not byte [vConInsert]   ;Toggle
   795                              <1>     return
    13                              <2> %%_ret:
    14 00002DDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> .eDel:
   797 00002DDC 38DF                <1>     cmp bh, bl
   798 00002DDE 0F84FFFDFFFF        <1>     je .mainLoop
   799 00002DE4 FEC7                <1>     inc bh
   800 00002DE6 48FFC6              <1>     inc rsi
   801 00002DE9 E9F5FDFFFF          <1>     jmp .mainLoop
   802                              <1> 
   803                              <1> editKeys:
   804                              <1> ;Our Default Extended keys handler
   805 00002DEE E892FAFFFF          <1>     call charIn_B   ;Get the next char in al
   806 00002DF3 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   807 00002DF8 57                  <1>     push rdi    ;Preserve rdi
   808 00002DF9 488D3D3CD2FFFF      <1>     lea rdi, extKeyTbl
   809 00002E00 57                  <1>     push rdi
   810                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   811                              <1>     ; offset of function from extKeyTbl
   812                              <1> .lp:
   813 00002E01 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   814 00002E02 740D                <1>     je .charFound
   815 00002E04 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   816 00002E06 7414                <1>     jz .notInTable
   817 00002E08 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   818 00002E0F EBF0                <1>     jmp short .lp
   819                              <1> .charFound:
   820 00002E11 59                  <1>     pop rcx ;Pop back the effective address of the table
   821 00002E12 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   822 00002E16 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   823 00002E19 5F                  <1>     pop rdi
   824 00002E1A FFE1                <1>     jmp rcx
   825                              <1> .notInTable:
   826 00002E1C 59                  <1>     pop rcx ;Realign stack
   827 00002E1D 59                  <1>     pop rcx
   828 00002E1E E9C0FDFFFF          <1>     jmp buffCharInput_BE.mainLoop
    40                                  %include "./src/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 00002E23 E8A5010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 00002E28 E8F0450000          <1>     call getUserRegs
     6 00002E2D 668B15(8E040000)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 00002E34 0FB60D(90040000)    <1>     movzx ecx, byte [years]
     9 00002E3B 81C1BC070000        <1>     add ecx, 1980   ;Turn into the year from offset since 1980
    10 00002E41 8A05(93040000)      <1>     mov al, byte [dayOfWeek]
    11 00002E47 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    12 00002E4B 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    13                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002E4F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    14                              <1> setDate:           ;ah = 2Bh
    15                              <1> ;	CX = year (1980-2099)
    16                              <1> ;   DH = month (1-12)
    17                              <1> ;	DL = day (1-31)
    18 00002E50 B0FF                <1>     mov al, -1      ;Default to fail
    19 00002E52 6681E9BC07          <1>     sub cx, 1980    ;Turn into years since 1980
    20                              <1>     retc            ;Return with -1 if cx is below 1980. Avoids going into below.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002E57 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002E59 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    21 00002E5A E873000000          <1>     call writeDate  ;Sets ax to 0 or -1, cx needs to be offset since 1980
    22                              <1>     return
    13                              <2> %%_ret:
    14 00002E5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> getTime:           ;ah = 2Ch
    24 00002E60 E868010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    25 00002E65 E8B3450000          <1>     call getUserRegs
    26 00002E6A 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    27 00002E71 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    28 00002E78 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    29 00002E7C 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    30                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002E80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> setTime:           ;ah = 2Dh
    32                              <1> ;   CH = hour (0-23)
    33                              <1> ;	CL = minutes (0-59)
    34                              <1> ;	DH = seconds (0-59)
    35                              <1> ;	DL = hundredths (0-99)
    36 00002E81 80FD17              <1>     cmp ch, 23
    37 00002E84 7749                <1>     ja .exitBad
    38 00002E86 80F93B              <1>     cmp cl, 59
    39 00002E89 7744                <1>     ja .exitBad
    40 00002E8B 80FE3B              <1>     cmp dh, 59
    41 00002E8E 773F                <1>     ja .exitBad
    42 00002E90 80FA63              <1>     cmp dl, 99
    43 00002E93 773A                <1>     ja .exitBad
    44                              <1> ;Now we read date (updating internal count if necessary)
    45 00002E95 E833010000          <1>     call readDateTimeRecord
    46 00002E9A 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    47 00002EA1 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    48 00002EA8 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    49 00002EAB 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    50 00002EAF 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    51 00002EB3 B906000000          <1>     mov ecx, 6
    52 00002EB8 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    53 00002EBB E8EF430000          <1>     call primReqWriteSetup   ;rbx now points to request header
    54 00002EC0 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    55 00002EC7 E8A6400000          <1>     call goDriver
    56 00002ECC 30C0                <1>     xor al, al
    57                              <1>     return
    13                              <2> %%_ret:
    14 00002ECE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    58                              <1> .exitBad:
    59 00002ECF B0FF                <1>     mov al, -1
    60                              <1>     return
    13                              <2> %%_ret:
    14 00002ED1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> ;------------------------
    62                              <1> ;   Utility functions   :
    63                              <1> ;------------------------
    64                              <1> writeDate:
    65                              <1> ;Input: cx = 00-120 (1980-2099)
    66                              <1> ;       dl = Day    (01-31)
    67                              <1> ;       dh = Month  (01-12)
    68 00002ED2 6681F97800          <1>     cmp cx, 120
    69 00002ED7 0F83ED000000        <1>     jae .exitBad
    70 00002EDD 84F6                <1>     test dh, dh
    71 00002EDF 0F84E5000000        <1>     jz .exitBad
    72 00002EE5 80FE0C              <1>     cmp dh, 12
    73 00002EE8 0F87DC000000        <1>     ja .exitBad
    74 00002EEE 84D2                <1>     test dl, dl
    75 00002EF0 0F84D4000000        <1>     jz .exitBad
    76 00002EF6 80FA1F              <1>     cmp dl, 31
    77 00002EF9 0F87CB000000        <1>     ja .exitBad
    78 00002EFF 668915(8E040000)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    79                              <1>     ;mov byte [monthOfYear], dh
    80 00002F06 880D(90040000)      <1>     mov byte [years], cl    ;Save the years count
    81 00002F0C E884010000          <1>     call setDaysInFeb   ;Set days in february this year
    82 00002F11 80FE02              <1>     cmp dh, 2   ;Are we in Feb?
    83 00002F14 750C                <1>     jne .notFeb
    84 00002F16 3A1542D1FFFF        <1>     cmp dl, byte [monthsTbl + 1] ;Compare if we are a bad date?
    85 00002F1C 0F87A8000000        <1>     ja .exitBad ;If 29-28 (for example), error!
    86                              <1> .notFeb:
    87 00002F22 88CD                <1>     mov ch, cl ;Get years count in ch
    88 00002F24 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    89 00002F27 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    90 00002F2A 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    91 00002F2D BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    92 00002F32 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    93                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    94 00002F34 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    95 00002F37 67E311              <1>     jecxz .addDay    ;Skip adding years
    96 00002F3A 056E010000          <1>     add eax, 366    ;First add for a leap year
    97                              <1> .addYears:
    98 00002F3F FFC9                <1>     dec ecx
    99 00002F41 67E307              <1>     jecxz .addDay    ;Jump if in year after leap year
   100 00002F44 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   101 00002F49 EBF4                <1>     jmp short .addYears
   102                              <1> .addDay:
   103 00002F4B 89C2                <1>     mov edx, eax    ;Save this number in edx
   104                              <1>     ;Now to add day offset
   105 00002F4D 0FB60D(8F040000)    <1>     movzx ecx, byte [monthOfYear]
   106 00002F54 488D3502D1FFFF      <1>     lea rsi, monthsTbl
   107                              <1> .addDaysInMonth:
   108 00002F5B FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   109 00002F5D 67E308              <1>     jecxz .addMonthOffset
   110 00002F60 AC                  <1>     lodsb   ;Get the number of days in the month in al
   111 00002F61 0FB6C0              <1>     movzx eax, al
   112 00002F64 01C2                <1>     add edx, eax
   113 00002F66 EBF3                <1>     jmp short .addDaysInMonth
   114                              <1> .addMonthOffset:
   115 00002F68 0FB60D(8E040000)    <1>     movzx ecx, byte [dayOfMonth]
   116 00002F6F FFC9                <1>     dec ecx
   117 00002F71 01CA                <1>     add edx, ecx    ;Add month offset
   118                              <1>     ;edx has the number of days since 01/01/1980
   119 00002F73 668915(91040000)    <1>     mov word [daysOffset], dx   ;Store!
   120                              <1> ;Now read and then write CLOCKrecrd
   121 00002F7A 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   122 00002F81 B906000000          <1>     mov ecx, 6
   123 00002F86 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   124 00002F89 E82C430000          <1>     call primReqReadSetup   ;rbx now points to request header
   125 00002F8E 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   126 00002F95 E8D83F0000          <1>     call goDriver
   127                              <1> ;Now we change daycount and write it back
   128 00002F9A 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   129 00002FA1 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   130 00002FA8 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   131 00002FAB B906000000          <1>     mov ecx, 6
   132 00002FB0 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   133 00002FB3 E8F7420000          <1>     call primReqWriteSetup   ;rbx now points to request header
   134 00002FB8 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   135 00002FBF E8AE3F0000          <1>     call goDriver
   136 00002FC4 E8AE000000          <1>     call setDayofWeek
   137                              <1>     return
    13                              <2> %%_ret:
    14 00002FC9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> .exitBad:
   139 00002FCA B0FF                <1>     mov al, -1
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002FCC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> readDateTimeRecord:
   143                              <1> ;Will read the clock using the primary request header
   144                              <1> ;Preserves all regs except eax and flags
   145 00002FCD 53                  <1>     push rbx
   146 00002FCE 51                  <1>     push rcx
   147 00002FCF 52                  <1>     push rdx
   148 00002FD0 56                  <1>     push rsi
   149 00002FD1 55                  <1>     push rbp
   150                              <1> 
   151 00002FD2 66C705(151A0000)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   151 00002FDA 00                  <1>
   152 00002FDB 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   153 00002FE2 B906000000          <1>     mov ecx, 6      ;Number of bytes to xfr
   154 00002FE7 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   155                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   156                              <1> ; rbx = Data storage buffer ptr
   157                              <1> ; ecx = Number of sectors to transfer | Number of bytes to xfr, if char dev
   158                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   159 00002FEA E8CB420000          <1>     call primReqReadSetup   ;rbx now points to request header
   160 00002FEF 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   161 00002FF6 E8773F0000          <1>     call goDriver
   162 00002FFB 0FB705(16050000)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   163                              <1> ;Here we have:  ax = Days since 1/1/1980
   164                              <1> ;Updates the internal date fields
   165                              <1> ;Internal time fields are in the clock record
   166                              <1> ;So now we check if the number of days since 1980 are the same.
   167                              <1> ;If so, we can skip updating.
   168 00003002 663B05(91040000)    <1>     cmp ax, word [daysOffset]
   169 00003009 7466                <1>     je .exit    ;Return if equal
   170 0000300B 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   171 00003010 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   172 00003012 668905(91040000)    <1>     mov word [daysOffset], ax   ;Save this new offset
   173                              <1>     ;Now want to update years, month and day fields
   174                              <1>     ;ax has the number of days since 01/01/1980
   175                              <1>     ;Get days in a 4 year period
   176 00003019 BBB5050000          <1>     mov ebx, 365*4 + 1
   177 0000301E 31D2                <1>     xor edx, edx
   178 00003020 89D1                <1>     mov ecx, edx  ;Zero ecx
   179 00003022 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   180                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   181                              <1>     ;edx has offset into current 4 year bunch
   182 00003024 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   183 00003029 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   184 0000302B 7210                <1>     jb .foundBunch
   185 0000302D 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   186 0000302F FFC1                <1>     inc ecx
   187 00003031 FFCB                <1>     dec ebx ;Number of days in a normal year
   188                              <1> .findBunch:
   189 00003033 39DA                <1>     cmp edx, ebx
   190 00003035 7206                <1>     jb .foundBunch
   191 00003037 29DA                <1>     sub edx, ebx
   192 00003039 FFC1                <1>     inc ecx
   193 0000303B EBF6                <1>     jmp short .findBunch
   194                              <1> .foundBunch:
   195                              <1>     ;If ecx = 0, february has 29 days!
   196                              <1>     ;eax has number of four year bunches elapsed since 1980
   197 0000303D C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   198 00003040 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   199                              <1>     ;ecx now has the number of years since 1980
   200 00003042 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   201                              <1> ;edx has number of days into the year we are in
   202                              <1> ;eax has number of days in Feb for this year
   203 00003047 488D350FD0FFFF      <1>     lea rsi, monthsTbl
   204 0000304E 31C9                <1>     xor ecx, ecx    ;Use as month counter
   205                              <1> .monthSearch:
   206 00003050 FFC1                <1>     inc ecx ;Start from 1
   207 00003052 AC                  <1>     lodsb   ;Get value in al and inc rsi
   208 00003053 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   209 00003056 39C2                <1>     cmp edx, eax
   210 00003058 7204                <1>     jb .monthFound
   211 0000305A 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   212 0000305C EBF2                <1>     jmp short .monthSearch
   213                              <1> .monthFound:
   214                              <1>     ;cl has the month (01h-0Ch)
   215                              <1>     ;dl has the day of the month - 1
   216 0000305E FFC2                <1>     inc edx
   217 00003060 880D(8F040000)      <1>     mov byte [monthOfYear], cl
   218 00003066 8815(8E040000)      <1>     mov byte [dayOfMonth], dl
   219 0000306C E806000000          <1>     call setDayofWeek
   220                              <1> .exit:
   221 00003071 5D                  <1>     pop rbp
   222 00003072 5E                  <1>     pop rsi
   223 00003073 5A                  <1>     pop rdx
   224 00003074 59                  <1>     pop rcx
   225 00003075 5B                  <1>     pop rbx
   226                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 00003076 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> setDayofWeek:
   229                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   230 00003077 0FB705(91040000)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   231 0000307E 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   232                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   233 00003083 31D2                <1>     xor edx, edx
   234 00003085 B907000000          <1>     mov ecx, 7   
   235 0000308A F7F1                <1>     div ecx  ;Get remainder in dl
   236 0000308C 8815(93040000)      <1>     mov byte [dayOfWeek], dl
   237                              <1> ;Set ZF to indicate all ok
   238 00003092 31C0                <1>     xor eax, eax
   239                              <1>     return
    13                              <2> %%_ret:
    14 00003094 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> setDaysInFeb:   ;Int 2Fh AX = 121Bh, Set days in february
   242                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   243                              <1> ;Input: cl = Year - 1980
   244                              <1> ;Output: al = Number of days in February
   245 00003095 880D(90040000)      <1>     mov byte [years], cl    ;Save this figure
   246 0000309B F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   247 0000309E 51                  <1>     push rcx
   248 0000309F 57                  <1>     push rdi
   249 000030A0 B81C000000          <1>     mov eax, 28  ;Usual days in february
   250 000030A5 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   251 000030AA 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   252 000030AD 488D3DAACFFFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   253 000030B4 AA                  <1>     stosb   ;Store the word in rdi
   254 000030B5 5F                  <1>     pop rdi
   255 000030B6 59                  <1>     pop rcx
   256                              <1>     return
    13                              <2> %%_ret:
    14 000030B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> getDirDTwords:
   259                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   260                              <1> ; High word of eax = Date
   261                              <1> ; Low word of eax = Time
   262                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   263                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   264                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   265                              <1> 
   266                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   267                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   268                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   269                              <1> ;Preserves all registers except eax
   270 000030B8 53                  <1>     push rbx
   271 000030B9 0FB61D(1B050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   272 000030C0 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   273 000030C2 89D8                <1>     mov eax, ebx
   274 000030C4 0FB61D(18050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   275 000030CB C1E305              <1>     shl ebx, 5
   276 000030CE 09D8                <1>     or eax, ebx
   277 000030D0 0FB61D(19050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   278 000030D7 C1E30B              <1>     shl ebx, 11
   279 000030DA 09D8                <1>     or eax, ebx
   280 000030DC 0FB61D(8E040000)    <1>     movzx ebx, byte [dayOfMonth]
   281 000030E3 C1E310              <1>     shl ebx, 16
   282 000030E6 09D8                <1>     or eax, ebx
   283 000030E8 0FB61D(8F040000)    <1>     movzx ebx, byte [monthOfYear]
   284 000030EF C1E315              <1>     shl ebx, 21
   285 000030F2 09D8                <1>     or eax, ebx
   286 000030F4 0FB61D(90040000)    <1>     movzx ebx, byte [years]
   287 000030FB C1E319              <1>     shl ebx, 25
   288 000030FE 09D8                <1>     or eax, ebx
   289 00003100 5B                  <1>     pop rbx
   290                              <1>     return
    13                              <2> %%_ret:
    14 00003101 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   291                              <1> getDateAndTimeOld:  ;Int 2Fh AX=120Dh
   292                              <1> ;Returns edx = time
   293                              <1> ;        eax = date
   294                              <1> ; Formally ax and dx but we clear the upper words
   295 00003102 E8C6FEFFFF          <1>     call readDateTimeRecord
   296 00003107 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   297 0000310C 31D2                <1>     xor edx, edx
   298 0000310E 6689C2              <1>     mov dx, ax  ;Save time
   299 00003111 C1E810              <1>     shr eax, 10h    ;Get date into rax
   300                              <1>     return
    13                              <2> %%_ret:
    14 00003114 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                                  %include "./src/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for particular uses. This is planned
     3                              <1> ; to be extended later.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently generally supported:
    14                              <1> ;   openFCB -> Except for creating a volume label.
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB -> Except for creating a volume label.
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions will result in returning al = -1 and 
    24                              <1> ; an extended error code of 05 - Access Denied
    25                              <1> 
    26                              <1> findFirstFileFCB:  ;ah = 11h
    27                              <1> ;Input: rdx -> FCB
    28 00003115 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    29 0000311C 4889D6              <1>     mov rsi, rdx
    30 0000311F 803EFF              <1>     cmp byte [rsi], -1
    31 00003122 7507                <1>     jne .notExt1
    32 00003124 4881C607000000      <1>     add rsi, exFcb.driveNum
    33                              <1> .notExt1:
    34 0000312B 0FB606              <1>     movzx eax, byte [rsi]
    35 0000312E 50                  <1>     push rax    ;Push on stack the drive number
    36 0000312F 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    37 00003136 E837030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    38 0000313B 7306                <1>     jnc .fcbOk
    39 0000313D 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    40 0000313E E997470000          <1>     jmp fcbErrExit
    41                              <1> .fcbOk:
    42 00003143 488D3D(1E050000)    <1>     lea rdi, buffer1
    43 0000314A E837E4FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    44 0000314F 7306                <1>     jnc .fileFound
    45 00003151 5B                  <1>     pop rbx
    46 00003152 E983470000          <1>     jmp fcbErrExit
    47                              <1> .fileFound:
    48                              <1> ;Now we build an FFBlock internally
    49 00003157 488D3D(2F060000)    <1>     lea rdi, dosffblock
    50 0000315E 57                  <1>     push rdi
    51 0000315F E8C8E2FFFF          <1>     call setupFFBlock
    52 00003164 5E                  <1>     pop rsi
    53                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    54 00003165 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB]
    55 0000316C F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    56 00003173 7407                <1>     jz .notExt2
    57 00003175 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    58                              <1> .notExt2:
    59 0000317C 5B                  <1>     pop rbx ;Get back the drive number in bl
    60 0000317D 85DB                <1>     test ebx, ebx
    61 0000317F 7509                <1>     jnz .notCurrentDrive
    62 00003181 0FB61D(31040000)    <1>     movzx ebx, byte [currentDrv]
    63 00003188 FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    64                              <1> .notCurrentDrive:
    65 0000318A AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    66 0000318B 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    67 0000318E B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    68 00003193 F3A5                <1>     rep movsd
    69 00003195 89D8                <1>     mov eax, ebx
    70 00003197 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    71 00003198 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    72 0000319F 488D35(5A060000)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    73 000031A6 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    74 000031AD 7412                <1>     jz .notExt3
    75 000031AF B8FFFFFFFF          <1>     mov eax, -1
    76 000031B4 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    77 000031B5 FFC0                <1>     inc eax ;Make it zero
    78 000031B7 AB                  <1>     stosd
    79 000031B8 AA                  <1>     stosb   ;Store 5 bytes of zero
    80 000031B9 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]
    81 000031C0 AA                  <1>     stosb   ;Store the search attributes
    82                              <1> .notExt3:
    83 000031C1 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    84 000031C3 AA                  <1>     stosb
    85 000031C4 B904000000          <1>     mov ecx, fatDirEntry_size/8
    86 000031C9 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    87 000031CC E906470000          <1>     jmp fcbGoodExit
    88                              <1>     
    89                              <1> findNextFileFCB:   ;ah = 12h
    90 000031D1 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    91 000031D8 C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    92 000031DF C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    93 000031E6 4889D6              <1>     mov rsi, rdx
    94                              <1> 
    95 000031E9 803EFF              <1>     cmp byte [rsi], -1
    96 000031EC 7514                <1>     jne .notExt
    97 000031EE FE0D(FB060000)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
    98 000031F4 4881C606000000      <1>     add rsi, exFcb.attribute
    99 000031FB AC                  <1>     lodsb   ;Get search attr in al
   100 000031FC 8805(FC060000)      <1>     mov byte [searchAttr], al
   101                              <1> .notExt:
   102                              <1>     ;rsi points to drive letter
   103 00003202 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   104 00003209 31C0                <1>     xor eax, eax
   105 0000320B AC                  <1>     lodsb   ;Get the FCB drive letter
   106 0000320C 50                  <1>     push rax    ;Push drive letter on the stack
   107 0000320D 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   108 00003210 AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   109 00003211 B905000000          <1>     mov ecx, 5
   110 00003216 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   111 00003218 FF35(17040000)      <1>     push qword [currentDTA] ;Save original currentDTA
   112 0000321E 488D3D(2F060000)    <1>     lea rdi, dosffblock
   113 00003225 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   114 00003226 8F05(17040000)      <1>     pop qword [currentDTA]
   115 0000322C E8D5DDFFFF          <1>     call findNextMain
   116 00003231 8F05(17040000)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   117 00003237 0F831AFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   118 0000323D 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   119 00003244 F607FF              <1>     test byte [rdi], -1
   120 00003247 7407                <1>     jz .notExt2
   121 00003249 4881C707000000      <1>     add rdi, exFcb.driveNum
   122                              <1> .notExt2:
   123 00003250 5B                  <1>     pop rbx ;Get the drive letter back into bl
   124 00003251 881F                <1>     mov byte [rdi], bl
   125 00003253 E982460000          <1>     jmp fcbErrExit  ;And exit bad
   126                              <1> 
   127                              <1> deleteFileFCB:     ;ah = 13h
   128 00003258 488D3D(1E050000)    <1>     lea rdi, buffer1
   129 0000325F 57                  <1>     push rdi
   130 00003260 E80D020000          <1>     call fcbInitRoutine ;Build path and find file to delete
   131 00003265 5F                  <1>     pop rdi ;Point rdi to the canonised path
   132 00003266 0F826E460000        <1>     jc fcbErrExit
   133 0000326C E815E3FFFF          <1>     call getFilePathNoCanon ;Get the file
   134 00003271 0F8263460000        <1>     jc fcbErrExit
   135 00003277 E8AA100000          <1>     call outerDeleteMain
   136 0000327C 0F8258460000        <1>     jc fcbErrExit
   137 00003282 E950460000          <1>     jmp fcbGoodExit
   138                              <1> 
   139                              <1> renameFileFCB:     ;ah = 17h
   140                              <1> ;Input: rdx -> User FCB
   141 00003287 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   142                              <1>     ;First we get the drive letter 
   143 0000328E 4889D6              <1>     mov rsi, rdx
   144 00003291 803EFF              <1>     cmp byte [rsi], -1
   145 00003294 7507                <1>     jne .notExt
   146 00003296 4881C607000000      <1>     add rsi, exFcb.driveNum
   147                              <1> .notExt:
   148 0000329D 31C0                <1>     xor eax, eax
   149 0000329F AC                  <1>     lodsb
   150 000032A0 50                  <1>     push rax    ;Push the drive letter on the stack for now
   151 000032A1 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   152 000032A8 E8C5010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   153 000032AD 723D                <1>     jc .badPop
   154 000032AF FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   155 000032B5 8F05(26060000)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   156 000032BB 58                  <1>     pop rax ;Get drive letter back
   157 000032BC 488D3D(9E050000)    <1>     lea rdi, buffer2
   158 000032C3 E87E010000          <1>     call fcbInitName2
   159 000032C8 7223                <1>     jc short .bad
   160 000032CA 488B05(26060000)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   161 000032D1 488705(1E060000)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   162 000032D8 488905(26060000)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   163 000032DF E8CE0B0000          <1>     call renameMain
   164 000032E4 0F83ED450000        <1>     jnc fcbGoodExit
   165 000032EA EB01                <1>     jmp short .bad
   166                              <1> .badPop:
   167 000032EC 5B                  <1>     pop rbx ;Pop drive number off stack
   168                              <1> .bad:
   169 000032ED E9E8450000          <1>     jmp fcbErrExit
   170                              <1> 
   171                              <1> getFileSizeFCB:    ;ah = 23h
   172                              <1> ;This function which can be used to test existance of file without opening it 
   173                              <1> ;Input: rdx -> FCB
   174 000032F2 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   175 000032F9 488D3D(1E050000)    <1>     lea rdi, buffer1
   176 00003300 57                  <1>     push rdi
   177 00003301 E86C010000          <1>     call fcbInitRoutine
   178 00003306 5F                  <1>     pop rdi
   179 00003307 0F82CD450000        <1>     jc fcbErrExit
   180 0000330D E874E2FFFF          <1>     call getFilePathNoCanon
   181 00003312 0F82C2450000        <1>     jc fcbErrExit
   182 00003318 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   183                              <1>     ;Now we gotta set up FCB randRecrd Field
   184 0000331E 488B35(1A070000)    <1>     mov rsi, qword [workingFCB]
   185 00003325 803EFF              <1>     cmp byte [rsi], -1
   186 00003328 7507                <1>     jne .notExtended
   187 0000332A 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   188                              <1> .notExtended:
   189                              <1> ;rsi points to the drive number now
   190 00003331 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   191 00003335 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   192 00003337 85D2                <1>     test edx, edx
   193 00003339 7402                <1>     jz .noRemainder
   194 0000333B FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   195                              <1> .noRemainder:
   196 0000333D 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   197 00003340 E992450000          <1>     jmp fcbGoodExit
   198                              <1> 
   199                              <1> setDTA:            ;ah = 1Ah, Always can be used
   200                              <1> ;Called with:
   201                              <1> ;   rdx = Pointer to the new default DTA
   202 00003345 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   203 0000334C 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   204 00003350 488915(17040000)    <1>     mov qword [currentDTA], rdx
   205 00003357 C3                  <1>     ret
   206                              <1> 
   207                              <1> getDTA:            ;ah = 2Fh, Always can be used
   208 00003358 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   209 0000335F 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   210 00003366 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   211                              <1>     return
    13                              <2> %%_ret:
    14 0000336A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   212                              <1>     
   213                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   214                              <1> ;Input:
   215                              <1> ;rsi points to a command line to parse
   216                              <1> ;rdi points to a future unopened FCB
   217                              <1> ;al = parsing control bits. 
   218                              <1> ; al[0] = If set, leading filename separators are scanned off
   219                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   220                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   221                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   222                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   223                              <1> ;        al = 1 => Wildcards found
   224                              <1> ;        al = -1 => Drive specifier invalid
   225                              <1> ;rsi -> to the first char past the parsed filename
   226                              <1> ;rdi -> First byte of the FCB 
   227                              <1> 
   228 0000336B E8A2010000          <1>     call parseNameToFCB
   229 00003370 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   230 00003371 E8A7400000          <1>     call getUserRegs
   231 00003376 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   232                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 00003379 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> createFileFCB:     ;ah = 16h
   235                              <1> openFileFCB:       ;ah = 0Fh
   236                              <1> ;rdx -> Extended FCB
   237                              <1> ;   MUST BE EXTENDED. 
   238                              <1> ;   MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   239                              <1> ; Using FCB's, one can only create a volume label on a volume.
   240                              <1> ;
   241                              <1> ;Deleting a volume label can be done using delete file (fcb)
   242                              <1> ;Renaming a volume label can be done using rename file (fcb)
   243                              <1> ;Creating a volume label can be done using create file (fcb and hdl)
   244                              <1> ;
   245                              <1> ; In all cases, we recommend the use of fcb's ONLY. Hdl funcs are not 
   246                              <1> ; suggested for use with the vol crud because, do we really need the hdl? No!
   247                              <1> ;
   248 0000337A 488915(1A070000)    <1>     mov qword [workingFCB], rdx     ;Save the FCB ptr
   249 00003381 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   250 00003384 755D                <1>     jne .exitErr
   251 00003386 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   252 0000338A 7557                <1>     jne .exitErr
   253                              <1>     ;Here we proceed with creating a volume label
   254 0000338C 488D3D(1E050000)    <1>     lea rdi, buffer1
   255 00003393 57                  <1>     push rdi
   256 00003394 E8D9000000          <1>     call fcbInitRoutine     ;Build path to volid
   257 00003399 5E                  <1>     pop rsi                 ;Point rsi to the canonised path
   258 0000339A 0F823A450000        <1>     jc fcbErrExit
   259 000033A0 4889F7              <1>     mov rdi, rsi            ;Pass argument to rdi. rsi, rdi preserved
   260 000033A3 E856420000          <1>     call checkPathspecOK    ;If the path has wildcards, fail!
   261 000033A8 7239                <1>     jc .exitErr
   262 000033AA E8D7E1FFFF          <1>     call getFilePathNoCanon ;Get the file if it exists! Sets DPB too.
   263 000033AF 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
   264 000033B5 30C0                <1>     xor al, al
   265 000033B7 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Do null path check!
   266 000033BC 7425                <1>     je .exitErr
   267 000033BE 488D3D(100D0000)    <1>     lea rdi, scratchSFT     ;Set the working SFT to the scratch in the SDA
   268 000033C5 E8A31C0000          <1>     call setCurrentSFT
   269 000033CA 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]   ;Get the file attribute in al
   270 000033D1 E82F110000          <1>     call createMain
   271 000033D6 720B                <1>     jc .exitErr
   272                              <1>     ;We close the sda sft since we dont have an explicit FCB close fn.
   273                              <1>     ;Necessary to close the associated share record when sharing.
   274 000033D8 E83A140000          <1>     call closeMain
   275 000033DD 0F83F4440000        <1>     jnc fcbGoodExit     ;We require no back copying so exit!
   276                              <1> .exitErr:
   277 000033E3 B805000000          <1>     mov eax, errAccDen
   278 000033E8 E9ED440000          <1>     jmp fcbErrExit
   279                              <1> 
   280                              <1> closeFileFCB:      ;ah = 10h
   281                              <1> ;This is a minimal function stub which is necessary to "pseudo"-close
   282                              <1> ; opens/creates of volume labels via the open/createFCB function.
   283                              <1> ; Though those functions close by themselves, I won't document that
   284                              <1> ; for future compatibility. Thus, if this function encounters a 
   285                              <1> ; open/create volume label FCB, it returns OK. Else it fails.
   286 000033ED 488915(1A070000)    <1>     mov qword [workingFCB], rdx     ;Save the FCB ptr
   287 000033F4 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   288 000033F7 75EA                <1>     jne openFileFCB.exitErr
   289 000033F9 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   290 000033FD 75E4                <1>     jne openFileFCB.exitErr
   291 000033FF E9D3440000          <1>     jmp fcbGoodExit
   292                              <1> 
   293                              <1> ;=================================================================
   294                              <1> ;=================================================================
   295                              <1> ;These functions are marked as reserved for future expansion.
   296                              <1> ;=================================================================
   297                              <1> ;=================================================================
   298                              <1> sequentialReadFCB: ;ah = 14h
   299                              <1> sequentialWriteFCB:;ah = 15h
   300                              <1> randomReadFCB:     ;ah = 21h
   301                              <1> randomWriteFCB:    ;ah = 22h
   302                              <1> setRelRecordFCB:   ;ah = 24h
   303                              <1> randBlockReadFCB:  ;ah = 27h
   304                              <1> randBlockWriteFCB: ;ah = 28h
   305 00003404 B805000000          <1>     mov eax, errAccDen
   306 00003409 E9CC440000          <1>     jmp fcbErrExit
   307                              <1> 
   308                              <1> 
   309                              <1> ;--------------------------------
   310                              <1> ;  Common FCB related Routines  :
   311                              <1> ;--------------------------------
   312                              <1> fcbCheckDriveType:
   313                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   314                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   315                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   316                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   317                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   318                              <1> ;If a net CDS, automatic fail (for now).
   319 0000340E C605(F9060000)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   320 00003415 51                  <1>     push rcx
   321 00003416 57                  <1>     push rdi
   322 00003417 55                  <1>     push rbp
   323 00003418 9C                  <1>     pushfq
   324 00003419 F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   325 00003420 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   326 00003422 E8623F0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   327 00003427 7218                <1>     jc .exit
   328                              <1>     ;rdi has cds ptr now
   329 00003429 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   330 0000342D E8F4D5FFFF          <1>     call getFATtype
   331 00003432 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   332 00003438 7707                <1>     ja .exit
   333                              <1> .okToGo:
   334 0000343A C605(F9060000)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   335                              <1> .exit:
   336 00003441 9D                  <1>     popfq
   337 00003442 5D                  <1>     pop rbp
   338 00003443 5F                  <1>     pop rdi
   339 00003444 59                  <1>     pop rcx
   340                              <1>     return
    13                              <2> %%_ret:
    14 00003445 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> fcbInitName2:
   342                              <1> ;Must be called after fcbInitRoutine has been run once
   343                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   344                              <1> ;       rdx -> UserFCB
   345                              <1> ;       eax[0] = Drive number (0 based)
   346 00003446 55                  <1>     push rbp
   347 00003447 4889E5              <1>     mov rbp, rsp
   348 0000344A 4881EC0F000000      <1>     sub rsp, 15
   349 00003451 57                  <1>     push rdi
   350 00003452 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   351 00003456 4889D6              <1>     mov rsi, rdx
   352 00003459 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
   353 00003460 7407                <1>     jz .notExtended
   354 00003462 4881C607000000      <1>     add rsi, exFcb.driveNum
   355                              <1> .notExtended:
   356                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   357 00003469 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   358 00003470 EB36                <1>     jmp short fcbInitRoutine.rename2EP
   359                              <1> fcbInitRoutine:
   360                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   361                              <1> ;Input: rdx -> User FCB
   362                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   363 00003472 55                  <1>     push rbp
   364 00003473 4889E5              <1>     mov rbp, rsp
   365 00003476 4881EC0F000000      <1>     sub rsp, 15    ;Make 16 char space on stack
   366                              <1>     ;This space is used to store X:FILENAME.EXT,0
   367 0000347D 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   368 0000347E 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   369 00003482 C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   370 00003489 C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   371 00003490 E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   372 00003495 7410                <1>     jz .notExtended
   373 00003497 C605(FB060000)FF    <1>     mov byte [extFCBFlag], -1
   374 0000349E 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   375 000034A1 8805(FC060000)      <1>     mov byte [searchAttr], al
   376                              <1> .notExtended:
   377 000034A7 AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   378                              <1> .rename2EP:
   379                              <1> ;Call notjoin to prevent choosing a CDS that is a join cds for a FCB operation
   380 000034A8 E8943F0000          <1>     call getCDSNotJoin ;Get the CDS (preserves rdi)
   381 000034AD 723F                <1>     jc .badDisk
   382 000034AF E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   383 000034B4 488D1DB2CFFFFF      <1>     lea rbx, asciiCharProperties
   384 000034BB B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   385 000034C0 56                  <1>     push rsi    ;rsi -> fcb.filename
   386                              <1> .nameCharCheck:
   387 000034C1 AC                  <1>     lodsb   ;Get the char in al
   388 000034C2 D7                  <1>     xlatb   ;Get the char signature in al
   389 000034C3 A808                <1>     test al, badFCBChar  ;Make sure it is a valid FCB filename char
   390 000034C5 7427                <1>     jz .badDisk
   391 000034C7 FFC9                <1>     dec ecx
   392 000034C9 75F6                <1>     jnz .nameCharCheck
   393 000034CB 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   394 000034CC 4889FB              <1>     mov rbx, rdi    ;Save ptr to first char past X: (or X:\)
   395 000034CF E818DFFFFF          <1>     call FCBToAsciiz
   396 000034D4 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   397 000034D5 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0 (or X:\,0)?
   398 000034D8 7414                <1>     je .badDisk
   399 000034DA 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   400 000034DE 55                  <1>     push rbp
   401 000034DF E867E0FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename (add curr dir if X:)
   402 000034E4 5D                  <1>     pop rbp
   403 000034E5 7207                <1>     jc .badDisk
   404 000034E7 E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   405 000034EC EB03                <1>     jmp short .jiggleStack  ;Skip the error
   406                              <1> .badDisk:
   407 000034EE B003                <1>     mov al, errPnf  ;DOS does this... so will I
   408 000034F0 F9                  <1>     stc
   409                              <1> .jiggleStack:
   410 000034F1 4889EC              <1>     mov rsp, rbp
   411 000034F4 5D                  <1>     pop rbp
   412                              <1> .exit:
   413                              <1>     return
    13                              <2> %%_ret:
    14 000034F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> 
   415                              <1> storeZeroBasedDriveNumber:
   416                              <1> ;Input: al => 0 based drive letter
   417                              <1> ;       rdi -> Points to buffer to store the X: in
   418 000034F6 FEC0                <1>     inc al
   419                              <1> storeOneBasedDriveNumber:
   420                              <1> ;Input: al => 1 based drive letter
   421                              <1> ;       rdi -> Points to buffer to store the X: in
   422 000034F8 0440                <1>     add al, "@"
   423 000034FA B43A                <1>     mov ah, ":"
   424 000034FC 66AB                <1>     stosw
   425                              <1>     return
    13                              <2> %%_ret:
    14 000034FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   426                              <1> 
   427                              <1> isFCBExtended:
   428                              <1> ;Input: rdx = FCB ptr
   429                              <1> ;Output: rsi -> Drive letter of FCB
   430                              <1> ;        rdx -> FCB first byte
   431                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   432 000034FF 4889D6              <1>     mov rsi, rdx
   433 00003502 803EFF              <1>     cmp byte [rsi], -1
   434 00003505 7507                <1>     jne .notExtended
   435 00003507 4881C607000000      <1>     add rsi, exFcb.driveNum
   436                              <1> .notExtended:
   437 0000350E 4839F2              <1>     cmp rdx, rsi
   438                              <1>     return
    13                              <2> %%_ret:
    14 00003511 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> 
   440                              <1> parseNameToFCB:
   441                              <1> ;rsi points to a command line to parse
   442                              <1> ;rdi points to a future unopened FCB
   443                              <1> ;al = parsing control bits. 
   444                              <1> ; al[0] = If set, leading filename separators are scanned off
   445                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   446                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   447                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   448                              <1> ;
   449                              <1> ;Separators include : . ; , = + TAB SPACE
   450                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   451 00003512 C605(8D040000)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   452 00003519 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   453 0000351B A802                <1>     test al, 2  ;Set drive letter
   454 0000351D 7402                <1>     jz .skipDriveLetter
   455 0000351F 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   456                              <1> .skipDriveLetter:
   457 00003521 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   458 00003524 B908000000          <1>     mov ecx, 8  ;Copy Filename
   459 00003529 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   460 0000352B 93                  <1>     xchg eax, ebx
   461 0000352C B020                <1>     mov al, " " ;Clear the field
   462 0000352E 7405                <1>     jz .clearFilenameField
   463 00003530 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   464 00003533 31C9                <1>     xor ecx, ecx
   465                              <1> .clearFilenameField:
   466 00003535 F3AA                <1>     rep stosb
   467 00003537 B903000000          <1>     mov ecx, 3
   468 0000353C F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   469 0000353F 7405                <1>     jz .clearExtensionField
   470 00003541 4801CF              <1>     add rdi, rcx
   471 00003544 31C9                <1>     xor ecx, ecx
   472                              <1> .clearExtensionField:
   473 00003546 F3AA                <1>     rep stosb
   474 00003548 91                  <1>     xchg eax, ecx
   475 00003549 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   476 0000354A 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   477 00003551 F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   478 00003554 740F                <1>     jz .dontScanOffTerm
   479 00003556 E89F000000          <1>     call skipSeparators ;Skip leading separators
   480 0000355B E811400000          <1>     call isCharTerminator   ;If first char is terminator, go past and keep skipping
   481 00003560 7508                <1>     jnz .skipIfNotTerminator
   482 00003562 48FFC6              <1>     inc rsi
   483                              <1> .dontScanOffTerm:
   484 00003565 E890000000          <1>     call skipSeparators  ;Skip separators
   485                              <1> .skipIfNotTerminator:
   486 0000356A E8DA3F0000          <1>     call uppercaseCharAtPtr 
   487 0000356F 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   488 00003571 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   489 00003574 7519                <1>     jne .skipSettingDriveLetter
   490 00003576 48FFC6              <1>     inc rsi ;Goto next char
   491 00003579 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   492 0000357B 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   493 0000357D 50                  <1>     push rax    ;Save the 1 based drive letter
   494 0000357E E8BE3E0000          <1>     call getCDSNotJoin   ;Verifies if this drive letter is valid
   495 00003583 58                  <1>     pop rax
   496 00003584 7302                <1>     jnc .validDriveLetter
   497                              <1> .invalidDriveLetter:
   498 00003586 B2FF                <1>     mov dl, -1
   499                              <1> .validDriveLetter:
   500 00003588 AA                  <1>     stosb
   501 00003589 48FFC6              <1>     inc rsi ;Align pointers...
   502 0000358C 48FFCF              <1>     dec rdi 
   503                              <1> .skipSettingDriveLetter:
   504 0000358F 48FFCE              <1>     dec rsi
   505 00003592 48FFC7              <1>     inc rdi
   506                              <1> getFCBFilename:
   507                              <1> ;Input: rsi points to first char of filename
   508                              <1> ;       rdi points to storage buffer for filename
   509                              <1> ;       dl contains the signature if drive invalid
   510                              <1> ;Output:
   511                              <1> ;       Fields filled
   512                              <1> ;       al = Return signature
   513 00003595 B908000000          <1>     mov ecx, 8
   514 0000359A E815000000          <1>     call getFCBNameField
   515 0000359F 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   516 000035A2 750D                <1>     jne .noExt
   517 000035A4 B903000000          <1>     mov ecx, 3
   518 000035A9 48FFC6              <1>     inc rsi ;Skip this char
   519 000035AC E814000000          <1>     call forceFCBNameField
   520                              <1> .noExt:
   521 000035B1 88D0                <1>     mov al, dl  ;Store the return signature
   522                              <1>     return
    13                              <2> %%_ret:
    14 000035B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> 
   524                              <1> getFCBNameField:
   525                              <1> ;Checks if the field is appropriate before copying it
   526 000035B4 E8903F0000          <1>     call uppercaseCharAtPtr
   527 000035B9 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   528 000035BB 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   529 000035BE 48FFCE              <1>     dec rsi ;Point to previous char
   530                              <1>     return
    13                              <2> %%_ret:
    14 000035C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> .okName:
   532 000035C2 48FFCE              <1>     dec rsi ;Go back now a char
   533                              <1> forceFCBNameField:
   534                              <1> ;Forcefully copies the name from rsi to rdi
   535 000035C5 E87F3F0000          <1>     call uppercaseCharAtPtr
   536 000035CA 7226                <1>     jc .terminatingSpace
   537 000035CC 750D                <1>     jnz .notSep
   538 000035CE F605(8D040000)FF    <1>     test byte [fcbSpaceOk], -1
   539 000035D5 741B                <1>     jz .terminatingSpace
   540 000035D7 3C20                <1>     cmp al, " "
   541 000035D9 7517                <1>     jne .terminatingSpace
   542                              <1> .notSep:
   543 000035DB 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   544 000035DE FFC9                <1>     dec ecx
   545 000035E0 3C2A                <1>     cmp al, "*" ;Big wildcard?
   546 000035E2 7504                <1>     jne .notBigWildcard
   547 000035E4 B03F                <1>     mov al, "?"
   548 000035E6 F3AA                <1>     rep stosb
   549                              <1> .notBigWildcard:
   550 000035E8 AA                  <1>     stosb   ;Stores the uppercased char
   551 000035E9 3C3F                <1>     cmp al, "?"
   552 000035EB 75D8                <1>     jne forceFCBNameField
   553 000035ED 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   554 000035F0 EBD3                <1>     jmp short forceFCBNameField
   555                              <1> .terminatingSpace:
   556 000035F2 B020                <1>     mov al, " "
   557 000035F4 F3AA                <1>     rep stosb   ;Store remaining chars worth in spaces
   558 000035F6 48FFCE              <1>     dec rsi     ;Point back to terminating char
   559                              <1>     return
    13                              <2> %%_ret:
    14 000035F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> skipSeparators:
   562                              <1> ;Input: rsi -> String 
   563                              <1> ;Output: rsi -> First non separator type char
   564 000035FA AC                  <1>     lodsb
   565 000035FB E8803F0000          <1>     call isCharSeparator
   566 00003600 74F8                <1>     jz skipSeparators
   567 00003602 48FFCE              <1>     dec rsi
   568                              <1>     return
    13                              <2> %%_ret:
    14 00003605 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                                  %include "./src/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 00003606 51                  <1>     push rcx    ;Save file attributes on stack
    11 00003607 488D0DF70E0000      <1>     lea rcx, createMain
    12 0000360E C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with directory
    13 00003615 EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 00003617 BB16000000          <1>     mov ebx, dirInclusive
    21 0000361C F605(02070000)FF    <1>     test byte [dosInvoke], -1
    22 00003623 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 00003626 880D(FC060000)      <1>     mov byte [searchAttr], cl
    24 0000362C 488D0DB20D0000      <1>     lea rcx, openMain  
    25 00003633 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 00003634 4889D6              <1>     mov rsi, rdx
    28 00003637 E8C23F0000          <1>     call checkPathspecOK
    29 0000363C 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    31 0000363E 58                  <1>     pop rax
    32 0000363F B805000000          <1>     mov eax, errAccDen
    33 00003644 E9B1420000          <1>     jmp extErrExit
    34                              <1> .pathOk:
    35 00003649 E861420000          <1>     call dosCrit1Enter
    36 0000364E E8E21A0000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    37 00003653 E861420000          <1>     call dosCrit1Exit
    38 00003658 0F82D3000000        <1>     jc .exitBad
    39                              <1>     ;Now save variables
    40 0000365E E80A1A0000          <1>     call setCurrentSFT
    41 00003663 66891D(3A070000)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    42 0000366A E88F1B0000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    43 0000366F 0F82BC000000        <1>     jc .exitBad
    44 00003675 66891D(3C070000)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    45 0000367C 48893D(2A070000)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    46 00003683 0FB71D(3A070000)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    47 0000368A 881F                <1>     mov byte [rdi], bl  ;And open the file
    48                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    49 0000368C 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    50 0000368F 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    51 00003696 51                  <1>     push rcx    ;Save the procedure to call on stack
    52 00003697 E82FDEFFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    53 0000369C 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    54 0000369D 488D05410D0000      <1>     lea rax, openMain   ;Get EA for open procedure
    55 000036A4 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    56 000036AB 7334                <1>     jnc .proceedCall
    57                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    58                              <1> ;                              For Create New, Bad but handled later.
    59                              <1> ;If CF=CY => Path doesnt all exist:
    60                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    61                              <1> ;Now we check if we are creating or opening.
    62 000036AD 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    63 000036B0 7419                <1>     je .badFile ;Jmp to error if opening file that doesnt exist
    64 000036B2 F605(05070000)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    65 000036B9 741B                <1>     jz .badPathspec ;If not then exit bad path
    66                              <1>     ;Now check the path is not X:\<NUL>
    67 000036BB 8B0D(1E050000)      <1>     mov ecx, dword [buffer1]    ;Get the first four chars for comparison
    68 000036C1 30C9                <1>     xor cl, cl
    69 000036C3 81F9003A5C00        <1>     cmp ecx, 005C3A00h  ;If this is a null path, set file not found!
    70 000036C9 7516                <1>     jnz .proceedCall    ;Else, proceed.
    71                              <1> .badFile:   ;If trying to open a file that doesnt exit, error so!
    72 000036CB 58                  <1>     pop rax
    73 000036CC B802000000          <1>     mov eax, errFnf 
    74 000036D1 E95F000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    75                              <1> .badPathspec:   ;If the parent path doesnt exist, error thus.
    76 000036D6 58                  <1>     pop rax
    77 000036D7 B803000000          <1>     mov eax, errPnf
    78 000036DC E954000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    79                              <1> .proceedCall:
    80                              <1> ;If the pathspec exists, recall that for create, we truncate.
    81 000036E1 31C9                <1>     xor ecx, ecx    ;Default to empty device info word
    82 000036E3 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    83 000036E6 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    84 000036E7 750B                <1>     jne .callProc   ;Jump if we are creating
    85                              <1> ;al has the openmode here
    86 000036E9 A880                <1>     test al, openNoInherit      ;No Inherit bit set?
    87 000036EB 7407                <1>     jz .callProc
    88 000036ED 247F                <1>     and al, ~openNoInherit      ;Clear this bit
    89 000036EF B900100000          <1>     mov ecx, devNoInherit       ;Set the corresponding the device info bit 
    90                              <1> .callProc:
    91 000036F4 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    92 000036FA 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    93 00003700 51                  <1>     push rcx    ;Save the device word 
    94 00003701 FFD3                <1>     call rbx    ;Enter with open mode in 
    95 00003703 59                  <1>     pop rcx
    96 00003704 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    97 0000370B 7228                <1>     jc .exitBad2
    98 0000370D 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
    99 00003712 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   100 00003716 0FB705(3C070000)    <1>     movzx eax, word [currentHdl]
   101 0000371D FF15(1F010000)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
   102 00003723 66C705(3A070000)FF- <1>     mov word [currentNdx], -1       ;Now reset the index back to -1
   102 0000372B FF                  <1>
   103 0000372C E9BB410000          <1>     jmp extGoodExit ;Save ax and return OK
   104                              <1> .exitBad:
   105 00003731 FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   106 00003732 5B                  <1>     pop rbx ;Pop the word from the stack
   107 00003733 EB16                <1>     jmp short .exitBadCommon
   108                              <1> .exitBad2:
   109                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   110 00003735 488B35(2A070000)    <1>     mov rsi, qword [curHdlPtr]
   111 0000373C C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   112 0000373F 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
   113 00003746 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   114                              <1> .exitBadCommon:
   115 0000374B 66C705(3A070000)FF- <1>     mov word [currentNdx], -1
   115 00003753 FF                  <1>
   116 00003754 E9A1410000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   117                              <1> 
   118                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   119                              <1> ;Input: bx = file handle to close
   120 00003759 E8B71A0000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   121 0000375E 0F8296410000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   122 00003764 E804190000          <1>     call setCurrentSFT  ;Set this as the current SFT
   123 00003769 66813F0100          <1>     cmp word [rdi + sft.wNumHandles], 1 ;If this is last reference to sft
   124 0000376E 740A                <1>     je .killHdl ;always kill the handle!
   125                              <1>     ;Else if network file opened as FCB, avoid nuking JFT!
   126 00003770 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   127 00003774 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   128 00003776 3C70                <1>     cmp al, openNetFCBShr
   129 00003778 7408                <1>     je .notNetFCB
   130                              <1> .killHdl:
   131 0000377A E84A1A0000          <1>     call getJFTPtr  ;Remember, bx has handle number
   132 0000377F C607FF              <1>     mov byte [rdi], -1  ;Now free the JFT entry
   133                              <1> .notNetFCB:
   134 00003782 E890100000          <1>     call closeMain  ;Call close main!
   135 00003787 0F826D410000        <1>     jc extErrExit   ;If an error, exit through error exit
   136 0000378D B8003E0000          <1>     mov eax, 3E00h    ;Return value
   137 00003792 E955410000          <1>     jmp extGoodExit
   138                              <1> 
   139                              <1> readFileHdl:       ;ah = 3Fh, handle function
   140 00003797 488D3544110000      <1>     lea rsi, readBytes
   141                              <1> .common:
   142 0000379E E8721A0000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   143 000037A3 0F8251410000        <1>     jc extErrExit   ;Error code in al and exit
   144 000037A9 E8BF180000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   145 000037AE 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   146 000037B0 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   147 000037B6 488915(17040000)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   148 000037BD FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   149 000037BF 8F05(17040000)      <1>     pop qword [currentDTA]
   150 000037C5 0F822F410000        <1>     jc extErrExit   ;Error code in al and exit
   151 000037CB 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   152 000037CD E911410000          <1>     jmp extGoodExit2    ;and exit!
   153                              <1> 
   154                              <1> writeFileHdl:      ;ah = 40h, handle function
   155 000037D2 488D3563140000      <1>     lea rsi, writeBytes
   156 000037D9 E9C0FFFFFF          <1>     jmp readFileHdl.common
   157                              <1> 
   158                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   159                              <1> ;Here don't allow malformed chars unless it is a network CDS
   160                              <1> ;Allows deleting volume labels.
   161 000037DE BB16000000          <1>     mov ebx, dirInclusive    ;Search all files, dirs handled later
   162 000037E3 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   163 000037EA 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   164 000037ED 880D(FC060000)      <1>     mov byte [searchAttr], cl
   165 000037F3 4889D6              <1>     mov rsi, rdx
   166 000037F6 E8033E0000          <1>     call checkPathspecOK
   167 000037FB 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   168 000037FD 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   169                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   170 000037FF F605(02070000)FF    <1>     test byte [dosInvoke], -1
   171 00003806 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   172                              <1> .badPath:
   173 00003808 B805000000          <1>     mov eax, errAccDen
   174 0000380D E9E8400000          <1>     jmp extErrExit
   175                              <1> .pathOk:
   176 00003812 488D3D(1E050000)    <1>     lea rdi, buffer1
   177 00003819 52                  <1>     push rdx
   178 0000381A E8ACDCFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   179 0000381F 5A                  <1>     pop rdx
   180 00003820 0F82D4400000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   181                              <1>     ;In the case of a wildcard, recall this will return the first file
   182 00003826 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   183 0000382D 0F85C7400000        <1>     jnz extErrExit
   184 00003833 E8EE0A0000          <1>     call outerDeleteMain
   185 00003838 0F82BC400000        <1>     jc extErrExit
   186 0000383E E9A9400000          <1>     jmp extGoodExit
   187                              <1> 
   188                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   189                              <1> ;Input: ecx=0, edx=Position to seek to
   190                              <1> ;ecx may be non-zero for 64-bit IFS but currently DOS does not natively
   191                              <1> ; support them. INT 2Fh filesystems may have a tough time if they wish to
   192                              <1> ; use a 64 bit file pointer... They can try though!
   193                              <1> ;Output: If CF=NC: edx=0, eax=New position of file handle
   194                              <1> ;           Again, if network file, edx = Upper bytes of file hdl!
   195 00003843 E8CD190000          <1>     call getSFTPtr
   196 00003848 0F82AC400000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   197 0000384E 3C03                <1>     cmp al, 3
   198 00003850 720A                <1>     jb .validFunction
   199 00003852 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   200 00003857 E99E400000          <1>     jmp extErrExit
   201                              <1> .validFunction:
   202 0000385C 3C01                <1>     cmp al, 1
   203 0000385E 771A                <1>     ja .seekend
   204 00003860 7203                <1>     jb .seekset
   205                              <1> ;Here we are at seekcur, seek from current (signed)
   206 00003862 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   207                              <1> .seekset:
   208                              <1> ;Seek from the start (unsigned)
   209 00003865 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   210 00003868 31D2                <1>     xor edx, edx    ;All FAT files have 0 upper 32 bits! Set to 0!
   211                              <1>     ;We return the file position in eax anyway!
   212                              <1> .seekExit:
   213 0000386A E8AE3B0000          <1>     call getUserRegs    ;Get user regs in rsi
   214 0000386F 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   215 00003872 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   216 00003875 E969400000          <1>     jmp extGoodExit2    ;Return OK in eax 
   217                              <1> .seekend:
   218                              <1> ;Here we are at seekend, seek from end (signed)
   219 0000387A 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   220 00003880 7505                <1>     jnz .netCheck
   221                              <1> .proceedDisk:
   222 00003882 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   223 00003885 EBDE                <1>     jmp short .seekset
   224                              <1> .netCheck:
   225 00003887 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB  ;Is this a FCB opened file?
   226 0000388D 75F3                <1>     jnz .proceedDisk
   227 0000388F 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   228                              <1>     ;Check its share mode
   229 00003893 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   230 00003898 3D40000000          <1>     cmp eax, openDenNoShr  ;Don't deny? Proceed
   231 0000389D 7407                <1>     je .netSeek
   232 0000389F 3D30000000          <1>     cmp eax, openDenRdShr
   233 000038A4 75DC                <1>     jne .proceedDisk
   234                              <1> .netSeek:
   235 000038A6 B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   236 000038AB CD2F                <1>     int 2Fh
   237 000038AD 73BB                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   238 000038AF E946400000          <1>     jmp extErrExit
   239                              <1> 
   240                              <1> 
   241                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   242 000038B4 3C01                <1>     cmp al, 1
   243 000038B6 761F                <1>     jbe .subFuncOk
   244 000038B8 B801000000          <1>     mov eax, errInvFnc
   245                              <1> .chmodError:
   246                              <1> ;Call with ax = errorcode
   247 000038BD C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   248 000038C4 C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   249 000038CB C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
   250 000038D2 E923400000          <1>     jmp extErrExit
   251                              <1> .subFuncOk:
   252 000038D7 4889D6              <1>     mov rsi, rdx
   253 000038DA 89C3                <1>     mov ebx, eax    ;Store function code in bl
   254 000038DC 53                  <1>     push rbx
   255 000038DD 51                  <1>     push rcx
   256 000038DE E81B3D0000          <1>     call checkPathspecOK
   257 000038E3 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   258                              <1> .badPath:
   259 000038E5 59                  <1>     pop rcx
   260 000038E6 5B                  <1>     pop rbx
   261 000038E7 B805000000          <1>     mov eax, errAccDen
   262 000038EC EBCF                <1>     jmp short .chmodError
   263                              <1> .pathOk:
   264 000038EE E8E53D0000          <1>     call checkPathNet 
   265 000038F3 74F0                <1>     jz .badPath ;Or Net paths
   266 000038F5 E8BF3D0000          <1>     call scanPathWC
   267 000038FA 72E9                <1>     jc .badPath ;Dont allow wildcards
   268 000038FC 488D3D(1E050000)    <1>     lea rdi, buffer1
   269 00003903 52                  <1>     push rdx
   270 00003904 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   271 0000390B E8BBDBFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   272 00003910 5A                  <1>     pop rdx
   273 00003911 59                  <1>     pop rcx
   274 00003912 5B                  <1>     pop rbx
   275 00003913 0F82E13F0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   276                              <1>     ;In the case of a wildcard, recall this will return the first file
   277 00003919 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   278 00003920 759B                <1>     jnz .chmodError
   279                              <1> 
   280 00003922 E8623A0000          <1>     call testCDSNet
   281 00003927 730C                <1>     jnc .notNet
   282 00003929 750A                <1>     jnz .notNet ;This type of net ok
   283 0000392B B805000000          <1>     mov eax, errAccDen
   284 00003930 E9C53F0000          <1>     jmp extErrExit
   285                              <1> .notNet:
   286 00003935 84DB                <1>     test bl, bl
   287 00003937 7526                <1>     jnz .setAttribs
   288                              <1>     ;Get attribs here
   289 00003939 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   290 0000393F 7412                <1>     jz .getDiskAttribs
   291 00003941 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   292 00003946 CD2F                <1>     int 2Fh
   293 00003948 0F82AC3F0000        <1>     jc extErrExit
   294 0000394E E9993F0000          <1>     jmp extGoodExit
   295                              <1> .getDiskAttribs:
   296 00003953 0FB605(65060000)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   297 0000395A E98D3F0000          <1>     jmp extGoodExit
   298                              <1> 
   299                              <1> .setAttribs:
   300                              <1>     ;Set attribs here
   301 0000395F 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   302 00003965 7417                <1>     jz .setDiskAttribs
   303 00003967 0FB7C9              <1>     movzx ecx, cx
   304 0000396A 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   305 0000396B B80E110000          <1>     mov eax, 110Eh
   306 00003970 CD2F                <1>     int 2Fh
   307 00003972 59                  <1>     pop rcx
   308 00003973 0F82813F0000        <1>     jc extErrExit
   309 00003979 E96E3F0000          <1>     jmp extGoodExit
   310                              <1> .setDiskAttribs:
   311 0000397E E84D090000          <1>     call checkExclusiveOwnFile
   312 00003983 730A                <1>     jnc .okToSet
   313 00003985 B820000000          <1>     mov eax, errShrVio
   314 0000398A E96B3F0000          <1>     jmp extErrExit
   315                              <1> .okToSet:
   316 0000398F E81B3F0000          <1>     call dosCrit1Enter
   317 00003994 E82DEAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   318 00003999 722D                <1>     jc .setErrorNoFlush
   319 0000399B F6C118              <1>     test cl, attrFileVolLbl | attrFileDir
   320 0000399E 740A                <1>     jz .set
   321 000039A0 B805000000          <1>     mov eax, errAccDen
   322 000039A5 E91E000000          <1>     jmp .setErrorNoFlush
   323                              <1> .set:
   324 000039AA 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   325 000039AD 80E518              <1>     and ch, (attrFileVolLbl | attrFileDir)    ;Keep these two bits
   326 000039B0 08E9                <1>     or cl, ch
   327 000039B2 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   328 000039B5 E87FCDFFFF          <1>     call flushAllBuffersForDPB
   329 000039BA 720C                <1>     jc .setError
   330 000039BC E8F83E0000          <1>     call dosCrit1Exit
   331 000039C1 31C0                <1>     xor eax, eax
   332 000039C3 E9243F0000          <1>     jmp extGoodExit
   333                              <1> .setError:
   334                              <1> 
   335                              <1> .setErrorNoFlush:
   336 000039C8 E8EC3E0000          <1>     call dosCrit1Exit
   337 000039CD E9283F0000          <1>     jmp extErrExit
   338                              <1> 
   339                              <1> duplicateHandle:   ;ah = 45h, handle function
   340                              <1> ;Input: bx = Handle to duplicate
   341                              <1> ;Output: If ok then ax = New handle
   342 000039D2 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   343 000039D5 E824180000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   344                              <1> .duplicateCommon:
   345 000039DA 0F821A3F0000        <1>     jc extErrExit   ;Exit if no space
   346 000039E0 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   347 000039E3 93                  <1>     xchg eax, ebx
   348 000039E4 E82C180000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   349 000039E9 0F820B3F0000        <1>     jc extErrExit
   350 000039EF 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   351 000039F2 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   352 000039F8 750A                <1>     jnz .netFile
   353 000039FA E86E160000          <1>     call setCurrentSFT  ;Set rdi to the current SFT
   354 000039FF E8900A0000          <1>     call openDriverMux
   355                              <1> .netFile:
   356 00003A04 E8C0170000          <1>     call getJFTPtr
   357 00003A09 8A1F                <1>     mov bl, byte [rdi]
   358 00003A0B 881E                <1>     mov byte [rsi], bl
   359 00003A0D E9DA3E0000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   360                              <1> 
   361                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   362                              <1> ;Input: bx = Handle to duplicate
   363                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   364                              <1>     ;First we close cx if it exists
   365 00003A12 0FB7C9              <1>     movzx ecx, cx
   366 00003A15 53                  <1>     push rbx
   367 00003A16 51                  <1>     push rcx
   368 00003A17 89CB                <1>     mov ebx, ecx
   369 00003A19 E83BFDFFFF          <1>     call closeFileHdl   ;Close handle 
   370 00003A1E 5B                  <1>     pop rbx
   371 00003A1F 58                  <1>     pop rax
   372 00003A20 E8A4170000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   373 00003A25 EBB3                <1>     jmp short duplicateHandle.duplicateCommon
   374                              <1> 
   375                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   376                              <1> ;Input: cx = Search Attributes, cl only used
   377                              <1> ;       rdx = Ptr to path to file to look for
   378                              <1> ;       al = Document as needing to be 0 for now
   379                              <1> ;Return:
   380                              <1> ;Data in the DTA or error through AX with CF=CY
   381                              <1> ;CAVEATS!
   382                              <1> ;DTA:attribFnd = 40h => Char dev
   383                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   384 00003A27 880D(FC060000)      <1>     mov byte [searchAttr], cl
   385 00003A2D 4889D6              <1>     mov rsi, rdx
   386 00003A30 E8C93B0000          <1>     call checkPathspecOK
   387 00003A35 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   388 00003A37 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   389                              <1> .badPath:
   390 00003A39 B805000000          <1>     mov eax, errAccDen  ;Gets xlat to errNoFil
   391 00003A3E E9B73E0000          <1>     jmp extErrExit
   392                              <1> .pathspecOk:
   393 00003A43 FF35(17040000)      <1>     push qword [currentDTA]
   394 00003A49 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   395 00003A50 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   396 00003A57 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   397 00003A5E E868DAFFFF          <1>     call getFilePath
   398                              <1> .findfileExit:
   399 00003A63 8F05(17040000)      <1>     pop qword [currentDTA]
   400 00003A69 0F828B3E0000        <1>     jc extErrExit
   401 00003A6F 488D3D(2F060000)    <1>     lea rdi, dosffblock
   402 00003A76 57                  <1>     push rdi
   403 00003A77 E8B0D9FFFF          <1>     call setupFFBlock
   404 00003A7C 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   405 00003A7D 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
   406 00003A84 B92B000000          <1>     mov ecx, ffBlock_size
   407 00003A89 F3A4                <1>     rep movsb   ;Copy the whole block. 
   408                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   409 00003A8B 31C0                <1>     xor eax, eax    ;Return value
   410 00003A8D E95A3E0000          <1>     jmp extGoodExit ;Exit well
   411                              <1> 
   412                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   413                              <1> ;Input: DTA has the find first block from the previous search
   414 00003A92 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
   415 00003A99 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   416 00003AA0 B92B000000          <1>     mov ecx, ffBlock_size
   417 00003AA5 F3A4                <1>     rep movsb
   418 00003AA7 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
   419 00003AAD 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   420 00003AB4 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   421 00003ABB E846D5FFFF          <1>     call findNextMain
   422 00003AC0 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   423                              <1> 
   424                              <1> renameFile:        ;ah = 56h
   425                              <1> ;Input: rdx -> Filespec to rename
   426                              <1> ;       rdi -> New filespec
   427                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   428 00003AC2 4889D6              <1>     mov rsi, rdx
   429 00003AC5 BB16000000          <1>     mov ebx, dirInclusive
   430 00003ACA F605(02070000)FF    <1>     test byte [dosInvoke], -1
   431 00003AD1 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   432 00003AD4 880D(FC060000)      <1>     mov byte [searchAttr], cl
   433                              <1>     ;Step 0, verify both paths provided are valid
   434 00003ADA E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   435 00003ADF 7249                <1>     jc .accDenError
   436 00003AE1 56                  <1>     push rsi
   437 00003AE2 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   438 00003AE5 E84A000000          <1>     call .renamePathCheck
   439 00003AEA 5E                  <1>     pop rsi
   440 00003AEB 723D                <1>     jc .accDenError
   441                              <1>     ;Now we canonicalise the filenames to make life easy
   442 00003AED 56                  <1>     push rsi
   443 00003AEE 4889FE              <1>     mov rsi, rdi
   444 00003AF1 488D3D(9E050000)    <1>     lea rdi, buffer2
   445 00003AF8 E84EDAFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   446 00003AFD 5E                  <1>     pop rsi
   447 00003AFE 722A                <1>     jc .accDenError
   448                              <1>     ;Now test if first file exists.
   449 00003B00 FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   450 00003B06 8F05(26060000)      <1>     pop qword [fname2Ptr]
   451 00003B0C 488D3D(1E050000)    <1>     lea rdi, buffer1
   452 00003B13 E833DAFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   453 00003B18 7210                <1>     jc .accDenError 
   454 00003B1A E893030000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   455 00003B1F 0F82D53D0000        <1>     jc extErrExit
   456 00003B25 E9C23D0000          <1>     jmp extGoodExit
   457                              <1> .accDenError:
   458 00003B2A B805000000          <1>     mov eax, errAccDen
   459 00003B2F E9C63D0000          <1>     jmp extErrExit
   460                              <1> .renamePathCheck:
   461                              <1> ;Checks if the pathspec in rsi is OK
   462 00003B34 56                  <1>     push rsi
   463 00003B35 57                  <1>     push rdi
   464 00003B36 E8C33A0000          <1>     call checkPathspecOK
   465 00003B3B 5F                  <1>     pop rdi
   466 00003B3C 5E                  <1>     pop rsi
   467 00003B3D 730D                <1>     jnc .pathOk     ;Path ok 
   468 00003B3F 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   469                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   470 00003B41 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   471 00003B48 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   472                              <1> .badPath:
   473 00003B4A F9                  <1>     stc
   474                              <1>     return
    13                              <2> %%_ret:
    14 00003B4B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   475                              <1> .pathOk:
   476 00003B4C F8                  <1>     clc
   477                              <1>     return
    13                              <2> %%_ret:
    14 00003B4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   478                              <1> 
   479                              <1> getSetFileDateTime: ;ah = 57h
   480 00003B4E 3C01                <1>     cmp al, 1
   481 00003B50 760A                <1>     jbe .oksubfun
   482 00003B52 B801000000          <1>     mov eax, errInvFnc
   483 00003B57 E99E3D0000          <1>     jmp extErrExit
   484                              <1> .oksubfun:
   485 00003B5C E8B4160000          <1>     call getSFTPtr  ;Preserves al unless error returned
   486 00003B61 0F82933D0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   487 00003B67 3C01                <1>     cmp al, 1
   488 00003B69 7426                <1>     je .setTimeDate
   489                              <1>     ;Here we get the Time/Date
   490 00003B6B E83F3D0000          <1>     call dosCrit1Enter
   491 00003B70 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   492 00003B74 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   493 00003B78 E83C3D0000          <1>     call dosCrit1Exit
   494 00003B7D E89B380000          <1>     call getUserRegs
   495 00003B82 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   496 00003B86 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   497 00003B8A 31C0                <1>     xor eax, eax
   498 00003B8C E95B3D0000          <1>     jmp extGoodExit
   499                              <1> .setTimeDate:
   500                              <1>     ;Here we set the Time/Date
   501 00003B91 E8193D0000          <1>     call dosCrit1Enter
   502 00003B96 66894F13            <1>     mov word [rdi + sft.wTime], cx
   503 00003B9A 66895715            <1>     mov word [rdi + sft.wDate], dx
   504 00003B9E 31C0                <1>     xor eax, eax
   505 00003BA0 FF15(2F010000)      <1>     call qword [updateDirShare]
   506                              <1>     ;Clear the flag to indicate that the dir needs to be updated and dont 
   507                              <1>     ; further change the file time since we have manually overridden it 
   508                              <1>     ; with the time specified
   509 00003BA6 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~devDiskNoFlush  ;Clear flag to sync
   510 00003BAC 66814F050040        <1>     or word [rdi + sft.wDeviceInfo], devDiskNoDTonClose    ;Force it to this time
   511 00003BB2 E8023D0000          <1>     call dosCrit1Exit
   512 00003BB7 31C0                <1>     xor eax, eax
   513 00003BB9 E92E3D0000          <1>     jmp extGoodExit
   514                              <1> 
   515                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   516                              <1> ;Uses the clock to do it's bidding
   517                              <1> ;cx = file attribute 
   518                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   519                              <1> ;       filename
   520 00003BBE 66F7C1D8FF          <1>     test cx, ~(attrFileArchive | attrFileSys | attrFileHidden | attrFileRO)
   521 00003BC3 740A                <1>     jz .validAttribs
   522 00003BC5 B805000000          <1>     mov eax, errAccDen
   523 00003BCA E92B3D0000          <1>     jmp extErrExit
   524                              <1> .validAttribs:
   525 00003BCF 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   526 00003BD3 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   527 00003BD6 B935000000          <1>     mov ecx, MAX_PSPEC
   528 00003BDB 31C0                <1>     xor eax, eax
   529 00003BDD 4889D7              <1>     mov rdi, rdx
   530 00003BE0 F2AE                <1>     repne scasb
   531 00003BE2 85C9                <1>     test ecx, ecx
   532 00003BE4 750A                <1>     jnz .nullFnd
   533                              <1>     ;Bad path
   534 00003BE6 B803000000          <1>     mov eax, errPnf
   535 00003BEB E90A3D0000          <1>     jmp extErrExit
   536                              <1> .nullFnd:
   537 00003BF0 48FFCF              <1>     dec rdi
   538 00003BF3 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   539 00003BF7 E842390000          <1>     call swapPathSeparator
   540 00003BFC 7403                <1>     jz .pathsepFnd
   541                              <1>     ;If no pathsep found, force one at rdi
   542 00003BFE B05C                <1>     mov al, "\"
   543 00003C00 AA                  <1>     stosb
   544                              <1> .pathsepFnd:
   545 00003C01 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   546                              <1> .fileCreateLoop:
   547 00003C04 55                  <1>     push rbp
   548 00003C05 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   549 00003C0A 5D                  <1>     pop rbp
   550 00003C0B 0FB7C1              <1>     movzx eax, cx
   551 00003C0E 0FB7D2              <1>     movzx edx, dx
   552 00003C11 C1E010              <1>     shl eax, 10h
   553 00003C14 09D0                <1>     or eax, edx  ;Add the bits of dx too
   554 00003C16 E831000000          <1>     call .writeNybbles
   555 00003C1B 31C0                <1>     xor eax, eax
   556 00003C1D AA                  <1>     stosb   ;Store terminating null
   557 00003C1E 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   558 00003C21 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   559 00003C24 55                  <1>     push rbp
   560 00003C25 E85C000000          <1>     call createNewFile
   561 00003C2A 5D                  <1>     pop rbp
   562 00003C2B 0F83BB3C0000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   563 00003C31 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   564 00003C38 3D05000000          <1>     cmp eax, errAccDen
   565 00003C3D 74C5                <1>     je .fileCreateLoop
   566 00003C3F 3D50000000          <1>     cmp eax, errFilExist
   567 00003C44 74BE                <1>     je .fileCreateLoop
   568 00003C46 F9                  <1>     stc
   569 00003C47 E9AE3C0000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   570                              <1> .writeNybbles:
   571                              <1> ;Write the nybbles of eax at rdi
   572 00003C4C B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   573                              <1> .wnLp:
   574 00003C51 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   575 00003C54 50                  <1>     push rax
   576 00003C55 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   577 00003C5A 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   578 00003C5F 3D39000000          <1>     cmp eax, '9'
   579 00003C64 7605                <1>     jbe .notExtDigit
   580 00003C66 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   581                              <1> .notExtDigit:
   582 00003C6B AA                  <1>     stosb   ;Store the digit
   583 00003C6C 58                  <1>     pop rax
   584 00003C6D FFC9                <1>     dec ecx
   585 00003C6F 75E0                <1>     jnz .wnLp
   586                              <1>     return
    13                              <2> %%_ret:
    14 00003C71 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   587                              <1> 
   588                              <1> .uniqueTimeGet:
   589 00003C72 E856F3FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   590 00003C77 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   591 00003C7E 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   592                              <1>     return
    13                              <2> %%_ret:
    14 00003C85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   593                              <1> 
   594                              <1> createNewFile:     ;ah = 5Bh
   595 00003C86 51                  <1>     push rcx    ;Save file attributes on stack
   596 00003C87 488D0D62080000      <1>     lea rcx, createNewMain
   597 00003C8E C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with dir (handled later)
   598 00003C95 E99AF9FFFF          <1>     jmp openFileHdl.openCommon
   599                              <1> 
   600                              <1> lockUnlockFile:    ;ah = 5Ch
   601                              <1> ;ah = 5Ch
   602                              <1> ;al = subfunction
   603                              <1> ;       00h lock region of file
   604                              <1> ;       01h unlock region of file
   605                              <1> ;ebx = file handle
   606                              <1> ;ecx = start offset of region within file
   607                              <1> ;edi = length of region in bytes
   608 00003C9A 3C01                <1>     cmp al, 1
   609 00003C9C 7757                <1>     ja .badFunction
   610 00003C9E 57                  <1>     push rdi
   611 00003C9F E88D150000          <1>     call derefSFTPtr
   612 00003CA4 730B                <1>     jnc .validHdl
   613 00003CA6 58                  <1>     pop rax ;Discard the qword on the stack
   614 00003CA7 B806000000          <1>     mov eax, errBadHdl
   615 00003CAC E9493C0000          <1>     jmp extErrExit
   616                              <1> .validHdl:
   617 00003CB1 84C0                <1>     test al, al ;Check if al = 0
   618 00003CB3 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   619 00003CB4 7424                <1>     jz .lockFileRegion
   620 00003CB6 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   621 00003CBC 740B                <1>     jz .unlockShare ;Jump if a local file only
   622 00003CBE 50                  <1>     push rax
   623 00003CBF B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   624 00003CC4 CD2F                <1>     int 2Fh
   625 00003CC6 5B                  <1>     pop rbx
   626 00003CC7 EB06                <1>     jmp short .exitSelect
   627                              <1> .unlockShare:
   628 00003CC9 FF15(F7000000)      <1>     call qword [unlockFileShare]    ;Call share hook
   629                              <1> .exitSelect:
   630 00003CCF 0F82253C0000        <1>     jc extErrExit
   631 00003CD5 E9123C0000          <1>     jmp extGoodExit
   632                              <1> .lockFileRegion:
   633 00003CDA 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   634 00003CE0 740B                <1>     jz .lockShare   ;Jump if a local file only
   635 00003CE2 50                  <1>     push rax
   636 00003CE3 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   637 00003CE8 CD2F                <1>     int 2Fh
   638 00003CEA 5B                  <1>     pop rbx
   639 00003CEB EBE2                <1>     jmp short .exitSelect
   640                              <1> .lockShare:
   641 00003CED FF15(EF000000)      <1>     call qword [lockFileShare]  ;Call share hook
   642 00003CF3 EBDA                <1>     jmp short .exitSelect
   643                              <1> .badFunction:
   644 00003CF5 B801000000          <1>     mov eax, errInvFnc
   645 00003CFA 668905(0B040000)    <1>     mov word [errorExCde], ax
   646 00003D01 E9F43B0000          <1>     jmp extErrExit
   647                              <1> 
   648                              <1> setHandleCount:    ;ah = 67h
   649                              <1> ;Input: bx = Size of new file handle table for process
   650                              <1> ;Output: CF=NC -> Ok to make more handles
   651                              <1> ;        CF=CY -> ax = Error code
   652                              <1> ;Five cases to consider:
   653                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   654                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   655                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   656                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   657                              <1> ;   Special case below, cannot be enacted directly by caller.
   658                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   659 00003D06 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   660 00003D09 488B2D(1F040000)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   661 00003D10 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   662 00003D14 7765                <1>     ja short .moreHdlsReq
   663 00003D16 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   664 00003D1B 771A                <1>     ja short .reduceExternal
   665                              <1>     ;Here if 20 handles or less requested
   666 00003D1D 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   667 00003D23 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   668 00003D25 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   669 00003D27 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   670                              <1> .exitGood:
   671 00003D2D E9BA3B0000          <1>     jmp extGoodExit
   672                              <1> .exitBad:
   673 00003D32 E9C33B0000          <1>     jmp extErrExit
   674                              <1> .reduceExternal:
   675                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   676                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   677                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   678                              <1> ; and failing that, it will free it and then allocate a new block.
   679 00003D37 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   680 00003D3B E8E9000000          <1>     call .checkOpenHandles
   681 00003D40 72F0                <1>     jc short .exitBad
   682                              <1>     ;Recall ebx has the numebr of handles here
   683 00003D42 E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   684 00003D47 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   685 00003D4B EBE0                <1>     jmp short .exitGood
   686                              <1> .reduceFree:
   687                              <1> ;Entered once we know that we have an external block
   688                              <1> ;Now we close all handles above JFT size
   689 00003D4D 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   690 00003D51 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   691 00003D54 E8D0000000          <1>     call .checkOpenHandles
   692 00003D59 72D7                <1>     jc short .exitBad
   693 00003D5B BB14000000          <1>     mov ebx, dfltJFTsize
   694 00003D60 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   695                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   696 00003D62 E8B9000000          <1>     call .copyBlock
   697                              <1>     ;Now we can free the old block
   698 00003D67 4989F0              <1>     mov r8, rsi
   699 00003D6A 53                  <1>     push rbx
   700 00003D6B E8E01B0000          <1>     call freeMemory
   701 00003D70 5B                  <1>     pop rbx
   702 00003D71 72BF                <1>     jc short .exitBad
   703 00003D73 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   704 00003D77 31C0                <1>     xor eax, eax
   705                              <1> .exitGood2:
   706 00003D79 EBB2                <1>     jmp short .exitGood
   707                              <1> .moreHdlsReq:
   708 00003D7B 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   709 00003D81 7507                <1>     jne short .okToExpand
   710 00003D83 B801000000          <1>     mov eax, errInvFnc
   711                              <1> .exitBad2:
   712 00003D88 EBA8                <1>     jmp short .exitBad
   713                              <1> .okToExpand:
   714                              <1> ;Need to check if we are external and reallocating. 
   715                              <1> ;   If we are, can we realloc or do we need to free and save?
   716 00003D8A 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   717 00003D90 762E                <1>     jbe short .moreFromJFT
   718 00003D92 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   719 00003D96 E83C000000          <1>     call .reallocBlock
   720 00003D9B 7390                <1>     jnc short .exitGood
   721 00003D9D E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   722 00003DA2 728E                <1>     jc short .exitBad
   723 00003DA4 4989F0              <1>     mov r8, rsi ;Free the source block
   724 00003DA7 53                  <1>     push rbx
   725 00003DA8 57                  <1>     push rdi    ;Save the new pointer here
   726 00003DA9 55                  <1>     push rbp
   727 00003DAA E8A11B0000          <1>     call freeMemory
   728 00003DAF 5D                  <1>     pop rbp
   729 00003DB0 5F                  <1>     pop rdi
   730 00003DB1 5B                  <1>     pop rbx
   731 00003DB2 7317                <1>     jnc short .freeOk ;Free'd the original block
   732 00003DB4 50                  <1>     push rax    ;Save error code on stack
   733 00003DB5 4989F8              <1>     mov r8, rdi ;Free the new block
   734 00003DB8 E8931B0000          <1>     call freeMemory
   735 00003DBD 58                  <1>     pop rax
   736 00003DBE EBC8                <1>     jmp short .exitBad2
   737                              <1> .moreFromJFT:
   738 00003DC0 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   739 00003DC4 E826000000          <1>     call .getBlock
   740 00003DC9 72BD                <1>     jc short .exitBad2
   741                              <1> .freeOk:
   742 00003DCB 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   743 00003DCF 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   744 00003DD3 31C0                <1>     xor eax, eax
   745 00003DD5 EBA2                <1>     jmp short .exitGood2
   746                              <1> .reallocBlock:
   747                              <1> ;Input:
   748                              <1> ;   rsi -> Source block to reallocate
   749                              <1> ;   ebx = Number of handles
   750                              <1> ;   rbp -> Current PSP
   751                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   752                              <1> ;                 ebx = Number of handles
   753                              <1> ;        CF=CY => Error, EAX has error code
   754 00003DD7 56                  <1>     push rsi ;Save external pointer on stack
   755 00003DD8 53                  <1>     push rbx    ;Save number of handles on stack
   756 00003DD9 55                  <1>     push rbp
   757 00003DDA 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   758 00003DE0 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   759 00003DE3 4989F0              <1>     mov r8, rsi
   760 00003DE6 E86D1C0000          <1>     call reallocMemory
   761 00003DEB 5D                  <1>     pop rbp
   762 00003DEC 5B                  <1>     pop rbx
   763 00003DED 5E                  <1>     pop rsi ;Get external pointer back in rsi
   764                              <1>     return
    13                              <2> %%_ret:
    14 00003DEE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   765                              <1> .getBlock:
   766                              <1> ;rsi -> Source block for copy 
   767                              <1> ;ebx = Number of new handles
   768                              <1> ;Output: rsi and ebx as before
   769                              <1> ;        rdi -> New block
   770                              <1> ;IF CF=CY, bad exit
   771 00003DEF 53                  <1>     push rbx    ;bx has the number of handles we want
   772 00003DF0 56                  <1>     push rsi
   773 00003DF1 55                  <1>     push rbp
   774 00003DF2 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   775 00003DF8 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   776 00003DFB 89D9                <1>     mov ecx, ebx
   777 00003DFD C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   778 00003E00 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   779 00003E01 E846190000          <1>     call allocateMemory ;Allocate memory 
   780 00003E06 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   781 00003E07 5D                  <1>     pop rbp ;Get the PSP pointer back
   782 00003E08 5E                  <1>     pop rsi ;Get the source pointer back
   783 00003E09 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   784                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003E0A 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003E0C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   785 00003E0D 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   786 00003E10 57                  <1>     push rdi
   787 00003E11 31C0                <1>     xor eax, eax
   788 00003E13 FFC8                <1>     dec eax
   789 00003E15 F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   790 00003E17 5F                  <1>     pop rdi
   791 00003E18 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   792 00003E1A E801000000          <1>     call .copyBlock ;Copy all the handles over
   793                              <1>     return
    13                              <2> %%_ret:
    14 00003E1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   794                              <1> .copyBlock:
   795                              <1> ;Input: rsi -> Source block
   796                              <1> ;       rdi -> Destination block
   797                              <1> ;       ecx = Number of handles to copy
   798 00003E20 56                  <1>     push rsi
   799 00003E21 57                  <1>     push rdi
   800 00003E22 51                  <1>     push rcx
   801 00003E23 F3A4                <1>     rep movsb
   802 00003E25 59                  <1>     pop rcx
   803 00003E26 5F                  <1>     pop rdi
   804 00003E27 5E                  <1>     pop rsi
   805                              <1>     return
    13                              <2> %%_ret:
    14 00003E28 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   806                              <1> .checkOpenHandles:
   807                              <1> ;Checks for open handles in the range that is to be freed.
   808                              <1> ;If any found, error exit
   809                              <1> ;Input: rsi -> Where to start searching
   810 00003E29 56                  <1>     push rsi
   811 00003E2A 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   812                              <1> .cohLoop:
   813 00003E2E 803EFF              <1>     cmp byte [rsi], -1
   814 00003E31 7509                <1>     jne .checkOpenHandlesBadExit
   815 00003E33 48FFC6              <1>     inc rsi
   816 00003E36 FFC9                <1>     dec ecx
   817 00003E38 75F4                <1>     jnz .cohLoop
   818 00003E3A 5E                  <1>     pop rsi
   819                              <1>     return
    13                              <2> %%_ret:
    14 00003E3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   820                              <1> .checkOpenHandlesBadExit:
   821 00003E3C B804000000          <1>     mov eax, errNhl
   822 00003E41 F9                  <1>     stc
   823 00003E42 5E                  <1>     pop rsi
   824                              <1>     return
    13                              <2> %%_ret:
    14 00003E43 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   825                              <1> 
   826                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   827                              <1>     ;Input: bx = File to flush
   828 00003E44 E8CC130000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   829 00003E49 0F82AB3A0000        <1>     jc extErrExit
   830 00003E4F E819120000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   831                              <1>     ;Now we check if the device is a char, disk or net file and commit
   832 00003E54 E811000000          <1>     call commitMain
   833 00003E59 0F829B3A0000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   834                              <1> .exitOk:
   835 00003E5F 30C0                <1>     xor al, al
   836 00003E61 E8B7350000          <1>     call getUserRegs
   837 00003E66 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   838                              <1>     return
    13                              <2> %%_ret:
    14 00003E69 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   839                              <1> 
   840                              <1> ;-----------------------------------:
   841                              <1> ;       Main File IO Routines       :
   842                              <1> ;-----------------------------------:
   843                              <1> commitMain:
   844                              <1> ;Commits the current SFT 
   845 00003E6A E806120000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   846 00003E6F 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
   847 00003E73 F7C3C0000000        <1>     test ebx, devCharDev | devDiskNoFlush
   848                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003E79 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003E7B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   849 00003E7C F7C300800000        <1>     test ebx, devRedir
   850 00003E82 7408                <1>     jz .notNet
   851                              <1> ;Commit file net redir call and exit
   852 00003E84 B807110000          <1>     mov eax, 1107h
   853 00003E89 CD2F                <1>     int 2Fh
   854                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003E8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   855                              <1> .notNet:
   856 00003E8C E81E3A0000          <1>     call dosCrit1Enter  ;Enter to own the disk
   857 00003E91 E8193A0000          <1>     call dosCrit1Enter  ;Enter for the flush file
   858 00003E96 E89CE5FFFF          <1>     call updateSFTDateTimeFields    ;Update the SFT Time fields
   859 00003E9B B8FFFFFFFF          <1>     mov eax, -1         ;Set a "large" count for open handles
   860 00003EA0 E8A3090000          <1>     call flushFile      ;Now file gets flushed and exit critical section
   861 00003EA5 9C                  <1>     pushfq
   862 00003EA6 E8CCE7FFFF          <1>     call openSFT        ;Now, reopen the file in the driver 
   863 00003EAB 9D                  <1>     popfq
   864 00003EAC E8083A0000          <1>     call dosCrit1Exit   ;Release the disk
   865                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003EB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   866                              <1>     
   867                              <1> renameMain:
   868                              <1> ;Wildcards in the source filename match anything.
   869                              <1> ;Wildcards in the destination filename indicate that we retain the
   870                              <1> ; char in the source filename.
   871                              <1> ;All * wildcards are expanded to ? at this point
   872                              <1> ;
   873                              <1> ;Input:
   874                              <1> ; filenamePtr1 -> Source path + filename pattern
   875                              <1> ; filenamePtr2 -> New path + filename pattern
   876                              <1> ; workingCDS -> CDS for drive we are considering (set by first pathspec)
   877                              <1> ; searchAttr = Set to search attributes (inclusive or by request if netinvoke)
   878 00003EB2 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   879 00003EB9 E8CB340000          <1>     call testCDSNet ;CF=NC => Not net
   880 00003EBE 7308                <1>     jnc .notNet
   881 00003EC0 B811110000          <1>     mov eax, 1111h
   882 00003EC5 CD2F                <1>     int 2Fh
   883                              <1>     return
    13                              <2> %%_ret:
    14 00003EC7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   884                              <1> .notNet:
   885                              <1> ;First check if both drives are on the same disk.
   886 00003EC8 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Errors in the disk subsystem
   887 00003ECF 8A05(1E050000)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   888 00003ED5 8A25(9E050000)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   889 00003EDB 38E0                <1>     cmp al, ah
   890 00003EDD 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   891 00003EDF B811000000          <1>     mov eax, errDevUnk
   892 00003EE4 F9                  <1>     stc
   893                              <1>     return
    13                              <2> %%_ret:
    14 00003EE5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   894                              <1> .sameDrive:
   895 00003EE6 E8C4390000          <1>     call dosCrit1Enter
   896                              <1>     ;mov byte [delChar], 0E5h    ;Set the delchar to 0E5h
   897 00003EEB C605(07070000)FF    <1>     mov byte [openCreate], -1   ;We are creating a new file! 
   898                              <1> ;Check if either pathsepc is simply X:\,0
   899                              <1> ; If they are, return fail as we cannot rename the root dir
   900 00003EF2 8B05(1E050000)      <1>     mov eax, dword [buffer1]
   901 00003EF8 30C0                <1>     xor al, al
   902 00003EFA 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   903 00003EFF 0F84C0030000        <1>     je .renAccDen
   904 00003F05 8B05(9E050000)      <1>     mov eax, dword [buffer2]
   905 00003F0B 30C0                <1>     xor al, al
   906 00003F0D 3D003A5C00          <1>     cmp eax, 005C3A00h
   907 00003F12 0F84AD030000        <1>     je .renAccDen  ;If this is the root, exit access denied
   908                              <1> ;Find the filename portion in both buffers.
   909 00003F18 488D3D(1E050000)    <1>     lea rdi, buffer1
   910 00003F1F E81B030000          <1>     call .findNameInPath
   911 00003F24 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Repurpose these vars to hold ptr to filename
   912 00003F2B 488D3D(9E050000)    <1>     lea rdi, buffer2
   913 00003F32 E808030000          <1>     call .findNameInPath
   914 00003F37 48893D(26060000)    <1>     mov qword [fname2Ptr], rdi
   915                              <1> ;Move the destination filename for wc expansion to wcd fcb name field
   916 00003F3E 488D35(E5060000)    <1>     lea rsi, wcdFcbName
   917 00003F45 4887F7              <1>     xchg rsi, rdi
   918 00003F48 E857D4FFFF          <1>     call asciiToFCB     ;Copy the ASCIIZ filename to the FCB field
   919                              <1> ;Now check if both destination and source directories are the same.
   920 00003F4D C605(FE060000)00    <1>     mov byte [renSamePar], 0 
   921 00003F54 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
   922 00003F5B C646FF00            <1>     mov byte [rsi - 1], 0
   923 00003F5F 488B3D(26060000)    <1>     mov rdi, qword [fname2Ptr]
   924 00003F66 C647FF00            <1>     mov byte [rdi - 1], 0
   925 00003F6A 488D35(1E050000)    <1>     lea rsi, buffer1
   926 00003F71 488D3D(9E050000)    <1>     lea rdi, buffer2
   927 00003F78 E855360000          <1>     call compareFileNames
   928 00003F7D 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
   929 00003F84 C646FF5C            <1>     mov byte [rsi - 1], "\"
   930 00003F88 488B3D(26060000)    <1>     mov rdi, qword [fname2Ptr]
   931 00003F8F C647FF5C            <1>     mov byte [rdi - 1], "\"
   932 00003F93 7507                <1>     jnz .renMakeFF
   933 00003F95 C605(FE060000)FF    <1>     mov byte [renSamePar], -1 ;Set to indicate same parent directory
   934                              <1> .renMakeFF:
   935                              <1> ;Find First the source file with given attributes!
   936 00003F9C 488D3D(1E050000)    <1>     lea rdi, buffer1
   937 00003FA3 FF35(1E060000)      <1>     push qword [fname1Ptr]
   938 00003FA9 E8D8D5FFFF          <1>     call getFilePathNoCanon ;We are searching for the file
   939 00003FAE 8F05(1E060000)      <1>     pop qword [fname1Ptr]
   940 00003FB4 0F8210030000        <1>     jc .renErrExit  ;If there is no file or an error, fail it!
   941                              <1> ;Build the rename FFBlock
   942                              <1> .renFindNext:
   943 00003FBA 488D3D(92070000)    <1>     lea rdi, renameFFBlk
   944 00003FC1 E866D4FFFF          <1>     call setupFFBlock
   945                              <1> ;Copy the found dir to rename dir
   946 00003FC6 488D35(5A060000)    <1>     lea rsi, curDirCopy
   947 00003FCD 488D3D(BD070000)    <1>     lea rdi, renameDir
   948 00003FD4 B904000000          <1>     mov ecx, fatDirEntry_size/8
   949 00003FD9 F348A5              <1>     rep movsq
   950                              <1> ;Copy the found filename to the filename portion of the source path.
   951 00003FDC 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]
   952 00003FE3 488D35(5A060000)    <1>     lea rsi, qword [curDirCopy + fatDirEntry.name]
   953 00003FEA E8FDD3FFFF          <1>     call FCBToAsciiz    ;Copy the found filename over
   954                              <1> ;Check the file is not a char dev or a CDS directory
   955 00003FEF F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   956 00003FF6 0F85C9020000        <1>     jnz .renAccDen ;Cant rename a char file!
   957 00003FFC F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   958 00004003 7432                <1>     jz .srcNotDir
   959 00004005 488D3D(1E050000)    <1>     lea rdi, buffer1  ;Check this path isn't a CDS
   960 0000400C E8F0010000          <1>     call .checkPathCDS
   961 00004011 0F82B3020000        <1>     jc .renErrExit  ;Bubble the error code up if there is an error!
   962 00004017 8B05(B0070000)      <1>     mov eax, dword [renameFFBlk + ffBlock.asciizName]
   963 0000401D 25FFFFFF00          <1>     and eax, 00FFFFFFh  ;Drop the upper byte
   964 00004022 3D2E2E0000          <1>     cmp eax, ".."       ;Did we read ..<NUL> ?
   965 00004027 0F8498020000        <1>     je .renAccDen
   966 0000402D 663D2E00            <1>     cmp ax, "."         ;Did we read .<NUL> ?
   967 00004031 0F848E020000        <1>     je .renAccDen
   968                              <1> .srcNotDir:
   969                              <1> ;Finally, make sure this found file can be renamed (i.e. has no share locks)
   970 00004037 FF35(1E060000)      <1>     push qword [fname1Ptr]
   971 0000403D 488D35(1E050000)    <1>     lea rsi, buffer1
   972 00004044 488935(1E060000)    <1>     mov qword [fname1Ptr], rsi
   973 0000404B E880020000          <1>     call checkExclusiveOwnFile   ;Now do this, saving ptrs
   974 00004050 8F05(1E060000)      <1>     pop qword [fname1Ptr]
   975 00004056 0F825F020000        <1>     jc .renShareErr   ;Propagate the share error code
   976                              <1> ;Build a destination filename now. fcbName is already setup with the source
   977                              <1> ; filename.
   978 0000405C 488D35(E5060000)    <1>     lea rsi, wcdFcbName
   979 00004063 488D3D(D9060000)    <1>     lea rdi, fcbName
   980 0000406A E874010000          <1>     call .buildFilename
   981 0000406F 488B35(26060000)    <1>     mov rsi, qword [fname2Ptr]  ;Now we store the filename to the pathspec
   982 00004076 4887F7              <1>     xchg rsi, rdi
   983 00004079 E86ED3FFFF          <1>     call FCBToAsciiz    ;Make the FCB name to ASCIIZ
   984                              <1> ;Ensure the two filenames are NOT the same
   985 0000407E 488D35(1E050000)    <1>     lea rsi, buffer1
   986 00004085 488D3D(9E050000)    <1>     lea rdi, buffer2
   987 0000408C E841350000          <1>     call compareFileNames
   988 00004091 0F842E020000        <1>     jz .renAccDen   ;If the names are equal, Access Denied!
   989                              <1> ;Copy this FCB name to the rename directory copy
   990 00004097 488D3D(BD070000)    <1>     lea rdi, qword [renameDir + fatDirEntry.name]
   991 0000409E 488D35(D9060000)    <1>     lea rsi, fcbName
   992 000040A5 B90B000000          <1>     mov ecx, 11
   993 000040AA F3A4                <1>     rep movsb
   994 000040AC F605(FE060000)FF    <1>     test byte [renSamePar], -1    ;If clear, different parent directories
   995 000040B3 741C                <1>     jz .renDiffDirs
   996                              <1> ;Here we are in the same parent directory. So we recycle the directory
   997                              <1> ; entry directly.
   998                              <1> ;At this point, the curDir is to the source directory entry.
   999 000040B5 E80CE3FFFF          <1>     call getDiskDirectoryEntry  ;So get a pointer to this entry in rsi
  1000 000040BA 488D3D(BD070000)    <1>     lea rdi, renameDir  ;Get ptr to the src of the new dir entry
  1001 000040C1 4887F7              <1>     xchg rsi, rdi   ;Swap the pointers
  1002 000040C4 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1003 000040C9 F348A5              <1>     rep movsq   ;Move it over
  1004 000040CC E9B3000000          <1>     jmp .renDone  ;Mark buffer dirty, flush and exit!
  1005                              <1> .renDiffDirs:
  1006                              <1> ;Else check the parent directory of the destination exists. For this, we
  1007                              <1> ; replace the pathsep before the filename with a null and do a dir search.
  1008                              <1> ;We also do this to setup the vars to point to the parent directory.
  1009 000040D1 488B3D(26060000)    <1>     mov rdi, qword [fname2Ptr]
  1010 000040D8 48FFCF              <1>     dec rdi ;Point to the pathsep char
  1011 000040DB 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;If we are in the root directory, skip check!
  1012 000040DF 7426                <1>     je .skipParCheck
  1013 000040E1 C60700              <1>     mov byte [rdi], 0   ;Place null terminator here
  1014 000040E4 57                  <1>     push rdi            ;Save ptr to the null terminator on stack
  1015 000040E5 FF35(1E060000)      <1>     push qword [fname1Ptr]
  1016 000040EB 488D3D(9E050000)    <1>     lea rdi, buffer2
  1017 000040F2 E888D4FFFF          <1>     call getDirPathNoCanon  ;Search for the parent directory!
  1018 000040F7 8F05(1E060000)      <1>     pop qword [fname1Ptr]
  1019 000040FD 5F                  <1>     pop rdi             ;Get ptr to terminator to replace back
  1020 000040FE C6075C              <1>     mov byte [rdi], "\" ;Now replace the null terminator with the pathsep
  1021 00004101 0F82C3010000        <1>     jc .renErrExit  ;If the parent doesnt exist, exit, bubbling error code
  1022                              <1> .skipParCheck:
  1023                              <1> ;Check the destination file doesnt exist at all. Do inclusive search!
  1024 00004107 0FB615(FC060000)    <1>     movzx edx, byte [searchAttr]
  1025 0000410E 52                  <1>     push rdx
  1026 0000410F C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive
  1027 00004116 FF35(1E060000)      <1>     push qword [fname1Ptr]
  1028 0000411C 488D3D(9E050000)    <1>     lea rdi, buffer2    ;Now check that this file doesnt exist!
  1029 00004123 E85ED4FFFF          <1>     call getFilePathNoCanon
  1030 00004128 8F05(1E060000)      <1>     pop qword [fname1Ptr]
  1031 0000412E 5A                  <1>     pop rdx
  1032 0000412F 8815(FC060000)      <1>     mov byte [searchAttr], dl
  1033 00004135 0F838A010000        <1>     jnc .renAccDen  ;If no file found, error!
  1034 0000413B 3C02                <1>     cmp al, errFnf  ;If not file not found, error!
  1035 0000413D 0F8587010000        <1>     jne .renErrExit ;Else, the file specified not found. Proceed
  1036                              <1> ;Destination file not found in any form, proceed finding directory space!
  1037                              <1> ;CurDirCopy and dir search vars point to the parent directory of the file
  1038                              <1> ; we were searching for. Root dir has this entry set to 0. If the file is
  1039                              <1> ; a dir, we take the parent cluster.
  1040                              <1> 
  1041                              <1> ;To prevent file loss, we create the new directory entry first and mark 
  1042                              <1> ; the buffer dirty before deleting the original. Unless something happens
  1043                              <1> ; midway through these two operations, we should be oki
  1044 00004143 E811010000          <1>     call .renFindDirSpace ;Returns rsi -> space for dir entry if CF=NC
  1045 00004148 0F8277010000        <1>     jc .renAccDen
  1046 0000414E 488D3D(BD070000)    <1>     lea rdi, renameDir  ;Get ptr to the src of the new dir entry
  1047 00004155 4887F7              <1>     xchg rsi, rdi
  1048 00004158 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1049 0000415D F348A5              <1>     rep movsq
  1050 00004160 E842C7FFFF          <1>     call markBufferDirty    ;Written to a disk buffer, mark it dirty!
  1051                              <1> ;Now we delete the old directory entry. If this fails we end up with
  1052                              <1> ; two directory entries linked to the same file. Better than losing
  1053                              <1> ; data on disk! In this case, to prevent corruption, you should
  1054                              <1> ; copy the data from the disk to hopefully another disk, and then
  1055                              <1> ; delete both the old and new directory entries for this file.
  1056 00004165 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Search for this file again to get curdir
  1057 0000416C E815D4FFFF          <1>     call getFilePathNoCanon
  1058 00004171 0F8253010000        <1>     jc .renErrExit
  1059 00004177 E84AE2FFFF          <1>     call getDiskDirectoryEntry  ;Vars were setup in getFilePathNoCanon call
  1060                              <1> ;rsi points to the file entry
  1061 0000417C 8A05(08070000)      <1>     mov al, byte [delChar]
  1062 00004182 8806                <1>     mov byte [rsi], al      ;Delete the file!
  1063                              <1> .renDone:
  1064 00004184 E81EC7FFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
  1065 00004189 E8ABC5FFFF          <1>     call flushAllBuffersForDPB  ;Now flush all buffers
  1066 0000418E E83F000000          <1>     call .searchForWC   ;Now check if we have WC's. If so, find next file!
  1067 00004193 7406                <1>     jz .wcFnd
  1068                              <1> .renExit:   ;Normal Exit!
  1069 00004195 E81F370000          <1>     call dosCrit1Exit
  1070                              <1>     return
    13                              <2> %%_ret:
    14 0000419A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1071                              <1> .wcFnd:
  1072                              <1> ;Here if we need to do WC magic.
  1073                              <1> ;Do a find next. If it fails, we return. If it succeeds, we then
  1074                              <1> ; copy the cur dir and start as if we have just set up the find first block.
  1075                              <1> ;Since we initially setup the find first block, we don't need the source 
  1076                              <1> ; pathspec pattern in the pathspec anymore and can just use the ptr to the 
  1077                              <1> ; name portion of the pathspec to copy the found filename over to.
  1078                              <1> ;Since we start searching from the deleted dir entry which might've been 
  1079                              <1> ; overwritten, we might lose a rename if the wc pattern is sufficiently 
  1080                              <1> ; generic. This isn't a problem as this is the defined behaviour.
  1081                              <1> ;
  1082                              <1> ;Beware, WC calls may take a long timeslice in multitasking environments.
  1083                              <1> ;Consider adding a mechanism for multitasking (Can't exit crit1 unless
  1084                              <1> ; we can guarantee the only multitasker is one that swaps the SDA on each 
  1085                              <1> ; task swap, i.e. us). A proper multitasker which swaps the sda on each task
  1086                              <1> ; swap, can then patch these spaces.
  1087 0000419B 9090909090          <1>     db 5 dup (90h)  ;Space for exit crit1
  1088 000041A0 FF35(17040000)      <1>     push qword [currentDTA] ;Save the original DTA address
  1089 000041A6 488D3D(92070000)    <1>     lea rdi, renameFFBlk ;Use dosffblk to preserve original search template
  1090 000041AD 48893D(17040000)    <1>     mov qword [currentDTA], rdi
  1091 000041B4 E84DCEFFFF          <1>     call findNextMain
  1092 000041B9 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
  1093 000041C0 8F05(17040000)      <1>     pop qword [currentDTA]  ;Get back original DTA
  1094 000041C6 9090909090          <1>     db 5 dup (90h)  ;Space for enter crit1
  1095 000041CB 72C8                <1>     jc .renExit     ;If find next errors, exit here (and exit crit1)
  1096 000041CD E9E8FDFFFF          <1>     jmp .renFindNext  ;else update the renameffblock and proceed
  1097                              <1> 
  1098                              <1> ;---------------------
  1099                              <1> ;Rename routines
  1100                              <1> ;---------------------
  1101                              <1> .searchForWC:
  1102                              <1> ;Searches for a wildcard in the renFFblock.
  1103                              <1> ;Input: rdi -> FCB name to check
  1104                              <1> ;Output: ZF=ZE if WC present. ZF=NZ otherwise.
  1105 000041D2 488D3D(93070000)    <1>     lea rdi, qword [renameFFBlk + ffBlock.template]
  1106 000041D9 B03F                <1>     mov al, "?"
  1107 000041DB B90B000000          <1>     mov ecx, 11
  1108 000041E0 F2AE                <1>     repne scasb
  1109                              <1>     return
    13                              <2> %%_ret:
    14 000041E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1110                              <1> 
  1111                              <1> .buildFilename:
  1112                              <1> ;Preserves all registers. Builds a name in the destination buffer.
  1113                              <1> ;This buffer MUST be initialised with the original filename before
  1114                              <1> ; we run this in the event that the source buffer has any wildcards
  1115                              <1> ;Input: rsi -> Buffer to source chars from
  1116                              <1> ;       rdi -> Buffer to store chars in
  1117                              <1> ;   If a wildcard is encountered in the source, we goto next char
  1118 000041E3 50                  <1>     push rax
  1119 000041E4 51                  <1>     push rcx
  1120 000041E5 56                  <1>     push rsi
  1121 000041E6 57                  <1>     push rdi
  1122 000041E7 B90B000000          <1>     mov ecx, 11 ;11 chars in an fcb name
  1123                              <1> .bflp:
  1124 000041EC AC                  <1>     lodsb   ;Get a char from the source
  1125 000041ED 3C3F                <1>     cmp al, "?"
  1126 000041EF 7404                <1>     je .bfNextChar
  1127 000041F1 AA                  <1>     stosb   ;Store the char and advance the storage pointer
  1128 000041F2 48FFCF              <1>     dec rdi ;Go back
  1129                              <1> .bfNextChar:
  1130 000041F5 48FFC7              <1>     inc rdi ;Go to next space
  1131 000041F8 FFC9                <1>     dec ecx
  1132 000041FA 75F0                <1>     jnz .bflp
  1133 000041FC 5F                  <1>     pop rdi
  1134 000041FD 5E                  <1>     pop rsi
  1135 000041FE 59                  <1>     pop rcx
  1136 000041FF 58                  <1>     pop rax
  1137                              <1>     return
    13                              <2> %%_ret:
    14 00004200 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1138                              <1> 
  1139                              <1> .checkPathCDS:
  1140                              <1> ;Checks a path in rdi is not in the CDS of any drive.
  1141                              <1> ;Trashes everything.
  1142                              <1> ;Input: rdi -> Path to check isnt the CDS for any drives
  1143                              <1> ;Output:    CF=NC: Path not CDS
  1144                              <1> ;           CF=CY: Path found in CDS of some drive
  1145 00004201 57                  <1>     push rdi
  1146 00004202 E893330000          <1>     call strlen ;Get asciiz length in ecx
  1147 00004207 5B                  <1>     pop rbx
  1148 00004208 FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
  1149 0000420A 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr]
  1150 00004211 0FB615(78000000)    <1>     movzx edx, byte [lastdrvNum]
  1151                              <1> .cpcdsDirCheck:
  1152 00004218 4889DF              <1>     mov rdi, rbx
  1153 0000421B 51                  <1>     push rcx    ;Save the char count to check!
  1154 0000421C 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
  1155 0000421D F3A6                <1>     repe cmpsb  ;Compare while they are equal
  1156 0000421F AC                  <1>     lodsb   ;Get the last char to check in al
  1157 00004220 5E                  <1>     pop rsi ;Put rsi back to the start of the string
  1158 00004221 59                  <1>     pop rcx
  1159 00004222 750F                <1>     jne .cpcdsNeqDir
  1160                              <1>     ;Instead of failing, if not join, simply reset that CDS entry to root.
  1161 00004224 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
  1162 00004226 7404                <1>     je .cpcdsFound
  1163 00004228 84C0                <1>     test al, al
  1164 0000422A 7507                <1>     jne .cpcdsNeqDir ;Proceed as normal if not null
  1165                              <1> .cpcdsFound:
  1166                              <1>     ;Here we are trying to change a current directory. Fail it!
  1167                              <1>     ;This is (DOS 5.0+/Windows)-like behaviour but its sensible and what
  1168                              <1>     ; we initially had programmed in (with access denied error instead).
  1169 0000422C B810000000          <1>     mov eax, errDelCD   ;This is a more descriptive error.
  1170 00004231 F9                  <1>     stc
  1171                              <1>     return    
    13                              <2> %%_ret:
    14 00004232 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1172                              <1> .cpcdsNeqDir:
  1173 00004233 4881C65F000000      <1>     add rsi, cds_size   ;Goto next CDS
  1174 0000423A FFCA                <1>     dec edx
  1175 0000423C 75DA                <1>     jnz .cpcdsDirCheck
  1176                              <1>     return
    13                              <2> %%_ret:
    14 0000423E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1177                              <1> 
  1178                              <1> .findNameInPath:
  1179                              <1> ;Finds the name portion of the pathspec. Preserves all registers except rdi.
  1180                              <1> ;Input: rdi -> Filename to find the first char of the filename portion of
  1181                              <1> ;Output: rdi -> First char of the filename in path
  1182 0000423F 50                  <1>     push rax
  1183 00004240 51                  <1>     push rcx
  1184 00004241 E854330000          <1>     call strlen ;Get in ecx the 
  1185 00004246 4801CF              <1>     add rdi, rcx    ;Point rdi past the terminating null
  1186 00004249 FD                  <1>     std ;Go backwards now, to find the path sep
  1187 0000424A B05C                <1>     mov al, "\"
  1188 0000424C F2AE                <1>     repne scasb   ;Now rsi points one before
  1189 0000424E FC                  <1>     cld ;Go normal ways now
  1190 0000424F 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
  1191 00004256 59                  <1>     pop rcx
  1192 00004257 58                  <1>     pop rax
  1193                              <1>     return
    13                              <2> %%_ret:
    14 00004258 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1194                              <1> 
  1195                              <1> .renFindDirSpace:
  1196                              <1> ;Searches for directory space based on the data in the current dir copy.
  1197                              <1> ; If the file is a dir then start searching in the parent cluster 
  1198 00004259 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
  1199 0000425F F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], attrFileDir
  1200 00004266 7517                <1>     jnz .sfdsDirSkip 
  1201                              <1> ;Now check, if the parent dir of the is null. IF it is, the clust
  1202                              <1> ; wouldn't've been setup as we dont "search" for the root in the same
  1203                              <1> ; way (though if we search for A:\, we DO setup the cluster info. Ew.)
  1204 00004268 85C0                <1>     test eax, eax
  1205 0000426A 7413                <1>     jz .sfdsDirSkip
  1206 0000426C 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
  1207 00004273 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
  1208 0000427A C1E210              <1>     shl edx, 10h
  1209 0000427D 09D0                <1>     or eax, edx     ;Get first cluster of dir file in eax 
  1210                              <1> .sfdsDirSkip:
  1211 0000427F 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1212 00004285 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1213 00004287 668905(83070000)    <1>     mov word [dirSect], ax
  1214 0000428E 8905(85070000)      <1>     mov dword [dirEntry], eax
  1215                              <1> ;Needs delchar setup. Already done in the prologue of rename!
  1216 00004294 E819E1FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1217 00004299 731C                <1>     jnc .dirEntryFnd
  1218 0000429B 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1218 000042A3 0000                <1>
  1219 000042A5 7412                <1>     je .searchBad ;Set CF and exit
  1220 000042A7 E8F3E1FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1221 000042AC 720B                <1>     jc .searchBad
  1222 000042AE 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1223 000042B3 7404                <1>     je .searchBad
  1224                              <1>     ;Else eax = Newly allocated cluster
  1225 000042B5 EBA2                <1>     jmp short .renFindDirSpace
  1226                              <1> .dirEntryFnd:
  1227 000042B7 F8                  <1>     clc
  1228                              <1>     return
    13                              <2> %%_ret:
    14 000042B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1229                              <1> .searchBad:
  1230 000042B9 F9                  <1>     stc
  1231                              <1>     return
    13                              <2> %%_ret:
    14 000042BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1232                              <1> 
  1233                              <1> ;Error Exits
  1234                              <1> .renShareErr:
  1235 000042BB B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1236 000042C0 E905000000          <1>     jmp .renErrExit
  1237                              <1> .renAccDen:
  1238 000042C5 B805000000          <1>     mov eax, errAccDen
  1239                              <1> .renErrExit:
  1240 000042CA F9                  <1>     stc
  1241 000042CB E9C5FEFFFF          <1>     jmp .renExit
  1242                              <1> 
  1243                              <1> checkExclusiveOwnFile:
  1244                              <1> ;We check that the program carrying out this action owns the file exclusively. 
  1245                              <1> ; This function will fail IF there are handles open, and thus makes it an 
  1246                              <1> ; ideal candidate for checking in RENAME, for both filenames, DELETE and 
  1247                              <1> ; SETFILEATTRIBS if we have any open files. If we do, then we should get 
  1248                              <1> ; a Share error and thus it would prevent us from proceeding.
  1249                              <1> ;
  1250                              <1> ;If SHARE not loaded, ALL handles should be closed manually before 
  1251                              <1> ; Rename or Delete.
  1252                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1253                              <1> ;       currDirCopy = Directory entry for the file
  1254                              <1> ;Output: Clobbers rcx, rdx.
  1255 000042D0 50                  <1>     push rax
  1256 000042D1 53                  <1>     push rbx
  1257 000042D2 56                  <1>     push rsi
  1258 000042D3 57                  <1>     push rdi
  1259                              <1> 
  1260                              <1>     ;The below in DOS is passed in by the caller, here we preserve the 
  1261                              <1>     ; caller's regs and proceed to set the ptrs ourselves.
  1262 000042D4 488D1D(5A060000)    <1>     lea rbx, curDirCopy
  1263 000042DB 488D731A            <1>     lea rsi, qword [rbx + fatDirEntry.fstClusLo]
  1264                              <1>     ;At this point, the filename is fully normalised due to the 
  1265                              <1>     ; way we do path parsing. Thus, we can proceed safely.
  1266                              <1> 
  1267                              <1>     ;The following closes most recent shared handles referencing it
  1268                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1269                              <1>     ; mode and if there is precisely 1  
  1270 000042DF FF15(27010000)      <1>     call qword [closeNewHdlShare]    
  1271                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1272 000042E5 488D3D(100D0000)    <1>     lea rdi, scratchSFT
  1273 000042EC E87C0D0000          <1>     call setCurrentSFT
  1274 000042F1 B802000000          <1>     mov eax, openRWAcc | openCompat ;Set open mode
  1275 000042F6 C605(07070000)00    <1>     mov byte [openCreate], 0    ;We test by opening.
  1276 000042FD 57                  <1>     push rdi    ;Save the scratch SFT ptr
  1277 000042FE E8B6020000          <1>     call buildSFTEntry  ;This will never fail. If it does, shareFile will catch
  1278 00004303 5F                  <1>     pop rdi
  1279 00004304 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1280 00004309 66C747021000        <1>     mov word [rdi + sft.wOpenMode], openDenRWShr ;Prevent everything temporarily
  1281 0000430F E8AC3E0000          <1>     call shareFile  ;Puts an sft handle in rdi
  1282 00004314 720B                <1>     jc .exit
  1283 00004316 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0 ;Now free it and close it
  1284 0000431B E8343E0000          <1>     call closeShareCallWrapper 
  1285 00004320 F8                  <1>     clc
  1286                              <1> .exit:
  1287 00004321 5F                  <1>     pop rdi
  1288 00004322 5E                  <1>     pop rsi
  1289 00004323 5B                  <1>     pop rbx
  1290 00004324 58                  <1>     pop rax
  1291                              <1>     ;mov rbp, qword [workingDPB] ;This seems always set so no need for it.
  1292                              <1>     return
    13                              <2> %%_ret:
    14 00004325 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1293                              <1> 
  1294                              <1> outerDeleteMain:
  1295                              <1> ;Internal current dir must be populated with dir entry
  1296                              <1> ; and internal DOS directory variables now point to this entry.
  1297                              <1> ;Checks if the file is a char device or read only.
  1298                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1299                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1300                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1301                              <1> ;         CF=NC => File deleted
  1302                              <1> 
  1303                              <1> ;Hardcode delChar for now. *.* dels may be considered for optimisation later
  1304                              <1>     ;mov byte [delChar], 0E5h
  1305 00004326 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1306 0000432D E857300000          <1>     call testCDSNet ;CF=NC => Not net
  1307 00004332 7308                <1>     jnc .notNet
  1308 00004334 B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1309 00004339 CD2F                <1>     int 2Fh
  1310                              <1>     return
    13                              <2> %%_ret:
    14 0000433B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1311                              <1> .notNet:
  1312 0000433C B805000000          <1>     mov eax, errAccDen  
  1313 00004341 F605(65060000)51    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev | dirDirectory | dirReadOnly
  1314 00004348 7549                <1>     jnz .exitBad  ;Can't delete char dev, dir or ro file
  1315 0000434A E846000000          <1>     call deleteMain
  1316 0000434F 7242                <1>     jc .exitBad
  1317                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1318 00004351 B03F                <1>     mov al, "?"
  1319 00004353 488D3D(D9060000)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1320 0000435A B90B000000          <1>     mov ecx, 11
  1321 0000435F F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1322 00004361 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1323 00004363 F8                  <1>     clc
  1324                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 00004364 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1325                              <1> .serverWCloop:
  1326 00004365 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
  1327 0000436B 488D3D(2F060000)    <1>     lea rdi, dosffblock
  1328 00004372 57                  <1>     push rdi    ;Push this address onto the stack
  1329 00004373 E8B4D0FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1330 00004378 8F05(17040000)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1331 0000437E E883CCFFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1332 00004383 8F05(17040000)      <1>     pop qword [currentDTA]
  1333                              <1>     retc    ;Return with no more files error now
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004389 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000438B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1334 0000438C E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1335 00004391 73D2                <1>     jnc .serverWCloop     
  1336                              <1> ;Stop as soon as an error occurs
  1337                              <1> .exitBad:
  1338 00004393 F9                  <1>     stc
  1339                              <1>     return
    13                              <2> %%_ret:
    14 00004394 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1340                              <1> 
  1341                              <1> deleteMain:
  1342                              <1> ;Now unlink FAT chain and then clear directory entry
  1343                              <1> ;Get the start cluster of this file
  1344                              <1> ;Input:
  1345                              <1> ; The file must have NOT be read-only.
  1346                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1347                              <1> ;     - curDirCopy must be filled with the file directory information
  1348                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1349                              <1> ;Output: CF=NC => Success, 
  1350                              <1> ; If not net CDS:
  1351                              <1> ;   rsi keeps pointing to directory entry.
  1352                              <1> ;   al = First char of the file that was deleted.
  1353                              <1> ;        CF=CY => Error
  1354                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1355 00004395 E836FFFFFF          <1>     call checkExclusiveOwnFile   ;Also cannot delete if open handle
  1356                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000439A 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000439C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1357 0000439D 55                  <1>     push rbp
  1358 0000439E 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1359 000043A5 52                  <1>     push rdx
  1360 000043A6 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1361 000043AD 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1362 000043B4 C1E010              <1>     shl eax, 10h
  1363 000043B7 09D0                <1>     or eax, edx ;Add low bits to eax
  1364 000043B9 5A                  <1>     pop rdx
  1365 000043BA 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1366 000043BC 7407                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1367 000043BE E826C9FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1368 000043C3 721D                <1>     jc .exitBad
  1369                              <1> .skipUnlink:
  1370                              <1>     ;Now replace the first char of the directory to 0E5h
  1371                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1372 000043C5 E8FCDFFFFF          <1>     call getDiskDirectoryEntry
  1373 000043CA 7216                <1>     jc .exitBad
  1374 000043CC 8A05(08070000)      <1>     mov al, byte [delChar]
  1375 000043D2 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1376 000043D4 E8CEC4FFFF          <1>     call markBufferDirty
  1377                              <1>     ;CF must be clear
  1378 000043D9 E85BC3FFFF          <1>     call flushAllBuffersForDPB
  1379 000043DE 5D                  <1>     pop rbp
  1380                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000043DF 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000043E1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1381                              <1> .exitBad:
  1382 000043E2 5D                  <1>     pop rbp
  1383 000043E3 F9                  <1>     stc
  1384                              <1>     return
    13                              <2> %%_ret:
    14 000043E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1385                              <1> 
  1386                              <1> openMain:
  1387                              <1> ;Input: ax (formally al) = Open mode
  1388                              <1> ;       [currentSFT] = SFT we are building
  1389                              <1> ;       [workingCDS] = CDS of drive to access
  1390                              <1> ;       [workingDPB] = DPB of drive to access
  1391                              <1> ;Ouput: CF=CY => Error, eax has error code
  1392 000043E5 E8C9000000          <1>     call setOpenMode
  1393                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000043EA 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000043EC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1394 000043ED E8830C0000          <1>     call getCurrentSFT
  1395 000043F2 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1396 000043F9 30E4                <1>     xor ah, ah  ;al has the access mode
  1397 000043FB 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1398 00004402 750A                <1>     jne .notNet
  1399                              <1> .redirOpen:
  1400 00004404 50                  <1>     push rax    ;Push open mode onto stack
  1401 00004405 B816110000          <1>     mov eax, 1116h  ;Open remote file on "\\" pathspec drives
  1402 0000440A CD2F                <1>     int 2Fh
  1403 0000440C 58                  <1>     pop rax
  1404                              <1>     return
    13                              <2> %%_ret:
    14 0000440D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1405                              <1> .notNet:
  1406 0000440E 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1407 00004414 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1408 00004416 E894340000          <1>     call dosCrit1Enter
  1409                              <1> ;Ensure our disk attributes permit opening
  1410 0000441B 8A15(65060000)      <1>     mov dl, byte [curDirCopy + fatDirEntry.attribute]   ;Get the disk attrib
  1411 00004421 F6C208              <1>     test dl, dirVolumeID    ;Is the found file a volume label?
  1412 00004424 752C                <1>     jnz .accDenExit
  1413 00004426 F6C201              <1>     test dl, dirReadOnly    ;Is the found file marked as RO in the file system?
  1414 00004429 7439                <1>     jz short .openFile      ;If not, proceed.
  1415                              <1> ;Else, we check if we are permitted to open this file.
  1416 0000442B 0FB74F02            <1>     movzx ecx, word [rdi + sft.wOpenMode]   ;Get the user-set open mode
  1417 0000442F F7C100800000        <1>     test ecx, openSFTFCB  ;We consider FCBs here for future net use 
  1418 00004435 7522                <1>     jnz .fcbOpen    ;If FCB open, intervene appropriately
  1419 00004437 89CA                <1>     mov edx, ecx
  1420 00004439 81E270000000        <1>     and edx, 070h   ;Isolate the share bits only
  1421 0000443F 81FA70000000        <1>     cmp edx, openNetFCBShr ;Is this a net server FCB open?
  1422 00004445 7412                <1>     je .fcbOpen     ;If it is net fcb, similarly force to ro as before
  1423 00004447 81E10F000000        <1>     and ecx, 0Fh    ;Else, isolate the bottom nybble
  1424 0000444D 80F900              <1>     cmp cl, openRdAcc  ;Are we asking for more than read?
  1425 00004450 7412                <1>     je .openFile    ;If no, proceed, eax has openmode. Else, access denied!
  1426                              <1> .accDenExit:
  1427 00004452 B805000000          <1>     mov eax, errAccDen
  1428 00004457 EB20                <1>     jmp short .errorExit
  1429                              <1> .fcbOpen:
  1430 00004459 6681E1F0FF          <1>     and cx, 0FFF0h  ;Set to read access open only. Preserve share/property bits
  1431 0000445E 66894F02            <1>     mov word [rdi + sft.wOpenMode], cx
  1432 00004462 89C8                <1>     mov eax, ecx    ;Move the modified open mode into eax for buildSFT
  1433                              <1> .openFile:
  1434 00004464 C605(07070000)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1435                              <1>     ;mov byte [delChar], 0E5h
  1436 0000446B E849010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1437 00004470 7207                <1>     jc .errorExit
  1438 00004472 E8493D0000          <1>     call shareFile      ;Puts an SFT handle in rdi
  1439 00004477 7306                <1>     jnc .fileSharedOk   ;If the file open doesnt violate share, jump!
  1440                              <1> .errorExit:
  1441 00004479 E83B340000          <1>     call dosCrit1Exit   ;Else we error out with error code in al
  1442                              <1>     return
    13                              <2> %%_ret:
    14 0000447E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1443                              <1> .fileSharedOk:
  1444 0000447F B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1445 00004484 E8EC0B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1446 00004489 FF15(2F010000)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1447 0000448F E825340000          <1>     call dosCrit1Exit
  1448                              <1> openDriverMux:  ;Int 2Fh, AX=120Ch, jumped to by Create
  1449                              <1> ;CurrentSFT ***must*** be set before entering here
  1450 00004494 E8DC0B0000          <1>     call getCurrentSFT
  1451 00004499 E8D9E1FFFF          <1>     call openSFT    ;This takes input rdi-> currentSFT. Preserves it too
  1452 0000449E 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB
  1453 000044A4 7501                <1>     jnz .netOpen
  1454                              <1>     return
    13                              <2> %%_ret:
    14 000044A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1455                              <1> .netOpen:
  1456 000044A7 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1457 000044AE 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1458                              <1>     return
    13                              <2> %%_ret:
    14 000044B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1459                              <1> 
  1460                              <1> setOpenMode:
  1461                              <1> ;Input: al = Open mode for the file open
  1462 000044B3 8805(FD060000)      <1>     mov byte [fileOpenMd], al
  1463 000044B9 53                  <1>     push rbx
  1464                              <1> ;Check we are not opening a directory. This is to prevent disk io with a dir
  1465 000044BA F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], attrFileDir
  1466 000044C1 7525                <1>     jnz .somBad    ;Directories are not allowed to be opened
  1467 000044C3 88C3                <1>     mov bl, al
  1468 000044C5 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1469 000044C8 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1    
  1470 000044CF 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1471 000044D1 80FB70              <1>     cmp bl, openNetFCBShr ;Test share mode for netFCB
  1472 000044D4 7405                <1>     je .s2
  1473                              <1> .s1:
  1474 000044D6 80FB40              <1>     cmp bl, openDenNoShr
  1475 000044D9 770D                <1>     ja .somBad
  1476                              <1> .s2:
  1477 000044DB 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1478 000044DD 80E30F              <1>     and bl, 0Fh
  1479 000044E0 80FB02              <1>     cmp bl, openRWAcc
  1480 000044E3 7703                <1>     ja .somBad
  1481 000044E5 5B                  <1>     pop rbx
  1482 000044E6 F8                  <1>     clc
  1483                              <1>     return
    13                              <2> %%_ret:
    14 000044E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1484                              <1> .somBad:
  1485 000044E8 5B                  <1>     pop rbx
  1486 000044E9 B80C000000          <1>     mov eax, errAccCde
  1487 000044EE F9                  <1>     stc
  1488                              <1>     return
    13                              <2> %%_ret:
    14 000044EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1489                              <1> 
  1490                              <1> createNewMain:
  1491                              <1> ;Input: ax (formally al) = File attributes
  1492                              <1> ;       [currentSFT] = SFT we are building
  1493                              <1> ;       [workingCDS] = CDS of drive to access
  1494                              <1> ;       [workingDPB] = DPB of drive to access
  1495 000044F0 0FB6C0              <1>     movzx eax, al
  1496 000044F3 B401                <1>     mov ah, 1    ;Tell redir to create new file
  1497 000044F5 F605(04070000)FF    <1>     test byte [fileExist], -1
  1498 000044FC 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1499 000044FE B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1500 00004503 F9                  <1>     stc
  1501                              <1>     return
    13                              <2> %%_ret:
    14 00004504 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1502                              <1> createMain:
  1503                              <1> ;Input: ax (formally al) = File attributes
  1504                              <1> ;       [currentSFT] = SFT we are building
  1505                              <1> ;       [workingCDS] = CDS of drive to access
  1506                              <1> ;       [workingDPB] = DPB of drive to access
  1507 00004505 0FB6C0              <1>     movzx eax, al
  1508                              <1> .createNewEP:
  1509 00004508 A880                <1>     test al, 80h    ; Is this invalid bit set?
  1510 0000450A 750C                <1>     jnz .invalidAttrib
  1511 0000450C A808                <1>     test al, attrFileVolLbl    ;Is this a volume label?
  1512 0000450E 7402                <1>     jz .notVol
  1513 00004510 B008                <1>     mov al, attrFileVolLbl ;If the vol bit is set, set the whole thing to volume only
  1514                              <1>     ;Set archive bit for new vol labels for incremental archivers to update
  1515                              <1> .notVol:
  1516 00004512 0C20                <1>     or al, attrFileArchive   ;Set archive bit
  1517 00004514 A850                <1>     test al, attrFileDir | attrFileChar   ;Invalid bits?
  1518 00004516 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1519                              <1> .invalidAttrib:
  1520 00004518 B805000000          <1>     mov eax, errAccDen
  1521 0000451D F9                  <1>     stc
  1522                              <1>     return
    13                              <2> %%_ret:
    14 0000451E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1523                              <1> .validAttr:
  1524                              <1> ;Check we are not creating a directory.
  1525 0000451F E8510B0000          <1>     call getCurrentSFT
  1526 00004524 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1527 0000452B 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1528 00004532 750A                <1>     jne .diskFile
  1529 00004534 50                  <1>     push rax    ;Save the new attributes
  1530 00004535 B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1531 0000453A CD2F                <1>     int 2Fh
  1532 0000453C 5B                  <1>     pop rbx
  1533                              <1>     return
    13                              <2> %%_ret:
    14 0000453D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1534                              <1> .diskFile:
  1535 0000453E 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1536 00004544 740A                <1>     jz .hardFile
  1537 00004546 50                  <1>     push rax    ;Save the new attributes
  1538 00004547 B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1539 0000454C CD2F                <1>     int 2Fh
  1540 0000454E 5B                  <1>     pop rbx
  1541                              <1>     return
    13                              <2> %%_ret:
    14 0000454F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1542                              <1> .hardFile:
  1543 00004550 66814F020200        <1>     or word [rdi + sft.wOpenMode], openRWAcc ;Set R/W access when creating file
  1544 00004556 C605(07070000)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1545                              <1>     ;mov byte [delChar], 0E5h
  1546 0000455D E84D330000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1547 00004562 57                  <1>     push rdi    ;Save the sft handle
  1548 00004563 50                  <1>     push rax    ;Save the file attributes on stack
  1549 00004564 B802000000          <1>     mov eax, openRWAcc | openCompat ;Set open mode
  1550 00004569 E84B000000          <1>     call buildSFTEntry
  1551 0000456E 5B                  <1>     pop rbx ;Pop the file attribute off
  1552 0000456F 5F                  <1>     pop rdi
  1553 00004570 7241                <1>     jc .errorExit
  1554 00004572 E8493C0000          <1>     call shareFile  ;Puts an sft handle in rdi, preserves rbx
  1555 00004577 723A                <1>     jc .errorExit
  1556 00004579 F6C308              <1>     test bl, attrFileVolLbl    ;Was the attribute a volume label?
  1557 0000457C 7420                <1>     jz .notVolLabel    ;If not vol label, skip.
  1558                              <1> ; Treat volume label creation case here. Rebuild DPB.
  1559 0000457E 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]    ;Get the CDS ptr for getDiskDPB
  1560 00004585 8A07                <1>     mov al, byte [rdi]     ;Get the drive letter
  1561 00004587 2C41                <1>     sub al, "A"            ;Convert to a 0 based number
  1562 00004589 8805(E1190000)      <1>     mov byte [rebuildDrv], al  ;Set the volid rebuild var
  1563 0000458F E81B330000          <1>     call dosCrit1Enter
  1564 00004594 E84B2B0000          <1>     call getDiskDPB        ;Rebuild DPB and clear var
  1565 00004599 E81B330000          <1>     call dosCrit1Exit
  1566                              <1> .notVolLabel:
  1567 0000459E B802000000          <1>     mov eax, 2  ;Needed for the SHARE call
  1568 000045A3 FF15(2F010000)      <1>     call qword [updateDirShare]
  1569 000045A9 E80B330000          <1>     call dosCrit1Exit
  1570 000045AE E9E1FEFFFF          <1>     jmp openDriverMux
  1571                              <1> .errorExit:
  1572 000045B3 E801330000          <1>     call dosCrit1Exit
  1573                              <1>     return
    13                              <2> %%_ret:
    14 000045B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1574                              <1> buildSFTEntry:
  1575                              <1> ;Called in a critical section.
  1576                              <1> ;Input: al = Open mode
  1577                              <1> ;       STACK: File attributes if creating a file
  1578                              <1> ;       [currentSFT] = SFT we are building
  1579                              <1> ;       [workingCDS] = CDS of drive to access
  1580                              <1> ;       [workingDPB] = DPB of drive to access
  1581                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1582                              <1> ;       If creating, delChar must be set to 0E5h. Not needed for opening!
  1583                              <1> ;
  1584                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1585                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1586                              <1> ;        If CF=CY: - Return fail
  1587                              <1> ;
  1588                              <1> ;
  1589                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1590                              <1> ;   If not, create disk entry.
  1591                              <1> ;Check if the device was a char device by checking curDirCopy.
  1592                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1593                              <1> 
  1594                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1595                              <1> ; to start of file fields of the SFT
  1596 000045B9 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1597 000045BA 4889E5              <1>     mov rbp, rsp
  1598 000045BD 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1599                              <1> ;Set the open mode
  1600 000045C4 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1601                              <1> ;Get current time
  1602 000045C8 E800EAFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1603 000045CD E8E6EAFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1604 000045D2 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1605                              <1> ;Set current Owner
  1606 000045D5 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1607 000045DC 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1608                              <1> ;Set file pointer to first byte
  1609 000045E0 C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1610                              <1> ;Common fields set
  1611 000045E7 F605(07070000)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1612 000045EE 0F84C4010000        <1>     jz .openProc
  1613                              <1>     ;Here if Creating a file.
  1614                              <1>     ;First check if we are handling a volume label
  1615 000045F4 48F7451008000000    <1>     test qword [rbp + 10h], attrFileVolLbl  ;Are we creating a volume label?
  1616 000045FC 7427                <1>     jz .notVolLbl   ;Bit not set? Jump!
  1617 000045FE 56                  <1>     push rsi
  1618 000045FF 57                  <1>     push rdi
  1619 00004600 55                  <1>     push rbp
  1620 00004601 C605(5F040000)FF    <1>     mov byte [volIdFlag], -1    ;Set the volid search bit
  1621 00004608 E88CCBFFFF          <1>     call searchDir  ;Searches the root dir
  1622 0000460D C605(5F040000)00    <1>     mov byte [volIdFlag], 0     ;We are done searching for volid
  1623 00004614 5D                  <1>     pop rbp
  1624 00004615 5F                  <1>     pop rdi
  1625 00004616 5E                  <1>     pop rsi
  1626 00004617 0F83F2010000        <1>     jnc .bad ;If CF=NC, then we have found a vollbl, fail.
  1627 0000461D 3C12                <1>     cmp al, errNoFil
  1628 0000461F 0F85EA010000        <1>     jne .bad ;If not "no file found", error out
  1629                              <1> .notVolLbl:
  1630 00004625 F605(04070000)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1631 0000462C 0F84D5000000        <1>     jz .createFile
  1632 00004632 F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1633 00004639 0F8582010000        <1>     jnz .charDev    ;If its valid, just reopens it!
  1634 0000463F F605(65060000)11    <1>     test byte [curDirCopy + fatDirEntry.attribute], attrFileDir | dirReadOnly
  1635 00004646 0F85C3010000        <1>     jnz .bad    ;Cant recreate a dir or ro file!
  1636                              <1>     ;Here disk file exists, so recreating the file.
  1637 0000464C 55                  <1>     push rbp
  1638 0000464D FF35(32070000)      <1>     push qword [currentSFT]
  1639 00004653 E83DFDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1640 00004658 8F05(32070000)      <1>     pop qword [currentSFT]
  1641 0000465E 5D                  <1>     pop rbp
  1642 0000465F 0F82AA010000        <1>     jc .bad
  1643                              <1>     ;al has the char for the filename
  1644                              <1>     ;Sets vars for the sector/offset into the sector
  1645 00004665 E80B0A0000          <1>     call getCurrentSFT
  1646 0000466A 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1647 0000466C 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1648                              <1>     ;al has file attributes.
  1649 00004670 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1650 00004673 31C0                <1>     xor eax, eax
  1651                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1652 00004675 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1653 00004679 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1654 0000467D 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1655 00004680 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1656 00004683 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1657 00004686 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1658 00004689 57                  <1>     push rdi    ;Save SFT pointer
  1659 0000468A 488D3D(5A060000)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1660 00004691 B920000000          <1>     mov ecx, fatDirEntry_size
  1661 00004696 F3A4                <1>     rep movsb
  1662 00004698 E80AC2FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1663 0000469D 5F                  <1>     pop rdi
  1664                              <1> .createCommon:  ;rdi must point to the current SFT 
  1665                              <1>     ;Now populate the remaining SFT fields 
  1666 0000469E 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1667 000046A5 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1668 000046A8 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1669 000046AB 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1670 000046B2 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1671 000046B6 0FB705(4E070000)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1672 000046BD C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1673 000046C0 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1674 000046C3 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1675 000046C6 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1676 000046C9 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1677 000046CD 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1678 000046D1 C1E210              <1>     shl edx, 10h
  1679 000046D4 09D0                <1>     or eax, edx
  1680 000046D6 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1681                              <1> 
  1682 000046D9 31C0                <1>     xor eax, eax
  1683                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1684 000046DB 8A05(09070000)      <1>     mov al, byte [workingDrv]
  1685 000046E1 0C40                <1>     or al, devDiskNoFlush  ;Dont flush until it is accessed
  1686 000046E3 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1687 000046E7 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
  1688 000046EE 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1689                              <1>     ;Last thing, copy the filename over
  1690                              <1>     ;Now save the name
  1691                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1692 000046F2 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1693 000046F6 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1694 000046FD 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1695 000046FF 66A5                <1>     movsw
  1696 00004701 A4                  <1>     movsb
  1697                              <1>     ;SFT filled
  1698 00004702 E9FF000000          <1>     jmp .exit
  1699                              <1> .createFile:
  1700                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1701                              <1>     ;rsi points to current sft entry
  1702 00004707 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1703                              <1>     ;Clear out the dir entry
  1704 0000470E 57                  <1>     push rdi
  1705 0000470F B904000000          <1>     mov ecx, 4
  1706 00004714 31C0                <1>     xor eax, eax
  1707 00004716 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1708 00004719 5F                  <1>     pop rdi
  1709                              <1>     ;Copy the FCB name over    
  1710 0000471A 56                  <1>     push rsi
  1711 0000471B 57                  <1>     push rdi
  1712 0000471C B90B000000          <1>     mov ecx, 11
  1713 00004721 488D35(D9060000)    <1>     lea rsi, fcbName
  1714 00004728 F3A4                <1>     rep movsb   ;Move over the FCB name
  1715 0000472A 5F                  <1>     pop rdi
  1716 0000472B 5E                  <1>     pop rsi
  1717                              <1> 
  1718 0000472C 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1719                              <1>     ;al has file attributes.
  1720 00004730 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1721 00004733 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1722 00004736 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1723 00004739 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1724 0000473C 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1725                              <1> .searchForDirSpace:
  1726 00004742 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1727 00004748 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1728 0000474A 668905(83070000)    <1>     mov word [dirSect], ax
  1729 00004751 8905(85070000)      <1>     mov dword [dirEntry], eax
  1730 00004757 57                  <1>     push rdi
  1731                              <1> ;Needs delChar setup. We only come here for creates so already setup!
  1732 00004758 E855DCFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1733 0000475D 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1734 0000475E 7328                <1>     jnc .dirEntryFnd
  1735 00004760 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1735 00004768 0000                <1>
  1736 0000476A 0F849F000000        <1>     je .bad ;Set CF and exit
  1737 00004770 E82ADDFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1738 00004775 0F828B000000        <1>     jc .exit
  1739 0000477B 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1740 00004780 0F8489000000        <1>     je .bad
  1741                              <1>     ;Else eax = Newly allocated cluster
  1742 00004786 EBBA                <1>     jmp short .searchForDirSpace
  1743                              <1> .dirEntryFnd:
  1744 00004788 4887FE              <1>     xchg rdi, rsi
  1745 0000478B B904000000          <1>     mov ecx, 4
  1746 00004790 F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1747 00004793 E80FC1FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1748 00004798 E8D8080000          <1>     call getCurrentSFT
  1749 0000479D E9FCFEFFFF          <1>     jmp .createCommon
  1750                              <1> .open:
  1751                              <1> ;curdircopy has a copy of the disk file directory
  1752                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1753 000047A2 E8CE080000          <1>     call getCurrentSFT
  1754 000047A7 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1755                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1756 000047AE E813DCFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1757 000047B3 E9E6FEFFFF          <1>     jmp .createCommon
  1758                              <1> .openProc:
  1759                              <1>     ;Here if Opening a file. 
  1760                              <1>     ;Dirs cannot be opened through open, only for renaming.
  1761                              <1>     ;This is taken care of by openMain.
  1762 000047B8 F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  1763 000047BF 74E1                <1>     jz .open
  1764                              <1> .charDev:
  1765 000047C1 488B05(5A060000)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1766 000047C8 E81F2F0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1767 000047CD 7307                <1>     jnc .notBadCharDevName
  1768 000047CF B805000000          <1>     mov eax, errAccDen
  1769 000047D4 EB30                <1>     jmp short .exit ;CF already set
  1770                              <1> .notBadCharDevName:
  1771 000047D6 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1772 000047DD 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1773 000047E1 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1774 000047E5 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1775 000047E8 80CBC0              <1>     or bl, devCharDev | devCharNotEOF ;Set charDev & noEOF on read
  1776 000047EB 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1777 000047EF C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1778 000047F6 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1779 000047FA B820202020          <1>     mov eax, "    "
  1780 000047FF 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1781 00004803 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1782                              <1> .exit:
  1783 00004806 E8740A0000          <1>     call writeThroughBuffersForHandle
  1784 0000480B 7207                <1>     jc .bad2
  1785 0000480D 5D                  <1>     pop rbp
  1786                              <1>     return
    13                              <2> %%_ret:
    14 0000480E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1787                              <1> .bad:   ;Set Access Denied
  1788 0000480F B805000000          <1>     mov eax, errAccDen
  1789                              <1> .bad2:  ;Error propagating error code
  1790 00004814 F9                  <1>     stc
  1791 00004815 5D                  <1>     pop rbp
  1792                              <1>     return
    13                              <2> %%_ret:
    14 00004816 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1793                              <1> closeMain: ;Int 2Fh AX=1201h
  1794                              <1> ;Gets the directory entry for a file
  1795                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1796                              <1> ;If CF=CY on return: Error, return error with al = error code
  1797                              <1> ;Preserve all regs except eax and rdi
  1798                              <1> ; If CF=NC on return: eax = Unknown
  1799                              <1> ;                     rdi = current SFT ptr
  1800 00004817 E859080000          <1>     call getCurrentSFT ;Get the sft pointer
  1801 0000481C 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1802 00004820 F7C300800000        <1>     test ebx, devRedir ;Is this a network drive?
  1803 00004826 7408                <1>     jz .physical
  1804                              <1>     ;Here we beep out the request to the network redirector (Int 2Fh AX=1106h)
  1805 00004828 B806110000          <1>     mov eax, 1106h  ;Make request
  1806 0000482D CD2F                <1>     int 2Fh ;Beep!
  1807                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 0000482F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1808                              <1> .physical:  
  1809                              <1> ; We make a request to the dev dir to close the device
  1810                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1811 00004830 E87A300000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1812 00004835 E8FDDBFFFF          <1>     call updateSFTDateTimeFields
  1813 0000483A E8310A0000          <1>     call decrementOpenCount ;rdi = current SFT, returns (e)ax = old handle count
  1814 0000483F 50                  <1>     push rax
  1815 00004840 53                  <1>     push rbx
  1816 00004841 E80E390000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1817 00004846 5B                  <1>     pop rbx
  1818 00004847 58                  <1>     pop rax
  1819                              <1> flushFile:  ;Make this non-local to be jumped to by commit too!
  1820                              <1> ;Updates the Dir entry with info from SFT and flushes.
  1821                              <1> ;Closes the handle properly if only one reference to file remains.
  1822                              <1> ;Input: ax = Initial open handle count
  1823                              <1> ;       bx = device info from the SFT
  1824                              <1> ;       rdi -> Current SFT
  1825 00004848 50                  <1>     push rax    ;Save the handle count for later
  1826 00004849 66F7C3C000          <1>     test bx, devDiskNoFlush | devCharDev
  1827 0000484E 7577                <1>     jnz .notDiskBitsSet
  1828 00004850 E814DCFFFF          <1>     call getAndUpdateDirSectorForFile   ;rsi -> Buffer dir entry
  1829 00004855 B805000000          <1>     mov eax, errAccDen
  1830 0000485A 726C                <1>     jc .accDenExit
  1831 0000485C 56                  <1>     push rsi    ; -> Buffer dir entry
  1832 0000485D 57                  <1>     push rdi    ; -> SFT ptr
  1833 0000485E 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]    ;Ensure this is the right file
  1834 00004862 E812CBFFFF          <1>     call findInBuffer.nameCompare
  1835 00004867 5F                  <1>     pop rdi     ; -> SFT ptr
  1836 00004868 5E                  <1>     pop rsi     ; -> Buffer dir entry
  1837 00004869 7408                <1>     jz .dirEntryForUs
  1838                              <1> .badFileFound:
  1839 0000486B B802000000          <1>     mov eax, errFnf ;Dir entry has changed, and now file not found on medium
  1840 00004870 F9                  <1>     stc
  1841 00004871 EB55                <1>     jmp short .accDenExit
  1842                              <1> .dirEntryForUs:
  1843 00004873 0FB64E0B            <1>     movzx ecx, byte [rsi + fatDirEntry.attribute] ;Get dir file attrib
  1844 00004877 0FB64704            <1>     movzx eax, byte [rdi + sft.bFileAttrib]   ;Get SFT file attrib
  1845 0000487B F6D0                <1>     not al  ;Reverse the bits
  1846 0000487D 20C8                <1>     and al, cl  ;These should be equal
  1847 0000487F 2416                <1>     and al, dirInclusive ;And nothing outside of these should be set
  1848 00004881 75E8                <1>     jnz .badFileFound
  1849                              <1>     
  1850 00004883 804E0B20            <1>     or byte [rsi + fatDirEntry.attribute], dirArchive   ;File changed!
  1851 00004887 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
  1852 0000488A 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax ;And update field
  1853 0000488D 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
  1854 00004891 66894616            <1>     mov word [rsi + fatDirEntry.wrtTime], ax    ;And update field
  1855 00004895 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
  1856 00004899 66894618            <1>     mov word [rsi + fatDirEntry.wrtDate], ax    ;And update field
  1857 0000489D 66894612            <1>     mov word [rsi + fatDirEntry.lastAccDat], ax ;Partialy implemented
  1858 000048A1 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
  1859 000048A4 6689461A            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusLo], ax
  1860 000048A8 C1E810              <1>     shr eax, 10h
  1861 000048AB 66894614            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusHi], ax
  1862 000048AF E8F3BFFFFF          <1>     call markBufferDirty
  1863 000048B4 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]
  1864 000048BB E88BBEFFFF          <1>     call flushAllBuffersForDrive
  1865 000048C0 B805000000          <1>     mov eax, errAccDen
  1866 000048C5 7201                <1>     jc .accDenExit
  1867                              <1> .notDiskBitsSet:
  1868 000048C7 F8                  <1>     clc
  1869                              <1> .accDenExit:
  1870 000048C8 9C                  <1>     pushfq
  1871 000048C9 E8B2DDFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1872 000048CE 9D                  <1>     popfq
  1873 000048CF 59                  <1>     pop rcx ;Get back the initial open handle count
  1874 000048D0 0FB7C9              <1>     movzx ecx, cx   ;Force upper bits clear
  1875 000048D3 9C                  <1>     pushfq
  1876 000048D4 FFC9                <1>     dec ecx ;Decrement count
  1877 000048D6 7503                <1>     jnz .exit   ;If our initial count was not 1, skip resetting the count since
  1878 000048D8 66890F              <1>     mov word [rdi], cx ; decrementOpenCount didnt set it to -1
  1879                              <1> .exit:
  1880 000048DB 9D                  <1>     popfq
  1881 000048DC E8D82F0000          <1>     call dosCrit1Exit
  1882                              <1>     return
    13                              <2> %%_ret:
    14 000048E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1883                              <1> 
  1884                              <1> readBytes:
  1885                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1886                              <1> ;Input: ecx = Number of bytes to read
  1887                              <1> ;Output: ecx = Number of bytes read
  1888                              <1> ;Number of bytes read 
  1889                              <1> ;If CF=CY, return with error code in ax
  1890 000048E2 E88E070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1891 000048E7 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1892 000048EB 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1893 000048ED 3C01                <1>     cmp al, openWrAcc
  1894 000048EF 7509                <1>     jne .readable
  1895 000048F1 B805000000          <1>     mov eax, errAccDen
  1896 000048F6 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1897 000048F8 F9                  <1>     stc
  1898                              <1>     return
    13                              <2> %%_ret:
    14 000048F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1899                              <1> .readable:
  1900 000048FA E8BA070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1901 000048FF 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1902 00004902 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
  1903 00004908 740A                <1>     jz .notRedir
  1904 0000490A B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1905 0000490F CD2F                <1>     int 2Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1906                              <1>     return 
    13                              <2> %%_ret:
    14 00004911 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1907                              <1> .exitOk:
  1908 00004912 F8                  <1>     clc
  1909                              <1>     return 
    13                              <2> %%_ret:
    14 00004913 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1910                              <1> .notRedir:
  1911 00004914 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1912 0000491A 7510                <1>     jnz readCharDev
  1913 0000491C E88E2F0000          <1>     call dosCrit1Enter
  1914 00004921 E89C010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1915 00004926 E88E2F0000          <1>     call dosCrit1Exit
  1916                              <1>     return 
    13                              <2> %%_ret:
    14 0000492B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1917                              <1> readCharDev:
  1918                              <1> ;rdi points to sft for char dev to read
  1919                              <1> ;ecx has the number of bytes to transfer
  1920                              <1> ;Vars have been set up and DTA has the transfer address
  1921                              <1> ;Returns in ecx, the actual bytes transferred
  1922                              <1> ;If CF=CY, return with error code in ax
  1923 0000492C C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1924 00004933 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1925 00004937 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1926 0000493E F6C340              <1>     test bl, devCharNotEOF     ;Does our device generate EOF's on reads?
  1927 00004941 0F84C8020000        <1>     jz charReadExitOk       ;If it does, jump to exit as if EOF has been hit
  1928 00004947 F6C304              <1>     test bl, devCharNulDev  ;Is our device the NUL device?
  1929 0000494A 7407                <1>     jz .notNul
  1930                              <1>     ;If it is a new NUL device hdl, we can simply return!
  1931                              <1>     ;NUL never transfers bytes and now clears this bit to indicate EOF
  1932 0000494C 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1933 0000494E E9BC020000          <1>     jmp charReadExitOk    ;Goto exit
  1934                              <1> .notNul:
  1935 00004953 F6C320              <1>     test bl, devCharBinary
  1936 00004956 0F857F000000        <1>     jnz .binary
  1937                              <1>     ;Here if the device is in ASCII mode
  1938 0000495C F6C301              <1>     test bl, devCharConIn   ;Is this device STDIN?
  1939 0000495F 0F84D6000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1940                              <1> .consoleInput:
  1941                              <1>     ;Console input here
  1942 00004965 E815E2FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1943                              <1>     ;Get current offset into buffer (if one exists)
  1944 0000496A 488B35(2B000000)    <1>     mov rsi, qword [vConHdlOff]
  1945 00004971 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1946 00004974 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1947 00004976 803D(4E030000)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1948 0000497D 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1949                              <1>     ;Else, reset the buffer
  1950 0000497F 66C705(4E030000)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1950 00004987 FF                  <1>
  1951                              <1> .oldBuf:
  1952                              <1> ;Preserve the dta and number of chars to tfr
  1953 00004988 51                  <1>     push rcx
  1954 00004989 57                  <1>     push rdi
  1955 0000498A 488D15(4E030000)    <1>     lea rdx, vConInBuf
  1956 00004991 E807E2FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1957 00004996 5F                  <1>     pop rdi
  1958 00004997 59                  <1>     pop rcx
  1959 00004998 488D35(50030000)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1960 0000499F 803E1A              <1>     cmp byte [rsi], EOF
  1961 000049A2 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1962 000049A4 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1963 000049A7 B00A                <1>     mov al, LF
  1964 000049A9 E85FDDFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1965 000049AE 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1966 000049B0 EB18                <1>     jmp short .exit
  1967                              <1> .tfrBuf:
  1968 000049B2 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1969 000049B3 AA                  <1>     stosb
  1970 000049B4 3C0D                <1>     cmp al, CR 
  1971 000049B6 7503                <1>     jne .noCRLF
  1972 000049B8 C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1973                              <1> .noCRLF:
  1974 000049BB 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1975 000049BD E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1976 000049BF 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1977                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1978 000049C1 E847DDFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1979 000049C6 31F6                <1>     xor esi, esi
  1980 000049C8 0C01                <1>     or al, 1    ;Set ZF = NZ
  1981                              <1> .exit:
  1982 000049CA E8C6E1FFFF          <1>     call vConRetDriver
  1983 000049CF 488935(2B000000)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1984                              <1>     ;Only return with ZF=ZE if first char in buffer was EOF
  1985 000049D6 E934020000          <1>     jmp charReadExitOk    ;Exit ok! ecx has # chars tfred
  1986                              <1> 
  1987                              <1> .binary:
  1988                              <1>     ;Setup registers for transfer
  1989 000049DB 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1990 000049DE 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1991                              <1>     ;ecx has the number of bytes to transfer directly
  1992 000049E1 E8D4280000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1993 000049E6 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1994 000049ED E880250000          <1>     call goDriver   ;Make the request
  1995 000049F2 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1996 000049F5 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status] ;Get status word in di
  1997 000049FC F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1998 00004A02 7420                <1>     jz .binNoError
  1999                              <1>     ;ERROR HERE! Prepare for Int 24h (if SFT allows us to issue Int 24h)
  2000 00004A04 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  2001 00004A06 E8301F0000          <1>     call charDevErr   ;ah = has part of the error 
  2002                              <1>     ;al now has the response
  2003 00004A0B 3C00                <1>     cmp al, critIgnore
  2004 00004A0D 7415                <1>     je .binNoError ;Simply proceed as normal
  2005 00004A0F 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  2006 00004A12 3C03                <1>     cmp al, critFail
  2007 00004A14 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  2008                              <1>     ;Fallthrough here for fail!
  2009                              <1> .failExit:
  2010 00004A16 E85A060000          <1>     call getCurrentSFT
  2011 00004A1B 31C9                <1>     xor ecx, ecx
  2012 00004A1D B805000000          <1>     mov eax, errAccDen
  2013 00004A22 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  2014                              <1>     return
    13                              <2> %%_ret:
    14 00004A23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2015                              <1> .binNoError:
  2016                              <1>     ;Get number of bytes transferred into 
  2017 00004A24 8B05(D7040000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]   ;Get bytes transferred
  2018 00004A2A F7D8                <1>     neg eax ;make it into -eax
  2019 00004A2C 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  2020                              <1>     ;ecx now has bytes left to transfer
  2021 00004A30 50                  <1>     push rax    ;Save value on stack
  2022 00004A31 31C0                <1>     xor eax, eax ;Set ZF
  2023 00004A33 FFC0                <1>     inc eax ;Clear ZF
  2024 00004A35 58                  <1>     pop rax ;Get back the original value
  2025 00004A36 E9D4010000          <1>     jmp charReadExitOk    ;GoExit with ecx=Bytes left to read. ZF=NZ always
  2026                              <1> .generalASCII:
  2027                              <1>     ;ecx has bytes to transfer here
  2028                              <1>     ;Setup registers for transfer
  2029 00004A3B 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  2030 00004A3E 51                  <1>     push rcx
  2031 00004A3F B901000000          <1>     mov ecx, 1  ;Get one char
  2032 00004A44 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2033 00004A47 E86E280000          <1>     call primReqReadSetup   ;Setup request
  2034 00004A4C 59                  <1>     pop rcx
  2035                              <1>     ;rbx now has request header ptr
  2036 00004A4D 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  2037                              <1> .asciiReadChar:
  2038 00004A54 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  2039 00004A57 E8A6E0FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  2040 00004A5C E811250000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  2041 00004A61 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status] ;Get status word in di
  2042 00004A68 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  2043 00004A6E 7420                <1>     jz .asciiNoError
  2044 00004A70 B486                <1>     mov ah, critCharDev | critData
  2045 00004A72 E8C41E0000          <1>     call charDevErr    ;Call Int 24h, ecx preserved
  2046                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  2047 00004A77 C705(D7040000)0100- <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], 1
  2047 00004A7F 0000                <1>
  2048 00004A81 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  2049 00004A84 3C03                <1>     cmp al, critFail
  2050 00004A86 748E                <1>     je .failExit
  2051 00004A88 3C01                <1>     cmp al, critRetry
  2052 00004A8A 74C8                <1>     je .asciiReadChar
  2053                              <1>     ;Ignore here, pretend NULL CHAR was read
  2054 00004A8C 30C0                <1>     xor al, al
  2055 00004A8E EB15                <1>     jmp short .asciiIgnoreEP
  2056                              <1> .asciiNoError:
  2057                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  2058                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  2059                              <1> ;Preserve RBX, RSI
  2060                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  2061 00004A90 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  2062 00004A93 813D(D7040000)0100- <1>     cmp dword [primReqPkt + ioReqPkt.tfrlen], 1
  2062 00004A9B 0000                <1>
  2063 00004A9D 0F856C010000        <1>     jne charReadExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  2064 00004AA3 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  2065                              <1> .asciiIgnoreEP:
  2066 00004AA5 48FF05(CF040000)    <1>     inc qword [primReqPkt + ioReqPkt.bufptr]   ;Goto next char position
  2067 00004AAC 48FFC7              <1>     inc rdi ;Also advance register pointer
  2068 00004AAF 3C1A                <1>     cmp al, EOF ;Was the char just read EOF?
  2069 00004AB1 0F8458010000        <1>     je charReadExitOk   ;Exit if so!
  2070 00004AB7 3C0D                <1>     cmp al, CR  ;Was this char CR?
  2071 00004AB9 E099                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  2072                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  2073 00004ABB FEC0                <1>     inc al  ;make ZF=NZ
  2074 00004ABD E94D010000          <1>     jmp charReadExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  2075                              <1> 
  2076                              <1> readDiskFile:
  2077                              <1> ;rdi = Current SFT
  2078                              <1> ;rbp = WorkingDPB
  2079                              <1> ;ecx = Bytes to transfer
  2080 00004AC2 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  2081 00004AC9 C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Read operation
  2082                              <1>     ;We have the following vars setup:
  2083                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  2084                              <1>     ;currClustF
  2085                              <1>     ;Now convert currSectC to disk sector by using currClustF
  2086                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  2087 00004AD0 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  2088 00004AD3 85D2                <1>     test edx, edx
  2089 00004AD5 0F843F010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  2090 00004ADB 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2091 00004AE1 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  2092 00004AE4 8905(54070000)      <1>     mov dword [currClustD], eax
  2093 00004AEA 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  2094 00004AEC 0F8428010000        <1>     jz readExitOk
  2095 00004AF2 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  2096 00004AF7 0F841D010000        <1>     jz readExitOk   
  2097 00004AFD 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  2098                              <1>     ;Check if we have opened a volume label (should never happen)
  2099 00004B03 F6470408            <1>     test byte [rdi + sft.bFileAttrib], attrFileVolLbl    ;If we try read from vollbl
  2100 00004B07 7407                <1>     jz .shareCheck
  2101 00004B09 B805000000          <1>     mov eax, errAccDen
  2102 00004B0E F9                  <1>     stc
  2103                              <1>     return
    13                              <2> %%_ret:
    14 00004B0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2104                              <1> .shareCheck:
  2105                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  2106 00004B10 E846360000          <1>     call retryShareIODelay
  2107 00004B15 7308                <1>     jnc .shareOk
  2108 00004B17 E8DD360000          <1>     call shareCheckReadLockViolation
  2109 00004B1C 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  2110                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 00004B1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2111                              <1> .shareOk:
  2112 00004B1F E8C8BBFFFF          <1>     call markBuffersAsUnreferencedWrapper
  2113 00004B24 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  2114 00004B26 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  2115 00004B28 7426                <1>     jz .skipWalk
  2116                              <1> .goToCurrentCluster:
  2117 00004B2A E8F4C1FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2118 00004B2F 0F82CB000000        <1>     jc .readBadExit   ;This can only return Fail
  2119 00004B35 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  2120 00004B3A 0F84DA000000        <1>     je readExitOk ;Exit with no bytes transferred
  2121 00004B40 8905(54070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2122 00004B46 FFCA                <1>     dec edx ;Decrement counter
  2123 00004B48 75E0                <1>     jnz .goToCurrentCluster
  2124 00004B4A 8B05(54070000)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  2125                              <1> .skipWalk:
  2126 00004B50 E83CBFFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2127                              <1>     ;Now we add the offset to this
  2128 00004B55 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2129 00004B5C 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2130 00004B5F 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2131                              <1> ;Main
  2132                              <1> .mainRead:
  2133 00004B66 E8BB000000          <1>     call diskIOGetBuffer
  2134 00004B6B 0F828F000000        <1>     jc .readBadExit
  2135 00004B71 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  2136 00004B75 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2137 00004B7C 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  2138                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2139                              <1>     ; 1) Bytes left in sector size, 2) Bytes left in File, 
  2140                              <1>     ; 3) Bytes left to read from Request
  2141                              <1> 
  2142 00004B7F 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  2143 00004B82 2B0D(67070000)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  2144 00004B88 8B1D(77070000)      <1>     mov ebx, dword [tfrCntr]
  2145 00004B8E 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  2146 00004B90 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  2147 00004B93 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  2148 00004B97 662B1D(65070000)    <1>     sub bx, word [currByteS]    ;Remove the number of bytes into the sector we are
  2149 00004B9E 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  2150 00004BA0 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  2151                              <1>     
  2152 00004BA3 57                  <1>     push rdi
  2153 00004BA4 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
  2154 00004BAB 51                  <1>     push rcx
  2155 00004BAC F3A4                <1>     rep movsb
  2156 00004BAE 59                  <1>     pop rcx
  2157 00004BAF 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2158 00004BB5 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2159 00004BBB 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2160 00004BC2 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2161 00004BC8 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2162 00004BCC 31D2                <1>     xor edx, edx    ;Zero rdx
  2163 00004BCE F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2164 00004BD0 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2165 00004BD7 5F                  <1>     pop rdi
  2166 00004BD8 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2167 00004BDE 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2168 00004BE0 7438                <1>     jz readExitOk ;Exit if so!
  2169 00004BE2 E87DC0FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  2170 00004BE7 7217                <1>     jc .readBadExit
  2171                              <1>     ;If ZF=ZE then currClustF has last cluster
  2172 00004BE9 742F                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  2173                              <1>     ;Else repeat
  2174                              <1>     ;currSectD has been updated, we now set currByteS = 0
  2175 00004BEB 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2175 00004BF3 00                  <1>
  2176 00004BF4 488B05(5D070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2177 00004BFB E966FFFFFF          <1>     jmp .mainRead
  2178                              <1> .readBadExit:
  2179                              <1>     ;When a disk error occurs within the bit where vars have changed,
  2180                              <1>     ; we need to update the SFT before returning
  2181 00004C00 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  2182 00004C06 30C0                <1>     xor al, al  ;Set ZF flag
  2183 00004C08 E80D000000          <1>     call readExitOk   ;We call this
  2184 00004C0D F9                  <1>     stc ;All calls which end up here return Fail!
  2185 00004C0E C3                  <1>     ret
  2186                              <1> charReadExitOk:
  2187                              <1> ;Input: ecx = Number of bytes left to transfer!
  2188                              <1> ;       ZF=ZE => Ensure we reach "EOF" on char device!
  2189                              <1> ;       ZF=NZ => preserve bit 6
  2190 00004C0F 7509                <1>     jnz readExitOk
  2191 00004C11 E85F040000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  2192 00004C16 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~devCharNotEOF ;Set that we at End of file!
  2193                              <1> readExitOk: ;Disk xfrs always go here. Binary char too but by bouncing!
  2194                              <1> ;Input: ecx = Number of bytes left to transfer! 
  2195 00004C1A 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2196 00004C20 E858040000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2197                              <1>     return 
    13                              <2> %%_ret:
    14 00004C25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2198                              <1> 
  2199                              <1> diskIOGetBuffer:
  2200                              <1> ;If appropriate, checks if the user has typed a ^C at the console.
  2201                              <1> ; Then reads the specified sector into a buffer and returns a ptr to 
  2202                              <1> ; the buffer.
  2203                              <1> ;Input: rax = Sector to get buffer for. 
  2204                              <1> ;Output:  If CF=NC: rbx -> bufHdrptr with buffer filled with sector data
  2205                              <1> ;         Else: Error
  2206 00004C26 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set
  2207 00004C2D 7407                <1>     jz .skipBreak
  2208 00004C2F 50                  <1>     push rax
  2209 00004C30 E8CDDEFFFF          <1>     call checkBreak
  2210 00004C35 58                  <1>     pop rax
  2211                              <1> .skipBreak:
  2212 00004C36 E8D6BDFFFF          <1>     call getBufForData
  2213                              <1>     return
    13                              <2> %%_ret:
    14 00004C3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2214                              <1> 
  2215                              <1> writeBytes:
  2216                              <1> ;Writes the bytes from the user buffer
  2217                              <1> ;Input: ecx = Bytes to xfr
  2218                              <1> ;Returns number of bytes written in ecx if CF=NC
  2219 00004C3C E834040000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2220 00004C41 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2221 00004C45 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2222 00004C47 3C00                <1>     cmp al, openRdAcc
  2223 00004C49 7509                <1>     jne .writeable
  2224                              <1> .noWrite:
  2225 00004C4B B805000000          <1>     mov eax, errAccDen
  2226 00004C50 31C9                <1>     xor ecx, ecx
  2227 00004C52 F9                  <1>     stc
  2228 00004C53 C3                  <1>     ret
  2229                              <1> .writeable:
  2230                              <1> ;FCB check file attributes since we can create an RO flag and write to it directly
  2231                              <1> ; but cannot open a read only file. This is redundant whilst we don't allow for 
  2232                              <1> ; FCB IO
  2233 00004C54 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB
  2234 00004C5A 7406                <1>     jz .skipAttribCheck
  2235 00004C5C 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], attrFileRO
  2236 00004C60 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2237                              <1> .skipAttribCheck:
  2238 00004C62 E852040000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2239 00004C67 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
  2240 00004C6D 7408                <1>     jz .notRedir
  2241 00004C6F B809110000          <1>     mov eax, 1109h  ;Write to redir
  2242 00004C74 CD2F                <1>     int 2Fh
  2243                              <1>     return
    13                              <2> %%_ret:
    14 00004C76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2244                              <1> .notRedir:
  2245 00004C77 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2246 00004C7D 7510                <1>     jnz writeCharDev
  2247 00004C7F E82B2C0000          <1>     call dosCrit1Enter
  2248 00004C84 E84E010000          <1>     call writeDiskFile
  2249 00004C89 E82B2C0000          <1>     call dosCrit1Exit
  2250                              <1>     return
    13                              <2> %%_ret:
    14 00004C8E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2251                              <1> writeCharDev:
  2252 00004C8F C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
  2253                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2254 00004C96 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], devCharNotEOF
  2255 00004C9C 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2256                              <1>     ;If ecx = 0, we exit
  2257 00004CA0 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2258 00004CA2 85C9                <1>     test ecx, ecx
  2259 00004CA4 0F84B3030000        <1>     jz writeExitChar
  2260 00004CAA 88D8                <1>     mov al, bl  ;Move the flags over
  2261 00004CAC 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2262 00004CB3 4889DF              <1>     mov rdi, rbx
  2263 00004CB6 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2264 00004CB8 A820                <1>     test al, devCharBinary
  2265 00004CBA 744A                <1>     jz .asciiDev
  2266                              <1> ;Write binary transfer here
  2267                              <1> .binaryLp:
  2268 00004CBC 31C0                <1>     xor eax, eax
  2269 00004CBE 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2270 00004CC1 E8E9250000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2271 00004CC6 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2272 00004CCD E89C220000          <1>     call goDriverChar
  2273 00004CD2 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2274 00004CD5 B487                <1>     mov ah, critCharDev | critData | critWrite
  2275 00004CD7 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status]  ;Get status word
  2276 00004CDE F7C700800000        <1>     test edi, drvErrStatus
  2277 00004CE4 7415                <1>     jz .binXfrOk
  2278 00004CE6 E8501C0000          <1>     call charDevErr ;Invoke Int 24h
  2279 00004CEB 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2280 00004CEE 3C00                <1>     cmp al, critIgnore
  2281 00004CF0 7409                <1>     je .binXfrOk
  2282 00004CF2 3C01                <1>     cmp al, critRetry
  2283 00004CF4 74C6                <1>     je .binaryLp
  2284 00004CF6 E9D5000000          <1>     jmp .exitFail
  2285                              <1> .binXfrOk:
  2286 00004CFB 8B05(D7040000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]
  2287 00004D01 E957030000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2288                              <1> .asciiDev:
  2289 00004D06 A802                <1>     test al, devCharConOut
  2290 00004D08 0F859E000000        <1>     jnz .conDev
  2291 00004D0E A804                <1>     test al, devCharNulDev
  2292 00004D10 0F858F000000        <1>     jnz .nulDev
  2293                              <1>     ;Here we transfer for a generic character device in ascii mode
  2294 00004D16 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2295 00004D18 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2296 00004D1B 0F843C030000        <1>     je writeExitChar
  2297 00004D21 51                  <1>     push rcx
  2298 00004D22 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2299 00004D27 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2300 00004D2A E880250000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2301 00004D2F 59                  <1>     pop rcx
  2302 00004D30 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2303 00004D37 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2304                              <1> .asciiLp:
  2305 00004D3B E8C2DDFFFF          <1>     call checkBreak
  2306 00004D40 E82D220000          <1>     call goDriver
  2307 00004D45 57                  <1>     push rdi
  2308 00004D46 B487                <1>     mov ah, critCharDev | critData | critWrite
  2309 00004D48 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status]  ;Get status word
  2310 00004D4F F7C700800000        <1>     test edi, drvErrStatus
  2311 00004D55 741D                <1>     jz .asciiNoError
  2312 00004D57 E8DF1B0000          <1>     call charDevErr ;Invoke Int 24h
  2313 00004D5C 5F                  <1>     pop rdi
  2314 00004D5D C705(D7040000)0100- <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2314 00004D65 0000                <1>
  2315 00004D67 3C01                <1>     cmp al, critRetry
  2316 00004D69 74D0                <1>     je .asciiLp
  2317 00004D6B 3C00                <1>     cmp al, critIgnore
  2318 00004D6D 7412                <1>     je .ignoreEp
  2319 00004D6F E95C000000          <1>     jmp .exitFail
  2320                              <1> .asciiNoError:
  2321 00004D74 5F                  <1>     pop rdi
  2322 00004D75 813D(D7040000)0000- <1>     cmp dword [primReqPkt + ioReqPkt.tfrlen], 0
  2322 00004D7D 0000                <1>
  2323 00004D7F 741D                <1>     je .bytesXfrdOk
  2324                              <1> .ignoreEp:
  2325 00004D81 FFC2                <1>     inc edx ;One more char has been xfrd
  2326 00004D83 FF05(CF040000)      <1>     inc dword [primReqPkt + ioReqPkt.bufptr]    ;Increment buffer ptr
  2327 00004D89 48FFC7              <1>     inc rdi ;And our copy... 
  2328 00004D8C 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2329 00004D8F 740D                <1>     je .bytesXfrdOk
  2330 00004D91 66C705(C4040000)00- <1>     mov word [primReqPkt + ioReqPkt.status], 0
  2330 00004D99 00                  <1>
  2331 00004D9A FFC9                <1>     dec ecx
  2332 00004D9C 759D                <1>     jnz .asciiLp
  2333                              <1> .bytesXfrdOk:
  2334 00004D9E 89D0                <1>     mov eax, edx
  2335 00004DA0 E9B8020000          <1>     jmp writeExitChar
  2336                              <1> .nulDev:
  2337 00004DA5 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2338 00004DA7 E9B1020000          <1>     jmp writeExitChar
  2339                              <1> .conDev:
  2340 00004DAC E8CEDDFFFF          <1>     call vConSwapDriver
  2341 00004DB1 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2342 00004DB4 51                  <1>     push rcx
  2343                              <1> .conDevLp:
  2344 00004DB5 AC                  <1>     lodsb
  2345 00004DB6 3C1A                <1>     cmp al, EOF
  2346 00004DB8 7409                <1>     je .conDevExit
  2347 00004DBA E84ED9FFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2348 00004DBF FFC9                <1>     dec ecx
  2349 00004DC1 75F2                <1>     jnz .conDevLp
  2350                              <1> .conDevExit:
  2351 00004DC3 58                  <1>     pop rax ;Get initial ecx back into eax
  2352 00004DC4 29C8                <1>     sub eax, ecx
  2353 00004DC6 E8CADDFFFF          <1>     call vConRetDriver
  2354 00004DCB E98D020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2355                              <1> .exitFail:
  2356 00004DD0 B805000000          <1>     mov eax, errAccDen
  2357 00004DD5 F9                  <1>     stc
  2358                              <1>     return
    13                              <2> %%_ret:
    14 00004DD6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2359                              <1> writeDiskFile:
  2360                              <1>     ;rdi has SFT ptr
  2361 00004DD7 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2362 00004DDD C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk 
  2363 00004DE4 C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Write operation
  2364 00004DEB 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2365 00004DF1 75DD                <1>     jnz writeCharDev.exitFail ;Recycle the error above!
  2366 00004DF3 85C9                <1>     test ecx, ecx
  2367 00004DF5 7505                <1>     jnz .nonZeroWrite
  2368 00004DF7 B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0, check for no locks
  2369                              <1> .nonZeroWrite:
  2370                              <1>     ;Now do share check here
  2371 00004DFC E85A330000          <1>     call retryShareIODelay
  2372 00004E01 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2373 00004E03 E8E8330000          <1>     call shareCheckWriteLockViolation
  2374 00004E08 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2375                              <1>     return  ;Else return with CF=CY
    13                              <2> %%_ret:
    14 00004E0A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2376                              <1> .proceedWithWrite:
  2377                              <1> ;Ensure that we update the directory entry after this write
  2378 00004E0B 66816705BFBF        <1>     and word [rdi + sft.wDeviceInfo], ~(devCharNotEOF|devDiskNoDTonClose)
  2379                              <1> ;Ensure that all buffers are now unreferenced
  2380 00004E11 E8D6B8FFFF          <1>     call markBuffersAsUnreferencedWrapper
  2381 00004E16 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2382                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2383 00004E19 85C0                <1>     test eax, eax
  2384 00004E1B 7516                <1>     jnz .notStart
  2385 00004E1D E8ECBCFFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2386                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004E22 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004E24 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2387 00004E25 3DFFFFFFFF          <1>     cmp eax, -1         ;Disk full?
  2388 00004E2A 0F8475010000        <1>     je writeDiskFullExit
  2389                              <1>     ;Now eax has the first cluster of chain
  2390 00004E30 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2391                              <1> .notStart:
  2392                              <1> ;eax has the start cluster of the file
  2393                              <1> ;Now we go to CurntOff
  2394 00004E33 8905(54070000)      <1>     mov dword [currClustD], eax ;Store in var
  2395 00004E39 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2396 00004E3F 85D2                <1>     test edx, edx   ;If the fileptr is in the first cluster, already there
  2397 00004E41 7442                <1>     jz .atCluster
  2398 00004E43 E88E000000          <1>     call .walkFAT   ;Walks the fat, gets the next cluster in eax
  2399                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004E48 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004E4A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2400 00004E4B 3DFFFFFFFF          <1>     cmp eax, -1     ;Not EOC, eax = the cluster we need to be at
  2401 00004E50 7533                <1>     jne .atCluster
  2402 00004E52 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
  2403 00004E59 7505                <1>     jne .haveFreeClustCnt
  2404 00004E5B E889BDFFFF          <1>     call findFreeClusterData
  2405                              <1> .haveFreeClustCnt:
  2406 00004E60 395531              <1>     cmp dword [rbp + dpb.dFreeClustCnt], edx
  2407 00004E63 0F823C010000        <1>     jb writeDiskFullExit
  2408                              <1>     ;Here we know we have enough clusters to allocate to the file,
  2409                              <1>     ; so just roll with it. 
  2410 00004E69 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get the current disk cluster 
  2411 00004E6F 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2412 00004E71 89D1                <1>     mov ecx, edx    ;Allocate the remainder of clusters!
  2413 00004E73 E8C5BCFFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2414                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004E78 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004E7A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2415 00004E7B 89D8                <1>     mov eax, ebx    ;Move the start sector for the walk back
  2416 00004E7D E854000000          <1>     call .walkFAT   ;Walks the fat, gets the next cluster in eax
  2417                              <1>     retc    
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004E82 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004E84 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2418                              <1> .atCluster:
  2419                              <1> ;Fall here with the sector number in eax
  2420 00004E85 E807BCFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2421                              <1>     ;Now we add the offset to this
  2422 00004E8A 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2423 00004E91 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2424 00004E94 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2425 00004E9B 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2426 00004EA1 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2427 00004EA3 754C                <1>     jnz .mainWrite  
  2428                              <1> ;Here we have a zero byte write, so either truncate or have an extend.
  2429                              <1> ;Zero byte writes do not sanitise! Filesize=Filepointer in this case
  2430                              <1> ;CurrentOffset < Filesize means truncate. Else, we extend.
  2431 00004EA5 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2432 00004EA8 3B4717              <1>     cmp eax, dword [rdi + sft.dFileSize]
  2433 00004EAB 7311                <1>     jae .extend
  2434                              <1> ;Here we truncate!
  2435 00004EAD 8B05(54070000)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2436 00004EB3 E80ABEFFFF          <1>     call truncateFAT    ;Truncate from current cluster setting it to EOC
  2437                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004EB8 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004EBA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2438 00004EBB 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2439                              <1> .extend:
  2440 00004EBE 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2441                              <1> ;writeExitNoByte
  2442 00004EC1 E8B7010000          <1>     call updateCurrentSFT   ;Update the cluster information in the SFT
  2443 00004EC6 B802000000          <1>     mov eax, 2  ;Update all SFTs with the shrinking of the file
  2444 00004ECB FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2445 00004ED1 E976010000          <1>     jmp writeDoCommit   ;Now check if we should do a commit, or just return
  2446                              <1> .walkFAT:
  2447                              <1> ;Input: eax = Cluster to start walking from
  2448                              <1> ;Output: If eax = -1: currClustD is the cluster we just read
  2449                              <1> ;        Else: currClustD = eax is the cluster value we are at
  2450                              <1> ;       edx = Number of clusters left (0 or #toAllocate)
  2451                              <1> ;If CF=CY, hard error, fail!
  2452 00004ED6 E848BEFFFF          <1>     call readFAT
  2453                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004EDB 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004EDD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2454 00004EDE 3DFFFFFFFF          <1>     cmp eax, -1 ;Is the next cluster an EOC?
  2455 00004EE3 740A                <1>     je .wFatExit    ;Return if so
  2456 00004EE5 8905(54070000)      <1>     mov dword [currClustD], eax     ;Else, save eax as current cluster
  2457 00004EEB FFCA                <1>     dec edx                         ;Decrement counter
  2458 00004EED 75E7                <1>     jnz .walkFAT                    ;If we still have to walk, do it again!
  2459                              <1> .wFatExit:
  2460 00004EEF F8                  <1>     clc ;Dont remove, need this because of the compare above!!
  2461                              <1>     return
    13                              <2> %%_ret:
    14 00004EF0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2462                              <1> .mainWrite:
  2463 00004EF1 E830FDFFFF          <1>     call diskIOGetBuffer
  2464 00004EF6 0F8214010000        <1>     jc writeBadExit
  2465 00004EFC 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2466 00004F00 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2467 00004F07 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2468                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2469                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2470                              <1>     ; 3) Number of bytes left free in the sector
  2471 00004F0A 31C0                <1>     xor eax, eax
  2472 00004F0C 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2473 00004F10 89D8                <1>     mov eax, ebx
  2474 00004F12 662B05(65070000)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2475 00004F19 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]
  2476                              <1> 
  2477 00004F1F 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2478 00004F21 0F47CB              <1>     cmova ecx, ebx
  2479 00004F24 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2480 00004F26 0F47C8              <1>     cmova ecx, eax
  2481                              <1> 
  2482 00004F29 56                  <1>     push rsi
  2483 00004F2A 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
  2484 00004F31 51                  <1>     push rcx
  2485 00004F32 F3A4                <1>     rep movsb
  2486 00004F34 59                  <1>     pop rcx
  2487 00004F35 E86DB9FFFF          <1>     call markBufferDirty   ;Preserves all CPU state, this buffer is now dirty
  2488                              <1> 
  2489 00004F3A 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2490 00004F40 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2491 00004F46 488935(17040000)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2492 00004F4D 5E                  <1>     pop rsi
  2493                              <1> 
  2494 00004F4E 8B05(73070000)      <1>     mov eax, dword [tfrLen] ;Get total length
  2495 00004F54 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2496 00004F5A 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2497 00004F5C 0F84B7000000        <1>     jz writeExit
  2498 00004F62 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2498 00004F6A 00                  <1>
  2499 00004F6B E8F4BCFFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2500 00004F70 0F829A000000        <1>     jc writeBadExit
  2501 00004F76 0F8575FFFFFF        <1>     jnz .mainWrite   ;Else, rax = Next sector to write to
  2502                              <1>     ;Here we need to extend by a cluster since we are at the end of the 
  2503                              <1>     ; current allocation chain
  2504 00004F7C 8B1D(54070000)      <1>     mov ebx, dword [currClustD] ;Setup last cluster value in ebx
  2505 00004F82 B901000000          <1>     mov ecx, 1  ;Append one more cluster to it!
  2506 00004F87 E8B1BBFFFF          <1>     call allocateClusters
  2507 00004F8C 0F827E000000        <1>     jc writeBadExit
  2508 00004F92 3DFFFFFFFF          <1>     cmp eax, -1 ;If we cannot allocate any more clusters, disk full!
  2509 00004F97 740C                <1>     je writeDiskFullExit  ;End write in this case!
  2510                              <1> ;Else we just allocated a new cluster to the chain, so we have a sector to 
  2511                              <1> ; write to! 
  2512                              <1> ;The cluster state has not changed due to the allocate clusters call.
  2513 00004F99 E8C6BCFFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2514 00004F9E 7270                <1>     jc writeBadExit
  2515 00004FA0 E94CFFFFFF          <1>     jmp .mainWrite    ;rax = Next sector to write to
  2516                              <1> writeDiskFullExit:
  2517 00004FA5 E8CB000000          <1>     call getCurrentSFT  ;Get SFT pointer into rdi
  2518 00004FAA 66F747050001        <1>     test word [rdi + sft.wDeviceInfo], devDiskI24onFull
  2519 00004FB0 746C                <1>     jz writeExit.altEp  ;If no trigger Int 24h, return success. rdi -> SFT
  2520                              <1> ;Else trigger Int 24h.
  2521                              <1> ;Start by setting the allowed actions.
  2522                              <1> ;Due to the disk being full, we ONLY allow the user to Fail.
  2523 00004FB2 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]    ;Get drive number in al
  2524 00004FB9 0D000F0000          <1>     or eax, (critWrite | critData | critFailOK) << 8    ;Move to ah
  2525 00004FBE 8825(68040000)      <1>     mov byte [Int24bitfld], ah  ;Store the bitfield var
  2526 00004FC4 66C705(0B040000)26- <1>     mov word [errorExCde], errDskFul
  2526 00004FCC 00                  <1>
  2527 00004FCD C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
  2528 00004FD4 C605(0D040000)04    <1>     mov byte [errorAction], eActAbt
  2529 00004FDB C605(0E040000)01    <1>     mov byte [errorClass], eClsOoR
  2530 00004FE2 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save the DPB pointer here (if a disk file)
  2531 00004FE9 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2532 00004FEF 750A                <1>     jnz .i24CharDev
  2533 00004FF1 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the DPB pointer from the SFT
  2534 00004FF5 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get Driver pointer
  2535 00004FF9 EB04                <1>     jmp short .i24Go
  2536                              <1> .i24CharDev:
  2537 00004FFB 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the char drive pointer
  2538                              <1> .i24Go:
  2539 00004FFF BF0C000000          <1>     mov edi, drvGenFault    ;Report general fault to driver
  2540 00005004 E8D9190000          <1>     call criticalDOSError   ;Trigger i24
  2541 00005009 B826000000          <1>     mov eax, errDskFul      ;and return to caller a disk full error
  2542 0000500E EB05                <1>     jmp short writeBadExit.diskFull
  2543                              <1> writeBadExit:
  2544 00005010 B805000000          <1>     mov eax, errAccDen      ;Normally return Access denied
  2545                              <1> .diskFull:
  2546                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  2547                              <1> ;Old action
  2548                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  2549                              <1> ;Here we preserve the error code in eax on stack in the event that the 
  2550                              <1> ; possible commit operation in writeExit also fails, as this will return
  2551                              <1> ; its own error code.
  2552                              <1> ;    push rax        
  2553                              <1> ;    call writeExit
  2554                              <1> ;    pop rax
  2555                              <1> ;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  2556                              <1> ;New action
  2557                              <1> ;-----------------------------------------------------------------------
  2558                              <1> ;If we hard error in write we should return WITHOUT modifying the file
  2559                              <1> ; size information. Users should always follow a hard error on write with 
  2560                              <1> ; a zero byte write to ensure that any newly allocated FAT sectors are 
  2561                              <1> ; freed.
  2562 00005015 31C9                <1>     xor ecx, ecx
  2563 00005017 F9                  <1>     stc             
  2564                              <1>     return          ;Return CF=CY and eax = Original Error code
    13                              <2> %%_ret:
    14 00005018 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2565                              <1> 
  2566                              <1> writeExit:
  2567                              <1> ;Advances the bytes on the file pointer and commits file if opened to do so!
  2568                              <1> ;Return: ecx = Number of bytes transferred if CF=NC. Else, eax = Error code
  2569 00005019 E857000000          <1>     call getCurrentSFT  ;Get SFT in rdi
  2570                              <1> .altEp: ;Exits skipping getting the SFT
  2571 0000501E E85A000000          <1>     call updateCurrentSFT   ;Updates CurntOff in the SFT. Get xfr cnt in ecx
  2572 00005023 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2573                              <1>     retnz           ;Return if char dev. No commit possible here.
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00005029 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000502B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2574 0000502C 85C9                <1>     test ecx, ecx   ;If no bytes transferred, no growth to report!
  2575 0000502E 741C                <1>     jz writeDoCommit    ;But still commit any dirty buffers (ie for FAT growth)
  2576 00005030 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~devDiskNoFlush ;File has been accessed
  2577                              <1> ;Now replace the filesize with the currentoffset if it is greater
  2578 00005036 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2579 00005039 394717              <1>     cmp dword [rdi + sft.dFileSize], eax    
  2580 0000503C 730E                <1>     jae writeDoCommit   ;If past the end of the file, update the file size!
  2581 0000503E 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2582 00005041 B801000000          <1>     mov eax, 1  ;Update all SFTs with the growth of the file!
  2583 00005046 FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2584                              <1> writeDoCommit:
  2585                              <1> ;Common good exit routine for write
  2586 0000504C 66F747020040        <1>     test word [rdi + sft.wOpenMode], openFlushWrites
  2587                              <1>     retz    ;If we don't flush on each write call, return here!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00005052 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00005054 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2588 00005055 51                  <1>     push rcx
  2589 00005056 E80FEEFFFF          <1>     call commitMain ;If this fails, return CF=CY and eax = Error code
  2590 0000505B 59                  <1>     pop rcx ;Else, ecx is preserved so return ecx = # bytes xfred
  2591                              <1>     return
    13                              <2> %%_ret:
    14 0000505C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2592                              <1> writeExitChar:
  2593                              <1> ;Input: eax = Number of chars transferred
  2594 0000505D 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2595 00005063 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2596 00005065 890D(77070000)      <1>     mov dword [tfrCntr], ecx
  2597 0000506B EBAC                <1>     jmp short writeExit
  2598                              <1> ;-----------------------------------:
  2599                              <1> ;        File Handle routines       :
  2600                              <1> ;-----------------------------------:
  2601                              <1> 
  2602                              <1> setCurrentSFT:
  2603                              <1> ;Set the pointer in rdi as current SFT 
  2604 0000506D 48893D(32070000)    <1>     mov qword [currentSFT], rdi
  2605                              <1>     return 
    13                              <2> %%_ret:
    14 00005074 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2606                              <1> getCurrentSFT:
  2607                              <1> ;Get the current SFT pointer in rdi
  2608 00005075 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2609                              <1>     return 
    13                              <2> %%_ret:
    14 0000507C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2610                              <1> updateCurrentSFT:
  2611                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2612                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2613 0000507D 57                  <1>     push rdi
  2614 0000507E E8F2FFFFFF          <1>     call getCurrentSFT
  2615                              <1> ;Get in ecx the number of bytes we xferred
  2616 00005083 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2617 00005089 F7D9                <1>     neg ecx ;Multiply by -1
  2618 0000508B 030D(73070000)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2619                              <1> ;ecx has bytes transferred
  2620 00005091 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2621 00005097 751D                <1>     jnz .exit
  2622                              <1> ;Down here for disk files only!
  2623 00005099 50                  <1>     push rax
  2624 0000509A 8B05(54070000)      <1>     mov eax, dword [currClustD]
  2625 000050A0 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2626 000050A3 8B05(50070000)      <1>     mov eax, dword [currClustF]
  2627 000050A9 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2628 000050AC 8B05(67070000)      <1>     mov eax, dword [currByteF]
  2629 000050B2 89471B              <1>     mov dword [rdi + sft.dCurntOff], eax
  2630 000050B5 58                  <1>     pop rax
  2631                              <1> .exit:
  2632 000050B6 5F                  <1>     pop rdi
  2633 000050B7 F8                  <1>     clc
  2634                              <1>     return 
    13                              <2> %%_ret:
    14 000050B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2635                              <1> 
  2636                              <1> setupVarsForTransfer:
  2637                              <1> ;Computes the actual bytes to be transferred and 
  2638                              <1> ; sets up internal variables for the transfer. 
  2639                              <1> ;Works for both reading and writing
  2640                              <1> ;Input: ecx = User desired Bytes to transfer
  2641                              <1> ;       rdi = SFT pointer for the file
  2642                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2643                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2644                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2645                              <1> ;
  2646                              <1> ;Note: Does not account for a FULL disk. When writing,
  2647                              <1> ; if the disk will get full as a result of the write,
  2648                              <1> ; stop at the last byte before the transfer. If the 
  2649                              <1> ; file pointer is past the last free byte, write 0
  2650 000050B9 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2651 000050BD 488935(0A070000)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2652 000050C4 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2653 000050C7 8905(67070000)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2654 000050CD 890D(73070000)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2655 000050D3 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2656 000050D9 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedir | devCharDev
  2657                              <1>     retnz   ;Redir and char devices leave here
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000050DF 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000050E1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2658                              <1> ;Disk files...
  2659 000050E2 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2660 000050E5 8905(67070000)      <1>     mov dword [currByteF], eax
  2661 000050EB 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2662                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2663 000050EF 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2664 000050F6 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2665 000050F9 881D(09070000)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2666 000050FF 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2667 00005105 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2668 00005109 31D2                <1>     xor edx, edx    ;Zero rdx
  2669 0000510B F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2670                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2671                              <1>     ;edx has the offset into that sector
  2672 0000510D 8905(58070000)      <1>     mov dword [currSectF], eax
  2673 00005113 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2674 0000511A 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2675 0000511C 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2676 0000511F 8805(5C070000)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2677 00005125 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2678 00005127 8A4D05              <1>     mov cl, byte [rbp + dpb.bSecPerClustShift]
  2679 0000512A D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2680 0000512C 8915(50070000)      <1>     mov dword [currClustF], edx ;Save in var
  2681 00005132 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2682                              <1>     return 
    13                              <2> %%_ret:
    14 00005134 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2683                              <1> 
  2684                              <1> findFreeSFT:
  2685                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2686                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2687                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2688                              <1> ;        CF=CY => eax = errNhl, error exit
  2689 00005135 31DB                <1>     xor ebx, ebx
  2690                              <1> .mainLp:
  2691 00005137 53                  <1>     push rbx    ;Save the sft ndx
  2692 00005138 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2693 0000513D 5B                  <1>     pop rbx
  2694 0000513E 7307                <1>     jnc .sftExists
  2695 00005140 B804000000          <1>     mov eax, errNhl
  2696 00005145 F9                  <1>     stc
  2697                              <1>     return
    13                              <2> %%_ret:
    14 00005146 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2698                              <1> .sftExists:
  2699 00005147 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2700 0000514C 7427                <1>     je .sftFound
  2701 0000514E 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2702 00005153 751C                <1>     jne .gotoNextNdx
  2703                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2704 00005155 53                  <1>     push rbx
  2705 00005156 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2706 0000515D 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2707 00005161 750B                <1>     jne .netGoToNextNdx
  2708 00005163 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2709 0000516A 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2710                              <1> .netGoToNextNdx:
  2711 0000516E 5B                  <1>     pop rbx
  2712 0000516F 7404                <1>     je .sftFound
  2713                              <1> .gotoNextNdx:
  2714 00005171 FFC3                <1>     inc ebx
  2715 00005173 EBC2                <1>     jmp short .mainLp
  2716                              <1> .sftFound:
  2717 00005175 53                  <1>     push rbx
  2718 00005176 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2719 0000517B 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2720 00005182 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2721 00005186 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2722 0000518D 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2723 00005191 5B                  <1>     pop rbx
  2724 00005192 F8                  <1>     clc
  2725                              <1>     return
    13                              <2> %%_ret:
    14 00005193 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2726                              <1> getSFTPtrfromSFTNdx:    ;Int 2Fh AX=1216h
  2727                              <1> ;Return a pointer to the SFT entry in rdi
  2728                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2729                              <1> ;Output: rdi = SFT pointer
  2730 00005194 488B3D(43000000)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2731                              <1> .walk:
  2732 0000519B 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2733 0000519F 7212                <1>     jb .thisTable
  2734 000051A1 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2735 000051A5 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2736 000051A8 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2737 000051AF 75EA                <1>     jne .walk
  2738 000051B1 F9                  <1>     stc
  2739                              <1>     return
    13                              <2> %%_ret:
    14 000051B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2740                              <1> .thisTable:
  2741 000051B3 50                  <1>     push rax
  2742 000051B4 52                  <1>     push rdx
  2743 000051B5 B84F000000          <1>     mov eax, sft_size
  2744 000051BA F7E3                <1>     mul ebx
  2745 000051BC 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2746 000051BF 5A                  <1>     pop rdx
  2747 000051C0 58                  <1>     pop rax
  2748 000051C1 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2749                              <1>     return
    13                              <2> %%_ret:
    14 000051C8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2750                              <1> getJFTPtr:    ;Int 2Fh AX=1220h
  2751                              <1> ;Return a zero extended value in rdi for the SFT entry
  2752                              <1> ;Input: bx = JFT handle (we zero extend)
  2753                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2754                              <1> ;        CF=CY => al = Error code, Fail
  2755 000051C9 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2756 000051CC 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
  2757 000051D3 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  2758 000051D7 7204                <1>     jb .ok
  2759 000051D9 B006                <1>     mov al, errBadHdl
  2760 000051DB F9                  <1>     stc
  2761                              <1>     return
    13                              <2> %%_ret:
    14 000051DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2762                              <1> .ok:
  2763 000051DD 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  2764 000051E3 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  2765 000051E5 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  2766 000051E7 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  2767 000051EB 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  2768 000051EF EB0B                <1>     jmp short .pspOkExit
  2769                              <1> .pspJftBelow:
  2770 000051F1 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  2771                              <1> .pspJftOk:
  2772 000051F7 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2773                              <1> .pspOkExit:
  2774 000051FC F8                  <1>     clc
  2775                              <1>     return
    13                              <2> %%_ret:
    14 000051FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2776                              <1> findFreeJFTEntry:
  2777                              <1> ;Finds a free JFT entry in the currentPSP.
  2778                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2779                              <1> ;        CF=CY => al=errNhl
  2780 000051FE 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2781                              <1> .searchLp:
  2782 00005200 E8C4FFFFFF          <1>     call getJFTPtr
  2783 00005205 720A                <1>     jc .ffJFTbadExit
  2784 00005207 803FFF              <1>     cmp byte [rdi], -1
  2785                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000520A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000520C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2786 0000520D FFC3                <1>     inc ebx
  2787 0000520F EBEF                <1>     jmp short .searchLp
  2788                              <1> .ffJFTbadExit:
  2789 00005211 B004                <1>     mov al, errNhl
  2790 00005213 F9                  <1>     stc
  2791                              <1>     return
    13                              <2> %%_ret:
    14 00005214 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2792                              <1> getSFTPtr:
  2793                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2794                              <1> ;Input: bx = JFT handle
  2795                              <1> ;Output: CF=NC: rdi = SFT pointer
  2796                              <1> ;        CF=CY: Error, ax=Error code
  2797 00005215 E817000000          <1>     call derefSFTPtr
  2798                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000521A 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000521C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2799 0000521D 50                  <1>     push rax
  2800 0000521E 0FB705(43040000)    <1>     movzx eax, word [machineNum]
  2801 00005225 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2802 00005229 58                  <1>     pop rax
  2803                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000522A 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000522C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2804 0000522D B006                <1>     mov al, errBadHdl   ;Error code
  2805 0000522F F9                  <1>     stc         ;Reset CF
  2806                              <1>     return
    13                              <2> %%_ret:
    14 00005230 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2807                              <1> 
  2808                              <1> derefSFTPtr:
  2809                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2810                              <1> ;Input: bx = File handle (gets zero extended)
  2811                              <1> ;Output: CF=NC: rdi = SFT pointer
  2812                              <1> ;        CF=CY: Error, ax=Error code
  2813 00005231 E893FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2814 00005236 7205                <1>     jb .fail
  2815 00005238 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2816 0000523B 7504                <1>     jne .ok
  2817                              <1> .fail:
  2818 0000523D B006                <1>     mov al, errBadHdl
  2819 0000523F F9                  <1>     stc
  2820                              <1>     return
    13                              <2> %%_ret:
    14 00005240 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2821                              <1> .ok:
  2822 00005241 53                  <1>     push rbx    ;Preserve the JFT handle
  2823 00005242 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2824 00005245 E84AFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2825 0000524A 5B                  <1>     pop rbx 
  2826                              <1>     return
    13                              <2> %%_ret:
    14 0000524B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2827                              <1> 
  2828                              <1> getSFTndxInheritable:
  2829                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2830                              <1> ;Input: ebx = SFTndx (word)
  2831                              <1> ;Output: 
  2832                              <1> ;   ZF=ZE => Inheritable
  2833                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2834 0000524C 57                  <1>     push rdi
  2835 0000524D E842FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2836 00005252 7208                <1>     jc .badNdx
  2837 00005254 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2838 0000525A 5F                  <1>     pop rdi
  2839                              <1>     return
    13                              <2> %%_ret:
    14 0000525B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2840                              <1> .badNdx:
  2841 0000525C 31FF                <1>     xor edi, edi
  2842 0000525E FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2843 00005260 F8                  <1>     clc
  2844 00005261 5F                  <1>     pop rdi
  2845                              <1>     return
    13                              <2> %%_ret:
    14 00005262 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2846                              <1> 
  2847                              <1> incrementOpenCount:
  2848                              <1> ;Given a SFTndx, this function will increment it's open count
  2849                              <1> ;Output:
  2850                              <1> ;   CF=NC => sftndx ok, count incremented
  2851                              <1> ;   CF=CY => Bad ndx
  2852 00005263 57                  <1>     push rdi
  2853 00005264 E82BFFFFFF          <1>     call getSFTPtrfromSFTNdx
  2854 00005269 7203                <1>     jc .exit
  2855 0000526B 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2856                              <1> .exit:
  2857 0000526E 5F                  <1>     pop rdi
  2858                              <1>     return
    13                              <2> %%_ret:
    14 0000526F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2859                              <1> 
  2860                              <1> decrementOpenCount: ;Int 2Fh AX = 1208h
  2861                              <1> ;Input: rdi = SFT pointer
  2862                              <1> ;Output: ax = Original wNumHandles count (zero extended to eax)
  2863 00005270 9C                  <1>     pushfq
  2864 00005271 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2865 00005274 FFC8                <1>     dec eax     ;Decrement count
  2866 00005276 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2867 00005278 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2868                              <1> .exit:
  2869 0000527A 9D                  <1>     popfq
  2870 0000527B 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2871                              <1>     return
    13                              <2> %%_ret:
    14 0000527E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2872                              <1> 
  2873                              <1> ;Buffer Wrapper
  2874                              <1> writeThroughBuffersForHandle:
  2875                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2876 0000527F 57                  <1>     push rdi
  2877 00005280 55                  <1>     push rbp
  2878 00005281 E8EFFDFFFF          <1>     call getCurrentSFT
  2879 00005286 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedir | devCharDev
  2880 0000528C 751C                <1>     jnz .exit
  2881 0000528E FF35(0A070000)      <1>     push qword [workingDPB]
  2882 00005294 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2883 00005298 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2884 0000529F E895B4FFFF          <1>     call flushAllBuffersForDPB
  2885 000052A4 8F05(0A070000)      <1>     pop qword [workingDPB]
  2886                              <1> .exit:
  2887 000052AA 5D                  <1>     pop rbp
  2888 000052AB 5F                  <1>     pop rdi
  2889                              <1>     return
    13                              <2> %%_ret:
    14 000052AC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2890                              <1> 
  2891                              <1> setDPBfromSFT:
  2892                              <1> ;Sets and updates the DPB from an SFT ptr
  2893                              <1> ;Input: rdi -> sft
  2894                              <1> ;Output: CF=NC: workingDPB set
  2895                              <1> ;        CF=CY: Error fail, exit
  2896 000052AD 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get the DPB ptr in rbp
  2897 000052B1 E9321E0000          <1>     jmp getDiskDPB.sftEp  ;Doing this will nullify CDS paths on disk swaps!
    43                                  %include "./src/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35 000052B6 3C0F                <1>     cmp al, 15
    36 000052B8 7747                <1>     ja .invalidFunction
    37 000052BA 84C0                <1>     test al, al
    38 000052BC 745B                <1>     jz .getDevWord
    39 000052BE 3C01                <1>     cmp al, 1
    40 000052C0 746E                <1>     je .setDevWord
    41 000052C2 2C02                <1>     sub al, 2
    42 000052C4 3C03                <1>     cmp al, 3
    43 000052C6 7673                <1>     jbe .ioctlStringFunctions
    44 000052C8 2C04                <1>     sub al, 4
    45 000052CA 3C01                <1>     cmp al, 1
    46 000052CC 0F8644010000        <1>     jbe .ioStatusFunctions
    47 000052D2 2C02                <1>     sub al, 2
    48 000052D4 3C02                <1>     cmp al, 2
    49 000052D6 0F86CD010000        <1>     jbe .devControl
    50 000052DC 2C03                <1>     sub al, 3
    51 000052DE 0F8498020000        <1>     jz .setSharingCount
    52 000052E4 FEC8                <1>     dec al
    53 000052E6 0F84AE020000        <1>     jz .genericCharDevIOCTL
    54 000052EC FEC8                <1>     dec al
    55 000052EE 0F84D4020000        <1>     jz .genericBlokDevIOCTL
    56 000052F4 FEC8                <1>     dec al
    57 000052F6 0F847B030000        <1>     jz .getDrvLogicalDevice
    58 000052FC E9D6030000          <1>     jmp .setDrvLogicalDevice
    59                              <1> .invalidFunction:
    60 00005301 B801000000          <1>     mov eax, errInvFnc
    61                              <1> .ifExit:
    62 00005306 E9EF250000          <1>     jmp extErrExit
    63                              <1> .accessDeniedError:
    64 0000530B B805000000          <1>     mov eax, errAccDen
    65 00005310 EBF4                <1>     jmp short .ifExit
    66                              <1> .badHandle:
    67 00005312 B806000000          <1>     mov eax, errBadHdl
    68 00005317 EBED                <1>     jmp short .ifExit
    69                              <1> 
    70                              <1> ;...Functions...
    71                              <1> .getDevWord:
    72                              <1> ;Input: bx = File Handle
    73 00005319 E813FFFFFF          <1>     call derefSFTPtr
    74 0000531E 72F2                <1>     jc .badHandle
    75 00005320 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    76 00005324 30C0                <1>     xor al, al
    77 00005326 E8F2200000          <1>     call getUserRegs
    78 0000532B 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    79                              <1>     return
    13                              <2> %%_ret:
    14 0000532F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .setDevWord:
    81                              <1> ;Input: bx = File Handle
    82                              <1> ;       dl = Low byte of Device information word
    83 00005330 E8FCFEFFFF          <1>     call derefSFTPtr
    84 00005335 72DB                <1>     jc .badHandle 
    85 00005337 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    86                              <1>     return
    13                              <2> %%_ret:
    14 0000533A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> .ioctlStringFunctions:
    88                              <1> ;al = 0 -> ReadCharDev
    89                              <1> ;al = 1 -> WriteCharDev
    90                              <1> ;al = 2 -> ReadDiskDev
    91                              <1> ;al = 3 -> WriteDiskDev
    92                              <1> ;Input: bx = File handle/drive number
    93                              <1> ;       ecx = Bytes to transfer
    94                              <1> ;       rdx = Ptr to string to transfer
    95 0000533B 0FB6F3              <1>     movzx esi, bl
    96 0000533E 488D1D(C1040000)    <1>     lea rbx, primReqPkt
    97 00005345 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    98 0000534C C605(68040000)00    <1>     mov byte [Int24bitfld], 0
    99                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   100                              <1> ;Setup the common ioReqPkt fields and the read/write 
   101 00005353 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   102 00005356 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103 00005359 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   104 0000535D 51                  <1>     push rcx
   105 0000535E 52                  <1>     push rdx
   106 0000535F B903000000          <1>     mov ecx, drvIOCTLREAD
   107 00005364 BA0C000000          <1>     mov edx, drvIOCTLWRITE
   108 00005369 A801                <1>     test al, 1  ;If set, this is a write operation
   109 0000536B 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   110 0000536E 7507                <1>     jnz .notWrite
   111 00005370 800D(68040000)01    <1>     or byte [Int24bitfld], critWrite
   112                              <1> .notWrite:
   113 00005377 5A                  <1>     pop rdx
   114 00005378 59                  <1>     pop rcx
   115 00005379 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   116 0000537C 3C01                <1>     cmp al, 1
   117 0000537E 772F                <1>     ja .ioctlStringBlockDevice
   118                              <1>     ;Here we are for char devices only
   119 00005380 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   120 00005383 E8A9FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   121 00005388 7288                <1>     jc .badHandle 
   122 0000538A C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   123 00005391 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   124 00005397 0F8464FFFFFF        <1>     jz .invalidFunction
   125                              <1> 
   126 0000539D 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   127 000053A1 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   128 000053A8 4887DE              <1>     xchg rbx, rsi   ;Swap back
   129 000053AB 31C0                <1>     xor eax, eax
   130 000053AD EB38                <1>     jmp short .ioctlStringCommon
   131                              <1> .ioctlStringBlockDevice:
   132                              <1>     ;Here we are for block devices only
   133                              <1>     ;esi has the drive number
   134 000053AF C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   135 000053B6 89F0                <1>     mov eax, esi
   136 000053B8 53                  <1>     push rbx
   137 000053B9 E8F3200000          <1>     call getCDS ;Returns in al the unit number of the drive
   138 000053BE 5B                  <1>     pop rbx
   139 000053BF 730A                <1>     jnc .okDrive
   140 000053C1 B80F000000          <1>     mov eax, errBadDrv
   141 000053C6 E92F250000          <1>     jmp extErrExit
   142                              <1> .okDrive:
   143 000053CB 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   144 000053D2 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   145 000053D6 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   146 000053D9 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   147 000053DC 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   148 000053E0 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   149 000053E3 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   150                              <1> .ioctlStringCommon:
   151                              <1>     ;rsi -> Device Driver header
   152                              <1>     ;rbx -> Request Header
   153                              <1>     ;al = Media descriptor
   154 000053E7 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   155 000053EA 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   156 000053F0 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   157                              <1>     ;Make request now
   158 000053F6 51                  <1>     push rcx    ;Push xfrctr
   159 000053F7 52                  <1>     push rdx    ;Buffer Ptr
   160 000053F8 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   161 000053FE E86F1B0000          <1>     call goDriver
   162 00005403 5A                  <1>     pop rdx
   163 00005404 59                  <1>     pop rcx
   164                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   165 00005405 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   166 0000540B 0F84DB240000        <1>     jz extGoodExit
   167 00005411 E91B030000          <1>     jmp failIOCTLCall
   168                              <1> 
   169                              <1> .ioStatusFunctions:
   170                              <1> ;al = 0 -> Get input status 
   171                              <1> ;al = 1 -> Get output status
   172 00005416 E816FEFFFF          <1>     call derefSFTPtr
   173 0000541B 0F82F1FEFFFF        <1>     jc .badHandle 
   174 00005421 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   175 00005428 C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   176 0000542B C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   177 00005432 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir  ;File cannot be redir!
   178 00005438 0F85C3FEFFFF        <1>     jnz .invalidFunction
   179 0000543E C605(68040000)00    <1>     mov byte [Int24bitfld], 0
   180 00005445 B906000000          <1>     mov ecx, drvINSTATUS
   181 0000544A BA0A000000          <1>     mov edx, drvOUTSTATUS
   182 0000544F 84C0                <1>     test al, al
   183 00005451 0F45CA              <1>     cmovnz ecx, edx
   184 00005454 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   185 00005457 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   186 0000545D 7416                <1>     jz .ioStatDisk
   187 0000545F C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   188 00005466 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   189 0000546D 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   190 00005471 30C0                <1>     xor al, al
   191 00005473 EB15                <1>     jmp short .ioStatCommon
   192                              <1> .ioStatDisk:
   193 00005475 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   194 0000547C 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   195 00005480 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   196 00005483 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   197 00005486 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   198                              <1> .ioStatCommon:
   199 0000548A E8E31A0000          <1>     call goDriver
   200 0000548F 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   201 00005495 0F8596020000        <1>     jnz failIOCTLCall
   202 0000549B 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   203 000054A1 7403                <1>     jz .notBusyExit
   204 000054A3 B0FF                <1>     mov al, -1  ;Device Busy/EOF
   205                              <1>     return 
    13                              <2> %%_ret:
    14 000054A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> .notBusyExit:
   207                              <1> ;Device ready/NotEOF
   208 000054A6 31C0                <1>     xor eax, eax
   209                              <1>     return
    13                              <2> %%_ret:
    14 000054A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> .devControl:
   212                              <1> ;al = 0 -> Is media removable?
   213                              <1> ;al = 1 -> Is device local or remote?
   214                              <1> ;al = 2 -> Is handle local or remote?
   215 000054A9 84C0                <1>     test al, al
   216 000054AB 746D                <1>     jz .remTest
   217 000054AD A801                <1>     test al, 1
   218 000054AF 751B                <1>     jnz .deviceTest
   219                              <1> ;Handle Local or Remote
   220 000054B1 E87BFDFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   221 000054B6 0F8256FEFFFF        <1>     jc .badHandle 
   222 000054BC 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   223                              <1> .devControlExit:
   224 000054C0 E8581F0000          <1>     call getUserRegs
   225 000054C5 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   226 000054C9 31C0                <1>     xor eax, eax
   227                              <1>     return 
    13                              <2> %%_ret:
    14 000054CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   228                              <1> .deviceTest:
   229                              <1> ;Drive Local or Remote
   230                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   231                              <1> ;Else, just get the CDS word and swap subst and net
   232 000054CC 88D8                <1>     mov al, bl
   233 000054CE E8DE1F0000          <1>     call getCDS
   234 000054D3 730A                <1>     jnc .devTestOkDrive
   235 000054D5 B80F000000          <1>     mov eax, errBadDrv
   236 000054DA E91B240000          <1>     jmp extErrExit
   237                              <1> .devTestOkDrive:
   238 000054DF 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   239 000054E6 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   240 000054EA 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   241 000054EF 7513                <1>     jnz .remoteDrive
   242 000054F1 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   243 000054F5 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   244 000054F9 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   245 000054FD 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   246 00005502 EBBC                <1>     jmp short .devControlExit
   247                              <1> .remoteDrive:
   248 00005504 6689D3              <1>     mov bx, dx
   249 00005507 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   250 0000550C 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   251 00005511 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   252 00005513 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   253 00005518 EBA6                <1>     jmp short .devControlExit   ;Store it
   254                              <1> 
   255                              <1> .remTest:
   256                              <1> ;Drive letter in bl
   257 0000551A 88D8                <1>     mov al, bl
   258 0000551C E8901F0000          <1>     call getCDS
   259 00005521 730A                <1>     jnc .remTestOkDrive
   260                              <1> .remTestBadDrv:
   261 00005523 B80F000000          <1>     mov eax, errBadDrv
   262 00005528 E9CD230000          <1>     jmp extErrExit
   263                              <1> .remTestOkDrive:
   264 0000552D 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   265 00005534 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   266 0000553A 75E7                <1>     jnz .remTestBadDrv
   267 0000553C 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   268 00005543 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   269 00005547 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   270 0000554A 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   271 0000554E 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   272 00005554 0F84A7FDFFFF        <1>     jz .invalidFunction
   273 0000555A C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   274 0000555D C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   275 00005561 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   276 00005567 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   277 0000556A E8031A0000          <1>     call goDriver
   278 0000556F 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   279 00005573 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   280 00005578 C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   281                              <1>     return
    13                              <2> %%_ret:
    14 0000557B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> .setSharingCount:
   284                              <1> ;Input: cx = Share Count
   285                              <1> ;       dx = Share Retry
   286 0000557C 66890D(1F000000)    <1>     mov word [shareCount], cx
   287 00005583 6685D2              <1>     test dx, dx
   288 00005586 0F8475FDFFFF        <1>     jz .invalidFunction
   289 0000558C 668915(21000000)    <1>     mov word [shareDelay], dx
   290 00005593 31C0                <1>     xor eax, eax
   291 00005595 E952230000          <1>     jmp extGoodExit
   292                              <1> 
   293                              <1> .genericCharDevIOCTL:
   294 0000559A E876FCFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   295 0000559F 7311                <1>     jnc .okHandle
   296                              <1> .ioctrlBadHandle:
   297 000055A1 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   298 000055A8 B806000000          <1>     mov eax, errBadHdl
   299 000055AD E948230000          <1>     jmp extErrExit
   300                              <1> .okHandle:
   301 000055B2 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir
   302 000055B8 75E7                <1>     jnz .ioctrlBadHandle
   303 000055BA 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   304 000055C0 74DF                <1>     jz .ioctrlBadHandle
   305 000055C2 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   306 000055C6 EB49                <1>     jmp short .ioctlReqMake
   307                              <1> .genericBlokDevIOCTL:
   308 000055C8 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   309 000055CA 51                  <1>     push rcx
   310 000055CB 52                  <1>     push rdx
   311 000055CC E8E01E0000          <1>     call getCDS ;Sets the current CDS
   312 000055D1 5A                  <1>     pop rdx
   313 000055D2 59                  <1>     pop rcx
   314 000055D3 7217                <1>     jc .badDrv
   315                              <1>     ;Check the CDS not net, subst or join
   316 000055D5 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   317 000055DC 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   318 000055E0 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   319 000055E4 7406                <1>     jz .badDrv
   320 000055E6 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   321 000055EA 7411                <1>     jz .goodDrive
   322                              <1> .badDrv:
   323 000055EC C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   324 000055F3 B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   325 000055F8 E9FD220000          <1>     jmp extErrExit
   326                              <1> .goodDrive:
   327                              <1>     ;CDS is good,now get the DPB
   328 000055FD 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   329 00005601 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   330 00005605 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   331 00005608 8805(C2040000)      <1>     mov byte [primReqPkt + ioctlReqPkt.unitnm], al
   332 0000560E 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   333                              <1> .ioctlReqMake:
   334                              <1> ;rsi must point to the driver header here
   335 00005611 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   336 00005617 7511                <1>     jnz .supportsIOCTL
   337                              <1> .badFunction:
   338 00005619 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   339 00005620 B801000000          <1>     mov eax, errInvFnc
   340 00005625 E9D0220000          <1>     jmp extErrExit
   341                              <1> .supportsIOCTL:
   342                              <1>     ;Setup the request header
   343 0000562A 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   344 00005631 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   345 00005634 C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   346 00005638 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   347 0000563E 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   348 00005642 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   349 00005646 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   350 00005649 E8CF1D0000          <1>     call getUserRegs
   351 0000564E 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   352 00005652 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   353 00005656 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   354 0000565A 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   355 0000565E 4889FE              <1>     mov rsi, rdi
   356 00005661 E80C190000          <1>     call goDriver
   357 00005666 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   358 0000566C 0F847A220000        <1>     jz extGoodExit
   359 00005672 E9BA000000          <1>     jmp failIOCTLCall
   360                              <1> 
   361                              <1> .getDrvLogicalDevice:
   362 00005677 88D8                <1>     mov al, bl
   363 00005679 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   364 00005680 C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   365 00005684 C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   366 00005687 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   367 0000568D 53                  <1>     push rbx
   368 0000568E E81E1E0000          <1>     call getCDS
   369 00005693 8805(09070000)      <1>     mov byte [workingDrv], al
   370 00005699 5B                  <1>     pop rbx
   371 0000569A 0F8283FEFFFF        <1>     jc .remTestBadDrv
   372 000056A0 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   373 000056A7 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   374 000056AB 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   375 000056AF 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   376 000056B2 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   377                              <1> 
   378 000056B5 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   379 000056BB 0F8440FCFFFF        <1>     jz .invalidFunction
   380 000056C1 E8AC180000          <1>     call goDriver
   381 000056C6 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   382 000056CC 7405                <1>     jz .getDrvOk
   383 000056CE E95E000000          <1>     jmp failIOCTLCall
   384                              <1> .getDrvOk:
   385 000056D3 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   386                              <1>     return
    13                              <2> %%_ret:
    14 000056D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .setDrvLogicalDevice:
   388 000056D7 88D8                <1>     mov al, bl
   389 000056D9 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   390 000056E0 C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   391 000056E4 C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   392 000056E7 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   393 000056ED 53                  <1>     push rbx
   394 000056EE E8BE1D0000          <1>     call getCDS
   395 000056F3 8805(09070000)      <1>     mov byte [workingDrv], al
   396 000056F9 5B                  <1>     pop rbx
   397 000056FA 0F8223FEFFFF        <1>     jc .remTestBadDrv
   398 00005700 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   399 00005707 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   400 0000570B 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   401 0000570F 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   402 00005712 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   403 00005715 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   404 0000571B 0F84E0FBFFFF        <1>     jz .invalidFunction
   405 00005721 E84C180000          <1>     call goDriver
   406 00005726 30C0                <1>     xor al, al
   407 00005728 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   408                              <1>     retz    ;Return if OK, else fail
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000572E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00005730 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   409                              <1> failIOCTLCall:
   410                              <1> ;Called to fail IOCTL calls that don't trigger Int 24h
   411                              <1> ;rbx -> Driver request packet
   412 00005731 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   413 00005735 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   414 0000573B E8CF110000          <1>     call xlatHardError
   415 00005740 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] 
   416 00005747 E9AE210000          <1>     jmp extErrExit
   417                              <1> 
    44                                  %include "./src/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> ;NOTE: 
     7                              <1> ;   If less than 6 paragraphs requested for alloc, allocate 6 paragraphs.
     8                              <1> ;   If between 0 and 6 paras requested for realloc, realloc to 6.
     9                              <1> ;       If 0 requested for realloc, free.
    10                              <1> allocateMemory:    ;ah = 48h
    11                              <1> ;Input: ebx = Number of paragraphs requested
    12                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    13                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    14 0000574C E85E210000          <1>     call dosCrit1Enter
    15 00005751 B806000000          <1>     mov eax, 6
    16 00005756 39C3                <1>     cmp ebx, eax
    17 00005758 0F42D8              <1>     cmovb ebx, eax
    18 0000575B 31D2                <1>     xor edx, edx
    19                              <1>     ;Clear the pointers
    20 0000575D 488915(45040000)    <1>     mov qword [firstMCB], rdx
    21 00005764 488915(4D040000)    <1>     mov qword [bestMCB], rdx
    22 0000576B 488915(55040000)    <1>     mov qword [lastMCB], rdx
    23 00005772 31ED                <1>     xor ebp, ebp    
    24 00005774 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    25 00005776 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    26                              <1> .walk:
    27 0000577D 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    28 00005780 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    29 00005783 7409                <1>     je .walk1
    30 00005785 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    31 00005788 0F85E5040000        <1>     jne badMCBChain
    32                              <1> .walk1:
    33                              <1>     ;Here if valid but not the last block
    34 0000578E 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    35 00005796 0F8582000000        <1>     jne .walk2
    36                              <1>     ;Here we consolidate adjacent free blocks if there are any
    37                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    38                              <1>     ;End consolidation at first non free block or at last block in chain
    39 0000579C 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    40 0000579F 744A                <1>     je .det0    ;Determine if this block is useful
    41 000057A1 31C9                <1>     xor ecx, ecx
    42 000057A3 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    43 000057A6 4881C610000000      <1>     add rsi, mcb.program
    44                              <1> .cons0:
    45 000057AD 48C1E104            <1>     shl rcx, 4
    46 000057B1 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    47 000057B4 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    48 000057B7 7409                <1>     je .cons1
    49 000057B9 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    50 000057BC 0F85B1040000        <1>     jne badMCBChain 
    51                              <1> .cons1:
    52 000057C2 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 000057CA 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    54                              <1>     ;Here rsi, points to a free block, add it to rdi
    55 000057CC 31C9                <1>     xor ecx, ecx
    56 000057CE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    57 000057D1 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    58 000057D7 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    59 000057DA 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    60 000057DC 31D2                <1>     xor edx, edx
    61 000057DE 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    62 000057E1 48895608            <1>     mov qword [rsi + 8], rdx
    63 000057E5 3C5A                <1>     cmp al, mcbMarkEnd
    64 000057E7 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    65                              <1>     ;Here we deal with if the block was the last one 
    66 000057E9 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    67                              <1> .det0:  ;Now determine if pointer in rdi is useful
    68 000057EB 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    69                              <1> ;ebx must be less than the arena size for the arena to be useful!
    70 000057EE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    71 000057F1 39D9                <1>     cmp ecx, ebx
    72 000057F3 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    73 000057F5 488935(55040000)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    74 000057FC 488B05(45040000)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    75 00005803 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    76 00005806 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    77 00005808 488935(45040000)    <1>     mov qword [firstMCB], rsi
    78                              <1> .det1:
    79                              <1>     ;Now test for best fit.
    80 0000580F 29D9                <1>     sub ecx, ebx    ;Block - ebx
    81 00005811 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    82 00005813 7209                <1>     jb .walk2
    83 00005815 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    84 00005817 488935(4D040000)    <1>     mov qword [bestMCB], rsi
    85                              <1> .walk2:
    86 0000581E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    87 00005821 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    88 00005823 31C9                <1>     xor ecx, ecx
    89 00005825 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    90 00005828 48C1E104            <1>     shl rcx, 4
    91 0000582C 4881C610000000      <1>     add rsi, mcb.program
    92 00005833 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    93 00005836 E942FFFFFF          <1>     jmp .walk
    94                              <1> .allocate:
    95                              <1>     ;Allocation fails IF the pointer is the null pointer
    96 0000583B 803D(D3030000)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    97 00005842 723A                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    98                              <1>     ;Fall thru if last fit
    99 00005844 488B35(55040000)    <1>     mov rsi, qword [lastMCB]
   100 0000584B 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   101 0000584E 0F84A8000000        <1>     jz .allocFail
   102 00005854 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   103 00005856 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   104 00005859 31C9                <1>     xor ecx, ecx
   105 0000585B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 0000585E 29D9                <1>     sub ecx, ebx
   107 00005860 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   108 00005866 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   109 00005869 48C1E104            <1>     shl rcx, 4
   110 0000586D 4881C610000000      <1>     add rsi, mcb.program
   111 00005874 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   112 00005877 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   113 00005879 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   114 0000587C EB56                <1>     jmp short .bfPerfectFit
   115                              <1> .bfCommon:
   116 0000587E 488B35(45040000)    <1>     mov rsi, qword [firstMCB]
   117 00005885 803D(D3030000)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   118 0000588C 480F4435(4D040000)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   119 00005894 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   120 00005897 7463                <1>     jz .allocFail
   121                              <1>     ;Now check if we need to make a "spill over" free MCB
   122 00005899 31C9                <1>     xor ecx, ecx
   123 0000589B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]  ;Get current whole block size
   124 0000589E 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   125 000058A0 7432                <1>     jz short .bfPerfectFit
   126                              <1>     ;Make the spill over MCB 
   127 000058A2 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   128 000058A8 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   129 000058AB 8A06                <1>     mov al, byte [rsi + mcb.marker]
   130 000058AD C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   131 000058B0 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   132 000058B3 4881C710000000      <1>     add rdi, mcb.program
   133 000058BA 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   134 000058C0 48C1E304            <1>     shl rbx, 4
   135 000058C4 4801DF              <1>     add rdi, rbx
   136 000058C7 8807                <1>     mov byte [rdi + mcb.marker], al ;Store old marker in new block
   137 000058C9 48C7470100000000    <1>     mov qword [rdi + mcb.owner], mcbOwnerFree
   138 000058D1 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx
   139                              <1> .bfPerfectFit:
   140                              <1>     ;Now set the current PSP as the owner of this new MCB
   141 000058D4 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   142 000058DB 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   143 000058DF 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   144 000058E6 488D4610            <1>     lea rax, qword [rsi + mcb.program]  ;Point return ptr to program area
   145 000058EA 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   146 000058ED 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 000058F1 E850030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 000058F6 E8BE1F0000          <1>     call dosCrit1Exit
   149                              <1>     return
    13                              <2> %%_ret:
    14 000058FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   150                              <1> .allocFail:
   151                              <1>     ;Walk the MCB chain to determine the biggest block size
   152 000058FC 488B35(33000000)    <1>     mov rsi, [mcbChainPtr]
   153 00005903 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   154                              <1> .af0:
   155 00005905 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   156 00005908 7409                <1>     je .af1
   157 0000590A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   158 0000590D 0F8560030000        <1>     jne badMCBChain
   159                              <1> .af1:
   160 00005913 31C9                <1>     xor ecx, ecx
   161 00005915 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   162 00005918 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   163 00005920 7505                <1>     jne .af2
   164 00005922 39D9                <1>     cmp ecx, ebx
   165 00005924 0F47D9              <1>     cmova ebx, ecx
   166                              <1> .af2:
   167 00005927 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   168 0000592A 7410                <1>     je .afExit
   169 0000592C 48C1E104            <1>     shl rcx, 4
   170 00005930 4881C610000000      <1>     add rsi, mcb.program
   171 00005937 4801CE              <1>     add rsi, rcx
   172 0000593A EBD7                <1>     jmp short .af1
   173                              <1> .afExit:
   174 0000593C B808000000          <1>     mov eax, errNoMem
   175 00005941 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   176 00005948 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   177 0000594B E931030000          <1>     jmp mcbErrHdlr
   178                              <1> freeMemory:        ;ah = 49h
   179                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   180                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   181                              <1> ;Always skip the first block as this is the anchor for DOS
   182 00005950 E85A1F0000          <1>     call dosCrit1Enter
   183 00005955 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   184 0000595C 31C9                <1>     xor ecx, ecx
   185 0000595E 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   186 00005965 4889F7              <1>     mov rdi, rsi
   187 00005968 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   188 0000596B 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   189 0000596F 4881C610000000      <1>     add rsi, mcb.program
   190 00005976 4801CE              <1>     add rsi, rcx    ;Go to next block
   191                              <1> .mainLoop:
   192 00005979 31C9                <1>     xor ecx, ecx
   193 0000597B 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   194 0000597E 7409                <1>     je .valid
   195 00005980 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   196 00005983 0F85EA020000        <1>     jne badMCBChain
   197                              <1> .valid:
   198 00005989 4939F0              <1>     cmp r8, rsi
   199 0000598C 741C                <1>     je .blockFound
   200                              <1>     ;Not valid, check if last block in chain
   201 0000598E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   202 00005991 0F84A5000000        <1>     je .blockError
   203 00005997 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   204 0000599A 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   205 0000599E 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   206 000059A5 4801CE              <1>     add rsi, rcx    ;Go to next block
   207 000059A8 EBCF                <1>     jmp short .mainLoop
   208                              <1> .blockFound:
   209                              <1>     ;If hole, error.
   210                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   211 000059AA 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   212 000059B2 0F8484000000        <1>     je .blockError
   213 000059B8 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   214 000059C0 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   215 000059C8 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   216                              <1>     ;It is, let it absorb this space
   217 000059CA 31C9                <1>     xor ecx, ecx
   218 000059CC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 000059CF 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   220 000059D5 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   221                              <1>     ;Replace block marker
   222 000059D8 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   223 000059DA 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   224 000059DC 31C9                <1>     xor ecx, ecx
   225 000059DE 48890E              <1>     mov qword [rsi], rcx
   226 000059E1 48894E08            <1>     mov qword [rsi + 8], rcx
   227 000059E5 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   228                              <1> .blockFoundCheckFollowing:
   229                              <1>     ;First check if we are the last block in chain
   230 000059E8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   231 000059EB 7439                <1>     je .blockFoundExit  ;If yes, exit!
   232 000059ED 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   233 000059F0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 000059F3 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 000059F7 4881C110000000      <1>     add rcx, mcb.program
   236 000059FE 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 00005A01 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   238 00005A09 751B                <1>     jne .blockFoundExit ;If not free, exit
   239                              <1>     ;If free, absorb into block pointed to by rdi
   240 00005A0B 31C9                <1>     xor ecx, ecx
   241 00005A0D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 00005A10 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 00005A16 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 00005A19 8A06                <1>     mov al, byte [rsi + mcb.marker]
   246 00005A1B 8807                <1>     mov byte [rdi + mcb.marker], al
   247 00005A1D 31C9                <1>     xor ecx, ecx
   248 00005A1F 48890E              <1>     mov qword [rsi], rcx
   249 00005A22 48894E08            <1>     mov qword [rsi + 8], rcx
   250                              <1> .blockFoundExit:
   251 00005A26 E81B020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   252 00005A2B E8891E0000          <1>     call dosCrit1Exit
   253 00005A30 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   254 00005A37 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   255                              <1>     return
    13                              <2> %%_ret:
    14 00005A3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .blockError:
   257 00005A3C C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   258 00005A43 B809000000          <1>     mov eax, errMemAddr
   259 00005A48 E8AD1E0000          <1>     call extErrExit ;Error thru the unified error handler
   260 00005A4D E8F4010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   261 00005A52 E8621E0000          <1>     call dosCrit1Exit
   262                              <1>     return
    13                              <2> %%_ret:
    14 00005A57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> reallocMemory:     ;ah = 4Ah
   264                              <1> ;Input: r8 = address of the block to be realloc'ed
   265                              <1> ;       ebx = How many paras this block should contain after realloc. 
   266                              <1> ;               If ebx = 0, jump to free memory
   267 00005A58 E8521E0000          <1>     call dosCrit1Enter
   268 00005A5D 85DB                <1>     test ebx, ebx
   269 00005A5F 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   270 00005A65 B806000000          <1>     mov eax, 6
   271 00005A6A 39C3                <1>     cmp ebx, eax    ;Are we trying to resize to less than 6?
   272 00005A6C 0F42D8              <1>     cmovb ebx, eax
   273 00005A6F 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   274 00005A76 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   275 00005A79 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   276 00005A7C 7409                <1>     je .ctn
   277 00005A7E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   278 00005A81 0F856F010000        <1>     jne .badAddrGiven
   279                              <1> .ctn:
   280                              <1>     ;Provided block is valid and not a hole
   281                              <1>     ;Check if Growth or Shrink
   282 00005A87 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   283 00005A8F 74AB                <1>     je freeMemory.blockError
   284 00005A91 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   285 00005A94 31C9                <1>     xor ecx, ecx
   286 00005A96 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   287 00005A99 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   288 00005A9B 0F8791000000        <1>     ja .growth
   289 00005AA1 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   290                              <1> ;We can always shrink
   291 00005AA7 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   292 00005AA9 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   293 00005AAF 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   294 00005AB2 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   295 00005AB8 48C1E304            <1>     shl rbx, 4
   296 00005ABC 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   297 00005AC3 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   298 00005AC6 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   299 00005AC8 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   300 00005ACB 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   301 00005ACD 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   302 00005AD5 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   303 00005AD8 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   304 00005ADA 0F84E6000000        <1>     je .exit
   305                              <1> ;Else, now see if the block following is also free and absorb it
   306 00005AE0 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   307 00005AE3 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   308 00005AE7 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   309 00005AEE 4801CE              <1>     add rsi, rcx    ;Goto next arena
   310 00005AF1 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   311 00005AF4 7409                <1>     je .shrinkAbsorb
   312 00005AF6 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   313 00005AF9 0F8574010000        <1>     jne badMCBChain
   314                              <1> .shrinkAbsorb:
   315 00005AFF 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   316 00005B07 0F85B9000000        <1>     jne .exit
   317                              <1>     ;It is free, absorb it
   318 00005B0D 8A06                <1>     mov al, byte [rsi + mcb.marker]
   319 00005B0F 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   320 00005B11 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   321 00005B14 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   322 00005B17 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   323 00005B1A 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   324 00005B1D 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   325 00005B21 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   326 00005B24 31C9                <1>     xor ecx, ecx
   327                              <1>     ;Clear absorbed MCB
   328 00005B26 48890E              <1>     mov qword [rsi], rcx
   329 00005B29 48894E08            <1>     mov qword [rsi + 8], rcx
   330 00005B2D E994000000          <1>     jmp .exit
   331                              <1> .growth:
   332                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   333 00005B32 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   334 00005B35 0F84A5000000        <1>     je .notEnuffMem
   335                              <1> ;Now check the following space is free. If not, not enuff mem err
   336 00005B3B 31C9                <1>     xor ecx, ecx
   337 00005B3D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   338 00005B40 48C1E104            <1>     shl rcx, 4
   339 00005B44 4889F7              <1>     mov rdi, rsi    
   340 00005B47 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   341 00005B4E 4801CE              <1>     add rsi, rcx
   342 00005B51 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 00005B54 7409                <1>     je .growthOK
   344 00005B56 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 00005B59 0F8514010000        <1>     jne badMCBChain
   346                              <1> .growthOK:
   347                              <1>     ;rdi points to block we are growing
   348 00005B5F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   349 00005B67 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   350                              <1>     ;rsi must own all memory up to the next owned arena
   351 00005B69 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   352 00005B6B 31C9                <1>     xor ecx, ecx
   353 00005B6D 31D2                <1>     xor edx, edx
   354 00005B6F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   355 00005B72 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   356 00005B78 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   357 00005B7B 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   358 00005B7D 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   359 00005B7F 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   360 00005B82 775E                <1>     ja .notEnuffMem1
   361 00005B84 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   362 00005B86 81FA01000000        <1>     cmp edx, 1
   363 00005B8C 744E                <1>     je .notEnuffMem2
   364 00005B8E 31C9                <1>     xor ecx, ecx
   365 00005B90 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   366 00005B93 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   367 00005B97 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   368 00005B9A 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   369 00005B9D 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   370 00005BA4 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   371 00005BA8 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   372 00005BAB 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   373 00005BAF 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   374                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   375                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   376 00005BB1 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   377 00005BB3 7411                <1>     jz .exit
   378 00005BB5 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   379 00005BBB 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   380 00005BBE 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   381                              <1> .exit:
   382 00005BC6 E87B000000          <1>     call verifyIntegrityOfMCBChain
   383 00005BCB E8E91C0000          <1>     call dosCrit1Exit
   384 00005BD0 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   385 00005BD7 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   386                              <1>     return
    13                              <2> %%_ret:
    14 00005BDB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .notEnuffMem2:
   388 00005BDC FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   389 00005BDE EB02                <1>     jmp short .notEnuffMem1
   390                              <1> .notEnuffMem:
   391 00005BE0 31DB                <1>     xor ebx, ebx    ;No space to grow
   392                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   393 00005BE2 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   394 00005BE7 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   395 00005BEE 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   396 00005BF1 E98B000000          <1>     jmp mcbErrHdlr
   397                              <1> .badAddrGiven:
   398 00005BF6 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   399 00005BFB E981000000          <1>     jmp mcbErrHdlr
   400                              <1> getsetMallocStrat: ;ah = 58h
   401 00005C00 84C0                <1>     test al, al
   402 00005C02 741F                <1>     jz .get
   403 00005C04 3C02                <1>     cmp al, 2
   404 00005C06 7337                <1>     jae .bad
   405                              <1> ;Set here
   406 00005C08 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   407 00005C0F 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   408 00005C13 8805(D3030000)      <1>     mov byte [allocStrat], al   ;Only save low word
   409 00005C19 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 00005C1D E824000000          <1>     call verifyIntegrityOfMCBChain
   411                              <1>     return
    13                              <2> %%_ret:
    14 00005C22 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .get:
   413 00005C23 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   414 00005C2A 31C0                <1>     xor eax, eax
   415 00005C2C 8A05(D3030000)      <1>     mov al, byte [allocStrat]
   416 00005C32 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   417 00005C35 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   418 00005C39 E808000000          <1>     call verifyIntegrityOfMCBChain
   419                              <1>     return
    13                              <2> %%_ret:
    14 00005C3E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .bad:
   421 00005C3F B801000000          <1>     mov eax, errInvFnc
   422 00005C44 EB3B                <1>     jmp short mcbErrHdlr
   423                              <1> ;-----------------------------------:
   424                              <1> ;      Memory related routines      :
   425                              <1> ;-----------------------------------:
   426                              <1> verifyIntegrityOfMCBChain:
   427 00005C46 50                  <1>     push rax
   428 00005C47 53                  <1>     push rbx
   429 00005C48 488B1D(33000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   430                              <1> .ok:
   431 00005C4F 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   432 00005C52 7408                <1>     je .ok1
   433 00005C54 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   434 00005C57 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   435                              <1> .exit:
   436 00005C59 5B                  <1>     pop rbx
   437 00005C5A 58                  <1>     pop rax
   438                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 00005C5B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .ok1:
   440 00005C5C 31C0                <1>     xor eax, eax
   441 00005C5E 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   442 00005C61 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   443 00005C65 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   444 00005C6C 4801C3              <1>     add rbx, rax
   445 00005C6F EBDE                <1>     jmp short .ok
   446                              <1> .bmcbPrep:
   447 00005C71 5B                  <1>     pop rbx ;Pop off the stack first!
   448 00005C72 58                  <1>     pop rax
   449                              <1> badMCBChain:
   450 00005C73 B007                <1>     mov al, errMCBbad   ;Yikes!
   451 00005C75 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   452 00005C7C E9791C0000          <1>     jmp extErrExit
   453                              <1> mcbErrHdlr:
   454                              <1>     ;Jumped to with eax = error code
   455 00005C81 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   456 00005C88 E8B9FFFFFF          <1>     call verifyIntegrityOfMCBChain  ;Replaces error code if mcb chain bad
   457 00005C8D E9681C0000          <1>     jmp extErrExit  ;Else, error thru the unified error handler
    45                                  %include "./src/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 20h
     7 00005C92 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 00005C94 E9821A0000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=00h (which jumps to 21h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 27h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 00005C99 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 00005C9F C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 00005CA2 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 21h/AH=31h
    14 00005CA7 E96F1A0000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 00005CAC C605(15050000)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 00005CB3 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    34 00005CBA 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 00005CBC 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 00005CBD EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 00005CBF 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    43 00005CC6 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 00005CCA 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 00005CCB 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 00005CD2 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 00005CD6 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 00005CDA 4C89C6              <1>     mov rsi, r8
    52 00005CDD 4889D7              <1>     mov rdi, rdx
    53 00005CE0 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 00005CE5 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 00005CE8 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 00005CF0 F605(15050000)FF    <1>     test byte [pspCopyFlg], -1
    57 00005CF7 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 00005CF9 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 00005D01 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 00005D05 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 00005D09 31C9                <1>     xor ecx, ecx
    64 00005D0B B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 00005D10 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 00005D14 B0FF                <1>     mov al, -1
    67 00005D16 F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 00005D18 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 00005D1A E8AAF4FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 00005D1F 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 00005D22 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 00005D26 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 00005D2A 67E31C              <1>     jecxz .copy
    77 00005D2D FFC9                <1>     dec ecx
    78 00005D2F AC                  <1>     lodsb   ;Get the SFTndx in al
    79 00005D30 0FB6D8              <1>     movzx ebx, al
    80 00005D33 53                  <1>     push rbx
    81 00005D34 E813F5FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 00005D39 58                  <1>     pop rax
    83 00005D3A 7508                <1>     jnz .badJFT
    84 00005D3C AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 00005D3D E821F5FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 00005D42 EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 00005D44 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 00005D47 EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 00005D49 C605(15050000)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 00005D50 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 00005D51 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 00005D54 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt22h]
    96 00005D58 B022                <1>     mov al, 22h
    97 00005D5A E890160000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 00005D5F 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 00005D62 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 00005D64 B023                <1>     mov al, 23h
   101 00005D66 E884160000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 00005D6B 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 00005D6E 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 00005D70 B024                <1>     mov al, 24h
   105 00005D72 E878160000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 00005D77 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 00005D7A 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 00005D7C 66C702CD20          <1>     mov word [rdx + psp.return], 020CDh  ;Int 20h
   110 00005D81 66C74250CD21        <1>     mov word [rdx + psp.unixEntry], 021CDh  
   111 00005D87 C64252C3            <1>     mov byte [rdx + psp.unixEntry + 2], 0C3h ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 00005D8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 00005D8C C605(06070000)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 00005D93 81FA06000000        <1>     cmp edx, 6
   120 00005D99 7305                <1>     jae .aboveMinimum
   121 00005D9B BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 00005DA0 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 00005DA7 89D3                <1>     mov ebx, edx
   129 00005DA9 50                  <1>     push rax    ;Preserve errorlevel across call
   130 00005DAA 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 00005DAB E8A8FCFFFF          <1>     call reallocMemory
   132 00005DB0 5B                  <1>     pop rbx
   133 00005DB1 58                  <1>     pop rax
   134 00005DB2 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 00005DB4 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 00005DB8 EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 00005DBA 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ;For now, adjust error level in var
   143 00005DBC 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   144 00005DBE 8625(06070000)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   145 00005DC4 F605(8C040000)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   146 00005DCB 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   147 00005DCD 8625(8C040000)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   148 00005DD3 C605(06070000)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   149                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   150 00005DDA 8A25(06070000)      <1>     mov ah, byte [exitType] ;Get the exitType
   151                              <1> .storeELvl:
   152 00005DE0 668905(2F040000)    <1>     mov word [errorLevel], ax   ;Store word
   153                              <1> ;rbx points to current PSP
   154                              <1> ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   155 00005DE7 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   156 00005DEE 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt24h]
   157 00005DF2 B024                <1>     mov al, 24h
   158 00005DF4 E8F91C0000          <1>     call setIntVector
   159 00005DF9 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt23h]
   160 00005DFD B023                <1>     mov al, 23h
   161 00005DFF E8EE1C0000          <1>     call setIntVector
   162 00005E04 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt22h]
   163 00005E08 B022                <1>     mov al, 22h
   164 00005E0A E8E31C0000          <1>     call setIntVector
   165                              <1> 
   166 00005E0F B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   167 00005E11 CD2A                <1>     int 2Ah
   168 00005E13 C605(96040000)FF    <1>     mov byte [procExiting], -1  ;Critical errors now just return!
   169 00005E1A B822110000          <1>     mov eax, 1122h              ;Net redir, Process Termination Hook
   170 00005E1F 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   171 00005E26 CD2F                <1>     int 2Fh
   172                              <1> 
   173 00005E28 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   174 00005E2F 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   175 00005E32 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   176 00005E36 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   177 00005E39 0F848B000000        <1>     je .ownParent   ;No resource freeing if it is its own parent!
   178 00005E3F 803D(06070000)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   179 00005E46 7471                <1>     je .freeOk   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   180                              <1> 
   181                              <1> ;Now close file handles
   182                              <1> ;Close handles in reverse to preserve std handles for if an error again
   183                              <1> ; happens.
   184 00005E48 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   185 00005E4F 0FB75F4E            <1>     movzx ebx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   186 00005E53 85DB                <1>     test ebx, ebx   ;If its zero, close nothing
   187 00005E55 741A                <1>     jz .hdlEnd
   188                              <1> .hdlLp:
   189 00005E57 FFCB                <1>     dec ebx
   190 00005E59 53                  <1>     push rbx
   191 00005E5A E8FAD8FFFF          <1>     call closeFileHdl
   192 00005E5F 5B                  <1>     pop rbx
   193 00005E60 85DB                <1>     test ebx, ebx   ;If we're not yet zero, keep closing
   194 00005E62 75F3                <1>     jnz .hdlLp
   195                              <1> ;Now close all network files.
   196 00005E64 B81D110000          <1>     mov eax, 111Dh  ;Signal termination of process! Kill all net files!
   197 00005E69 CD2F                <1>     int 2Fh
   198                              <1> ;Now free share resources for this process
   199 00005E6B FF15(DF000000)      <1>     call qword [closeTaskShare] ;Free all share resources for this process
   200                              <1> .hdlEnd:
   201                              <1> ;Now remove routines exported by this task from internal tables 
   202                              <1> ; (or pause exit until all programs referencing importing the routines
   203                              <1> ;  provided by this DLL have also terminated.)
   204 00005E71 FF15(B7000000)      <1>     call qword [unloadDLLHook]  
   205                              <1>     
   206                              <1> ;Now free MCB's owned by task
   207 00005E77 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   208                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   209                              <1>     ; with the currentPSP signature and free them.
   210 00005E7E 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   211                              <1> .wlkMcb:  ;And walk the chain
   212                              <1> ;First verify the address in rsi is a valid mcb
   213 00005E85 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   214 00005E87 80F94D              <1>     cmp cl, mcbMarkCtn
   215 00005E8A 7405                <1>     je .checkToFree
   216 00005E8C 80F95A              <1>     cmp cl, mcbMarkEnd
   217 00005E8F 7528                <1>     jne .freeOk  ;Something wrong so stop freeing
   218                              <1> .checkToFree:
   219 00005E91 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   220 00005E95 750F                <1>     jne .noFree
   221 00005E97 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   222 00005E9B 53                  <1>     push rbx
   223 00005E9C 51                  <1>     push rcx
   224 00005E9D 56                  <1>     push rsi
   225 00005E9E E8ADFAFFFF          <1>     call freeMemory ;Free this memory block
   226 00005EA3 5E                  <1>     pop rsi
   227 00005EA4 59                  <1>     pop rcx
   228 00005EA5 5B                  <1>     pop rbx
   229                              <1>     ;If an error occured, the internal vars will be set.
   230                              <1> .noFree:
   231 00005EA6 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   232 00005EA9 740E                <1>     je .freeOk          ;Skip if we are
   233 00005EAB 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   234 00005EAE 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   235 00005EB2 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   236 00005EB7 EBCC                <1>     jmp short .wlkMcb
   237                              <1> .freeOk:
   238 00005EB9 FF15(A7000000)      <1>     call qword [terminateTask]  ;Registers task terminating, no retval
   239 00005EBF 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   240 00005EC3 488905(1F040000)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   241                              <1> .ownParent:
   242 00005ECA B0FF                <1>     mov al, -1  ;Flush all drive buffers
   243 00005ECC E8DE190000          <1>     call dosCrit1Enter
   244 00005ED1 E875A8FFFF          <1>     call flushAllBuffersForDrive
   245 00005ED6 E8DE190000          <1>     call dosCrit1Exit
   246 00005EDB FA                  <1>     cli
   247 00005EDC C605(96040000)00    <1>     mov byte [procExiting], 0    ;We have exited now!
   248 00005EE3 C605(08040000)00    <1>     mov byte [inDOS], 0     ;Exiting DOS now
   249 00005EEA C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Reset error drive
   250 00005EF1 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   251 00005EF8 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]   ;Point rsp to the rsp on entry to DOS call
   252                              <1>     ;Dont touch the previous stack pointer thats left on the stack, only
   253                              <1>     ; the ret ptr and the flags
   254 00005EFC B022                <1>     mov al, 22h
   255 00005EFE E8EC140000          <1>     call muxGetIntVector    ;Get return vector in rbx
   256 00005F03 48895C2448          <1>     mov qword [rsp + callerFrame.rip], rbx
   257 00005F08 48C744245802020000  <1>     mov qword [rsp + callerFrame.flags], 0202h  ;Mimic safely DOS's ret flags
   258 00005F11 E86B190000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   259 00005F16 48CF                <1>     iretq   ;rsp ends up on the stack of the last entry into DOS
    46                                  %include "./src/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM file. 
    16                              <1> ; If not EXE, we read the filename extension.
    17                              <1> 
    18                              <1> ;If AL = 0 and 4 (if DOSMGR present):
    19                              <1> ;            Load Child Program and Xfr control to it
    20                              <1> ; rbx ------>   |-------------------------------|
    21                              <1> ;               |   Ptr to Environment Block    |
    22                              <1> ;               |                               |
    23                              <1> ;               | Can be 0 => Get pointer to    |
    24                              <1> ;               | parent Environment Block      |
    25                              <1> ;               |-------------------------------|
    26                              <1> ;               |   Ptr to Command Line to be   |
    27                              <1> ;               |   placed at PSP + 80h         |
    28                              <1> ;               |-------------------------------|
    29                              <1> ;               |   Ptr to first default FCB    |
    30                              <1> ;               |      to copy to PSP.fcb1      |
    31                              <1> ;               |                               |
    32                              <1> ;               | Should be used to parse the   |
    33                              <1> ;               |  first two command line args  |
    34                              <1> ;               |-------------------------------|
    35                              <1> ;               |   Ptr to second default FCB   |
    36                              <1> ;               |      to copy to PSP.fcb2      |
    37                              <1> ;               |-------------------------------|
    38                              <1> ;
    39                              <1> ;If AL = 1 :
    40                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    41                              <1> ; rbx ------>   |-------------------------------|
    42                              <1> ;               |         AS IN AL=00H          |
    43                              <1> ;               |-------------------------------|
    44                              <1> ;               |     Initial Value of RSP      |
    45                              <1> ;               |       on program launch       |
    46                              <1> ;               |                               |
    47                              <1> ;               |     This is returned to the   |
    48                              <1> ;               |         caller by DOS         |
    49                              <1> ;               |-------------------------------|
    50                              <1> ;               |     Initial Value of RIP      |
    51                              <1> ;               |       on program launch       |
    52                              <1> ;               |                               |
    53                              <1> ;               |     This is returned to the   |
    54                              <1> ;               |         caller by DOS         |
    55                              <1> ;               |-------------------------------|
    56                              <1> ;
    57                              <1> ;                      !!Important Note!!
    58                              <1> ;   The block pointed to by rbx must reserve the space for 
    59                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    60                              <1> ;
    61                              <1> ;If AL = 3 :
    62                              <1> ;                      Load program overlay
    63                              <1> ; rbx ------>   |-------------------------------|
    64                              <1> ;               |  Pointer to the byte in the   |
    65                              <1> ;               |  prog space to start writing  |
    66                              <1> ;               |        the overlay at.        |
    67                              <1> ;               |-------------------------------|
    68                              <1> ;               | QWORD value used as the base  |
    69                              <1> ;               |   address for relocation      |
    70                              <1> ;               |   computations. In most cases |
    71                              <1> ;               |   should be the same as the   |
    72                              <1> ;               |   load pointer. The desired   |
    73                              <1> ;               |   load address is subtracted  |
    74                              <1> ;               |   from this value to generate |
    75                              <1> ;               |   a valid relocation factor,  |
    76                              <1> ;               |   much like for normal load   |
    77                              <1> ;               |   but here we are controlling |
    78                              <1> ;               |    precisely the factor by    |
    79                              <1> ;               |     which we relocate the     |
    80                              <1> ;               |           symbols.            |
    81                              <1> ;               |  (Called a Relocation Factor) |
    82                              <1> ;               |     Only FOR EXE Overlays.    |
    83                              <1> ;               |    For COM, 0 is sufficient.  |
    84                              <1> ;               |-------------------------------|
    85                              <1> ; For AL = 3: Both pointers must be aligned to section alignment.
    86                              <1> ;   If this is not the case, DOS will round UP both pointers to the 
    87                              <1> ;   section alignment for the file being loaded. 
    88                              <1> ; The overlay will be loaded so that the first byte at the start of the memory
    89                              <1> ; block is the first byte of the first section of the executable. No header
    90                              <1> ; information will be retained. Thus, (for now) overlays cannot be used to export 
    91                              <1> ; functions or import functions from DLLs. Furthermore, it is HIGHLY recommended
    92                              <1> ; that you compile any .EXE overlays to have a section alignment of 1 byte.
    93                              <1> ;
    94                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    95                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    96                              <1> ;
    97                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    98 00005F18 55                  <1>     push rbp
    99 00005F19 4889E5              <1>     mov rbp, rsp
   100 00005F1C 4881EC80000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   101                              <1>     ;Clear up the pointers on the stack frame
   102 00005F23 31C9                <1>     xor ecx, ecx
   103 00005F25 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   104 00005F29 48894DD0            <1>     mov qword [rbp - execFrame.pEnvBase], rcx
   105 00005F2D 48894DC0            <1>     mov qword [rbp - execFrame.pProgBase], rcx
   106 00005F31 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   107 00005F35 48894D98            <1>     mov qword [rbp - execFrame.pProgEP], rcx
   108                              <1> 
   109 00005F39 B403                <1>     mov ah, execOverlay
   110 00005F3B F605(9E000000)FF    <1>     test byte [dosMgrPresent], -1 ;If bits set, change max to execBkgrnd
   111 00005F42 7402                <1>     jz short .noMulti
   112 00005F44 B404                <1>     mov ah, execBkgrnd
   113                              <1> .noMulti:
   114 00005F46 38E0                <1>     cmp al, ah
   115 00005F48 7615                <1>     jbe .validSubfunction
   116                              <1> .badSubFunction:
   117 00005F4A B801000000          <1>     mov eax, errInvFnc
   118 00005F4F C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   119                              <1> .badExit:
   120 00005F56 4889EC              <1>     mov rsp, rbp
   121 00005F59 5D                  <1>     pop rbp
   122 00005F5A E99B190000          <1>     jmp extErrExit
   123                              <1> 
   124                              <1> .validSubfunction:
   125 00005F5F 3C02                <1>     cmp al, execInvld
   126 00005F61 74E7                <1>     je .badSubFunction
   127                              <1>     ;Save registers for each function call
   128 00005F63 48895DE0            <1>     mov qword [rbp - execFrame.pParam], rbx
   129 00005F67 488955D8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   130 00005F6B 0FB6C0              <1>     movzx eax, al
   131 00005F6E 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   132 00005F72 4889D7              <1>     mov rdi, rdx
   133 00005F75 E820160000          <1>     call strlen ;Get string length in cx
   134 00005F7A 66894DE8            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   135                              <1> ;Now open the file we wanna launch
   136 00005F7E 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   137 00005F80 55                  <1>     push rbp    ;Preserve local frame ptr
   138 00005F81 B923000000          <1>     mov ecx, 23h    ;Tell server to open for exec. No writing or sharing!
   139 00005F86 E88CD6FFFF          <1>     call openFileHdl
   140 00005F8B 5D                  <1>     pop rbp
   141 00005F8C 72C8                <1>     jc .badExit ;Exit preserving error code in al
   142                              <1>     ;Now ax has the file handle
   143 00005F8E 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   144 00005F92 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   145 00005F95 E897F2FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   146 00005F9A 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   147 00005F9E F7C280000000        <1>     test edx, devCharDev
   148 00005FA4 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   149 00005FA6 B002                <1>     mov al, errFnf
   150 00005FA8 E922060000          <1>     jmp .cleanAndFail
   151                              <1> .validDiskFile:
   152 00005FAD 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   153 00005FB5 0F8489000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   154                              <1> ;If we get an instruction to copy parent env, we do that. If the 
   155                              <1> ; parent ptr is a special NULL value, then we leave the NULL value
   156                              <1> ; in place in the execFrame envPtr var. Else, we use the parent
   157                              <1> ; env pointer as the source of our copy.
   158 00005FBB 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   159 00005FBF 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   160 00005FC2 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. copy parent env)
   161 00005FC5 7510                <1>     jnz short .copyEnvironmentBlock
   162 00005FC7 488B35(1F040000)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   163 00005FCE 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get ptr to env src from parent env
   164 00005FD2 4885C0              <1>     test rax, rax   ;Was parent ptr 0? If so, skip allocing new env.
   165 00005FD5 746D                <1>     jz short .loadProgram ;This is used by the boot process!!
   166                              <1> .copyEnvironmentBlock:
   167 00005FD7 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   168                              <1> ;Get the length of the environment
   169 00005FDA B9FF7F0000          <1>     mov ecx, 7fffh  ;32kb limit for env size
   170 00005FDF 31C0                <1>     xor eax, eax
   171 00005FE1 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   172                              <1> .envVerifyLp:
   173 00005FE4 F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   174 00005FE6 7531                <1>     jnz short .invalidEnvironmentError
   175 00005FE8 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   176 00005FEB FFC9                <1>     dec ecx
   177 00005FED AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   178 00005FEE 75F4                <1>     jnz short .envVerifyLp
   179                              <1> 
   180 00005FF0 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   181 00005FF3 57                  <1>     push rdi     ;Save the length of the environment block
   182 00005FF4 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   183 00005FFA 0FB75DE8            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   184 00005FFE 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   185 00006000 89FB                <1>     mov ebx, edi
   186 00006002 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   187 00006005 55                  <1>     push rbp
   188 00006006 E841F7FFFF          <1>     call allocateMemory
   189 0000600B 5D                  <1>     pop rbp
   190 0000600C 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   191 0000600D 7314                <1>     jnc short .copyEnvironment
   192                              <1>     ;Fall thru if not enuff memory
   193                              <1> .insufficientMemory:
   194 0000600F B808000000          <1>     mov eax, errNoMem
   195 00006014 E9B6050000          <1>     jmp .cleanAndFail
   196                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   197 00006019 B80A000000          <1>     mov eax, errBadEnv
   198 0000601E E9AC050000          <1>     jmp .cleanAndFail
   199                              <1> 
   200                              <1> .copyEnvironment:
   201                              <1>     ;rax has the ptr to allocated memory block
   202                              <1>     ;rcx has the number of chars to copy from the source env block
   203 00006023 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   204 00006026 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   205 0000602A 488B75E0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   206 0000602E 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   207 00006031 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   208 00006033 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   209 00006038 66AB                <1>     stosw       ;Away you go!
   210 0000603A 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   211 0000603E 0FB74DE8            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   212 00006042 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   213                              <1> ;Done with the environment... more or less
   214                              <1> .loadProgram:
   215 00006044 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   216 00006049 488D15(1E050000)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   217 00006050 E896050000          <1>     call .readDataFromHdl
   218 00006055 0F826F050000        <1>     jc .badFmtErr
   219 0000605B 85C0                <1>     test eax, eax   ;Were zero bytes read?
   220 0000605D 0F8467050000        <1>     jz .badFmtErr
   221 00006063 3D40000000          <1>     cmp eax, imageDosHdr_size
   222 00006068 0F826F030000        <1>     jb .loadCom
   223                              <1> 
   224 0000606E 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   225 00006073 740B                <1>     je .proceedEXE
   226 00006075 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   227 0000607A 0F855D030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   228                              <1> .proceedEXE:
   229                              <1>     ;Now we need to read e_lfanew
   230 00006080 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   231 00006081 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   232 00006084 8955B0              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   233 00006087 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   234 00006089 30C0                <1>     xor al, al  ;Set file pointer from start of file
   235 0000608B 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   236 0000608F E8AFD7FFFF          <1>     call lseekHdl   ;Move to that position in the file
   237 00006094 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   238 00006095 B918000000          <1>     mov ecx, imageFileHeader_size
   239 0000609A E84C050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   240 0000609F 85C0                <1>     test eax, eax   ;Were zero bytes read?
   241 000060A1 0F8423050000        <1>     jz .badFmtErr
   242 000060A7 3D18000000          <1>     cmp eax, imageFileHeader_size
   243 000060AC 0F8218050000        <1>     jb .badFmtErr
   244                              <1>     ;So now rdx points to the imageFileHeader
   245 000060B2 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   246 000060B8 0F850C050000        <1>     jne .badFmtErr
   247 000060BE 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   248 000060C4 0F8500050000        <1>     jne .badFmtErr
   249                              <1>     ;Check the binary is executable
   250 000060CA 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   251 000060CE 66A90200            <1>     test ax, imageFileExecutable
   252 000060D2 0F84F2040000        <1>     jz .badFmtErr
   253 000060D8 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   254                              <1> 
   255 000060DC 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   256 000060E2 0F82E2040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   257                              <1>     ;Now save the number of sections in the the file
   258 000060E8 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   259 000060EC 85C0                <1>     test eax, eax   ;If this is 0, what?
   260 000060EE 0F84D6040000        <1>     jz .badFmtErr
   261 000060F4 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   262                              <1>     ;Now load Optional header, file ptr points to it so all good!
   263 000060F8 B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   264                              <1>     ;rdx points to exeHdrSpace
   265 000060FD E8E9040000          <1>     call .readDataFromHdl
   266 00006102 85C0                <1>     test eax, eax   ;Were zero bytes read?
   267 00006104 0F84C0040000        <1>     jz .badFmtErr
   268 0000610A 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   269 0000610F 0F82B5040000        <1>     jb .badFmtErr
   270                              <1>     ;Now File Ptr points to data dirs, not an issue
   271 00006115 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   272                              <1>     ;We load the program in, one section at a time, reading section headers in
   273                              <1>     ; one at a time to the section header internal buffer.
   274 0000611C 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   275 00006124 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   276 00006126 8B1D(56050000)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   277 0000612C 488B05(6E050000)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackCommit]
   278 00006133 4885C0              <1>     test rax, rax
   279 00006136 750A                <1>     jnz .notDefaultStackAlloc
   280 00006138 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   280 00006141 00                  <1>
   281                              <1> .notDefaultStackAlloc:
   282 00006142 01C3                <1>     add ebx, eax    ;Add stack allocation
   283 00006144 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   284                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   285                              <1>     ; section aligned and so we will need to align before reading, to 
   286                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   287 0000614A 031D(3E050000)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   288 00006150 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   289 00006153 81C311000000        <1>     add ebx, 11h
   290 00006159 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   291 0000615C 55                  <1>     push rbp
   292 0000615D E8EAF5FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   293 00006162 5D                  <1>     pop rbp
   294 00006163 0F82A6FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   295 00006169 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   296 0000616D 480500010000        <1>     add rax, psp_size
   297 00006173 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of exe hdr goes here
   298                              <1>     ;Finally, just check that we have some code to execute. 
   299                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   300 00006177 813D(22050000)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   300 0000617F 0000                <1>
   301 00006181 0F8443040000        <1>     je .badFmtErr   ;If no bytes, exit error
   302 00006187 EB0B                <1>     jmp short .exeProceed1
   303                              <1> .exeOvlySkipAlloc:
   304 00006189 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   305 0000618D 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   306 00006190 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   307                              <1> .exeProceed1:
   308                              <1> ;===========================================================================
   309                              <1>     ;The below blocks are being kept because they can be turned on later
   310                              <1>     ; to change this exe loader to force section alignment of the 
   311                              <1>     ; base load address. It appears there is no need to enforce that the 
   312                              <1>     ; base load address be section aligned, but individual sections need
   313                              <1>     ; to adhere to the section alignment requirements thereafter. 
   314                              <1>     ;Finally, the pProgBase gets rescaled so that the first byte of the 
   315                              <1>     ; first section gets places at the load address and not at some
   316                              <1>     ; offset from it (as is usually the case, offset 1000h).
   317                              <1> ;===========================================================================
   318                              <1>     ;=======================================================================
   319                              <1>     ;Now we align the progBase to full header size aligned to the next page
   320                              <1>     ;mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   321                              <1>     ;add rax, rbx    ;Add this offset where the header should go in future
   322                              <1>     ;=======================================================================
   323                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   324                              <1>     ;It appears that the load address does NOT need to be aligned at all xD
   325                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   326                              <1>     ;Now we section pad. Once aligned, that is the program base address!
   327                              <1>     ;push rax
   328                              <1>     ;mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   329                              <1>     ;dec ecx ;Turn into a mask
   330                              <1>     ;and rax, rcx    ;Compute ptr modulo mask
   331                              <1>     ;inc ecx
   332                              <1>     ;sub rcx, rax
   333                              <1>     ;pop rdi
   334                              <1>     ;xor eax, eax
   335                              <1>     ;rep stosb
   336                              <1>     ;mov qword [rbp - execFrame.pProgBase], rdi
   337                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   338                              <1> 
   339                              <1>     ;So now copy one section at a time, read section header in
   340                              <1>     ;File pointer points to the directory table, so skip that
   341 00006194 8B15(8A050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   342                              <1>     ;Load however many directories we have into place
   343                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   344 0000619A C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   345 0000619D 31C9                <1>     xor ecx, ecx
   346 0000619F 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   347 000061A3 B001                <1>     mov al, 1   ;Move handle forwards from current position
   348 000061A5 E899D6FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   349                              <1>     ;eax has pointer location after adjustment
   350 000061AA 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   351                              <1>     ;File now points to start of Section headers. Read first header in.
   352                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   353 000061AD 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   354 000061B1 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   355 000061B5 31F6                <1>     xor esi, esi    ;Use as an indicator for the first data segment. 
   356 000061B7 488975A8            <1>     mov qword [rbp - execFrame.bSegCount], rsi  ;Clear the segment counter
   357                              <1> .loadLp:
   358 000061BB 51                  <1>     push rcx    ;Save # of segments left on stack
   359 000061BC 57                  <1>     push rdi    ;Save the current buffer ptr here
   360 000061BD B928000000          <1>     mov ecx, imageSectionHdr_size
   361 000061C2 488D15(9E050000)    <1>     lea rdx, sectHdr    ;Read section headers here
   362 000061C9 E81D040000          <1>     call .readDataFromHdl
   363 000061CE 5F                  <1>     pop rdi
   364 000061CF 59                  <1>     pop rcx
   365 000061D0 85C0                <1>     test eax, eax
   366 000061D2 0F84F2030000        <1>     jz .badFmtErr
   367 000061D8 3D28000000          <1>     cmp eax, imageSectionHdr_size
   368 000061DD 0F85E7030000        <1>     jne .badFmtErr
   369                              <1>     ;File ptr moved forwards to next section header
   370 000061E3 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   371                              <1>     ;Section header read, now we load section into memory
   372                              <1>     ;Move file ptr to data location
   373 000061EA 8B15(B2050000)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   374 000061F0 85D2                <1>     test edx, edx
   375 000061F2 744B                <1>     jz short .skipRawPtrMove
   376 000061F4 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   377 000061F8 31C0                <1>     xor eax, eax    ;Seek from start of file
   378 000061FA 51                  <1>     push rcx
   379 000061FB 57                  <1>     push rdi
   380 000061FC E842D6FFFF          <1>     call lseekHdl
   381 00006201 5F                  <1>     pop rdi
   382 00006202 59                  <1>     pop rcx
   383                              <1>     ;Is this a overlay load?
   384 00006203 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   385 0000620B 7532                <1>     jne short .skipRawPtrMove
   386                              <1>     ;Here we rescale to put the first byte at pLoadLoc and use the 
   387                              <1>     ; rescale value against RelocFct to compute the qRelocVal for later
   388                              <1>     ;Is this is the first segment with data being read into memory?
   389 0000620D 48FF45A8            <1>     inc qword [rbp - execFrame.bSegCount]
   390 00006211 48817DA801000000    <1>     cmp qword [rbp - execFrame.bSegCount], 1 
   391 00006219 7524                <1>     jne short .skipRawPtrMove   ;If not, skip
   392                              <1>     ;Now rebase the program to point the first byte of the first
   393                              <1>     ; section at the ProgBase.
   394 0000621B 51                  <1>     push rcx
   395 0000621C 57                  <1>     push rdi
   396 0000621D 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Get the load address
   397 00006221 8B0D(AA050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualAddress]
   398 00006227 4829CF              <1>     sub rdi, rcx    ;Rebase by offset of the first section
   399 0000622A 48897DC0            <1>     mov qword [rbp - execFrame.pProgBase], rdi 
   400 0000622E 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam]
   401 00006232 488B7F08            <1>     mov rdi, qword [rdi + loadOvly.qRelocFct]   ;Get the reload factor
   402 00006236 4829CF              <1>     sub rdi, rcx    ;Now rescale the relocation factor by the same amount
   403 00006239 48897D88            <1>     mov qword [rbp - execFrame.qRelocVal], rdi  ;Now store this value for later
   404 0000623D 5F                  <1>     pop rdi
   405 0000623E 59                  <1>     pop rcx
   406                              <1> .skipRawPtrMove:
   407 0000623F 51                  <1>     push rcx
   408 00006240 31FF                <1>     xor edi, edi
   409 00006242 8B3D(AA050000)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   410 00006248 48037DC0            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   411                              <1>     ;If a section has a virtual address outside of the allocation arena
   412                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   413                              <1>     ; next section.
   414 0000624C 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   415 00006250 4885D2              <1>     test rdx, rdx   ;If this is 0 (as in the case of overlay)...
   416 00006253 7432                <1>     jz short .okToLoad  ;skip this as it is assumed there is enough space!
   417 00006255 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   418 0000625C 31C9                <1>     xor ecx, ecx
   419 0000625E 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   420 00006261 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   421 00006265 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   422 0000626C 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   423 0000626F 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   424 00006272 7713                <1>     ja short .okToLoad
   425                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   426                              <1> 
   427                              <1>     ;V-0000000000-EARMARK FOR REMOVAL-0000000000-V
   428 00006274 F705(C2050000)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   428 0000627C 0000                <1>
   429 0000627E 0F8546030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   430                              <1>     ;^-0000000000-EARMARK FOR REMOVAL-0000000000-^
   431                              <1> 
   432                              <1>     ;Else, just skip this section, goto next section
   433 00006284 59                  <1>     pop rcx
   434 00006285 EB3F                <1>     jmp short .gotoNextSection
   435                              <1> .okToLoad:
   436 00006287 8B0D(A6050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   437 0000628D 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   438 00006290 57                  <1>     push rdi    ;Save section in memory locally
   439 00006291 E855030000          <1>     call .readDataFromHdl
   440 00006296 5F                  <1>     pop rdi
   441 00006297 59                  <1>     pop rcx     ; Matches push after skipRawPtrMove
   442 00006298 0F822C030000        <1>     jc .badFmtErr
   443                              <1>     ;Don't check for a zero section read as empty sections may be present!
   444 0000629E 3B05(A6050000)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   445 000062A4 0F8520030000        <1>     jne .badFmtErr
   446                              <1>     ;Data read ok, now fill in any zeros needed
   447 000062AA 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   448                              <1> 
   449 000062AD 51                  <1>     push rcx
   450                              <1>     ;Here do section padding
   451 000062AE 4889F8              <1>     mov rax, rdi    ;Get the current address
   452 000062B1 8B0D(3E050000)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   453 000062B7 FFC9                <1>     dec ecx ;Turn into a mask
   454 000062B9 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   455 000062BC FFC1                <1>     inc ecx
   456 000062BE 4829C1              <1>     sub rcx, rax
   457 000062C1 31C0                <1>     xor eax, eax
   458 000062C3 F3AA                <1>     rep stosb
   459 000062C5 59                  <1>     pop rcx
   460                              <1> .gotoNextSection:
   461 000062C6 FFC9                <1>     dec ecx ;Decrement our section counter
   462 000062C8 7419                <1>     jz short .doExeFixups
   463                              <1>     ;Read next section header in here
   464 000062CA 51                  <1>     push rcx
   465 000062CB 57                  <1>     push rdi
   466 000062CC 30C0                <1>     xor al, al  ;Move rel start of file
   467 000062CE 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   468 000062D1 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   469 000062D5 31C9                <1>     xor ecx, ecx
   470 000062D7 E867D5FFFF          <1>     call lseekHdl
   471 000062DC 5F                  <1>     pop rdi
   472 000062DD 59                  <1>     pop rcx
   473 000062DE E9D8FEFFFF          <1>     jmp .loadLp
   474                              <1> .doExeFixups:
   475                              <1> ;Here we fixup addresses if needed
   476                              <1> ;If the program is loaded at its desired location never need to relocate.
   477                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   478                              <1> ;   If the program has had it's .reloc section stripped by the linker
   479                              <1> ;       or has no .reloc directory, we fail
   480                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   481                              <1> ;       relocations anyway.
   482                              <1> 
   483                              <1> ;If program base = desired load, skip relocs
   484 000062E3 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   485 000062E7 483B15(36050000)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   486 000062EE 0F84CA000000        <1>     je .exeComplete
   487                              <1> ;If program has had relocs stripped, fail
   488 000062F4 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   489 000062F8 66A90100            <1>     test ax, imageFileRelocsStripped
   490 000062FC 0F85C8020000        <1>     jnz .badFmtErr
   491                              <1> ;If program has no .reloc section, fail
   492 00006302 8B15(8A050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   493 00006308 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   494 0000630E 0F82B6020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   495                              <1> ;Now we get the reloc section
   496 00006314 8B55B0              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   497 00006317 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   498                              <1>     ;eax now points to position in file of directory entry for reloc
   499 0000631D 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   500 00006321 31C0                <1>     xor eax, eax
   501 00006323 E81BD5FFFF          <1>     call lseekHdl   ;Move handle there in file
   502 00006328 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   503 0000632B B908000000          <1>     mov ecx, imageDataDirectory_size
   504                              <1>     ;Read 8 bytes into sectHdr space
   505 00006330 488D15(9E050000)    <1>     lea rdx, sectHdr
   506 00006337 E8AF020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   507 0000633C 85C0                <1>     test eax, eax
   508 0000633E 0F8486020000        <1>     jz .badFmtErr
   509 00006344 39C8                <1>     cmp eax, ecx
   510 00006346 0F857E020000        <1>     jne .badFmtErr
   511                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   512 0000634C 8B35(9E050000)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   513 00006352 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   514 00006354 7468                <1>     jz .exeComplete   ;... including if overlay
   515 00006356 480375C0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   516                              <1>     ;Now rsi points to where in memory the relocation data table is
   517                              <1>     ;Now compute the relocation factor =
   518                              <1>     ;   Difference from the load address and prefered
   519 0000635A 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   520 0000635E 482B05(36050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   521 00006365 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   522 0000636D 750F                <1>     jne short .notOverlayReloc
   523                              <1>     ;For overlays, we use the relocation factor as the base of computation.
   524                              <1>     ;Thus now the relocation factor becomes the ProgBase.
   525                              <1>     ;This should be the same as ProgBase anyway for overlays.
   526 0000636F 488B4588            <1>     mov rax, qword [rbp - execFrame.qRelocVal]   ;Get the overlay reloc factor
   527 00006373 482B05(36050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   528                              <1>     ;Store this as the overlay program base
   529 0000637A 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   530                              <1> .notOverlayReloc:
   531 0000637E 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   532                              <1>     ;rsi points to relocation data table in memory
   533 00006381 8B0D(A2050000)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   534 00006387 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   535 00006389 7433                <1>     jz .exeComplete
   536                              <1>     ;rsi points to the first base relocation block. The relocations begin
   537                              <1>     ; after the first block
   538                              <1>     ;ecx has the number of base relocation blocks to process.
   539                              <1> .nextBlock:
   540 0000638B 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   541 0000638C 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   542 0000638E 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   543 00006392 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   544 00006395 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   545 00006398 67E31E              <1>     jecxz .blockDone    
   546 0000639B 81E908000000        <1>     sub ecx, 8
   547 000063A1 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   548 000063A8 D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   549                              <1> .blockNotDone:
   550 000063AA 66AD                <1>     lodsw   ;Get the next page offset word
   551 000063AC 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   552                              <1>     ;rdi points to base, rax give offset into 4Kb page
   553 000063B1 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   554 000063B5 FFC9                <1>     dec ecx
   555 000063B7 75F1                <1>     jnz .blockNotDone
   556                              <1> .blockDone:
   557 000063B9 59                  <1>     pop rcx
   558 000063BA FFC9                <1>     dec ecx
   559 000063BC 75CD                <1>     jnz .nextBlock
   560                              <1> .exeComplete:
   561 000063BE 8B05(2E050000)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   562                              <1>     ;Now get EP relative to the (rescaled) load address.
   563 000063C4 480345C0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   564 000063C8 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   565 000063CC FF15(AF000000)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   566 000063D2 0F82F2010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   567 000063D8 E9CC000000          <1>     jmp .buildChildPSP
   568                              <1> .loadCom:
   569                              <1>     ;File is open here, so just read the file into memory. 
   570                              <1>     ;The file cannot exceed 64Kb in size.
   571                              <1>     ;Allocate 64Kb of memory, or as much as we can
   572 000063DD 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   573 000063E5 745C                <1>     je .comOverlay
   574 000063E7 BBF0FF0000          <1>     mov ebx, 0FFF0h ;64Kb - 16 bytes, give me FFF0h bytes
   575 000063EC 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   576 000063EF C1EB04              <1>     shr ebx, 4      ;Convert to paragraphs
   577 000063F2 55                  <1>     push rbp
   578 000063F3 E854F3FFFF          <1>     call allocateMemory
   579 000063F8 5D                  <1>     pop rbp
   580 000063F9 7355                <1>     jnc .comallocOk
   581 000063FB 3C08                <1>     cmp al, errNoMem
   582 000063FD 0F85CC010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   583                              <1>     ;rbx should have the amount available in paragraphs
   584 00006403 09DB                <1>     or ebx, ebx ;Clear the upper dword
   585 00006405 48C1E304            <1>     shl rbx, 4
   586                              <1>     ;We check if this value is psp_size more than filesize
   587 00006409 53                  <1>     push rbx    ;Save new minimum size
   588 0000640A B802000000          <1>     mov eax, 2    ;Reposition to end of file
   589 0000640F 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   590 00006413 31D2                <1>     xor edx, edx    ;Go to end of file
   591 00006415 E829D4FFFF          <1>     call lseekHdl
   592                              <1>     ;eax has file size
   593 0000641A 5B                  <1>     pop rbx ;Get back max alloc size
   594 0000641B 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   595 0000641D 29C2                <1>     sub edx, eax
   596 0000641F 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   597 00006425 0F82E4FBFFFF        <1>     jb .insufficientMemory   ;Fail
   598 0000642B 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   599 0000642E C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   600 00006431 55                  <1>     push rbp
   601 00006432 E815F3FFFF          <1>     call allocateMemory
   602 00006437 5D                  <1>     pop rbp
   603 00006438 0F8291010000        <1>     jc .cleanAndFail
   604 0000643E E90D000000          <1>     jmp .comallocOk
   605                              <1> .comOverlay:
   606                              <1>     ;Here we simply read the file into the buffer provided
   607 00006443 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   608 00006447 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   609 0000644A 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   610 0000644E EB0A                <1>     jmp short .comRead
   611                              <1> .comallocOk:
   612                              <1>     ;rax should point to the first byte
   613 00006450 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   614 00006454 480500010000        <1>     add rax, psp_size
   615                              <1> .comRead:
   616 0000645A 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   617                              <1> 
   618 0000645E B802000000          <1>     mov eax, 2    ;Reposition to end of file
   619 00006463 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   620 00006467 31D2                <1>     xor edx, edx    ;Go to end of file
   621 00006469 E8D5D3FFFF          <1>     call lseekHdl
   622                              <1>     ;eax has filesize now
   623 0000646E 50                  <1>     push rax    ;Save filesize
   624 0000646F 31C0                <1>     xor eax, eax    ;Reposition to start of file
   625 00006471 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   626 00006475 31D2                <1>     xor edx, edx    ;Go to start of file
   627 00006477 E8C7D3FFFF          <1>     call lseekHdl
   628 0000647C 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   629 0000647D 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   630 00006485 7411                <1>     je .comOverlay2
   631                              <1>     ;Now we check if the space we have available is sufficient to load
   632                              <1>     ; the program. Skipped if an overlay being loaded
   633                              <1>     ;ecx = # File size
   634 00006487 8B55B8              <1>     mov edx, dword [rbp - execFrame.dProgSize]  ;Get the alloc space size
   635 0000648A 81EA00010000        <1>     sub edx, psp_size
   636 00006490 39CA                <1>     cmp edx, ecx    ;Do we have space for the PSP and program?
   637 00006492 0F8277FBFFFF        <1>     jb .insufficientMemory
   638                              <1> .comOverlay2:
   639 00006498 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   640 0000649C E84A010000          <1>     call .readDataFromHdl   ;Read from the file handle
   641 000064A1 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   642 000064A5 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   643                              <1> .buildChildPSP:
   644                              <1>     ;We can close handle now
   645 000064A9 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   646 000064AD 55                  <1>     push rbp
   647 000064AE E8A6D2FFFF          <1>     call closeFileHdl   ;Close the file
   648 000064B3 5D                  <1>     pop rbp
   649                              <1> 
   650                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   651 000064B4 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   652 000064BC 0F84E5000000        <1>     je .overlayExit
   653                              <1>     ;Now build the PSP
   654 000064C2 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   655 000064C5 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   656 000064C9 52                  <1>     push rdx
   657 000064CA 55                  <1>     push rbp
   658 000064CB E8DCF7FFFF          <1>     call createPSP
   659 000064D0 5D                  <1>     pop rbp
   660 000064D1 5A                  <1>     pop rdx
   661                              <1> 
   662                              <1> ;Now copy the environment block ptr over. 
   663                              <1> ;Stores the null ptr that is our pointer (special init case)
   664 000064D2 488B5DD0            <1>     mov rbx, qword [rbp - execFrame.pEnvBase]
   665                              <1> ;    test rbx, rbx
   666                              <1> ;    jz short .skipEnvCopy
   667 000064D6 48895A3E            <1>     mov qword [rdx + psp.envPtr], rbx
   668                              <1> ;.skipEnvCopy:
   669                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   670 000064DA 488915(1F040000)    <1>     mov qword [currentPSP], rdx
   671 000064E1 E8C9130000          <1>     call dosCrit1Enter
   672 000064E6 E827010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   673                              <1> 
   674 000064EB 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   675 000064F2 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;and set it!
   676                              <1> 
   677                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   678                              <1>     ; and set FS to point to the PSP
   679 000064F9 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   680                              <1> 
   681 000064FD 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   682 00006501 B925000000          <1>     mov ecx, fcb_size
   683 00006506 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   684 0000650A 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   685 0000650C F3A4                <1>     rep movsb   ;Copy fcb 1 over
   686 0000650E 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   687 00006512 B925000000          <1>     mov ecx, fcb_size
   688 00006517 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   689 0000651B 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   690 0000651D F3A4                <1>     rep movsb   ;Copy fcb 2 over
   691 0000651F 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   692 00006523 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   693 0000652A B980000000          <1>     mov ecx, 80h
   694 0000652F F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   695                              <1> 
   696 00006531 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   697 00006533 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   698                              <1> 
   699                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   700 00006536 88D8                <1>     mov al, bl
   701 00006538 30DB                <1>     xor bl, bl
   702 0000653A E8020F0000          <1>     call getCDSNotJoin
   703 0000653F 7302                <1>     jnc .drive1Ok
   704 00006541 B3FF                <1>     mov bl, -1
   705                              <1> .drive1Ok:
   706 00006543 88F8                <1>     mov al, bh
   707 00006545 30FF                <1>     xor bh, bh
   708 00006547 E8F50E0000          <1>     call getCDSNotJoin
   709 0000654C 7302                <1>     jnc .drive2Ok
   710 0000654E B7FF                <1>     mov bh, -1
   711                              <1> .drive2Ok:
   712                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   713                              <1>     ;rdi has pointer to psp
   714 00006550 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   715                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   716 00006553 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   717 00006558 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   717 00006561 FF                  <1>
   718 00006562 4821C6              <1>     and rsi, rax    ;To align downwards
   719                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   720                              <1>     ;That is the job of the runtime to handle.
   721                              <1> ;Registers carrying data at this point:
   722                              <1> ;bx = FCB drive statuses
   723                              <1> ;rsi = Stack Base
   724                              <1> ;rbp = execFrame
   725 00006565 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   726 00006569 750B                <1>     jne short .noBg
   727                              <1>     ;Get termination mode in ecx before xfring control to dosmgr
   728 0000656B 56                  <1>     push rsi
   729 0000656C E8AC0E0000          <1>     call getUserRegs
   730 00006571 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]  ;Get termination mode
   731 00006575 5E                  <1>     pop rsi
   732                              <1> .noBg:
   733 00006576 FF15(9F000000)      <1>     call qword [launchTask]
   734 0000657C 7251                <1>     jc short .cleanAndFail
   735                              <1> ;Final step: Transfer control
   736 0000657E 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   737 00006582 742C                <1>     je .xfrProgram
   738 00006584 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   739 00006588 741D                <1>     je .overlayExit ;Skip the below for background tasks
   740 0000658A 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   741 0000658E 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   742 00006592 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   743 00006596 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   744 00006599 4881EE08000000      <1>     sub rsi, 8  ;Now go down one so that we can pop the AX value from the stack
   745 000065A0 488906              <1>     mov qword [rsi], rax    ;Store the FCB status on the top of stack for AH=01h
   746 000065A3 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   747                              <1> .overlayExit:
   748 000065A7 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   749 000065AA 5D                  <1>     pop rbp ;Point rsp to the return address
   750 000065AB E93C130000          <1>     jmp extGoodExit ;And return!
   751                              <1> .xfrProgram:
   752 000065B0 FA                  <1>     cli
   753 000065B1 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   754 000065B4 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   755 000065BB FB                  <1>     sti
   756                              <1> 
   757 000065BC 57                  <1>     push rdi    ;Push &psp[0] onto the stack to allow for ret exit
   758 000065BD FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   759 000065C0 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   760 000065C3 4989F9              <1>     mov r9, rdi
   761 000065C6 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   762                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 000065C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   763                              <1> ;r8 is guaranteed to have a copy of the PSP.
   764                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   765                              <1> ;Everything else is optional and potentially changable at a later stage
   766                              <1> 
   767                              <1> .badFmtErr:
   768 000065CA B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   769                              <1> .cleanAndFail:
   770                              <1> ;Close the open file and any open resources and fail
   771 000065CF E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   772 000065D4 E8E0120000          <1>     call dosCrit1Exit
   773 000065D9 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   774 000065DD 50                  <1>     push rax    ;Save error code
   775 000065DE 55                  <1>     push rbp
   776 000065DF E875D1FFFF          <1>     call closeFileHdl
   777 000065E4 5D                  <1>     pop rbp
   778 000065E5 58                  <1>     pop rax
   779 000065E6 E96BF9FFFF          <1>     jmp .badExit
   780                              <1> 
   781                              <1> .readDataFromHdl:
   782                              <1> ;Input: ecx = Number of bytes to transfer
   783                              <1> ;       rdx = Ptr to the buffer to use
   784 000065EB 52                  <1>     push rdx
   785 000065EC E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   786 000065F1 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   787 000065F5 55                  <1>     push rbp
   788 000065F6 E89CD1FFFF          <1>     call readFileHdl
   789 000065FB 5D                  <1>     pop rbp
   790 000065FC E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   791 00006601 5A                  <1>     pop rdx
   792                              <1>     return
    13                              <2> %%_ret:
    14 00006602 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .clearArenaOwner:
   794 00006603 53                  <1>     push rbx
   795 00006604 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   796 00006606 E8A4120000          <1>     call dosCrit1Enter
   797 0000660B E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   798 00006610 5B                  <1>     pop rbx
   799                              <1>     return
    13                              <2> %%_ret:
    14 00006611 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   800                              <1> .setPSPArenaOwner:
   801                              <1> ;Sets the current PSP as the arena owner
   802 00006612 53                  <1>     push rbx
   803 00006613 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   804 0000661A E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   805 0000661F E895120000          <1>     call dosCrit1Exit
   806 00006624 5B                  <1>     pop rbx
   807                              <1>     return
    13                              <2> %%_ret:
    14 00006625 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   808                              <1> .setProgOrEnvArenaOwnerToRBX:
   809                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   810 00006626 9C                  <1>     pushfq
   811 00006627 50                  <1>     push rax
   812                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   813                              <1>     ;This is because they are set up at separate points in the routine!
   814 00006628 488B45C8            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   815 0000662C E80C000000          <1>     call .writeArenaHeaderOwner
   816 00006631 488B45D0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   817 00006635 E803000000          <1>     call .writeArenaHeaderOwner
   818 0000663A 58                  <1>     pop rax
   819 0000663B 9D                  <1>     popfq
   820                              <1>     return
    13                              <2> %%_ret:
    14 0000663C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   821                              <1> .writeArenaHeaderOwner:
   822                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   823                              <1> ;       rbx = Owner ID
   824 0000663D 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   825                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006640 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006642 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   826 00006643 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   827 00006649 48895801            <1>     mov qword [rax + 1], rbx
   828                              <1>     return
    13                              <2> %%_ret:
    14 0000664D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    47                                  %include "./src/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 0000664E 3C01                <1>     cmp al, 01
    12 00006650 740B                <1>     je .setSC
    13 00006652 7210                <1>     jb .getSC
    14 00006654 3C03                <1>     cmp al, 03
    15 00006656 7214                <1>     jb .getDev
    16 00006658 741C                <1>     je .setDev
    17 0000665A B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 0000665C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 0000665D 8815(D1030000)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 00006663 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 00006664 8A15(D1030000)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 0000666A EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 0000666C B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 0000666E E8AA0D0000          <1>     call getUserRegs
    29 00006673 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 00006676 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;---------------------------------------------------------
    36                              <1> ;Common input registers
    37                              <1> ;al = Country code, 0 means current country info.
    38                              <1> ;bx = Country code if al = -1.
    39                              <1> ;Get country info:
    40                              <1> ;   rdx -> Buffer for the country table (not extended table)
    41                              <1> ;Set country info:
    42                              <1> ;   rdx = -1
    43                              <1> ;---------------------------------------------------------
    44                              <1> ;Return:
    45                              <1> ;Get country info:
    46                              <1> ;   CF=CY -> Error, ax = Error code
    47                              <1> ;   CF=NC -> OK, ax=bx=Country code, buffer @ rdx filled
    48                              <1> ;Set country info:
    49                              <1> ;   CF=CY -> Error, ax = Error code
    50                              <1> ;   CF=NC -> OK
    51                              <1> ;---------------------------------------------------------
    52 00006677 4889D7              <1>     mov rdi, rdx    ;Move the pointer/set indicator to rdi
    53 0000667A 0FB6D0              <1>     movzx edx, al   ;Move potential partial country code, zx to edx
    54 0000667D 3CFF                <1>     cmp al, -1      ;Does bx have the country code?
    55 0000667F 0F45DA              <1>     cmovne ebx, edx ;If not, move it there
    56 00006682 31ED                <1>     xor ebp, ebp    ;Get country table
    57 00006684 B901000000          <1>     mov ecx, 1      ;Set country table
    58 00006689 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;Set or Get?
    59 00006690 7429                <1>     je .goToNlsFuncSet ;If set, immediately goto nls func
    60 00006692 85DB                <1>     test ebx, ebx   ;Else, in get, are we looking for current country?
    61 00006694 7527                <1>     jnz .goToNlsFunc    ;If not zero, goto nls func
    62                              <1>     ;Get current country info here, works w/o NLSFUNC
    63                              <1> .copyCountryTable:
    64 00006696 488D356C9BFFFF      <1>     lea rsi, ctryTbl
    65 0000669D B926000000          <1>     mov ecx, countryStruc_size
    66 000066A2 F3A4                <1>     rep movsb
    67 000066A4 0FB71D5A9BFFFF      <1>     movzx ebx, word [extCtryTbl.countryCode]    ;Get current country code
    68                              <1> .exitWithCountryCode:
    69 000066AB E86D0D0000          <1>     call getUserRegs
    70 000066B0 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx    ;And store it in users bx
    71                              <1> .exitNoCountryCode: 
    72 000066B4 89D8                <1>     mov eax, ebx    ;Move country code into eax for return (undocumented)
    73 000066B6 E931120000          <1>     jmp extGoodExit
    74                              <1> .goToNlsFuncSet:
    75 000066BB 89CD                <1>     mov ebp, ecx    ;Also set ebp to 1
    76                              <1> .goToNlsFunc:
    77 000066BD E812000000          <1>     call .nlsWrap   ;Access NLS functionality
    78 000066C2 0F8232120000        <1>     jc extErrExit   ;If CF=CY, exit error (error code in al)
    79 000066C8 85ED                <1>     test ebp, ebp   ;If set, exit, else get, we may need to copy data
    80 000066CA 75E8                <1>     jnz .exitNoCountryCode 
    81 000066CC 85DB                <1>     test ebx, ebx   ;If ebx = 0, we entered NLS and data copied for us.
    82 000066CE 75C6                <1>     jnz .copyCountryTable   ; If not, we gotta copy from our internal copy.
    83 000066D0 89D3                <1>     mov ebx, edx    ;Move the country code into ebx
    84 000066D2 EBD7                <1>     jmp short .exitWithCountryCode
    85                              <1> .nlsWrap:
    86                              <1> ;Subroutine to wrap NLS functions. Should do nothing if we are looking
    87                              <1> ; for the current country (to avoid hitting NLSFUNC and erroring if
    88                              <1> ; not installed).
    89                              <1> ;Input: ebp = 0 -> Get country info
    90                              <1> ;           = 1 -> Set DOS country info
    91                              <1> ;        bx = Country code (bx <> 0 here)
    92                              <1> ;       rdi -> User buffer
    93                              <1> ;       rsi -> DOS internal NLS structure
    94                              <1> ;Output: CF = CY -> Error, al has error code (-1 is generic error)
    95                              <1> ;        CF = NC -> OK
    96                              <1> ;        bx = 0 => Entered NLS and data copied to user buffer.
    97                              <1> ;           > 0 => User requested current country code. Data NOT copied.
    98                              <1> ;All other registers remain the unaffected.
    99 000066D4 663B1D2A9BFFFF      <1>     cmp bx, word [extCtryTbl.countryCode]   ;No NLS access if current ctry.
   100                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000066DB 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000066DD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   101 000066DE 89DA                <1>     mov edx, ebx    ;Save the country code in edx
   102 000066E0 31DB                <1>     xor ebx, ebx    ;Set indicator that we are accessing NLS.
   103 000066E2 B800140000          <1>     mov eax, 1400h  ;Is NLS installed?
   104 000066E7 CD2F                <1>     int 2fh
   105 000066E9 3CFF                <1>     cmp al, -1      ;If al <> -1, error exit
   106 000066EB 751F                <1>     jne .errNotInstalled
   107 000066ED 488D35959AFFFF      <1>     lea rsi, dosNLSPtr    ;Point rsi to the DOS codepage area
   108 000066F4 B804140000          <1>     mov eax, 1404h  ;Get Country Info, for country code in dx
   109 000066F9 B903140000          <1>     mov ecx, 1403h  ;Set DOS Country Info, to country code in dx
   110 000066FE 85ED                <1>     test ebp, ebp   ;What can I do you for amigo?
   111 00006700 0F45C1              <1>     cmovnz eax, ecx ;Set codepage if this is non-zero
   112 00006703 CD2F                <1>     int 2fh
   113 00006705 84C0                <1>     test al, al ;If al = 0, all ok and return CF=NC!
   114                              <1>     retz  
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006707 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006709 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   115                              <1> .exitErr:   ;Else return with the retuned error code
   116 0000670A F9                  <1>     stc     ;and CF set
   117                              <1>     return
    13                              <2> %%_ret:
    14 0000670B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> .errNotInstalled:
   119 0000670C B001                <1>     mov al, errInvFnc  ;Set invalid function signature
   120 0000670E EBFA                <1>     jmp short .exitErr
   121                              <1> 
   122                              <1> 
   123                              <1> getExtLocalInfo:    ;ah = 65h, Get Extended Country Info
   124                              <1> ;al = info ID or subfunction value
   125                              <1> ;al >= 20h:
   126                              <1> ;   If al[7] set, use filename table. Else, use normal table
   127                              <1> ;   al = 20h/A0h  country dependant character capitalisation
   128                              <1> ;       dl = Char to UC
   129                              <1> ;       dh = Reserved for second byte if DCBS
   130                              <1> ;   Returns:
   131                              <1> ;       dl = UC char
   132                              <1> ;       dh = Reserved for second byte if DCBS
   133                              <1> ;   al = 21h/A1h  country dependant string capitalisation
   134                              <1> ;       rdx -> Ptr to string of ecx characters to capitalise
   135                              <1> ;       ecx = String length
   136                              <1> ;   Returns: 
   137                              <1> ;       rdx -> Capitalised string
   138                              <1> ;   al = 22h/A2h  country dependant ASCIIZ string capitalisation
   139                              <1> ;       rdx -> Ptr to ASCIIZ string to capitalise
   140                              <1> ;   Returns:
   141                              <1> ;       rdx -> Capitalised ASCIIZ string
   142                              <1> ;   al = 23h/A3h  determine if character represents country relative
   143                              <1> ;                   Yes or No response 
   144                              <1> ;       dl = Char to test Y/N on
   145                              <1> ;       dh = Reserved for second byte if DCBS
   146                              <1> ;   Returns:
   147                              <1> ;       ax = 0 : (N)O
   148                              <1> ;       ax = 1 : (Y)ES 
   149                              <1> ;       ax = 2 : NEITHER
   150                              <1> ;al < 20h:
   151                              <1> ;   al = 01h get general internationalization info
   152                              <1> ;   al = 02h get pointer to uppercase table
   153                              <1> ;   xxx No 03h. Fails unknown function in this case xxx
   154                              <1> ;   al = 04h get pointer to filename uppercase table
   155                              <1> ;   al = 05h get pointer to filename terminator table
   156                              <1> ;   al = 06h get pointer to collating sequence table
   157                              <1> ;   al = 07h get pointer to DCBS table
   158                              <1> ;bx = code page (FFFFh=global code page)
   159                              <1> ;dx = country ID (FFFFh=current country)
   160                              <1> ;rdi -> country information buffer
   161                              <1> ;ecx = size of buffer (>= 9), fail if less! NOTE THE CHANGE FROM 5 to 9!!!!
   162                              <1> ;Return:
   163                              <1> ;CF=CY if error
   164                              <1> ;ax = error code
   165                              <1> ;CF=NC if successful
   166                              <1> ;ecx = size of country information returned
   167                              <1> ;rdi -> country information filled in
   168                              <1> ;Undocumented: ax = default Codepage if nls or requested codepage if internal
   169 00006710 3C20                <1>     cmp al, 20h
   170 00006712 0F827D000000        <1>     jb .getInterInfo
   171                              <1> ;Do string manipulation here
   172                              <1> ;Start by getting the correct table to use for translation
   173 00006718 488D1D129BFFFF      <1>     lea rbx, ucTbl
   174 0000671F 488D358D9BFFFF      <1>     lea rsi, fileUCTbl
   175 00006726 A880                <1>     test al, 80h    ;Check bit 7.
   176 00006728 480F45DE            <1>     cmovnz rbx, rsi ;If set, use fileUC table
   177 0000672C 247F                <1>     and al, ~80h    ;Now clear the checking bit
   178 0000672E 3C24                <1>     cmp al, 24h     ;Check the function number is valid
   179 00006730 0F83B7000000        <1>     jae .invFuncExit
   180 00006736 3C23                <1>     cmp al, 23h     ;Does the user want a Y/N check?
   181 00006738 7422                <1>     je .doYn
   182 0000673A 3C20                <1>     cmp al, 20h     ;Does the user want a char conversion?
   183 0000673C 7438                <1>     je .doOne
   184                              <1> ;String functions here
   185 0000673E 4889D6              <1>     mov rsi, rdx    ;Move source string ptr to rsi
   186 00006741 4889D7              <1>     mov rdi, rdx    ;Move destination ptr to rdi too
   187 00006744 3C21                <1>     cmp al, 21h     ;Do we have the count in ecx?
   188 00006746 7507                <1>     jne .doString   ;Yes, go straight to conversion
   189 00006748 E84D0E0000          <1>     call strlen     ;Else, get length of string to convert 
   190 0000674D FFC9                <1>     dec ecx         ;Drop the terminating null from conversion
   191                              <1> .doString:
   192                              <1> ;rsi -> Next char to convert
   193                              <1> ;rdi -> Position to store the converted char
   194                              <1> ;ecx = Number of chars to convert
   195 0000674F AC                  <1>     lodsb
   196 00006750 E83A000000          <1>     call .doChar    ;Converts the char in al
   197 00006755 AA                  <1>     stosb
   198 00006756 FFC9                <1>     dec ecx         ;One less char to convert
   199 00006758 75F5                <1>     jnz .doString
   200 0000675A EB15                <1>     jmp short .ynExit
   201                              <1> .doYn:
   202 0000675C E824000000          <1>     call .convChar  ;Uppercase char in dl.
   203 00006761 31C0                <1>     xor eax, eax    ;Else in Y/N check. Setup retcode in al
   204 00006763 80FA4E              <1>     cmp dl, "N"
   205 00006766 7409                <1>     je .ynExit
   206 00006768 FFC0                <1>     inc eax         ;Inc for yes
   207 0000676A 80FA59              <1>     cmp dl, "Y"
   208 0000676D 7402                <1>     je .ynExit
   209 0000676F FFC0                <1>     inc eax         ;Inc for unknown
   210                              <1> .ynExit:
   211 00006771 E976110000          <1>     jmp extGoodExit ;Return value in ax
   212                              <1> .doOne:
   213 00006776 E80A000000          <1>     call .convChar  ;Get converted char in dl
   214 0000677B E89D0C0000          <1>     call getUserRegs
   215 00006780 885618              <1>     mov byte [rsi + callerFrame.rdx], dl    ;Put dl into its place
   216 00006783 EBEC                <1>     jmp short .ynExit
   217                              <1> .convChar:
   218                              <1> ;Input: dl = Char to uppercase
   219                              <1> ;       rbx -> Table to use for conversion
   220                              <1> ;Output: dl = Uppercased char
   221 00006785 88D0                <1>     mov al, dl  ;Move the char into al to uppercase
   222 00006787 E803000000          <1>     call .doChar
   223 0000678C 88C2                <1>     mov dl, al
   224                              <1>     return
    13                              <2> %%_ret:
    14 0000678E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   225                              <1> .doChar:
   226                              <1> ;Input: rbx -> Table to use for uppercasing the string
   227                              <1> ;       al = Char to uppercase
   228                              <1> ;Output: al = Uppercased char
   229 0000678F 53                  <1>     push rbx
   230 00006790 E9BD0D0000          <1>     jmp uppercaseCharWithTable
   231                              <1> 
   232                              <1> .getInterInfo:
   233 00006795 81F909000000        <1>     cmp ecx, 9  ;Is our buffer of minimum acceptable size?
   234 0000679B 7250                <1>     jb .invFuncExit
   235 0000679D 488D35E599FFFF      <1>     lea rsi, dosNLSPtr
   236 000067A4 6681FAFFFF          <1>     cmp dx, -1
   237 000067A9 660F4415549AFFFF    <1>     cmove dx, word [extCtryTbl.countryCode] ;Get the current country code
   238 000067B1 6681FBFFFF          <1>     cmp bx, -1
   239 000067B6 660F441D499AFFFF    <1>     cmove bx, word [extCtryTbl.activeCP]    ;Get the current codepage
   240 000067BE 663B15409AFFFF      <1>     cmp dx, word [extCtryTbl.countryCode]
   241 000067C5 7570                <1>     jne .nlsReq
   242 000067C7 663B1D399AFFFF      <1>     cmp bx, word [extCtryTbl.activeCP]
   243 000067CE 7567                <1>     jne .nlsReq
   244                              <1>     ;We access our local DOS nationalisation tables to 
   245                              <1>     ; avoid hitting NLS.
   246 000067D0 488D35FE99FFFF      <1>     lea rsi, charTableArray
   247 000067D7 0FB72DF599FFFF      <1>     movzx ebp, word [ctryFunctions]    ;Get max number of tables to parse
   248                              <1> .loopTableSearch:
   249 000067DE 3A06                <1>     cmp al, byte [rsi]  ;Is the table ours?
   250 000067E0 751C                <1>     jne .tblFound
   251 000067E2 4881C609000000      <1>     add rsi, 9          ;Go to next table (skip one byte and one qword)
   252 000067E9 FFCD                <1>     dec ebp
   253 000067EB 75F1                <1>     jnz .loopTableSearch
   254                              <1>     ;Fallthrough to error if no match
   255                              <1> .invFuncExit:
   256 000067ED C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk  
   257 000067F4 B801000000          <1>     mov eax, errInvFnc  ;Bad info ID byte or subfunction
   258 000067F9 E9FC100000          <1>     jmp extErrExit
   259                              <1> .tblFound:
   260 000067FE A4                  <1>     movsb   ;Copy over the first byte, moving both pointers by 1
   261 000067FF 3C01                <1>     cmp al, 1
   262 00006801 741B                <1>     je .getExtCtryTbl
   263                              <1>     ;Here we simply copy over a qword
   264 00006803 B908000000          <1>     mov ecx, 8  ;Copy 8 more bytes
   265 00006808 B809000000          <1>     mov eax, 9  ;Number of bytes to save as having had been written
   266                              <1> .copyTable:
   267                              <1> ;Come here with eax = full copy len, ebx = codepage value, ecx = bytes to xfr
   268 0000680D F3A4                <1>     rep movsb   ;Copy the rest of the bytes
   269 0000680F E8090C0000          <1>     call getUserRegs
   270 00006814 894610              <1>     mov dword [rsi + callerFrame.rcx], eax    ;Store in ecx # of bytes
   271                              <1>     ;Undocumented, if success, ax contains the requested codepage
   272                              <1>     ; value. This is undocumented and should not be relied upon.
   273 00006817 89D8                <1>     mov eax, ebx    
   274 00006819 E9CE100000          <1>     jmp extGoodExit
   275                              <1> .getExtCtryTbl:
   276                              <1> ;ecx has length of caller buffer
   277 0000681E 81E903000000        <1>     sub ecx, 3  ;Remove the byte from the count and the length we will store
   278 00006824 31C0                <1>     xor eax, eax    ;Clear eax
   279 00006826 66AD                <1>     lodsw           ;Get word at rsi (full table len) and advance rsi by 2
   280 00006828 39C8                <1>     cmp eax, ecx    ;Do we have more bytes in buffer than we need?
   281 0000682A 0F47C8              <1>     cmova ecx, eax  ;Set it to exactly the table length in that case
   282 0000682D 89C8                <1>     mov eax, ecx    ;Copy the number of bytes back to eax too
   283 0000682F 66AB                <1>     stosw           ;Store number of bytes we will copy and adv rdi by 2
   284 00006831 678D4103            <1>     lea eax, dword [ecx + 3] ;Add 3 to eax, for first 3 bytes copied
   285 00006835 EBD6                <1>     jmp short .copyTable
   286                              <1>     
   287                              <1> .nlsReq:    ;nlsReq moved here to reach the short jumps :)
   288                              <1> ;As before, now rsi -> DOSNLS structure
   289                              <1> ; and bpl has the function code (1,2,4,5,6)
   290 00006837 0FB6E8              <1>     movzx ebp, al   ;Place the function code in ebp (low byte, zx the rest)
   291 0000683A B800140000          <1>     mov eax, 1400h  ;Install check!
   292 0000683F CD2F                <1>     int 2fh
   293 00006841 3CFF                <1>     cmp al, -1          ;If not installed, error exit
   294 00006843 75A8                <1>     jne .invFuncExit    
   295 00006845 B802140000          <1>     mov eax, 1402h      ;Get codepage info
   296 0000684A CD2F                <1>     int 2fh
   297 0000684C 84C0                <1>     test al, al         ;If the return code is 0, we are ok, else
   298 0000684E 0F85A6100000        <1>     jne extErrExit      ; al has error code
   299                              <1>     ;Undocumented, if success, ax contains the default codepage
   300                              <1>     ; value. This is undocumented and should not be relied upon.
   301                              <1>     ;This value never changes, not even by NLSFUNC.
   302 00006854 0FB7057699FFFF      <1>     movzx eax, word [defaultCP]
   303 0000685B E98C100000          <1>     jmp extGoodExit
   304                              <1> 
   305                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage
   306                              <1> ;If al = 01h -> Get Global Codepage
   307                              <1> ;Return:    ebx = Active (current) codepage
   308                              <1> ;           edx = System (default) codepage
   309                              <1> ;If al = 02h -> Set Global Codepage
   310                              <1> ;   bx = Active (current) codepage
   311                              <1> ;   dx = System (default) codepage. Not needed, so don't document.
   312 00006860 3C01                <1>     cmp al, 1
   313 00006862 7528                <1>     jne .setCodepage
   314                              <1> ;Here we get the codepage
   315 00006864 E8B40B0000          <1>     call getUserRegs
   316 00006869 0FB71D9799FFFF      <1>     movzx ebx, word [extCtryTbl.activeCP]   ;Get the active codepage value
   317 00006870 0FB7155A99FFFF      <1>     movzx edx, word [defaultCP] ;Get the default codepage
   318 00006877 895E08              <1>     mov dword [rsi + callerFrame.rbx], ebx
   319 0000687A 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   320 0000687D E96A100000          <1>     jmp extGoodExit
   321                              <1> .exitBadFunc:
   322 00006882 B801000000          <1>     mov eax, errInvFnc
   323 00006887 E96E100000          <1>     jmp extErrExit
   324                              <1> .setCodepage:
   325 0000688C 3C02                <1>     cmp al, 2
   326 0000688E 75F2                <1>     jne .exitBadFunc
   327 00006890 0FB715FA98FFFF      <1>     movzx edx, word [defltCtry] ;Get the country ID
   328 00006897 B800140000          <1>     mov eax, 1400h
   329 0000689C CD2F                <1>     int 2Fh
   330 0000689E 3CFF                <1>     cmp al, -1
   331 000068A0 75E0                <1>     jne .exitBadFunc
   332 000068A2 488D35E098FFFF      <1>     lea rsi, dosNLSPtr  ;Get pointer to the DOS codepage in rsi
   333 000068A9 B801140000          <1>     mov eax, 1401h      ;Set global codepage
   334 000068AE CD2F                <1>     int 2Fh
   335 000068B0 84C0                <1>     test al, al
   336 000068B2 0F8434100000        <1>     jz extGoodExit
   337 000068B8 3C41                <1>     cmp al, errNLSAcDen
   338 000068BA 0F853A100000        <1>     jne extErrExit
   339 000068C0 6698                <1>     cbw     ;Zero extend al into ax (as we know al = 41h)
   340 000068C2 668905(0B040000)    <1>     mov word [errorExCde], ax
   341 000068C9 C605(0D040000)06    <1>     mov byte [errorAction], eActIgn
   342 000068D0 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   343 000068D7 C605(0E040000)05    <1>     mov byte [errorClass], eClsHrdFlt
   344 000068DE E924100000          <1>     jmp extErrExit.noXlat   ;Jump to error exit without translating the error
   345                              <1> 
   346                              <1> 
   347                              <1> caseMapFunc:
   348                              <1> ;Input: AL=Char to convert to uppercase (above 80h)
   349 000068E3 3C80                <1>     cmp al, 80h
   350                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000068E5 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000068E7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   351 000068E8 53                  <1>     push rbx
   352 000068E9 488D1D4199FFFF      <1>     lea rbx, ucTbl
   353 000068F0 2C80                <1>     sub al, 80h ;Turn into an offset into the table
   354 000068F2 D7                  <1>     xlatb
   355 000068F3 5B                  <1>     pop rbx
   356                              <1>     return
    13                              <2> %%_ret:
    14 000068F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                                  %include "./src/Kernel/Error/harderr.asm"
     1                              <1> 
     2                              <1> diskIOError:
     3                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
     4                              <1> ;Input: rwFlag = 0 or 1 for read/write
     5                              <1> ;       eax = Status word
     6                              <1> ;       rdi -> buffer pointer
     7                              <1> ;       rbp -> DPB ptr
     8 000068F5 3C0F                <1>     cmp al, drvBadDskChnge
     9 000068F7 7510                <1>     jne .doReq
    10 000068F9 50                  <1>     push rax    ;If a bad disk change, drop the volume label ptr here
    11 000068FA 488B05(E3040000)    <1>     mov rax, qword [primReqPkt + ioReqPkt.desptr]   ;Get volume label ptr
    12 00006901 488905(0F040000)    <1>     mov qword [errorVolLbl], rax    ;and save it!
    13                              <1>     ;Later versions will include a serial number after the lbl too
    14 00006908 58                  <1>     pop rax
    15                              <1> .doReq:
    16 00006909 E849000000          <1>     call diskDevErr ;Preserves rdi on stack and rbp in tmpDPBPtr
    17                              <1>     return
    13                              <2> %%_ret:
    14 0000690E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                              <1> xlatHardError:
    19                              <1> ;Translates a hard error code to a generic DOS error
    20                              <1> ;Input: edi = Hard Error Code
    21                              <1> ;       ah = Bitfield
    22                              <1> ;       al = Failing drive number
    23 0000690F 50                  <1>     push rax    ;Wanna preserve ax
    24 00006910 6681FF1000          <1>     cmp di, hardXlatTblL    ;If errorcode > 15, do not adjust!!
    25 00006915 0FB7C7              <1>     movzx eax, di  ;Clears 64 bits and moves error code into ax
    26 00006918 730A                <1>     jae .skipXlat   ;Skip xlat if above 15, for IOCTL return errors
    27 0000691A 53                  <1>     push rbx
    28 0000691B 488D1D4797FFFF      <1>     lea rbx, hardXlatTbl
    29 00006922 D7                  <1>     xlatb    ;Get translated byte from the table in al
    30 00006923 5B                  <1>     pop rbx
    31                              <1> .skipXlat:
    32 00006924 668905(0B040000)    <1>     mov word [errorExCde], ax   ;Store this error code here
    33 0000692B 58                  <1>     pop rax
    34 0000692C 56                  <1>     push rsi
    35 0000692D 488D35E197FFFF      <1>     lea rsi, extErrTbl
    36 00006934 E81A100000          <1>     call setErrorVars
    37 00006939 5E                  <1>     pop rsi
    38                              <1>     return
    13                              <2> %%_ret:
    14 0000693A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> charDevErr:
    41                              <1> ;Hard character device errors come here
    42                              <1> ;Input:
    43                              <1> ; ah = Additional Int 24h flags. Top bit should be set!
    44                              <1> ;edi = error code in low byte
    45                              <1> ;rbp -> Not accessed but preserved
    46 0000693B 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK   ;Set the always bits
    47 0000693E 8825(68040000)      <1>     mov byte [Int24bitfld], ah
    48 00006944 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp
    49 0000694B 56                  <1>     push rsi
    50 0000694C 400FB6FF            <1>     movzx edi, dil    ;Zero extend the error code up
    51 00006950 E87C000000          <1>     call hardErrorCommon
    52 00006955 5E                  <1>     pop rsi
    53                              <1>     return
    13                              <2> %%_ret:
    14 00006956 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> diskDevErr:
    55                              <1> ;Called, NOT Jumped to. 
    56                              <1> ;Input: rdi = Disk Buffer pointer (or 0 to mean share)
    57                              <1> ;       eax = Status word (error code in al)
    58                              <1> ;       rbp = Disk DPB pointer
    59                              <1> ; [Int24hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    60                              <1> ;Output: al = Int 24h response (0-3)
    61                              <1> ; All other registers preserved
    62 00006957 B308                <1>     mov bl, dataBuffer  ;Set dflt flags for invoke
    63 00006959 4885FF              <1>     test rdi, rdi       ;Is this a share invokation?
    64 0000695C 7403                <1>     je .skipbufferread  ;Jump if so, since share lock issues occur on data io
    65 0000695E 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Else get the buffer data type
    66                              <1> .skipbufferread:
    67 00006961 57                  <1>     push rdi        ;Save the disk buffer pointer
    68 00006962 0FB6F8              <1>     movzx edi, al   ;Store status code in dil, zero extend
    69 00006965 81FF00000000        <1>     cmp edi, drvWPErr
    70 0000696B 7509                <1>     jne .notReset
    71                              <1>     ;Reset the error drive to report dpb drive if a write protect error!
    72 0000696D 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    73 00006970 8805(09040000)      <1>     mov byte [errorDrv], al ;Store this value
    74                              <1> .notReset:
    75 00006976 8A25(68040000)      <1>     mov ah, byte [Int24bitfld]  ;Get the permissions in var
    76 0000697C 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set the always bits
    77                              <1>     ;Test for correct buffer data type
    78 0000697F F6C301              <1>     test bl, dosBuffer
    79 00006982 7505                <1>     jnz .df0
    80 00006984 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    81 00006987 EB1E                <1>     jmp short .df3
    82                              <1> .df0:
    83 00006989 F6C302              <1>     test bl, fatBuffer
    84 0000698C 750C                <1>     jnz .df1
    85 0000698E 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    86 00006991 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Invalidate the count!
    87 00006998 EB0D                <1>     jmp short .df3
    88                              <1> .df1:
    89 0000699A F6C304              <1>     test bl, dirBuffer
    90 0000699D 7505                <1>     jnz .df2
    91 0000699F 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    92 000069A2 EB03                <1>     jmp short .df3
    93                              <1> .df2:
    94 000069A4 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    95                              <1> .df3:
    96 000069A7 8025(00070000)01    <1>     and byte [rwFlag], 1    ;Save only the bottom bit
    97 000069AE 0A25(00070000)      <1>     or ah, byte [rwFlag]    ;And set the low bit here
    98 000069B4 0A25(68040000)      <1>     or ah, byte [Int24bitfld]
    99                              <1>     ;Continue down with failing disk buffer pointer on stack
   100 000069BA E802000000          <1>     call diskDevErrBitfield
   101 000069BF 5F                  <1>     pop rdi ;Pop back the disk buffer pointer
   102                              <1>     return   
    13                              <2> %%_ret:
    14 000069C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> diskDevErrBitfield:
   104                              <1> ;Called with Int24Bitfield constructed and in ah and error code in dil
   105                              <1> ;This is to avoid rebuilding the bitfield.
   106 000069C1 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get the drive number
   107 000069C4 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save the DPB 
   108 000069CB 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;And get the driver ptr in rsi
   109 000069CF 31ED                <1>     xor ebp, ebp    ;Finally, set ebp to 0 to simulate the segment
   110                              <1> hardErrorCommon:
   111                              <1> ;The common fields, with the vars set up. 
   112                              <1> ;Ensure we dont have a crazy error code.
   113                              <1> ;Entered with: ah = bitfield, al = Fail drive (0 based) if not char
   114                              <1> ; dil = Driver error code, rsi -> Driver header
   115                              <1> ;tmpDBPPtr = Fail DPB if not char, rwFlag set/clear
   116 000069D1 E839FFFFFF          <1>     call xlatHardError
   117 000069D6 50                  <1>     push rax
   118 000069D7 B80C000000          <1>     mov eax, errGF - drvErrShft
   119 000069DC 39C7                <1>     cmp edi, eax    ; If the returned error code is above largest driver code
   120 000069DE 0F47F8              <1>     cmova edi, eax  ; return the driver largest code
   121 000069E1 58                  <1>     pop rax
   122                              <1> criticalDOSError:   ;Int 2Fh, AX=1206h, Invoke Critical Error Function 
   123                              <1> ;Will swap stacks and enter int 24h safely and handle passing the right data 
   124                              <1> ; to the critical error handler.
   125                              <1> ; Called with rsi set as required by Int 24h (caller decides), ax, di
   126                              <1> ; and with Int24Bitfield set
   127                              <1> ;               AH = Critical Error Bitfield
   128                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   129                              <1> ;               Bit 6 - Reserved
   130                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   131                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   132                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   133                              <1> ;               Bits [2-1] = Affected Disk Error
   134                              <1> ;                     0 0   DOS area
   135                              <1> ;                     0 1   FAT area
   136                              <1> ;                     1 0   Directory area
   137                              <1> ;                     1 1   Data area
   138                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   139                              <1> ;               AL  = Failing drive number if AH[7] = 0
   140                              <1> ;               DIL = Error code for errorMsg
   141                              <1> ;               RSI = EA of Device Header for which device the error occured
   142                              <1> ;Return:
   143                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   144                              <1> ;                  = 1 - Retry the Operation    (Retry)
   145                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   146                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   147                              <1> ; Return response from int 24h in al
   148                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   149                              <1> ; This function will terminate the program if an abort was requested!
   150                              <1> ; This function also destroys RBP
   151 000069E2 F605(07040000)FF    <1>     test byte [critErrFlag], -1   ;If not zero, already in error. Auto FAIL
   152 000069E9 756C                <1>     jnz .setFail
   153 000069EB 488925(60040000)    <1>     mov qword [xInt24hRSP], rsp ;Save our critical error stack pointer
   154 000069F2 66813D(3A070000)FF- <1>     cmp word  [currentNdx], -1  ;If this is -1, we are not opening a file
   154 000069FA FF                  <1>
   155 000069FB 740C                <1>     je .notOpeningFile
   156 000069FD 57                  <1>     push rdi
   157 000069FE 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]  ;Get the pointer to the current handle entry
   158 00006A05 C607FF              <1>     mov byte [rdi], -1          ;Free this handle
   159 00006A08 5F                  <1>     pop rdi
   160                              <1> .notOpeningFile:
   161 00006A09 E8DA000000          <1>     call checkDoInt24OnHandle   ;IF returns ZF=NZ, we just fail!
   162 00006A0E 7547                <1>     jnz .setFail
   163 00006A10 FA                  <1>     cli                         
   164 00006A11 FE05(07040000)      <1>     inc byte [critErrFlag]      ;Set flag for critical error
   165 00006A17 FE0D(08040000)      <1>     dec byte [inDOS]            ;Exiting DOS
   166 00006A1D 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]     ;Get the stack ptr after regs were pushed
   167 00006A24 31ED                <1>     xor ebp, ebp                ;Always zeroed for DOS portability!
   168 00006A26 CD24                <1>     int 24h                     ;Call crit. err. hdlr. Ints reset on
   169 00006A28 488925(7B040000)    <1>     mov qword [oldRSP], rsp     ;Allows user to change reg vals on fail!
   170 00006A2F 488B25(60040000)    <1>     mov rsp, qword [xInt24hRSP] ;Ret to DOS stack for failing device
   171 00006A36 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   172 00006A3D FE05(08040000)      <1>     inc byte [inDOS]            ;Reenter DOS
   173 00006A43 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]
   174 00006A4A FB                  <1>     sti                         
   175                              <1>     ;Now we check that the response given was allowed, and translate if needed
   176 00006A4B 3C00                <1>     cmp al, critIgnore
   177 00006A4D 7446                <1>     je .checkIgnore
   178 00006A4F 3C01                <1>     cmp al, critRetry
   179 00006A51 744D                <1>     je .checkRetry
   180 00006A53 3C03                <1>     cmp al, critFail
   181 00006A55 7554                <1>     jne .abort   ;Must be abort
   182                              <1> .setFail:   ;Here is for fail
   183 00006A57 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int24 responded Fail)
   184 00006A59 E88A000000          <1>     call checkDoInt24OnHandle   ;If we fail because of handle, skip fail counter!
   185 00006A5E 7506                <1>     jnz .skipFailInc
   186 00006A60 FE05(6A040000)      <1>     inc byte [Int24Fail]        ;Inc the fail counter!
   187                              <1> .skipFailInc:
   188 00006A66 F605(68040000)08    <1>     test byte [Int24bitfld], critFailOK
   189 00006A6D 743C                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   190                              <1> .exit:
   191 00006A6F C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   192 00006A76 803D(3A070000)FF    <1>     cmp byte [currentNdx], -1   ;Is there a file that needs handling?
   193                              <1>     rete    ;Only if this is not equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006A7D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006A7F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   194                              <1>     ;In that case, we set the jft entry to its initial value, whatever it was
   195 00006A80 50                  <1>     push rax
   196 00006A81 57                  <1>     push rdi
   197 00006A82 0FB705(3A070000)    <1>     movzx eax, word [currentNdx]
   198 00006A89 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]
   199 00006A90 8807                <1>     mov byte [rdi], al
   200 00006A92 5F                  <1>     pop rdi
   201 00006A93 58                  <1>     pop rax
   202                              <1>     return
    13                              <2> %%_ret:
    14 00006A94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   203                              <1> .checkIgnore:
   204 00006A95 F605(68040000)20    <1>     test byte [Int24bitfld], critIgnorOK
   205 00006A9C 75D1                <1>     jnz .exit
   206 00006A9E EBB7                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   207                              <1> .checkRetry:
   208 00006AA0 F605(68040000)10    <1>     test byte [Int24bitfld], critRetryOK
   209 00006AA7 75C6                <1>     jnz .exit   
   210 00006AA9 EBAC                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   211                              <1> .abort:
   212                              <1> ;Prepare to abort. We abort from within!
   213 00006AAB E8E5C0FFFF          <1>     call vConRetDriver  ;Always reset the driver flag on abort
   214                              <1> ;If a network request requests abort, translate to fail
   215 00006AB0 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1
   216 00006AB7 74B6                <1>     je .exit
   217                              <1> ;If already terminating, dont start terminating again!
   218 00006AB9 F605(96040000)FF    <1>     test byte [procExiting], -1
   219 00006AC0 75AD                <1>     jnz .exit
   220 00006AC2 31C0                <1>     xor eax, eax    ;Default return code to 0. Abort flag will be set later
   221 00006AC4 C605(06070000)02    <1>     mov byte [exitType], 2      ;We are returning from Abort, ret type 2!
   222 00006ACB 8805(5F040000)      <1>     mov byte [volIdFlag], al     ;Clear special vol search byte if set
   223                              <1>     ;Before returning, we need to set the aborting psp.rspPtr back to 
   224                              <1>     ; the oldRSP as a syscall during Int 24h would change this value.
   225                              <1>     ;This only affects programs which are their own parents as when aborting
   226                              <1>     ; we swap to the parentPSP. This prevents a bug from arising as the 
   227                              <1>     ; stack ptr in psp.rspPtr may have changed since initially entering DOS
   228                              <1>     ; as the Int 24h handler may have made an Int 21h call, meaning if 
   229                              <1>     ; the Int 24h handler plays with the stack too much, the value in 
   230                              <1>     ; psp.rspPtr is no longer pointing at a "valid" stack frame (i.e. 
   231                              <1>     ; with valid SS:RSP). The only sane thing to do is to reset this 
   232                              <1>     ; pointer to the value it had on entry to the initial DOS call which
   233                              <1>     ; triggered the Int 24h (or the equivalent stack frame that was 
   234                              <1>     ; replaced by the Int 24h handler). If the task being aborted is not 
   235                              <1>     ; its own parent the following is a NOP. If it is its own parent, we
   236                              <1>     ; the following prevents a GP. Fault.
   237 00006AD1 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   238 00006AD8 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   239 00006ADF 48895F46            <1>     mov qword [rdi + psp.rspPtr], rbx
   240 00006AE3 E9F2F2FFFF          <1>     jmp terminateClean.altEP
   241                              <1> 
   242                              <1> checkDoInt24OnHandle:
   243                              <1> ;Checks if currentSFT is a null pointer. Return ZF=ZE if so.
   244                              <1> ;Else, take the SFT pointer and check its open mode. 
   245                              <1> ;   If openFailOnI24 set, return ZF=NZ
   246                              <1> ;   Else, return ZF=ZE.
   247 00006AE8 57                  <1>     push rdi
   248 00006AE9 E887E5FFFF          <1>     call getCurrentSFT
   249 00006AEE 4885FF              <1>     test rdi, rdi   ;If this is a null pointer, no
   250 00006AF1 7406                <1>     jz .exit
   251 00006AF3 66F747020020        <1>     test word [rdi + sft.wOpenMode], openFailOnI24
   252                              <1> .exit:
   253 00006AF9 5F                  <1>     pop rdi
   254                              <1>     return
    13                              <2> %%_ret:
    14 00006AFA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    49                                  %include "./src/Kernel/Error/ctrlc.asm"
     1                              <1> ctrlBreakHdlr:
     2 00006AFB B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
     3 00006AFD E8C2BFFFFF          <1>     call printCaretASCII
     4 00006B02 E8EDBFFFFF          <1>     call printCRLF
     5                              <1>     ;Reset the console back to 0
     6 00006B07 E889C0FFFF          <1>     call vConRetDriver
     7                              <1> ;Handles a control break, juggles stacks and enters int 21h 
     8                              <1> .exceptEP:
     9                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
    10                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
    11                              <1> ;   interrupted DOS call is restarted
    12 00006B0C FA                  <1> 	cli
    13 00006B0D 488B25(7B040000)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
    14 00006B14 E8680D0000          <1> 	call dosPopRegs ;Get user state back
    15 00006B19 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
    16 00006B20 C605(07040000)00    <1>     mov byte [critErrFlag], 0
    17 00006B27 488925(27040000)    <1>     mov qword [xInt23hRSP], rsp  ;Save user rsp. This is the og psp rsp.
    18 00006B2E F8                  <1>     clc
    19 00006B2F CD23                <1>     int 23h ;Call critical error handler
    20 00006B31 FA                  <1>     cli ;Clear interrupts again
    21 00006B32 488905(33040000)    <1>     mov qword [oldRAX], rax     ;Save eax (has DOS fn to do if not terminate)
    22 00006B39 9C                  <1>     pushfq                      ;Get returned flags in rax
    23 00006B3A 58                  <1>     pop rax 
    24 00006B3B 483B25(27040000)    <1>     cmp rsp, qword [xInt23hRSP] ;Did the user return with ret/ret 8?
    25 00006B42 750C                <1>     jne .checkCF                ;If yes, check the returned CF flag.
    26                              <1> .returnToDOS:                   ;Else, execute the DOS function in eax.
    27 00006B44 488B05(33040000)    <1>     mov rax, qword [oldRAX]     ;Get the function number to execute
    28 00006B4B E9CB0B0000          <1>     jmp functionDispatch        ;Goto int 21h
    29                              <1> .checkCF:
    30 00006B50 488B25(27040000)    <1>     mov rsp, qword [xInt23hRSP]  ;Reset the stack pointer to pre int 23h
    31 00006B57 A801                <1>     test al, 1      ;Was CF=CY returned?
    32 00006B59 74E9                <1>     jz .returnToDOS ;If CF=NC, DOS function in eax
    33 00006B5B B8004C0000          <1>     mov eax, 4c00h  ;Else, exit with default error code (00h)
    34 00006B60 C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1  ;Signal CTRL+BREAK termination
    35 00006B67 E9AF0B0000          <1>     jmp functionDispatch ;When jumping now, rsp will go back into psp.rsp!
    50                                  %include "./src/Kernel/Error/execpt.asm"
     1                              <1> ;CPU Exception handlers
     2                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
     3                              <1> ; CTRL+C exit.
     4                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
     5                              <1> ; system.
     6                              <1> ; Also halt if the application is it's own parent.
     7                              <1> ;An application should hook these interupts if they wish to not 
     8                              <1> ; CTRL+C exit, and instead return to DOS.
     9                              <1> i0:
    10 00006B6C 31C0                <1>     xor eax, eax
    11 00006B6E E9AB000000          <1>     jmp cpu_2args
    12                              <1> i1:
    13 00006B73 B801000000          <1>     mov eax, 1
    14 00006B78 E9A1000000          <1>     jmp cpu_2args
    15                              <1> i2:
    16 00006B7D B802000000          <1>     mov eax, 2
    17 00006B82 E997000000          <1>     jmp cpu_2args
    18                              <1> i3:
    19 00006B87 B803000000          <1>     mov eax, 3
    20 00006B8C E98D000000          <1>     jmp cpu_2args
    21                              <1> i4:
    22 00006B91 B804000000          <1>     mov eax, 4
    23 00006B96 E983000000          <1>     jmp cpu_2args
    24                              <1> i5:
    25 00006B9B B805000000          <1>     mov eax, 5
    26 00006BA0 EB7C                <1>     jmp short cpu_2args
    27                              <1> i6:
    28 00006BA2 B806000000          <1>     mov eax, 6
    29 00006BA7 EB75                <1>     jmp short cpu_2args
    30                              <1> i7:
    31 00006BA9 B807000000          <1>     mov eax, 7
    32 00006BAE EB6E                <1>     jmp short cpu_2args
    33                              <1> i8:
    34 00006BB0 B808000000          <1>     mov eax, 8
    35 00006BB5 EB60                <1>     jmp short cpu_3args
    36                              <1> i9:
    37 00006BB7 B809000000          <1>     mov eax, 9
    38 00006BBC EB60                <1>     jmp short cpu_2args
    39                              <1> i10:
    40 00006BBE B80A000000          <1>     mov eax, 0Ah
    41 00006BC3 EB52                <1>     jmp short cpu_3args
    42                              <1> i11:
    43 00006BC5 B80B000000          <1>     mov eax, 0Bh
    44 00006BCA EB4B                <1>     jmp short cpu_3args
    45                              <1> i12:
    46 00006BCC B80C000000          <1>     mov eax, 0Ch
    47 00006BD1 EB44                <1>     jmp short cpu_3args
    48                              <1> i13:
    49 00006BD3 B80D000000          <1>     mov eax, 0Dh
    50 00006BD8 EB3D                <1>     jmp short cpu_3args
    51                              <1> i14:
    52 00006BDA B80E000000          <1>     mov eax, 0Eh
    53 00006BDF EB2F                <1>     jmp short cpu_4args
    54                              <1> i15:
    55 00006BE1 B80F000000          <1>     mov eax, 0Fh
    56 00006BE6 EB36                <1>     jmp short cpu_2args
    57                              <1> i16:
    58 00006BE8 B810000000          <1>     mov eax, 10h
    59 00006BED EB2F                <1>     jmp short cpu_2args
    60                              <1> i17:
    61 00006BEF B811000000          <1>     mov eax, 11h
    62 00006BF4 EB21                <1>     jmp short cpu_3args
    63                              <1> i18:
    64 00006BF6 B812000000          <1>     mov eax, 12h
    65 00006BFB EB21                <1>     jmp short cpu_2args
    66                              <1> i19:
    67 00006BFD B813000000          <1>     mov eax, 13h
    68 00006C02 EB1A                <1>     jmp short cpu_2args
    69                              <1> i20:
    70 00006C04 B814000000          <1>     mov eax, 14h
    71 00006C09 EB13                <1>     jmp short cpu_2args
    72                              <1> i21:
    73 00006C0B B815000000          <1>     mov eax, 15h
    74                              <1> cpu_4args:
    75 00006C10 B903000000          <1>     mov ecx, 3
    76 00006C15 EB0C                <1>     jmp short cpu_exception
    77                              <1> cpu_3args:
    78 00006C17 B902000000          <1>     mov ecx, 2
    79 00006C1C EB05                <1>     jmp short cpu_exception
    80                              <1> cpu_2args:
    81 00006C1E B901000000          <1>     mov ecx, 1
    82                              <1> cpu_exception:
    83                              <1> ;Enter with:
    84                              <1> ; eax = Exception number in binary
    85                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
    86 00006C23 488D3537020000      <1>     lea rsi, .fatalt0   ;Get the ptr
    87 00006C2A BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
    88 00006C2F E8E5010000          <1>     call .writeExceptionMessage
    89                              <1> 
    90 00006C34 C605(91070000)00    <1>     mov byte [haltDOS], 0   ;Clear first as we are recycling this byte in SDA
    91 00006C3B 803D(08040000)01    <1>     cmp byte [inDOS], 1     ;Are we in DOS? 
    92 00006C42 7327                <1>     jae .introStop          ;Crap out, cant guarantee DOS is stable anymore
    93 00006C44 3D02000000          <1>     cmp eax, 2              ;NMI?
    94 00006C49 7420                <1>     je .introStop           ;Freeze the PC to stop it from hurting itself...
    95                              <1> 
    96 00006C4B 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;If self-parent craps out... 
    97 00006C52 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr] ;Who do we call? COMSPEC?
    98 00006C56 7413                <1>     je .introStop   ;Nah, for now, just hard stop like if DOS is bad.
    99                              <1> 
   100 00006C58 488D352B020000      <1>     lea rsi, .fatal1
   101 00006C5F BBC1000000          <1>     mov ebx, fatal1L
   102 00006C64 E8B0010000          <1>     call .writeExceptionMessage
   103 00006C69 EB18                <1>     jmp short .introEnd
   104                              <1> .introStop:
   105 00006C6B C605(91070000)FF    <1>     mov byte [haltDOS], -1  ;Set crap out byte...
   106 00006C72 488D35D5020000      <1>     lea rsi, .fatalHalt     ;Get the ptr
   107 00006C79 BB19000000          <1>     mov ebx, fatalHaltL     ;Get the length
   108 00006C7E E896010000          <1>     call .writeExceptionMessage
   109                              <1> .introEnd:
   110 00006C83 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   111 00006C8A E858010000          <1>     call .printbyte ;Store the error code in the byte buffer
   112 00006C8F 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   113 00006C96 BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   114 00006C9B E879010000          <1>     call .writeExceptionMessage
   115                              <1> 
   116 00006CA0 488D35A4020000      <1>     lea rsi, .fatal2
   117 00006CA7 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   118 00006CAC E868010000          <1>     call .writeExceptionMessage
   119                              <1> 
   120 00006CB1 80F901              <1>     cmp cl, 1
   121 00006CB4 0F8793000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   122                              <1> .cpurollprint:
   123 00006CBA 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   124 00006CC1 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   125                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   126 00006CC5 B108                <1>     mov cl, 8    ;8 bytes
   127                              <1> .cpurollprint1:
   128 00006CC7 48C1C208            <1>     rol rdx, 8
   129 00006CCB 88D0                <1>     mov al, dl
   130 00006CCD 52                  <1>     push rdx
   131 00006CCE E814010000          <1>     call .printbyte
   132 00006CD3 5A                  <1>     pop rdx
   133 00006CD4 FEC9                <1>     dec cl
   134 00006CD6 75EF                <1>     jnz .cpurollprint1
   135                              <1> 
   136 00006CD8 BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   137 00006CDD 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   138 00006CE4 E830010000          <1>     call .writeExceptionMessage
   139                              <1> 
   140 00006CE9 BB03000000          <1>     mov ebx, crlfL
   141 00006CEE 488D3572020000      <1>     lea rsi, .crlf
   142 00006CF5 E81F010000          <1>     call .writeExceptionMessage    
   143                              <1> 
   144 00006CFA F605(91070000)FF    <1>     test byte [haltDOS], -1
   145 00006D01 7534                <1>     jnz .fatalStop
   146 00006D03 E8FC000000          <1>     call .readInputChar
   147                              <1>     ;Set error code to General Failure
   148 00006D08 66C705(0B040000)1F- <1>     mov word [errorExCde], errGF
   148 00006D10 00                  <1>
   149 00006D11 C605(0D040000)04    <1>     mov byte [errorAction], eActAbt
   150 00006D18 C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   151 00006D1F C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   152 00006D26 B8FF4C0000          <1>     mov eax, 4cFFh
   153 00006D2B C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1
   154                              <1>     ;If a errGF error code and ctrlC exit and the extended error
   155                              <1>     ; setup as above, chances are it was a CPU error
   156 00006D32 E9E4090000          <1>     jmp functionDispatch    ;Call Int 21h politely, clean up resources
   157                              <1> .fatalStop:
   158                              <1> ;This is called if inDOS > 1 or NMI occured
   159                              <1> ;Freezes the machine
   160 00006D37 B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   161 00006D3C CD2A                <1>     int 2Ah
   162 00006D3E E86C0B0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   163 00006D43 E87B0B0000          <1>     call dosCrit2Enter  ;Get the lock to drivers
   164 00006D48 FA                  <1>     cli                 ;Halt all interrupts
   165                              <1> .fatalLp:
   166 00006D49 F390                <1>     pause
   167 00006D4B EBFC                <1>     jmp short .fatalLp  ;Stay here forever, we cant guarantee anything anymore!
   168                              <1> .cpuextendederror:
   169 00006D4D 5A                  <1>     pop rdx
   170 00006D4E 48FFC9              <1>     dec rcx
   171 00006D51 51                  <1>     push rcx
   172 00006D52 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   173 00006D59 B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   174 00006D5B 86D6                <1>     xchg dl, dh   
   175                              <1> .pr1:
   176 00006D5D 88D0                <1>     mov al, dl
   177 00006D5F 52                  <1>     push rdx
   178 00006D60 E882000000          <1>     call .printbyte
   179 00006D65 5A                  <1>     pop rdx
   180 00006D66 C1CA08              <1>     ror edx, 8    ;Print just dx for now
   181 00006D69 FEC9                <1>     dec cl
   182 00006D6B 75F0                <1>     jnz .pr1
   183                              <1> 
   184 00006D6D 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   185 00006D74 BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   186 00006D79 E89B000000          <1>     call .writeExceptionMessage
   187                              <1> 
   188 00006D7E 488D35C6010000      <1>     lea rsi, .fatal2
   189 00006D85 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   190 00006D8A E88A000000          <1>     call .writeExceptionMessage
   191                              <1> 
   192 00006D8F 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   193 00006D90 48FFC9              <1>     dec rcx
   194 00006D93 0F8421FFFFFF        <1>     jz .cpurollprint
   195                              <1> 
   196 00006D99 B108                <1>     mov cl, 8   ;16 nybbles
   197 00006D9B 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   198 00006D9E 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   199                              <1> .pr2:
   200 00006DA5 48C1C208            <1>     rol rdx, 8    ;Print rdx
   201 00006DA9 88D0                <1>     mov al, dl
   202 00006DAB 52                  <1>     push rdx
   203 00006DAC E836000000          <1>     call .printbyte
   204 00006DB1 5A                  <1>     pop rdx
   205 00006DB2 FEC9                <1>     dec cl
   206 00006DB4 75EF                <1>     jnz .pr2
   207                              <1> 
   208 00006DB6 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   209 00006DBD BB10000000          <1>     mov ebx, 16
   210 00006DC2 E852000000          <1>     call .writeExceptionMessage
   211                              <1> 
   212 00006DC7 488D357D010000      <1>     lea rsi, .fatal2
   213 00006DCE BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   214 00006DD3 E841000000          <1>     call .writeExceptionMessage
   215                              <1> 
   216 00006DD8 E9DDFEFFFF          <1>     jmp .cpurollprint
   217                              <1> 
   218                              <1> 
   219                              <1> .char:    ;Print a single character
   220 00006DDD 488D1D6D000000      <1>     lea rbx, .ascii
   221 00006DE4 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   222 00006DE5 AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   223 00006DE6 C3                  <1>     ret
   224                              <1> .printbyte:
   225 00006DE7 88C2                <1>     mov dl, al            ;save byte in dl
   226 00006DE9 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   227 00006DED 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   228 00006DF2 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   229 00006DF6 E8E2FFFFFF          <1>     call .char
   230 00006DFB 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   231 00006DFE E8DAFFFFFF          <1>     call .char
   232 00006E03 C3                  <1>     ret        
   233                              <1> 
   234                              <1> 
   235                              <1> .readInputChar:
   236 00006E04 C605(ED040000)04    <1>     mov byte [critReqPkt + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   237 00006E0B 488D35(1C050000)    <1>     lea rsi, singleIObyt
   238 00006E12 BB01000000          <1>     mov ebx, 1  ;Read one char
   239 00006E17 EB07                <1>     jmp short .ioException
   240                              <1> .writeExceptionMessage:
   241                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   242 00006E19 C605(ED040000)08    <1>     mov byte [critReqPkt + ioReqPkt.cmdcde], drvWRITE
   243                              <1> .ioException:
   244 00006E20 C605(EB040000)2A    <1>     mov byte [critReqPkt + ioReqPkt.hdrlen], ioReqPkt_size
   245 00006E27 66C705(EE040000)00- <1>     mov word [critReqPkt + ioReqPkt.status], 0
   245 00006E2F 00                  <1>
   246 00006E30 891D(01050000)      <1>     mov dword [critReqPkt + ioReqPkt.tfrlen], ebx
   247 00006E36 488D1D(EB040000)    <1>     lea rbx, critReqPkt
   248 00006E3D 488935(F9040000)    <1>     mov qword [critReqPkt + ioReqPkt.bufptr], rsi
   249 00006E44 488B35(53000000)    <1>     mov rsi, qword [vConPtr]
   250 00006E4B E822010000          <1>     call goDriver
   251                              <1>     return
    13                              <2> %%_ret:
    14 00006E50 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   252                              <1> 
   253                              <1> 
   254                              <1> ;Error messages
   255 00006E51 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   255 00006E5A 39414243444546      <1>
   256 00006E61 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   256 00006E6A 20205343502F444F53- <1>
   256 00006E73 20455843455054494F- <1>
   256 00006E7C 4E2044455445435445- <1>
   256 00006E85 44210D0A0A          <1>
   257                              <1> fatalt0L   equ $ - .fatalt0
   258                              <1> 
   259                              <1> .fatal1:   
   260 00006E8A 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   260 00006E93 656E7469616C6C7920- <1>
   260 00006E9C 666174616C20657272- <1>
   260 00006EA5 6F7220686173206265- <1>
   260 00006EAE 656E20646574656374- <1>
   260 00006EB7 65640D0A            <1>
   261 00006EBB 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   261 00006EC4 68652063757272656E- <1>
   261 00006ECD 74206170706C696361- <1>
   261 00006ED6 74696F6E206D757374- <1>
   261 00006EDF 206265207465726D69- <1>
   261 00006EE8 6E617465642E0D0A0A  <1>
   262 00006EF1 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   262 00006EFA 20616E79206B657920- <1>
   262 00006F03 746F20636F6E74696E- <1>
   262 00006F0C 7565206F7220435452- <1>
   262 00006F15 4C2B414C542B44454C- <1>
   262 00006F1E 20746F207265737461- <1>
   262 00006F27 727420746865206D61- <1>
   262 00006F30 6368696E652E        <1>
   263 00006F36 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   263 00006F3F 5354454D204552524F- <1>
   263 00006F48 523A20              <1>
   264                              <1> fatal1L equ $ - .fatal1
   265                              <1> 
   266 00006F4B 203A20              <1> .fatal2:   db " : "
   267                              <1> fatal2L    equ $ - .fatal2
   268                              <1> 
   269                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   270 00006F4E 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   270 00006F57 4F532053595354454D- <1>
   270 00006F60 2053544F503A20      <1>
   271                              <1> fatalHaltL equ $ - .fatalHalt
   272 00006F67 0D0A0A              <1> .crlf:  db CR,LF,LF
   273                              <1> crlfL  equ $ - .crlf
    51                                  %include "./src/Kernel/Core/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 25h Int 26h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 00006F6A B003                <1>     mov al, critFail
     7 00006F6C 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 00006F6E 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 00006F72 E84C090000          <1>     call dosCrit2Enter
    16 00006F77 FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 00006F7A FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 00006F7D E84B090000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 00006F82 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> ;The NUL driver lives here as it is implemented by the Kernel by default!
    22                              <1> nulStrat:
    23 00006F83 66C743030001        <1>     mov word [rbx + drvReqPkt.status], drvDonStatus    ;Set done bit directly
    24                              <1> nulIntr:
    25                              <1>     return
    13                              <2> %%_ret:
    14 00006F89 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> setupPhysicalDiskRequest:
    28                              <1> ;Ensure that al has valid disk number
    29                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    30                              <1> ;If CF=NC, rbp = DPB ptr.
    31                              <1> ;If CF=CY, exit error
    32 00006F8A 84C0                <1>     test al, al
    33 00006F8C 723F                <1>     jc .diskError
    34 00006F8E 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
    35 00006F94 7337                <1>     jae .diskError
    36 00006F96 50                  <1>     push rax
    37 00006F97 FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    38 00006F99 E813050000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    39 00006F9E 58                  <1>     pop rax
    40 00006F9F 7235                <1>     jc .error
    41 00006FA1 8805(09070000)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    42 00006FA7 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    43 00006FAE 48F7454300800000    <1>     test qword [rbp + cds.wFlags], cdsRedirDrive   ;On a network?
    44 00006FB6 750A                <1>     jnz .netError
    45 00006FB8 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    46 00006FBC E8C0030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    47                              <1>     return
    13                              <2> %%_ret:
    14 00006FC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> .netError:
    49 00006FC2 66C705(0B040000)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    49 00006FCA 00                  <1>
    50 00006FCB EB09                <1>     jmp short .error
    51                              <1> .diskError:
    52 00006FCD 66C705(0B040000)0F- <1>     mov word [errorExCde], errBadDrv
    52 00006FD5 00                  <1>
    53                              <1> .error: ;This error setting needs to remain as is to allow for Int 25/46
    54 00006FD6 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    55 00006FDD C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
    56 00006FE4 C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
    57 00006FEB F9                  <1>     stc
    58                              <1>     return
    13                              <2> %%_ret:
    14 00006FEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    59                              <1> 
    60                              <1> setupAbsDiskEntry:
    61                              <1> ;Prepares to sets up the CDS and DPB for the request
    62 00006FED FE05(08040000)      <1>     inc byte [inDOS]
    63 00006FF3 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    64 00006FF4 FC                  <1>     cld ;Set string ops in the right direction
    65 00006FF5 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    66                              <1>     retc    ;Error exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006FFA 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006FFC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    67 00006FFD C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;We prob. will invalidate
    68 00007004 56                  <1>     push rsi
    69 00007005 50                  <1>     push rax
    70 00007006 488D35(1E050000)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    71 0000700D 8806                <1>     mov byte [rsi], al  ;Construct a path
    72 0000700F 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    73 00007012 66C746013A00        <1>     mov word [rsi + 1], ":" ;Path Colon and terminating zero
    74 00007018 F8                  <1>     clc
    75                              <1> ;++++++++++++++++++++++++++++
    76                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    77                              <1> ;Entered with path in rsi (ah=03h)
    78 00007019 B800030000          <1>     mov eax, 0300h  
    79 0000701E CD2A                <1>     int 2Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    80                              <1> ;++++++++++++++++++++++++++++
    81 00007020 58                  <1>     pop rax
    82 00007021 5E                  <1>     pop rsi
    83                              <1> .exit:
    84 00007022 729E                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    85                              <1>     return
    13                              <2> %%_ret:
    14 00007024 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> absDiskWrite:       ;Int 26h
    88                              <1> ;al = Drive number
    89                              <1> ;rbx = Memory Buffer address to read from
    90                              <1> ;ecx = Number of sectors to write
    91                              <1> ;rdx = Start LBA to write to
    92 00007025 FA                  <1>     cli
    93 00007026 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    94 0000702D 488D25(D8190000)    <1>     lea rsp, DiskStakTop
    95 00007034 55                  <1>     push rbp
    96 00007035 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    97 00007036 E8B2FFFFFF          <1>     call setupAbsDiskEntry
    98 0000703B 7252                <1>     jc absDiskExit
    99 0000703D E86D020000          <1>     call primReqWriteSetup
   100 00007042 EB1D                <1>     jmp short absDiskReadWriteCommon
   101                              <1> absDiskRead:        ;Int 25h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to write to
   104                              <1> ;ecx = Number of sectors to read
   105                              <1> ;rdx = Start LBA to read from
   106 00007044 FA                  <1>     cli 
   107 00007045 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 0000704C 488D25(D8190000)    <1>     lea rsp, DiskStakTop
   109 00007053 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   110 00007054 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   111 00007055 E893FFFFFF          <1>     call setupAbsDiskEntry
   112 0000705A 7233                <1>     jc absDiskExit
   113 0000705C E859020000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   114                              <1> absDiskReadWriteCommon:
   115                              <1> ;Entered with the appropriate function number in ah
   116                              <1> ; and primary request header in rbx
   117 00007061 E859000000          <1>     call absDiskDriverCall
   118 00007066 7427                <1>     jz absDiskExit  ;Skip error code checking
   119 00007068 8A05(C4040000)      <1>     mov al, byte [primReqPkt + ioReqPkt.status] ;Get low byte into al
   120                              <1>     ;DOS uses the following pairs in a table
   121                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   122 0000706E B480                <1>     mov ah, 80h ;Attachment failure
   123 00007070 3C0C                <1>     cmp al, 0Ch ;Gen error
   124 00007072 741A                <1>     je .absExit
   125 00007074 B440                <1>     mov ah, 40h ;Seek error
   126 00007076 3C06                <1>     cmp al, 06h
   127 00007078 7414                <1>     je .absExit
   128 0000707A B408                <1>     mov ah, 08h ;Bad CRC
   129 0000707C 3C04                <1>     cmp al, 04h
   130 0000707E 740E                <1>     je .absExit
   131 00007080 B404                <1>     mov ah, 04h ;Sector not found
   132 00007082 3C08                <1>     cmp al, 08h
   133 00007084 7408                <1>     je .absExit
   134 00007086 30E4                <1>     xor ah, ah  ;Write Protect Violation
   135 00007088 84C0                <1>     test al, al
   136 0000708A 7402                <1>     je .absExit
   137 0000708C B402                <1>     mov ah, 02h ;Other Error
   138                              <1> .absExit:
   139 0000708E F9                  <1>     stc
   140                              <1> absDiskExit:
   141 0000708F 5B                  <1>     pop rbx
   142 00007090 5D                  <1>     pop rbp
   143 00007091 FA                  <1>     cli
   144 00007092 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]
   145 00007099 FB                  <1>     sti ;Reenable interrupts
   146 0000709A 488D0D0D000000      <1>     lea rcx, absStackJuggle
   147 000070A1 9C                  <1>     pushfq
   148 000070A2 5A                  <1>     pop rdx ;Get the current flags
   149 000070A3 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   150 000070A7 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   151 000070AC 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   152                              <1> absStackJuggle:
   153 000070AE FA                  <1>     cli
   154 000070AF 52                  <1>     push rdx    ;Push the flags on the stack
   155 000070B0 51                  <1>     push rcx    ;Push the return address on the stack
   156 000070B1 9C                  <1>     pushfq
   157 000070B2 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   158 000070B4 89CA                <1>     mov edx, ecx
   159 000070B6 FE0D(08040000)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   160 000070BC 9D                  <1>     popfq
   161 000070BD FB                  <1>     sti
   162                              <1>     return
    13                              <2> %%_ret:
    14 000070BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;       rbx = Request header address
   167                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   168                              <1> ;       eax = Status word from request
   169                              <1> ;       ecx = Number of sectors transferred
   170 000070BF 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 000070C0 8B0D(D7040000)      <1>     mov ecx, dword [primReqPkt + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 000070C6 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 000070CA E8A3FEFFFF          <1>     call goDriver   ;Make request
   176 000070CF 5E                  <1>     pop rsi
   177 000070D0 8B05(D7040000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]   ;Get actual num tfrd
   178 000070D6 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   179 000070D8 0FB705(C4040000)    <1>     movzx eax, word [primReqPkt + ioReqPkt.status]
   180 000070DF 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   181                              <1>     return
    13                              <2> %%_ret:
    14 000070E3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> getDiskDPB:
   184                              <1> ;Gets the disk DPB if the Disk is valid
   185                              <1> ;Otherwise will return a pointer to the drive DPB
   186                              <1> ;Called with rdi pointing to the CDS
   187                              <1> ;Output:
   188                              <1> ;   CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   189 000070E4 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   190                              <1> .sftEp:   ;Entry point if updating DPB for an SFT entry!
   191 000070E8 57                  <1>     push rdi    ;Save the CDS/SFT ptr
   192 000070E9 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   193 000070ED 8805(09070000)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   194 000070F3 E889020000          <1>     call setWorkingDPB
   195 000070F8 E848000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   196 000070FD 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;If a driver didn't save rbp, get it back!
   197 00007104 723D                <1>     jc .exit
   198 00007106 753B                <1>     jnz .exit   ;If we jump, CF=NC!
   199                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched.
   200 00007108 51                  <1>     push rcx
   201 00007109 0FB60D(78000000)    <1>     movzx ecx, byte [lastdrvNum]
   202 00007110 488B3D(65000000)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   203                              <1> .checkCDS:
   204                              <1> ;Redir are skipped as they are not associated with a DPB
   205 00007117 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   206 0000711D 7517                <1>     jnz .next
   207 0000711F 48396F45            <1>     cmp qword [rdi + cds.qDPBPtr], rbp  ;If the dpb ptr matches, reset
   208 00007123 7511                <1>     jne .next   ;Else, goto next
   209 00007125 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0     ;Reset start cluster!
   210 0000712C C6470300            <1>     mov byte [rdi + cds.sCurrentPath + 3], 0    ;Reset the path too :)
   211 00007130 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2
   212                              <1> .next:
   213 00007136 4881C75F000000      <1>     add rdi, cds_size
   214 0000713D FFC9                <1>     dec ecx
   215 0000713F 75D6                <1>     jnz .checkCDS
   216 00007141 59                  <1>     pop rcx
   217 00007142 F8                  <1>     clc     ;Clear CF (rare but the cmp + add combo might set CF)
   218                              <1> .exit:
   219 00007143 5F                  <1>     pop rdi     ;Get back the CDS/SFT ptr
   220                              <1>     return
    13                              <2> %%_ret:
    14 00007144 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   221                              <1> 
   222                              <1> ensureDiskValid:
   223                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   224                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   225                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   226                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   227                              <1> ;   rbp preserved!
   228 00007145 E8B9010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   229                              <1> ;Return in rbx the req hdr address
   230 0000714A 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   231 0000714E E81FFEFFFF          <1>     call goDriver   ;Request!
   232 00007153 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   233 00007157 F7C700800000        <1>     test edi, drvErrStatus
   234 0000715D 0F85DB000000        <1>     jnz .diskDrvCritErr
   235 00007163 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]   ;Get the drive number for test
   236 0000716A 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   237 0000716D 3805(E1190000)      <1>     cmp byte [rebuildDrv], al   ;Do we need to rebuild this drive?
   238 00007173 750C                <1>     jne .notForce
   239                              <1> ;Here we are forced to rebuild the DPB. In principle, the medium has
   240                              <1> ; not changed but the volume label must be updated. 
   241                              <1> ;The driver can use this opportunity to synchronise its BPB with the 
   242                              <1> ; new label.
   243                              <1> ;We jump directly to skip buffer checking as the rebuilding of the BPB is not
   244                              <1> ; such that we invalidate the buffers.
   245 00007175 C605(E1190000)FF    <1>     mov byte [rebuildDrv], -1   ;Reset this flag as we are doing our job.
   246 0000717C E959000000          <1>     jmp .resetDPB
   247                              <1> .notForce:
   248                              <1> ;Note dpb access flag is either 1 or 0.
   249                              <1> ;If either the check media byte or the dpb access flag is -1, rebuild bpb.
   250                              <1> ;Else assume here access flag is 0. If medret is neq 0, return. Else, 
   251                              <1> ; check buffers.
   252 00007181 0A630E              <1>     or ah, byte [rbx + mediaCheckReqPkt.medret] ;Carry flag always cleared!
   253 00007184 7823                <1>     js .mediaChanged      ;If either byte is -1, media changed
   254                              <1>     retnz                       ;If not zero, we return. Media not changed!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007186 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007188 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   255                              <1> ;Here we check for any dirty buffers. If dirty buffer found, dont get new BPB.
   256 00007189 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   257                              <1> .findDirtyBuffer:
   258 00007190 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]              ;Is buffer for us?
   259 00007193 7508                <1>     jne .gotoNextBuffer ;If no, goto next buffer
   260 00007195 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is buffer dirty?
   261 00007199 7402                <1>     jz .gotoNextBuffer  ;If no, goto next buffer
   262 0000719B F8                  <1>     clc 
   263                              <1>     return
    13                              <2> %%_ret:
    14 0000719C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   264                              <1> .gotoNextBuffer:
   265 0000719D 488B3F              <1>     mov rdi, qword [rdi]    ;Get buffer link pointer
   266 000071A0 4881FFFFFFFFFF      <1>     cmp rdi, -1
   267 000071A7 75E7                <1>     jne .findDirtyBuffer        ;Now check the next buffer
   268                              <1> ;If we found no dirty buffers for this drive we assume the media has changed.
   269                              <1> ;Don't skip the below as it will put a "clean" buffer at the head
   270                              <1> ; of the chain for us.
   271                              <1> .mediaChanged:
   272                              <1> ;If we have changed media, check for dirty buffers. If we have any
   273                              <1> ; we must throw an error to tell the user to replace the media back.
   274                              <1> ;Now use the reference bit to keep track of which buffers we've gone through.
   275 000071A9 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Reset number of free to unknown
   276 000071B0 E83F95FFFF          <1>     call markBuffersAsUnreferenced  ;We're going to walk through so clear ref bit
   277                              <1> .dirtyLoop:
   278 000071B5 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer    ;Set this buffer as referenced
   279 000071B9 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]          ;Is this buffer for us?
   280 000071BC 7515                <1>     jne .skipDirtyCheck
   281 000071BE F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this dirty?
   282 000071C2 0F85A6000000        <1>     jnz .dirtyBufferError   ;Signal bad disk change if so!
   283                              <1> ;Set reference bit and drive to free
   284 000071C8 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], (refBuffer << 8) | freeBuffer 
   285 000071CE E83B95FFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Move this up, get next buffer
   286                              <1> .skipDirtyCheck:
   287 000071D3 E84495FFFF          <1>     call findUnreferencedBuffer ;Get the next unreferenced buffer
   288 000071D8 75DB                <1>     jnz .dirtyLoop  ;Now repeat for this buffer too
   289                              <1> .resetDPB:
   290                              <1> ;Start by checking if the MSD is ``IBM" style or normal
   291 000071DA 488B7D1B            <1>     mov rdi, qword [rbp + dpb.qDriverHeaderPtr]
   292 000071DE 66F747080020        <1>     test word [rdi + drvHdr.attrib], devDrvNotIBM
   293 000071E4 7512                <1>     jnz .dpbNotIbm
   294                              <1> ;Read the FAT into buffer
   295 000071E6 B801000000          <1>     mov eax, 1              ;Read sector 1 into a buffer
   296 000071EB E81798FFFF          <1>     call getBufForFat       ;Point rbx to the buffer
   297                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000071F0 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000071F2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   298 000071F3 4889DF              <1>     mov rdi, rbx
   299 000071F6 EB0F                <1>     jmp short .buildGetBPB              
   300                              <1> .dpbNotIbm:
   301                              <1> ;Get a buffer for the driver to use as scratch space
   302 000071F8 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   303 000071FF E8B695FFFF          <1>     call flushAndFreeBuffer
   304                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007204 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007206 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   305                              <1> .buildGetBPB:
   306 00007207 E823010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   307 0000720C 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   308 00007210 E85DFDFFFF          <1>     call goDriver   ;Request!
   309 00007215 0FB77B03            <1>     movzx edi, word [rbx + bpbBuildReqPkt.status]
   310 00007219 F7C700800000        <1>     test edi, drvErrStatus
   311 0000721F 751D                <1>     jnz .diskDrvCritErr
   312                              <1>     ;Now rebuild the dpb fields for this drive
   313 00007221 488B7316            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bpbptr]    ;Get ptr to BPB
   314 00007225 53                  <1>     push rbx
   315 00007226 E8E8090000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   316 0000722B 5B                  <1>     pop rbx
   317                              <1>     ;Adjust the buffer header information
   318 0000722C 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   319 0000722F 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   320 00007232 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   321 00007235 884312              <1>     mov byte [rbx + bufferHdr.bufFATcopy], al
   322 00007238 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   323 0000723A 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   324                              <1>     return
    13                              <2> %%_ret:
    14 0000723D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   325                              <1> .diskDrvCritErr:
   326                              <1> ;Critical Errors fall through here
   327                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   328 0000723E C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Reset freecluster count
   329 00007245 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   330                              <1>     ;mov ah, critRead | critFAT | critFailOK | critRetryOK
   331 0000724C B418                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK
   332 0000724E 8825(68040000)      <1>     mov byte [Int24bitfld], ah  ;Save the permissions in var
   333 00007254 400FB6FF            <1>     movzx edi, dil  ;Clear the upper bytes, save only error code
   334 00007258 E864F7FFFF          <1>     call diskDevErrBitfield ;Goto disk crit error, but with bitfield set
   335 0000725D 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]
   336 00007264 3C01                <1>     cmp al, critRetry
   337 00007266 0F84D9FEFFFF        <1>     je ensureDiskValid
   338                              <1> .errorExitBad:
   339 0000726C F9                  <1>     stc     ;Set error flag to indicate fail
   340                              <1>     return  ;And exit
    13                              <2> %%_ret:
    14 0000726D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> 
   342                              <1> .dirtyBufferError:
   343                              <1> ;We can only enter this error if we returned media changed.
   344                              <1> ;We will never enter here if we returned media unknown.
   345 0000726E 55                  <1>     push rbp
   346 0000726F 488B6D1B            <1>     mov rbp, qword [rbp + dpb.qDriverHeaderPtr] ;Get the ptr to the driver
   347 00007273 66F745080008        <1>     test word [rbp + drvHdr.attrib], devDrvHdlCTL
   348 00007279 5D                  <1>     pop rbp
   349 0000727A 74F0                <1>     jz .errorExitBad    ;Just return fail if bit not set
   350                              <1>     ;rbp points to the dpb still
   351 0000727C 57                  <1>     push rdi
   352 0000727D 488B3D(D0040000)    <1>     mov rdi, qword [primReqPkt + mediaCheckReqPkt.desptr]   ;Get the pointer into rdi
   353 00007284 48893D(0F040000)    <1>     mov qword [errorVolLbl], rdi    ;Save the erroring volume label pointer
   354 0000728B 5F                  <1>     pop rdi ;Get back the buffer pointer
   355 0000728C C605(68040000)18    <1>     mov byte [Int24bitfld], critRead | critDOS | critRetryOK | critFailOK
   356                              <1> ;Do not touch the read/write flag as this is set by the read/write operation.
   357                              <1> ;It is meaningless in the error here, but may affect the message
   358                              <1> ; that comes up on the handler (not a big deal). Since we report a bad
   359                              <1> ; media change here, it should be obvious not to include the read/write 
   360                              <1> ; string.
   361 00007293 B80F000000          <1>     mov eax, drvBadDskChnge ;Set the driver error code to bad disk change
   362 00007298 E8BAF6FFFF          <1>     call diskDevErr
   363 0000729D 3C03                <1>     cmp al, critFail    ;Did the user select fail?
   364 0000729F 0F85A0FEFFFF        <1>     jne ensureDiskValid  ;If not, try again!
   365 000072A5 B822000000          <1>     mov eax, errIDC     ;Else, report an invalid disk swap error!
   366 000072AA E9BDFFFFFF          <1>     jmp .errorExitBad    ;and exit with CF set (often gets xlat to accden)
   367                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   368                              <1> ;           Primitive Driver Requests
   369                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   370                              <1> ;First are Disk requests, then Char device requests
   371                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   372                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   373                              <1> 
   374                              <1> primReqWriteSetup:
   375 000072AF 50                  <1>     push rax
   376 000072B0 B408                <1>     mov ah, drvWRITE    ;Command code
   377 000072B2 0225(D0030000)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   378 000072B8 EB03                <1>     jmp short primReqRWCommon
   379                              <1> primReqReadSetup:
   380 000072BA 50                  <1>     push rax
   381 000072BB B404                <1>     mov ah, drvREAD
   382                              <1> primReqRWCommon:
   383                              <1> ;Sets up the IO request packet with:
   384                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   385                              <1> ; rbx = Data storage buffer ptr
   386                              <1> ; ecx = Number of sectors to transfer
   387                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   388                              <1> ; ~~~~ Set by entry function ~~~~ 
   389                              <1> ; ah = Command code
   390                              <1> ; All regs preserved EXCEPT rbx.
   391                              <1> ; Return: rbx = Transfer Address
   392 000072BD 48891D(CF040000)    <1>     mov qword [primReqPkt + ioReqPkt.bufptr], rbx   ;Buffer
   393 000072C4 890D(D7040000)      <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   394 000072CA C605(C1040000)2A    <1>     mov byte [primReqPkt + ioReqPkt.hdrlen], ioReqPkt_size
   395 000072D1 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   396 000072D6 8905(C2040000)      <1>     mov dword [primReqPkt + ioReqPkt.unitnm], eax   ;Clear unit number field
   397 000072DC 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   398 000072DF 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   399                              <1>     ;Disk operations only here!
   400 000072E1 488915(DB040000)    <1>     mov qword [primReqPkt + ioReqPkt.strtsc], rdx   ;Start sector
   401 000072E8 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   402 000072EB 8805(CE040000)      <1>     mov byte [primReqPkt + ioReqPkt.medesc], al ;Store medesc!
   403 000072F1 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   404 000072F4 8805(C2040000)      <1>     mov byte [primReqPkt + ioReqPkt.unitnm], al ;Store the unit number
   405                              <1> primReqCommonExit:
   406                              <1> ;Returns in rbx the primary request header as these functions
   407                              <1> ; setup the request in the primary request header space
   408 000072FA 58                  <1>     pop rax
   409 000072FB 488D1D(C1040000)    <1>     lea rbx, primReqPkt ;Put in rbx the primary request header
   410                              <1>     return
    13                              <2> %%_ret:
    14 00007302 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> primReqMedCheckSetup:
   413                              <1> ;Prepare the diskIO packet for mediacheck
   414                              <1> ;rbp has DPB pointer for device to check media on
   415 00007303 50                  <1>     push rax
   416 00007304 C605(C1040000)17    <1>     mov byte [primReqPkt + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   417 0000730B C605(C3040000)01    <1>     mov byte [primReqPkt + mediaCheckReqPkt.cmdcde], drvMEDCHK
   418                              <1> .cmn:
   419 00007312 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   420 00007315 8805(CE040000)      <1>     mov byte [primReqPkt + mediaCheckReqPkt.medesc], al
   421 0000731B 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   422 0000731E 8805(C2040000)      <1>     mov byte [primReqPkt + mediaCheckReqPkt.unitnm], al
   423 00007324 66C705(C4040000)00- <1>     mov word [primReqPkt + mediaCheckReqPkt.status], 0
   423 0000732C 00                  <1>
   424 0000732D EBCB                <1>     jmp short primReqCommonExit
   425                              <1> 
   426                              <1> primReqGetBPBSetup:
   427                              <1> ;rbp has DPB pointer for device
   428                              <1> ;rdi has sector buffer header pointer for transfer
   429 0000732F 50                  <1>     push rax
   430 00007330 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   431 00007334 488905(CF040000)    <1>     mov qword [primReqPkt + bpbBuildReqPkt.bufptr], rax
   432 0000733B C605(C1040000)1E    <1>     mov byte [primReqPkt + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   433 00007342 C605(C3040000)02    <1>     mov byte [primReqPkt + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   434 00007349 EBC7                <1>     jmp short primReqMedCheckSetup.cmn
   435                              <1> 
   436                              <1> primReqOpenSetup:
   437                              <1> ;al = unit number if a disk device. Undefined otherwise
   438 0000734B 50                  <1>     push rax
   439 0000734C B40D                <1>     mov ah, drvOPEN
   440 0000734E EB03                <1>     jmp short primReqOCcommon
   441                              <1> primReqCloseSetup:
   442                              <1> ;al = unit number if a disk device. Undefined otherwise
   443 00007350 50                  <1>     push rax
   444 00007351 B40E                <1>     mov ah, drvCLOSE
   445                              <1> primReqOCcommon:
   446 00007353 C605(C1040000)0D    <1>     mov byte [primReqPkt + openReqPkt.hdrlen], openReqPkt_size
   447 0000735A 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   448 0000735B 8905(C2040000)      <1>     mov dword [primReqPkt + openReqPkt.unitnm], eax
   449                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   450 00007361 E994FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   451                              <1> 
   452                              <1> secdReqCharIOReq:
   453                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   454                              <1> ;Input:
   455                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   456                              <1> ; ecx = Length of buffer
   457                              <1> ; rdi = Buffer pointer
   458                              <1> ;Output: 
   459                              <1> ; rbx = Transfer Address 
   460 00007366 488D1D(97040000)    <1>     lea rbx, secdReqPkt
   461 0000736D C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   462 00007370 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   463 00007373 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   464 00007379 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   465 0000737D 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   466                              <1>     return
    13                              <2> %%_ret:
    14 00007380 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   467                              <1> ;If the device which will process this request is a disk device
   468                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   469                              <1> ;Then we will read the appropriate byte from that buffer to the 
   470                              <1> ; singleIOByt buffer.
   471                              <1> ;Such a request will require additional setup with the following fields:
   472                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    52                                  %include "./src/Kernel/Core/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 2Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 00007381 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 00007388 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (UNC paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 00007389 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    21 00007390 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 00007397 7409                <1>     je .net
    23 00007399 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 0000739F 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 000073A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 000073A2 F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 000073A3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 000073A4 E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 000073A9 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 000073AB B80C110000          <1>     mov eax, 110Ch 
    43 000073B0 CD2F                <1>     int 2Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 000073B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 000073B3 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    48 000073BA E8F0040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 000073BF E820FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 000073C4 7223                <1>     jc .exit
    51 000073C6 E81E98FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 000073CB 721C                <1>     jc .exit
    53 000073CD 55                  <1>     push rbp
    54 000073CE E86693FFFF          <1>     call flushAllBuffersForDPB  ;To ensure FAT32 FSInfo sectors synced
    55 000073D3 5D                  <1>     pop rbp
    56 000073D4 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    57 000073D7 FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    58 000073D9 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    59 000073DC 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr] ;This is the max cluster address
    60 000073DF FFCB                <1>     dec ebx ;Get the number of clusters
    61 000073E1 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    62 000073E5 8B5531              <1>     mov edx, dword [rbp + dpb.dFreeClustCnt]    ;Get # free clusters
    63 000073E8 F8                  <1>     clc
    64                              <1> .exit:
    65 000073E9 E8CB040000          <1>     call dosCrit1Exit
    66                              <1>     return
    13                              <2> %%_ret:
    14 000073EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> 
    68                              <1> muxGetIntVector:    ;Int 2Fh AX=1202h
    69                              <1> ;Input: al = Interrupt number
    70                              <1> ;Output: rbx = Interrupt Vector
    71 000073EF 50                  <1>     push rax    ;Preserve rax
    72 000073F0 FA                  <1>     cli ;Halt interrupts
    73 000073F1 0F010D(171A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
    74 000073F8 0FB6C0              <1>     movzx eax, al
    75 000073FB 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    76 000073FF 480305(191A0000)    <1>     add rax, qword [dosIdtPtr.base]    
    77 00007406 31DB                <1>     xor ebx, ebx
    78 00007408 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    79 0000740B 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    80 0000740F 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    81 00007413 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    82 00007417 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    83 0000741A FB                  <1>     sti
    84 0000741B 58                  <1>     pop rax
    85                              <1>     return
    13                              <2> %%_ret:
    14 0000741C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> getUserRegs:   ;Int 2Fh AX=1218h
    88                              <1> ;Returns ptr to user regs in rsi
    89 0000741D 488B35(7B040000)    <1>     mov rsi, qword [oldRSP]
    90                              <1>     return
    13                              <2> %%_ret:
    14 00007424 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> walkDPBchain:
    93                              <1> ;Called with al = 0 based drive number
    94                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    95 00007425 488B35(3B000000)    <1>     mov rsi, qword [dpbHeadPtr]  ;Get variable pointing to first DPB
    96                              <1> .walk:
    97 0000742C 4881FEFFFFFFFF      <1>     cmp rsi, -1
    98 00007433 740A                <1>     je .exitBad
    99 00007435 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   100 00007437 7407                <1>     je .exit    ;Drive found
   101 00007439 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   102 0000743D EBED                <1>     jmp short .walk
   103                              <1> .exitBad:
   104 0000743F F9                  <1>     stc
   105                              <1> .exit:
   106                              <1>     return
    13                              <2> %%_ret:
    14 00007440 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> getCDSNotJoin:   
   108                              <1> ;Gets a drive CDS, sets it as working and checks it is not a join drive
   109                              <1> ;Input: al = 1-based drive number
   110                              <1> ;Output: al = 0-based drive number
   111                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Join)
   112                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Join flags
   113                              <1> ;            set.
   114 00007441 E86B000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   115 00007446 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   116 00007448 56                  <1>     push rsi
   117 00007449 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   118 00007450 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   119 00007456 5E                  <1>     pop rsi
   120 00007457 7401                <1>     jz .exit
   121 00007459 F9                  <1>     stc
   122                              <1> .exit:
   123                              <1>     return
    13                              <2> %%_ret:
    14 0000745A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> 
   125                              <1> buildNewCDS:   ;Int 2Fh AX=121Fh
   126                              <1> ;If used with SDA CDS allows for direct disk access without needing to 
   127                              <1> ; actually use the real CDS. This prevents troubles when findnext on a 
   128                              <1> ; drive occurs the real CDS itself may have completely changed, i.e. 
   129                              <1> ; become unavailable. The SDA CDS becomes like the protoCDS of DOS 2 
   130                              <1> ; that was just an appendix of the DPB. Otherwise, can be used to init
   131                              <1> ; a new CDS or even a new complete CDS array!
   132                              <1> ;Input: al = Drive Letter for drive
   133                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   134                              <1> ;Output: rdi = newly filled in workingCDS
   135                              <1> ;CF=NC => CDS valid and has a DPB
   136                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   137 0000745B 50                  <1>     push rax
   138 0000745C 2C40                <1>     sub al, "A"-1
   139 0000745E 3805(77000000)      <1>     cmp byte [numPhysVol], al    ;al must be bigger than # of block drives
   140 00007464 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   141 0000746B 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   142 00007471 58                  <1>     pop rax
   143 00007472 723C                <1>     jb .exit    ;Exit with CF=CY
   144 00007474 50                  <1>     push rax
   145 00007475 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   146 0000747A 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   147 0000747C 58                  <1>     pop rax
   148 0000747D 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   149 00007483 C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   150 0000748A 48C7475100000000    <1>     mov qword [rdi + cds.qIFSPtr], 0    ;Optional redir signature field
   151 00007492 C7475900000000      <1>     mov dword [rdi + cds.dNetStore], 0   ;Optional storage/signature dword
   152 00007499 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   153                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   154 0000749F 50                  <1>     push rax
   155 000074A0 56                  <1>     push rsi
   156 000074A1 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   157 000074A3 E87DFFFFFF          <1>     call walkDPBchain
   158 000074A8 7204                <1>     jb .skipSettingDPB
   159 000074AA 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   160                              <1> .skipSettingDPB:
   161 000074AE 5E                  <1>     pop rsi
   162 000074AF 58                  <1>     pop rax
   163                              <1> .exit:
   164                              <1>     return
    13                              <2> %%_ret:
    14 000074B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> 
   166                              <1> getCDS:     ;Int 2Fh AX=1219h
   167                              <1> ;Gets the device DPB and saves it in the DOS variable
   168                              <1> ;This can be called to get CDS for network drives too!
   169                              <1> ;Input: al = 1 based drive number
   170                              <1> ;Sets workingCDS var with the CDS for the device. 
   171                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   172 000074B1 84C0                <1>     test al, al
   173 000074B3 7508                <1>     jnz .skip
   174 000074B5 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive
   175 000074BB FEC0                <1>     inc al
   176                              <1> .skip:
   177 000074BD FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   178 000074BF 56                  <1>     push rsi
   179 000074C0 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   180 000074C7 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   181 000074CE 7423                <1>     jz .localCall
   182                              <1>     ;Invokation via 21/5D00
   183 000074D0 50                  <1>     push rax
   184 000074D1 57                  <1>     push rdi
   185 000074D2 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   186 000074D9 48893D(12070000)    <1>     mov qword [workingCDS], rdi ;Make it current
   187 000074E0 0441                <1>     add al, "A" ;Convert to a drive letter
   188 000074E2 E874FFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   189 000074E7 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   190 000074ED 5F                  <1>     pop rdi
   191 000074EE 58                  <1>     pop rax
   192 000074EF 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   193 000074F1 EB17                <1>     jmp short .exitOk   ;All oki
   194                              <1> .localCall:
   195 000074F3 E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   196 000074F8 7208                <1>     jc .exitBad
   197 000074FA 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   198 00007500 7508                <1>     jnz .exitOk ;Exit with flag cleared
   199                              <1>     ;Else Return to unknown error locus
   200                              <1> .exitBad:
   201 00007502 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   202                              <1> .exitBad1:
   203 00007509 F9                  <1>     stc
   204                              <1> .exitOk:
   205 0000750A 5E                  <1>     pop rsi
   206                              <1>     return
    13                              <2> %%_ret:
    14 0000750B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> getCDSforDrive:     ;Int 2Fh AX=1217h
   209                              <1>     ;Gets the CDS for the current drive in al
   210                              <1>     ;Input: al = Drive number, 0 = A ...
   211                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   212                              <1>     ;        CF=CY => al not valid
   213 0000750C 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
   214 00007512 7202                <1>     jb .ctn
   215 00007514 F9                  <1>     stc 
   216                              <1>     return
    13                              <2> %%_ret:
    14 00007515 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> .ctn:
   218 00007516 50                  <1>     push rax
   219 00007517 52                  <1>     push rdx
   220 00007518 0FB6C0              <1>     movzx eax, al
   221 0000751B 48BE5F000000000000- <1>     mov rsi, cds_size
   221 00007524 00                  <1>
   222 00007525 31D2                <1>     xor edx, edx
   223 00007527 F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   224 00007529 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   225 00007530 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   226 00007533 488935(12070000)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   227 0000753A 5A                  <1>     pop rdx
   228 0000753B 58                  <1>     pop rax
   229 0000753C F8                  <1>     clc
   230                              <1>     return
    13                              <2> %%_ret:
    14 0000753D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> 
   233                              <1> swapPathSeparator:  ;Int 2Fh, AX=1204h, Normalise Path Separator
   234                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   235                              <1> ;Input: AL = Char to normalise.
   236                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   237                              <1> ;If path separator, set ZF=ZE
   238 0000753E 3C5C                <1>     cmp al, "\"
   239 00007540 7406                <1>     je .exit
   240 00007542 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   241 00007544 7502                <1>     jne .exit
   242 00007546 B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   243                              <1> .exit:
   244                              <1>     return
    13                              <2> %%_ret:
    14 00007548 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> 
   246                              <1> uppercaseCharAtPtr:
   247                              <1> ;Get the char pointed to by rsi and then fall
   248 00007549 AC                  <1>     lodsb
   249                              <1> uppercaseChar:      ;Int 2Fh, AX=1213h, Uppercase Char
   250                              <1> ;Convert a lowercase char to uppercase using file UC table
   251                              <1> ; Leave alone uppercase chars and invalid chars
   252                              <1> ;Input: al = Char to convert to uppercase
   253                              <1> ;Output: al = Processed char
   254 0000754A 53                  <1>     push rbx
   255 0000754B 488D1D618DFFFF      <1>     lea rbx, fileUCTbl    ;Get ptr to ucFilenameTable
   256                              <1> uppercaseCharWithTable:
   257                              <1> ;Convert a lowercase char to uppercase char using a table as provided
   258                              <1> ;Input: al = Char to convert to uppercase
   259                              <1> ;       rbx -> Table to use for translation
   260                              <1> ;Output: al = Processed char
   261                              <1> ;WARNING: 
   262                              <1> ;   RBX MUST BE PUSHED ONTO THE STACK BEFORE ENTERING THIS PROCEDURE!
   263 00007552 3C61                <1>     cmp al, "a"
   264 00007554 720D                <1>     jb .exit
   265 00007556 3C7A                <1>     cmp al, "z"
   266 00007558 7702                <1>     ja .checkExt
   267 0000755A 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   268                              <1> .checkExt:
   269 0000755C 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   270 0000755E 7203                <1>     jb .exit
   271 00007560 2C80                <1>     sub al, 80h ;Turn into table offset
   272 00007562 D7                  <1>     xlatb   ;Get translated extended byte into al
   273                              <1> .exit:
   274 00007563 50                  <1>     push rax    ;Save al temporarily
   275 00007564 488D1D028FFFFF      <1>     lea rbx, asciiCharProperties
   276 0000756B D7                  <1>     xlatb   ;Get the signature in al
   277 0000756C A801                <1>     test al, badChar
   278 0000756E 58                  <1>     pop rax
   279 0000756F 5B                  <1>     pop rbx
   280                              <1>     return
    13                              <2> %%_ret:
    14 00007570 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> 
   282                              <1> isCharTerminator:
   283                              <1> ;Input: al = Char to check properties of
   284                              <1> ;Output:    ZF=NZ => Char not name terminator
   285                              <1> ;           ZF=ZE => Char terminator
   286 00007571 50                  <1>     push rax
   287 00007572 53                  <1>     push rbx
   288 00007573 488D1DF38EFFFF      <1>     lea rbx, asciiCharProperties
   289 0000757A D7                  <1>     xlatb
   290 0000757B A802                <1>     test al, termChar
   291 0000757D 5B                  <1>     pop rbx
   292 0000757E 58                  <1>     pop rax
   293                              <1>     return
    13                              <2> %%_ret:
    14 0000757F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   294                              <1> 
   295                              <1> isCharSeparator:
   296                              <1> ;Input: al = Char to check properties of
   297                              <1> ;Output:    ZF=NZ => Char not separator
   298                              <1> ;           ZF=ZE => Char separator
   299 00007580 50                  <1>     push rax
   300 00007581 53                  <1>     push rbx
   301 00007582 488D1DE48EFFFF      <1>     lea rbx, asciiCharProperties
   302 00007589 D7                  <1>     xlatb
   303 0000758A A804                <1>     test al, sepChar
   304 0000758C 5B                  <1>     pop rbx
   305 0000758D 58                  <1>     pop rax
   306                              <1>     return
    13                              <2> %%_ret:
    14 0000758E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   307                              <1> 
   308                              <1> strlen2:    ;Int 2Fh, AX=1212h
   309                              <1> ;Entry point for Multiplex
   310 0000758F 57                  <1>     push rdi
   311 00007590 4889F7              <1>     mov rdi, rsi
   312 00007593 E802000000          <1>     call strlen
   313 00007598 5F                  <1>     pop rdi
   314                              <1>     return
    13                              <2> %%_ret:
    14 00007599 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> strlen: 
   316                              <1> ;Gets the length of a ASCIIZ string
   317                              <1> ;Input: rdi = Source buffer
   318                              <1> ;Output: ecx = Length of string
   319 0000759A 50                  <1>     push rax
   320 0000759B 57                  <1>     push rdi
   321 0000759C 30C0                <1>     xor al, al
   322 0000759E 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   323 000075A0 FFC9                <1>     dec ecx ;rcx = -1
   324 000075A2 F2AE                <1>     repne scasb
   325 000075A4 F7D1                <1>     not ecx
   326 000075A6 5F                  <1>     pop rdi
   327 000075A7 58                  <1>     pop rax
   328                              <1>     return
    13                              <2> %%_ret:
    14 000075A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> 
   330                              <1> strcpy:
   331                              <1> ;Copies a null terminated string from rsi to rdi
   332 000075A9 AC                  <1>     lodsb
   333 000075AA AA                  <1>     stosb
   334 000075AB 84C0                <1>     test al, al
   335                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000075AD 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000075AF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   336 000075B0 EBF7                <1>     jmp short strcpy
   337                              <1> 
   338                              <1> strcmp:
   339                              <1> ;Compares two ASCIIZ strings for equality.
   340                              <1> ;Input: rsi = First string
   341                              <1> ;       rdi = Second string
   342                              <1> ;       ecx = Number of bytes to compare
   343                              <1> ;Output: ZF=ZE => Equal
   344                              <1> ;        ZF=NZ => Not equal
   345 000075B2 56                  <1>     push rsi
   346 000075B3 57                  <1>     push rdi
   347 000075B4 F3A6                <1>     repe cmpsb
   348 000075B6 5F                  <1>     pop rdi
   349 000075B7 5E                  <1>     pop rsi
   350                              <1>     return
    13                              <2> %%_ret:
    14 000075B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> 
   352                              <1> 
   353                              <1> normaliseFileName:  ;Int 2Fh, AX=1211h
   354                              <1> ;Converts lowercase to uppercase and / to "\"
   355                              <1> ;Input: rsi = Source buffer
   356                              <1> ;       rdi = Buffer to place normalised path
   357 000075B9 50                  <1>     push rax
   358 000075BA 56                  <1>     push rsi
   359 000075BB 57                  <1>     push rdi
   360                              <1> .scan:
   361 000075BC AC                  <1>     lodsb
   362 000075BD 84C0                <1>     test al, al
   363 000075BF 740D                <1>     jz .exit
   364 000075C1 E878FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   365 000075C6 E87FFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   366 000075CB AA                  <1>     stosb
   367 000075CC EBEE                <1>     jmp short .scan
   368                              <1> .exit:
   369 000075CE 5F                  <1>     pop rdi
   370 000075CF 5E                  <1>     pop rsi
   371 000075D0 58                  <1>     pop rax
   372                              <1>     return
    13                              <2> %%_ret:
    14 000075D1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   373                              <1> 
   374                              <1> compareFileNames:   ;Int 2Fh, AX=121Eh
   375                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   376                              <1> ;Input: rsi = One ASCIIZ pathname
   377                              <1> ;       rdi = Second ASCIIZ pathname
   378                              <1> ;Return:
   379                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   380 000075D2 50                  <1>     push rax
   381 000075D3 56                  <1>     push rsi
   382 000075D4 57                  <1>     push rdi
   383                              <1> .scan:
   384 000075D5 AC                  <1>     lodsb
   385 000075D6 E818000000          <1>     call .normaliseChar
   386 000075DB 88C4                <1>     mov ah, al  ;Save normalised char in ah
   387 000075DD 8A07                <1>     mov al, byte [rdi]  ;Get the char in path2
   388 000075DF 48FFC7              <1>     inc rdi ;And goto next char
   389 000075E2 E80C000000          <1>     call .normaliseChar
   390 000075E7 38E0                <1>     cmp al, ah  ;Are they equal?
   391 000075E9 7504                <1>     jne .exit   ;If not equal, exit
   392 000075EB 84C0                <1>     test al, al ;Here al=ah. If al == 0, exit!
   393 000075ED 75E6                <1>     jnz .scan
   394                              <1> .exit:
   395 000075EF 5F                  <1>     pop rdi
   396 000075F0 5E                  <1>     pop rsi
   397 000075F1 58                  <1>     pop rax
   398                              <1>     return
    13                              <2> %%_ret:
    14 000075F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   399                              <1> .normaliseChar:
   400 000075F3 E852FFFFFF          <1>     call uppercaseChar      ;Uppercase the char if uppercaseable
   401 000075F8 E841FFFFFF          <1>     call swapPathSeparator  ;Swap if a pathsep char
   402                              <1>     return
    13                              <2> %%_ret:
    14 000075FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   403                              <1> checkPathspecOK:
   404                              <1> ;Input:
   405                              <1> ;rsi -> points to a path to verify if it is ok.
   406                              <1> ;Output:
   407                              <1> ;CF=NC => The path is totally clean and ok to use.
   408                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   409                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   410                              <1> ; and depending on method of invokation and caller, may be permissable.
   411                              <1> ;We accept lc and uc characters in this check function.
   412 000075FE 50                  <1>     push rax
   413 000075FF 53                  <1>     push rbx    ;Use rbx as the return flag status
   414 00007600 56                  <1>     push rsi
   415 00007601 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   416                              <1>     ;Start by getting the length of the ASCIIZ string.
   417 00007603 51                  <1>     push rcx
   418 00007604 57                  <1>     push rdi
   419 00007605 4889F7              <1>     mov rdi, rsi
   420 00007608 E88DFFFFFF          <1>     call strlen
   421 0000760D 89C8                <1>     mov eax, ecx    ;Save the length in eax
   422 0000760F 5F                  <1>     pop rdi
   423 00007610 59                  <1>     pop rcx
   424 00007611 3D40000000          <1>     cmp eax, MAX_FSPEC    ;Check
   425 00007616 0F8792000000        <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   426 0000761C 85C0                <1>     test eax, eax   ;If the path is empty, also error out!
   427 0000761E 0F848A000000        <1>     jz .badExit
   428                              <1>     ;First we verify if our path is relative or canonical (absolute)
   429 00007624 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   430 00007627 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   431 0000762B 7416                <1>     je .netName
   432 0000762D 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   433 00007631 7410                <1>     je .netName
   434 00007633 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   435 00007636 7419                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   436                              <1>     ;Here if relative
   437 00007638 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   438 0000763F 756D                <1>     jnz .badExit    ;If this is -1, server invoke.
   439 00007641 EB3B                <1>     jmp short .okToScan
   440                              <1> .netName:
   441 00007643 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the UNC start symbol
   442 0000764A 803E00              <1>     cmp byte [rsi], 0   ;If this is an empty path, error!
   443 0000764D 745F                <1>     je .badExit
   444 0000764F EB2D                <1>     jmp short .okToScan
   445                              <1> .diskPath:
   446 00007651 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   447 00007658 803E00              <1>     cmp byte [rsi], 0   ;Cannot have an empty relative path!
   448 0000765B 7451                <1>     je .badExit
   449 0000765D F605(02070000)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   450 00007664 740F                <1>     jz .localAbsCheck
   451                              <1> .absMain:
   452 00007666 AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   453 00007667 E8D2FEFFFF          <1>     call swapPathSeparator
   454 0000766C 7540                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   455 0000766E 803E00              <1>     cmp byte [rsi], 0   ;Is the char after the slash null?
   456 00007671 743B                <1>     je .badExit ;Error if so!
   457 00007673 EB09                <1>     jmp short .okToScan
   458                              <1> .localAbsCheck:
   459 00007675 8A06                <1>     mov al, byte [rsi]  ;Get the char we are pointing at
   460 00007677 E8C2FEFFFF          <1>     call swapPathSeparator  ;Is it a pathsep?
   461 0000767C 74E8                <1>     jz .absMain ;If it is, we do the absolute check
   462                              <1>     ;Else we are relative and begin wildcard search
   463                              <1> .okToScan:
   464 0000767E AC                  <1>     lodsb   
   465 0000767F 84C0                <1>     test al, al ;End of path char?
   466 00007681 7430                <1>     jz .exit
   467 00007683 E8B6FEFFFF          <1>     call swapPathSeparator
   468 00007688 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   469 0000768A 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   470 0000768C 7411                <1>     je .wcFound
   471 0000768E 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   472 00007690 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   473                              <1>     ;Else we check that the char in al is an acceptable char
   474 00007692 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   475 00007694 74E8                <1>     je .okToScan
   476 00007696 E831000000          <1>     call checkCharValid
   477 0000769B 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   478 0000769D EBDF                <1>     jmp short .okToScan
   479                              <1> .wcFound:
   480 0000769F BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   481 000076A4 EBD8                <1>     jmp short .okToScan
   482                              <1> .wcCheck:
   483                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   484 000076A6 F7C340000000        <1>     test ebx, 40h
   485 000076AC 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   486                              <1>     ;Else fall through in error
   487                              <1> .badExit:
   488 000076AE BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   489                              <1> .exit:
   490 000076B3 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   491 000076B4 9D                  <1>     popfq
   492 000076B5 5E                  <1>     pop rsi
   493 000076B6 5B                  <1>     pop rbx
   494 000076B7 58                  <1>     pop rax
   495                              <1>     return
    13                              <2> %%_ret:
    14 000076B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   496                              <1> 
   497                              <1> scanPathWC:
   498                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   499                              <1> ; even in the final path componant.
   500                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   501                              <1> ;Output: CF=NC => No wildcards present
   502                              <1> ;        CF=CY => Wildcards found
   503 000076B9 50                  <1>     push rax
   504 000076BA 56                  <1>     push rsi
   505                              <1> .scan:
   506 000076BB AC                  <1>     lodsb
   507 000076BC 84C0                <1>     test al, al
   508 000076BE 7409                <1>     jz .exit
   509 000076C0 3C3F                <1>     cmp al, "?"
   510 000076C2 7404                <1>     je .wcFnd
   511 000076C4 3C2A                <1>     cmp al, "*"
   512 000076C6 75F3                <1>     jne .scan
   513                              <1> .wcFnd:
   514 000076C8 F9                  <1>     stc
   515                              <1> .exit:
   516 000076C9 5E                  <1>     pop rsi
   517 000076CA 58                  <1>     pop rax
   518                              <1>     return
    13                              <2> %%_ret:
    14 000076CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> 
   520                              <1> checkCharValid:
   521                              <1> ;If ZF=ZE => Invalid Char
   522                              <1> ;If ZF=NZ => Valid Char
   523 000076CC 50                  <1>     push rax
   524 000076CD E878FEFFFF          <1>     call uppercaseChar  ;Sets ZF if invalid filename char
   525 000076D2 58                  <1>     pop rax
   526                              <1>     return
    13                              <2> %%_ret:
    14 000076D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   527                              <1> 
   528                              <1> 
   529                              <1> compareFarPointers: ;Int 2Fh, AX = 1214h
   530                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   531                              <1> ;Input: rsi = One pointer
   532                              <1> ;       rdi = Second pointer
   533                              <1> ;Output: ZF=ZE if equal
   534                              <1> ;        ZF=NZ if not
   535 000076D4 4839FE              <1>     cmp rsi, rdi
   536                              <1>     return
    13                              <2> %%_ret:
    14 000076D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   537                              <1> 
   538                              <1> checkPathNet:
   539                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   540                              <1> ;Output: ZF=ZE => Path is a net path
   541                              <1> ;        ZF=NZ => Path is not a net path
   542 000076D8 50                  <1>     push rax
   543 000076D9 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   544 000076DC E85DFEFFFF          <1>     call swapPathSeparator
   545 000076E1 7507                <1>     jnz .exit
   546 000076E3 88E0                <1>     mov al, ah  ;Get the second char
   547 000076E5 E854FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   548                              <1> .exit:
   549 000076EA 58                  <1>     pop rax
   550                              <1>     return
    13                              <2> %%_ret:
    14 000076EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> 
   552                              <1> getCharDevDriverPtr:
   553                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   554                              <1> ;Input: rax = Device Driver name (space padded)
   555                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   556 000076EC 488D3D(7A000000)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   557                              <1> .lp:
   558 000076F3 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   559                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000076F7 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000076F9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   560 000076FA 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   561 000076FD 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   562 00007704 75ED                <1>     jne .lp ;If not loop
   563 00007706 F9                  <1>     stc ;Else bad exit
   564                              <1>     return
    13                              <2> %%_ret:
    14 00007707 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> getDrvChain: ;Int 2Fh, AX=122Ch
   567                              <1> ;Pointer to the first non-null device driver in the chain.
   568                              <1> ;Returns the value in rax only
   569 00007708 488D05(7A000000)    <1>     lea rax, nulDevHdr
   570 0000770F 488B00              <1>     mov rax, qword [rax + drvHdr.nxtPtr]    ;Get the pointer at null driver
   571                              <1>     return
    13                              <2> %%_ret:
    14 00007712 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   572                              <1> 
   573                              <1> getExtErrCde:   ;Int 2Fh, AX=122Dh
   574                              <1> ;Gets the extended error code in ax and returns
   575 00007713 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   576                              <1>     return
    13                              <2> %%_ret:
    14 0000771A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    53                                  %include "./src/Kernel/Core/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 21h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7                              <1>  %if DEBUG
     8                              <1>     ;Entry function
     9                              <1>     debugEnterM
    10                              <1>     lea rbp, .l0000
    11                              <1>     call debPrintNullString
    12                              <1>     call debPrintFunctionName
    13                              <1>     jmp short .l0001
    14                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    15                              <1> .l0001:    
    16                              <1>     debugExitM
    17                              <1>     %endif
    18 0000771B FA                  <1>     cli ;Halt external interrupts
    19 0000771C FC                  <1>     cld ;Ensure all string ops occur in the right direction
    20 0000771D 80FC6A              <1>     cmp ah, kDispTblL/2    ;Number of functions
    21 00007720 0F8357010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    22                              <1> ;Cherry pick quick functions
    23 00007726 80FC33              <1>     cmp ah, 33h
    24 00007729 0F848A020000        <1>     je cbcQuick
    25 0000772F 7226                <1>     jb .fsbegin
    26 00007731 80FC64              <1>     cmp ah, 64h
    27 00007734 0F840A030000        <1>     je sdlQuick  
    28 0000773A 771B                <1>     ja .fsbegin             ;If above, do usual Int21 entry
    29 0000773C 80FC51              <1>     cmp ah, 51h
    30 0000773F 0F84E1020000        <1>     je gcpspQuick           ;This and below are exactly the same
    31 00007745 80FC62              <1>     cmp ah, 62h
    32 00007748 0F84D8020000        <1>     je gcpspQuick           ;Calls the above function
    33 0000774E 80FC50              <1>     cmp ah, 50h
    34 00007751 0F84C0020000        <1>     je scpspQuick
    35                              <1> .fsbegin:
    36 00007757 E83C010000          <1>     call dosPushRegs ;Push the usual prologue registers
    37 0000775C 48891D(83040000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    38 00007763 66C705(43040000)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    38 0000776B 00                  <1>
    39 0000776C 488B05(7B040000)    <1>     mov rax, qword [oldRSP]
    40 00007773 488905(6B040000)    <1>     mov qword [oldoldRSP], rax
    41 0000777A FE05(08040000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    42 00007780 488925(7B040000)    <1>     mov qword [oldRSP], rsp
    43                              <1> ;Network related variable resetting
    44 00007787 C605(02070000)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    45                              <1> ;Here, we want to save oldRSP in the callers PSP
    46 0000778E 488B05(1F040000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    47 00007795 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    48 00007799 58                  <1>     pop rax     ;Get old rax back
    49 0000779A 50                  <1>     push rax    ;and push it back onto the stack
    50                              <1> .charFun0CEP:
    51                              <1> .serverEP:
    52 0000779B 488D25(080D0000)    <1>     lea rsp, critStakTop
    53 000077A2 FB                  <1>     sti         ;Reenable interrupts
    54                              <1> 
    55 000077A3 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    56 000077A5 881D(94040000)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    57 000077AB C605(95040000)01    <1>     mov byte [int28Flag], 1 ;Make it ok to trigger Int 28h
    58 000077B2 881D(6A040000)      <1>     mov byte [Int24Fail], bl    ;Clear the Int24 returned fail flag
    59 000077B8 881D(8B040000)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    60 000077BE 48891D(32070000)    <1>     mov qword [currentSFT], rbx ;Reset the current SFT field
    61                              <1> 
    62 000077C5 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    63 000077C6 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    64 000077C8 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    65 000077CA 488D059C8DFFFF      <1>     lea rax, kDispTbl
    66 000077D1 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    67 000077D4 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    68 000077D8 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    69 000077DB 58                  <1>     pop rax
    70                              <1> 
    71 000077DC 84E4                <1>     test ah, ah     ;Simple Terminate function?
    72 000077DE 741C                <1>     jz .fddiskOp
    73 000077E0 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    74 000077E3 7465                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    75 000077E5 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    76 000077E8 7712                <1>     ja .fddiskOp
    77                              <1> ;Char operations here
    78 000077EA F605(07040000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    79 000077F1 7557                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    80 000077F3 488D25(98130000)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    81 000077FA EB4E                <1>     jmp short .fdGoToFunction
    82                              <1> .fddiskOp:
    83                              <1>     ;Disk operations go here
    84                              <1>     ;Save rax on entry to a disk funciton
    85 000077FC 488905(33040000)    <1>     mov qword [oldRAX], rax
    86                              <1>     ;Clear up error info
    87 00007803 C605(0A040000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    88 0000780A C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    89 00007811 C605(09040000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    90                              <1> ;Default delchar UNLESS a function changes it. Placed here since delete/rename
    91                              <1> ; is a disk op. If a critical error occurs midway through a delete and the I24h
    92                              <1> ; handler needs to call DOS for char funcs, we dont want to reset this value as 
    93                              <1> ; the delete/rename operation might have set it to 0 (we dont do this yet).
    94 00007818 C605(08070000)E5    <1>     mov byte [delChar], 0E5h
    95                              <1> ;Similar for volIdFlag. Find file et al are disk ops. 
    96 0000781F C605(5F040000)00    <1>     mov byte [volIdFlag], 0    ;Force bit clear (else, forces volid search)
    97                              <1> 
    98 00007826 50                  <1>     push rax
    99 00007827 B482                <1>     mov ah, 82h ;Cancel all critical section!
   100 00007829 CD2A                <1>     int 2ah ;DOS critical section semphore handler (default, iretq)
   101 0000782B 58                  <1>     pop rax
   102                              <1> 
   103 0000782C C605(95040000)00    <1>     mov byte [int28Flag], 0     ;Turn off the ability to trigger Int 28h
   104 00007833 488D25(D8190000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
   105 0000783A F605(32040000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   106 00007841 7407                <1>     jz .fdGoToFunction
   107                              <1> ; HANDLE CTRL+BREAK HERE!
   108 00007843 50                  <1>     push rax
   109 00007844 E8B9B2FFFF          <1>     call checkBreak   ; Check for a ^C
   110 00007849 58                  <1>     pop rax
   111                              <1> .fdGoToFunction:
   112 0000784A 48871D(83040000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   113                              <1> %if DEBUG && REGS
   114                              <1>     ;Print stack if necessary function
   115                              <1>     debugEnterM
   116                              <1>     call debPrintDOSStack
   117                              <1>     debugExitM
   118                              <1> %endif
   119 00007851 FF15(83040000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   120                              <1> %if DEBUG
   121                              <1>     ;Entry function
   122                              <1>     debugEnterM
   123                              <1>     lea rbp, .l0002
   124                              <1>     call debPrintNullString
   125                              <1>     jmp short .l0003
   126                              <1> .l0002 db "Exiting Int 21h",0Ah,0Dh,0
   127                              <1> .l0003:    
   128                              <1>     debugExitM
   129                              <1> %endif
   130                              <1> %if DEBUG && REGS
   131                              <1>     ;Exit function
   132                              <1>     debugEnterM
   133                              <1>     call debPrintDOSStack
   134                              <1>     debugExitM
   135                              <1> %endif
   136                              <1> .fdExit:
   137 00007857 FA                  <1>     cli     ;Redisable interrupts
   138 00007858 FE0D(08040000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   139 0000785E 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   140 00007865 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   141 00007868 488B05(6B040000)    <1>     mov rax, qword [oldoldRSP]
   142 0000786F 488905(7B040000)    <1>     mov qword [oldRSP], rax
   143 00007876 E806000000          <1>     call dosPopRegs  ;Pop the frame
   144 0000787B 48CF                <1>     iretq
   145                              <1> .fdExitBad:
   146 0000787D 30C0                <1>     xor al, al
   147                              <1> defaultIretq:
   148 0000787F 48CF                <1>     iretq
   149                              <1> dosPopRegs:
   150 00007881 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   151 00007887 58                  <1>     pop rax
   152 00007888 5B                  <1>     pop rbx
   153 00007889 59                  <1>     pop rcx
   154 0000788A 5A                  <1>     pop rdx
   155 0000788B 5E                  <1>     pop rsi
   156 0000788C 5F                  <1>     pop rdi
   157 0000788D 5D                  <1>     pop rbp
   158 0000788E 4158                <1>     pop r8
   159 00007890 4159                <1>     pop r9
   160 00007892 FF25(73040000)      <1>     jmp qword [dosReturn]
   161                              <1> dosPushRegs:
   162 00007898 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   163 0000789E 4151                <1>     push r9
   164 000078A0 4150                <1>     push r8
   165 000078A2 55                  <1>     push rbp
   166 000078A3 57                  <1>     push rdi
   167 000078A4 56                  <1>     push rsi
   168 000078A5 52                  <1>     push rdx
   169 000078A6 51                  <1>     push rcx
   170 000078A7 53                  <1>     push rbx
   171 000078A8 50                  <1>     push rax
   172 000078A9 FF25(73040000)      <1>     jmp qword [dosReturn]
   173                              <1> dosCrit1Enter:
   174                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 000078AF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175 000078B0 B801800000          <1>     mov eax, 8001h
   176 000078B5 CD2A                <1>     int 2ah
   177 000078B7 58                  <1>     pop rax
   178                              <1>     return
    13                              <2> %%_ret:
    14 000078B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   179                              <1> dosCrit1Exit:
   180                              <1>     return
    13                              <2> %%_ret:
    14 000078B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   181 000078BA B801810000          <1>     mov eax, 8101h
   182 000078BF CD2A                <1>     int 2ah
   183 000078C1 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 000078C2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> dosCrit2Enter:
   186                              <1>     return
    13                              <2> %%_ret:
    14 000078C3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187 000078C4 B802800000          <1>     mov eax, 8002h
   188 000078C9 CD2A                <1>     int 2ah
   189 000078CB 58                  <1>     pop rax
   190                              <1>     return
    13                              <2> %%_ret:
    14 000078CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   191                              <1> dosCrit2Exit:
   192                              <1>     return
    13                              <2> %%_ret:
    14 000078CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   193 000078CE B802810000          <1>     mov eax, 8102h
   194 000078D3 CD2A                <1>     int 2ah
   195 000078D5 58                  <1>     pop rax
   196                              <1>     return
    13                              <2> %%_ret:
    14 000078D6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> 
   198                              <1> ;FCB specific returns
   199                              <1> fcbGoodExit:
   200                              <1> ;Preserve the carry flag on entry to DOS
   201 000078D7 30C0                <1>     xor al, al ;Set return code al = 0
   202                              <1>     return
    13                              <2> %%_ret:
    14 000078D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   203                              <1> fcbErrExit:
   204                              <1> ;Preserve the carry flag on entry to DOS
   205                              <1> ;Input: eax = Extended error code to store in SDA 
   206 000078DA E836000000          <1>     call xLatError
   207 000078DF B0FF                <1>     mov al, -1  ;Set return code al = -1
   208 000078E1 F9                  <1>     stc
   209                              <1>     return
    13                              <2> %%_ret:
    14 000078E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> ;Handle and General DOS Returns
   212                              <1> ;All good exits destroy AT LEAST ax 
   213                              <1> extGoodExit2:
   214                              <1> ;Good exit with an extended return code in eax
   215 000078E3 E835FBFFFF          <1>     call getUserRegs
   216 000078E8 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   217 000078EA EB08                <1>     jmp short extGoodExit.extGoodCommon
   218                              <1> extGoodExit:
   219                              <1> ;Good exit
   220                              <1> ;Return code in ax
   221 000078EC E82CFBFFFF          <1>     call getUserRegs
   222 000078F1 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   223                              <1> .extGoodCommon:
   224 000078F4 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   225 000078F8 F8                  <1>     clc
   226                              <1>     return
    13                              <2> %%_ret:
    14 000078F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> extErrExit:
   228                              <1> ;The extended error exit from DOS
   229                              <1> ;Jumped to with AL=Extended error code
   230                              <1> ;Can be called too.
   231                              <1> ;Input: al = Extended error code
   232                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   233                              <1> ;   Returns with: eax = xLat Error
   234                              <1> ;                 rsi = callerFrame
   235 000078FA 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   236 000078FD E813000000          <1>     call xLatError
   237 00007902 E891000000          <1>     call checkFail
   238                              <1> .noXlat:
   239 00007907 E811FBFFFF          <1>     call getUserRegs
   240 0000790C 668906              <1>     mov word [rsi + callerFrame.rax], ax
   241 0000790F 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   242 00007913 F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   243                              <1>     return
    13                              <2> %%_ret:
    14 00007914 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   244                              <1> xLatError:
   245                              <1> ;Translates the error code given in ax and sets error code in the var
   246                              <1> ; Input: ax = Extended Error Code
   247                              <1> ; Output: ax = Potentially translated Error Code
   248                              <1> ;         [errorExCde] = Original Error Code
   249                              <1> ;Preserves all registers except ax
   250                              <1> ;AH is always returned as 0
   251 00007915 53                  <1>     push rbx
   252 00007916 51                  <1>     push rcx
   253 00007917 56                  <1>     push rsi
   254 00007918 668905(0B040000)    <1>     mov word [errorExCde], ax
   255 0000791F 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   256 00007921 488D355187FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   257                              <1> .readEntry:
   258 00007928 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   259 0000792A 3CFF                <1>     cmp al, -1
   260 0000792C 741F                <1>     je .skipXlat
   261 0000792E 3A05(34040000)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   262 00007934 7408                <1>     je .found
   263                              <1>     ;Here, entry not found, goto next entry
   264 00007936 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   265 00007939 4801C6              <1>     add rsi, rax    ;Goto next entry
   266 0000793C EBEA                <1>     jmp short .readEntry
   267                              <1> .found:
   268                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   269 0000793E 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   270                              <1> .mainSearch:
   271 00007941 AC                  <1>     lodsb   ;Get one byte into al
   272 00007942 38C3                <1>     cmp bl, al  ;Check against the error code
   273 00007944 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   274 00007946 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   275 00007948 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   276                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   277 0000794A 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   278                              <1> .skipXlat:
   279 0000794D 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   280 0000794F 5E                  <1>     pop rsi
   281 00007950 59                  <1>     pop rcx
   282 00007951 5B                  <1>     pop rbx
   283                              <1>     return
    13                              <2> %%_ret:
    14 00007952 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   284                              <1> setErrorVars:   ;Int 2Fh, AX=1222h
   285                              <1> ;Looks up the error code in the variable and sets the other error vars
   286                              <1> ;Called with the lookup table in rsi
   287                              <1> ;All regs preserved
   288 00007953 50                  <1>     push rax
   289 00007954 53                  <1>     push rbx
   290 00007955 51                  <1>     push rcx
   291 00007956 56                  <1>     push rsi
   292 00007957 0FB71D(0B040000)    <1>     movzx ebx, word [errorExCde]
   293 0000795E B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   294                              <1> .readEntry:
   295 00007963 AD                  <1>     lodsd   ;Read the dword table entry into eax
   296 00007964 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   297 00007969 7428                <1>     je .exit    
   298 0000796B 38D8                <1>     cmp al, bl  ;Compare the error codes
   299 0000796D 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   300 0000796F D3E8                <1>     shr eax, cl
   301 00007971 3CFF                <1>     cmp al, -1
   302 00007973 7406                <1>     je .skipClass
   303 00007975 8805(0E040000)      <1>     mov byte [errorClass], al
   304                              <1> .skipClass:
   305 0000797B D3E8                <1>     shr eax, cl
   306 0000797D 3CFF                <1>     cmp al, -1
   307 0000797F 7406                <1>     je .skipAct
   308 00007981 8805(0D040000)      <1>     mov byte [errorAction], al
   309                              <1> .skipAct:
   310 00007987 D3E8                <1>     shr eax, cl
   311 00007989 3CFF                <1>     cmp al, -1
   312 0000798B 7406                <1>     je .exit
   313 0000798D 8805(0A040000)      <1>     mov byte [errorLocus], al
   314                              <1> .exit:
   315 00007993 5E                  <1>     pop rsi
   316 00007994 59                  <1>     pop rcx
   317 00007995 5B                  <1>     pop rbx
   318 00007996 58                  <1>     pop rax
   319                              <1>     return
    13                              <2> %%_ret:
    14 00007997 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> checkFail:
   321                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 24h
   322                              <1> ; and swaps the var error code if so
   323 00007998 F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;If zero, skip!
   324 0000799F 7409                <1>     jz .skipFail
   325 000079A1 66C705(0B040000)53- <1>     mov word [errorExCde], errFI24  ;Set error to "Fail on Int 24h"
   325 000079A9 00                  <1>
   326                              <1> .skipFail:
   327 000079AA 56                  <1>     push rsi
   328 000079AB 488D356387FFFF      <1>     lea rsi, extErrTbl
   329 000079B2 E89CFFFFFF          <1>     call setErrorVars
   330 000079B7 5E                  <1>     pop rsi
   331                              <1>     return
    13                              <2> %%_ret:
    14 000079B8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> ;========================================:
   333                              <1> ;      Reentrant Kernel Functions        :
   334                              <1> ;========================================:
   335                              <1> ;ah = 33h, Control Break related functions + some undocumented stuff
   336                              <1> cbcQuick:
   337                              <1> ;The entry point for this function if entered through a normal DOS call
   338 000079B9 E815000000          <1>     call ctrlBreakCheck
   339 000079BE 48CF                <1>     iretq
   340                              <1> cbcServer:
   341                              <1> ;The entry point for this function if entered through a Server Call (5D00h)
   342 000079C0 E80E000000          <1>     call ctrlBreakCheck
   343 000079C5 E853FAFFFF          <1>     call getUserRegs
   344                              <1> ;Calls which dont modify the regs, preserve them themselves so this so 
   345                              <1> ; replacing them back on the stack is a small price to pay
   346 000079CA 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   347 000079CE 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   348                              <1> ;DO NOT WRITE AN ERROR CODE AS THIS WOULD OVERWRITE AN ERROR CODE 
   349                              <1> ; THAT MAY BE DEPENDED ON. RETURN WITH THE VALUE IN AL AS RETCODE.
   350                              <1>     return 
    13                              <2> %%_ret:
    14 000079D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> ctrlBreakCheck:
   352                              <1> ;Can handle subfunctions:
   353                              <1> ; al = 0: Get state for the break flag in dl
   354                              <1> ; al = 1: Set the state of the break flag to dl
   355                              <1> ; al = 2: Exchange the value of the break flag with dl
   356                              <1> ; al = 3: Error, returns al = -1
   357                              <1> ; al = 4: Error, returns al = -1
   358                              <1> ;Undocumented subfunctions:
   359                              <1> ; al = 5: Get the boot drive in dl
   360                              <1> ; al = 6: Get the true DOS version number in bx with subversion flags in dl
   361 000079D3 3C06                <1>     cmp al, 6
   362 000079D5 7437                <1>     je .trueVer
   363 000079D7 3C05                <1>     cmp al, 5
   364 000079D9 742A                <1>     je .getBtDrv    ;Peel off btdrv req.
   365 000079DB 84C0                <1>     test al, al
   366 000079DD 7507                <1>     jnz .cbcget     ;Get the state or other functions
   367 000079DF 8A15(32040000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   368                              <1>     return
    13                              <2> %%_ret:
    14 000079E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   369                              <1> .cbcget:
   370 000079E6 3C02                <1>     cmp al, 02h
   371 000079E8 7718                <1>     ja .cbcBad
   372 000079EA 740C                <1>     jz .cbcxchg ;Function 2
   373 000079EC 52                  <1>     push rdx
   374 000079ED 80E201              <1>     and dl, 1   ;Get only the bottom bit
   375 000079F0 8815(32040000)      <1>     mov byte [breakFlag], dl    ;Set the state
   376 000079F6 5A                  <1>     pop rdx
   377                              <1>     return
    13                              <2> %%_ret:
    14 000079F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   378                              <1> .cbcxchg:
   379 000079F8 80E201              <1>     and dl, 1
   380 000079FB 8615(32040000)      <1>     xchg byte [breakFlag], dl
   381                              <1>     return
    13                              <2> %%_ret:
    14 00007A01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   382                              <1> .cbcBad:
   383 00007A02 B0FF                <1>     mov al, -1
   384                              <1>     return
    13                              <2> %%_ret:
    14 00007A04 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   385                              <1> .getBtDrv:
   386                              <1> ;Undocumented.
   387                              <1> ;Might be unreliable so dont document yet.
   388                              <1> ;Return 1 based boot drive in dl
   389 00007A05 8A15(10000000)      <1>     mov dl, byte [bootDrive]    ;Get the 0 based bootDrive number
   390 00007A0B FEC2                <1>     inc dl  ;Return a 1 based drive number
   391                              <1>     return
    13                              <2> %%_ret:
    14 00007A0D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   392                              <1> .trueVer:
   393                              <1> ;Undocumented.
   394                              <1> ;bx returns true DOS number.
   395                              <1> ;dl has "revision" number in bits 0-2. 
   396                              <1> ;dh has various flags. All reserved for future use.
   397 00007A0E 66BB0063            <1>     mov bx, dosVerMac
   398 00007A12 66BA0201            <1>     mov dx, (dosVerFlags << 8) | dosRev
   399                              <1>     return
    13                              <2> %%_ret:
    14 00007A16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   400                              <1> 
   401                              <1> ;ah = 50h, set current PSP
   402                              <1> scpspQuick:
   403 00007A17 E802000000          <1>     call setCurrPSP
   404 00007A1C 48CF                <1>     iretq
   405                              <1> scpspServer:
   406                              <1> setCurrPSP:
   407 00007A1E 48891D(1F040000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   408                              <1>     return
    13                              <2> %%_ret:
    14 00007A25 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   409                              <1> 
   410                              <1> ;ah = 51h/62h, gives PSP addr/Process ID
   411                              <1> gcpspQuick:
   412 00007A26 E811000000          <1>     call getCurrPSP
   413 00007A2B 48CF                <1>     iretq
   414                              <1> gcpspServer:
   415 00007A2D E80A000000          <1>     call getCurrPSP
   416 00007A32 E8E6F9FFFF          <1>     call getUserRegs
   417 00007A37 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx
   418                              <1>     return
    13                              <2> %%_ret:
    14 00007A3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   419                              <1> getCurrPSP:     
   420 00007A3C 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   421                              <1>     return
    13                              <2> %%_ret:
    14 00007A43 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   422                              <1> 
   423                              <1> ;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   424                              <1> sdlQuick:
   425 00007A44 E802000000          <1>     call setDriverLookahead
   426 00007A49 48CF                <1>     iretq
   427                              <1> sdlServer:
   428                              <1> setDriverLookahead:
   429 00007A4B 8805(E0190000)      <1>     mov byte [lookahead], al    
   430 00007A51 48CF                <1>     iretq
   431                              <1> 
   432                              <1> ;========================================:
   433                              <1> ;            Kernel Functions            :
   434                              <1> ;========================================:
   435                              <1> diskReset:         ;ah = 0Dh
   436                              <1> ;Flush all dirty buffers to disk
   437 00007A53 E857FEFFFF          <1>     call dosCrit1Enter
   438 00007A58 B0FF                <1>     mov al, -1  ;Mark all drives as flushable
   439 00007A5A E8EC8CFFFF          <1>     call flushAllBuffersForDrive  
   440                              <1>     ;Now we free all buffers and set their referenced bit
   441 00007A5F 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   442                              <1> .drBufferLp:
   443 00007A66 4881FFFFFFFFFF      <1>     cmp rdi, -1
   444 00007A6D 740B                <1>     je .drExit
   445 00007A6F 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   446 00007A75 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   447 00007A78 EBEC                <1>     jmp short .drBufferLp
   448                              <1> .drExit:
   449 00007A7A E83AFEFFFF          <1>     call dosCrit1Exit
   450 00007A7F B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   451 00007A84 CD2F                <1>     int 2fh
   452                              <1>     return
    13                              <2> %%_ret:
    14 00007A86 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   453                              <1> 
   454                              <1> selectDisk:        ;ah = 0Eh
   455                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   456 00007A87 88D0                <1>     mov al, dl
   457 00007A89 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   458 00007A8B E8B1F9FFFF          <1>     call getCDSNotJoin  ;Must make sure provided drive is valid
   459 00007A90 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   460 00007A92 8805(31040000)      <1>     mov byte [currentDrv], al   ;Set drive as current
   461                              <1> .skipSettingCurrent:
   462 00007A98 0FB605(78000000)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   463                              <1>     return
    13                              <2> %%_ret:
    14 00007A9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   464                              <1> 
   465                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   466 00007AA0 8A05(31040000)      <1>     mov al, byte [currentDrv]
   467                              <1>     return
    13                              <2> %%_ret:
    14 00007AA6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   468                              <1> 
   469                              <1> FATinfoDefault:    ;ah = 1Bh
   470 00007AA7 30D2                <1>     xor dl, dl
   471                              <1> FATinfoDevice:     ;ah = 1Ch
   472                              <1> ;Input: dl = 1 based drive number
   473                              <1> ;Output:
   474                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   475                              <1> ;cx = bytes per sector
   476                              <1> ;edx = total number of clusters
   477                              <1> ;rbx = Ptr to media ID byte
   478 00007AA9 88D0                <1>     mov al, dl  ;Move drive number into al
   479 00007AAB E801FAFFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   480 00007AB0 7307                <1>     jnc .fidCDSFound
   481 00007AB2 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   482 00007AB7 EB2E                <1>     jmp short .error 
   483                              <1> .fidCDSFound:
   484 00007AB9 E8E6F8FFFF          <1>     call getDiskData
   485 00007ABE 7227                <1>     jc .error
   486                              <1> ;Now we have that:
   487                              <1> ;al = sectors per cluster
   488                              <1> ;ah = media ID byte
   489                              <1> ;ebx = total clusters
   490                              <1> ;cx = bytes per sector
   491                              <1> ;edx = number of available clusters
   492 00007AC0 E858F9FFFF          <1>     call getUserRegs
   493 00007AC5 8825(91070000)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   494 00007ACB 30E4                <1>     xor ah, ah
   495 00007ACD 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   496 00007AD0 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   497 00007AD4 488D1D(91070000)    <1>     lea rbx, mediaByte
   498 00007ADB 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   499 00007ADF 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   500                              <1> .badExit:
   501 00007AE3 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   502                              <1>     return
    13                              <2> %%_ret:
    14 00007AE6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   503                              <1> .error:
   504 00007AE7 E80EFEFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   505 00007AEC 66B8FFFF            <1>     mov ax, -1
   506 00007AF0 EBF1                <1>     jmp short .badExit
   507                              <1> 
   508                              <1> setIntVector:      ;ah = 25h
   509                              <1> ;Called with:
   510                              <1> ;   rdx = Pointer to interrupt handler
   511                              <1> ;   al = Interrupt number
   512 00007AF2 FA                  <1>     cli ;Halt interrupts
   513 00007AF3 0F010D(171A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
   514 00007AFA 0FB6C0              <1>     movzx eax, al
   515 00007AFD 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   516 00007B01 480305(191A0000)    <1>     add rax, qword [dosIdtPtr.base]    
   517 00007B08 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
   518 00007B0B 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
   519 00007B0F 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
   520 00007B13 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
   521 00007B17 895008              <1>     mov dword [rax + 8], edx
   522 00007B1A FB                  <1>     sti
   523                              <1>     return
    13                              <2> %%_ret:
    14 00007B1B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   524                              <1> 
   525                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   526 00007B1C 8805(D0030000)      <1>     mov byte [verifyFlag], al
   527 00007B22 8025(D0030000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   528                              <1>     return
    13                              <2> %%_ret:
    14 00007B29 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   529                              <1> getDOSversion:     ;ah = 30h
   530 00007B2A E8EEF8FFFF          <1>     call getUserRegs
   531 00007B2F 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   532 00007B31 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   533 00007B34 668B05C584FFFF      <1>     mov ax, word [dosVersion] ;Major and minor version in al,ah resp.
   534 00007B3B 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   535                              <1>     return
    13                              <2> %%_ret:
    14 00007B3E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   536                              <1> 
   537                              <1> setDOSversion:  ;Int 2Fh, AX=122Fh - Set DOS verstion to report
   538                              <1> ;Input: dx = Version number. Value of 0 means true value.
   539 00007B3F 6685D2              <1>     test dx, dx
   540 00007B42 750A                <1>     jnz .newVal
   541 00007B44 66C705B384FFFF0063  <1>     mov word [dosVersion], dosVerMac    ;Reset the value
   542                              <1>     return
    13                              <2> %%_ret:
    14 00007B4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   543                              <1> .newVal:
   544 00007B4E 668915AB84FFFF      <1>     mov word [dosVersion], dx    ;Store dx in the value to report.
   545                              <1>     return
    13                              <2> %%_ret:
    14 00007B55 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   546                              <1> 
   547                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   548                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 21h\ah=32h with dl=0
   549 00007B56 30D2                <1>     xor dl, dl
   550                              <1> getDeviceDPBptr:   ;ah = 32h
   551                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   552                              <1> ;On exit: rbx = DPB pointer
   553 00007B58 88D0                <1>     mov al, dl
   554 00007B5A E852F9FFFF          <1>     call getCDS
   555 00007B5F 722C                <1>     jc .bad
   556 00007B61 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   557 00007B68 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   558 00007B6E 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   559                              <1>     ;Here ONLY if accessing critical Disk data structures
   560 00007B70 E83AFDFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   561 00007B75 E86AF5FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   562 00007B7A E83AFDFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   563 00007B7F 720C                <1>     jc .bad
   564 00007B81 E897F8FFFF          <1>     call getUserRegs
   565 00007B86 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   566 00007B8A 30C0                <1>     xor al, al
   567                              <1>     return
    13                              <2> %%_ret:
    14 00007B8C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   568                              <1> .bad:
   569 00007B8D B0FF                <1>     mov al, -1
   570                              <1>     return
    13                              <2> %%_ret:
    14 00007B8F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   571                              <1> 
   572                              <1> getInDOSflagPtr:   ;ah = 34h
   573 00007B90 488D15(08040000)    <1>     lea rdx, inDOS
   574 00007B97 E881F8FFFF          <1>     call getUserRegs
   575 00007B9C 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   576                              <1>     return
    13                              <2> %%_ret:
    14 00007BA0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   577                              <1> 
   578                              <1> getIntVector:      ;ah = 35h
   579                              <1> ;Called with:
   580                              <1> ;   al = Interrupt Number
   581                              <1> ;Returns:
   582                              <1> ;   rbx = Pointer to interrupt handler
   583 00007BA1 E849F8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   584 00007BA6 E872F8FFFF          <1>     call getUserRegs
   585 00007BAB 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   586                              <1>     return
    13                              <2> %%_ret:
    14 00007BAF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   587                              <1> 
   588                              <1> getDiskFreeSpace:  ;ah = 36h
   589                              <1> ;Input: Drive number in dl (0 = Current)
   590                              <1> ;Output:    ax = sectors per cluster
   591                              <1> ;           ebx = number of free clusters
   592                              <1> ;           cx = bytes per sector
   593                              <1> ;           edx = total clusters on drive
   594 00007BB0 88D0                <1>     mov al, dl
   595 00007BB2 E8FAF8FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   596 00007BB7 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   597                              <1> ;Else, we at an error.
   598                              <1> ;Simply return with CY set and error code in al with extended error info
   599 00007BB9 B80F000000          <1>     mov eax, errBadDrv
   600 00007BBE E837FDFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   601                              <1>     ;extErrExit sets rsi to caller regs
   602 00007BC3 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   603                              <1>     return
    13                              <2> %%_ret:
    14 00007BC8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   604                              <1> .gdfsCDSFound:
   605 00007BC9 E8D6F7FFFF          <1>     call getDiskData
   606 00007BCE 7219                <1>     jc .error
   607                              <1> ;Now we have that:
   608                              <1> ;al = sectors per cluster
   609                              <1> ;ah = media ID byte
   610                              <1> ;ebx = total clusters
   611                              <1> ;cx = bytes per sector
   612                              <1> ;edx = number of available clusters
   613 00007BD0 E848F8FFFF          <1>     call getUserRegs
   614 00007BD5 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   615 00007BD7 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   616 00007BDA 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   617 00007BDE 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   618 00007BE1 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   619                              <1> .badExit:
   620 00007BE5 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   621                              <1>     return
    13                              <2> %%_ret:
    14 00007BE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   622                              <1> .error:
   623 00007BE9 E80CFDFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   624 00007BEE 66B8FFFF            <1>     mov ax, -1
   625 00007BF2 EBF1                <1>     jmp short .badExit
   626                              <1> 
   627                              <1> 
   628                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   629 00007BF4 31C0                <1>     xor eax, eax
   630 00007BF6 668705(2F040000)    <1>     xchg ax, word [errorLevel]
   631 00007BFD E9EAFCFFFF          <1>     jmp extGoodExit
   632                              <1> 
   633                              <1> getSysVarsPtr:     ;ah = 52h
   634 00007C02 488D15(3B000000)    <1>     lea rdx, sysVarsPtr
   635 00007C09 E80FF8FFFF          <1>     call getUserRegs
   636 00007C0E 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   637                              <1>     return
    13                              <2> %%_ret:
    14 00007C12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   638                              <1> 
   639                              <1> 
   640                              <1> ;AH = 53h - CREATE DPB
   641                              <1> createDPB:         ;generates a DPB from a given BPB
   642                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   643                              <1> ;This is done so that the other fields of the DPB can be recycled
   644                              <1> ;Input: rsi = ptr to the BPB
   645                              <1> ;       rbp = ptr to the DPB
   646                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   647                              <1> ;bMediaDescriptor
   648 00007C13 8A460A              <1>     mov al, byte [rsi + bpb.media]
   649 00007C16 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   650                              <1> ;dNextFreeClst
   651 00007C19 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1  ;Start is default (clust 2)
   652                              <1> ;dFreeClustCnt
   653 00007C20 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Start with unknown
   654                              <1> ;wBytesPerSector
   655 00007C27 0FB706              <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   656 00007C2A 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   657                              <1> ;bMaxSectorInCluster
   658 00007C2E 8A4602              <1>     mov al, byte [rsi + bpb.secPerClus]
   659 00007C31 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   660 00007C33 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   661                              <1> ;bSecPerClustShift
   662 00007C36 FEC0                <1>     inc al
   663 00007C38 31C9                <1>     xor ecx, ecx
   664                              <1> .cd2:
   665 00007C3A D0E8                <1>     shr al, 1
   666 00007C3C 7404                <1>     jz .cd3
   667 00007C3E FFC1                <1>     inc ecx
   668 00007C40 EBF8                <1>     jmp short .cd2
   669                              <1> .cd3:
   670 00007C42 884D05              <1>     mov byte [rbp + dpb.bSecPerClustShift], cl
   671                              <1> ;wFAToffset, number of reserved sectors in partition
   672 00007C45 668B4603            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   673 00007C49 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   674                              <1> ;bNumberOfFATs
   675 00007C4D 8A4605              <1>     mov al, byte [rsi + bpb.numFATs]
   676 00007C50 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   677                              <1> ;wNumberRootDirEntries
   678                              <1> ;Gets the number of 32 byte entries in the root directory
   679                              <1> ;Only valid for FAT 12/16
   680 00007C53 0FB74606            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   681 00007C57 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   682                              <1> ;dFATlength, get the FAT length
   683 00007C5B 0FB7460B            <1>     movzx eax, word [rsi + bpb.FATsz16]
   684 00007C5F 8B5E19              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   685 00007C62 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   686 00007C64 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   687 00007C67 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   688                              <1> ;Complex cases below...
   689                              <1> ;dClusterHeapOffset, start sector of the data area
   690 00007C6A 0FB7460B            <1>     movzx eax, word [rsi + bpb.FATsz16]
   691 00007C6E 8B5E19              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   692 00007C71 85C0                <1>     test eax, eax
   693 00007C73 0F44C3              <1>     cmovz eax, ebx
   694                              <1> ;eax = FATsz
   695 00007C76 0FB75E08            <1>     movzx ebx, word [rsi + bpb.totSec16]
   696 00007C7A 8B4E15              <1>     mov ecx, dword [rsi + bpb.totSec32]
   697 00007C7D 85DB                <1>     test ebx, ebx
   698 00007C7F 0F44D9              <1>     cmovz ebx, ecx 
   699                              <1> ;ebx = TotSec
   700 00007C82 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   701 00007C84 0FB64E05            <1>     movzx ecx, byte [rsi + bpb.numFATs]
   702 00007C88 67E306              <1>     jecxz .cd41
   703                              <1> .cd4:
   704 00007C8B 01C2                <1>     add edx, eax
   705 00007C8D FFC9                <1>     dec ecx
   706 00007C8F 75FA                <1>     jnz .cd4
   707                              <1> .cd41:
   708 00007C91 89D0                <1>     mov eax, edx    ;Store product in eax
   709 00007C93 0FB75603            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   710 00007C97 01D0                <1>     add eax, edx
   711                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   712 00007C99 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   713 00007C9D C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   714 00007CA0 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   715 00007CA4 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   716 00007CA5 89D0                <1>     mov eax, edx
   717 00007CA7 31D2                <1>     xor edx, edx
   718 00007CA9 F7F1                <1>     div ecx
   719 00007CAB 89C2                <1>     mov edx, eax
   720 00007CAD 58                  <1>     pop rax
   721 00007CAE 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   722                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   723                              <1>     ;aka eax = Start sector of the data area in volume
   724 00007CB0 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   725                              <1> ;dClusterCount
   726 00007CB3 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   727 00007CB5 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   728 00007CB7 31D2                <1>     xor edx, edx
   729 00007CB9 BB01000000          <1>     mov ebx, 1
   730 00007CBE 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSecPerClustShift]
   731 00007CC2 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   732 00007CC4 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   733 00007CC6 FFC0                <1>     inc eax ;Maximum valid cluster address is cluster count + 1
   734 00007CC8 89450F              <1>     mov dword [rbp + dpb.dMaxClusterAddr], eax    ;eax = Max cluster address
   735                              <1> ;dFirstUnitOfRootDir
   736 00007CCB 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   737 00007CD0 8B4621              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   738 00007CD3 7712                <1>     ja .cd5
   739                              <1>     ;Else, we need to find the first sector of the root directory
   740                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   741 00007CD5 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   742 00007CD9 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   743 00007CDD 67E307              <1>     jecxz .cd5
   744                              <1> .cd51:
   745 00007CE0 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   746 00007CE3 FFC9                <1>     dec ecx
   747 00007CE5 75F9                <1>     jnz .cd51
   748                              <1> .cd5:
   749 00007CE7 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   750 00007CEA C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   751 00007CEE E8DE91FFFF          <1>     call readFSInfoSector   ;If FAT32, updates free cluster data with FSinfo
   752                              <1> ;Exit epilogue
   753                              <1> .exit:
   754 00007CF3 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   755 00007CFA 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   756                              <1>     %if DEBUG && DPBINFO
   757                              <1>     ;Print DPB 
   758                              <1>     debugEnterM
   759                              <1>     push rbp
   760                              <1>     lea rbp, .l0000
   761                              <1>     call debPrintNullString
   762                              <1>     pop rbp
   763                              <1>     call debDPBBPBptr
   764                              <1>     ;call debMakeDebuggerRespond
   765                              <1>     jmp short .l0001
   766                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   767                              <1> .l0001:
   768                              <1>     debugExitM
   769                              <1>     %endif
   770                              <1>     return
    13                              <2> %%_ret:
    14 00007CFC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   771                              <1> 
   772                              <1> getVerifySetting:  ;ah = 54h
   773 00007CFD 8A05(D0030000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   774                              <1>     return
    13                              <2> %%_ret:
    14 00007D03 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   775                              <1> 
   776                              <1> getExtendedError:  ;ah = 59h
   777 00007D04 E814F7FFFF          <1>     call getUserRegs
   778 00007D09 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   779 00007D10 8A2D(0A040000)      <1>     mov ch, byte [errorLocus]
   780 00007D16 8A3D(0E040000)      <1>     mov bh, byte [errorClass]
   781 00007D1C 8A1D(0D040000)      <1>     mov bl, byte [errorAction]
   782 00007D22 488B3D(0F040000)    <1>     mov rdi, qword [errorVolLbl]
   783 00007D29 668906              <1>     mov word [rsi + callerFrame.rax], ax
   784 00007D2C 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   785 00007D30 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   786 00007D33 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi
   787                              <1> noOp:
   788                              <1>     return
    13                              <2> %%_ret:
    14 00007D37 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   789                              <1> 
   790                              <1> systemServices: ;ah = 61h
   791                              <1> ;al = 0 -> Get Environment pointer in rdx
   792                              <1> ;   Output: rdx -> Environment Pointer. May be a null pointer. Caller checks!
   793                              <1> ;al = 1 -> Get Command Line Arguments Pointer in rdx
   794                              <1> ;   Output: rdx -> Pointer to whatever was passed as a CR terminated 
   795                              <1> ;                   command line.
   796                              <1> ;al = 2 -> Get ptr to ASCIIZ name for program in rdx. Might not be FQ.
   797                              <1> ;   Output: CF=NC: rdx -> Filename 
   798                              <1> ;           CF=CY: eax = Error code (errAccDen) if no filename ptr.
   799                              <1> ;                   The error case should only happen for special
   800                              <1> ;                   programs that are launched without an environment
   801                              <1> ;                   as DOS has nowhere to put the filename string.
   802                              <1> ;al > 2: Returns CF=CY and eax = Error code (errInvFnc).
   803 00007D38 3C01                <1>     cmp al, 1
   804 00007D3A 7415                <1>     je .getCmdLineArgs
   805 00007D3C 3C02                <1>     cmp al, 2
   806 00007D3E 761E                <1>     jbe .getEnvPtr
   807 00007D40 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk  
   808 00007D47 B801000000          <1>     mov eax, errInvFnc  ;Error, with invalid function number error
   809                              <1> .exitBad:
   810 00007D4C E9A9FBFFFF          <1>     jmp extErrExit
   811                              <1> .getCmdLineArgs:
   812 00007D51 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   813 00007D58 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   814 00007D5C EB53                <1>     jmp short .gepExitOk
   815                              <1> .getEnvPtr:
   816                              <1> ;Gets the environment pointer in rdx
   817 00007D5E 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   818 00007D65 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environment pointer
   819 00007D69 84C0                <1>     test al, al     ;Was al=0?
   820 00007D6B 7444                <1>     jz .gepExitOk   ;Exit if al = 0 since we have the pointer we need!
   821 00007D6D 4885D2              <1>     test rdx, rdx   ;Check if the env pointer is ok to use
   822 00007D70 7420                <1>     jz .gepFail
   823 00007D72 4881FAFFFFFFFF      <1>     cmp rdx, -1
   824 00007D79 7417                <1>     je .gepFail
   825                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   826                              <1> ; pass the ptr to the word after.
   827 00007D7B 51                  <1>     push rcx
   828 00007D7C 31C9                <1>     xor ecx, ecx
   829 00007D7E B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   830                              <1> .gep0:
   831 00007D83 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   832 00007D88 7411                <1>     je short .gep1
   833 00007D8A 48FFC2              <1>     inc rdx         ;Go to the next byte
   834 00007D8D FFC9                <1>     dec ecx
   835 00007D8F 75F2                <1>     jnz short .gep0
   836                              <1> .gep00:
   837                              <1> ;Failure here if we haven't hit the double null by the end of 32Kb
   838 00007D91 59                  <1>     pop rcx
   839                              <1> .gepFail:
   840 00007D92 31D2                <1>     xor edx, edx        ;Turn it into null pointer
   841 00007D94 B805000000          <1>     mov eax, errAccDen  ;Set error code here
   842 00007D99 EBB1                <1>     jmp short .exitBad  ;Return setting CF=CY and errAccDen (no pointer)
   843                              <1> .gep1:
   844 00007D9B 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   845 00007DA2 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   846 00007DA7 75E8                <1>     jne .gep00
   847 00007DA9 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word.
   848 00007DB0 59                  <1>     pop rcx
   849                              <1> .gepExitOk:
   850 00007DB1 E867F6FFFF          <1>     call getUserRegs
   851 00007DB6 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   852 00007DBA E92DFBFFFF          <1>     jmp extGoodExit
   853                              <1> 
   854                              <1> getsetDiskSerial:  ;ah = 69h, get/set disk serial number
   855                              <1> ;Wraps the generic disk IO call to get/set the disk serial number and
   856                              <1> ; associated information.
   857                              <1> ;Input:
   858                              <1> ;   al = 0: Get disk serial number
   859                              <1> ;   al = 1: Set disk serial number
   860                              <1> ;   ebx = 1-based drive number
   861                              <1> ;   rdx -> Pointer to an ID parameter block
   862 00007DBF 0FB6C0              <1>     movzx eax, al
   863 00007DC2 B966080000          <1>     mov ecx, 0866h  ;Get Disk Serial Packet major/minor codes
   864 00007DC7 85C0                <1>     test eax, eax
   865 00007DC9 7417                <1>     jz .doIoctl
   866 00007DCB 81E920000000        <1>     sub ecx, 20h    ;Turn Get major/minor codes into a Set
   867 00007DD1 3D01000000          <1>     cmp eax, 1      ;Is this a set?
   868 00007DD6 740A                <1>     je .doIoctl
   869 00007DD8 B801000000          <1>     mov eax, errInvFnc  ;Else, return error, invalid function!
   870 00007DDD E918FBFFFF          <1>     jmp extErrExit
   871                              <1> .doIoctl:
   872 00007DE2 B80D000000          <1>     mov eax, 0Dh    ;Do block dev Generic IOCTL call
   873 00007DE7 E8CAD4FFFF          <1>     call ioctrl     ;Sets up the return state internally
   874                              <1>     return          ; so just return normally
    13                              <2> %%_ret:
    14 00007DEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                                  %include "./src/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 00007DED 3C07                <1>     cmp al, 07h
     8 00007DEF 7204                <1>     jb .skip
     9 00007DF1 3C09                <1>     cmp al, 09h
    10 00007DF3 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 00007DF5 4889D6              <1>     mov rsi, rdx
    13 00007DF8 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 00007DFC 66891D(43040000)    <1>     mov word [machineNum], bx
    15 00007E03 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 00007E07 48891D(3B040000)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 00007E0E 488D1D22FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 00007E15 53                  <1>     push rbx
    20 00007E16 488B1D(E2190000)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 00007E1D 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 00007E1E 50                  <1>     push rax    ;Push al onto stack as a qword
    23 00007E1F E854010000          <1>     call serverFunctionSelect
    24 00007E24 B801000000          <1>     mov eax, eLocUnk
    25 00007E29 8805(0A040000)      <1>     mov byte [errorLocus], al
    26 00007E2F E9C6FAFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 00007E34 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 00007E35 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 00007E36 5F                  <1>     pop rdi
    33 00007E37 E8E1F5FFFF          <1>     call getUserRegs
    34 00007E3C 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 00007E3F 56                  <1>     push rsi
    36 00007E40 B906000000          <1>     mov ecx, 6
    37 00007E45 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 00007E48 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 00007E4F 48A5                <1>     movsq   ;Transfer r8...
    40 00007E51 48A5                <1>     movsq   ;... and r9
    41 00007E53 5E                  <1>     pop rsi
    42 00007E54 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 00007E57 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 00007E5B 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 00007E5F 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 00007E63 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 00007E67 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 00007E6B 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 00007E6F 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 00007E73 48891D(83040000)    <1>     mov qword [oldRBX], rbx
    51 00007E7A C605(02070000)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 00007E81 E915F9FFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CDh 20h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 00007E86 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 00007E8D 66813BCD20          <1>     cmp word [rbx], 20CDh
    61 00007E92 740A                <1>     je .validTask
    62 00007E94 B805000000          <1>     mov eax, errAccDen
    63 00007E99 E95CFAFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 00007E9E 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 00007EA0 E80AFAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 00007EA5 53                  <1>     push rbx
    70 00007EA6 E886D3FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 00007EAB 7225                <1>     jc .exit
    72 00007EAD 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 00007EB2 7419                <1>     je .gotoNextFile
    74 00007EB4 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 00007EB9 7412                <1>     je .gotoNextFile
    76 00007EBB 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedir  ;Dont commit redirs
    77 00007EC1 750A                <1>     jnz .gotoNextFile
    78 00007EC3 E8A5D1FFFF          <1>     call setCurrentSFT ;Set this as the current SFT
    79 00007EC8 E89DBFFFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 00007ECD 5B                  <1>     pop rbx
    83 00007ECE FFC3                <1>     inc ebx
    84 00007ED0 EBD3                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 00007ED2 E8E2F9FFFF          <1>     call dosCrit1Exit
    87 00007ED7 5B                  <1>     pop rbx ;Align stack
    88 00007ED8 E90FFAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 00007EDD FF15(E7000000)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 00007EE3 0F8211FAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 00007EE9 E9FEF9FFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 00007EEE FF15(D7000000)      <1>     call qword [closeCompShare]
   100 00007EF4 EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 00007EF6 FF15(DF000000)      <1>     call qword [closeTaskShare]
   104 00007EFC EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 00007EFE FF15(07010000)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 00007F04 72DD                <1>     jc closeFilesByName.shareExitBad
   109 00007F06 E812F5FFFF          <1>     call getUserRegs
   110 00007F0B 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 00007F0F 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 00007F13 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 00007F17 EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 00007F19 488D3D(07040000)    <1>     lea rdi, sda
   124 00007F20 48B9DB150000000000- <1>     mov rcx, sdaLen
   124 00007F29 00                  <1>
   125 00007F2A 48BA2C000000000000- <1>     mov rdx, sdaLen - sdaDOSLen ;Get the difference
   125 00007F33 00                  <1>
   126 00007F34 E8E4F4FFFF          <1>     call getUserRegs
   127 00007F39 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 00007F3D 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 00007F41 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 00007F43 50                  <1>     push rax
   133 00007F44 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 00007F49 CD2F                <1>     int 2Fh
   135 00007F4B 5B                  <1>     pop rbx
   136 00007F4C 7295                <1>     jc short closeFilesByName.shareExitBad
   137 00007F4E EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 00007F50 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 00007F52 668905(0B040000)    <1>     mov word [errorExCde], ax
   144 00007F59 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Set the volume label pointer var
   145 00007F5D 488905(0F040000)    <1>     mov qword [errorVolLbl], rax
   146 00007F64 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 00007F67 668905(0D040000)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 00007F6E 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 00007F71 8825(0A040000)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 00007F77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 00007F78 55                  <1>     push rbp
   156 00007F79 4889E5              <1>     mov rbp, rsp
   157 00007F7C 53                  <1>     push rbx
   158 00007F7D 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 00007F81 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 00007F84 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 00007F87 7621                <1>     jbe short .argumentTooBig
   162 00007F89 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx
   163 00007F8D D1E3                <1>     shl ebx, 1  ;Convert to word offset
   164 00007F8F FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 00007F91 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   166 00007F95 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   167 00007F98 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   168 00007F9C 48895D20            <1>     mov qword [rbp + 4*8], rbx  ;Store this address as the return address
   169 00007FA0 5B                  <1>     pop rbx
   170 00007FA1 5D                  <1>     pop rbp
   171 00007FA2 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   172                              <1>     return
    13                              <2> %%_ret:
    14 00007FA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> .argumentTooBig:
   174 00007FAA 5B                  <1>     pop rbx
   175 00007FAB 5D                  <1>     pop rbp
   176 00007FAC C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   177                              <1> 
   178                              <1> netServices:   ;ah = 5Eh, do nothing
   179                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   180 00007FAF 3C01                <1>     cmp al, 01
   181 00007FB1 7214                <1>     jb .getName
   182 00007FB3 7437                <1>     jz .setName
   183 00007FB5 3C06                <1>     cmp al, 6
   184 00007FB7 724C                <1>     jb .netRedir
   185 00007FB9 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   186 00007FC0 B001                <1>     mov al, errInvFnc
   187                              <1> .badExit:
   188 00007FC2 E933F9FFFF          <1>     jmp extErrExit
   189                              <1> .getName:
   190                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   191                              <1> ;Output: CF=NC => Success.
   192                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   193                              <1> ;        CL = NetBIOS number for the machine
   194                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   195                              <1> ;        CF=CY => Failure
   196                              <1> ;        AX = Errorcode
   197 00007FC7 4889D7              <1>     mov rdi, rdx
   198 00007FCA 0FB70D(1D000000)    <1>     movzx ecx, word [validNetNam]
   199 00007FD1 E847F4FFFF          <1>     call getUserRegs
   200 00007FD6 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   201 00007FDA 488D35(D6030000)    <1>     lea rsi, machineName
   202                              <1> .nameCmn:
   203 00007FE1 31C0                <1>     xor eax, eax
   204 00007FE3 48A5                <1>     movsq
   205 00007FE5 A5                  <1>     movsd
   206 00007FE6 66A5                <1>     movsw
   207 00007FE8 A4                  <1>     movsb
   208 00007FE9 AA                  <1>     stosb   ;Store terminating null
   209 00007FEA EB24                <1>     jmp short .exitGood
   210                              <1> .setName:
   211                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   212                              <1> ;       CH = 0 => Mark name as invalid
   213                              <1> ;         != 0 => Mark name as valid
   214                              <1> ;       CL = NetBIOS number for the name
   215 00007FEC 66890D(1D000000)    <1>     mov word [validNetNam], cx
   216 00007FF3 4889D6              <1>     mov rsi, rdx
   217 00007FF6 FE05(D5030000)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   218 00007FFC 488D3D(D6030000)    <1>     lea rdi, machineName
   219 00008003 EBDC                <1>     jmp short .nameCmn
   220                              <1> 
   221                              <1> .netRedir:
   222 00008005 50                  <1>     push rax
   223 00008006 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   224 0000800B CD2F                <1>     int 2Fh
   225 0000800D 5A                  <1>     pop rdx
   226 0000800E 72B2                <1>     jc .badExit
   227                              <1> .exitGood:
   228 00008010 E9D7F8FFFF          <1>     jmp extGoodExit
   229                              <1> 
   230                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   231                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   232 00008015 80FC07              <1>     cmp ah, 07h
   233 00008018 7419                <1>     je .driveAction
   234 0000801A 80FC08              <1>     cmp ah, 08h
   235 0000801D 7414                <1>     je .driveAction
   236                              <1>     ;Else, use redirector to process request
   237 0000801F 50                  <1>     push rax
   238 00008020 B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   239 00008025 CD2F                <1>     int 2Fh
   240 00008027 5B                  <1>     pop rbx
   241                              <1> .badExit:
   242 00008028 0F82CCF8FFFF        <1>     jc extErrExit
   243                              <1> .goodExit:
   244 0000802E E9B9F8FFFF          <1>     jmp extGoodExit
   245                              <1> .driveAction:
   246                              <1> ;dl must have valid 0-based drive number
   247 00008033 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   248 00008035 E8D2F4FFFF          <1>     call getCDSforDrive
   249 0000803A 72EC                <1>     jc short .badExit
   250                              <1>     ;rsi points to CDS
   251 0000803C 80EA07              <1>     sub dl, 7
   252 0000803F 7408                <1>     jz .enable
   253 00008041 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   254 00008047 EBE5                <1>     jmp short .goodExit
   255                              <1> .enable:
   256 00008049 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   257 0000804F EBDD                <1>     jmp short .goodExit
    55                                  %include "./src/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer and install check for other DOS multiplex functions.
     2                              <1> ;Mainly to handle the DOS multiplexer, i.e. ah=12h. Three other 
     3                              <1> ; cases also handled as outlined below.
     4                              <1> ;------------------------------------------------------------------------
     5                              <1> ;Handle ah = 10h,11h,14h install check requests only (al=0).
     6                              <1> ; If al <> 0, return error, set CF and al = 1.
     7                              <1> ; For reference:
     8                              <1> ; ah = 10h, (SHARE)
     9                              <1> ;           Return: al = 0, not installed, ok to install
    10                              <1> ;                   al = 1, not installed, not ok to install
    11                              <1> ;                   al = -1, installed.
    12                              <1> ; ah = 11h, (REDIR)
    13                              <1> ; ah = 14h, (NLS)
    14                              <1> ;Any other value of ah simply falls through the IRETQ
    15                              <1> ;------------------------------------------------------------------------
    16                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    17                              <1> ; stack before the interrupt is called. This word is always read from the
    18                              <1> ; stack, but the stack is not rejiggled to remove it.
    19                              <1> 
    20                              <1> multiplexHdlr:          ;Int 2Fh, AH=12h, exposed internal functions
    21 00008051 80FC10              <1>     cmp ah, 10h ;Are we share?
    22 00008054 7411                <1>     je .installCheck
    23 00008056 80FC11              <1>     cmp ah, 11h ;Are we redir?
    24 00008059 740C                <1>     je .installCheck
    25 0000805B 80FC12              <1>     cmp ah, 12h
    26 0000805E 741E                <1>     je .goMplx
    27 00008060 80FC14              <1>     cmp ah, 14h ;Are we NLS?
    28 00008063 7402                <1>     je .installCheck
    29 00008065 48CF                <1>     iretq
    30                              <1> 
    31                              <1> .installCheck:
    32                              <1> ;Here if a share, redir or NLS request.
    33                              <1> ;All of these should be installed over us if installed.
    34                              <1> ;Thus we are not installed. Return not installed, if that is what the 
    35                              <1> ;request wants. (AL=0)
    36                              <1> ;If anything else requested, return error.
    37 00008067 84C0                <1>     test al, al
    38 00008069 7411                <1>     jz .exit
    39                              <1> .exitBad:
    40 0000806B B801000000          <1>     mov eax, errInvFnc
    41 00008070 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    42 00008077 804C241001          <1>     or byte [rsp + 8h*2], 1 ;Set CF
    43                              <1> .exit:
    44 0000807C 48CF                <1>     iretq
    45                              <1> 
    46                              <1> .goMplx:
    47 0000807E 3C30                <1>     cmp al, mDispTblL / 2
    48 00008080 73E9                <1>     jae .exitBad   ;If above or equal, exit
    49                              <1>     ;Rejiggle stack! 
    50                              <1> 
    51 00008082 53                  <1>     push rbx    ;Storage for return from DOS ret addr
    52 00008083 53                  <1>     push rbx    ;Storage for DOS function
    53 00008084 53                  <1>     push rbx    ;Stores rbx value
    54 00008085 488D1D2E000000      <1>     lea rbx, .retAddr
    55 0000808C 48895C2410          <1>     mov qword [rsp + 2*8], rbx    ;Store ret addr from DOS routine
    56                              <1> 
    57 00008091 51                  <1>     push rcx
    58 00008092 488D1DA885FFFF      <1>     lea rbx, qword mDispTbl   ;Get mplx displacement tbl
    59 00008099 53                  <1>     push rbx
    60 0000809A 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    61 0000809D D1E1                <1>     shl ecx, 1   ;multiply by 2
    62 0000809F 48FFC3              <1>     inc rbx         ;Go past the first byte (length count)
    63 000080A2 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    64 000080A6 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    65 000080A7 4801CB              <1>     add rbx, rcx
    66 000080AA 59                  <1>     pop rcx
    67 000080AB 48895C2408          <1>     mov qword [rsp + 8], rbx
    68 000080B0 5B                  <1>     pop rbx
    69 000080B1 488B442428          <1>     mov rax, qword [rsp + 5*8]  ;Get the old stack pointer from the frame
    70 000080B6 488B00              <1>     mov rax, qword [rax]        ;Get the argument we pushed on the stack
    71                              <1>     return  ;Now we have no alignement requirements :D 
    13                              <2> %%_ret:
    14 000080B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    72                              <1> 
    73                              <1> .retAddr:
    74 000080BA 53                  <1>     push rbx
    75 000080BB 9C                  <1>     pushfq
    76 000080BC 5B                  <1>     pop rbx
    77 000080BD 48895C2418          <1>     mov qword [rsp + 3*8], rbx
    78 000080C2 5B                  <1>     pop rbx
    79 000080C3 48CF                <1>     iretq
    80                              <1> 
    81                              <1> multiplexTest:
    82 000080C5 B0FF                <1>     mov al, -1
    83 000080C7 C3                  <1>     ret
    84                              <1> 
    85                              <1> getDosDataSeg:  ;Int 2Fh, AX=1203h
    86                              <1> ;Return: r8 = Dos Data Segment Pointer
    87 000080C8 4C8D05(10000000)    <1>     lea r8, dosDataArea
    88                              <1>     return
    13                              <2> %%_ret:
    14 000080CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    89                              <1> 
    90                              <1> mpxOpen:   ;Int 2Fh, AX=1226h, Open File
    91                              <1> ;Input: cl = open mode
    92                              <1> ;       rdx -> Ptr to filename to open
    93                              <1> ;Output: ax = Error code/handle with CF indicating failure/success
    94 000080D0 88C8                <1>     mov al, cl
    95 000080D2 E840B5FFFF          <1>     call openFileHdl
    96                              <1>     return
    13                              <2> %%_ret:
    14 000080D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    97                              <1> 
    98                              <1> mpxLseek:  ;Int 2Fh, AX=1228h, LSEEK
    99                              <1> ;Input:  
   100                              <1> ;   ebp = Low byte contains subfunction, in normal EP is provided by al
   101                              <1> ;   ebx = Handle to move (lower word only)
   102                              <1> ;   ecx = Number of bytes to move
   103                              <1> ;   edx = 0 (upper dword, reserved for now)
   104                              <1> ;Return:
   105                              <1> ;   eax = New pointer location
   106                              <1> ;   edx = 0
   107 000080D8 FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   108 000080DE 488D05(211A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   109 000080E5 488905(7B040000)    <1>     mov qword [oldRSP], rax
   110 000080EC 89E8                <1>     mov eax, ebp
   111 000080EE E850B7FFFF          <1>     call lseekHdl   ;Sets the values of our registers by how it exits
   112 000080F3 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   113                              <1>     return
    13                              <2> %%_ret:
    14 000080F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> mpxIOCTL:  ;Int 2Fh, AX=122Bh
   116                              <1> ;IO is done exactly as documented by DOS except al is passed in 
   117                              <1> ; low byte of bp.
   118 000080FA FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   119 00008100 488D05(211A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   120 00008107 488905(7B040000)    <1>     mov qword [oldRSP], rax
   121 0000810E 89E8                <1>     mov eax, ebp
   122 00008110 E8A1D1FFFF          <1>     call ioctrl   ;Sets the values of our registers by how it exits
   123 00008115 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   124                              <1>     return  
    13                              <2> %%_ret:
    14 0000811B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> mpxChecksum:
   127                              <1> ;Computes the checksum of a number of bytes in memory
   128                              <1> ;Input: edx = Start value for checksum
   129                              <1> ;       ecx = number of bytes to sum
   130                              <1> ;       rsi -> Ptr to byte array to perform sum on
   131 0000811C 31C0                <1>     xor eax, eax
   132 0000811E 67E307              <1>     jecxz .exit
   133                              <1> .lp:
   134 00008121 AC                  <1>     lodsb
   135 00008122 01C2                <1>     add edx, eax
   136 00008124 FFC9                <1>     dec ecx
   137 00008126 75F9                <1>     jnz .lp
   138                              <1> .exit:
   139                              <1>     return
    13                              <2> %%_ret:
    14 00008128 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   140                              <1> mpxSum: ;Could use in readDateTimeRecord (two places)
   141                              <1> ;Sums the values in a number of bytes in memory
   142                              <1> ;Input: rsi -> Byte array to sum values of
   143                              <1> ;       edx = Value limit (for the sum)
   144                              <1> ;       ecx = 0
   145 00008129 31C0                <1>     xor eax, eax
   146                              <1> .lp:
   147 0000812B AC                  <1>     lodsb
   148 0000812C 39C2                <1>     cmp edx, eax
   149                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000812E 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00008130 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   150 00008131 29C2                <1>     sub edx, eax
   151 00008133 FFC1                <1>     inc ecx
   152 00008135 EBF4                <1>     jmp short .lp
    56                                  %include "./src/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 00008137 B801000000          <1>     mov eax, errInvFnc
     6 0000813C 668905(0B040000)    <1>     mov word [errorExCde], ax
     7 00008143 F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 00008144 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 00008145 E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 0000814A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 0000814B F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 0000814C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 0000814D FF15(C7000000)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 00008153 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 00008154 FF15(CF000000)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 0000815A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 0000815B 0FB71D(1F000000)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 00008162 53                  <1>     push rbx
    34 00008163 FF15(FF000000)      <1>     call qword [checkFileLockShare]
    35 00008169 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000816A 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000816C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    37 0000816D E806000000          <1>     call shareRetryCountdown
    38 00008172 FFCB                <1>     dec ebx
    39 00008174 75EC                <1>     jnz .mainLoop
    40 00008176 F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 00008177 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 00008178 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000817F 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00008181 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    48 00008182 51                  <1>     push rcx
    49 00008183 0FB70D(21000000)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 0000818A 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 0000818D 51                  <1>     push rcx
    53 0000818E 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 00008190 66FFC9              <1>     dec cx
    56 00008193 75FB                <1>     jnz .mainLoop
    57 00008195 59                  <1>     pop rcx
    58 00008196 FFC9                <1>     dec ecx
    59 00008198 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 0000819A 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 0000819B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 0000819C 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB
    67 000081A2 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 000081A4 50                  <1>     push rax
    69 000081A5 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 000081A9 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 000081AE 58                  <1>     pop rax
    72 000081AF 7508                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 000081B1 E870000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000081B6 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000081B8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    76                              <1> .notInCompatMode:
    77 000081B9 B820000000          <1>     mov eax, errShrVio
    78 000081BE F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 000081BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resources within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87                              <1> ;Output: rdi -> Current SFT!!
    88 000081C0 51                  <1>     push rcx
    89                              <1> .reloadCounter:
    90 000081C1 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    91                              <1> .keepLooping:
    92 000081C8 E8A8CEFFFF          <1>     call getCurrentSFT
    93 000081CD 31C0                <1>     xor eax, eax
    94 000081CF 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    95 000081D5 51                  <1>     push rcx
    96 000081D6 E872FFFFFF          <1>     call openShareCallWrapper
    97 000081DB 59                  <1>     pop rcx
    98 000081DC 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    99 000081DE E895FFFFFF          <1>     call shareRetryCountdown
   100 000081E3 FFC9                <1>     dec ecx
   101 000081E5 75E1                <1>     jnz .keepLooping
   102 000081E7 E842000000          <1>     call shareCriticalError
   103 000081EC 73D3                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   104                              <1> .exit:
   105 000081EE 59                  <1>     pop rcx
   106                              <1>     return
    13                              <2> %%_ret:
    14 000081EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> 
   108                              <1> shareCheckWriteLockViolation:
   109 000081F0 C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   110 000081F7 EB07                <1>     jmp short shareCheckReadLockViolation.common
   111                              <1> shareCheckReadLockViolation:
   112 000081F9 C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   113                              <1> .common:
   114                              <1> ;Input:
   115                              <1> ;rdi -> SFT for the file we are reading
   116 00008200 66F747020080        <1>     test word [rdi + sft.wOpenMode], openSFTFCB
   117 00008206 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   118 00008208 50                  <1>     push rax
   119 00008209 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   120 0000820D 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   121 00008212 58                  <1>     pop rax
   122 00008213 7508                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   123                              <1> .fcbQuirk:
   124 00008215 E80C000000          <1>     call shareLockViolationCriticalError
   125                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000821A 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000821C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   126                              <1> .notInCompatMode:
   127 0000821D 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   128 0000821F B821000000          <1>     mov eax, errLokVio
   129 00008224 F9                  <1>     stc ;Set the flag for error
   130                              <1>     return
    13                              <2> %%_ret:
    14 00008225 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> shareLockViolationCriticalError:
   133                              <1> ;This does NOT force rwFlag to 0 and signals a lock violation
   134 00008226 57                  <1>     push rdi
   135 00008227 B821000000          <1>     mov eax, errLokVio
   136 0000822C EB08                <1>     jmp short shareCriticalError.common
   137                              <1> shareCriticalError: ;Int 2Fh AX=120Ah
   138                              <1> ;Used for share Read requests
   139                              <1> ;Input: eax = Error code
   140 0000822E 57                  <1>     push rdi
   141 0000822F C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Default to read
   142                              <1> .common:
   143 00008236 C605(68040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   144 0000823D 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] 
   145 00008244 31FF                <1>     xor edi, edi   ;Indicate that this was due to share
   146 00008246 E80CE7FFFF          <1>     call diskDevErr
   147 0000824B 5F                  <1>     pop rdi
   148 0000824C 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   149                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000824E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00008250 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   150 00008251 F9                  <1>     stc
   151                              <1>     return
    13                              <2> %%_ret:
    14 00008252 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    57                                  
    58                                  ;=========================END OF DOS MODULE==========================
    58          ------------------       info: assembly required 1+16+2 passes

