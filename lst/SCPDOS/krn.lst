     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro breakpoint 0
    81                              <1> xchg bx, bx
    82                              <1> %endmacro
     5                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr resq 1  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib resw 1  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr resq 1  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr resq 1  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam resb 8  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16  ;Not implemented
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn    equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut   equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev   equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut  equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL    equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL   equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvIOCTLRW  equ 4000h ;If set, IOCTL Read/Write supported
    70                              <1>     devDrvChar     equ 8000h ;If set, Char device
    71                              <1> ;Bit 0 1=console input
    72                              <1> ;    1 1=console output (character devices)
    73                              <1> ;    2 1=NUL device
    74                              <1> ;    3 1=CLOCK device
    75                              <1> ;    4 1=Int 29 output (CON)
    76                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    77                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    78                              <1> ;   11 1=open/close/removable media supported (3.0+)
    79                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    80                              <1> ;      1=media descriptor in FAT required (block devices)
    81                              <1> ;   14 1=IOCTL supported
    82                              <1> ;   15 0=block device
    83                              <1> ;      1=character device
    84                              <1> 
    85                              <1> ;Driver structures
    86                              <1> 
    87                              <1> %macro drvReqHdrM 0 ;Driver Request Header Macro
    88                              <1> 
    89                              <1>     .hdrlen resb 1  ;Length of the request header
    90                              <1>     .unitnm resb 1  ;Unit number, meaningless for character devs
    91                              <1>     .cmdcde resb 1  ;Command code
    92                              <1>     .status resw 1  ;Status word
    93                              <1>     .devptr resq 1  ;Device queue pointer field, reserved for future use
    94                              <1> 
    95                              <1> %endmacro
    96                              <1> 
    97                              <1> struc drvReqHdr
    98                              <1>     drvReqHdrM
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
    99                              <1> endstruc
   100                              <1> 
   101                              <1> struc initReqPkt  ;Init Request Packet
   102                              <1> 
   103                              <1>     drvReqHdrM   ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   104 0000000D ??                  <1>     .numunt resb 1  ;Number of logical units (Block only, 0 for char)
   105 0000000E ????????????????    <1>     .endptr resq 1  ;Pointer to first free byte after driver
   106 00000016 ????????????????    <1>     .optptr resq 1  ;Ptr to BPB array (blkdev) or cmdline args
   107 0000001E ??                  <1>     .drvnum resb 1  ;First Drive number
   108                              <1> 
   109                              <1> endstruc
   110                              <1> 
   111                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   112                              <1> 
   113                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   114 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   115 0000000E ??                  <1>     .medret resb 1  ;Return byte (Has media been changed?)
   116 0000000F ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field
   117                              <1> 
   118                              <1> endstruc
   119                              <1> 
   120                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   121                              <1> 
   122                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   123 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   124 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   125 00000016 ????????????????    <1>     .bpbptr resq 1  ;Pointer to the BPB
   126                              <1> 
   127                              <1> endstruc
   128                              <1> 
   129                              <1> struc ioReqPkt   ;IO Request Packet
   130                              <1> 
   131                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   132 0000000D ??                  <1>     .medesc resb 1  ;DOS media descriptor
   133 0000000E ????????????????    <1>     .bufptr resq 1  ;Transfer buffer
   134 00000016 ????????            <1>     .tfrlen resd 1  ;Number of Sectors/bytes to transfer
   135 0000001A ????????????????    <1>     .strtsc resq 1  ;Starting sector for transfer
   136 00000022 ????????????????    <1>     .desptr resq 1  ;Pointer to a valid volume id field if error
   137                              <1> 
   138                              <1> endstruc
   139                              <1> 
   140                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   141                              <1>     
   142                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   143 0000000D ??                  <1>     .retbyt resb 1  ;Byte read non destructively
   144                              <1> 
   145                              <1> endstruc
   146                              <1> 
   147                              <1> struc statusReqPkt   ;Status Request Packet
   148                              <1> 
   149                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   150                              <1> 
   151                              <1> endstruc
   152                              <1> 
   153                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   154                              <1> 
   155                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   156                              <1>      
   157                              <1> endstruc
   158                              <1> 
   159                              <1> struc openReqPkt ;Open Device Request Packet
   160                              <1> 
   161                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   162                              <1>      
   163                              <1> endstruc
   164                              <1> 
   165                              <1> struc closeReqPkt ;Close Device Request Packet
   166                              <1> 
   167                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   168                              <1>      
   169                              <1> endstruc
   170                              <1> 
   171                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   172                              <1> 
   173                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   174                              <1>      
   175                              <1> endstruc
   176                              <1> 
   177                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   178                              <1> 
   179                              <1>     drvReqHdrM    ;Common Driver Header Macro  
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   180 0000000D ??                  <1>     .majfun resb 1  ;Major function number
   181 0000000E ??                  <1>     .minfun resb 1  ;Minor function number
   182 0000000F ????????????????    <1>     .rsival resq 1  ;Contents of RSI
   183 00000017 ????????????????    <1>     .rdival resq 1  ;Contents of RDI
   184 0000001F ????????????????    <1>     .ctlptr resq 1  ;Pointer to Generic IOCTL Request Packet
   185                              <1> 
   186                              <1> endstruc
   187                              <1> 
   188                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   189                              <1>     
   190                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   191                              <1> 
   192                              <1> endstruc
   193                              <1> 
   194                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   195                              <1>     
   196                              <1>     drvReqHdrM    ;Common Driver Header Macro
    88                              <2> 
    89 00000000 ??                  <2>  .hdrlen resb 1
    90 00000001 ??                  <2>  .unitnm resb 1
    91 00000002 ??                  <2>  .cmdcde resb 1
    92 00000003 ????                <2>  .status resw 1
    93 00000005 ????????????????    <2>  .devptr resq 1
    94                              <2> 
   197                              <1> 
   198                              <1> endstruc
   199                              <1> 
   200                              <1> 
   201                              <1> struc genioctlGetParamsTable
   202 00000000 ??                  <1>     .size           resb 1
   203 00000001 ??????????????      <1>     .res            resb 7
   204 00000008 ????????????????    <1>     .sectorSize     resb 8  ;Only the lower dword is valid here
   205 00000010 ????????????????    <1>     .numSectors     resb 8
   206                              <1> endstruc
   207                              <1> 
   208                              <1> ;THE WRITE STRUCT MUST BE A STRICT SUPERSET OF THE FORMAT STRUCT ALWAYS
   209                              <1> struc genioctlLBAformat
   210 00000000 ??                  <1>     .size           resb 1
   211 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to format
   212 00000002 ????????????        <1>     .res            resb 6
   213 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start format at
   214                              <1> endstruc
   215                              <1> 
   216                              <1> struc genioctlLBAwrite
   217 00000000 ??                  <1>     .size           resb 1
   218 00000001 ??                  <1>     .numSectors     resb 1  ;Number of sectors to write
   219 00000002 ????????????        <1>     .res            resb 6
   220 00000008 ????????????????    <1>     .startSector    resb 8  ;Sector to start write at
   221 00000010 ????????????????    <1>     .xferBuffer     resb 8  ;Transfer buffer for data
   222                              <1> endstruc
     6                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc bpb          ;FAT 12 and 16 BPB, SIZE: 62 bytes
    19                              <1> 
    20 00000000 ??????              <1>     .jmpBoot    resb 3 
    21 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    22 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    23 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    24 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors, in volume
    25 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    26 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of 32 byte entries in Root directory
    27 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    28 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    29 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT
    30 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    31 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    32 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors, preceeding volume start
    33 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    34                              <1> 
    35 00000024 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    36 00000025 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    37 00000026 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    38 00000027 ????????            <1>     .volID      resd 1  ;Volume serial number
    39 0000002B <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    40 00000036 ????????????????    <1>     .filSysType resb 8  ;File system type string
    41                              <1> 
    42                              <1> endstruc
    43                              <1> 
    44                              <1> struc bpb32       ;FAT 32 BPB, SIZE: 90 bytes
    45                              <1> 
    46 00000000 ??????              <1>     .jmpBoot    resb 3
    47 00000003 ????????????????    <1>     .oemName    resb 8  ;OEM name
    48 0000000B ????                <1>     .bytsPerSec resw 1  ;Bytes per sector
    49 0000000D ??                  <1>     .secPerClus resb 1  ;Sectors per cluster
    50 0000000E ????                <1>     .revdSecCnt resw 1  ;Number of reserved sectors
    51 00000010 ??                  <1>     .numFATs    resb 1  ;Number of FATs on media
    52 00000011 ????                <1>     .rootEntCnt resw 1  ;Number of entries in Root directory
    53 00000013 ????                <1>     .totSec16   resw 1  ;Number of sectors on medium
    54 00000015 ??                  <1>     .media      resb 1  ;Media descriptor byte
    55 00000016 ????                <1>     .FATsz16    resw 1  ;Number of sectors per FAT, must be 0 for FAT 32
    56 00000018 ????                <1>     .secPerTrk  resw 1  ;Number of sectors per "track"
    57 0000001A ????                <1>     .numHeads   resw 1  ;Number of read "heads"
    58 0000001C ????????            <1>     .hiddSec    resd 1  ;Number of hidden sectors
    59 00000020 ????????            <1>     .totSec32   resd 1  ;32 bit count of sectors
    60                              <1> 
    61 00000024 ????????            <1>     .FATsz32    resd 1  ;32 bit count of sectors occupied by one FAT
    62 00000028 ????                <1>     .extFlags   resw 1  ;Extended Flags word
    63 0000002A ????                <1>     .FSver      resw 1  ;File system version word, must be 0
    64 0000002C ????????            <1>     .RootClus   resd 1  ;First Cluster of Root Directory
    65 00000030 ????                <1>     .FSinfo     resw 1  ;Sector number of FSINFO structure, usually 1
    66 00000032 ????                <1>     .BkBootSec  resw 1  ;Backup Boot sector, either 0 or 6
    67 00000034 <res Ch>            <1>     .reserved   resb 12 ;Reserved 12 bytes
    68                              <1> 
    69 00000040 ??                  <1>     .drvNum     resb 1  ;Logical drive number (00h or 80h)
    70 00000041 ??                  <1>     .reserved1  resb 1  ;Reserved byte
    71 00000042 ??                  <1>     .bootSig    resb 1  ;Extended boot signature (29h)
    72 00000043 ????????            <1>     .volID      resd 1  ;Volume serial number
    73 00000047 <res Bh>            <1>     .volLab     resb 11 ;Volume label string
    74 00000052 ????????????????    <1>     .filSysType resb 8  ;File system type string
    75                              <1> 
    76                              <1> endstruc
    77                              <1> 
    78                              <1> struc mbr
    79 00000000 <res 1B8h>          <1>     .bsCode     resb 440
    80 000001B8 ????????            <1>     .diskID     resb 4
    81 000001BC ????                <1>     .reserved   resb 2
    82 000001BE <res 10h>           <1>     .mbrEntry1  resb 16
    83 000001CE <res 10h>           <1>     .mbrEntry2  resb 16
    84 000001DE <res 10h>           <1>     .mbrEntry3  resb 16
    85 000001EE <res 10h>           <1>     .mbrEntry4  resb 16
    86 000001FE ????                <1>     .mbrSig     resb 2
    87                              <1> endstruc
    88                              <1> 
    89                              <1> struc mbrEntry
    90 00000000 ??                  <1>     .ptnAtrib   resb 1  ;80h = active
    91 00000001 ??????              <1>     .chsStart   resb 3  ;Ignore practically
    92 00000004 ??                  <1>     .ptnType    resb 1  ;This being 00 means free
    93 00000005 ??????              <1>     .chsEnd     resb 3  ;Ignore
    94 00000008 ????????            <1>     .lbaStart   resb 4  ;Start of partition in 32 bit LBA
    95 0000000C ????????            <1>     .numSectors resb 4  ;Number of sectors in partition
    96                              <1> endstruc
    97                              <1> 
    98                              <1> struc ebr
    99 00000000 <res 1BEh>          <1>     .bsCode     resb 446    ;Basic 16-bit code to error if launched into
   100 000001BE <res 10h>           <1>     .ebrVolHdr  resb 16 ;Information about the volume itself
   101 000001CE <res 10h>           <1>     .ebrLinkHdr resb 16 ;Link header information to next logical volume in ebr
   102 000001DE <res 20h>           <1>     .reserved   resb 32 ;Reserved
   103 000001FE ????                <1>     .mbrSig     resb 2
   104                              <1> endstruc
   105                              <1> 
   106                              <1> 
   107                              <1> struc fatDirEntry
   108                              <1> 
   109 00000000 <res Bh>            <1>     .name       resb 11 ;8.3 File Name w/o fullstop
   110 0000000B ??                  <1>     .attribute  resb 1  ;Usual attributes
   111 0000000C ??                  <1>     .ntRes      resb 1  ;Reserved 0
   112 0000000D ??                  <1>     .crtTimeT   resb 1  ;Count of tenths of a second of file creation time <=199
   113 0000000E ????                <1>     .crtTime    resb 2  ;Creation time, granularity of 2 seconds
   114 00000010 ????                <1>     .crtDate    resb 2  ;Creation date
   115 00000012 ????                <1>     .lastAccDat resb 2  ;Last Read/Write date, not 100% supported (consider later)
   116 00000014 ????                <1>     .fstClusHi  resb 2  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   117 00000016 ????                <1>     .wrtTime    resb 2  ;Last modification (write) time
   118 00000018 ????                <1>     .wrtDate    resb 2  ;Last modification (write) date
   119 0000001A ????                <1>     .fstClusLo  resb 2  ;Lo word of 1st data cluster for file/dir
   120 0000001C ????????            <1>     .fileSize   resb 4  ;32-bit quantity with size of file described by entry
   121                              <1> 
   122                              <1> endstruc
   123                              <1> ;Directory attribute equates
   124                              <1>     dirReadOnly     equ 01h
   125                              <1>     dirHidden       equ 02h
   126                              <1>     dirSystem       equ 04h
   127                              <1>     dirVolumeID     equ 08h
   128                              <1>     dirDirectory    equ 10h
   129                              <1>     dirArchive      equ 20h
   130                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   131                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   132                              <1>     ;If any of the three bits are set, then ALL three bits are set
   133                              <1>     ; in addition to whatever the user passed to search for.
   134                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   135                              <1>     dirIncFiles     equ dirHidden | dirSystem
   136                              <1> 
   137                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   138                              <1> 
   139 00000000 ??????              <1>     .jmpBoot                resb 3 
   140 00000003 ????????????????    <1>     .oemName                resb 8  ;OEM name
   141 0000000B <res 35h>           <1>     .MustBeZero             resb 53 ;Must be 0, 53 bytes
   142 00000040 ????????????????    <1>     .partitionOffset        resq 1  ;in sectors, 0 means ignore this field
   143 00000048 ????????????????    <1>     .volumeLength           resq 1  ;Volume Length in sectors
   144 00000050 ????????            <1>     .FAToffset              resd 1  ;Volume rel offset of first FAT, in sectors
   145 00000054 ????????            <1>     .FATlength              resd 1  ;FAT length, in sectors
   146 00000058 ????????            <1>     .clusterHeapOffset      resd 1  ;Start of data area, in sectors
   147 0000005C ????????            <1>     .clusterCount           resd 1  ;Number of clusters on medium
   148 00000060 ????????            <1>     .firstClusterOfRootDir  resd 1  ;First Cluster of Root Directory, min 2
   149 00000064 ????????            <1>     .volumeSerialNum        resd 1  ;Volume Serial Number
   150 00000068 ????                <1>     .FSrevision             resw 1  ;Should be 0001 (v1.00)
   151 0000006A ????                <1>     .volumeFlags            resw 1  ;Volume Flags, refer to documentation
   152 0000006C ??                  <1>     .bytesPerSectorShift    resb 1  ;min 9 (512 bps), max 12 (4096 bps)
   153 0000006D ??                  <1>     .sectorsPerClusterShift resb 1  ;Result of log_2(N) for N=sec per clus
   154 0000006E ??                  <1>     .numberOfFATs           resb 1  ;Number of FATs, only 1 or 2
   155 0000006F ??                  <1>     .driveSelect            resb 1  ;Drive Select, 0 or 80h (Int 13h)
   156 00000070 ??                  <1>     .percentInUse           resb 1  ;Rounded down. FFh means unknown
   157 00000071 ??????????????      <1>     .reserved               resb 7  ;Reserved for alignment
   158                              <1> 
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc FSInfo
   162                              <1> 
   163 00000000 ????????            <1>     .leadSig    resb 4  ;Leading Signature, should be 041615252h
   164 00000004 <res 1E0h>          <1>     .reserved1  resb 480
   165 000001E4 ????????            <1>     .strucSig   resb 4  ;Should be 061417272h
   166 000001E8 ????????            <1>     .freeCount  resb 4  ;Contains the last known free cluster on volume
   167 000001EC ????????            <1>     .nextFree   resb 4  ;Contains the first known free cluster on volume
   168 000001F0 <res Ch>            <1>     .reserved2  resb 12 ;Should be 0
   169 000001FC ????????            <1>     .trailSig   resb 4  ;Should be 0AA550000h
   170                              <1> 
   171                              <1> endstruc
   172                              <1> fsInfoSig1  equ 041615252h
   173                              <1> fsInfoSig2  equ 061417272h
   174                              <1> fsInfoSig3  equ 0AA550000h
   175                              <1> 
   176                              <1> %macro defaultBPB 0
   177                              <1>     db 0E9h
   178                              <1>     db 00h
   179                              <1>     db 90h
   180                              <1>     db 'SCPDOSv1'
   181                              <1>     dw 0200h                       
   182                              <1>     db 01h                         
   183                              <1>     dw 0001h                           
   184                              <1>     db 02h                              
   185                              <1>     dw 00E0h            
   186                              <1>     dw 0B40h   
   187                              <1>     db 0F0h                   
   188                              <1>     dw 0009h                   
   189                              <1>     dw 0012h                     
   190                              <1>     dw 0002h                  
   191                              <1>     dd 0                 
   192                              <1>     dd 0 
   193                              <1>     db 00h
   194                              <1>     db 00h
   195                              <1>     db 29h
   196                              <1>     dd 0
   197                              <1>     db 'NO NAME    '
   198                              <1>     db 'FAT12   '
   199                              <1>     db 58 dup 0 ;Size padding for a FAT12/16 BPB to make it 120 bytes long
   200                              <1> %endmacro
     7                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    27 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   344                              <1> struc psp
   345 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   346 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   347 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   348 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   349 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   350 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   351 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   352                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   353                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   354                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   355                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   356                              <1> ; always used and jftSize.
   357                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   358 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   361 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   362 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>                 db ?  ;Reserved byte
   365                              <1> ;The below are in the same place as in DOS.
   366                              <1>     .cmdLineArgPtr: ;Symbol for future use
   367 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   368 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   dw ?
   376 00000002 ??                  <1>     .minutes    db ?
   377 00000003 ??                  <1>     .hours      db ?
   378 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    db ?
   380                              <1> endstruc
   381                              <1> 
   382                              <1> 
   383                              <1> struc extCtryStruc
   384 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   385 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   386 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   387 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   388 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   389                              <1>                         ;0 = month day year hh:mm:ss
   390                              <1>                         ;1 = day month year hh:mm:ss
   391                              <1>                         ;2 = year month day hh:mm:ss
   392 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   393 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   394 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   395 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   396 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   397 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   398                              <1>                         ;0 = Symbol leads, without space
   399                              <1>                         ;1 = Symbol follows, without space
   400                              <1>                         ;2 = Symbol leads, one space
   401                              <1>                         ;3 = Symbol follows, one space
   402                              <1>                         ;4 = Symbol replace decimal separator
   403 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   404 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   405 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   406 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   407 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   408                              <1> endstruc
   409                              <1> 
   410                              <1> struc countryStruc
   411 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   412                              <1>                         ;0 = month day year hh:mm:ss
   413                              <1>                         ;1 = day month year hh:mm:ss
   414                              <1>                         ;2 = year month day hh:mm:ss
   415 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   416 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   417 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   418 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   419 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   420 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   421                              <1>                         ;0 = Symbol leads, without space
   422                              <1>                         ;1 = Symbol follows, without space
   423                              <1>                         ;2 = Symbol leads, one space
   424                              <1>                         ;3 = Symbol follows, one space
   425                              <1>                         ;4 = Symbol replace decimal separator
   426 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   427 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   428 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   429 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   430 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   431                              <1> endstruc
   432                              <1> 
   433                              <1> ;Critical Error AH bitfield equates
   434                              <1> critRead    equ 0h
   435                              <1> critWrite   equ 1h
   436                              <1> critDOS     equ 0h
   437                              <1> critFAT     equ 2h
   438                              <1> critDir     equ 4h
   439                              <1> critData    equ 6h
   440                              <1> critFailOK  equ 8h
   441                              <1> critRetryOK equ 10h
   442                              <1> critIgnorOK equ 20h
   443                              <1> critCharDev equ 80h
   444                              <1> 
   445                              <1> critIgnore  equ 0
   446                              <1> critRetry   equ 1
   447                              <1> critAbort   equ 2
   448                              <1> critFail    equ 3
   449                              <1> 
   450                              <1> ;MISC ASCII control chars
   451                              <1> NUL equ 00h ;^@         | ASCII Null
   452                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   453                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   454                              <1> BEL equ 07h ;^G         | ASCII Bell
   455                              <1> BSP equ 08h ;^H         | ASCII Backspace
   456                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   457                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   458                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   459                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   460                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   461                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   462                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   463                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   464                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   465                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   466                              <1> SPC equ 20h ;Printable  | ASCII Space
   467                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   468                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   469                              <1> 
   470                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   471                              <1> ;Extended Ascii Codes
   472                              <1> eF1     equ 3Bh ;F1 second byte
   473                              <1> eF2     equ 3Ch ;F2 second byte
   474                              <1> eF3     equ 3Dh ;F3 second byte
   475                              <1> eF4     equ 3Eh ;F4 second byte
   476                              <1> eF5     equ 3Fh ;F5 second byte
   477                              <1> eF6     equ 40h ;F6 second byte
   478                              <1> eF7     equ 41h ;F7 second byte
   479                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   480                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   481                              <1> eIns    equ 52h ;Insert second byte
   482                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   483                              <1> 
   484                              <1> ;Default Configuration for the system
   485                              <1> 
   486                              <1> buffersDefault  equ 30
   487                              <1> filesDefault    equ 20
   488                              <1> fcbsDefault     equ 4
   489                              <1> safeFcbsDeflt   equ 0
   490                              <1> lastDriveDeflt  equ 5   
   491                              <1> 
   492                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   493                              <1> ; then the char has this property.
   494                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   495                              <1> termChar    equ 2   ;Terminator char type
   496                              <1> sepChar     equ 4   ;Separator char type
   497                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI24     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  
    12                                  ;========================START OF DOS MODULE=========================
    13                                  %include "./src/Kernel/dos.inc"
     1                              <1> ;DOS globals
     2                              <1> 
     3                              <1> ; DOS variables for reloc computations in sysinit
     4                              <1> GLOBAL dSegLen  ;Exported for calculations with dosSeg
     5                              <1> 
     6                              <1> ; DOS DATA AREA variables
     7                              <1> GLOBAL nulDevHdr
     8                              <1> GLOBAL anchorMcb
     9                              <1> GLOBAL dayOfMonth
    10                              <1> GLOBAL monthOfYear
    11                              <1> GLOBAL vConPtr
    12                              <1> GLOBAL clockPtr
    13                              <1> GLOBAL currentPSP
    14                              <1> GLOBAL editKeys
    15                              <1> GLOBAL shareCount
    16                              <1> GLOBAL shareDelay
    17                              <1> GLOBAL caseMapFunc
    18                              <1> GLOBAL charTableArray
    19                              <1> GLOBAL charTableArray.ucTable
    20                              <1> GLOBAL charTableArray.filenameUCTable
    21                              <1> GLOBAL charTableArray.filenameTerminatingTable
    22                              <1> GLOBAL charTableArray.collatingTable
    23                              <1> GLOBAL serverDispTbl
    24                              <1> GLOBAL machineName
    25                              <1> GLOBAL critPtchTbl
    26                              <1> GLOBAL dosCrit1Enter
    27                              <1> GLOBAL dosCrit1Exit
    28                              <1> GLOBAL dosCrit2Enter
    29                              <1> GLOBAL dosCrit2Exit
    30                              <1> GLOBAL dosMgrHooks
    31                              <1> GLOBAL dllHooks
    32                              <1> GLOBAL shareHooks
    33                              <1> GLOBAL goodDfltShareHook
    34                              <1> GLOBAL badDfltShareHook
    35                              <1> GLOBAL dosBIOSName
    36                              <1> GLOBAL biosVers
    37                              <1> GLOBAL biosPtr
    38                              <1> GLOBAL bootDrive
    39                              <1> GLOBAL numFiles
    40                              <1> GLOBAL lastdrvNum
    41                              <1> GLOBAL firstSftHeader
    42                              <1> GLOBAL mcbChainPtr
    43                              <1> GLOBAL vConPtr
    44                              <1> GLOBAL clockPtr
    45                              <1> GLOBAL extKeyFunc
    46                              <1> GLOBAL errorDrv
    47                              <1> GLOBAL currentNdx
    48                              <1> GLOBAL switchChar
    49                              <1> GLOBAL ctryTbl
    50                              <1> GLOBAL serverDispTblPtr
    51                              <1> GLOBAL currentDTA
    52                              <1> GLOBAL cdsHeadPtr
    53                              <1> GLOBAL dpbHeadPtr
    54                              <1> GLOBAL maxBytesSec
    55                              <1> GLOBAL bufHeadPtr
    56                              <1> GLOBAL sftHeadPtr
    57                              <1> GLOBAL numBuffers
    58                              <1> GLOBAL fcbsHeadPtr
    59                              <1> GLOBAL numPhysVol
    60                              <1> 
    61                              <1> GLOBAL i0
    62                              <1> GLOBAL i1
    63                              <1> GLOBAL i2
    64                              <1> GLOBAL i3
    65                              <1> GLOBAL i4
    66                              <1> GLOBAL i5
    67                              <1> GLOBAL i6
    68                              <1> GLOBAL i7
    69                              <1> GLOBAL i8
    70                              <1> GLOBAL i9
    71                              <1> GLOBAL i10
    72                              <1> GLOBAL i11
    73                              <1> GLOBAL i12
    74                              <1> GLOBAL i13
    75                              <1> GLOBAL i14
    76                              <1> GLOBAL i15
    77                              <1> GLOBAL i16
    78                              <1> GLOBAL i17
    79                              <1> GLOBAL i18
    80                              <1> GLOBAL i19
    81                              <1> GLOBAL i20
    82                              <1> GLOBAL i21
    83                              <1> 
    84                              <1> GLOBAL terminateProcess 
    85                              <1> GLOBAL functionDispatch 
    86                              <1> GLOBAL defaultIretq
    87                              <1> GLOBAL dosDefCritErrHdlr    
    88                              <1> GLOBAL absDiskRead      
    89                              <1> GLOBAL absDiskWrite     
    90                              <1> GLOBAL terminateRes     
    91                              <1> GLOBAL multiplexHdlr
    92                              <1> GLOBAL nulStrat
    93                              <1> GLOBAL nulIntr
    14                                  
    15                                  Segment dBSS bss private align=1
    16                                  ;---------------------------
    17                                  ;   DOS BSS data segment
    18                                  ;---------------------------
    19                                  %include "./src/Kernel/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2                              <1> dosDataArea:
     3 00000000 <res 10h>           <1>     anchorMcb   db mcb_size dup (?) ;This is space for the anchor MCB
     4 00000010 ??                  <1>     bootDrive   db ?    ;The logical drive we booted from
     5 00000011 ????????            <1>     biosVers    dd ?    ;Indicates BIOS type. Each OEM picks a number
     6 00000015 ????????????????    <1>     biosPtr     dq ?    ;For saving a data ptr to be used by BIOS/drivers
     7                              <1> ;Above is the system stats
     8                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM validNetNam TO NUMJOINDRV
     9                              <1> ;Both below variables can be edited with Int 21h AX=440Bh
    10 0000001D ????                <1>     validNetNam dw ?    ;Flag if machinename valid, deflt no=0
    11 0000001F ????                <1>     shareCount  dw ?    ;Share Retry Count, number of repeats before fail.
    12 00000021 ????                <1>     shareDelay  dw ?    ;Share Delay, in multiples of ms. (TEMP, just loop)
    13 00000023 ????????????????    <1>                 dq ?    ;Unused ptr for future, current disk buffer
    14 0000002B ????????????????    <1>     vConHdlOff  dq ?    ;Ptr into buff to the next char to process in hdl req
    15                              <1>     ;   A value of 0 means no chars buffered.
    16 00000033 ????????????????    <1>     mcbChainPtr dq ?    ;Pointer to the MCB chain x
    17                              <1> sysVarsPtr:
    18 0000003B ????????????????    <1>     dpbHeadPtr  dq ?    ;Pointer to the first DPB in the DPB chain x
    19 00000043 ????????????????    <1>     sftHeadPtr  dq ?    ;Pointer to the first SFT header in SFT chain
    20 0000004B ????????????????    <1>     clockPtr    dq ?    ;Pointer to the current active CLOCK$ device header x
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000053 ????????????????    <1>     vConPtr     dq ?    ;Ptr to the devdrv of the char dev controlling vCon x
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000005B ????                <1>     maxBytesSec dw ?    ;Maximum number of bytes per sector (size of buffers)x
    25 0000005D ????????????????    <1>     bufHeadPtr  dq ?    ;Pointer to the head of the disk buffer chain x
    26 00000065 ????????????????    <1>     cdsHeadPtr  dq ?    ;Pointer to the head of the CDS array x
    27 0000006D ????????????????    <1>     fcbsHeadPtr dq ?    ;Pointer to the head of the System FCB chain
    28 00000075 ????                <1>     numSafeSFCB dw ?    ;Number of protected FCBs (y in FCBS=x,y)
    29 00000077 ??                  <1>     numPhysVol  db ?    ;Number of physical volumes in the system x
    30 00000078 ??                  <1>     lastdrvNum  db ?    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    31 00000079 ??                  <1>     numBuffers  db ?    ;Buffers=30 default
    32 0000007A <res 22h>           <1>     nulDevHdr   db drvHdr_size dup (?)
    33 0000009C ??                  <1>     numJoinDrv  db ?    ;Number of Joined Drives
    34                              <1> ;Additional internal variables
    35 0000009D ??                  <1>     numFiles    db ?    ;FILES=5 default, max 255
    36                              <1>     ;DOSMGR hook functions and variable here
    37                              <1>     ;All DOSMGR hooks are 8 byte pointers and have been introduced to allow
    38                              <1>     ; an external application to install itself as a multitasker into the
    39                              <1>     ; DOS kernel. DOS's behaviour changes accordingly when a multitasker 
    40                              <1>     ; is installed. It is recommended that a multitasker NOT be installed
    41                              <1>     ; when a file sharing broker is not installed but that is up to the 
    42                              <1>     ; implementer to decide.  
    43                              <1>     ;Three function hooks are provided. NOTE, all functions must preserve
    44                              <1>     ; ALL registers used.
    45                              <1>     ;
    46                              <1>     ;launchTask:
    47                              <1>     ;This allows for a multitasker to install its handling routine for 
    48                              <1>     ; launching tasks. Note this is called after all setup
    49                              <1>     ; for the EXE has been done except for setting the PSP.
    50                              <1>     ; If the mode bSuFunc = 4, then we have we have the following:
    51                              <1>     ;       ecx = mode of termination
    52                              <1>     ;           = 00 -> Upon terminating, leave task in Zombie mode
    53                              <1>     ;                   awaiting for a task to read it's return code
    54                              <1>     ;           = 01 -> Upon terminating, discard all resources allocated
    55                              <1>     ;                   to the task.
    56                              <1>     ;           > 01 -> Error code, unknown function (01h).
    57                              <1>     ;This function must return to the caller via DOS with CF=CY if an error 
    58                              <1>     ;   and eax = Error code or CF=NC if all ok. DOS will then return to
    59                              <1>     ;   the parent task, with the background task hopefully scheduled to run
    60                              <1>     ;   in the DOSMGR.
    61                              <1>     ;Either before or on initial run, DOSMGR must set currentDTA in a bgTasks'
    62                              <1>     ; SDA to psp+80h. This can be done in launchBgTask.
    63                              <1>     ;
    64                              <1>     ;terminateTask:
    65                              <1>     ;This allows for a multitasker to install its handling routine for
    66                              <1>     ; cleaning up resources allocated to a task. 
    67                              <1>     ;
    68                              <1>     ;Specific function definitions:
    69                              <1>     ;
    70                              <1>     ;If we enter
    71                              <1>     ;   Input:  bx = FCB drive statuses
    72                              <1>     ;           ecx = Termination mode setting
    73                              <1>     ;           rsi = RSP value to start with
    74                              <1>     ;           rbp = execFrame. Use this to get parentPSP data et al.
    75                              <1>     ;           qword [rbp - execFrame.pProgEP] = RIP value to launch from
    76                              <1>     ;   Output: CF=NC -> Proceed with launch of bg task
    77                              <1>     ;           CF=CY -> Error exit, errorcode in eax
    78                              <1> dosMgrHooks:
    79 0000009E ??                  <1>     dosMgrPresent   db ?    ;Clear if no mgr, else set to -1
    80 0000009F ????????????????    <1>     launchTask      dq ?    ;Registers a new task, with specifics based on bSubfunc
    81 000000A7 ????????????????    <1>     terminateTask   dq ?    ;Called to tell the MGR that this task is ending
    82                              <1> 
    83                              <1>     ;DLL Manager hook functions here
    84                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    85                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    86                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    87                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    88                              <1>     ; and from within EXIT. 
    89                              <1>     ;
    90                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    91                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    92                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    93                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    94                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    95                              <1>     ; there is already an overlay there, to remove it's functions from the 
    96                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    97                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    98                              <1>     ; on EXIT, they can be removed from the registry. 
    99                              <1>     ;
   100                              <1>     ;In EXIT, the PSP of the ending task must be taken
   101                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
   102                              <1>     ; is a .COM file or an .EXE with no exports.
   103                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
   104                              <1>     ; it must return CF=CY.
   105                              <1> dllHooks:
   106 000000AF ????????????????    <1>     registerDLL     dq ?  ;Entered with rbp = execFrame
   107 000000B7 ????????????????    <1>     unloadDLLHook   dq ?  ;
   108                              <1>     ;Share hook functions here
   109                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
   110                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
   111                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
   112                              <1> 
   113                              <1>     ;Note to programmer - Please adjust as necessary:
   114                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
   115                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
   116                              <1>     ;Those suffixed with a ? have their future in question.
   117                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
   118                              <1> 
   119                              <1>     ;SCPDOS has an optional handle, openFileCheck. This function can be used 
   120                              <1>     ; to see if there are any open handles. Its implementation is completely
   121                              <1>     ; optional, and an equivalent form of the function is provided for older
   122                              <1>     ; SHARE versions that might be ported that don't have a particular function.
   123                              <1>     ;This function is defined as follows:
   124                              <1>     ; Input: fname1Ptr -> Filename we want to see if there are any open records
   125                              <1>     ;                       for.
   126                              <1>     ; Output: CF=CY -> Handle not supported.
   127                              <1>     ;         CF=NC -> Handle supported. 
   128                              <1>     ;           ZF=ZE -> No Files open.
   129                              <1>     ;           ZF=NZ -> Some files are open.
   130                              <1> shareHooks:
   131                              <1>     ;markerShare dq ?  ;Marker Share hook
   132 000000BF ????????????????    <1>     openFileCheck   dq ?  ;Check if share record for file exist       DONE
   133 000000C7 ????????????????    <1>     openShare   dq ?  ;Share called on open.                          DONE 
   134 000000CF ????????????????    <1>     closeShare  dq ?  ;Share called on close.                         DONE/
   135 000000D7 ????????????????    <1>     closeCompShare  dq ?  ;Share to close all files for a machine.    DONE
   136 000000DF ????????????????    <1>     closeTaskShare  dq ?  ;Share to close all files for a task.       DONE
   137 000000E7 ????????????????    <1>     closeNameShare  dq ?  ;Share to close file by name.               DONE/
   138 000000EF ????????????????    <1>     lockFileShare   dq ?  ;Share to lock file region.                 DONE
   139 000000F7 ????????????????    <1>     unlockFileShare dq ?  ;Share to unlock file region.               DONE
   140 000000FF ????????????????    <1>     checkFileLockShare  dq ?  ;Share to check file region locked.     DONE
   141 00000107 ????????????????    <1>     openFileListShare   dq ?  ;Share to get open file list entry.     DONE
   142 0000010F ????????????????    <1>     updateFCBfromSFTShr dq ?  ;Share to update FCB from the SFT.      UNUSED?
   143 00000117 ????????????????    <1>     fstClstOfFCBShare   dq ?  ;Share to get first cluster of FCB.     UNUSED?
   144 0000011F ????????????????    <1>     closeDupFileShare   dq ?  ;Share to close file if dup for proc.   DONE
   145 00000127 ????????????????    <1>     closeNewHdlShare    dq ?  ;Share to close hdls of rec opened file. DONE
   146 0000012F ????????????????    <1>     updateDirShare      dq ?  ;Share to update dir info in SFT.       DONE 
   147                              <1> ;Create SFT header and corresponding array of five default sft entries
   148 00000137 <res Ah>            <1>     firstSftHeader  db sfth_size dup (?)
   149 00000141 <res 4Fh>           <1>     firstSft    db sft_size dup (?)
   150 00000190 <res 4Fh>           <1>     secondSft   db sft_size dup (?)
   151 000001DF <res 4Fh>           <1>     thirdSft    db sft_size dup (?)
   152 0000022E <res 4Fh>           <1>     fourthSft   db sft_size dup (?)
   153 0000027D <res 4Fh>           <1>     fifthSft    db sft_size dup (?)
   154                              <1> 
   155                              <1> ;Virtual CONsole Buffers
   156 000002CC ??                  <1>     vConCursPos db ?     ;Keeps track for tabs stops (and var with 7)
   157                              <1>     ;Only incremented when CON device runs vCon
   158                              <1> vConBuf:    ;Proper buffer symbol
   159 000002CD ??                  <1>     vConCurCnt  db ?     ;Current count of chars in vConBuffer
   160 000002CE <res 80h>           <1>     vConBuffer  db 128 dup (?)   ;General Buffer for vCon 256 bytes. 
   161                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   162 0000034E <res 80h>           <1>     vConInBuf   db 128 dup (?)   ;vConsole buffer for reads ONLY
   163 000003CE ??                  <1>                 db ?     ;Padding Buffer!
   164                              <1> 
   165 000003CF ??                  <1>     printEcho   db ?  ;If 0, no echo. Non-zero => Echo to PRN
   166 000003D0 ??                  <1>     verifyFlag  db ?  ;If set, writes are replaces with write/verify x
   167 000003D1 ??                  <1>     switchChar  db ?  ;Editable by 21h/37h. Set to / by default
   168 000003D2 ??                  <1>     vConErr     db ?  ;Inc on each char output call
   169                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   170                              <1> 
   171 000003D3 ??                  <1>     allocStrat  db ?  ;Allocation strategy. First, Best or Last fit
   172                              <1> ;Server stuff. Default to all zeros (blank)
   173 000003D4 ??                  <1>     shareFlag   db ?  ;Sharing flag, set to 0 for now (future expansion)
   174                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   175 000003D5 ??                  <1>     serverCnt   db ?  ;Increments on each 21h/5E01h call
   176 000003D6 <res 10h>           <1>     machineName db 16 dup (?) ;Machine name (Set via 21h/5E01h) (set to SPC)    
   177                              <1> ;Swappable Data Area
   178 000003E6 <res 20h>           <1>     critPtchTbl dq 4 dup (?)  ;Offsets from DosDataArea addr to the 4 funcs
   179 00000406 ??                  <1>                 db ?  ;Alignment byte
   180                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   181 00000407 ??                  <1>     critErrFlag db ?  ;Critical error flag, set on entry to Int 24h x
   182 00000408 ??                  <1>     inDOS       db ?  ;Inc on each DOS call, dec when leaving x
   183 00000409 ??                  <1>     errorDrv    db ?  ;Drive on which error occured or FFh x
   184 0000040A ??                  <1>     errorLocus  db ?  ;Where the error took place  
   185 0000040B ????                <1>     errorExCde  dw ?  ;Extended Error Code
   186 0000040D ??                  <1>     errorAction db ?  ;Suggested action for error  
   187 0000040E ??                  <1>     errorClass  db ?  ;Error Class
   188 0000040F ????????????????    <1>     errorVolLbl dq ?    ;Sets a ptr to the volume label of the error disk
   189 00000417 ????????????????    <1>     currentDTA  dq ?  ;Address of the current DTA x
   190 0000041F ????????????????    <1>     currentPSP  dq ?  ;Address of current PSP x
   191                              <1> 
   192 00000427 ????????????????    <1>     xInt23hRSP  dq ?  ;Saves RSP across an Int 23h call
   193 0000042F ????                <1>     errorLevel  dw ?  ;Last return code returned by Int 21h/4Ch x
   194                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 21h/31h
   195                              <1>     ;Lower byte: User Specified
   196 00000431 ??                  <1>     currentDrv  db ?  ;Default drive x
   197 00000432 ??                  <1>     breakFlag   db ?  ;If set, check for CTRL+C on all DOS calls x
   198                              <1> ;SDA, needs to be replaced between processes
   199                              <1> sdaDOSSwap:
   200 00000433 ????????????????    <1>     oldRAX      dq ?  ;Store rax on entering Int21h or returning Int 23h
   201 0000043B ????????????????    <1>     serverPSP   dq ?  ;PSP of prog making server request, used by net & share
   202 00000443 ????                <1>     machineNum  dw ?  ;for sharing/networking 00h = default number (us)
   203 00000445 ????????????????    <1>     firstMCB    dq ?  ;First fit MCB for request
   204 0000044D ????????????????    <1>     bestMCB     dq ?  ;Best fit MCB for request
   205 00000455 ????????????????    <1>     lastMCB     dq ?  ;Last fit MCB for request
   206 0000045D ????                <1>     dirEntryNum dw ?  ;Offset into directory of entry we are looking for
   207 0000045F ??                  <1>     volIdFlag   db ?    ;If set, we are searching for a volume ID
   208 00000460 ????????????????    <1>     xInt24hRSP  dq ?  ;RSP across an Int 24h call
   209 00000468 ??                  <1>     Int24bitfld db ?  ;Copies the bit field given to the Int 24h handler
   210 00000469 ??                  <1>     fileDirFlag db ?  ;File/Directory flag. 0 = Dir, ¬0 = File
   211 0000046A ??                  <1>     Int24Fail   db ?  ;Set if Int 24h returned fail
   212                              <1> 
   213 0000046B ????????????????    <1>     oldoldRSP   dq ?  ;RSP at prev Int 21h entry if called from within Int 21h
   214 00000473 ????????????????    <1>     dosReturn   dq ?  ;Used as a var to return when juggling stack
   215 0000047B ????????????????    <1>     oldRSP      dq ?  ;RSP when entering Int 21h
   216 00000483 ????????????????    <1>     oldRBX      dq ?  ;Temp var to save value of rbx during an Int 21 call
   217 0000048B ??                  <1>     dirFlag     db ?  ;Directory Flag. 0 => Search for Dir, 1 => for File
   218                              <1> ;The below flag tells DOS to print ^C in the termination function
   219 0000048C ??                  <1>     ctrlCExit   db ?  ;-1 => CTRL+BREAK termination, 0 otherwise
   220 0000048D ??                  <1>     fcbSpaceOk  db ?  ;If set, we allow embedded spaces in the filenames
   221                              <1> ;Time stuff
   222                              <1> ;Read the below two as a word
   223 0000048E ??                  <1>     dayOfMonth  db ?  ;01h - 1Fh (1 - 31)
   224 0000048F ??                  <1>     monthOfYear db ?  ;01h - 0Ch (1 - 12)
   225 00000490 ??                  <1>     years       db ?  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   226 00000491 ????                <1>     daysOffset  dw ?  ;Days since 1-1-1980
   227 00000493 ??                  <1>     dayOfWeek   db ?  ;0 = Sunday <-> 6 = Saturday
   228                              <1> 
   229 00000494 ??                  <1>     vConDrvSwp  db ?  ;Set if vCon controlled by a different driver to vConPtr
   230 00000495 ??                  <1>     int28Flag   db ?  ;If set, Int 28h should be called, if clear no
   231 00000496 ??                  <1>     Int24Trans  db ?  ;Set to -1 if Abort translated to Fail
   232                              <1> ;A request routed through the FCB or handle uses primReqPkt for its main IO.
   233                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   234                              <1> ; without forcing to re-build the whole primary request block.
   235                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   236                              <1> ; with secondary char output going through the secondary header
   237                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   238                              <1> ; for output)
   239                              <1> ;ioReqPkt is the largest possible packet
   240 00000497 <res 2Ah>           <1>     secdReqPkt  db ioReqPkt_size dup (?) ;Secondary, Char IO Reqhdr
   241 000004C1 <res 2Ah>           <1>     primReqPkt  db ioReqPkt_size dup (?) ;Main Drv Reqhdr 
   242                              <1> altRet: ;Accessed as a qword
   243 000004EB <res 2Ah>           <1>     critReqPkt  db ioReqPkt_size dup (?)  ;Used for ^C detection!
   244 00000515 ??                  <1>     pspCopyFlg  db ?  ;Set to -1 for child process PSP, 0 for simple PSP copy
   245                              <1> ;Swappable Buffers
   246 00000516 ????????????        <1>     CLOCKrecrd  db 6 dup (?)  ;Clock driver record
   247                              <1>     ;We add an additional byte to save ah too
   248 0000051C ????                <1>     singleIObyt dw ?  ;For single IO byte buffers
   249                              <1> extErrByteBuf:  ;Used by DOS execpt hdlr to build strings. Immediate abort!
   250                              <1> exeHdrSpace:    ;This needs 112 bytes in EXEC only, buffer is free for use!
   251 0000051E <res 80h>           <1>     buffer1     db 128 dup (?)  ;Space for one path and file name
   252                              <1> sectHdr:        ;This needs 20 bytes in EXEC only
   253 0000059E <res 80h>           <1>     buffer2     db 128 dup (?) ;Space for a second path and file name
   254 0000061E ????????????????    <1>     fname1Ptr   dq ?  ;Ptr to first filename argument
   255 00000626 ????????????????    <1>     fname2Ptr   dq ?  ;Ptr to second filename argument
   256 0000062E ??                  <1>     skipDisk    db ?  ;Set => Read Disk, Clear => Skip checking on disk
   257                              <1> ;Misc bookkeeping flags and vars
   258 0000062F <res 2Bh>           <1>     dosffblock  db ffBlock_size dup (?)  ;FF block (fullsize unlike DOS)
   259 0000065A <res 20h>           <1>     curDirCopy  db fatDirEntry_size dup (?)  ;Dir copy
   260 0000067A <res 5Fh>           <1>     tmpCDS      db cds_size dup (?)  ;Temp CDS for Server calls that need a tmp CDS
   261 000006D9 <res Ch>            <1>     fcbName     db 11+1 dup (?)   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   262 000006E5 <res Ch>            <1>     wcdFcbName  db 11+1 dup (?)  ;Used to expand any wildcards for rename
   263 000006F1 ????????????????    <1>     fileDirSect dq ?  ;File/Directory starting sector, for each level
   264 000006F9 ??                  <1>     volIncmpFCB db ?  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   265 000006FA ??                  <1>     extFCBAttr  db ?  ;Extended FCB file attribute
   266 000006FB ??                  <1>     extFCBFlag  db ?  ;Set to -1 if Extended FCB
   267 000006FC ??                  <1>     searchAttr  db ?  ;Directory Search attributes
   268 000006FD ??                  <1>     fileOpenMd  db ?  ;Open mode (compat, r/w/rw?)
   269 000006FE ??                  <1>     fileFDflg   db ?  ;01h = File Found!, 04h = File deleted!
   270 000006FF ??                  <1>     badNameRen  db ?  ;Device name or File not found for rename
   271 00000700 ??                  <1>     rwFlag      db ?  ;00h=Read, 1=Write, read/write/share error reporting
   272 00000701 ??                  <1>     spliceFlag  db ?  ;00 = Relative path, !0 = Full path
   273 00000702 ??                  <1>     dosInvoke   db ?  ;0 = Invoked via Int 21h, -1 = Invoked via 21h/5D01h
   274                              <1> 
   275 00000703 ??                  <1>     vConInsert  db ?  ;Insert mode on 21/0ah (0 = not insert, !0 = insert)
   276 00000704 ??                  <1>     fileExist   db ?  ;-1 if file in pathspec exists (create/open)
   277 00000705 ??                  <1>     parDirExist db ?  ;-1 if parent directory for file exists (create/open)
   278 00000706 ??                  <1>     exitType    db ?  ;Forms the upper byte of the errorlvl
   279 00000707 ??                  <1>     openCreate  db ?  ;If open, set to 0, if Create set to -1
   280 00000708 ??                  <1>     delChar     db ?  ;Char to replace first byte of deleted file's name
   281 00000709 ??                  <1>     workingDrv  db ?  ;Working drive number, 0 based, from DPB
   282                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   283                              <1> workingDD:  ;Create a symbol for the working device driver too
   284 0000070A ????????????????    <1>     workingDPB  dq ?  ;Ptr to the DPB of the drive being accessed
   285 00000712 ????????????????    <1>     workingCDS  dq ?  ;Ptr to the CDS of the drive being accessed
   286 0000071A ????????????????    <1>     workingFCB  dq ?  ;Ptr to the caller FCB for FCB function
   287                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   288                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   289 00000722 ????????????????    <1>     workingSFT  dq ?  ;Temporary SFT (may not be not current) ptr being used
   290 0000072A ????????????????    <1>     curHdlPtr   dq ?  ;Ptr to JFT handle entry in current PSP
   291 00000732 ????????????????    <1>     currentSFT  dq ?  ;Ptr to the SFT of the file being accessed
   292 0000073A ????                <1>     currentNdx  dw ?  ;Used to access the current SFTNdx being opened/created
   293 0000073C ????                <1>     currentHdl  dw ?  ;The current file handle is saved here
   294 0000073E ????????????????    <1>     currBuff    dq ?  ;Ptr to the Current Buffer (hdr) being accessed
   295                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   296                              <1> ; and 32 byte offset into the sector for directory
   297 00000746 ????????????????    <1>     tempSect    dq ?  ;A scratch sector number
   298                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   299 0000074E ????                <1>     entry       dw ?  ;32 byte offset into a sector or #fats sectors/fat
   300                              <1> ;***************************************************|
   301                              <1> ; Needs to be set up before any file access         |
   302                              <1> ; These vars keep track of file access properties   |
   303                              <1> ;   and must be used only for such purposes.        |
   304                              <1> ;***************************************************|
   305 00000750 ????????            <1>     currClustF  dd ?  ;Relative cluster in file being r/w to/from
   306 00000754 ????????            <1>     currClustD  dd ?  ;Current Disk Cluster being r/w to/from
   307                              <1> 
   308 00000758 ????????            <1>     currSectF   dd ?  ;Current Sector in File being r/w to/from
   309 0000075C ??                  <1>     currSectC   db ?  ;Current Sector in Cluster being r/w to/from
   310 0000075D ????????????????    <1>     currSectD   dq ?  ;Current absolute Sector number on Disk
   311                              <1> 
   312 00000765 ????                <1>     currByteS   dw ?  ;Current Byte in sector being r/w to/from
   313 00000767 ????????            <1>     currByteF   dd ?  ;Current Byte in file being r/w to/from
   314                              <1> ;***************************************************|
   315 0000076B ????????            <1>     lastClust   dd ?  ;Number of the last (rel) cluster of the file
   316 0000076F ????????            <1>     lastClustA  dd ?  ;Number of the last (abs) cluster of file on disk
   317 00000773 ????????            <1>     tfrLen      dd ?  ;Number of bytes to transfer
   318 00000777 ????????            <1>     tfrCntr     dd ?  ;Number of bytes left to transfer
   319                              <1> ;Directory stuff
   320 0000077B ????????            <1>     dirClustPar dd ?  ;Absolute disk cluster of the start of the parent dir
   321 0000077F ????????            <1>     dirClustA   dd ?  ;Absolute cluster number of current directory
   322 00000783 ????                <1>     dirSect     dw ?  ;Sector of current directory cluster
   323 00000785 ????????            <1>     dirEntry    dd ?  ;32 byte offset in dir for file being searched for
   324                              <1> ;Error DPB 
   325 00000789 ????????????????    <1>     tmpDPBPtr   dq ?  ;A DPB for error/temporary situations
   326                              <1> ;No clash recycling below var as the vars in SDA are invalid if in CPU 
   327                              <1> ; exception hdlr. This var gets cleared on entry to the exception handler. 
   328                              <1> ;If it remains clear, the task will Abort. If it gets set, DOS or COMMAND.COM 
   329                              <1> ; caused CPU exception or we have an NMI. Then we freeze as we cant guarantee 
   330                              <1> ; anything anymore.
   331                              <1> haltDOS:
   332 00000791 ??                  <1>     mediaByte   db ?  ;Calls 1Bh and 1Ch return ptr to here
   333                              <1>     
   334 00000792 <res 2Bh>           <1>     renameFFBlk db ffBlock_size dup (?)  ;Source file "find first" block
   335 000007BD <res 20h>           <1>     renameDir   db fatDirEntry_size dup (?)  ;Build new file dir entry here
   336                              <1> ;Stacks and scratch SFT
   337 000007DD ??????              <1>     alignb  8
   338 000007E0 <res 528h>          <1>     critStack   dq 165 dup (?)
   339 00000D08 ????????????????    <1>     critStakTop dq ?
   340                              <1> 
   341 00000D10 <res 4Fh>           <1>     scratchSFT  db sft_size dup (?)  ;Used in FCB calls to emulate a SFT
   342                              <1>     
   343 00000D5F ??                  <1>     alignb  8
   344 00000D60 <res 638h>          <1>     AuxStack    dq 199 dup (?)
   345 00001398 ????????????????    <1>     AuxStakTop  dq ?  ;Auxilliary stack (Char IO, Int 25h/46h etc)
   346 000013A0 <res 638h>          <1>     DiskStack   dq 199 dup (?)
   347 000019D8 ????????????????    <1>     DiskStakTop dq ?
   348                              <1> 
   349 000019E0 ??                  <1>     lookahead   db ?  ;-1 => Lookahead on select Char function calls!
   350                              <1> ;Below is used in create and delete for vol lbl only. Else is -1.
   351 000019E1 ??                  <1>     rebuildDrv  db ?  ;Stores the drive letter of the dpb to reset.
   352                              <1>     sdaLen      equ     $ - sda 
   353                              <1>     sdaDOSLen   equ     $ - sdaDOSSwap
   354                              <1> 
   355                              <1> ;Additional variables NOT in the SDA
   356 000019E2 ????????????????    <1>     serverDispTblPtr    dq ?  ;DO NOT MOVE! Used to find server dispatch tbl
   357 000019EA <res 2Ah>           <1>     bkupReqHdr  db ioReqPkt_size dup (?)  ;A backup header to allow copying to
   358                              <1>     ;for saving the current header when quickly doing a second request
   359                              <1> 
   360                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   361                              <1> inExtASCII:
   362 00001A14 ??                  <1>     noPrintTog  db ?  ;00 = Toggle as usual, 01 = Prevent toggle
   363 00001A15 ????                <1>     keybTicks   dw ?  ;Counts the number of cycles spent in a kb loop.
   364                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   365                              <1>     ; copy of the date/time record
   366                              <1>     ;The idt doesnt need to be in the SDA as we will halt interrupts
   367                              <1>     ; until we get/set the address. Thus the IDT entry returned is the 
   368                              <1>     ; correct one AT the time of calling up to "the time it takes to get
   369                              <1>     ; to the read IDT routine".
   370                              <1> dosIdtPtr:          ;21h/25h will always read a new copy of IDT here
   371 00001A17 ????                <1>     .limit  dw ?    ;Overlap this with stack below as no call overlap
   372 00001A19 ????????????????    <1>     .base   dq ?
   373                              <1>     ;Lseek and IOCTL return data in registers as well as on the caller's 
   374                              <1>     ; stack. In Int 2Fh, this could overwrite user data if the functions
   375                              <1>     ; were allowed to write to original callers register stack. 
   376                              <1>     ; So we have this structure below that is used by these functions to 
   377                              <1>     ; write their "return" data onto a "stack", even though when accessed 
   378                              <1>     ; through the multiplexer we never will read this structure. 
   379                              <1>     ; Really only 4 qwords are needed (rax-rdx) but yaknow... safety
   380 00001A21 <res 60h>           <1>     mplxRegStack    db callerFrame_size dup (?) 
    20                                  dSegLen equ ($-$$)
    21                                  
    22                                  Segment dtext code private align=1 use64
    23                                  ;---------------------------
    24                                  ;       DOS segment
    25                                  ;---------------------------
    26                                  ;DOS main data/code seg. 
    27                                  ;No separation, as this is a single binary blob.
    28                                  %include "./src/Kernel/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5                              <1> ;Encode the true version number as a macro!
     6                              <1> ;This is to avoid mutability of the true number by obtaining a pointer to it.
     7                              <1> ;Initialise the reporting version number of DOS to the true version number
     8                              <1> dosMajor equ 0  ;Version 0
     9                              <1> dosMinor equ 98 ;.98
    10                              <1> dosRev   equ 0  ;Reserved for revision number. Byte at most.
    11                              <1> dosVerFlags equ 0   ;Reserved, byte at most.
    12                              <1> dosVerMac equ (dosMinor << 8) | dosMajor    ;DOS version macro
    13                              <1> 
    14 00000000 0062                <1> dosVersion  dw dosVerMac    ;DOS version number
    15 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    15 0000000B 535953              <1>
    16 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
    16 00000017 535953              <1>
    17                              <1> ;-----------------------------------:
    18                              <1> ;        Static Data Tables         :
    19                              <1> ;-----------------------------------:
    20                              <1> ;IO Char table
    21                              <1> ;This table has Request header length, command code and error flags
    22                              <1> ; as a packed DWORD entry
    23                              <1> ioRqCmdErrTbl:
    24                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    25                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    26 0000001A 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    27 0000001E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    28 00000022 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    29 00000026 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    30 0000002A 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    31 0000002E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    32                              <1> 
    33                              <1> 
    34                              <1> 
    35                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    36                              <1> ; wish to install their own custom logic. The table below is NOT patched
    37                              <1> ; but instead, the function below gets replaced. By default, it points to 
    38                              <1> ; the function editKeys in charFunc.asm. 
    39 00000032 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    40 0000003A 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    41 0000003B 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    42                              <1> ;Extended ASCII keys with special meanings
    43 0000003C 3B                  <1> extKeyTbl   db eF1
    44 0000003D DB2C                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    45 0000003F 3C                  <1>             db eF2
    46 00000040 CD2C                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    47 00000042 3D                  <1>             db eF3
    48 00000043 D42C                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    49 00000045 3E                  <1>             db eF4
    50 00000046 092D                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    51 00000048 3F                  <1>             db eF5
    52 00000049 4E2D                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    53 0000004B 40                  <1>             db eF6
    54 0000004C 642D                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    55 0000004E 41                  <1>             db eF7
    56 0000004F 6B2D                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    57 00000051 4B                  <1>             db eCursL
    58 00000052 302C                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    59 00000054 4D                  <1>             db eCursR
    60 00000055 DB2C                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    61 00000057 52                  <1>             db eIns
    62 00000058 762D                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    63 0000005A 53                  <1>             db eDel
    64 0000005B 7D2D                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    65                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    66                              <1> 
    67                              <1> ;When counting the number of days, first compute the number of years since
    68                              <1> ; 1980 and your year. 
    69                              <1> ;Then, using the table below, find the number of leap years between 1980
    70                              <1> ; and (YourYear - 1). 
    71                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    72                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    73                              <1> ;
    74                              <1> ;Use the months table to get the number of days in a normal month as leap 
    75                              <1> ; years are added using the previous comment.
    76                              <1> 
    77                              <1> ;This table is the number of days in the month
    78                              <1> ;The function which updates the days in Feb writes the number to this table
    79                              <1> monthsTbl:  
    80 0000005D 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    80 00000066 1F1E1F              <1>
    81                              <1> 
    82                              <1> ;Error tables
    83                              <1> hardXlatTbl:
    84                              <1> ;Hard error xlat table. Used so that it can be patched by 
    85                              <1> ; multitaskers and network tools as opposed to having a static
    86                              <1> ; conversion factor as was initially. Not extensible though (thats ok)
    87 00000069 13                  <1>     db errWpd       ;Attempt to write on write protected disk
    88 0000006A 14                  <1>     db errUnkUnt    ;Unknown Unit
    89 0000006B 15                  <1>     db errDrvNR     ;Drive not ready
    90 0000006C 16                  <1>     db errUnkCmd    ;Unknown Command
    91 0000006D 17                  <1>     db errCRCerr    ;Data (CRC) error
    92 0000006E 18                  <1>     db errBadRLn    ;Bad request structure length
    93 0000006F 19                  <1>     db errSekErr    ;Seek error
    94 00000070 1A                  <1>     db errUnkMed    ;Unknown media type
    95 00000071 1B                  <1>     db errSecNF     ;Sector not Found
    96 00000072 1C                  <1>     db errNoPap     ;Printer out of paper
    97 00000073 1D                  <1>     db errWF        ;Write fault
    98 00000074 1E                  <1>     db errRF        ;Read fault
    99 00000075 1F                  <1>     db errGF        ;General fault
   100                              <1>     ;The following two adjust for share errors
   101 00000076 1F                  <1>     db errGF        ;Sharing violations
   102 00000077 1F                  <1>     db errGF        ;File Lock violation
   103 00000078 22                  <1>     db errIDC       ;Invalid Disk Change
   104                              <1> hardXlatTblL equ $ - hardXlatTbl
   105                              <1> errXlatTbl:
   106                              <1> ;Each entry is n bytes long, defined as
   107                              <1> ; Byte 0      : DOS function number for which translation will occur
   108                              <1> ; Byte 1      : Length of the table entry - 2
   109                              <1> ; Bytes n - 3 : Acceptable Error codes
   110                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   111                              <1> ;The table is terminated with a single -1 byte
   112                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   113                              <1> ; only on entry to a disk function
   114 00000079 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   115 0000007D 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   116 00000082 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   117 00000088 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   118 0000008C 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   119 00000092 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   120 00000099 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   121 0000009C 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   122 000000A0 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   123 000000A4 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   124 000000A9 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   125 000000AD 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   126 000000B3 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   127 000000BA 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   128 000000BE 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   129 000000C2 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   130 000000C5 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   131 000000C9 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   132 000000CD 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   133 000000D2 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   134 000000DA 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   135 000000DC 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   136 000000E1 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   137 000000E4 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   138 000000EA 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   139 000000EE 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   140 000000F1 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   141 000000F7 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   142 000000FE 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   143 00000104 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   144 00000108 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   145 0000010C 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   146 00000111 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   147 00000114 FF                  <1>     db -1   ;End Of Table marker
   148                              <1> 
   149                              <1> 
   150                              <1> extErrTbl:
   151                              <1> ;This table contains the default values for how to respond
   152                              <1> ; to particular errors. Fields with -1 need to be filled in before
   153                              <1> ; setting variables using this table.
   154                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   155                              <1> ; Byte 0: Extended Error Code as a byte
   156                              <1> ; Byte 1: Error Class
   157                              <1> ; Byte 2: Error Suggested Action
   158                              <1> ; Byte 3: Error Locus
   159                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   160                              <1> ;
   161                              <1> ;Error 01: Invalid function number
   162 00000115 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   163                              <1> ;Error 02: File not found
   164 00000119 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   165                              <1> ;Error 03: Path not found
   166 0000011D 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   167                              <1> ;Error 04: Too many open handles, and no handles are left
   168 00000121 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   169                              <1> ;Error 05: Access being denied
   170 00000125 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   171                              <1> ;Error 06: Invalid File handle being provided
   172 00000129 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   173                              <1> ;Error 07: MCB chain destroyed
   174 0000012D 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   175                              <1> ;Error 08: No Memory remaining
   176 00000131 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   177                              <1> ;Error 09: Invalid MCB block Address
   178 00000135 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   179                              <1> ;Error 0A: Bad Environment block
   180 00000139 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   181                              <1> ;Error 0B: Data provided in a bad format
   182 0000013D 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   183                              <1> ;Error 0C: Access Code Invalid
   184 00000141 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   185                              <1> ;Error 0D: Error due to Invalid Data provided
   186 00000145 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   187                              <1> ;Error 0F: Error due to a bad drive letter being provided
   188 00000149 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   189                              <1> ;Error 10: Error due to attempting to delete the CWD
   190 0000014D 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   191                              <1> ;Error 11: Error due to a unknown device being used
   192 00000151 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   193                              <1> ;Error 12: No more file handles available
   194 00000155 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   195                              <1> ;Error 50: Network request not supported
   196 00000159 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   197                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   198 0000015D 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   199                              <1> ;Error 21: File Locking Violation
   200 00000161 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   201                              <1> ;Error 54: Too many levels of redirection error
   202 00000165 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   203                              <1> ;Error 56: Bad resource password provided
   204 00000169 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   205                              <1> ;Error 52: Directory already exists
   206 0000016D 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   207                              <1> ;Error 32: Network request not supported by DOS
   208 00000171 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   209                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   210 00000175 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   211                              <1> ;Error 57: Bad parameter in request
   212 00000179 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   213                              <1> ;Error 53: Fail was returned from Int 24h
   214 0000017D 530D0401            <1>     db errFI24, eClsUnk, eActAbt, eLocUnk
   215                              <1> ;Error 24: Sharing Buffer Full
   216 00000181 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   217 00000185 FFFFFFFF            <1>     dd -1   ;End of table signature
   218                              <1> 
   219                              <1> ;Nationalisation stuff
   220                              <1> dosNLSPtr:      ;Symbol to point to the DOS internal NLS data
   221 00000189 0000000000000000    <1> leadingZeros:   db 8 dup (0)    ;Unknown why they are 0 in DOS
   222 00000191 5C434F554E5452592E- <1> defltCtry:      db "\COUNTRY.SYS", (64-12) dup (0) ;FQ Path to COUNTRY.SYS file
   222 0000019A 535953000000000000- <1>
   222 000001A3 000000000000000000- <1>
   222 000001AC 000000000000000000- <1>
   222 000001B5 000000000000000000- <1>
   222 000001BE 000000000000000000- <1>
   222 000001C7 000000000000000000- <1>
   222 000001D0 00                  <1>
   223 000001D1 B501                <1> defaultCP:      dw 437  ;Set to CP437 default
   224 000001D3 0500                <1> ctryFunctions:  dw 5    ;Support 5 extended functions: al=01,02,04,05,06
   225                              <1> charTableArray: ;All the qwords need fixing up here
   226                              <1> .ucTable:   ;Each table length is 9 bytes in length (except the last one)
   227 000001D5 02                  <1>     db 2
   228 000001D6 [2602000000000000]  <1>     dq ucTblExt
   229                              <1> .filenameUCTable:
   230 000001DE 04                  <1>     db 4
   231 000001DF [A802000000000000]  <1>     dq fileUCTblExt
   232                              <1> .filenameTerminatingTable:
   233 000001E7 05                  <1>     db 5
   234 000001E8 [2A03000000000000]  <1>     dq fileTermTblExt
   235                              <1> .collatingTable:
   236 000001F0 06                  <1>     db 6
   237 000001F1 [5A03000000000000]  <1>     dq collTblExt
   238                              <1> ;Extended country table
   239                              <1> extCtryTbl:
   240 000001F9 01                  <1>     db 1    ;infoIDCode (always 1), also matches function 1 value
   241                              <1>     ;Below: Length of structure (not including this word and above byte)
   242 000001FA 2A00                <1>     dw extCtryTblL
   243                              <1> .countryCode:
   244 000001FC 2C00                <1>     dw 044  ;Current (Active) Country ID (044 is UK)
   245                              <1> .activeCP:
   246 000001FE B501                <1>     dw 437  ;Current (Active) Code page (starts same as default)
   247                              <1> ;Regular country table
   248                              <1> ctryTbl:
   249                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
   250 00000200 0100                <1>     dw 1    ;Date format, UK style
   251 00000202 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
   252 00000207 2C00                <1>     db ",",0    ;Thousand separator
   253 00000209 2E00                <1>     db ".",0    ;Decimal separator
   254 0000020B 2D00                <1>     db "-",0    ;Date separator
   255 0000020D 3A00                <1>     db ":",0    ;Time separator
   256 0000020F 00                  <1>     db 0        ;Currency format, symbol leads with no space
   257 00000210 02                  <1>     db 2        ;Number of digits after decimal point
   258 00000211 00                  <1>     db 0        ;Time format, 12hr clock
   259 00000212 0000000000000000    <1>     dq 0        ;Map to function that does UC conversions
   260 0000021A 2C00                <1>     db ",",0    ;Data list separator
   261 0000021C 000000000000000000- <1>     db 10 dup (0)
   261 00000225 00                  <1>
   262                              <1> extCtryTblL equ $ - extCtryTbl.countryCode
   263                              <1> 
   264                              <1> ucTblExt:   ;External pointer to the uppercase table
   265 00000226 8000                <1>     dw 80h
   266                              <1> ucTbl:    ;Internal ptr, used by casemapfunc
   267 00000228 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   268 00000230 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   269 00000238 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   270 00000240 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   271 00000248 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   272 00000250 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   273 00000258 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   274 00000260 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   275 00000268 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   276 00000270 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   277 00000278 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   278 00000280 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   279 00000288 E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   280 00000290 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   281 00000298 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   282 000002A0 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   283                              <1> 
   284                              <1> fileUCTblExt:   ;External ptr to the uc table for filenames
   285 000002A8 8000                <1>     dw 80h
   286                              <1> fileUCTbl:    ;Internal ptr, used to convert pathspecs correctly
   287 000002AA 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   288 000002B2 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   289 000002BA 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   290 000002C2 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   291 000002CA 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   292 000002D2 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   293 000002DA B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   294 000002E2 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   295 000002EA C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   296 000002F2 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   297 000002FA D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   298 00000302 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   299 0000030A E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   300 00000312 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   301 0000031A F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   302 00000322 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   303                              <1> 
   304                              <1> fileTermTblExt:
   305 0000032A 1600                <1>     dw filenameTermTblExt_len - 2   ;Length not including this word
   306 0000032C 01                  <1>     db 1    ;Signature byte for the table (1)
   307 0000032D 00                  <1>     db 0    ;Lowest permissible char value for filename
   308 0000032E FF                  <1>     db -1   ;Highest permissible char value for filename
   309 0000032F 00                  <1>     db 0    ;Signature byte for DOS 3.3 (0)
   310                              <1> .startBadRange:
   311 00000330 00                  <1>     db 0    ;Start of the illegal range of filename chars
   312                              <1> .endBadRange:
   313 00000331 20                  <1>     db 20h  ;End of the illegal range of filename chars (inclusive)
   314 00000332 02                  <1>     db 2    ;Signature byte for DOS 3.3 (2)
   315                              <1> fileTermTbl:
   316 00000333 0E                  <1>     db fileTermTbl_len - 1 ;Length of the table below
   317 00000334 2E222F5C5B5D        <1>     db ".", '"', "/", "\", "[", "]", 
   318 0000033A 3A7C3C3E2B3D3B2C    <1>     db ":", "|", "<",">","+","=",";",","
   319                              <1>     fileTermTbl_len equ $ - fileTermTbl
   320                              <1>     filenameTermTblExt_len equ $ - fileTermTblExt
   321                              <1>     ;Buffer space
   322 00000342 000000000000000000- <1>     db 24 dup (0) ;DOS 3.30 has this buffer present
   322 0000034B 000000000000000000- <1>
   322 00000354 000000000000        <1>
   323                              <1> 
   324                              <1> collTblExt:  ;Collating sequence table, for sorting
   325 0000035A 0001                <1>     dw 0100h
   326                              <1> collTbl:
   327 0000035C 0001020304050607    <1>     db 000h, 001h, 002h, 003h, 004h, 005h, 006h, 007h
   328 00000364 08090A0B0C0D0E0F    <1>     db 008h, 009h, 00Ah, 00Bh, 00Ch, 00Dh, 00Eh, 00Fh
   329 0000036C 1011121314151617    <1>     db 010h, 011h, 012h, 013h, 014h, 015h, 016h, 017h
   330 00000374 18191A1B1C1D1E1F    <1>     db 018h, 019h, 01Ah, 01Bh, 01Ch, 01Dh, 01Eh, 01Fh
   331 0000037C 2021222324252627    <1>     db 020h, 021h, 022h, 023h, 024h, 025h, 026h, 027h
   332 00000384 28292A2B2C2D2E2F    <1>     db 028h, 029h, 02Ah, 02Bh, 02Ch, 02Dh, 02Eh, 02Fh
   333 0000038C 3031323334353637    <1>     db 030h, 031h, 032h, 033h, 034h, 035h, 036h, 037h
   334 00000394 38393A3B3C3D3E3F    <1>     db 038h, 039h, 03Ah, 03Bh, 03Ch, 03Dh, 03Eh, 03Fh
   335 0000039C 4041424344454647    <1>     db 040h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   336 000003A4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   337 000003AC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   338 000003B4 58595A5B5C5D5E5F    <1>     db 058h, 059h, 05Ah, 05Bh, 05Ch, 05Dh, 05Eh, 05Fh
   339 000003BC 6041424344454647    <1>     db 060h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   340 000003C4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   341 000003CC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   342 000003D4 58595A7B7C7D7E7F    <1>     db 058h, 059h, 05Ah, 07Bh, 07Ch, 07Dh, 07Eh, 07Fh
   343 000003DC 4355454141414143    <1>     db 043h, 055h, 045h, 041h, 041h, 041h, 041h, 043h
   344 000003E4 4545454949494141    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 041h, 041h
   345 000003EC 4541414F4F4F5555    <1>     db 045h, 041h, 041h, 04Fh, 04Fh, 04Fh, 055h, 055h
   346 000003F4 594F552424242424    <1>     db 059h, 04Fh, 055h, 024h, 024h, 024h, 024h, 024h
   347 000003FC 41494F554E4EA6A7    <1>     db 041h, 049h, 04Fh, 055h, 04Eh, 04Eh, 0A6h, 0A7h
   348 00000404 3FA9AAABAC212222    <1>     db 03Fh, 0A9h, 0AAh, 0ABh, 0ACh, 021h, 022h, 022h
   349 0000040C B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   350 00000414 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   351 0000041C C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   352 00000424 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   353 0000042C D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   354 00000434 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   355 0000043C E053E2E3E4E5E6E7    <1>     db 0E0h, 053h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   356 00000444 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   357 0000044C F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   358 00000454 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   359                              <1> 
   360                              <1> asciiCharProperties:   ;This table is const. Gives "properties" of chars.
   361                              <1> ;Bit[0]=Clear if the char is an invalid filename character.
   362                              <1> ;Bit[1]=Clear if the char of a terminating type.
   363                              <1> ;Bit[2]=Clear if the char is of separator type.
   364                              <1> ;Bit[3]=Clear if the char is an invalid FCB name character.
   365                              <1> ;Bit[4-7]=Unused.    
   366                              <1> 
   367 0000045C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 00h-07h
   368 00000464 F6F0F6F6F6F6F6F6    <1>     db 0F6h, 0F0h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 08h-0Fh
   369 0000046C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 10h-17h
   370 00000474 F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 18h-1Fh
   371 0000047C F8FFF6FFFFFFFFFF    <1>     db 0F8h, 0FFh, 0F6h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 20h-27h
   372 00000484 FFFFFFF4F4FFFEF6    <1>     db 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h   ;Chars 28h-2Fh
   373 0000048C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 30h-37h
   374 00000494 FFFFF4F4F4F4F4FF    <1>     db 0FFh, 0FFh, 0F4h, 0F4h, 0F4h, 0F4h, 0F4h, 0FFh   ;Chars 38h-3Fh
   375 0000049C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 40h-47h
   376 000004A4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 48h-4Fh
   377 000004AC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 50h-57h
   378 000004B4 FFFFFFF6F6F6FFFF    <1>     db 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh   ;Chars 58h-5Fh
   379 000004BC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 60h-67h
   380 000004C4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 68h-6Fh
   381 000004CC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 70h-77h
   382 000004D4 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   ;Chars 78h-7Fh
   383 000004DC FFFFFFFFFFFFFFFFFF- <1>     db 128 dup (0FFh)                                   ;Chars 80h-100h
   383 000004E5 FFFFFFFFFFFFFFFFFF- <1>
   383 000004EE FFFFFFFFFFFFFFFFFF- <1>
   383 000004F7 FFFFFFFFFFFFFFFFFF- <1>
   383 00000500 FFFFFFFFFFFFFFFFFF- <1>
   383 00000509 FFFFFFFFFFFFFFFFFF- <1>
   383 00000512 FFFFFFFFFFFFFFFFFF- <1>
   383 0000051B FFFFFFFFFFFFFFFFFF- <1>
   383 00000524 FFFFFFFFFFFFFFFFFF- <1>
   383 0000052D FFFFFFFFFFFFFFFFFF- <1>
   383 00000536 FFFFFFFFFFFFFFFFFF- <1>
   383 0000053F FFFFFFFFFFFFFFFFFF- <1>
   383 00000548 FFFFFFFFFFFFFFFFFF- <1>
   383 00000551 FFFFFFFFFFFFFFFFFF- <1>
   383 0000055A FFFF                <1>
    29                                  %include "./src/Kernel/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 0000055C 2C57                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
     5 0000055E 7D21                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
     6 00000560 8A21                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
     7 00000562 6022                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
     8 00000564 8A22                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
     9 00000566 9222                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    10 00000568 AA22                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    11 0000056A DE22                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    12 0000056C 0423                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    13 0000056E 6323                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    14 00000570 1E26                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    15 00000572 7323                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    16 00000574 8023                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    17 00000576 4F73                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    18 00000578 8373                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    19 0000057A FB2D                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    20 0000057C 702E                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    21 0000057E 962B                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    22 00000580 522C                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    23 00000582 D92C                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    24 00000584 702E                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    25 00000586 702E                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    26 00000588 FB2D                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    27 0000058A 082D                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    28 0000058C 2C76                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    29 0000058E 9C73                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    30 00000590 C62D                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    31 00000592 A373                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    32 00000594 A573                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    33 00000596 2C76                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    34 00000598 2C76                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    35 0000059A 5274                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    36 0000059C 2C76                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    37 0000059E 702E                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    38 000005A0 702E                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    39 000005A2 732D                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    40 000005A4 702E                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    41 000005A6 EE73                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    42 000005A8 3156                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    43 000005AA 702E                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    44 000005AC 702E                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    45 000005AE EC2D                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    46 000005B0 A428                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    47 000005B2 D128                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    48 000005B4 E128                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    49 000005B6 0229                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    50 000005B8 1874                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    51 000005BA D92D                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    52 000005BC 2674                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    53 000005BE FE56                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    54 000005C0 5474                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    55 000005C2 7972                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    56 000005C4 8C74                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    57 000005C6 9D74                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    58 000005C8 AC74                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    59 000005CA CD5F                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    60 000005CC F65F                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    61 000005CE 9917                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    62 000005D0 FA19                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    63 000005D2 F81B                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    64 000005D4 7230                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    65 000005D6 8330                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    66 000005D8 C531                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    67 000005DA 0332                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    68 000005DC 3E32                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    69 000005DE 4A32                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    70 000005E0 AF32                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    71 000005E2 2033                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    72 000005E4 2B4C                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    73 000005E6 3E34                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    74 000005E8 7934                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    75 000005EA 801D                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    76 000005EC C150                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    77 000005EE C552                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    78 000005F0 CD53                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    79 000005F2 9358                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    80 000005F4 2E57                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    81 000005F6 F074                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    82 000005F8 8E34                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    83 000005FA F934                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
    84 000005FC C372                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
    85 000005FE CC72                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
    86 00000600 FE74                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
    87 00000602 0F75                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
    88 00000604 F275                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
    89 00000606 1E56                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
    90 00000608 2935                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
    91 0000060A B535                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
    92 0000060C 7555                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
    93 0000060E F975                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
    94 00000610 2536                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
    95 00000612 ED36                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
    96 00000614 0137                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
    97 00000616 2D76                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
    98 00000618 F177                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
    99 0000061A 5778                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   100 0000061C F51D                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   101 0000061E E672                <1>     dw systemServices - kDispTbl      ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 00000620 D572                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   103 00000622 2C76                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   104 00000624 DE72                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   105 00000626 8F60                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   106 00000628 5361                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   107 0000062A 6D37                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   108 0000062C AB38                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   109                              <1>     ;dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 0000062E 30                  <1>     db mDispTblL/2  ;Number of entries in table
   114 0000062F 3578                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   115 00000631 1D41                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   116 00000633 E96B                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   117 00000635 3878                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   118 00000637 386D                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   119 00000639 BA20                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   120 0000063B 0362                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   121 0000063D 7800                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   122 0000063F 014B                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   123 00000641 6F01                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   124 00000643 A079                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   125 00000645 0C79                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   126 00000647 893D                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   127 00000649 B12A                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   128 0000064B B300                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   129 0000064D CD00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   130 0000064F DB00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   131 00000651 B36D                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   132 00000653 946D                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   133 00000655 446D                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   134 00000657 CE6E                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   135 00000659 4001                <1>     dw flushAndCleanBuffer - mDispTbl   ;AX=1215h
   136 0000065B 254A                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   137 0000065D 066D                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   138 0000065F 176C                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   139 00000661 AB6C                <1>     dw getCDS - mDispTbl    ;AX=1219h
   140 00000663 6F0E                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   141 00000665 442A                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   142 00000667 8C78                <1>     dw mpxChecksum - mDispTbl  ;AX=121Ch -> Checksum memory
   143 00000669 9978                <1>     dw mpxSum - mDispTbl  ;AX=121Dh -> Sum Memory
   144 0000066B CC6D                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   145 0000066D 556C                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   146 0000066F 5A4A                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   147 00000671 191D                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   148 00000673 4171                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   149 00000675 3316                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   150 00000677 E878                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   151 00000679 896D                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   152                              <1>     ;The file ops need all vars setup as if accessing thru DOS
   153 0000067B 4078                <1>     dw mpxOpen - mDispTbl       ;AX=1226h, Open File
   154 0000067D F330                <1>     dw closeFileHdl - mDispTbl  ;AX=1227h, Close File
   155 0000067F 4878                <1>     dw mpxLseek - mDispTbl      ;AX=1228h, LSEEK
   156 00000681 3131                <1>     dw readFileHdl - mDispTbl   ;AX=1229h, Read File
   157 00000683 5A75                <1>     dw noOp - mDispTbl          ;AX=122Ah, Nop, Set FASTOPEN EP (reserved)
   158 00000685 6A78                <1>     dw mpxIOCTL - mDispTbl      ;AX=122Bh, IOCTL
   159 00000687 026F                <1>     dw getDrvChain - mDispTbl   ;AX=122Ch, Get device Chain (ptr in rax)
   160 00000689 0D6F                <1>     dw getExtErrCde - mDispTbl  ;AX=122Dh, Get extended error code
   161 0000068B 5A75                <1>     dw noOp - mDispTbl          ;AX=122Eh, Nop, Get/Set error table (reserved)
   162 0000068D 6973                <1>     dw setDOSversion - mDispTbl ;AX=122Fh, Set DOS version to report. Undocumented.
   163                              <1> mDispTblL   equ     $ - mDispTbl
   164                              <1> 
   165                              <1> serverDispTbl:  ;Server Dispatch functions
   166 0000068F 0B                  <1>     db serverDispTblL/2                         ;Number of entries
   167 00000690 4175                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   168 00000692 9375                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   169 00000694 EC75                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   170 00000696 FD75                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   171 00000698 0576                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   172 0000069A 0D76                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   173 0000069C 2876                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   174 0000069E 5276                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   175 000006A0 5276                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   176 000006A2 5276                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   177 000006A4 5F76                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
   178                              <1> serverDispTblL   equ     $ - serverDispTbl
    30                                  %include "./src/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 2Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 000006A6 48393D(5D000000)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000006AD 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000006AF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    13 000006B0 56                  <1>     push rsi
    14 000006B1 488B35(5D000000)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 000006B8 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 000006BB 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 000006BD 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 000006C0 EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 000006C2 57                  <1>     push rdi
    22 000006C3 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 000006C6 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 000006C9 5F                  <1>     pop rdi ;Get original buf back
    25 000006CA 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 000006CD 488735(5D000000)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 000006D4 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 000006D7 5E                  <1>     pop rsi
    29                              <1>     return
    13                              <2> %%_ret:
    14 000006D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                              <1> 
    31                              <1> markBuffersAsUnreferencedWrapper:
    32                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    33                              <1> ; and preserves rdi
    34 000006D9 57                  <1>     push rdi
    35 000006DA E802000000          <1>     call markBuffersAsUnreferenced
    36 000006DF 5F                  <1>     pop rdi
    37                              <1>     return
    13                              <2> %%_ret:
    14 000006E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                              <1> 
    39                              <1> markBuffersAsUnreferenced:  ;Int 2Fh AX=120Eh
    40                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    41                              <1> ;Output: rdi = First disk buffer
    42 000006E1 488B3D(5D000000)    <1>     mov rdi, [bufHeadPtr]
    43 000006E8 57                  <1>     push rdi
    44                              <1> .lp:
    45 000006E9 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    46 000006ED 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    47 000006F0 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    48 000006F7 75F0                <1>     jne .lp
    49 000006F9 5F                  <1>     pop rdi
    50                              <1>     return
    13                              <2> %%_ret:
    14 000006FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    51                              <1> 
    52                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 2Fh AX=120Fh
    53                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    54                              <1> ; second buffer in the chain in rdi
    55                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    56                              <1> ;Output: rdi = Second buffer in the chain
    57 000006FB 52                  <1>     push rdx
    58 000006FC 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    59 000006FF E8A2FFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    60 00000704 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    61 00000707 5A                  <1>     pop rdx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00000708 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> findUnreferencedBuffer: ;Int 2Fh AX=1210h
    65                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    66                              <1> ;Input: rdi = Buffer header to start searching at
    67                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    68                              <1> ;        ZF=ZE => No unreferenced buffer found
    69 00000709 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    70 0000070D 750C                <1>     jnz .exit
    71 0000070F 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    72 00000712 4881FFFFFFFFFF      <1>     cmp rdi, -1
    73 00000719 75EE                <1>     jne findUnreferencedBuffer  ;Check next buffer unless rdi = -1
    74                              <1> .exit:
    75                              <1>     return
    13                              <2> %%_ret:
    14 0000071B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    76                              <1> 
    77                              <1> flushAllBuffersForDPB:  ;External linkage
    78                              <1> ;Wrapper to allow calls to the below functions from the workingDPB
    79 0000071C 50                  <1>     push rax
    80 0000071D 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
    81 00000724 0FB600              <1>     movzx eax, byte [rax + dpb.bDriveNumber]
    82 00000727 E802000000          <1>     call flushAllBuffersForDrive
    83 0000072C 58                  <1>     pop rax
    84                              <1>     return
    13                              <2> %%_ret:
    14 0000072D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> 
    86                              <1> flushAllBuffersForDrive:    ;External linkage (2 - diskReset/exit)
    87                              <1> ; Flushes and resets the dirty bit for all dirty bufs in buffer chain.
    88                              <1> ; Used also to allow flushing all buffers
    89                              <1> ; Input: al = 0-based physical drive number we are xacting on
    90                              <1> ; Returns: CF=NC => All is well, buffers flushed and dirty bits cleaned
    91                              <1> ;          CF=CY => A Buffer failed to flush, it was lost.
    92 0000072E 57                  <1>     push rdi
    93 0000072F 50                  <1>     push rax
    94 00000730 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
    95 00000737 B4FF                <1>     mov ah, -1  ;Set to ignore no buffers
    96                              <1> .mainLp:
    97 00000739 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
    98 00000740 741E                <1>     je .exit   
    99 00000742 E827000000          <1>     call flushAndCleanBuffer    ;Flush this buffer if it is on the DPB we want
   100 00000747 50                  <1>     push rax
   101 00000748 0FB64708            <1>     movzx eax, byte [rdi + bufferHdr.driveNumber]
   102 0000074C 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this a buffer on the error drive?
   103 00000752 58                  <1>     pop rax
   104 00000753 7405                <1>     je .errDrv    ;If not, goto next buffer
   105                              <1> .nextBuffer:
   106 00000755 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   107 00000758 EBDF                <1>     jmp short .mainLp
   108                              <1> .errDrv:
   109 0000075A C64708FF            <1>     mov byte [rdi + bufferHdr.driveNumber], -1  ;Free the buffer if caused error
   110 0000075E EBF5                <1>     jmp short .nextBuffer
   111                              <1> .exit:
   112 00000760 58                  <1>     pop rax
   113 00000761 5F                  <1>     pop rdi
   114 00000762 F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;Did we xlat error?
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000769 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000076B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   116 0000076C F9                  <1>     stc ;If so, return CF=CY
   117                              <1>     return
    13                              <2> %%_ret:
    14 0000076D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> 
   119                              <1> flushAndCleanBuffer:   ;Internal Linkage Int 2Fh AX=1215h
   120                              <1> ;Flushes and cleans the dirty bit from the buffer
   121                              <1> ;Input: AH = Drives to ignore flush for
   122                              <1> ;       AL = Drive to flush for. If AL=AH, take this buffer unless ignored!
   123                              <1> ;       rdi -> Buffer in question
   124 0000076E 3A6708              <1>     cmp ah, byte [rdi + bufferHdr.driveNumber]  ;Is this an ignorable drv number?
   125                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000771 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000773 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   126 00000774 38C4                <1>     cmp ah, al  ;Do we ignore ourselves?
   127 00000776 7407                <1>     je .takeThisBuffer
   128 00000778 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber] ;Is this an acceptable buffer?
   129 0000077B F8                  <1>     clc
   130                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000077C 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000077E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   131                              <1> .takeThisBuffer:
   132 0000077F F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer   ;Is it dirty?
   133                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000783 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000785 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   134 00000786 50                  <1>     push rax    ;Save the drive number
   135 00000787 0FB74708            <1>     movzx eax, word [rdi + bufferHdr.wDrvNumFlg]
   136 0000078B 50                  <1>     push rax    ;Save the buffer flags
   137 0000078C E80C000000          <1>     call flushAndFreeBuffer
   138 00000791 58                  <1>     pop rax     ;Get back the flags
   139 00000792 7207                <1>     jc .exit
   140 00000794 80E4BF              <1>     and ah, ~dirtyBuffer    ;Clean the dirty bit
   141 00000797 66894708            <1>     mov word [rdi + bufferHdr.wDrvNumFlg], ax  ;And return the drv/flags!
   142                              <1> .exit:  
   143 0000079B 58                  <1>     pop rax     ;Get back the drive number
   144                              <1>     return
    13                              <2> %%_ret:
    14 0000079C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   145                              <1> 
   146                              <1> flushAndFreeBuffer:    ;Int 2Fh AX=1209h 
   147                              <1> ;Frees, then attempts flushes the data in a sector buffer to disk!
   148                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   149                              <1> ;Exit:  CF=NC : Success
   150                              <1> ;       CF=CY : Fail, terminate the request
   151 0000079D 50                  <1>     push rax
   152 0000079E 53                  <1>     push rbx
   153 0000079F 51                  <1>     push rcx
   154 000007A0 52                  <1>     push rdx
   155 000007A1 56                  <1>     push rsi
   156 000007A2 55                  <1>     push rbp
   157                              <1> ;If the buffer is freed, skip flushing to avoid issues
   158 000007A3 B8FF000000          <1>     mov eax, freeBuffer
   159 000007A8 66874708            <1>     xchg ax, word [rdi + bufferHdr.driveNumber] ;Free the buffer, get flags
   160                              <1>     ;ah = Flags, al = Drive number
   161 000007AC 3CFF                <1>     cmp al, -1  ;-1 means free buffer
   162 000007AE 7470                <1>     je .fbFreeExit  ;If it was free, exit
   163 000007B0 F6C440              <1>     test ah, dirtyBuffer    ;Data modified?
   164 000007B3 746B                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   165 000007B5 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this drive the error drive?    
   166 000007BB 7463                <1>     je .fbFreeExit  ;Skip write if this disk has caused an error
   167 000007BD C605(68040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   168 000007C4 F6C408              <1>     test ah, dataBuffer
   169 000007C7 7407                <1>     jz .fbWriteSetup
   170 000007C9 800D(68040000)20    <1>     or byte [Int24bitfld], critIgnorOK  ;If this is a data buffer, we can ignore too
   171                              <1> .fbWriteSetup:
   172 000007D0 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   173 000007D5 F6C402              <1>     test ah, fatBuffer
   174 000007D8 7406                <1>     jz .fbWriteNotFat
   175 000007DA 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   176                              <1> .fbWriteNotFat:
   177 000007E0 0FB64F12            <1>     movzx ecx, byte [rdi + bufferHdr.bufFATcopy]   ;And FAT copies (if FAT sector)
   178 000007E4 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   179 000007E8 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   180 000007EC 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   181                              <1> .fbWriteDisk:
   182 000007F0 50                  <1>     push rax    ;Save the drive number and flags
   183 000007F1 53                  <1>     push rbx    ;Has pointer to buffer data area
   184 000007F2 51                  <1>     push rcx    ;# of FAT sectors
   185 000007F3 52                  <1>     push rdx    ;The LBA of the buffer that we are writing
   186 000007F4 56                  <1>     push rsi    ;Error counter (5 for FAT sectors, 3 otherwise) 
   187 000007F5 55                  <1>     push rbp    ;DPB ptr for drive
   188 000007F6 B901000000          <1>     mov ecx, 1  ;One sector to copy
   189 000007FB E8BC680000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   190 00000800 E8ED660000          <1>     call absDiskDriverCall    ;Make Driver Request
   191 00000805 5D                  <1>     pop rbp
   192 00000806 5E                  <1>     pop rsi
   193 00000807 5A                  <1>     pop rdx
   194 00000808 59                  <1>     pop rcx
   195 00000809 5B                  <1>     pop rbx
   196                              <1>     ;Don't pop rax here to carry the error code if error!
   197 0000080A 751C                <1>     jnz .fbFail
   198                              <1> ;Now check if the buffer was a FAT, to write additional copies
   199 0000080C 58                  <1>     pop rax ;Now pop the drive number and flags off the stack
   200 0000080D F6C402              <1>     test ah, fatBuffer ;FAT buffer?
   201 00000810 740E                <1>     jz .fbFreeExit  ;If not, exit
   202 00000812 FFC9                <1>     dec ecx
   203 00000814 740A                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   204 00000816 50                  <1>     push rax
   205 00000817 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   206 0000081A 4801C2              <1>     add rdx, rax ;Add the FAT size to the LBA (rdx has LBA number)
   207 0000081D 58                  <1>     pop rax
   208 0000081E EBD0                <1>     jmp short .fbWriteDisk ;Make another request for the other FAT copy
   209                              <1> .fbFreeExit:
   210 00000820 F8                  <1>     clc
   211                              <1> .fbExitFail:
   212 00000821 5D                  <1>     pop rbp
   213 00000822 5E                  <1>     pop rsi
   214 00000823 5A                  <1>     pop rdx
   215 00000824 59                  <1>     pop rcx
   216 00000825 5B                  <1>     pop rbx
   217 00000826 58                  <1>     pop rax
   218                              <1>     return
    13                              <2> %%_ret:
    14 00000827 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   219                              <1> .fbFail:
   220                              <1> ;Enter here only if the request failed
   221 00000828 FFCE                <1>     dec esi
   222 0000082A 7403                <1>     jz .fbHardError ;Once we have tried it a number of times, fail!
   223 0000082C 58                  <1>     pop rax     ;Else pop back the drive number and flags
   224 0000082D EBC1                <1>     jmp short .fbWriteDisk ;Try the request again!
   225                              <1> .fbHardError:
   226                              <1> ;Request failed thrice, critical error call
   227                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   228 0000082F 800D(68040000)01    <1>     or byte [Int24bitfld], critWrite ;Set the initial bitfield to write req
   229 00000836 E8095F0000          <1>     call diskIOError ;Call with rdi = Buffer header and eax = Status Word
   230 0000083B 3C01                <1>     cmp al, critRetry
   231 0000083D 58                  <1>     pop rax     ;Now pop back the drive number and flags from the stack!
   232 0000083E 7490                <1>     je .fbWriteSetup   ;If we retry, we rebuild the stack, values possibly trashed
   233                              <1>     ;Else we fail (Ignore=Fail here)
   234 00000840 F9                  <1>     stc ;Set error flag to indicate fail
   235 00000841 EBDE                <1>     jmp short .fbExitFail
   236                              <1> 
   237                              <1> testDirtyBufferForDrive:    ;External linkage
   238                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   239                              <1> ;Input: al = Drive number (0 based)
   240                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   241                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   242 00000843 53                  <1>     push rbx
   243 00000844 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   244                              <1> .tdbfdCheckBuffer:
   245 0000084B 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   246 0000084E 7509                <1>     jne .tdbfdGotoNextBuffer
   247 00000850 F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   248 00000854 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   249 00000856 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   250                              <1> .tdbfdExit:
   251 00000857 5B                  <1>     pop rbx
   252                              <1>     return
    13                              <2> %%_ret:
    14 00000858 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   253                              <1> .tdbfdGotoNextBuffer:
   254 00000859 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   255 0000085C 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   256 00000863 74F2                <1>     je .tdbfdExit
   257 00000865 EBE4                <1>     jmp short .tdbfdCheckBuffer
   258                              <1> 
   259                              <1> freeBuffersForDrive:  ;External Linkage (Before Get BPB in medchk)
   260                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   261                              <1> ; to have a drive number of -1, thus freeing it
   262                              <1> ;Given Drive number is in al
   263 00000867 57                  <1>     push rdi
   264 00000868 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   265                              <1> .i0:
   266 0000086F 4881FFFFFFFFFF      <1>     cmp rdi, -1
   267 00000876 7417                <1>     je .exit
   268 00000878 384708              <1>     cmp byte [rdi + bufferHdr.driveNumber], al  ;Chosen Drive?
   269 0000087B 750D                <1>     jne .i1 ;If no, skip freeing
   270 0000087D 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   271 00000883 E873FEFFFF          <1>     call makeBufferMostRecentlyUsedGetNext
   272 00000888 EBE5                <1>     jmp short .i0
   273                              <1> .i1:
   274 0000088A 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;goto next buffer
   275 0000088D EBE0                <1>     jmp short .i0
   276                              <1> .exit:
   277 0000088F 5F                  <1>     pop rdi
   278                              <1>     return
    13                              <2> %%_ret:
    14 00000890 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   279                              <1> 
   280                              <1> markBufferDirty:
   281 00000891 55                  <1>     push rbp
   282 00000892 9C                  <1>     pushfq
   283 00000893 488B2D(3E070000)    <1>     mov rbp, qword [currBuff]
   284 0000089A 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   285 0000089E 9D                  <1>     popfq
   286 0000089F 5D                  <1>     pop rbp
   287                              <1>     return
    13                              <2> %%_ret:
    14 000008A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   288                              <1> 
   289                              <1> getBuffer: ;Internal Linkage ONLY
   290                              <1> ;
   291                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   292                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   293                              <1> ;Flushes if not in disk change mode. 
   294                              <1> ;If in disk change mode, will check to see if the selected buffer 
   295                              <1> ; has data referring a device using the same DPB as we are changing.
   296                              <1> ; If it is, skip flushing, if not, flush first!
   297                              <1> ;
   298                              <1> ;This function will return a pointer to the desired data sector OR 
   299                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   300                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   301                              <1> ;Entry: rax = Sector to read
   302                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   303                              <1> ;       rsi = DPB to use for transaction
   304                              <1> ;Exit:  CF=NC => 
   305                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   306                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   307 000008A1 51                  <1>     push rcx
   308 000008A2 52                  <1>     push rdx
   309 000008A3 56                  <1>     push rsi
   310 000008A4 57                  <1>     push rdi
   311 000008A5 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   312 000008A7 E81F010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   313 000008AC 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   314 000008B3 741F                <1>     je .rbReadNewSector
   315 000008B5 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   316 000008BC E8E5FDFFFF          <1>     call makeBufferMostRecentlyUsed
   317 000008C1 F8                  <1>     clc
   318                              <1> .rbExit:
   319 000008C2 5F                  <1>     pop rdi
   320 000008C3 5E                  <1>     pop rsi
   321 000008C4 5A                  <1>     pop rdx
   322 000008C5 59                  <1>     pop rcx
   323 000008C6 9C                  <1>     pushfq
   324 000008C7 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   325 000008CE 804B0920            <1>     or byte [rbx + bufferHdr.bufferFlags], refBuffer    ;Mark as referenced!
   326 000008D2 9D                  <1>     popfq
   327                              <1>     return
    13                              <2> %%_ret:
    14 000008D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   328                              <1> .rbReadNewSector:
   329 000008D4 E89B000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   330 000008D9 E8BFFEFFFF          <1>     call flushAndFreeBuffer
   331 000008DE 72E2                <1>     jc .rbExit    ;Preserve the set carry flag
   332                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   333                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   334                              <1>     ; is no longer owned by that File so we mark the owner as none
   335 000008E0 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   336 000008E3 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   337 000008E6 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   338 000008EA 80F902              <1>     cmp cl, fatBuffer
   339 000008ED B201                <1>     mov dl, 1   ;Default values if not fat buffer
   340 000008EF 7503                <1>     jne .rbNonFATbuffer
   341 000008F1 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   342                              <1> .rbNonFATbuffer:
   343 000008F4 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   344 000008F7 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   345 000008FA 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   346 000008FD 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   347 00000901 C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   348 00000905 E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   349 0000090A EBB6                <1>     jmp short .rbExit   ;Jump preserving the carry flag
   350                              <1> 
   351                              <1> readSectorBuffer:   ;Internal Linkage
   352                              <1> ;Reads a sector into a built sector buffer
   353                              <1> ;Entry: rdi = Pointer to buffer header
   354                              <1> ;Exit:  CF=NC : Success
   355                              <1> ;       CF=CY : Fail, terminate the request
   356                              <1> ;       rbx pointing to buffer header
   357                              <1> ;First make request to device driver
   358 0000090C 50                  <1>     push rax
   359 0000090D 53                  <1>     push rbx
   360 0000090E 51                  <1>     push rcx
   361 0000090F 52                  <1>     push rdx
   362 00000910 56                  <1>     push rsi
   363 00000911 55                  <1>     push rbp
   364                              <1> .rsRequest0:
   365 00000912 BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   366 00000917 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   367 0000091B 7406                <1>     jz .rsRequest1
   368 0000091D 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   369                              <1> .rsRequest1:
   370 00000923 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   371 00000926 B901000000          <1>     mov ecx, 1  ;One sector to copy
   372 0000092B 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   373 0000092F 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   374 00000933 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   375 00000937 E88B670000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   376 0000093C E8B1650000          <1>     call absDiskDriverCall    ;Make Driver Request
   377 00000941 7508                <1>     jnz .rsFail
   378                              <1> .rsExit:
   379 00000943 F8                  <1>     clc
   380                              <1> .rsExitFail:
   381 00000944 5D                  <1>     pop rbp
   382 00000945 5E                  <1>     pop rsi
   383 00000946 5A                  <1>     pop rdx
   384 00000947 59                  <1>     pop rcx
   385 00000948 5B                  <1>     pop rbx
   386 00000949 58                  <1>     pop rax
   387                              <1>     return
    13                              <2> %%_ret:
    14 0000094A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   388                              <1> .rsFail:
   389                              <1> ;Enter here only if the request failed
   390 0000094B FFCE                <1>     dec esi
   391 0000094D 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   392                              <1> ;Request failed thrice, critical error call
   393                              <1> ;First free the buffer if we failed to read data into it. 
   394                              <1> ;We free this buffer to free the resource if the user aborts.
   395                              <1> ;This function is called in a critical section so the buffer pointer
   396                              <1> ; is under no thread of being reallocated.
   397                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   398 0000094F 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer ;Free buffer and clear dirty/ref bits
   399 00000955 C605(68040000)00    <1>     mov byte [Int24bitfld], critRead    ;Set the initial bitfield to read req
   400 0000095C E8E35D0000          <1>     call diskIOError    ;Returns rbp -> DPB and rdi -> Buffer, al = Action code
   401 00000961 3C01                <1>     cmp al, critRetry
   402 00000963 7509                <1>     jne .fail   ;Else we fail (Ignore=Fail here)
   403 00000965 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]    ;Get drv num to put back
   404 00000969 884708              <1>     mov byte [rdi + bufferHdr.driveNumber], al ;Put it back (buffer type bits set)
   405 0000096C EBA4                <1>     jmp short .rsRequest0
   406                              <1> .fail:
   407 0000096E F9                  <1>     stc ;Set error flag to indicate fail
   408 0000096F E9D0FFFFFF          <1>     jmp .rsExitFail
   409                              <1>     
   410                              <1> findLRUBuffer: ;Internal Linkage
   411                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   412                              <1> ; in rdi and the currBuff variable
   413                              <1> ;Input: Nothing
   414                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   415                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   416 00000974 52                  <1>     push rdx
   417 00000975 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   418 0000097C 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   419 00000980 7436                <1>     je .flbExit 
   420 00000982 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   421 00000989 742D                <1>     je .flbExit
   422                              <1> .flbWalk:
   423 0000098B 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   424 0000098E 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   425 00000991 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   426 00000995 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   427 00000997 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   428 0000099E 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   429 000009A0 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   430                              <1> .flbHeadLink:
   431 000009A7 488B15(5D000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   432 000009AE 48893D(5D000000)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   433 000009B5 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   434                              <1> .flbExit:
   435 000009B8 5A                  <1>     pop rdx
   436 000009B9 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   437                              <1>     return
    13                              <2> %%_ret:
    14 000009C0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   438                              <1> .flbFreeLink:
   439 000009C1 51                  <1>     push rcx
   440 000009C2 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   441 000009C5 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   442 000009C8 59                  <1>     pop rcx
   443 000009C9 EBDC                <1>     jmp short .flbHeadLink
   444                              <1> 
   445                              <1> findSectorInBuffer:     ;Internal linkage
   446                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   447                              <1> ;If the sector is not in a buffer, returns with a -1
   448                              <1> ;Input: rax = Sector number
   449                              <1> ;       dl = Drive number
   450                              <1> ;Output: rdi = Buffer hdr pointer or -1
   451 000009CB 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   452                              <1> .fsiCheckBuffer:
   453 000009D2 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   454 000009D5 7507                <1>     jne .fsiGotoNextBuffer
   455 000009D7 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   456 000009DB 7501                <1>     jne .fsiGotoNextBuffer
   457                              <1> .fsiExit:
   458                              <1>     return
    13                              <2> %%_ret:
    14 000009DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   459                              <1> .fsiGotoNextBuffer:
   460 000009DE 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   461 000009E1 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   462 000009E8 74F3                <1>     je .fsiExit
   463 000009EA EBE6                <1>     jmp short .fsiCheckBuffer
   464                              <1> 
   465                              <1> ;-----------------------------------------------------------------------------
   466                              <1> ;SPECIAL BUFFER FUNCTIONS
   467                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   468                              <1> ; ALL sector types need to setup [workingDPB] to make the transfer
   469                              <1> ;-----------------------------------------------------------------------------
   470                              <1> getBufForDOS:
   471                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   472                              <1> ;Input: [workingDPB] = DPB to transact on
   473                              <1> ;       rax = Sector to transfer
   474                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   475 000009EC 51                  <1>     push rcx
   476 000009ED B101                <1>     mov cl, dosBuffer
   477 000009EF EB0D                <1>     jmp short getBufCommon
   478                              <1> getBufForFat:
   479                              <1> ;Returns a buffer to use for fat data in rbx
   480                              <1> ;Input: [workingDPB] = DPB to transact on
   481                              <1> ;       rax = Sector to transfer
   482                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   483 000009F1 51                  <1>     push rcx
   484 000009F2 B102                <1>     mov cl, fatBuffer
   485 000009F4 EB08                <1>     jmp short getBufCommon
   486                              <1> getBufForDir:
   487                              <1> ;Returns a buffer to use for disk directory data in rbx
   488                              <1> ;Input: [workingDPB] = File to manipulate
   489                              <1> ;       rax = Sector to transfer
   490                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   491 000009F6 51                  <1>     push rcx
   492 000009F7 B104                <1>     mov cl, dirBuffer
   493 000009F9 EB03                <1>     jmp short getBufCommon
   494                              <1> getBufForData:
   495                              <1> ;Returns a buffer to use for disk data in rbx
   496                              <1> ;Requires a File Handle.
   497                              <1> ;Input: [workingDPB] = File to manipulate
   498                              <1> ;       rax = Sector to transfer
   499                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   500 000009FB 51                  <1>     push rcx
   501 000009FC B108                <1>     mov cl, dataBuffer
   502                              <1> getBufCommon:
   503 000009FE 56                  <1>     push rsi
   504 000009FF 57                  <1>     push rdi
   505 00000A00 488B35(0A070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   506                              <1> .makeReq:
   507 00000A07 E895FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   508 00000A0C 5F                  <1>     pop rdi
   509 00000A0D 5E                  <1>     pop rsi
   510 00000A0E 59                  <1>     pop rcx
   511                              <1>     return
    13                              <2> %%_ret:
    14 00000A0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                                  %include "./src/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 00000A10 53                  <1>     push rbx
     9 00000A11 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr]
    10 00000A14 B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 00000A19 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 00000A1F 730C                <1>     jae .exit
    13 00000A21 FFC9                <1>     dec ecx     ;FAT 16 marker
    14 00000A23 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 00000A29 7302                <1>     jae .exit
    16 00000A2B FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 00000A2D 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 00000A2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 00000A2F 53                  <1>     push rbx
    29 00000A30 55                  <1>     push rbp
    30 00000A31 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    31 00000A38 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr]
    32 00000A3B 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 00000A41 731E                <1>     jae .fat32
    34 00000A43 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 00000A49 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 00000A4B D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 00000A4D 6801000000          <1>     push qword 1
    39 00000A52 EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000A54 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000A56 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000A58 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 00000A5A 6800000000          <1>     push qword 0
    45 00000A5F EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000A61 6802000000          <1>     push qword 2
    48 00000A66 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000A69 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 00000A6D 31D2                <1>     xor edx, edx    ;edx = 0
    53 00000A6F F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000A71 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000A75 01D8                <1>     add eax, ebx
    56 00000A77 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000A78 5D                  <1>     pop rbp
    58 00000A79 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000A7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 00000A7B 51                  <1>     push rcx
    68 00000A7C 09C0                <1>     or eax, eax ;Zero upper dword
    69 00000A7E 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 00000A80 482D02000000        <1>     sub rax, 2
    72 00000A86 8A4D05              <1>     mov cl, byte [rbp + dpb.bSecPerClustShift]
    73 00000A89 48D3E0              <1>     shl rax, cl
    74 00000A8C 31C9                <1>     xor ecx, ecx
    75 00000A8E 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000A91 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000A94 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000A95 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000A96 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000A99 E872FFFFFF          <1>     call getFATtype
    83 00000A9E 81F902000000        <1>     cmp ecx, 2
    84 00000AA4 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000AA6 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000AA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000AA8 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000AAA 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AAC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    97 00000AAD 53                  <1>     push rbx
    98                              <1> .lp:
    99 00000AAE 89C3                <1>     mov ebx, eax
   100 00000AB0 E858020000          <1>     call readFAT
   101 00000AB5 7209                <1>     jc .exit
   102 00000AB7 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 00000ABC 75F0                <1>     jne .lp
   104 00000ABE 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 00000AC0 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 00000AC1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000AC2 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000AC4 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AC6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   116 00000AC7 51                  <1>     push rcx
   117 00000AC8 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000ACA FFC1                <1>     inc ecx
   120 00000ACC E83C020000          <1>     call readFAT
   121 00000AD1 7209                <1>     jc .exit
   122 00000AD3 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000AD8 75F0                <1>     jne .lp
   124 00000ADA 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000ADC 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000ADD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 00000ADE 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000AE0 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AE2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   139 00000AE3 53                  <1>     push rbx
   140 00000AE4 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 00000AE7 89C3                <1>     mov ebx, eax
   143 00000AE9 E81F020000          <1>     call readFAT
   144 00000AEE 7206                <1>     jc .exit
   145 00000AF0 FFC9                <1>     dec ecx
   146 00000AF2 75F3                <1>     jnz .lp
   147 00000AF4 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 00000AF6 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000AF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 00000AF8 53                  <1>     push rbx
   157 00000AF9 56                  <1>     push rsi
   158 00000AFA E874000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 00000AFF 7223                <1>     jc .exit    ;Disk read error?
   160 00000B01 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 00000B06 7415                <1>     je .exit2   ;Exit synching disk full status
   162 00000B08 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 00000B0D 89C3                <1>     mov ebx, eax
   164 00000B0F E8A5020000          <1>     call writeFAT
   165 00000B14 720E                <1>     jc .exit 
   166 00000B16 89D8                <1>     mov eax, ebx
   167 00000B18 E87C030000          <1>     call decrementFreeClusterCount
   168                              <1> .exit2:
   169 00000B1D 50                  <1>     push rax
   170 00000B1E E821040000          <1>     call writeFSInfoSector
   171 00000B23 58                  <1>     pop rax
   172                              <1> .exit:
   173 00000B24 5E                  <1>     pop rsi
   174 00000B25 5B                  <1>     pop rbx
   175                              <1>     return
    13                              <2> %%_ret:
    14 00000B26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   176                              <1> 
   177                              <1> allocateClusters:
   178                              <1> ;Working dpb must be set. 
   179                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   180                              <1> ;       ebx = Cluster to link to the new cluster
   181                              <1> ;Output:    
   182                              <1> ;   ecx = Number of allocated clusters
   183                              <1> ;   CF=NC => Complete.
   184                              <1> ;   If eax = -1, then no more free clusters. 
   185                              <1> ;   CF=CY => Hard error, exit
   186 00000B27 F8                  <1>     clc ;Always clear the flags before starting
   187 00000B28 53                  <1>     push rbx
   188 00000B29 56                  <1>     push rsi
   189 00000B2A 51                  <1>     push rcx    ;Save tfr count on stack
   190 00000B2B 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   191                              <1> .allocateLoop:
   192 00000B2E E840000000          <1>     call findFreeCluster
   193 00000B33 722B                <1>     jc .exit
   194 00000B35 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   195 00000B3A 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   196                              <1>     ;eax has first free cluster value to use
   197                              <1>     ;First we link the previous cluster to this cluster
   198 00000B3C BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   199 00000B41 50                  <1>     push rax
   200 00000B42 E872020000          <1>     call writeFAT   ;Allocate this cluster first
   201 00000B47 58                  <1>     pop rax
   202 00000B48 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   203 00000B4A E84A030000          <1>     call decrementFreeClusterCount
   204                              <1>     ;eax points to this allocated cluster
   205                              <1>     ;ebx points to the previous last cluster
   206 00000B4F 89C6                <1>     mov esi, eax    ;New cluster as "value"
   207 00000B51 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   208 00000B53 E861020000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   209 00000B58 7206                <1>     jc .exit
   210 00000B5A 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   211 00000B5C FFC9                <1>     dec ecx ;One less cluster allocated
   212 00000B5E 75CE                <1>     jnz .allocateLoop
   213                              <1> .exit:
   214 00000B60 5E                  <1>     pop rsi ;Pop the tfr count into esi
   215 00000B61 9C                  <1>     pushfq
   216 00000B62 F7D9                <1>     neg ecx
   217 00000B64 01F1                <1>     add ecx, esi
   218 00000B66 50                  <1>     push rax
   219 00000B67 51                  <1>     push rcx
   220 00000B68 E8D7030000          <1>     call writeFSInfoSector
   221 00000B6D 59                  <1>     pop rcx
   222 00000B6E 58                  <1>     pop rax
   223 00000B6F 9D                  <1>     popfq
   224 00000B70 5E                  <1>     pop rsi
   225 00000B71 5B                  <1>     pop rbx
   226                              <1>     return
    13                              <2> %%_ret:
    14 00000B72 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> findFreeCluster:
   229                              <1> ;Walks the FAT to find a free cluster and returns the 
   230                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   231                              <1> ;Starts from the pervious first free cluster and wraps around if 
   232                              <1> ; we hit the max disk size and keeps searching until we get back
   233                              <1> ; to the starting cluster value. 
   234                              <1> ;If the first free cluster is unknown, we start from 2. If we hit the 
   235                              <1> ; max disk size in that case, we fail.
   236                              <1> ;Works on the workingDPB.
   237                              <1> ;If returns with CF=CY => Fail set, return immediately to caller.
   238 00000B73 53                  <1>     push rbx
   239 00000B74 52                  <1>     push rdx
   240 00000B75 55                  <1>     push rbp
   241 00000B76 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   242 00000B7D 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]
   243 00000B80 3DFFFFFFFF          <1>     cmp eax, -1     ;Do we have a good starting free cluster? 
   244 00000B85 7511                <1>     jne .lp
   245                              <1>     ;Check if the count of free clusters is 0. If so, we are full!
   246 00000B87 817D3100000000      <1>     cmp dword [rbp + dpb.dFreeClustCnt], 0
   247 00000B8E 742D                <1>     je .diskFull
   248                              <1>     ;Else, we just have unreliable metadata. Start search from 2!
   249 00000B90 B802000000          <1>     mov eax, 2      ;If not, start searching from 2.
   250 00000B95 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax    ;Start searching here!
   251                              <1> .lp:
   252 00000B98 89C3                <1>     mov ebx, eax
   253 00000B9A E86E010000          <1>     call readFAT    ;Deref the cluster value of ebx into eax
   254 00000B9F 722E                <1>     jc .exitFast
   255 00000BA1 85C0                <1>     test eax, eax   ;Now eax = DATA [ebx]. If 0, this is free!
   256 00000BA3 7424                <1>     jz .freeFnd
   257 00000BA5 678D4301            <1>     lea eax, dword [ebx + 1]    ;Else, get sequentially the next cluster
   258                              <1>     ;If these are equal, we've gone through the whole FAT. Disk full!
   259 00000BA9 3B452D              <1>     cmp eax, dword [rbp + dpb.dNextFreeClst]
   260 00000BAC 740F                <1>     je .diskFull    
   261                              <1>     ;Are we past the max cluster address?
   262 00000BAE 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   263 00000BB1 76E5                <1>     jbe .lp ;If not, use this next cluster value!
   264                              <1> ;Else, we are past end of the disk. Start from 2 again or disk full?
   265 00000BB3 B802000000          <1>     mov eax, 2  ;Default to search from 2 again
   266                              <1>     ;If the firstfreecluster = 2, then we've searched everything. Fail.
   267 00000BB8 39452D              <1>     cmp dword [rbp + dpb.dNextFreeClst], eax    
   268 00000BBB 75DB                <1>     jne .lp
   269                              <1> .diskFull:
   270                              <1> ;Set free cluster count to 0 and first free cluster to -1
   271 00000BBD C7453100000000      <1>     mov dword [rbp + dpb.dFreeClustCnt], 0  ;Set the free clusters
   272 00000BC4 BBFFFFFFFF          <1>     mov ebx, -1     ;Set cluster value to -1
   273                              <1> .freeFnd:
   274 00000BC9 89D8                <1>     mov eax, ebx    ;Get the free cluster value into eax
   275 00000BCB 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax    ;Save first free cluster!
   276 00000BCE F8                  <1>     clc
   277                              <1> .exitFast:
   278 00000BCF 5D                  <1>     pop rbp
   279 00000BD0 5A                  <1>     pop rdx
   280 00000BD1 5B                  <1>     pop rbx
   281                              <1>     return
    13                              <2> %%_ret:
    14 00000BD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> findFreeClusterData:
   284                              <1> ;Walks the FAT to find a free cluster and returns the 
   285                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   286                              <1> ; Also finds NumberOfFreeClusters, if it is unknown. 
   287                              <1> ; Both fields get filled in the workingDPB
   288                              <1> ;Works on the workingDPB
   289                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   290 00000BD3 53                  <1>     push rbx
   291 00000BD4 51                  <1>     push rcx
   292 00000BD5 52                  <1>     push rdx
   293 00000BD6 55                  <1>     push rbp
   294 00000BD7 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   295 00000BDE E82DFEFFFF          <1>     call getFATtype
   296 00000BE3 81F902000000        <1>     cmp ecx, 2  ;If not FAT32, always get afresh
   297 00000BE9 7512                <1>     jne .getNew
   298                              <1>     ;Else, if either entry is unknown, get both!
   299 00000BEB 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   300 00000BF2 7409                <1>     je .getNew
   301 00000BF4 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dNextFreeClst], -1
   302 00000BFB 7543                <1>     jne .exit
   303                              <1> .getNew:
   304                              <1>     ;Reset this data. Get first free cluster
   305 00000BFD C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1
   306 00000C04 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1
   307 00000C0B E863FFFFFF          <1>     call findFreeCluster
   308 00000C10 7237                <1>     jc .exitFail
   309 00000C12 C7453100000000      <1>     mov dword [rbp + dpb.dFreeClustCnt], 0  ;Set to 0 for new count
   310 00000C19 3DFFFFFFFF          <1>     cmp eax, -1 ;First free cluster = -1 means disk full!
   311 00000C1E 7420                <1>     je .exit
   312                              <1>     ;Else, eax has the first free cluster. Keep reading FAT
   313 00000C20 E865020000          <1>     call incrementFreeClusterCount  ;Increment the count for the first clust!
   314                              <1> .lp:
   315 00000C25 89C3                <1>     mov ebx, eax    ;Save the cluster number
   316 00000C27 E8E1000000          <1>     call readFAT    ;Get dereferenced value in eax
   317 00000C2C 721B                <1>     jc .exitFail
   318 00000C2E 85C0                <1>     test eax, eax
   319 00000C30 7505                <1>     jnz .notFree
   320 00000C32 E853020000          <1>     call incrementFreeClusterCount  ;Increment the count!
   321                              <1> .notFree:
   322 00000C37 678D4301            <1>     lea eax, dword [ebx + 1]    ;Get the next consecutive cluster
   323 00000C3B 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   324 00000C3E 76E5                <1>     jbe .lp
   325                              <1> .exit:
   326 00000C40 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]  ;Get first free cluster in eax
   327 00000C43 E8FC020000          <1>     call writeFSInfoSector
   328 00000C48 F8                  <1>     clc
   329                              <1> .exitFail:      ;Keep carry flag
   330 00000C49 5D                  <1>     pop rbp
   331 00000C4A 5A                  <1>     pop rdx
   332 00000C4B 59                  <1>     pop rcx
   333 00000C4C 5B                  <1>     pop rbx
   334                              <1>     return
    13                              <2> %%_ret:
    14 00000C4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   335                              <1> 
   336                              <1> getNextSectorOfFile:
   337                              <1> ;This function will return the next sector of a file in rax
   338                              <1> ;If the next sector to be read lives in the next cluster, it will update
   339                              <1> ; the vars appropriately
   340                              <1> ;
   341                              <1> ;Input: rbp = dpb pointer
   342                              <1> ;Output:
   343                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   344                              <1> ;           If ZF=ZE => [currClustF] = Last Cluster of File.
   345                              <1> ;       CF=CY => Critical error occurred and was FAILed
   346                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   347                              <1> ; next cluster and read first sector 
   348                              <1>     ;Check if we need to go to next cluster
   349 00000C4E 8A05(5C070000)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   350 00000C54 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   351 00000C57 741C                <1>     je .gotoNextCluster
   352                              <1>     ;Goto next sector in same cluster
   353 00000C59 FE05(5C070000)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   354 00000C5F 48FF05(5D070000)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   355 00000C66 488B05(5D070000)    <1>     mov rax, qword [currSectD]
   356                              <1> .exit:
   357 00000C6D 50                  <1>     push rax
   358 00000C6E 31C0                <1>     xor eax, eax
   359 00000C70 FFC0                <1>     inc eax ;Ensure ZF=NZ
   360 00000C72 58                  <1>     pop rax
   361 00000C73 F8                  <1>     clc     ;And CF=NC
   362                              <1>     return
    13                              <2> %%_ret:
    14 00000C74 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   363                              <1> .gotoNextCluster:
   364 00000C75 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   365 00000C7B E88D000000          <1>     call readFAT
   366                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000C80 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000C82 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   367                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   368 00000C83 3DFFFFFFFF          <1>     cmp eax, -1 ;ZF=ZE and CF=NC if they are equal
   369                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000C88 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000C8A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   370                              <1> ;Update the new cluster and sector information
   371 00000C8B 8905(54070000)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   372 00000C91 FF05(50070000)      <1>     inc dword [currClustF]   ;Goto next file cluster
   373 00000C97 E8DFFDFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   374 00000C9C 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save it
   375 00000CA3 C605(5C070000)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   376 00000CAA EBC1                <1>     jmp short .exit
   377                              <1> 
   378                              <1> 
   379                              <1> truncateFAT:
   380                              <1> ;Same as below but always sets the cluster we are unlinking at to EOC.
   381                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   382                              <1> ;       rbp = Current DPB to use for disk
   383                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   384 00000CAC 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   385 00000CAD 56                  <1>     push rsi
   386 00000CAE E82B000000          <1>     call freeChainFAT   ;Preserves eax, frees the full chain.
   387 00000CB3 721B                <1>     jc .exit
   388 00000CB5 BEFFFFFFFF          <1>     mov esi, -1         ;Realloc the cluster we are freeing from as EOC
   389 00000CBA 50                  <1>     push rax            ;Save the cluster we are writing at
   390 00000CBB E8F9000000          <1>     call writeFAT
   391 00000CC0 58                  <1>     pop rax
   392 00000CC1 720D                <1>     jc .exit
   393 00000CC3 E8D1010000          <1>     call decrementFreeClusterCount  ;Remove it from the free cluster count!
   394                              <1> .setFree:
   395                              <1> ;Do this stuff here, because we want to update the free count too!
   396 00000CC8 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax ;And set this to search from
   397 00000CCB E874020000          <1>     call writeFSInfoSector  ;New first free cluster values
   398                              <1> .exit:
   399 00000CD0 5E                  <1>     pop rsi
   400 00000CD1 58                  <1>     pop rax
   401                              <1>     return
    13                              <2> %%_ret:
    14 00000CD2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   402                              <1> unlinkFAT:
   403                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   404                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   405                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   406                              <1> ; cluster must be set to EOC before this proc is called.
   407                              <1> ;Stops at first invalid cluster number.
   408                              <1> ;
   409                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   410                              <1> ;       rbp = Current DPB to use for disk
   411                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   412                              <1> 
   413 00000CD3 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   414 00000CD4 56                  <1>     push rsi
   415                              <1> ;The below call decrements the cluster count for the full chain freed including
   416                              <1> ; the starting cluster address.
   417 00000CD5 E804000000          <1>     call freeChainFAT    ;Preserved eax. May set eax to first free cluster.
   418 00000CDA 73EC                <1>     jnc truncateFAT.setFree ;Set the first free sector to eax
   419 00000CDC EBF2                <1>     jmp short truncateFAT.exit  ;If an error, skip updating the FSInfo sector
   420                              <1> 
   421                              <1> freeChainFAT:
   422                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   423                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   424                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   425                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   426                              <1> ;Stops at first invalid cluster number.
   427                              <1> ;
   428                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   429                              <1> ;       rbp = Current DPB to use for disk
   430                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   431 00000CDE 50                  <1>     push rax
   432 00000CDF 53                  <1>     push rbx
   433 00000CE0 51                  <1>     push rcx
   434 00000CE1 56                  <1>     push rsi
   435 00000CE2 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   436                              <1> .lp:
   437 00000CE4 E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   438 00000CE9 721D                <1>     jc .exit    ;Error exit
   439 00000CEB 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   440 00000CED 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   441 00000CEE 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   442 00000CF0 E8C4000000          <1>     call writeFAT
   443 00000CF5 7211                <1>     jc .exit    ;Error exit
   444 00000CF7 E88E010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   445 00000CFC 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   446 00000D02 7404                <1>     je .exit
   447 00000D04 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   448 00000D06 EBDC                <1>     jmp short .lp
   449                              <1> .exit:
   450 00000D08 5E                  <1>     pop rsi
   451 00000D09 59                  <1>     pop rcx
   452 00000D0A 5B                  <1>     pop rbx
   453 00000D0B 58                  <1>     pop rax
   454                              <1>     return
    13                              <2> %%_ret:
    14 00000D0C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   455                              <1> readFAT:
   456                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   457                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   458                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   459                              <1> ;       rbp = DPB
   460                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   461                              <1> ;If carry set, getBuffer failed!
   462 00000D0D 53                  <1>     push rbx
   463 00000D0E 51                  <1>     push rcx
   464 00000D0F 52                  <1>     push rdx
   465 00000D10 57                  <1>     push rdi
   466 00000D11 55                  <1>     push rbp
   467 00000D12 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   468 00000D14 E816FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   469                              <1>     ;and FAT type in ecx
   470 00000D19 E8D3FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   471 00000D1E 7232                <1>     jc .exitFail
   472                              <1>     ;Check if FAT 12, 16, 32
   473 00000D20 85C9                <1>     test ecx, ecx
   474 00000D22 7434                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   475 00000D24 F7C101000000        <1>     test ecx, 1
   476 00000D2A 740E                <1>     jz .goToNextClusterFat32
   477                              <1>     ;Here we handle FAT16
   478 00000D2C 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   479 00000D31 3DF7FF0000          <1>     cmp eax, 0FFF7h  ;Valid cluster number?
   480 00000D36 7219                <1>     jb .exit
   481 00000D38 EB0B                <1>     jmp short .eocExit
   482                              <1> .goToNextClusterFat32:
   483 00000D3A 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   484 00000D3E 3DF7FFFF0F          <1>     cmp eax, 0FFFFFF7h ;First reserved value. Any Reserved number = EOC
   485 00000D43 7207                <1>     jb .validCluster32   
   486                              <1> .eocExit:
   487 00000D45 B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   488 00000D4A EB05                <1>     jmp short .exit
   489                              <1> .validCluster32:
   490 00000D4C 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   491                              <1> .exit:
   492 00000D51 F8                  <1>     clc
   493                              <1> .exitFail:
   494 00000D52 5D                  <1>     pop rbp
   495 00000D53 5F                  <1>     pop rdi
   496 00000D54 5A                  <1>     pop rdx
   497 00000D55 59                  <1>     pop rcx
   498 00000D56 5B                  <1>     pop rbx
   499                              <1>     return
    13                              <2> %%_ret:
    14 00000D57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .gotoNextClusterFat12:
   501                              <1> ;eax has the sector number of the FAT
   502                              <1> ;edx has byte offset into the sector
   503                              <1> ;edi has current cluster number
   504                              <1> ;rbx has ptr to buffer header
   505 00000D58 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   506 00000D5C F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   507 00000D62 741C                <1>     jz .gotoNextClusterFat12Even
   508                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   509 00000D64 29D1                <1>     sub ecx, edx
   510 00000D66 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   511 00000D68 750C                <1>     jnz .gotoNextClusterFat12OddNoX
   512 00000D6A E833000000          <1>     call .xBndry        ;Boundary cross, build entry properly
   513 00000D6F 72E1                <1>     jc .exitFail    
   514 00000D71 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   515 00000D74 EB23                <1>     jmp short .checkIfLastFAT12Cluster
   516                              <1> .gotoNextClusterFat12OddNoX:
   517 00000D76 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   518 00000D7B C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   519 00000D7E EB19                <1>     jmp short .checkIfLastFAT12Cluster
   520                              <1> .gotoNextClusterFat12Even:
   521 00000D80 29D1                <1>     sub ecx, edx
   522 00000D82 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   523 00000D84 7509                <1>     jnz .gotoNextClusterFat12EvenNoX
   524 00000D86 E817000000          <1>     call .xBndry    ;Save the lower three nybbles
   525 00000D8B 72C5                <1>     jc .exitFail
   526 00000D8D EB05                <1>     jmp short .evenCmn
   527                              <1> .gotoNextClusterFat12EvenNoX:
   528                              <1>     ;Here the cluster is even and can't cross a sector boundary
   529 00000D8F 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   530                              <1> .evenCmn:
   531 00000D94 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   532                              <1> .checkIfLastFAT12Cluster:
   533 00000D99 3DF70F0000          <1>     cmp eax, 0FF7h   ;Is it below the first invalid cluster number?
   534 00000D9E 72B1                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   535 00000DA0 EBA3                <1>     jmp short .eocExit
   536                              <1> .xBndry:
   537                              <1> ;Gets a word that goes across a boundary in ax. It is left to the caller it 
   538                              <1> ; do what they will with it. If CF=CY on return, something went wrong.
   539 00000DA2 0FB65C1320          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   540 00000DA7 FFC0                <1>     inc eax ;Get next FAT sector
   541 00000DA9 53                  <1>     push rbx
   542 00000DAA E842FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   543 00000DAF 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   544                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000DB0 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000DB2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   545 00000DB3 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   546 00000DB5 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   547                              <1>     return
    13                              <2> %%_ret:
    14 00000DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   548                              <1> 
   549                              <1> writeFAT:
   550                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   551                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   552                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   553                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   554                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   555 00000DB9 53                  <1>     push rbx
   556 00000DBA 51                  <1>     push rcx
   557 00000DBB 52                  <1>     push rdx
   558 00000DBC 56                  <1>     push rsi
   559 00000DBD 57                  <1>     push rdi
   560 00000DBE 55                  <1>     push rbp
   561 00000DBF 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   562 00000DC1 E869FCFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   563                              <1>     ;and FAT type in ecx
   564 00000DC6 E826FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   565 00000DCB 7223                <1>     jc .exitFail
   566                              <1>     ;Check if FAT 12, 16, 32
   567 00000DCD 85C9                <1>     test ecx, ecx
   568 00000DCF 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   569 00000DD1 F7C101000000        <1>     test ecx, 1
   570 00000DD7 7407                <1>     jz .goToNextClusterFat32
   571                              <1>     ;Here we handle FAT16
   572 00000DD9 6689741320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   573 00000DDE EB0A                <1>     jmp short .exit
   574                              <1> .goToNextClusterFat32:
   575 00000DE0 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   576 00000DE6 89741320            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   577                              <1> .exit:
   578 00000DEA E8A2FAFFFF          <1>     call markBufferDirty
   579 00000DEF F8                  <1>     clc
   580                              <1> .exitFail:
   581 00000DF0 5D                  <1>     pop rbp
   582 00000DF1 5F                  <1>     pop rdi
   583 00000DF2 5E                  <1>     pop rsi
   584 00000DF3 5A                  <1>     pop rdx
   585 00000DF4 59                  <1>     pop rcx
   586 00000DF5 5B                  <1>     pop rbx
   587                              <1>     return
    13                              <2> %%_ret:
    14 00000DF6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   588                              <1> .gotoNextClusterFat12:
   589                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   590                              <1> ;eax has the sector number of the FAT
   591                              <1> ;edx has byte offset into the sector
   592                              <1> ;edi has current cluster number
   593                              <1> ;rbx has ptr to buffer header
   594 00000DF7 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   595 00000DFB 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   596 00000E01 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   597 00000E07 7432                <1>     jz .gotoNextClusterFat12Even
   598                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   599 00000E09 29D1                <1>     sub ecx, edx
   600 00000E0B FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   601 00000E0D 7556                <1>     jnz .gotoNextClusterFat12OddNoX
   602                              <1>     ;Boundary cross, build entry properly
   603                              <1>     ;Replace the high nybble of the low byte
   604 00000E0F 0FB64C1320          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   605 00000E14 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   606 00000E1A C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   607 00000E1D 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   608 00000E1F C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   609 00000E22 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   610 00000E26 E866FAFFFF          <1>     call markBufferDirty
   611 00000E2B FFC0                <1>     inc eax ;Get next FAT sector
   612 00000E2D E8BFFBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   613 00000E32 72BC                <1>     jc .exitFail
   614 00000E34 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   615 00000E36 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   616 00000E39 EBAF                <1>     jmp short .exit
   617                              <1> .gotoNextClusterFat12Even:
   618 00000E3B 29D1                <1>     sub ecx, edx
   619 00000E3D FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   620 00000E3F 7533                <1>     jnz .gotoNextClusterFat12EvenNoX
   621 00000E41 89F1                <1>     mov ecx, esi
   622 00000E43 80E50F              <1>     and ch, 0Fh ;Save only the lower nybble of ch
   623 00000E46 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl   ;Store the first byte
   624 00000E4A E842FAFFFF          <1>     call markBufferDirty
   625 00000E4F FFC0                <1>     inc eax ;Get next FAT sector
   626 00000E51 E89BFBFFFF          <1>     call getBufForFat
   627 00000E56 7298                <1>     jc .exitFail
   628 00000E58 8A4B20              <1>     mov cl, byte [rbx + bufferHdr.dataarea] ;Get the first data byte from buffer
   629 00000E5B 80E1F0              <1>     and cl, 0F0h    ;Clear the lower nybble of this entry
   630 00000E5E 08E9                <1>     or cl, ch       ;Add our entry in
   631 00000E60 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl ;Write it back
   632 00000E63 EB85                <1>     jmp short .exit    
   633                              <1> .gotoNextClusterFat12OddNoX:
   634 00000E65 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   635 00000E6A 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   636 00000E6F C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   637 00000E72 EB0A                <1>     jmp short .fat12common
   638                              <1> .gotoNextClusterFat12EvenNoX:
   639                              <1>     ;Here the cluster is even and can't cross a sector boundary
   640 00000E74 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   641 00000E79 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   642                              <1> .fat12common:
   643 00000E7E 09F0                <1>     or eax, esi     ;Add the new entry bits
   644 00000E80 6689441320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   645 00000E85 E960FFFFFF          <1>     jmp .exit
   646                              <1> 
   647                              <1> incrementFreeClusterCount:
   648                              <1> ;Cluster Deallocated Function
   649 00000E8A 9C                  <1>     pushfq
   650 00000E8B 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   651 00000E92 7403                <1>     je .exit
   652 00000E94 FF4531              <1>     inc dword [rbp + dpb.dFreeClustCnt]
   653                              <1> .exit:
   654 00000E97 9D                  <1>     popfq
   655                              <1>     return
    13                              <2> %%_ret:
    14 00000E98 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   656                              <1> decrementFreeClusterCount:
   657                              <1> ;Cluster Allocated Function
   658 00000E99 9C                  <1>     pushfq
   659 00000E9A 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   660 00000EA1 7403                <1>     je .exit
   661 00000EA3 FF4D31              <1>     dec dword [rbp + dpb.dFreeClustCnt]
   662                              <1> .exit:
   663 00000EA6 9D                  <1>     popfq
   664                              <1>     return
    13                              <2> %%_ret:
    14 00000EA7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   665                              <1> 
   666                              <1> getBytesPerCluster:
   667                              <1> ;Gets the bytes per cluster
   668                              <1> ;Input: rbp -> Current DPB
   669                              <1> ;Output: ecx = Total bytes per cluster
   670 00000EA8 50                  <1>     push rax
   671 00000EA9 52                  <1>     push rdx
   672 00000EAA 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   673 00000EAE 0FB64D04            <1>     movzx ecx, byte [rbp + dpb.bMaxSectorInCluster]
   674 00000EB2 FFC1                <1>     inc ecx
   675 00000EB4 F7E1                <1>     mul ecx
   676 00000EB6 89C1                <1>     mov ecx, eax
   677 00000EB8 5A                  <1>     pop rdx
   678 00000EB9 58                  <1>     pop rax
   679                              <1>     return
    13                              <2> %%_ret:
    14 00000EBA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   680                              <1> 
   681                              <1> readFSInfoSector:
   682                              <1> ;Given a DPB, will attempt to read the FS Info sector. Destroys all regs.
   683                              <1> ;Input: rbp -> DPB pointer for FAT32 volume. Silently returns ok
   684                              <1> ;               if the DPB is not FAT32.
   685                              <1> ;       rsi -> BPB for the FAT32 volume.
   686                              <1> ;Output: rbp -> DPB dNextFreeClst and dNumberOfFreeCluster fields
   687                              <1> ;               correctly filled in from the FSInfo sector, if appropriate.
   688 00000EBB 51                  <1>     push rcx
   689 00000EBC E84FFBFFFF          <1>     call getFATtype
   690 00000EC1 81F902000000        <1>     cmp ecx, 2  ;Is the DPB a FAT32 DPB?
   691 00000EC7 59                  <1>     pop rcx
   692 00000EC8 7578                <1>     jne .exit
   693                              <1> ;Only read the FSinfo sector if the drive has never been accessed before!
   694 00000ECA F64524FF            <1>     test byte [rbp + dpb.bAccessFlag], -1
   695 00000ECE 7472                <1>     jz .exit
   696 00000ED0 0FB74630            <1>     movzx eax, word [rsi + bpb32.FSinfo]    ;Get the FSInfo sector number
   697 00000ED4 85C0                <1>     test eax, eax   ;0 is an invalid value for this 
   698                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000ED6 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000ED8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   699 00000ED9 3DFFFF0000          <1>     cmp eax, 0FFFFh ;If this is unknown, return
   700                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000EDE 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000EE0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   701 00000EE1 48892D(0A070000)    <1>     mov qword [workingDPB], rbp ;Set this because it isnt set yet!
   702 00000EE8 E8FFFAFFFF          <1>     call getBufForDOS   ;Now get the sector number
   703                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000EED 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000EEF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   704                              <1>     ;Now sanity check the sector data itself
   705 00000EF0 817B2052526141      <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.leadSig], fsInfoSig1
   706 00000EF7 7549                <1>     jne .exit
   707 00000EF9 81BB04020000727241- <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.strucSig], fsInfoSig2
   707 00000F02 61                  <1>
   708 00000F03 753D                <1>     jne .exit
   709 00000F05 81BB1C020000000055- <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.trailSig], fsInfoSig3
   709 00000F0E AA                  <1>
   710 00000F0F 7531                <1>     jne .exit
   711                              <1> ;Here we can assume the struct is accessible. 
   712                              <1> ;We sanity check the struct values to ensure they are possible.
   713                              <1> ;We reset with some sane defaults in the event of bad data
   714 00000F11 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1  ;Start is default (clust 2)
   715 00000F18 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1  ;Unknown
   716                              <1>     ;Start with next free check
   717 00000F1F 8B830C020000        <1>     mov eax, dword [rbx + bufferHdr.dataarea + FSInfo.nextFree] 
   718 00000F25 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   719 00000F28 770A                <1>     ja .skipFirstFree
   720 00000F2A 3D02000000          <1>     cmp eax, 2
   721 00000F2F 7203                <1>     jb .skipFirstFree
   722 00000F31 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax
   723                              <1> .skipFirstFree:
   724                              <1>     ;Now we do free count check
   725 00000F34 8B8308020000        <1>     mov eax, dword [rbx + bufferHdr.dataarea + FSInfo.freeCount]
   726 00000F3A 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   727 00000F3D 7703                <1>     ja .exit
   728 00000F3F 894531              <1>     mov dword [rbp + dpb.dFreeClustCnt], eax
   729                              <1> .exit:
   730 00000F42 F8                  <1>     clc
   731                              <1>     return
    13                              <2> %%_ret:
    14 00000F43 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   732                              <1> 
   733                              <1> writeFSInfoSector:
   734                              <1> ;Will write an FS Info sector back to the disk.
   735                              <1> ;Input: rbp -> DPB of the disk we are writing the FSInfo date for.
   736                              <1> ;Output: CF=NC: Updated FSInfo fields if FAT32. CF=CY: Error reading disk
   737                              <1> 
   738 00000F44 51                  <1>     push rcx
   739 00000F45 E8C6FAFFFF          <1>     call getFATtype
   740 00000F4A 81F902000000        <1>     cmp ecx, 2  ;Is the DPB a FAT32 DPB?
   741 00000F50 59                  <1>     pop rcx
   742 00000F51 F8                  <1>     clc         ;Clear the CF flag if not FAT32
   743                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F52 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F54 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   744                              <1> 
   745 00000F55 50                  <1>     push rax
   746 00000F56 53                  <1>     push rbx
   747 00000F57 51                  <1>     push rcx
   748 00000F58 52                  <1>     push rdx
   749 00000F59 56                  <1>     push rsi
   750 00000F5A 57                  <1>     push rdi
   751                              <1> 
   752 00000F5B 31C0                <1>     xor eax, eax        ;Get sector 0
   753 00000F5D E88AFAFFFF          <1>     call getBufForDOS   ;Get a buffer Sector 0 pointed to be rbx
   754 00000F62 0F8281000000        <1>     jc .exit
   755 00000F68 0FB74350            <1>     movzx eax, word [rbx + bufferHdr.dataarea + bpb32.FSinfo]
   756 00000F6C 85C0                <1>     test eax, eax
   757 00000F6E 7479                <1>     jz .exit
   758 00000F70 3DFFFF0000          <1>     cmp eax, 0FFFFh ;If this is unknown, return
   759 00000F75 7472                <1>     je .exit
   760                              <1> ;First compute where the backup FSInfo is
   761 00000F77 89C1                <1>     mov ecx, eax    ;(e)ax has FSInfo sector number
   762 00000F79 66034B52            <1>     add cx, word [rbx + bufferHdr.dataarea + bpb32.BkBootSec]    
   763                              <1>     ;cx now has the backup sector
   764                              <1> ;If they are equal, because backup boot sector is 0, set ecx to -1
   765 00000F7D 39C1                <1>     cmp ecx, eax
   766 00000F7F BAFFFFFFFF          <1>     mov edx, -1
   767 00000F84 0F44CA              <1>     cmove ecx, edx  ;Set ecx to -1 to avoid writing the same sector twice
   768                              <1>     
   769 00000F87 51                  <1>     push rcx            ;Save the backup FSInfo sector value
   770 00000F88 E85FFAFFFF          <1>     call getBufForDOS   ;Now get the primary FSInfo sector
   771 00000F8D 5F                  <1>     pop rdi             ;Return the backup FSInfo sector value in rdi
   772 00000F8E 7259                <1>     jc .exit
   773                              <1> 
   774 00000F90 31F6                <1>     xor esi, esi    ;Use as a dirty marker
   775 00000F92 8B4D31              <1>     mov ecx, dword [rbp + dpb.dFreeClustCnt]
   776 00000F95 398B08020000        <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], ecx
   777 00000F9B 7408                <1>     je .checkFirst
   778                              <1>     ;Update the value
   779 00000F9D 898B08020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], ecx 
   780 00000FA3 FFC6                <1>     inc esi
   781                              <1> .checkFirst:
   782 00000FA5 8B4D2D              <1>     mov ecx, dword [rbp + dpb.dNextFreeClst]
   783 00000FA8 398B0C020000        <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], ecx
   784 00000FAE 7408                <1>     je .checkFlush
   785 00000FB0 898B0C020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], ecx
   786 00000FB6 FFC6                <1>     inc esi
   787                              <1> .checkFlush:
   788 00000FB8 85F6                <1>     test esi, esi   ;If this is zero, we didn't write new values. Return
   789 00000FBA 742D                <1>     jz .exit
   790 00000FBC E8D0F8FFFF          <1>     call markBufferDirty    ;Else, the sector is dirty. Mark for flushing!
   791                              <1>     ;Now since we have a dirty sector, we need to sync the backup sector too!
   792 00000FC1 81FFFFFFFFFF        <1>     cmp edi, -1 ;Do we have a backup sector? If not, simply return
   793 00000FC7 7420                <1>     je .exit
   794 00000FC9 89F8                <1>     mov eax, edi    ;Else get the backup FSInfo sector value in eax
   795 00000FCB E81CFAFFFF          <1>     call getBufForDOS   ;Now get the sector pointer   
   796 00000FD0 7217                <1>     jc .exit            ;Fail to sync if this fails
   797                              <1>     ;Now we know there is something to write so write it!
   798                              <1>     ;Also CF=NC here
   799 00000FD2 8B4531              <1>     mov eax, dword [rbp + dpb.dFreeClustCnt]
   800 00000FD5 898308020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], eax 
   801 00000FDB 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]
   802 00000FDE 89830C020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], eax
   803 00000FE4 E8A8F8FFFF          <1>     call markBufferDirty    ;Mark this buffer as dirty too
   804                              <1> .exit:
   805 00000FE9 5F                  <1>     pop rdi
   806 00000FEA 5E                  <1>     pop rsi
   807 00000FEB 5A                  <1>     pop rdx
   808 00000FEC 59                  <1>     pop rcx
   809 00000FED 5B                  <1>     pop rbx
   810 00000FEE 58                  <1>     pop rax
   811                              <1>     return
    13                              <2> %%_ret:
    14 00000FEF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                                  %include "./src/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00000FF0 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 00000FF7 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00000FFA 7408                <1>     jz .notNet
     6 00000FFC B81C110000          <1>     mov eax, 0111Ch ;Network find next
     7 00001001 CD2F                <1>     int 2Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 00001003 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 00001004 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    11 0000100B E8BB660000          <1>     call dosCrit1Enter
    12 00001010 488D05(7A060000)    <1>     lea rax, tmpCDS
    13 00001017 488905(12070000)    <1>     mov qword [workingCDS], rax ;Set the working CDS to be the tmp cds!
    14 0000101E 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]   ;Get 1 based number back!
    15 00001020 0440                <1>     add al, "@"  ;Convert into letter
    16 00001022 E85C620000          <1>     call buildNewCDS     ;Build a new CDS bypassing the real CDS!
    17 00001027 723C                <1>     jc .critError   ;Return error if this fails
    18 00001029 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
    19 00001030 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr] 
    20 00001034 E870610000          <1>     call setWorkingDPB
    21 00001039 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]
    22 0000103D 8805(09070000)      <1>     mov byte [workingDrv], al
    23 00001043 C605(08070000)E5    <1>     mov byte [delChar], 0E5h
    24 0000104A C605(E4060000)00    <1>     mov byte [fcbName + 11], 0  ;Set to this being a file we are searching for
    25 00001051 C605(69040000)FF    <1>     mov byte [fileDirFlag], -1  ;Set to searching for a file!
    26 00001058 E80F000000          <1>     call searchMoreDir  ;Now find the next one!
    27 0000105D 7206                <1>     jc .critError   ;Return error if this fails
    28                              <1> .errExit:
    29 0000105F E871660000          <1>     call dosCrit1Exit
    30                              <1>     return
    13                              <2> %%_ret:
    14 00001064 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> .critError:
    32 00001065 B812000000          <1>     mov eax, errNoFil
    33 0000106A EBF3                <1>     jmp short .errExit
    34                              <1> searchMoreDir:
    35                              <1> ;The three directory variables are set up from the ffblock. 
    36                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    37                              <1> ;Current DTA is also used to contain the ff block address
    38                              <1> ;All registers can be trashed
    39 0000106C 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    40                              <1>     ;First copy the search template back then setup dirClustA and dirSect vars
    41 00001073 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
    42 0000107A 57                  <1>     push rdi
    43 0000107B 488D7701            <1>     lea rsi, qword [rdi + ffBlock.template]
    44 0000107F 488D3D(D9060000)    <1>     lea rdi, fcbName
    45 00001086 B90B000000          <1>     mov ecx, 11
    46 0000108B F3A4                <1>     rep movsb   ;Get copy the search template!
    47 0000108D 5F                  <1>     pop rdi
    48 0000108E F6471540            <1>     test byte [rdi + ffBlock.attribFnd], dirCharDev  ;Did we find a char dev?
    49 00001092 0F85F0000000        <1>     jnz .errorExit                              ;No more files if so!!
    50 00001098 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    51 0000109B 8805(FC060000)      <1>     mov byte [searchAttr], al   ;... and save it!
    52 000010A1 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    53 000010A4 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    54 000010AA 8905(7B070000)      <1>     mov dword [dirClustPar], eax
    55                              <1>     ;Get number of 32 byte entries in a sector
    56 000010B0 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    57 000010B3 3DFFFFFFFF          <1>     cmp eax, -1 ;If this is an invalid value, exit error!
    58 000010B8 0F84CA000000        <1>     je .errorExit
    59 000010BE 8905(85070000)      <1>     mov dword [dirEntry], eax
    60                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    61 000010C4 C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    62                              <1>     ;Now get bytes per cluster
    63 000010C7 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    64 000010C9 813D(7F070000)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    64 000010D1 0000                <1>
    65 000010D3 0F8492000000        <1>     je .oldFat
    66 000010D9 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    67 000010DD 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSecPerClustShift]
    68 000010E1 D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    69 000010E3 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    70 000010E5 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    71 000010E7 31D2                <1>     xor edx, edx
    72 000010E9 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    73                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    74                              <1>     ;edx has byte offset into cluster (or Root dir)
    75 000010EB 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    76                              <1>     ;Now compute sector offset into cluster
    77 000010ED 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    78 000010F1 89D0                <1>     mov eax, edx    ;Move offset into cluster
    79 000010F3 31D2                <1>     xor edx, edx
    80 000010F5 F7F1                <1>     div ecx 
    81                              <1>     ;eax now has sector offset into cluster
    82                              <1>     ;edx has byte offset into sector 
    83 000010F7 668905(83070000)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    84 000010FE 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    85                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    86 00001104 89D9                <1>     mov ecx, ebx
    87 00001106 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    88                              <1> .fatlp:
    89 00001109 E8FFFBFFFF          <1>     call readFAT
    90 0000110E 3DFFFFFFFF          <1>     cmp eax, -1
    91 00001113 7473                <1>     je .errorExit
    92 00001115 FFC9                <1>     dec ecx
    93 00001117 75F0                <1>     jnz .fatlp
    94 00001119 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    95                              <1> .skipFatWalk:
    96 0000111F 488D05BC000000      <1>     lea rax, searchDir.nextEp
    97 00001126 50                  <1>     push rax    ;Push the return address onto stack
    98 00001127 8B05(7F070000)      <1>     mov eax, dword [dirClustA]
    99 0000112D E849F9FFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   100 00001132 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   101 00001139 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   102                              <1> .common:
   103 0000113C E8B5F8FFFF          <1>     call getBufForDir
   104 00001141 0F826B010000        <1>     jc searchDir.fnfError
   105 00001147 E86A010000          <1>     call prepSectorSearch  ;rbx has the buffer ptr for this dir sector
   106                              <1>     ;Gets also in ecx the # of 32 byte entries a sector
   107 0000114C 8B05(85070000)      <1>     mov eax, dword [dirEntry]   ;Get 32 byte offset into directory
   108                              <1>     ;Need to convert into an offset into this sector
   109 00001152 52                  <1>     push rdx
   110 00001153 31D2                <1>     xor edx, edx
   111 00001155 F7F1                <1>     div ecx     ;Divide dirEntry by max entries in sector. Remainder in edx.
   112 00001157 29D1                <1>     sub ecx, edx ;Subtract the offset to get the number of entries left
   113 00001159 C1E205              <1>     shl edx, 5  ;Multiply by 32 to turn into bytes to add to rsi
   114 0000115C 4801D6              <1>     add rsi, rdx    ;rsi points to current entry in the sector.
   115 0000115F 5A                  <1>     pop rdx
   116                              <1>     ;We continue AS IF this entry was bad
   117                              <1>     ;Now setup al as upon normal entry 
   118 00001160 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   119 00001166 E9C4010000          <1>     jmp findInBuffer.nextEntry ;Proceed from within to resume search properly!
   120                              <1>     ;The return address on the stack will return to the ep's pushed
   121                              <1> .oldFat:
   122                              <1> ;Old FAT 12/16 root dirs fall thru here only
   123                              <1> ;esi = byte ptr in root dir of entry
   124 0000116B 488D0509010000      <1>     lea rax, searchDir.oldNextEP
   125 00001172 50                  <1>     push rax    ;Push return address onto the stack
   126 00001173 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   127 00001177 31D2                <1>     xor edx, edx
   128 00001179 96                  <1>     xchg esi, eax
   129 0000117A F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   130                              <1>     ;eax = Sector number 
   131                              <1>     ;edx = Byte offset within the sector
   132 0000117C 668905(83070000)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   133 00001183 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   134 00001186 EBB4                <1>     jmp short .common
   135                              <1> .errorExit:
   136 00001188 F9                  <1>     stc
   137                              <1>     return
    13                              <2> %%_ret:
    14 00001189 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> searchDir:
   139                              <1> ;Called in a level 1 critical section. 
   140                              <1> ;The directory variables are set and fcbName has the pattern to match
   141                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   142                              <1> ;All registers can be trashed
   143                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   144                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   145                              <1> 
   146 0000118A 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   147 00001191 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   148 00001198 F605(FC060000)08    <1>     test byte [searchAttr], dirVolumeID  ;If the attr has volid, intervene
   149 0000119F 7509                <1>     jnz .volIdSearch
   150 000011A1 F605(5F040000)FF    <1>     test byte [volIdFlag], -1  ;Is volid search override flag set?
   151 000011A8 7410                <1>     jz .notVolSearch    ;Skip the intervention if not set
   152                              <1> .volIdSearch:
   153                              <1> ;Here we do a volid search intervention. Always searches root dir.
   154 000011AA F605(69040000)FF    <1>     test byte [fileDirFlag], -1 ;If we are going down path, avoid invervention
   155 000011B1 7407                <1>     jz .notVolSearch
   156 000011B3 31C0                <1>     xor eax, eax ;Search the root dir.
   157 000011B5 E89A060000          <1>     call prepSetupDirSearchVars
   158                              <1> .notVolSearch:
   159 000011BA 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   160 000011C0 85C0                <1>     test eax, eax
   161 000011C2 0F8498000000        <1>     jz .oldRoot
   162 000011C8 E8AEF8FFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   163                              <1> .sectorLoop:
   164 000011CD E824F8FFFF          <1>     call getBufForDir
   165 000011D2 0F82DA000000        <1>     jc .fnfError
   166 000011D8 E8D9000000          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   167                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   168 000011DD E8E0000000          <1>     call findInBuffer
   169                              <1> .nextEp:
   170                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000011E2 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000011E4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   171 000011E5 0F84A8000000        <1>     jz .chardev    ;CF=CY AND ZF=ZE => File not found
   172                              <1>     ;If ZF=ZE then chardev (i.e. we hit an entry starting with 00)
   173                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   174                              <1>     ;IF however, the next cluster is -1, then we return fail
   175 000011EB 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   176 000011F1 8905(54070000)      <1>     mov dword [currClustD], eax
   177 000011F7 668B05(83070000)    <1>     mov ax, word [dirSect]
   178 000011FE 8805(5C070000)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   179 00001204 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   180 00001208 488905(5D070000)    <1>     mov qword [currSectD], rax  
   181 0000120F C705(50070000)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   181 00001217 0000                <1>
   182 00001219 E830FAFFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
   183 0000121E 0F828E000000        <1>     jc .fnfError
   184 00001224 746D                <1>     jz .chardev    ;We are at the end of the directory and didnt find the file
   185 00001226 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Store the sector number here
   186 0000122D 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector in cluster
   187 00001234 50                  <1>     push rax    ;Save the next sector we need to read
   188 00001235 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   189 0000123B 3B05(54070000)      <1>     cmp eax, dword [currClustD] ;Did it change?
   190 00001241 58                  <1>     pop rax
   191 00001242 7489                <1>     je .sectorLoop  ;If not, we advanced sectors only
   192 00001244 66C705(83070000)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   192 0000124C 00                  <1>
   193 0000124D 50                  <1>     push rax
   194 0000124E 8B05(54070000)      <1>     mov eax, dword [currClustD]
   195 00001254 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Put new cluster number in var
   196 0000125A 58                  <1>     pop rax
   197 0000125B E96DFFFFFF          <1>     jmp .sectorLoop
   198                              <1> 
   199                              <1> .oldRoot:
   200                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   201                              <1> ; one large contiguous cluster.
   202                              <1> .oldSectorLp:
   203 00001260 0FB705(83070000)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   204 00001267 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   205 0000126A E887F7FFFF          <1>     call getBufForDir
   206 0000126F 7241                <1>     jc .fnfError
   207 00001271 E840000000          <1>     call prepSectorSearch      ;rbx has the buffer pointer for this dir sector
   208 00001276 E847000000          <1>     call findInBuffer
   209                              <1> .oldNextEP:
   210                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000127B 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000127D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   211 0000127E 7413                <1>     jz .chardev
   212 00001280 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector in directory
   213 00001287 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   214 0000128B 3905(85070000)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   215 00001291 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   216                              <1> .chardev:
   217                              <1> ;Now check for a char device ONLY if we are checking for file or dir!
   218                              <1> ;If exclusive dir on, fail!
   219 00001293 F605(69040000)FF    <1>     test byte [fileDirFlag], -1 ;Set if file/dir. Clear if only dir!
   220 0000129A 7416                <1>     jz .fnfError    
   221 0000129C E8C0090000          <1>     call checkIfCharDevice
   222 000012A1 720F                <1>     jc .fnfError    ;Not a char dev? Exit!
   223 000012A3 E8F0090000          <1>     call buildCharDir
   224 000012A8 31F6                <1>     xor esi, esi        ;Clear the CF flag
   225 000012AA 488D35(5A060000)    <1>     lea rsi, curDirCopy ;Return with rsi pointing to the dir copy!
   226                              <1>     return
    13                              <2> %%_ret:
    14 000012B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> .fnfError:
   228 000012B2 F9                  <1>     stc
   229 000012B3 B012                <1>     mov al, errNoFil
   230                              <1>     return
    13                              <2> %%_ret:
    14 000012B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> prepSectorSearch:
   232                              <1> ;Input: rbx -> Buffer with Dir sector to search
   233                              <1> ;Output: rsi -> Start of the dir data area
   234                              <1> ;        ecx = Max number of 32 byte dir entries in sector buffer
   235 000012B6 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   236 000012BA 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   237 000012BE C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   238                              <1>     return
    13                              <2> %%_ret:
    14 000012C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> findInBuffer:
   241                              <1> ;Input:  rsi = Sector buffer data area
   242                              <1> ;        cx = Number of entries to check in the sector
   243                              <1> ;Output: CF=CY => No entries found
   244                              <1> ;        ZF=NE => Keep searching in subsequent directories
   245                              <1> ;        ZF=ZE => End of directory reached early, stop
   246                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   247                              <1> ;        rsi = Points to start of the disk buffer directory entry
   248 000012C2 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   249 000012C8 E8B5000000          <1>     call adjustSearchAttr   ;Adjust the search attributes, including volid
   250                              <1> .searchMainLp:
   251                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   252 000012CD 8A25(08070000)      <1>     mov ah, byte [delChar]
   253 000012D3 803E00              <1>     cmp byte [rsi], 00h
   254 000012D6 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   255 000012D8 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   256 000012DA 7510                <1>     jne .notLookingForEmpty
   257                              <1> .emptySlot:
   258                              <1> ;Here we check if we are looking for an empty directory entry or
   259                              <1> ; we have reached the end of the file (if the first byte is 00h)
   260                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   261 000012DC 3A25(D9060000)      <1>     cmp ah, byte [fcbName] 
   262                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000012E2 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000012E4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   263                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   264 000012E5 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   265 000012E8 7545                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   266 000012EA F9                  <1>     stc
   267                              <1>     return
    13                              <2> %%_ret:
    14 000012EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   268                              <1> .notLookingForEmpty:
   269 000012EC 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   270 000012EF 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   271 000012F2 F605(5F040000)FF    <1>     test byte [volIdFlag], -1   ;If this is set, intervene in search.
   272 000012F9 7406                <1>     jz .notVolIdExclusive
   273 000012FB F6C408              <1>     test ah, dirVolumeID   ;If we are a volid, clear CF return
   274 000012FE 742F                <1>     jz .nextEntry
   275                              <1>     return
    13                              <2> %%_ret:
    14 00001300 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> .notVolIdExclusive:
   277                              <1> ;If any entry has the volid bit set, it is considered a VOL id only.
   278 00001301 803D(69040000)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   279 00001308 743C                <1>     je .exclusiveDir
   280 0000130A 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume label?
   281 0000130C 743F                <1>     je .volFile ;If so, go here
   282 0000130E F6C408              <1>     test ah, dirVolumeID ;Is this file a vollbl that we are not looking for?
   283 00001311 751C                <1>     jnz .nextEntry
   284 00001313 84E4                <1>     test ah, ah ;Regular files are always accepted at this point!
   285 00001315 7408                <1>     jz .scanName
   286 00001317 3C16                <1>     cmp al, dirInclusive    ;Is this an inclusive search?
   287 00001319 7404                <1>     je .scanName            ;If so, we accept this file!
   288 0000131B 38C4                <1>     cmp ah, al              ;(ah=File bits)==(al=Search bits)?
   289 0000131D 7510                <1>     jne .nextEntry          ;If bits dont match now, we ignore entry
   290                              <1> .scanName:
   291                              <1> ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   292 0000131F 56                  <1>     push rsi
   293 00001320 488D3D(D9060000)    <1>     lea rdi, fcbName ;Goto name template to search for
   294 00001327 E83E000000          <1>     call .nameCompare
   295 0000132C 5E                  <1>     pop rsi
   296 0000132D 7424                <1>     je .searchEntryFound
   297                              <1> .nextEntry:
   298                              <1> ;Go to next entry
   299 0000132F 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   300 00001336 FF05(85070000)      <1>     inc dword [dirEntry] ;And denote that in variable
   301 0000133C FFC9                <1>     dec ecx
   302 0000133E 758D                <1>     jnz .searchMainLp
   303                              <1> .badExit:
   304 00001340 31C0                <1>     xor eax, eax
   305 00001342 FFC0                <1>     inc eax ;Clear ZF
   306 00001344 F9                  <1>     stc
   307                              <1>     return
    13                              <2> %%_ret:
    14 00001345 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   308                              <1> .exclusiveDir:
   309                              <1> ;Used when going down a path, dir bit simply need be set
   310 00001346 F6C410              <1>     test ah, dirDirectory
   311 00001349 75D4                <1>     jnz .scanName
   312 0000134B EBE2                <1>     jmp short .nextEntry
   313                              <1> 
   314                              <1> .volFile:
   315 0000134D 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   316 0000134F 74CE                <1>     je .scanName       ;If so, scan the name agrees
   317 00001351 EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   318                              <1> 
   319                              <1> .searchEntryFound:
   320                              <1> ;Here a good entry was found!
   321 00001353 56                  <1>     push rsi
   322 00001354 57                  <1>     push rdi
   323 00001355 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   324 00001357 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   325 0000135E B904000000          <1>     mov ecx, 32/8
   326 00001363 F348A5              <1>     rep movsq   ;Copy the directory to SDA
   327 00001366 5F                  <1>     pop rdi
   328 00001367 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   329 00001368 F8                  <1>     clc
   330                              <1>     return
    13                              <2> %%_ret:
    14 00001369 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   331                              <1> 
   332                              <1> .nameCompare:
   333                              <1> ;Input: rsi = source string
   334                              <1> ;       rdi = string template to compare against
   335                              <1> ;Output: ZF=ZE => Strings are ok
   336                              <1> ;        ZF=NZ => Strings not ok
   337                              <1> ;Accepts wildcards. Trashes al
   338 0000136A 51                  <1>     push rcx
   339 0000136B 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   340                              <1> .ncLp:
   341 0000136D 81F90B000000        <1>     cmp ecx, 11
   342 00001373 740B                <1>     je .ncExit
   343 00001375 FFC1                <1>     inc ecx
   344 00001377 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   345 00001378 74F3                <1>     je .ncLp    ;If equal, keep going
   346 0000137A 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   347 0000137E 74ED                <1>     je .ncLp
   348                              <1> .ncExit:
   349 00001380 59                  <1>     pop rcx
   350                              <1>     return
    13                              <2> %%_ret:
    14 00001381 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> adjustSearchAttr:
   352                              <1> ;Converts the byte to a system only if the bit is set
   353                              <1> ;Input: eax = User selected search mask
   354                              <1> ;Output: eax = Modified search mask
   355 00001382 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   356 00001387 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   357                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000138C 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000138E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   358 0000138F B808000000          <1>     mov eax, dirVolumeID
   359                              <1>     return
    13                              <2> %%_ret:
    14 00001394 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> asciiToFCB:
   362                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   363                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   364                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   365                              <1> ;Name is space padded.
   366                              <1> ;Input: rsi = ASCII string buffer
   367                              <1> ;       rdi = FCB name buffer
   368                              <1> ;Output: al = Char that terminated the source string 
   369 00001395 53                  <1>     push rbx    
   370 00001396 57                  <1>     push rdi
   371 00001397 B90B000000          <1>     mov ecx, 11
   372 0000139C B020                <1>     mov al, " "
   373 0000139E F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   374 000013A0 5F                  <1>     pop rdi
   375 000013A1 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   376                              <1> .processName:
   377 000013A4 AC                  <1>     lodsb   ;Get the char in al
   378 000013A5 E8C85F0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   379 000013AA 84C0                <1>     test al, al
   380 000013AC 742D                <1>     jz .exit
   381 000013AE 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   382 000013B0 740E                <1>     je .extSpace
   383 000013B2 3C2E                <1>     cmp al, "."
   384 000013B4 7413                <1>     je .ext
   385                              <1>     ;Test if the char is valid
   386 000013B6 E839610000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   387 000013BB 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   388 000013BD AA                  <1>     stosb   ;Store the char
   389 000013BE EBE4                <1>     jmp short .processName
   390                              <1> .extSpace:
   391                              <1> ;Now we scan for a period in the name
   392 000013C0 AC                  <1>     lodsb   ;Get a char and increase rsi
   393 000013C1 84C0                <1>     test al, al
   394 000013C3 7416                <1>     jz .exit
   395 000013C5 3C2E                <1>     cmp al, "."     ;If al is not a period...
   396 000013C7 75F7                <1>     jne .extSpace   ; keep searching
   397                              <1> .ext:
   398 000013C9 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   399                              <1> .processExt:
   400 000013CD AC                  <1>     lodsb
   401 000013CE 84C0                <1>     test al, al
   402 000013D0 7409                <1>     jz .exit
   403 000013D2 3C20                <1>     cmp al, " "
   404 000013D4 7405                <1>     je .exit
   405 000013D6 AA                  <1>     stosb
   406 000013D7 EBF4                <1>     jmp short .processExt
   407                              <1> .exitBadChar:
   408 000013D9 30C0                <1>     xor al, al  ;Return a null terminator
   409                              <1> .exit:
   410 000013DB 5B                  <1>     pop rbx
   411                              <1>     return
    13                              <2> %%_ret:
    14 000013DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> 
   413                              <1> FCBToAsciiz:
   414                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   415                              <1> ;Name is space padded too
   416                              <1> ;Input: rsi = FCB name buffer
   417                              <1> ;       rdi = ASCIIZ string buffer
   418 000013DD B908000000          <1>     mov ecx, 8
   419 000013E2 F3A4                <1>     rep movsb   ;Move the name over
   420                              <1> .scanNameSpace:
   421 000013E4 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   422 000013E8 750D                <1>     jne .ext
   423 000013EA 48FFCF              <1>     dec rdi
   424 000013ED FFC1                <1>     inc ecx
   425 000013EF 81F908000000        <1>     cmp ecx, 8
   426 000013F5 72ED                <1>     jb .scanNameSpace
   427                              <1> .ext:
   428 000013F7 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   429 000013FC 7506                <1>     jne .validExt
   430 000013FE 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   431 00001402 7415                <1>     je .exit
   432                              <1> .validExt:
   433 00001404 B02E                <1>     mov al, "." ;We have a valid extension, store a period
   434 00001406 AA                  <1>     stosb
   435 00001407 B903000000          <1>     mov ecx, 3
   436 0000140C F3A4                <1>     rep movsb   ;Move the three extension chars over
   437                              <1> .scanExtSpace:
   438 0000140E 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   439 00001412 7505                <1>     jne .exit
   440 00001414 48FFCF              <1>     dec rdi
   441 00001417 EBF5                <1>     jmp short .scanExtSpace
   442                              <1> .exit:
   443 00001419 31C0                <1>     xor eax, eax
   444 0000141B AA                  <1>     stosb   ;Store a null at the end
   445                              <1>     return
    13                              <2> %%_ret:
    14 0000141C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> setupFFBlock:
   448                              <1> ;Sets up the find first block for the search
   449                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   450 0000141D 50                  <1>     push rax
   451 0000141E 53                  <1>     push rbx
   452 0000141F 56                  <1>     push rsi
   453 00001420 57                  <1>     push rdi
   454 00001421 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   455 00001424 8A05(FC060000)      <1>     mov al, byte [searchAttr]
   456 0000142A 243F                <1>     and al, 3Fh ;Clear upper two bits
   457 0000142C 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   458 0000142F 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   459 00001436 FEC0                <1>     inc al  ;Convert into 1 based number to agree with DOS
   460 00001438 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   461 0000143A 488D35(D9060000)    <1>     lea rsi, fcbName
   462 00001441 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   463 00001445 57                  <1>     push rdi
   464 00001446 48B820202020202020- <1>     mov rax, "        "
   464 0000144F 20                  <1>
   465 00001450 48AB                <1>     stosq
   466 00001452 66AB                <1>     stosw
   467 00001454 AA                  <1>     stosb
   468 00001455 5F                  <1>     pop rdi
   469 00001456 48A5                <1>     movsq   ;Move 8 chars
   470 00001458 66A5                <1>     movsw   ;Move 2 chars
   471 0000145A A4                  <1>     movsb   ;Move the final char
   472                              <1> 
   473 0000145B 8B05(85070000)      <1>     mov eax, dword [dirEntry]
   474 00001461 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   475 00001464 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
   476 0000146A 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   477 0000146D 8A05(65060000)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   478 00001473 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   479 00001476 8B05(70060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   480 0000147C 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   481 0000147F 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   482 00001485 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   483 00001488 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   484 0000148C 488D35(5A060000)    <1>     lea rsi, curDirCopy
   485 00001493 E845FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   486                              <1> 
   487 00001498 5F                  <1>     pop rdi
   488 00001499 5E                  <1>     pop rsi
   489 0000149A 5B                  <1>     pop rbx
   490 0000149B 58                  <1>     pop rax
   491                              <1>     return
    13                              <2> %%_ret:
    14 0000149C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> getDrvLetterFromPath:   ;Int 2Fh, AX=121Ah
   494                              <1> ;Gets the drive letter for the path in al
   495                              <1> ;Input: rsi = Buffer to process
   496                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   497                              <1> ;       ZF=ZE and al = 0 => Null path
   498                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   499                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   500                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   501 0000149D 30C0                <1>     xor al, al
   502 0000149F 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   503                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000014A2 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000014A4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   504 000014A5 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   505                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000014A9 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000014AB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   506 000014AC 66AD                <1>     lodsw   ;Get first word, rsi += 2
   507                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   508 000014AE 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   509 000014B0 2C60                <1>     sub al, 60h
   510                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000014B2 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000014B4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   511 000014B5 B0FF                <1>     mov al, -1  ;Else not a valid drive number
   512                              <1>     return
    13                              <2> %%_ret:
    14 000014B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> getDirPath:
   515 000014B8 30C0                <1>     xor al, al   ;Set to Directory
   516 000014BA EB02                <1>     jmp short getPath
   517                              <1> getFilePath:
   518 000014BC B0FF                <1>     mov al, -1  ;Set to File
   519                              <1> getPath:
   520                              <1> ;Called with:
   521                              <1> ; rdi = SDA Buffer for filename
   522                              <1> ; rsi = Potentially unqualified filename
   523                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   524 000014BE 50                  <1>     push rax
   525 000014BF 57                  <1>     push rdi
   526 000014C0 E877000000          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   527 000014C5 5F                  <1>     pop rdi
   528 000014C6 58                  <1>     pop rax
   529                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000014C7 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000014C9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   530                              <1>     ;Now our name is FQ, we can search the for it!
   531 000014CA 48813D(12070000)FF- <1>     cmp qword [workingCDS], -1  ;If there is no CDS associated with this path
   531 000014D2 FFFFFF              <1>
   532 000014D5 0F849B010000        <1>     je getPathNoCanon.netFFnoCDS ;It must be a net no CDS search!
   533 000014DB 8805(69040000)      <1>     mov byte [fileDirFlag], al 
   534 000014E1 B0FF                <1>     mov al, -1
   535 000014E3 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   536 000014E9 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   537 000014EF C605(05070000)00    <1>     mov byte [parDirExist], 0   
   538 000014F6 C605(04070000)00    <1>     mov byte [fileExist], 0     
   539 000014FD 8A05(09070000)      <1>     mov al, byte [workingDrv]
   540 00001503 FEC0                <1>     inc al
   541 00001505 488D7301            <1>     lea rsi, qword [rbx + 1]    ;Move the pointers past the machine name pathsep
   542 00001509 66813F5C5C          <1>     cmp word [rdi], "\\"        ;Did we resolve to remote path?
   543 0000150E 7424                <1>     je .net
   544 00001510 488B1D(1E060000)    <1>     mov rbx, qword [fname1Ptr]
   545 00001517 4881C302000000      <1>     add rbx, 2  ;Now our path is completely normalised so this always works!
   546 0000151E 488D7301            <1>     lea rsi, qword [rbx + 1]
   547 00001522 FF35(12070000)      <1>     push qword [workingCDS] ;Save the original CDS to allow for subst to work
   548 00001528 E898010000          <1>     call pathWalk
   549 0000152D 8F05(12070000)      <1>     pop qword [workingCDS]
   550                              <1>     return
    13                              <2> %%_ret:
    14 00001533 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> .net:
   552 00001534 4889F7              <1>     mov rdi, rsi                ;Else, skip setting up vars for drive access
   553 00001537 E994010000          <1>     jmp pathWalk.netEp          ;Still do all drive access using CDS, but over redir
   554                              <1>     ;The reason why this works is that DOS doesn't need to keep track of the 
   555                              <1>     ; internal vars for accessing a net drive. All accesses still occur via the
   556                              <1>     ; redir, and the redir can update its vars as it needs. The DOS pointers
   557                              <1>     ; point as is necessary on the path (with machine name prefix), and in the SDA
   558                              <1>     ; so the redir can do it's job.
   559                              <1> 
   560                              <1> canonicaliseFileName:
   561                              <1> ;Always trying to build and qualify a full pathname
   562                              <1> ;Does getPath without hitting the disk
   563 0000153C B0FF                <1>     mov al, -1
   564 0000153E 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   565 00001544 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   566 0000154A 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   567 00001551 FEC0                <1>     inc al  ;make al = 0
   568 00001553 8805(2E060000)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   569 00001559 E839000000          <1>     call getPathNoCanon.epAlt
   570                              <1>     retc    ;Error return
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000155E 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001560 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   571                              <1>     ;Check the last two chars to see if we have a null terminator.
   572                              <1>     ;If neither has a null terminator, add one
   573 00001561 31C0                <1>     xor eax, eax
   574 00001563 3807                <1>     cmp byte [rdi], al
   575                              <1>     retz                
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001565 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001567 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   576 00001568 3847FF              <1>     cmp byte [rdi - 1], al 
   577                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000156B 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000156D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   578 0000156E AA                  <1>     stosb
   579                              <1>     return
    13                              <2> %%_ret:
    14 0000156F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   580                              <1> 
   581                              <1> getDirPathNoCanon:
   582                              <1> ;FCB only
   583 00001570 31C0                <1>     xor eax, eax
   584 00001572 4889FE              <1>     mov rsi, rdi
   585 00001575 EB05                <1>     jmp short getPathNoCanon
   586                              <1> getFilePathNoCanon:
   587                              <1> ;Used when the path is constructed internally (as for FCB functions), and renameMain
   588                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   589 00001577 B0FF                <1>     mov al, -1
   590 00001579 4889FE              <1>     mov rsi, rdi
   591                              <1> getPathNoCanon:
   592                              <1> ;Called with:
   593                              <1> ; rdi = SDA Buffer for filename
   594                              <1> ; rsi = Potentially unqualified filename
   595                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   596 0000157C 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   597 00001582 B0FF                <1>     mov al, -1
   598 00001584 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   599 0000158A 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   600 00001591 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   601                              <1> .epAlt:
   602 00001597 C605(05070000)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   603 0000159E C605(04070000)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   604 000015A5 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   605 000015AC 7431                <1>     jz .notServer
   606 000015AE E8EAFEFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in "X:\"
   607 000015B3 E8215D0000          <1>     call getCDS ;Get the cds for the drive letter on the path
   608 000015B8 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   609 000015BA 56                  <1>     push rsi
   610 000015BB 57                  <1>     push rdi
   611 000015BC 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   612 000015C3 50                  <1>     push rax
   613 000015C4 E802610000          <1>     call dosCrit1Enter
   614 000015C9 E849590000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   615 000015CE E802610000          <1>     call dosCrit1Exit
   616 000015D3 58                  <1>     pop rax
   617 000015D4 5F                  <1>     pop rdi
   618 000015D5 5E                  <1>     pop rsi
   619 000015D6 0F83B4000000        <1>     jnc .driveOk
   620                              <1> .serverExit:
   621 000015DC B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   622                              <1>     return
    13                              <2> %%_ret:
    14 000015DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   623                              <1> .notServer:
   624                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   625                              <1>     ; and only in truename mode
   626 000015DF F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;If set, we on disk hit mode
   627 000015E6 7515                <1>     jnz .skipRemoteQualify      ;So skip!
   628 000015E8 48C705(12070000)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   628 000015F0 FFFFFF              <1>
   629 000015F3 B823110000          <1>     mov eax, 1123h  ;Net Qualify Path name
   630 000015F8 CD2F                <1>     int 2fh ;CF=CY if not resolved. CF=NC if resolved
   631                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000015FA 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000015FC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   632                              <1> .skipRemoteQualify:
   633 000015FD E89BFEFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   634 00001602 9C                  <1>     pushfq  ;Save the flag state on stack
   635 00001603 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   636 00001604 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   637 00001607 E85A5D0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   638 0000160C 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. UNC)
   639 0000160E E8535D0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   640 00001613 756B                <1>     jnz .notNet
   641 00001615 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   642 00001617 7567                <1>     jne .notNet
   643 00001619 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   644 0000161A 9D                  <1>     popfq
   645 0000161B 66AD                <1>     lodsw
   646 0000161D 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   647 00001621 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   648                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   649                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   650                              <1> ; redirector Find First Without CDS
   651 00001623 8A1D(2E060000)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   652 00001629 C605(2E060000)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   653 00001630 53                  <1>     push rbx
   654                              <1> .moveNetName: ;This sets up the machine name portion of the UNC path
   655 00001631 AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   656 00001632 E83B5D0000          <1>     call uppercaseChar  ;Make char in al uppercase
   657 00001637 84C0                <1>     test al, al
   658 00001639 7435                <1>     jz .netEnd
   659 0000163B E8265D0000          <1>     call swapPathSeparator  ;If path sep, swap it
   660 00001640 AA                  <1>     stosb
   661 00001641 75EE                <1>     jnz .moveNetName  ;If not a path separating char in al, keep looking
   662                              <1>     ;Skip all following pathseps if there are any
   663                              <1> .moveNetSharePtr:
   664 00001643 AC                  <1>     lodsb
   665 00001644 E81D5D0000          <1>     call swapPathSeparator
   666 00001649 74F8                <1>     jz .moveNetSharePtr
   667 0000164B C60700              <1>     mov byte [rdi], 0   ;Null terminate path to make ASCIIZ
   668 0000164E 48FFCE              <1>     dec rsi ;More rsi back to the first char past the seps
   669 00001651 84C0                <1>     test al, al ;Was this char null?
   670 00001653 741B                <1>     jz .netEnd  ;Skip processing if so!
   671 00001655 4889FB              <1>     mov rbx, rdi
   672 00001658 48FFCB              <1>     dec rbx ;rbx points at the pathsep before the space for the first char
   673 0000165B E870000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   674 00001660 721C                <1>     jc .netExitBad
   675                              <1>     ;Now if we have a trailing backslash, throw it away
   676                              <1>     ;rdi points to the null char of the path
   677 00001662 8A47FF              <1>     mov al, byte [rdi - 1]  ;Get the char before the nullsep
   678 00001665 E8FC5C0000          <1>     call swapPathSeparator  ;Is it a pathsep?
   679 0000166A 7504                <1>     jnz .netEnd
   680 0000166C C647FF00            <1>     mov byte [rdi - 1], 0   ;Write a null if it is
   681                              <1> .netEnd:
   682 00001670 5B                  <1>     pop rbx
   683 00001671 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   684                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001673 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001675 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   685                              <1> .netFFnoCDS:
   686 00001676 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   687 0000167B CD2F                <1>     int 2Fh
   688                              <1>     return
    13                              <2> %%_ret:
    14 0000167D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   689                              <1> .netExitBad:
   690 0000167E 5B                  <1>     pop rbx
   691                              <1>     return
    13                              <2> %%_ret:
    14 0000167F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   692                              <1> .notNet:
   693                              <1> ;This is the normal case; paths can be relative, or absolute.
   694 00001680 58                  <1>     pop rax ;Get the drive letter back
   695 00001681 9D                  <1>     popfq   ;Get the flag state back
   696 00001682 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   697                              <1> .pnfErr:
   698 00001684 B003                <1>     mov al, errPnf  ;Null path error
   699 00001686 F9                  <1>     stc
   700                              <1>     return
    13                              <2> %%_ret:
    14 00001687 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   701                              <1> .notNull:
   702 00001688 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   703 0000168A 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   704 0000168C B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   705 0000168E F9                  <1>     stc
   706                              <1>     return
    13                              <2> %%_ret:
    14 0000168F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> .driveOk:
   708 00001690 84C0                <1>     test al, al
   709 00001692 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   710                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   711 00001694 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   712 00001697 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   713 00001699 50                  <1>     push rax    ;Save the drive letter
   714 0000169A AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   715 0000169B 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   716 0000169E E8C35C0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   717                              <1>     ;If al is a path separator, then this path is absolute.
   718 000016A3 58                  <1>     pop rax ;Get back the drive letter
   719 000016A4 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   720                              <1> .absoPath:
   721                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   722 000016A6 48FFC6              <1>     inc rsi
   723 000016A9 EB1A                <1>     jmp short .commonDir
   724                              <1> .curPath:
   725                              <1> ;This is only jumped to if we are relative the current drive
   726                              <1> ;rsi points to first char in path
   727                              <1> ;If this char is \ or /, then it is an absolute path.
   728 000016AB 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   729 000016B1 FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   730 000016B3 50                  <1>     push rax    ;Save the current drive number
   731 000016B4 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   732 000016B6 E8AB5C0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   733 000016BB 58                  <1>     pop rax ;Get back the current drive number
   734 000016BC 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   735                              <1> .relMain:
   736 000016BE C605(01070000)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   737                              <1> .commonDir:
   738                              <1> ;rsi points to the start of the string we will be appending
   739                              <1> ;Fall through now
   740                              <1> pathWalk:
   741                              <1> ;Input: rsi must point to source buffer for path to expand
   742                              <1> ;       rdi must point to a destination buffer
   743                              <1> ;       al must contain the drive 1 based number
   744 000016C5 E8E9000000          <1>     call prepareDir    ;Prepare the start of the path
   745 000016CA 0F82D5000000        <1>     jc .badDriveExit 
   746                              <1> .netEp:
   747                              <1> ;For net path resolution (resolution ONLY) ptrs must point past "\\".
   748                              <1> ;For subst, resolution cannot go past backslash offset.
   749                              <1> ;For join, it is transparent.
   750 000016D0 F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;Clear if not hitting disk!
   751 000016D7 7420                <1>     jz .notNet                  ;Skip this if not hitting disk!
   752                              <1> ;Start diskhit by checking the cds here if hitting the disk. 
   753                              <1> ;If it is a network cds we make findfirst req. 
   754 000016D9 57                  <1>     push rdi
   755 000016DA 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   756 000016E1 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   757 000016E7 5F                  <1>     pop rdi
   758 000016E8 740F                <1>     jz .notNet
   759 000016EA 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS as in DOS, undocumented
   760 000016F1 B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS!
   761 000016F6 CD2F                <1>     int 2fh 
   762                              <1>     return
    13                              <2> %%_ret:
    14 000016F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   763                              <1> .notNet:
   764 000016F9 803E00              <1>     cmp byte [rsi], 0   ;If rsi at the end of the string, exit for ROOT dir
   765 000016FC 7543                <1>     jnz .mainlp
   766                              <1>     ;Setup dummy dir data for Root directory
   767 000016FE 31C0                <1>     xor eax, eax
   768 00001700 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   769 00001707 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   770 0000170E C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   771                              <1>     ;Now we check if we are on a JOIN drive. If so, we swap back to the 
   772                              <1>     ; join host! Only when hitting the disk though.
   773 00001715 F605(2E060000)FF    <1>     test byte [skipDisk], -1
   774 0000171C 0F8489000000        <1>     jz .exitGood
   775 00001722 57                  <1>     push rdi
   776 00001723 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]     ;Get the current CDS
   777 0000172A 66F747430020        <1>     test word [rdi + cds.wFlags], cdsJoinDrive
   778 00001730 5F                  <1>     pop rdi
   779 00001731 7478                <1>     jz .exitGood    ;If not a join drive, exit (this never happens?)
   780 00001733 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Use the join client CDS as source string!
   781 0000173A B0FF                <1>     mov al, -1  ;Set to search for a dir as only dir can be mntpoint
   782 0000173C E93BFEFFFF          <1>     jmp getPathNoCanon
   783                              <1> .mainlp:
   784                              <1>     ;rbx must remain constant in this portion,
   785                              <1>     ; and is used to signify the first writable byte in the path
   786 00001741 53                  <1>     push rbx
   787 00001742 E83F010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   788 00001747 5B                  <1>     pop rbx
   789 00001748 7268                <1>     jc .exit    ;If this errors (bad chars in filename portion), exit bad 
   790 0000174A 84C0                <1>     test al, al
   791 0000174C 7507                <1>     jnz .notFile
   792 0000174E C605(05070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   793                              <1> .notFile:
   794 00001755 53                  <1>     push rbx                ;The below messes up rbx
   795 00001756 E866040000          <1>     call checkDevPath       ;Silently intervene DEVs if in truename mode!
   796 0000175B 5B                  <1>     pop rbx
   797 0000175C E80B020000          <1>     call searchForPathspec  ;Now search the directory
   798 00001761 724F                <1>     jc .exit    ;If CF=CY, error exit. al has error code
   799 00001763 E880020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   800 00001768 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   801 0000176A 84C0                <1>     test al, al ;Exit if this pathspec was a file
   802 0000176C 743D                <1>     jz .exitGood
   803                              <1>     ;Here I have to take the cluster data from the found directory entry
   804                              <1>     ; and setup the search for the next pathspec portion
   805                              <1>     ;Copy necessary data from the current directory copy
   806 0000176E 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   807 00001775 74CA                <1>     jz .mainlp
   808 00001777 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   809 0000177E C1E010              <1>     shl eax, 10h    ;Shift it high
   810 00001781 668B05(74060000)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   811                              <1>     ;eax now has the cluster number of the search
   812 00001788 8905(7F070000)      <1>     mov dword [dirClustA], eax
   813 0000178E 8905(7B070000)      <1>     mov dword [dirClustPar], eax
   814 00001794 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   815 00001796 8905(85070000)      <1>     mov dword [dirEntry], eax
   816 0000179C 668905(83070000)    <1>     mov word [dirSect], ax
   817 000017A3 EB9C                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   818                              <1> .badDriveExit:
   819 000017A5 B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   820                              <1>     return
    13                              <2> %%_ret:
    14 000017AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   821                              <1> .exitGood:
   822 000017AB C605(04070000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   823                              <1> .exit:
   824                              <1>     return
    13                              <2> %%_ret:
    14 000017B2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   825                              <1> 
   826                              <1> prepareDir:
   827                              <1> ;Used to transfer the current directory if it is necessary.
   828                              <1> ;Always necessary if the user specified a subst drive. Else only if 
   829                              <1> ; a relative path is specified.
   830                              <1> ;Input: al = 1-based drive letter
   831                              <1> ;Output: rdi = Pointing at where to place chars from source string
   832                              <1> ;        rbx -> Pointing at the point before which chars cannot be placed
   833                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   834 000017B3 56                  <1>     push rsi    ;Push ptr to source string
   835 000017B4 E8125F0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   836 000017B9 E8AB5A0000          <1>     call getCDSNotJoin   ;Set internal variables, working CDS etc etc
   837 000017BE 7320                <1>     jnc .notJoin ;Very valid disk
   838 000017C0 F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;Are we a join drive in truename?
   839 000017C7 7510                <1>     jnz .okJoin                 ;If not, proceed. If so, fail.    
   840 000017C9 F9                  <1>     stc
   841 000017CA EB19                <1>     jmp short .critExit    ;If the drive number in al is too great or a join drive specified.
   842                              <1> .getDPB: 
   843 000017CC 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
   844 000017D3 E83F570000          <1>     call getDiskDPB  ;Update working DPB and drv before searching
   845                              <1>     return
    13                              <2> %%_ret:
    14 000017D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   846                              <1> .okJoin:
   847 000017D9 E8EEFFFFFF          <1>     call .getDPB
   848 000017DE EB3A                <1>     jmp short .joinEp
   849                              <1> .notJoin:
   850 000017E0 E8E7FFFFFF          <1>     call .getDPB
   851                              <1>     ;rbp = DPB ptr now
   852                              <1> .critExit:
   853 000017E5 E8EB5E0000          <1>     call dosCrit1Exit
   854 000017EA 7253                <1>     jc .badDriveExit 
   855 000017EC 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   856                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   857                              <1>     ;If this CDS is a join drive... it can't be unless we truenamed our path!
   858                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   859                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   860                              <1>     ;Before we begin, we init rbx to point at the backslash offset of the path
   861 000017F3 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Now get the CDS ptr into rsi
   862 000017FA 4889FB              <1>     mov rbx, rdi
   863 000017FD 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   864 00001801 4801C3              <1>     add rbx, rax    ;Move rbx to the backslash offset for this drive
   865                              <1>     ;Now check if we have a subst to handle
   866 00001804 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   867 0000180A 7535                <1>     jnz .prepDirSubst
   868 0000180C F605(01070000)FF    <1>     test byte [spliceFlag], -1
   869 00001813 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   870                              <1>     ;Else we copy the first two chars only (X:)
   871 00001815 66A5                <1>     movsw  
   872 00001817 B05C                <1>     mov al, "\"
   873 00001819 AA                  <1>     stosb   ;Store the path separator in internal buffer and increment rdi
   874                              <1> .joinEp:
   875 0000181A 31C0                <1>     xor eax, eax    ;Get cluster 0
   876 0000181C EB1B                <1>     jmp short .prepDirExitSkip
   877                              <1> .prepLoop:
   878 0000181E AC                  <1>     lodsb
   879 0000181F 84C0                <1>     test al, al ;If al was null, then we stop
   880 00001821 7403                <1>     jz .prepDirExit
   881 00001823 AA                  <1>     stosb
   882 00001824 EBF8                <1>     jmp short .prepLoop
   883                              <1> .prepDirExit:
   884 00001826 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   885 0000182A 7403                <1>     je .prepDirExitSkipPathsep
   886 0000182C B05C                <1>     mov al, "\"
   887 0000182E AA                  <1>     stosb   ;Store the path separator and increment rdi
   888                              <1> .prepDirExitSkipPathsep:
   889 0000182F 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   890 00001836 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   891                              <1> .prepDirExitSkip:
   892 00001839 E816000000          <1>     call prepSetupDirSearchVars
   893 0000183E F8                  <1>     clc ;Clear carry before exiting
   894                              <1> .badDriveExit:
   895 0000183F 5E                  <1>     pop rsi
   896                              <1>     return
    13                              <2> %%_ret:
    14 00001840 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   897                              <1> .prepDirSubst:
   898 00001841 51                  <1>     push rcx
   899 00001842 0FB74E5D            <1>     movzx ecx, word [rsi + cds.wBackslashOffset]
   900                              <1> .prepDirCopy1:
   901 00001846 F3A4                <1>     rep movsb   ;Copy the string over
   902 00001848 59                  <1>     pop rcx
   903 00001849 F605(01070000)FF    <1>     test byte [spliceFlag], -1
   904 00001850 75D4                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   905 00001852 EBCA                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   906                              <1> prepSetupDirSearchVars:
   907                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   908                              <1> ;       rbp -> Working DPB
   909 00001854 51                  <1>     push rcx
   910 00001855 31C9                <1>     xor ecx, ecx
   911 00001857 66890D(83070000)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   912 0000185E 890D(85070000)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   913 00001864 E8A7F1FFFF          <1>     call getFATtype ;Get type of fat
   914 00001869 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   915 0000186F 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   916                              <1>     ;FAT 32 here
   917 00001871 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   918 00001873 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   919 00001875 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   920                              <1> .psdsvExit:
   921 00001878 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   922 0000187E 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   923 00001884 59                  <1>     pop rcx
   924                              <1>     return 
    13                              <2> %%_ret:
    14 00001885 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   925                              <1> 
   926                              <1> copyPathspec:
   927                              <1> ;1) Copies a path portion from the source buffer to the destination
   928                              <1> ;2) Advances rsi to the next null, \ or /
   929                              <1> ;3) Expands all * to ?'s
   930                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   931                              <1> ;    next path separator and rdi pointing to the previous pathsep
   932                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   933                              <1> ;    with rsi moving to path separator
   934                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   935                              <1> ;
   936                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   937                              <1> ;           rdi = Points to where to store it
   938                              <1> ;
   939                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   940                              <1> ;           rdi = First char of next space to store next pathspec
   941                              <1> ;           al = Last char stored (either \ or NULL)
   942                              <1> ;           CF=NC = OK path
   943                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   944                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   945 00001886 57                  <1>     push rdi    ;Save the pointer into the user buffer
   946 00001887 C605(8D040000)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   947 0000188E 488D3D(D9060000)    <1>     lea rdi, fcbName
   948 00001895 57                  <1>     push rdi
   949 00001896 B903000000          <1>     mov ecx, 3
   950 0000189B B820202020          <1>     mov eax, "    " ;Four spaces
   951 000018A0 F3AB                <1>     rep stosd   ;Store 12 spaces
   952 000018A2 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   953                              <1> 
   954 000018A3 488D1D(E4060000)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   955 000018AA AC                  <1>     lodsb   ;Get first char from user path in al
   956 000018AB 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   957 000018AD 746B                <1>     je .cpsDots
   958 000018AF 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   959                              <1> ;First char is not a dot, so now check if starts with E5h? 
   960                              <1> ;If so, store 05h in its place!
   961 000018B2 3CE5                <1>     cmp al, 0E5h
   962 000018B4 7506                <1>     jne .cpsMainLoop
   963 000018B6 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   964 000018B9 B005                <1>     mov al, 05h
   965 000018BB AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   966                              <1> .cpsMainLoop:
   967 000018BC AC                  <1>     lodsb   ;Get the char in al and advance rsi
   968 000018BD 84C0                <1>     test al, al ;Is it the null char?
   969 000018BF 0F848A000000        <1>     jz .cpsStore  ;If so, terminate immediately
   970 000018C5 E89C5A0000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   971 000018CA 0F848D000000        <1>     jz .cpsSkipPathseps ; and then exit with the final converted pathsep in al
   972 000018D0 3C2E                <1>     cmp al, "." ;Filename extension separator
   973 000018D2 7420                <1>     je .cpsExtension
   974                              <1>     ;If we have space in the filename, we check to see if the next char is *
   975 000018D4 3C2A                <1>     cmp al, "*" ;Wildcard?
   976 000018D6 7430                <1>     je .cpsWildcard
   977 000018D8 3C3F                <1>     cmp al, "?" ;Good wildcard?
   978 000018DA 740C                <1>     je .store
   979 000018DC E8915A0000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   980 000018E1 E80E5C0000          <1>     call checkCharValid ; and check it is a valid char
   981 000018E6 7472                <1>     je .cpsExitError
   982                              <1> .store:
   983 000018E8 4839DF              <1>     cmp rdi, rbx
   984 000018EB 7442                <1>     je .cpsProcessName ;Skip any non-terminating chars
   985 000018ED AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   986 000018EE EBCC                <1>     jmp short .cpsMainLoop
   987                              <1> .cpsInvalidChar:
   988 000018F0 30C0                <1>     xor al, al
   989 000018F2 EB3B                <1>     jmp short .cpsProcessName
   990                              <1> .cpsExtension:
   991                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   992 000018F4 B903000000          <1>     mov ecx, 3 
   993 000018F9 488D3D(E1060000)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   994 00001900 57                  <1>     push rdi
   995 00001901 B020                <1>     mov al, " "
   996 00001903 F3AA                <1>     rep stosb
   997 00001905 5F                  <1>     pop rdi
   998 00001906 EBB4                <1>     jmp short .cpsMainLoop
   999                              <1> .cpsWildcard:
  1000                              <1> ;Fill the entire FCB filespec with ?'s.
  1001                              <1> ;We lookahead to the first char past the final "*" to prevent multiple
  1002                              <1> ; *'s from crashing DOS :)
  1003 00001908 AC                  <1>     lodsb   ;Get char, inc rsi
  1004 00001909 3C2A                <1>     cmp al, "*"
  1005 0000190B 74FB                <1>     je short .cpsWildcard
  1006 0000190D 48FFCE              <1>     dec rsi ;Go back to the first non-star char
  1007 00001910 B03F                <1>     mov al, "?"
  1008                              <1> .cpsWildcardLp:
  1009 00001912 AA                  <1>     stosb
  1010 00001913 4839DF              <1>     cmp rdi, rbx    ;We filled the FCB name field yet?
  1011 00001916 75FA                <1>     jne short .cpsWildcardLp
  1012 00001918 EBA2                <1>     jmp short .cpsMainLoop
  1013                              <1> 
  1014                              <1> .cpsDots:
  1015 0000191A AA                  <1>     stosb   ;Store the first dot
  1016 0000191B 8A06                <1>     mov al, byte [rsi]
  1017 0000191D 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
  1018 0000191F 752E                <1>     jne .cpsStore
  1019 00001921 A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
  1020 00001922 8A06                <1>     mov al, byte [rsi]  ;Ensure that the .. is not followed by any chars
  1021 00001924 84C0                <1>     test al, al
  1022 00001926 7407                <1>     jz .cpsProcessName
  1023 00001928 E8395A0000          <1>     call swapPathSeparator  ;If the char following the .. is not null or pathsep, error
  1024 0000192D 752B                <1>     jnz .cpsExitError
  1025                              <1> .cpsProcessName:
  1026                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
  1027 0000192F 84C0                <1>     test al, al 
  1028 00001931 741C                <1>     jz .cpsStore
  1029 00001933 E82E5A0000          <1>     call swapPathSeparator
  1030 00001938 7415                <1>     jz .cpsStore
  1031                              <1> .cpsFindTerminator:
  1032 0000193A AC                  <1>     lodsb
  1033 0000193B 84C0                <1>     test al, al 
  1034 0000193D 7410                <1>     jz .cpsStore
  1035 0000193F E8225A0000          <1>     call swapPathSeparator
  1036 00001944 7409                <1>     jz .cpsStore
  1037 00001946 E8A95B0000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
  1038 0000194B 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
  1039                              <1>     ;If we encounter a terminator, convert to 0
  1040 0000194D 30C0                <1>     xor al, al
  1041                              <1> .cpsStore:
  1042 0000194F 488D3D(E4060000)    <1>     lea rdi, fcbName+11
  1043 00001956 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
  1044 00001957 5F                  <1>     pop rdi
  1045 00001958 F8                  <1>     clc
  1046                              <1>     return
    13                              <2> %%_ret:
    14 00001959 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1047                              <1> .cpsExitError:
  1048 0000195A 5F                  <1>     pop rdi
  1049 0000195B F9                  <1>     stc
  1050                              <1>     return
    13                              <2> %%_ret:
    14 0000195C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1051                              <1> .cpsSkipPathseps:
  1052 0000195D AC                  <1>     lodsb
  1053 0000195E E8035A0000          <1>     call swapPathSeparator
  1054 00001963 74F8                <1>     jz .cpsSkipPathseps
  1055 00001965 48FFCE              <1>     dec rsi ;Go back to the first char in next section of the pathspec
  1056 00001968 B05C                <1>     mov al, "\" ;Make sure to store a pathsep char
  1057 0000196A EBE3                <1>     jmp short .cpsStore
  1058                              <1> 
  1059                              <1> searchForPathspec:
  1060                              <1>     ;Now search the current directory for this filename
  1061                              <1>     ;Find first using SDA ffBlock
  1062                              <1>     ;If al = 0, we have final file name or directory name
  1063                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
  1064                              <1>     ;Output: CF=CY => Error occured, al has error code (Fnf or Pnf)
  1065                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
  1066                              <1>     ;                 FF block somewhat setup
  1067                              <1>     ;Preserves rax, rbx, rsi,  rdi
  1068 0000196C 50                  <1>     push rax
  1069 0000196D 53                  <1>     push rbx
  1070 0000196E 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
  1071 0000196F 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
  1072 00001970 0FB61D(69040000)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
  1073 00001977 53                  <1>     push rbx    ;and push it onto the stack
  1074                              <1> ;Evaluate whether we are searching for a file for a directory
  1075 00001978 84C0                <1>     test al, al
  1076 0000197A 741D                <1>     jz .sfpPNfile
  1077                              <1>     ;Fall if subdir
  1078 0000197C 488D3D(D9060000)    <1>     lea rdi, fcbName
  1079 00001983 B03F                <1>     mov al, "?" ;Search for wildcard
  1080 00001985 B90B000000          <1>     mov ecx, 11
  1081 0000198A F2AE                <1>     repne scasb
  1082 0000198C 7452                <1>     je .sfpPnf  ;Path not found if a ? found in the name
  1083 0000198E B010                <1>     mov al, dirDirectory    ;We want a directory only search.
  1084 00001990 C605(69040000)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
  1085 00001997 EB07                <1>     jmp short .sfpPNMain
  1086                              <1> .sfpPNfile:
  1087                              <1>     ;Here if we are searching for a file or directory as setup by search init
  1088 00001999 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
  1089                              <1> .sfpPNMain:
  1090 000019A0 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1091 000019A7 7418                <1>     je .sfpPNNoDisk
  1092 000019A9 E8DCF7FFFF          <1>     call searchDir
  1093 000019AE 7211                <1>     jc .sfpPNNoDisk
  1094 000019B0 803D(5A060000)05    <1>     cmp byte [curDirCopy], 05h 
  1095 000019B7 7507                <1>     jne .noAdjust
  1096                              <1>     ;Readjust when the start of a dir entry name is 05h
  1097 000019B9 C605(5A060000)E5    <1>     mov byte [curDirCopy], 0E5h
  1098                              <1> .noAdjust:
  1099 000019C0 F8                  <1>     clc ;Ensure the carry flag is clear here!
  1100                              <1> .sfpPNNoDisk:
  1101 000019C1 5B                  <1>     pop rbx
  1102 000019C2 881D(69040000)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1103 000019C8 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1104 000019C9 5E                  <1>     pop rsi
  1105 000019CA 5B                  <1>     pop rbx
  1106 000019CB 58                  <1>     pop rax ;Get back the original al value
  1107                              <1>     retnc   ;Return if file found. Else, report what was not found correctly!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000019CC 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000019CE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1108 000019CF 84C0                <1>     test al, al ;If we are on the last path comp, fail pnf!
  1109 000019D1 F9                  <1>     stc         ;Dont forget to set CF again!!
  1110 000019D2 B802000000          <1>     mov eax, errFnf
  1111                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000019D7 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000019D9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1112 000019DA B803000000          <1>     mov eax, errPnf ;Else it is path not found!
  1113                              <1>     return
    13                              <2> %%_ret:
    14 000019DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1114                              <1> .sfpPnf:
  1115 000019E0 B803000000          <1>     mov eax, errPnf
  1116                              <1> .sfpErrExit:
  1117 000019E5 F9                  <1>     stc ;Set carry
  1118 000019E6 EBD9                <1>     jmp short .sfpPNNoDisk
  1119                              <1> 
  1120                              <1> addPathspecToBuffer:
  1121                              <1> ;Input: fcbName = Qualified pathname portion
  1122                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1123                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1124                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1125                              <1> ;rbx points to the "head of the path"
  1126                              <1> ;rsi points to the first char of the next portion if al is pathsep
  1127                              <1> ;Converts the special char if the filename starts with it!
  1128 000019E8 F605(2E060000)FF    <1>     test byte [skipDisk], -1
  1129                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000019EF 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000019F1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1130 000019F2 803D(D9060000)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1131 000019F9 746A                <1>     je .aptbDots
  1132                              <1>     ;Copy filename over to internal buffer
  1133                              <1> .aptbAddNull:
  1134 000019FB 56                  <1>     push rsi    ;Save source pointer position
  1135 000019FC 488D35(D9060000)    <1>     lea rsi, fcbName
  1136 00001A03 803E05              <1>     cmp byte [rsi], 05h
  1137 00001A06 7503                <1>     jne .notSpecialChar
  1138 00001A08 C606E5              <1>     mov byte [rsi], 0E5h
  1139                              <1> .notSpecialChar:
  1140 00001A0B E8CDF9FFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1141 00001A10 48FFCF              <1>     dec rdi ;Go back to the in-situ null terminator char
  1142 00001A13 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1143 00001A14 E8C6000000          <1>     call .aptbInterveneEnterJoin
  1144                              <1>     retc    ;Return bad if a disk error occured.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001A19 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001A1B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1145                              <1> .aptbHandleTerminator:
  1146 00001A1C 8A05(E4060000)      <1>     mov al, byte [fcbName + 11] ;Get the actual terminator for this portion.
  1147 00001A22 84C0                <1>     test al, al
  1148 00001A24 741A                <1>     jz .aptbHandleNull
  1149 00001A26 E83B590000          <1>     call swapPathSeparator
  1150 00001A2B 0F85C7000000        <1>     jnz .aptbErrorExit
  1151                              <1> ;Handle path separator here directly
  1152 00001A31 50                  <1>     push rax    ;Preserve the terminator char
  1153 00001A32 8A47FF              <1>     mov al, byte [rdi - 1]
  1154 00001A35 E82C590000          <1>     call swapPathSeparator  ;If the char before us is a pathsep, do nothing.
  1155 00001A3A 58                  <1>     pop rax
  1156 00001A3B 7426                <1>     jz .aptbExitOk 
  1157 00001A3D AA                  <1>     stosb   ;Now go past the pathsep we just placed
  1158 00001A3E EB23                <1>     jmp short .aptbExitOk
  1159                              <1> .aptbHandleNull:
  1160 00001A40 E85B000000          <1>     call .aptbAtHeadOfPath
  1161 00001A45 7411                <1>     je .aptbHandleNullNoOverwritePrim
  1162 00001A47 50                  <1>     push rax
  1163 00001A48 8A47FF              <1>     mov al, byte [rdi - 1]  ;Is previous char a pathsep?
  1164 00001A4B E816590000          <1>     call swapPathSeparator
  1165 00001A50 58                  <1>     pop rax
  1166 00001A51 750E                <1>     jnz .aptbHandleNullNoOverwrite
  1167 00001A53 8847FF              <1>     mov byte [rdi - 1], al  ;Overwrite it!
  1168 00001A56 EB0B                <1>     jmp short .aptbExitOk
  1169                              <1> .aptbHandleNullNoOverwritePrim:
  1170 00001A58 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1171 00001A5C 7403                <1>     je short .aptbHandleNullNoOverwrite
  1172                              <1>     ;This handles trailing slashes that are not right at the head of the path
  1173 00001A5E 48FFCF              <1>     dec rdi
  1174                              <1> .aptbHandleNullNoOverwrite:
  1175 00001A61 8807                <1>     mov byte [rdi], al  ;Write in a null
  1176                              <1> .aptbExitOk:
  1177 00001A63 F8                  <1>     clc
  1178                              <1>     return
    13                              <2> %%_ret:
    14 00001A64 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1179                              <1> .aptbDots:
  1180                              <1> ;For one dot, we pull the terminating null to rdi
  1181                              <1> ;For two dots, we search backwards for the previous "\"
  1182 00001A65 803D(DA060000)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1183 00001A6C 7409                <1>     je .aptbMoreDots
  1184 00001A6E C605(D9060000)20    <1>     mov byte [fcbName], " "
  1185 00001A75 EB84                <1>     jmp short .aptbAddNull
  1186                              <1> .aptbMoreDots:
  1187                              <1> ;Here we have two dots
  1188 00001A77 E824000000          <1>     call .aptbAtHeadOfPath  ;Are we at the start of the path?
  1189 00001A7C 742B                <1>     je .aptbInterveneExitJoin ;If so, it must be join or fail
  1190                              <1> ;Else, we are able to decrement.
  1191 00001A7E 4881EF02000000      <1>     sub rdi, 2  ;Go past the pathsep infront of us.
  1192                              <1> .aptbDotsLp:
  1193 00001A85 E816000000          <1>     call .aptbAtHeadOfPath  ;Are we safe to proceed?
  1194 00001A8A 7490                <1>     je .aptbHandleTerminator
  1195 00001A8C 48FFCF              <1>     dec rdi ;Decrement the pointer by one
  1196 00001A8F 8A07                <1>     mov al, byte [rdi]  ;Get the char
  1197 00001A91 E8D0580000          <1>     call swapPathSeparator  ;Is this a valid pathsep?
  1198 00001A96 75ED                <1>     jnz .aptbDotsLp ;If not, keep searching
  1199 00001A98 48FFC7              <1>     inc rdi ;Now go just past the new pathsep
  1200 00001A9B E97CFFFFFF          <1>     jmp .aptbHandleTerminator
  1201                              <1> .aptbAtHeadOfPath:
  1202                              <1> ;Returns ZF=ZE if at head of path.
  1203 00001AA0 57                  <1>     push rdi
  1204 00001AA1 48FFCF              <1>     dec rdi
  1205 00001AA4 4839FB              <1>     cmp rbx, rdi    ;Are we right at the start of the path?
  1206 00001AA7 5F                  <1>     pop rdi
  1207                              <1>     return
    13                              <2> %%_ret:
    14 00001AA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1208                              <1> .aptbInterveneExitJoin:
  1209                              <1> ;Here, if we are on a join CDS, go to the root of the original drive.
  1210 00001AA9 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1211 00001AB0 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsJoinDrive | cdsValidDrive
  1212 00001AB6 7540                <1>     jne .aptbErrorExit    ;If it is not, we error return (filenotfound)
  1213                              <1>     ;Now we change the drive letter and return
  1214 00001AB8 8A4500              <1>     mov al, byte [rbp]  ;Get the first char of the path 
  1215 00001ABB 8847FD              <1>     mov byte [rdi - 3], al  ;Replace the char in destination buffer
  1216 00001ABE 2C40                <1>     sub al, "@" ;Convert to a 1 based drive number
  1217 00001AC0 E8A4570000          <1>     call getCDSNotJoin
  1218                              <1>     retc ;If this errors, something is really wrong. Propagate error.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001AC5 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001AC7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1219 00001AC8 56                  <1>     push rsi
  1220 00001AC9 57                  <1>     push rdi
  1221 00001ACA 53                  <1>     push rbx
  1222 00001ACB 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1223 00001AD2 E840540000          <1>     call getDiskDPB 
  1224 00001AD7 5B                  <1>     pop rbx
  1225 00001AD8 5F                  <1>     pop rdi
  1226 00001AD9 5E                  <1>     pop rsi
  1227 00001ADA E93DFFFFFF          <1>     jmp .aptbHandleTerminator
  1228                              <1> .aptbInterveneEnterJoin:
  1229                              <1> ;Handles join paths.
  1230 00001ADF F605(9C000000)FF    <1>     test byte [numJoinDrv], -1  ;Test if we have any join drives
  1231                              <1>     retz    ;Return if not 
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001AE6 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001AE8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1232 00001AE9 56                  <1>     push rsi    ;rsi already points to the next pathspec
  1233 00001AEA 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
  1234 00001AF1 E81B000000          <1>     call handleJoin ;Enters crit section, changes the CDS
  1235 00001AF6 5E                  <1>     pop rsi
  1236                              <1>     return
    13                              <2> %%_ret:
    14 00001AF7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1237                              <1> .aptbErrorExit:
  1238 00001AF8 B002                <1>     mov al, errFnf
  1239 00001AFA C605(0D040000)03    <1>     mov byte [errorAction], eActUsr
  1240 00001B01 C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
  1241 00001B08 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
  1242 00001B0F F9                  <1>     stc
  1243                              <1>     return
    13                              <2> %%_ret:
    14 00001B10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1244                              <1> 
  1245                              <1> handleJoin:
  1246                              <1> ;Intervenes if the subdirectory we are entering is joined.
  1247                              <1> ;This path cannot be on a net redir drive, local redir is ok.
  1248                              <1> ;Input:
  1249                              <1> ; rsi = First char of potential JOIN'ed pathspec.
  1250                              <1> ; rbx = Ptr to the pathsep behind which we cannot traverse.
  1251                              <1> ; rax = 0
  1252                              <1> ;Output:
  1253                              <1> ;If no match, no effect.
  1254                              <1> ;If a matched path is found, working CDS, DPB and drv are set for the
  1255                              <1> ; join drive. rsi is advanced to the next path componant.
  1256                              <1> ;If CF=CY => Disk detection error
  1257 00001B11 51                  <1>     push rcx
  1258 00001B12 55                  <1>     push rbp
  1259 00001B13 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1260 00001B1A 0FB74D43            <1>     movzx ecx, word [rbp + cds.wFlags]
  1261 00001B1E F7C100800000        <1>     test ecx, cdsRedirDrive     ;Cannot join over networks.
  1262 00001B24 740C                <1>     jz .okToGo
  1263 00001B26 F7C180000000        <1>     test ecx, cdsRdirLocDrive   ;If not a local redir, exit (cannot be net).
  1264 00001B2C 0F848C000000        <1>     jz .exitNoCrit
  1265                              <1> .okToGo:
  1266 00001B32 E8945B0000          <1>     call dosCrit1Enter
  1267 00001B37 488B2D(65000000)    <1>     mov rbp, qword [cdsHeadPtr]
  1268 00001B3E 31C9                <1>     xor ecx, ecx    ;Use as a CDS counter
  1269                              <1> .checkCDS:
  1270 00001B40 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsValidDrive | cdsJoinDrive
  1271 00001B46 7560                <1>     jne .gotoNextCDS
  1272                              <1> .scanCDSName:
  1273                              <1> ;Get the length of the CDS path componant to check
  1274 00001B48 51                  <1>     push rcx
  1275 00001B49 57                  <1>     push rdi
  1276 00001B4A 56                  <1>     push rsi        ;Have rsi point to the user path buffer
  1277 00001B4B 4889EF              <1>     mov rdi, rbp    ;Have rdi point to the CDS path
  1278 00001B4E E86F580000          <1>     call strlen     ;Get length of the path componant in ecx
  1279 00001B53 FFC9                <1>     dec ecx ;Dont wanna compare the terminator
  1280 00001B55 F3A6                <1>     repe cmpsb      ;Ensure strings are equal
  1281 00001B57 754C                <1>     jnz .notString
  1282                              <1>     ;Now ensure rsi is pointing at a pathsep/terminator char too.
  1283 00001B59 AC                  <1>     lodsb   ;Get this char and advance rsi to next path componant.
  1284 00001B5A E807580000          <1>     call swapPathSeparator
  1285 00001B5F 7407                <1>     jz .goodString
  1286 00001B61 84C0                <1>     test al, al
  1287 00001B63 7540                <1>     jnz .notString
  1288 00001B65 48FFCE              <1>     dec rsi ;If this is a null char, point rsi back to it
  1289                              <1> .goodString:
  1290                              <1>     ;Here we know we have the right string.
  1291 00001B68 59                  <1>     pop rcx ;Trash original rsi
  1292 00001B69 5F                  <1>     pop rdi ;Get original rdi value (i.e. our internal built path).
  1293 00001B6A 59                  <1>     pop rcx 
  1294                              <1>     ;Now store the path in the original CDS before intervening
  1295                              <1>     ; in the path
  1296 00001B6B 48892D(12070000)    <1>     mov qword [workingCDS], rbp  ;Save the pointer here
  1297 00001B72 56                  <1>     push rsi    ;Save ptr to the possible null char!
  1298 00001B73 57                  <1>     push rdi
  1299 00001B74 4889EF              <1>     mov rdi, rbp    ;Needs to be called with rdi = CDS ptr
  1300 00001B77 53                  <1>     push rbx    ;Preserve the head of the path
  1301 00001B78 E89A530000          <1>     call getDiskDPB ;Rebuild DPB if needed. Sets working DPB and drive
  1302 00001B7D 5B                  <1>     pop rbx
  1303 00001B7E 5F                  <1>     pop rdi
  1304 00001B7F 5E                  <1>     pop rsi
  1305 00001B80 7237                <1>     jc .exit ;If return with CF=CY, this failed. Error exit
  1306 00001B82 8A05(09070000)      <1>     mov al, byte [workingDrv]   ;Get 0 based number
  1307 00001B88 0441                <1>     add al, "A" ;Turn into the letter to store in CDS path
  1308 00001B8A 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1309 00001B8E 7403                <1>     je .notNet
  1310 00001B90 F9                  <1>     stc     ;Net drives should be explicitly mounted on a drive first!
  1311 00001B91 EB26                <1>     jmp short .exit
  1312                              <1> .notNet:
  1313                              <1> ; Join entry intervention occurs here.
  1314 00001B93 8843FE              <1>     mov byte [rbx - 2], al
  1315 00001B96 488D7B01            <1>     lea rdi, qword [rbx + 1]    ;Go to first byte past pathsep
  1316                              <1> .pullLp:
  1317 00001B9A AC                  <1>     lodsb
  1318 00001B9B AA                  <1>     stosb
  1319 00001B9C 84C0                <1>     test al, al
  1320 00001B9E 75FA                <1>     jnz .pullLp
  1321 00001BA0 48FFCF              <1>     dec rdi
  1322 00001BA3 EB14                <1>     jmp short .exit
  1323                              <1> .notString:
  1324 00001BA5 5E                  <1>     pop rsi
  1325 00001BA6 5F                  <1>     pop rdi
  1326 00001BA7 59                  <1>     pop rcx
  1327                              <1> .gotoNextCDS:
  1328 00001BA8 4881C55F000000      <1>     add rbp, cds_size
  1329 00001BAF FFC1                <1>     inc ecx 
  1330 00001BB1 3A0D(78000000)      <1>     cmp cl, byte [lastdrvNum]
  1331 00001BB7 7587                <1>     jnz .checkCDS
  1332                              <1> .exit:
  1333 00001BB9 E8175B0000          <1>     call dosCrit1Exit
  1334                              <1> .exitNoCrit:
  1335 00001BBE 5D                  <1>     pop rbp
  1336 00001BBF 59                  <1>     pop rcx
  1337                              <1>     return
    13                              <2> %%_ret:
    14 00001BC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1338                              <1> 
  1339                              <1> checkDevPath:
  1340                              <1> ;Only works in truename and in the root dir of a disk. If the search pattern
  1341                              <1> ; is a char device, replace the root pathsep with a UNIX pathsep.
  1342                              <1> ;Else if we are searching for the DEV folder in the root of a disk
  1343                              <1> ; and the next componant we are searching for is a char device, we 
  1344                              <1> ; only copy over the char device to the destination buffer with a UNIX
  1345                              <1> ; pathsep. Else, we do nothing. Clobbers rbx!
  1346                              <1> ;Input: rsi = Pointer to the next path spec
  1347                              <1> ;       rdi = Buffer where to add it
  1348                              <1> ;Output: If \DEV\devicename then copy /devicename to buffer.
  1349                              <1> ;        If devicename in the root dir, then replace pathsep
  1350 00001BC1 F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;If set, return!
  1351                              <1>     retnz             
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001BC8 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001BCA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1352                              <1> ;First check we are searching in the root dir!
  1353 00001BCB 66817FFE3A5C        <1>     cmp word [rdi - 2], ":\" 
  1354                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001BD1 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001BD3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1355                              <1> ;Now check to see if fcbname is DEV
  1356 00001BD4 50                  <1>     push rax
  1357 00001BD5 48B844455620202020- <1>     mov rax, "DEV     "
  1357 00001BDE 20                  <1>
  1358 00001BDF 483905(D9060000)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1359 00001BE6 58                  <1>     pop rax
  1360 00001BE7 7566                <1>     jne .checkDevice   ;Maybe this is a device if not DEV
  1361 00001BE9 813D(E1060000)2020- <1>     cmp dword [fcbName + 8], "   \"
  1361 00001BF1 205C                <1>
  1362 00001BF3 755A                <1>     jne .checkDevice    ;Was not \DEV\, check if it was \CON or something
  1363                              <1>     ;So here we are in the DEV dir. Check if \DEV or just DEV
  1364 00001BF5 F605(01070000)FF    <1>     test byte [spliceFlag], -1
  1365                              <1>     retz    ;Exit if relative!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001BFC 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001BFE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1366                              <1>     ;Else, don't add DEV to the name, replace "\" with a "/", move rsi past it
  1367 00001BFF 56                  <1>     push rsi    ;Save if not followed by dev!
  1368 00001C00 57                  <1>     push rdi    ;If followed by dev, not a problem, we end the pathbuild!
  1369 00001C01 488D3D(D9060000)    <1>     lea rdi, fcbName
  1370 00001C08 E888F7FFFF          <1>     call asciiToFCB    ;Advances rsi
  1371                              <1>     ;Returns in al the terminating char of the source string
  1372 00001C0D 5F                  <1>     pop rdi
  1373 00001C0E 5E                  <1>     pop rsi
  1374                              <1>     ;If al is a pathsep, fail 
  1375 00001C0F E852570000          <1>     call swapPathSeparator  ;Device names cannot be terminated with a "\" or "/"
  1376 00001C14 7409                <1>     jz .repDev   ;Thus this is not a device, normal search!
  1377                              <1>     ;mov byte [fcbName + 11], 0 ;Store terminator in fcbName field
  1378 00001C16 53                  <1>     push rbx
  1379 00001C17 E845000000          <1>     call checkIfCharDevice
  1380 00001C1C 5B                  <1>     pop rbx ;Don't need bh yet
  1381 00001C1D 7322                <1>     jnc .pathSepExit    ;If this is a char dev, jump down
  1382                              <1> .repDev:
  1383                              <1> ;Componant after DEV was not a char dev, replace DEV back in the count!
  1384 00001C1F C705(D9060000)4445- <1>     mov dword [fcbName], "DEV "
  1384 00001C27 5620                <1>
  1385 00001C29 C705(DD060000)2020- <1>     mov dword [fcbName + 4], "    "
  1385 00001C31 2020                <1>
  1386 00001C33 C705(E1060000)2020- <1>     mov dword [fcbName + 8], "   \" 
  1386 00001C3B 205C                <1>
  1387 00001C3D B05C                <1>     mov al, "\" ;\DEV\ was a dir, report it was so!
  1388 00001C3F EB0C                <1>     jmp short .exit
  1389                              <1> .pathSepExit:
  1390                              <1> ;Here only if the device was determined to be a char device.
  1391 00001C41 30C0                <1>     xor al, al
  1392 00001C43 8805(E4060000)      <1>     mov byte [fcbName + 11], al ;Store null pathsep here!
  1393 00001C49 C647FF2F            <1>     mov byte [rdi - 1], "/" ;Store reverse pathsep here!
  1394                              <1> .exit:
  1395 00001C4D F8                  <1>     clc
  1396                              <1>     return
    13                              <2> %%_ret:
    14 00001C4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1397                              <1> .checkDevice:
  1398 00001C4F E80D000000          <1>     call checkIfCharDevice  ;Check if what we already have is a chardev?
  1399 00001C54 72F7                <1>     jc .exit                ;If not a device, silently return
  1400 00001C56 803D(E4060000)00    <1>     cmp byte [fcbName + 11], 0  ;If null, its a char dev in the root!
  1401 00001C5D 74E2                <1>     je .pathSepExit
  1402 00001C5F EBEC                <1>     jmp short .exit         ;Else its gonna fail! Char dev as path comp... eek!
  1403                              <1> 
  1404                              <1> checkIfCharDevice:  ;Int 2Fh AX=1223h
  1405                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1406                              <1> ; device driver chain. 
  1407                              <1> ;Output: CF=CY if not found
  1408                              <1> ;        CF=NC if found
  1409                              <1> ;           BH = Low byte of the device attribute word
  1410 00001C61 50                  <1>     push rax
  1411 00001C62 57                  <1>     push rdi
  1412 00001C63 488B05(D9060000)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1413 00001C6A 488D3D(7A000000)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1414                              <1> .checkName:
  1415 00001C71 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1416 00001C75 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1417 00001C77 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1418 00001C7A 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1419 00001C7C 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1420 00001C7F 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1421 00001C82 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1422 00001C86 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1423                              <1> .walkList:
  1424 00001C88 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1425 00001C8B 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1426 00001C92 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1427 00001C94 F9                  <1>     stc
  1428                              <1> .exit:
  1429 00001C95 5F                  <1>     pop rdi
  1430 00001C96 58                  <1>     pop rax
  1431                              <1>     return
    13                              <2> %%_ret:
    14 00001C97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1432                              <1> 
  1433                              <1> buildCharDir:
  1434                              <1> ;Build a dummy directory entry for the char device in FCBName
  1435                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1436 00001C98 50                  <1>     push rax
  1437 00001C99 57                  <1>     push rdi
  1438 00001C9A C605(E4060000)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1439 00001CA1 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1440                              <1>     ;Zero the directory copy (32 bytes)
  1441 00001CA8 50                  <1>     push rax
  1442 00001CA9 51                  <1>     push rcx
  1443 00001CAA 57                  <1>     push rdi
  1444 00001CAB 31C0                <1>     xor eax, eax    ;Zero rax
  1445 00001CAD B904000000          <1>     mov ecx, 4
  1446 00001CB2 F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1447 00001CB5 5F                  <1>     pop rdi
  1448 00001CB6 59                  <1>     pop rcx
  1449 00001CB7 58                  <1>     pop rax
  1450 00001CB8 C705(85070000)FFFF- <1>     mov dword [dirEntry], -1    ;Indicate invalid offset into dir
  1450 00001CC0 FFFF                <1>
  1451 00001CC2 488B05(D9060000)    <1>     mov rax, qword [fcbName]
  1452 00001CC9 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1453 00001CCC B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1454 00001CD1 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1455 00001CD4 C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1456                              <1>     ;Get date and time and set the write time in the directory entry
  1457 00001CD8 E8CD120000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1458 00001CDD E8B3130000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1459 00001CE2 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1460 00001CE5 31C0                <1>     xor eax, eax
  1461 00001CE7 5F                  <1>     pop rdi
  1462 00001CE8 58                  <1>     pop rax
  1463                              <1>     return
    13                              <2> %%_ret:
    14 00001CE9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1464                              <1> 
  1465                              <1> checkFailingComp:
  1466                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1467                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1468                              <1> ;Returns: ZF=ZE => Last path componant
  1469                              <1> ;         ZF=NZ => Not last path componant
  1470 00001CEA 50                  <1>     push rax
  1471 00001CEB 8A05(E4060000)      <1>     mov al, byte [fcbName + 11]
  1472 00001CF1 84C0                <1>     test al, al
  1473 00001CF3 58                  <1>     pop rax
  1474                              <1>     return
    13                              <2> %%_ret:
    14 00001CF4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    33                                  %include "./src/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 00001CF5 4889D7              <1>     mov rdi, rdx
     8 00001CF8 E8C5560000          <1>     call strlen
     9 00001CFD 81F940000000        <1>     cmp ecx, 64
    10 00001D03 760E                <1>     jbe .okLength
    11                              <1> .badFile:
    12 00001D05 B002                <1>     mov al, errFnf
    13 00001D07 E90A5A0000          <1>     jmp extErrExit
    14                              <1> .badPath:
    15 00001D0C B003                <1>     mov al, errPnf
    16 00001D0E E9035A0000          <1>     jmp extErrExit
    17                              <1> .okLength:
    18 00001D13 4889D6              <1>     mov rsi, rdx
    19 00001D16 E80B570000          <1>     call checkPathspecOK
    20 00001D1B 0F8226020000        <1>     jc .bad  ;Don't allow any malformed chars, exit Acc den
    21                              <1> .pathOk:
    22 00001D21 E8BB570000          <1>     call scanPathWC
    23 00001D26 72E4                <1>     jc .badPath ;Dont allow wildcards
    24                              <1>     ;Path is ok, now proceed
    25 00001D28 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive
    26 00001D2F 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    27 00001D36 E881F7FFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    28                              <1>     ;If the path exists, exit error
    29 00001D3B 0F83D5590000        <1>     jnc extErrExit
    30                              <1>     ;Handle resolved null paths here!!!
    31 00001D41 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
    32 00001D47 30C0                <1>     xor al, al
    33 00001D49 3D003A5C00          <1>     cmp eax, 005C3A00h
    34 00001D4E 74B5                <1>     je .badFile
    35                              <1>     ;-----------------------------
    36                              <1>     ;TEST THAT THE DRIVE IS VALID
    37                              <1>     ;This is clearly unnecessary
    38                              <1>     ;    Keep it for now...
    39                              <1>     ;-----------------------------
    40 00001D50 57                  <1>     push rdi
    41 00001D51 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    42 00001D58 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive ;Cannot make on invalid drive
    43 00001D5E 5F                  <1>     pop rdi
    44 00001D5F 0F84B1590000        <1>     jz extErrExit  ;Exit access denied
    45                              <1>     ;-------------------------------------------
    46                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    47 00001D65 E880FFFFFF          <1>     call checkFailingComp
    48 00001D6A 0F85A6590000        <1>     jnz extErrExit
    49                              <1>     ;So all is well, the new subdirectories name is in fcbName
    50                              <1>     ;The parent dir's directory entry is in the curDirCopy
    51 00001D70 E83C540000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    52                              <1>     ;returns in rdi the working cds ptr
    53 00001D75 7312                <1>     jnc .notNet
    54 00001D77 B803110000          <1>     mov eax, 1103h
    55 00001D7C CD2F                <1>     int 2fh
    56 00001D7E 0F8292590000        <1>     jc extErrExit
    57 00001D84 E97F590000          <1>     jmp extGoodExit
    58                              <1> .notNet:
    59 00001D89 E83D590000          <1>     call dosCrit1Enter
    60                              <1>     ;Current dpb ptr is already set
    61                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    62                              <1>     ;First we make a dummy dir in curDirCopy
    63 00001D8E 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    64 00001D95 488D35(D9060000)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    65 00001D9C 488D3D(5A060000)    <1>     lea rdi, curDirCopy
    66 00001DA3 48A5                <1>     movsq   ;Copy the name over
    67 00001DA5 A5                  <1>     movsd
    68 00001DA6 E8FF110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    69 00001DAB E8E5120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    70 00001DB0 8905(68060000)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    71 00001DB6 8905(70060000)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    72 00001DBC 31C0                <1>     xor eax, eax
    73 00001DBE 8905(76060000)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    74 00001DC4 C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    75 00001DCB 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
    76                              <1> .searchForDirSpace:
    77 00001DD1 8905(7F070000)      <1>     mov dword [dirClustA], eax
    78 00001DD7 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    79 00001DD9 668905(83070000)    <1>     mov word [dirSect], ax
    80 00001DE0 8905(85070000)      <1>     mov dword [dirEntry], eax
    81 00001DE6 E8A0050000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    82 00001DEB 7328                <1>     jnc .dirEntryFnd
    83 00001DED 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    83 00001DF5 0000                <1>
    84 00001DF7 0F844A010000        <1>     je .bad ;Set CF and exit
    85 00001DFD E878060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    86 00001E02 0F823F010000        <1>     jc .bad
    87 00001E08 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    88 00001E0D 0F8434010000        <1>     je .bad
    89                              <1>     ;Else eax = Newly allocated cluster
    90 00001E13 EBBC                <1>     jmp short .searchForDirSpace
    91                              <1> .dirEntryFnd:
    92                              <1> ;rdi points to current directory copy
    93                              <1> ;rsi now points to offset in the buffer to write the entry to
    94                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
    95 00001E15 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
    96 00001E1C 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
    97                              <1>      
    98 00001E20 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
    99 00001E27 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   100 00001E2E 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   101 00001E31 668935(4E070000)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   102                              <1> ;Must now request a cluster and sanitise it
   103 00001E38 E8BBECFFFF          <1>     call startNewChain  ;Get cluster number in eax
   104 00001E3D 0F8209010000        <1>     jc .badExit
   105 00001E43 E86E060000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
   106 00001E48 0F82FE000000        <1>     jc .badExit
   107                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   108 00001E4E 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   109 00001E55 C1E810              <1>     shr eax, 10h    ;Get high word low
   110 00001E58 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   111 00001E5F 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   112 00001E66 E88BEBFFFF          <1>     call getBufForDir
   113 00001E6B 0F82DB000000        <1>     jc .badExit
   114 00001E71 0FB705(4E070000)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   115 00001E78 488D35(5A060000)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   116 00001E7F 488D7C0320          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   117 00001E84 B904000000          <1>     mov ecx, 4
   118 00001E89 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   119 00001E8C E800EAFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   120                              <1>     ;Now need to read in data sector and make two entries . and ..
   121 00001E91 57                  <1>     push rdi
   122 00001E92 51                  <1>     push rcx
   123 00001E93 B90B000000          <1>     mov ecx, 11
   124 00001E98 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   125 00001E9F B020                <1>     mov al, " "
   126 00001EA1 F3AA                <1>     rep stosb
   127 00001EA3 59                  <1>     pop rcx
   128 00001EA4 5F                  <1>     pop rdi
   129 00001EA5 48B82E000000000000- <1>     mov rax, "."
   129 00001EAE 00                  <1>
   130 00001EAF 8805(5A060000)      <1>     mov byte [curDirCopy], al
   131 00001EB5 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   132 00001EBC 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   133 00001EC3 C605(65060000)30    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory | dirArchive 
   134 00001ECA C1E210              <1>     shl edx, 10h
   135 00001ECD 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   136 00001ECF E8A7EBFFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   137 00001ED4 E81DEBFFFF          <1>     call getBufForDir
   138 00001ED9 7271                <1>     jc .badExit
   139                              <1>     ;rbx has buffer pointer now
   140 00001EDB 488D35(5A060000)    <1>     lea rsi, curDirCopy
   141 00001EE2 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   142 00001EE6 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   143 00001EEB F348A5              <1>     rep movsq
   144                              <1>     ;Now create .. entry
   145 00001EEE C605(5B060000)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   146 00001EF5 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   147 00001EFB E810EBFFFF          <1>     call getFATtype
   148 00001F00 81F902000000        <1>     cmp ecx, 2
   149 00001F06 7207                <1>     jb .notFAT32
   150 00001F08 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   151 00001F0B 7502                <1>     jne .notFAT32
   152 00001F0D 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   153                              <1> .notFAT32:
   154 00001F0F 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   155 00001F16 C1E810              <1>     shr eax, 10h
   156 00001F19 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   157 00001F20 488D35(5A060000)    <1>     lea rsi, curDirCopy
   158 00001F27 B904000000          <1>     mov ecx, 4
   159 00001F2C F348A5              <1>     rep movsq
   160 00001F2F E85DE9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   161 00001F34 E8E3E7FFFF          <1>     call flushAllBuffersForDPB    ;Write the buffers to disk
   162 00001F39 7211                <1>     jc .badExit
   163                              <1> .okExit:
   164                              <1>     ;AND WE ARE DONE!
   165 00001F3B E895570000          <1>     call dosCrit1Exit
   166 00001F40 31C0                <1>     xor eax, eax
   167 00001F42 E9C1570000          <1>     jmp extGoodExit
   168                              <1> .bad:
   169 00001F47 B805000000          <1>     mov eax, errAccDen
   170                              <1> .badExit:
   171 00001F4C E884570000          <1>     call dosCrit1Exit
   172 00001F51 E9C0570000          <1>     jmp extErrExit
   173                              <1> 
   174                              <1> removeDIR:         ;ah = 3Ah
   175 00001F56 4889D7              <1>     mov rdi, rdx
   176 00001F59 E864540000          <1>     call strlen
   177 00001F5E 81F940000000        <1>     cmp ecx, 64
   178 00001F64 7613                <1>     jbe .okLength
   179                              <1> .badPath:
   180 00001F66 B005                <1>     mov al, errAccDen
   181 00001F68 E9A9570000          <1>     jmp extErrExit
   182                              <1> .pnf:
   183 00001F6D E863570000          <1>     call dosCrit1Exit   ;Only jumped to in a critical section
   184 00001F72 B003                <1>     mov al, errPnf
   185 00001F74 E99D570000          <1>     jmp extErrExit
   186                              <1> .okLength:
   187 00001F79 4889D6              <1>     mov rsi, rdx
   188 00001F7C E8A5540000          <1>     call checkPathspecOK
   189 00001F81 72E3                <1>     jc .badPath  ;Don't allow any malformed chars
   190                              <1> .pathOk:
   191 00001F83 E859550000          <1>     call scanPathWC
   192 00001F88 72DC                <1>     jc .badPath ;Dont allow wildcards
   193                              <1>     ;Path is ok, now proceed
   194 00001F8A E83C570000          <1>     call dosCrit1Enter  ;Don't let another DOS task interrupt us!
   195 00001F8F C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   196                              <1>     breakpoint
    81 00001F96 6687DB              <2> xchg bx, bx
   197 00001F99 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   198 00001FA0 E813F5FFFF          <1>     call getDirPath     ;Get a Directory path in buffer1, hitting the disk
   199 00001FA5 72C6                <1>     jc .pnf             ;Path Doesn't exist
   200 00001FA7 E805520000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   201 00001FAC 7312                <1>     jnc .notNet
   202 00001FAE B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   203 00001FB3 CD2F                <1>     int 2fh
   204 00001FB5 0F825B570000        <1>     jc extErrExit
   205 00001FBB E948570000          <1>     jmp extGoodExit
   206                              <1> .notNet:
   207 00001FC0 488D3D(1E050000)    <1>     lea rdi, buffer1
   208 00001FC7 E8F6530000          <1>     call strlen ;Get the length of the full qualified name in ecx
   209 00001FCC 66890D(4E070000)    <1>     mov word [pathLen], cx
   210 00001FD3 6681F90400          <1>     cmp cx, 4   ;Only way to get this after truename is if root dir (i.e. join)
   211 00001FD8 7614                <1>     jbe .cantDelCD
   212                              <1>     ;Now we scan all the CDS's to ensure this path is not the current dir anywhere
   213 00001FDA 31C0                <1>     xor eax, eax
   214                              <1> .scanLoop:
   215 00001FDC E853530000          <1>     call getCDSforDrive ;Gets a CDS string ptr in rsi
   216 00001FE1 721A                <1>     jc .notCurrent
   217 00001FE3 E812540000          <1>     call compareFileNames
   218 00001FE8 7404                <1>     jz .cantDelCD
   219 00001FEA FFC0                <1>     inc eax
   220 00001FEC EBEE                <1>     jmp short .scanLoop
   221                              <1> .cantDelCD:
   222 00001FEE B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   223 00001FF3 E8DD560000          <1>     call dosCrit1Exit
   224 00001FF8 E919570000          <1>     jmp extErrExit
   225                              <1> .notCurrent:
   226 00001FFD 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   227                              <1>     ;Now let use check that our directory is not the CDS currentdir
   228 00002004 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   229 0000200B 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   230                              <1>     ;If the given path length is one more than the backslash offset
   231                              <1>     ; due to the terminating null, then the user is trying to delete the 
   232                              <1>     ; root dir. Fail this.
   233 0000200E 0FB74F5D            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   234 00002012 FFC1                <1>     inc ecx
   235 00002014 663B0D(4E070000)    <1>     cmp cx, word [pathLen]
   236 0000201B 0F8423010000        <1>     je .accessDenied
   237 00002021 E879030000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   238                              <1>     ;for the entry in the sector we are hoping to delete
   239 00002026 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   240 0000202D C1E010              <1>     shl eax, 10h
   241 00002030 0FB71D(74060000)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   242 00002037 09D8                <1>     or eax, ebx
   243 00002039 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   244 0000203F E837EAFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   245 00002044 E8ADE9FFFF          <1>     call getBufForDir
   246 00002049 0F82FA000000        <1>     jc .exitBad
   247                              <1>     ;rbx points to buffer
   248 0000204F 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   249 00002053 48B82E202020202020- <1>     mov rax, ".       "
   249 0000205C 20                  <1>
   250 0000205D 483906              <1>     cmp qword [rsi], rax
   251 00002060 0F85DE000000        <1>     jne .accessDenied
   252 00002066 B42E                <1>     mov ah, "." ;Screw the partial stall
   253 00002068 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   254 0000206C 0F85D2000000        <1>     jne .accessDenied
   255 00002072 4881C620000000      <1>     add rsi, fatDirEntry_size
   256 00002079 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   257 00002080 B904000000          <1>     mov ecx, 4
   258 00002085 F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   259                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   260                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   261 00002088 488D3D(D9060000)    <1>     lea rdi, fcbName
   262 0000208F B03F                <1>     mov al, "?"
   263 00002091 B90B000000          <1>     mov ecx, 11
   264 00002096 F3AA                <1>     rep stosb   ;Store the pattern to search for
   265 00002098 30C0                <1>     xor al, al  ;Store a terminating zero
   266 0000209A AA                  <1>     stosb
   267 0000209B 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   268 000020A1 50                  <1>     push rax    ;Save on stack temporarily
   269 000020A2 8905(7F070000)      <1>     mov dword [dirClustA], eax
   270 000020A8 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   271 000020AA 668905(83070000)    <1>     mov word [dirSect], ax
   272 000020B1 C705(85070000)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   272 000020B9 0000                <1>
   273 000020BB C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   274 000020C2 58                  <1>     pop rax
   275 000020C3 E8B3E9FFFF          <1>     call getStartSectorOfCluster
   276 000020C8 E829E9FFFF          <1>     call getBufForDir   
   277 000020CD 727A                <1>     jc .exitBad
   278 000020CF E8E2F1FFFF          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   279 000020D4 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   280 000020DB 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   281 000020E1 C605(69040000)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   282 000020E8 E8F0F0FFFF          <1>     call searchDir.rmdirEP
   283 000020ED 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   284                              <1>     ;Else, this is a empty dir, we can remove it
   285                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   286 000020EF 488B05(46070000)    <1>     mov rax, qword [tempSect]
   287 000020F6 E8FBE8FFFF          <1>     call getBufForDir
   288 000020FB 724C                <1>     jc .exitBad
   289 000020FD E8B4F1FFFF          <1>     call prepSectorSearch
   290 00002102 0FB705(4E070000)    <1>     movzx eax, word [entry]
   291 00002109 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   292 0000210D 4801C6              <1>     add rsi, rax    
   293 00002110 8A05(08070000)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   294 00002116 8806                <1>     mov byte [rsi], al  ;Store delchar there
   295 00002118 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   296 0000211C 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   297 00002120 E86CE7FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   298 00002125 C1E210              <1>     shl edx, 10h
   299 00002128 09D0                <1>     or eax, edx
   300                              <1>     ;Now remove the FAT chain
   301 0000212A E8A4EBFFFF          <1>     call unlinkFAT
   302 0000212F 7218                <1>     jc .exitBad
   303 00002131 E8E6E5FFFF          <1>     call flushAllBuffersForDPB
   304 00002136 7211                <1>     jc .exitBad
   305 00002138 E898550000          <1>     call dosCrit1Exit
   306 0000213D 31C0                <1>     xor eax, eax
   307 0000213F E9C4550000          <1>     jmp extGoodExit
   308                              <1> .accessDenied:
   309 00002144 B805000000          <1>     mov eax, errAccDen
   310                              <1> .exitBad:
   311 00002149 F9                  <1>     stc
   312 0000214A E886550000          <1>     call dosCrit1Exit
   313 0000214F E9C2550000          <1>     jmp extErrExit
   314                              <1> 
   315                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   316                              <1> ;Input: rdx = Pointer to ASCIIZ string
   317 00002154 4889D7              <1>     mov rdi, rdx
   318 00002157 E866520000          <1>     call strlen
   319 0000215C 81F940000000        <1>     cmp ecx, 64
   320 00002162 7618                <1>     jbe .okLength
   321                              <1> .badPath:
   322 00002164 B003                <1>     mov al, errPnf
   323 00002166 E9AB550000          <1>     jmp extErrExit
   324                              <1> .badPathCrit:
   325 0000216B E865550000          <1>     call dosCrit1Exit
   326 00002170 EBF2                <1>     jmp short .badPath
   327                              <1> .badCrit:
   328 00002172 E85E550000          <1>     call dosCrit1Exit
   329 00002177 E99A550000          <1>     jmp extErrExit
   330                              <1> .okLength:
   331 0000217C 4889D6              <1>     mov rsi, rdx
   332 0000217F E8A2520000          <1>     call checkPathspecOK
   333 00002184 7302                <1>     jnc .notBad     ;Don't allow any malformed chars or wildcards
   334 00002186 74DC                <1>     jz .badPath     ;If wildcards found, exit error!
   335                              <1>     ;Malformed chars get caught later! Allow for "X:\",0" style paths
   336                              <1> .notBad:
   337 00002188 E873530000          <1>     call checkPathNet   ;Never allow network paths
   338 0000218D 74D5                <1>     jz .badPath ;Or Net paths
   339                              <1>     ;Path is ok, now proceed
   340 0000218F E837550000          <1>     call dosCrit1Enter  ;ENTER DOS CRITICAL SECTION HERE!!
   341 00002194 C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   342 0000219B 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   343 000021A2 E811F3FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   344 000021A7 72C9                <1>     jc .badCrit   ;Exit with error code in eax
   345                              <1>     ;Now we check to make sure the path provided is not past the maximum
   346                              <1>     ; length of a CDS path. This accounts for the possibility that a SUBST
   347                              <1>     ; moved the path past the end.
   348 000021A9 488D3D(1E050000)    <1>     lea rdi, buffer1
   349 000021B0 E80D520000          <1>     call strlen ;Get the length of this path
   350 000021B5 81F943000000        <1>     cmp ecx, 67
   351 000021BB 77AE                <1>     ja .badPathCrit
   352                              <1>     ;The path must've been ok, so now copy the path into the CDS
   353                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   354                              <1>     ;Copy the workingCDS to the tmpCDS
   355 000021BD 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   356 000021C4 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   357 000021CA 0F85E6000000        <1>     jnz .net    ;This is done by the redirector for redirector drives
   358 000021D0 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Are we a join drive?
   359 000021D6 0F848D000000        <1>     jz .notJoin     ;Skip the join intervention if not.
   360                              <1>     ;!!!! JOIN INTERVENTION BELOW !!!!
   361 000021DC 4889FD              <1>     mov rbp, rdi    ;Save the ptr to the pathname here
   362 000021DF E8E4000000          <1>     call .getFatCluster
   363 000021E4 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set cluster
   364                              <1>     ;ecx has the length of the path in the buffer
   365 000021E7 89C8                <1>     mov eax, ecx    ;Save the number of chars in the buffer
   366 000021E9 2D02000000          <1>     sub eax, 2      ;Remove the X: prefix
   367 000021EE 4889F7              <1>     mov rdi, rsi    ;Get the ptr to the cds to get it's length
   368 000021F1 E8CC510000          <1>     call strlen
   369 000021F6 01C8                <1>     add eax, ecx    ;Add the lengths of the two strings together
   370 000021F8 3D43000000          <1>     cmp eax, 67     ;If the sum is greater than the space for the string + null, error
   371 000021FD 0F8768FFFFFF        <1>     ja .badPathCrit
   372 00002203 51                  <1>     push rcx
   373 00002204 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Copy the join-disabled CDS over to tmpCDS
   374 0000220B B95F000000          <1>     mov ecx, cds_size
   375 00002210 F3A4                <1>     rep movsb   
   376 00002212 59                  <1>     pop rcx
   377 00002213 FFC9                <1>     dec ecx ;Remove the trailing null from the count
   378 00002215 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   379 0000221C 57                  <1>     push rdi
   380 0000221D 4801CF              <1>     add rdi, rcx    ;Move the destination ptr to the trailing null
   381 00002220 488D7502            <1>     lea rsi, qword [rbp + 2]    ;Skip the first two chars from path to copy
   382 00002224 F3A4                <1>     rep movsb   ;Copy the new part of the path back in
   383 00002226 5F                  <1>     pop rdi
   384 00002227 4889FE              <1>     mov rsi, rdi
   385 0000222A 31C0                <1>     xor eax, eax
   386 0000222C 31C9                <1>     xor ecx, ecx
   387 0000222E FFC9                <1>     dec ecx
   388 00002230 F2AE                <1>     repne scasb   ;Search for the terminating null
   389 00002232 4881EF02000000      <1>     sub rdi, 2
   390 00002239 8A07                <1>     mov al, byte [rdi]  ;Get the second to last char
   391 0000223B E826510000          <1>     call swapPathSeparator
   392 00002240 7503                <1>     jnz .notSlash
   393 00002242 C60700              <1>     mov byte [rdi], 0   ;If it is a pathsep, put a null here
   394                              <1> .notSlash:
   395 00002245 0FB606              <1>     movzx eax, byte [rsi]    ;Get the drive letter here
   396 00002248 2C41                <1>     sub al, "A"     ;Turn into a 1 based drive number
   397 0000224A E8E5500000          <1>     call getCDSforDrive ;Set working CDS and move ptr in rsi 
   398 0000224F 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Put tmpCDS in rdi
   399 00002256 4887F7              <1>     xchg rsi, rdi   ;And swap the pointers
   400 00002259 C7474DFFFFFFFF      <1>     mov dword [rdi + cds.dStartCluster], -1 ;Finally, set the start cluster to welp.
   401                              <1>     ;mov word [rdi + cds.wBackslashOffset], 2    ;Make sure this is 2 if it changed...
   402                              <1>     ;Backslash offset must always be 2 on a join host
   403 00002260 B943000000          <1>     mov ecx, 67
   404 00002265 F3A4                <1>     rep movsb   ;Copy in the CDS path only, to keep all other fields ok.
   405 00002267 EB41                <1>     jmp short .exitGood
   406                              <1> .notJoin:
   407                              <1> ;rsi -> workingCDS
   408                              <1> ;Lets first copy the working CDS into tmpCDS
   409 00002269 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   410 00002270 B95F000000          <1>     mov ecx, cds_size
   411 00002275 F3A4                <1>     rep movsb         ;Copy the workingCDS into tmpCDS
   412 00002277 E84C000000          <1>     call .getFatCluster ;Now get the start cluster from the directory copy
   413 0000227C 8905(C7060000)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   414 00002282 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   415 00002289 488D35(1E050000)    <1>     lea rsi, buffer1    ;Now copy the FQ pathname into the CDS
   416 00002290 E83C510000          <1>     call strcpy
   417 00002295 488D35(7A060000)    <1>     lea rsi, tmpCDS     ;And copy back the tmpCDS into the CDS itself
   418 0000229C 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   419 000022A3 B95F000000          <1>     mov ecx, cds_size
   420 000022A8 F3A4                <1>     rep movsb
   421                              <1> .exitGood:
   422 000022AA E826540000          <1>     call dosCrit1Exit
   423 000022AF 31C0                <1>     xor eax, eax
   424 000022B1 E952540000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   425                              <1> .net:
   426                              <1> ;SDA Vars are setup for this request
   427 000022B6 B805110000          <1>     mov eax, 1105h
   428 000022BB CD2F                <1>     int 2fh
   429 000022BD 0F8253540000        <1>     jc extErrExit
   430 000022C3 E940540000          <1>     jmp extGoodExit
   431                              <1> .getFatCluster:
   432 000022C8 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   433 000022CF 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   434 000022D6 C1E010              <1>     shl eax, 10h
   435 000022D9 09D0                <1>     or eax, edx ;Add low bits to eax
   436                              <1>     return
    13                              <2> %%_ret:
    14 000022DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   437                              <1> 
   438                              <1> getCurrentDIR:     ;ah = 47h
   439                              <1> ;Returns the path for a drive with no X:\.
   440                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   441                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   442 000022DC 88D0                <1>     mov al, dl  ;Move drive number into al
   443 000022DE E8E8530000          <1>     call dosCrit1Enter
   444 000022E3 E8814F0000          <1>     call getCDSNotJoin ;Set drive variables if it is valid and NOT join
   445 000022E8 730F                <1>     jnc .okDrive    ;Cant get current dir of a join drive
   446                              <1> .badDrvExit:
   447 000022EA E8E6530000          <1>     call dosCrit1Exit
   448 000022EF B80F000000          <1>     mov eax, errBadDrv
   449 000022F4 E91D540000          <1>     jmp extErrExit
   450                              <1> .okDrive:
   451                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   452 000022F9 56                  <1>     push rsi    ;Save the callers buffer on the stack.
   453 000022FA 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the current Working CDS ptr in rsi
   454 00002301 56                  <1>     push rsi    ;Save desired workingCDS on pointer on the stack!
   455 00002302 C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   456 00002309 488D3D(1E050000)    <1>     lea rdi, buffer1
   457 00002310 E8A3F1FFFF          <1>     call getDirPath   ;Canonicalise the filename and check if directory exists!
   458 00002315 5E                  <1>     pop rsi ;Get back the original workingCDS
   459 00002316 5F                  <1>     pop rdi ;Get the callers buffer into rdi
   460 00002317 72D1                <1>     jc .badDrvExit
   461                              <1>     ;Now buffer1 has the truenamed form of the directory entry. 
   462                              <1>     ;We don't copy that, instead copying the path directly from the cds entry.
   463                              <1>     ;since we confirmed it exists! This avoids join issues :D 
   464 00002319 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   465 0000231D 4801C6              <1>     add rsi, rax    ;Skip any prefixed chars (handle SUBST)
   466 00002320 803E5C              <1>     cmp byte [rsi],"\" ;Skip if pathsep (these pathseps are always proper)
   467 00002323 7503                <1>     jne .dontSkipChar
   468 00002325 48FFC6              <1>     inc rsi ;Skip leading pathseps on the path
   469                              <1> .dontSkipChar:
   470 00002328 AC                  <1>     lodsb   ;Get char
   471 00002329 84C0                <1>     test al, al
   472 0000232B 7406                <1>     jz .notSpecialChar
   473 0000232D 3C05                <1>     cmp al, 05h     ;Special char case?
   474 0000232F 7502                <1>     jne .notSpecialChar
   475 00002331 B0E5                <1>     mov al, 0E5h    ;Replace with the correct "replacement" char
   476                              <1> .notSpecialChar:
   477 00002333 AA                  <1>     stosb
   478 00002334 84C0                <1>     test al, al ;Did we store a terminator char?
   479 00002336 75F0                <1>     jnz .dontSkipChar   ;If not, keep copying
   480 00002338 E898530000          <1>     call dosCrit1Exit
   481 0000233D B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   482 00002342 E9C1530000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   483                              <1> 
   484                              <1> trueNameMultiplex:  ;Int 2Fh, AX=1221h
   485 00002347 50                  <1>     push rax
   486 00002348 B800600000          <1>     mov eax, 6000h
   487 0000234D CD21                <1>     int 21h
   488 0000234F 58                  <1>     pop rax
   489                              <1>     return
    13                              <2> %%_ret:
    14 00002350 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   490                              <1>     
   491                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   492                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   493 00002351 E8D0500000          <1>     call checkPathspecOK    ;This preserves rsi
   494 00002356 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   495 00002358 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   496                              <1> .badPath:
   497 0000235A B805000000          <1>     mov eax, errAccDen
   498 0000235F E9B2530000          <1>     jmp extErrExit
   499                              <1> .pathspecOk:
   500 00002364 57                  <1>     push rdi    ;Save the destination
   501 00002365 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   502 0000236C E8CBF1FFFF          <1>     call canonicaliseFileName
   503 00002371 5F                  <1>     pop rdi
   504 00002372 0F829E530000        <1>     jc extErrExit
   505 00002378 488D35(1E050000)    <1>     lea rsi, buffer1
   506 0000237F E84D500000          <1>     call strcpy
   507 00002384 31C0                <1>     xor eax, eax
   508 00002386 E97D530000          <1>     jmp extGoodExit
   509                              <1> 
   510                              <1> ;-----------------------------------
   511                              <1> ;    General Directory Routines    :
   512                              <1> ;-----------------------------------
   513                              <1> 
   514                              <1> 
   515                              <1> findFreeDiskDirEntry:
   516                              <1> ;Find a space in the directory we are searching for a directory entry
   517                              <1> ;Accept first entry starting with a 0E5h or 00h
   518                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   519                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   520                              <1> ; be called for CDS's that are NOT net CDS's).
   521                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   522                              <1> ;       Directory vars must be set up for the directory we are searching in
   523                              <1> ;Output: CF=CY => Error, eax has error code
   524                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   525 0000238B 8A05(08070000)      <1>     mov al, byte [delChar]
   526 00002391 8805(D9060000)      <1>     mov byte [fcbName], al
   527 00002397 E8EEEDFFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   528                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000239C 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000239E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   529                              <1> ;Free entry found, dir variables are set for the free entry. 
   530                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   531                              <1> getDiskDirectoryEntry:
   532                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   533                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   534                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   535                              <1> ;        qword [tempSect] = Disk sector number of directory
   536                              <1> ;        word [entry] = 32 byte offset into sector
   537                              <1> ;        CF=CY => Error, exit 
   538 0000239F 53                  <1>     push rbx
   539 000023A0 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  
   540                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   541                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   542 000023A6 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]
   543 000023AD 85C0                <1>     test eax, eax
   544 000023AF 7407                <1>     jz .skipCluster
   545 000023B1 E8C5E6FFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   546 000023B6 EB1B                <1>     jmp short .skipOldFat
   547                              <1> .skipCluster:
   548 000023B8 55                  <1>     push rbp
   549 000023B9 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   550 000023C0 0FB705(83070000)    <1>     movzx eax, word [dirSect]
   551 000023C7 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   552                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   553 000023CA 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   554 000023CE 5D                  <1>     pop rbp
   555 000023CF 7202                <1>     jb .skipOldFat
   556 000023D1 F9                  <1>     stc
   557                              <1>     return
    13                              <2> %%_ret:
    14 000023D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   558                              <1> .skipOldFat:
   559 000023D3 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   560 000023D6 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save this sector number
   561 000023DD E814E6FFFF          <1>     call getBufForDir   ;Get buffer for dir in rbx
   562 000023E2 5B                  <1>     pop rbx
   563                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000023E3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000023E5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   564 000023E6 53                  <1>     push rbx
   565 000023E7 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
   566 000023EE E8C3EEFFFF          <1>     call prepSectorSearch
   567                              <1>     ;Above function gets data buffer ptr in rsi
   568 000023F3 31D2                <1>     xor edx, edx
   569 000023F5 8B05(85070000)      <1>     mov eax, dword [dirEntry]   ;Get offset into dir file cluster
   570 000023FB C1E005              <1>     shl eax, 5  ;Multiply by 32 to get byte offset
   571                              <1>     ;Make the amount we add to rsi modulo size of bytes per sector
   572 000023FE 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   573 00002402 F7F3                <1>     div ebx ;Divide eax by ebx. Get remainer in dx
   574 00002404 4801D6              <1>     add rsi, rdx    ;rsi now points to the entry
   575 00002407 668915(4E070000)    <1>     mov word [entry], dx
   576 0000240E 5B                  <1>     pop rbx
   577                              <1>     return
    13                              <2> %%_ret:
    14 0000240F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   578                              <1> 
   579                              <1> updateSFTDateTimeFields:    
   580                              <1> ;Updates the SFT time/date entries for disk files
   581                              <1> ;Called with:
   582                              <1> ;   [workingDPB] = DPB pointer for the disk device
   583                              <1> ;   [currentSFT] = Current SFT pointer
   584                              <1> ;   bx = attribute byte from the SFT
   585 00002410 66F7C3C000          <1>     test bx, blokFileNoFlush | devCharDev
   586                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002415 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002417 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   587 00002418 66F7C30040          <1>     test bx, blokNoDTonClose
   588                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000241D 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000241F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   589 00002420 50                  <1>     push rax
   590 00002421 53                  <1>     push rbx
   591 00002422 E8830B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   592                              <1>     ;Build date and time words
   593 00002427 E8690C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   594                              <1>     ;Update SFT fields
   595 0000242C 66894713            <1>     mov word [rdi + sft.wTime], ax
   596 00002430 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   597 00002433 66894715            <1>     mov word [rdi + sft.wDate], ax
   598 00002437 31C0                <1>     xor eax, eax
   599 00002439 FF15(2F010000)      <1>     call qword [updateDirShare]
   600 0000243F 5B                  <1>     pop rbx
   601 00002440 58                  <1>     pop rax
   602                              <1>     return
    13                              <2> %%_ret:
    14 00002441 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   603                              <1> 
   604                              <1> getAndUpdateDirSectorForFile:
   605                              <1> ;Input: rdi -> SFT
   606                              <1> ;Output: CF=NC: rsi -> Updated dir entry in buffer
   607                              <1> ;               rdi -> SFT
   608 00002442 FF7727              <1>     push qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   609 00002445 E8242D0000          <1>     call setDPBfromSFT
   610 0000244A 58                  <1>     pop rax
   611                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000244B 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000244D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   612 0000244E C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   613 00002455 C605(68040000)18    <1>     mov byte [Int24bitfld], critFailOK | critRetryOK
   614 0000245C E895E5FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx for sector in rax
   615                              <1>     retc    ;If an error is to be returned from, we skip the rest of this
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002461 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002463 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   616 00002464 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Reobtain the SFT ptr
   617 0000246B 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   618 0000246F 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   619 00002473 C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   620 00002476 4801DE              <1>     add rsi, rbx    ;Move rsi to point to the directory entry
   621                              <1>     return
    13                              <2> %%_ret:
    14 00002479 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   622                              <1> 
   623                              <1> growDirectory:
   624                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   625                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   626                              <1> ;                 eax = New Cluster number
   627                              <1> ;               TWO NON CF ERROR CASES.
   628                              <1> ;               If eax = -1 => disk full!
   629                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   630                              <1> ;        CF=CY => Something went wrong. Rip. 
   631 0000247A 53                  <1>     push rbx
   632 0000247B 51                  <1>     push rcx
   633 0000247C 57                  <1>     push rdi
   634 0000247D 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   635 00002483 85C0                <1>     test eax, eax
   636 00002485 742B                <1>     jz .exit
   637 00002487 E81CE6FFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   638 0000248C 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   639 0000248E B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   640 00002493 E88FE6FFFF          <1>     call allocateClusters   ;ebx has last cluster value
   641 00002498 7218                <1>     jc .exit
   642 0000249A 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   643 0000249F 7411                <1>     je .exit
   644 000024A1 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   645 000024A3 E865E8FFFF          <1>     call readFAT
   646 000024A8 7208                <1>     jc .exit
   647 000024AA E807000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   648 000024AF 7201                <1>     jc .exit
   649 000024B1 F8                  <1>     clc
   650                              <1> .exit:
   651 000024B2 5F                  <1>     pop rdi
   652 000024B3 59                  <1>     pop rcx
   653 000024B4 5B                  <1>     pop rbx
   654                              <1>     return   
    13                              <2> %%_ret:
    14 000024B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   655                              <1> sanitiseCluster:
   656                              <1> ;Sanitises the cluster in eax to all zeros
   657                              <1> ;Does not move file pointers
   658                              <1> ;Currently, is only called to sanitise subdirectory clusters
   659                              <1> ;Input: eax = Cluster number
   660                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   661                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   662                              <1> ;        If CF=CY => Error, exit
   663 000024B6 50                  <1>     push rax
   664 000024B7 53                  <1>     push rbx
   665 000024B8 51                  <1>     push rcx
   666 000024B9 52                  <1>     push rdx
   667 000024BA 56                  <1>     push rsi
   668 000024BB 55                  <1>     push rbp
   669 000024BC 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   670 000024C3 E8B3E5FFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   671 000024C8 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   672 000024CC FFC2                <1>     inc edx ;Make it a count of sectors
   673                              <1> .getSectorInCluster:
   674 000024CE E823E5FFFF          <1>     call getBufForDir  ;Get a generic data buffer in rbx
   675 000024D3 721E                <1>     jc .exitBad
   676 000024D5 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   677 000024D9 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   678 000024DD 31C0                <1>     xor eax, eax
   679 000024DF F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   680 000024E1 E8ABE3FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   681                              <1> 
   682 000024E6 FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   683 000024E8 740A                <1>     jz .exit    ;Jump if we done
   684 000024EA 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   685 000024EE 48FFC0              <1>     inc rax ;Goto next sector in cluster
   686 000024F1 EBDB                <1>     jmp short .getSectorInCluster
   687                              <1> .exitBad:
   688 000024F3 F9                  <1>     stc
   689                              <1> .exit:
   690 000024F4 5D                  <1>     pop rbp
   691 000024F5 5E                  <1>     pop rsi
   692 000024F6 5A                  <1>     pop rdx
   693 000024F7 59                  <1>     pop rcx
   694 000024F8 5B                  <1>     pop rbx
   695 000024F9 58                  <1>     pop rax
   696                              <1>     return
    13                              <2> %%_ret:
    14 000024FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    34                                  %include "./src/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqPkt and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 000024FB 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 000024FC 488D1D(1C050000)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 00002503 48891D(A5040000)    <1>     mov qword [secdReqPkt + ioReqPkt.bufptr], rbx
    59 0000250A 5B                  <1>     pop rbx
    60 0000250B C705(AD040000)0100- <1>     mov dword [secdReqPkt + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 00002513 0000                <1>
    61 00002515 668905(1C050000)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 0000251C 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    63 00002522 0F85A1000000        <1>     jnz .notChar
    64 00002528 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 0000252E 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 00002534 E87B510000          <1>     call dosPushRegs    ;Save context here
    68 00002539 488D1DDADAFFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 00002540 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 00002543 C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 00002546 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 00002549 890D(97040000)      <1>     mov dword [secdReqPkt], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 0000254F 31C9                <1>     xor ecx, ecx
    75 00002551 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 00002554 7506                <1>     jne .skipBsySet
    77 00002556 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 0000255C 66870D(9A040000)    <1>     xchg cx, word [secdReqPkt + drvReqHdr.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 00002563 488D1D(97040000)    <1>     lea rbx, secdReqPkt
    82 0000256A E832480000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 0000256F 668B3D(9A040000)    <1>     mov di, word [secdReqPkt + drvReqHdr.status]    ;Get status
    84 00002576 F7C700800000        <1>     test edi, drvErrStatus
    85 0000257C 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 0000257E 803D(99040000)05    <1>     cmp byte [secdReqPkt + drvReqHdr.cmdcde], drvNONDESTREAD
    88 00002585 750C                <1>     jne .notNDRead
    89 00002587 8A05(A4040000)      <1>     mov al, byte [secdReqPkt + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 0000258D 8805(1C050000)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 00002593 8A25(9B040000)      <1>     mov ah, byte [secdReqPkt + drvReqHdr.status + 1]  ;Get hibyte of status word
    93 00002599 F6D4                <1>     not ah
    94 0000259B 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 0000259E E8FA500000          <1>     call dosPopRegs ;Get back the context
    96 000025A3 668B05(1C050000)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 000025AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 000025AB 88CC                <1>     mov ah, cl
   101 000025AD E8D8410000          <1>     call charDevErr
   102 000025B2 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 000025B4 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 000025B6 E8E2500000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 000025BB E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 000025C0 8025(9B040000)FD    <1>     and byte [secdReqPkt + drvReqHdr.status + 1], ~(drvBsyStatus >> 8)
   110 000025C7 EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 000025C9 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 000025CB 7409                <1>     jz .makeDiskNetReadReq
   115 000025CD FECC                <1>     dec ah
   116 000025CF 7422                <1>     jz .makeDiskNetNonDestReq
   117 000025D1 FECC                <1>     dec ah
   118 000025D3 742A                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 000025D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 000025D6 E834000000          <1>     call .prepDiskNetIO
   123 000025DB E838220000          <1>     call readBytes
   124 000025E0 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 000025E2 E858000000          <1>     call .cleanDiskNetIO
   126 000025E7 8A05(1C050000)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000025ED 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000025EF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   128 000025F0 B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 000025F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 000025F3 FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 000025F6 E8DBFFFFFF          <1>     call .makeDiskNetReadReq
   134 000025FB 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 000025FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 000025FF E80B000000          <1>     call .prepDiskNetIO
   138 00002604 E86B250000          <1>     call writeBytes
   139 00002609 E831000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 0000260E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 0000260F 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   145 00002615 E89A500000          <1>     call dosPushRegs
   146 0000261A FF35(17040000)      <1>     push qword [currentDTA]
   147 00002620 488D0D(1C050000)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 00002627 48890D(17040000)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 0000262E 488935(32070000)    <1>     mov qword [currentSFT], rsi ;Set this sft ptr as the current SFT
   150 00002635 31C9                <1>     xor ecx, ecx
   151 00002637 FFC1                <1>     inc ecx ;IO 1 byte only
   152                              <1> .cleanDNIOReturn:
   153 00002639 FF25(EB040000)      <1>     jmp qword [altRet]
   154                              <1> .cleanDiskNetIO:
   155 0000263F 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   156 00002645 8F05(17040000)      <1>     pop qword [currentDTA]
   157 0000264B E84D500000          <1>     call dosPopRegs
   158 00002650 EBE7                <1>     jmp short .cleanDNIOReturn
   159                              <1> 
   160                              <1> openSFT:
   161                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   162                              <1> ;Input: rdi = SFT pointer
   163 00002652 E85D500000          <1>     call dosPushRegs
   164 00002657 B00D                <1>     mov al, drvOPEN
   165 00002659 EB07                <1>     jmp short openCloseCommon
   166                              <1> closeSFT:
   167                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   168 0000265B E854500000          <1>     call dosPushRegs
   169 00002660 B00E                <1>     mov al, drvCLOSE
   170                              <1> openCloseCommon:
   171                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   172 00002662 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   173 00002668 7569                <1>     jnz .exit    ;Exit if so
   174 0000266A F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   175 0000266E 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   176 00002672 7512                <1>     jnz .charDev
   177                              <1>     ;Here a disk drive, rdi is a DPB ptr
   178 00002674 803D(D4030000)00    <1>     cmp byte [shareFlag], 00    ;Is SHARE loaded?
   179 0000267B 7456                <1>     je .exit   ;Exit if it is zero (Share not loaded)
   180 0000267D 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   181 00002680 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   182 00002682 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   183                              <1> .charDev:
   184 00002686 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   185 0000268C 7445                <1>     jz .exit    ;No, exit!
   186 0000268E 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   187 00002691 488D1D(C1040000)    <1>     lea rbx, primReqPkt ;Get the primary request header space in rbx
   188 00002698 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   189                              <1> .retryEP:
   190 0000269B 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   191 0000269E C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   192 000026A1 50                  <1>     push rax    ;Save the dword
   193 000026A2 E8FE460000          <1>     call goDriver
   194 000026A7 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + drvReqHdr.status] ;Get the status
   195 000026AE F7C700800000        <1>     test edi, drvErrStatus
   196 000026B4 741C                <1>     jz .exitPop
   197                              <1>     ;Error here, check if char or block drive
   198 000026B6 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   199 000026BC 7404                <1>     jz .blockError
   200                              <1>     ;Char error here
   201 000026BE B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   202 000026C0 EB04                <1>     jmp short .errorCmn
   203                              <1> .blockError:
   204 000026C2 88C8                <1>     mov al, cl  ;Move drive number into al
   205 000026C4 B406                <1>     mov ah, critData    ;Data on block dev error
   206                              <1> .errorCmn:
   207                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   208 000026C6 E8BF400000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   209 000026CB B001                <1>     mov al, critRetry   ;al returns user response
   210 000026CD 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   211 000026CF 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   212 000026D0 EBC9                <1>     jmp short .retryEP  ;Reset
   213                              <1> .exitPop:
   214 000026D2 58                  <1>     pop rax    
   215                              <1> .exit:
   216 000026D3 E8C54F0000          <1>     call dosPopRegs
   217                              <1>     return
    13                              <2> %%_ret:
    14 000026D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    35                                  %include "./src/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 000026D9 E882010000          <1>     call charIn_B
    17 000026DE 50                  <1>     push rax
    18 000026DF E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 000026E4 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 000026E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 000026E6 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 2Fh, AX=1205h
    26 000026E8 3C20                <1>     cmp al, asciiCaret
    27 000026EA 0F8287000000        <1>     jb .control
    28 000026F0 3C7F                <1>     cmp al, DEL ;DEL char?
    29 000026F2 7406                <1>     je .skipCurs
    30 000026F4 FE05(CC020000)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 000026FA FE05(D2030000)      <1>     inc byte [vConErr]   ;Increment 2 char error checker
    33 00002700 8025(D2030000)03    <1>     and byte [vConErr], 3
    34 00002707 56                  <1>     push rsi
    35 00002708 7507                <1>     jnz .skipErrorCheck
    36 0000270A 50                  <1>     push rax
    37 0000270B E89F020000          <1>     call vConCtrlCheck
    38 00002710 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 00002711 E826020000          <1>     call outputOnStdout
    41 00002716 5E                  <1>     pop rsi
    42 00002717 F605(CF030000)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000271E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002720 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    44 00002721 53                  <1>     push rbx
    45 00002722 56                  <1>     push rsi
    46 00002723 BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 00002728 E84D030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 0000272D 0F82D0000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 00002733 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 00002737 F7C300800000        <1>     test ebx, devRedirDev
    52 0000273D 0F85C0000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 00002743 F7C380000000        <1>     test ebx, devCharDev
    54 00002749 0F84B4000000        <1>     jz auxOutCmn.exit
    55 0000274F BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 00002754 E821030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 00002759 0F82A4000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 0000275F 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    59 00002765 0F8493000000        <1>     jz auxOutCmn.diskFileEP
    60 0000276B C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 00002772 E98C000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 00002777 3C0D                <1>     cmp al, CR
    64 00002779 742A                <1>     je .newline
    65 0000277B 3C08                <1>     cmp al, BSP
    66 0000277D 7432                <1>     je .back
    67 0000277F 3C09                <1>     cmp al, TAB
    68 00002781 0F8573FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70 00002787 8A05(CC020000)      <1>     mov al, byte [vConCursPos]
    71 0000278D 0CF8                <1>     or al, ~7
    72 0000278F F6D8                <1>     neg al
    73                              <1> .outputATab:   ;Called with al = Number of chars into the tabstop we are!
    74 00002791 51                  <1>     push rcx
    75 00002792 0FB6C8              <1>     movzx ecx, al
    76 00002795 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    77                              <1> .tabloop:
    78 00002798 B020                <1>     mov al, SPC
    79 0000279A E849FFFFFF          <1>     call charOut_B.in   ;Output the char
    80 0000279F FEC9                <1>     dec cl
    81 000027A1 75F5                <1>     jnz .tabloop
    82                              <1> .stopTab:
    83 000027A3 59                  <1>     pop rcx
    84                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 000027A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> .newline:
    86 000027A5 C605(CC020000)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    87 000027AC E949FFFFFF          <1>     jmp .skipCurs   ;And echo 
    88                              <1> .back:
    89 000027B1 FE0D(CC020000)      <1>     dec byte [vConCursPos]
    90 000027B7 E93EFFFFFF          <1>     jmp .skipCurs   ;And echo
    91                              <1> 
    92                              <1> auxIn_B:        ;ah = 03h
    93 000027BC E8EE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    94 000027C1 BB03000000          <1>     mov ebx, 3
    95 000027C6 E8AF020000          <1>     call getCharDevSFT
    96                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000027CB 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000027CD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    97                              <1> .auxloop:
    98 000027CE B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    99 000027D0 E826FDFFFF          <1>     call mainCharIO
   100 000027D5 7408                <1>     jz .signalLoop
   101 000027D7 30E4                <1>     xor ah, ah  ;Read the char in
   102 000027D9 E81DFDFFFF          <1>     call mainCharIO
   103                              <1>     return
    13                              <2> %%_ret:
    14 000027DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> .signalLoop:
   105 000027DF E8A8010000          <1>     call callInt28h
   106 000027E4 EBE8                <1>     jmp short .auxloop
   107                              <1> 
   108                              <1> auxOut_B:       ;ah = 04h
   109 000027E6 53                  <1>     push rbx
   110 000027E7 BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   111 000027EC EB06                <1>     jmp short auxOutCmn
   112                              <1> prnOut_B:       ;ah = 05h
   113 000027EE 53                  <1>     push rbx
   114 000027EF BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   115                              <1> auxOutCmn: ;Auxilliary output device common 
   116 000027F4 88D0                <1>     mov al, dl  ;Get the char into al
   117 000027F6 50                  <1>     push rax
   118 000027F7 E8B3010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   119 000027FC 58                  <1>     pop rax
   120 000027FD 56                  <1>     push rsi
   121                              <1> .diskFileEP:
   122 000027FE E866010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   123                              <1> .netFileEP:
   124                              <1> .exit:
   125 00002803 5E                  <1>     pop rsi
   126 00002804 5B                  <1>     pop rbx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00002805 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> directConIO:    ;ah = 06h
   130 00002806 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   131 00002808 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   132 0000280A 0F852C010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   133                              <1> ;Here is the read char direct function
   134 00002810 31DB                <1>     xor ebx, ebx    
   135 00002812 E863020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   136                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002817 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002819 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   137 0000281A 488B2D(7B040000)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   138 00002821 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   139 00002823 E8D3FCFFFF          <1>     call mainCharIO
   140 00002828 E85F010000          <1>     call callInt28h ;This preserves flags so call here!
   141 0000282D 7507                <1>     jnz .readChar
   142 0000282F 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   143 00002833 30C0                <1>     xor al, al  ;Set caller return code to 0
   144                              <1>     return
    13                              <2> %%_ret:
    14 00002835 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   145                              <1> .readChar:
   146 00002836 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   147                              <1>     ;Fallthrough here to get the char at STDIN
   148                              <1> charIn:         ;ah = 07h
   149                              <1> ;Return char in al from STDIN without waiting
   150 0000283A 31DB                <1>     xor ebx, ebx
   151 0000283C E839020000          <1>     call getCharDevSFT
   152                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002841 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002843 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   153 00002844 B401                <1>     mov ah, 01  ;ND read for char
   154 00002846 E8B0FCFFFF          <1>     call mainCharIO
   155 0000284B 750B                <1>     jnz .getChar
   156 0000284D B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   157 0000284F CD2A                <1>     int 2Ah
   158 00002851 E836010000          <1>     call callInt28h
   159 00002856 EBE2                <1>     jmp short charIn    ;Loop again awaiting the char
   160                              <1> .getChar:
   161                              <1>     ;Get the char in al and exit
   162 00002858 30E4                <1>     xor ah, ah
   163 0000285A E89CFCFFFF          <1>     call mainCharIO
   164                              <1>     return
    13                              <2> %%_ret:
    14 0000285F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> charIn_B:       ;ah = 08h
   166                              <1> ;Return char in al from STDIN
   167 00002860 56                  <1>     push rsi
   168                              <1> .readAgain:
   169 00002861 E849010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   170                              <1>     ;Also sets rsi to point to the device SFT for 
   171 00002866 7543                <1>     jnz .pullChar
   172 00002868 803D(E0190000)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   173 0000286F 7507                <1>     jne .skiplookahead
   174 00002871 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   175 00002873 E883FCFFFF          <1>     call mainCharIO
   176                              <1> .skiplookahead:
   177 00002878 B484                <1>     mov ah, 84h
   178 0000287A CD2A                <1>     int 2ah ;Multitasking keyboard loop
   179 0000287C 66813D(151A0000)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   179 00002884 FF                  <1>
   180 00002885 751B                <1>     jne .skipClockRead
   181 00002887 E8284E0000          <1>     call dosPushRegs
   182 0000288C F8                  <1>     clc ;Clear CF, write primary header to backup
   183 0000288D E884000000          <1>     call swapPrimaryHeader
   184 00002892 E813070000          <1>     call readDateTimeRecord
   185 00002897 F9                  <1>     stc ;Set CF, write backup to primary header
   186 00002898 E879000000          <1>     call swapPrimaryHeader
   187 0000289D E8FB4D0000          <1>     call dosPopRegs
   188                              <1> .skipClockRead:
   189 000028A2 66FF05(151A0000)    <1>     inc word [keybTicks]
   190 000028A9 EBB6                <1>     jmp short .readAgain
   191                              <1> .pullChar:
   192 000028AB 30E4                <1>     xor ah, ah
   193 000028AD E849FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   194 000028B2 5E                  <1>     pop rsi
   195 000028B3 3C00                <1>     cmp al, NUL ;Is this the null char?
   196 000028B5 7507                <1>     jne .exit
   197                              <1>     ;We are mid extended ascii, prevent printer toggling
   198 000028B7 C605(141A0000)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   199                              <1> .exit:
   200                              <1>     return
    13                              <2> %%_ret:
    14 000028BE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> 
   202                              <1> printString_B:      ;ah = 09h
   203 000028BF 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   204                              <1> .ps0:
   205 000028C2 AC                  <1>     lodsb   ;Get char in al and inc rsi
   206 000028C3 3C24                <1>     cmp al, "$" ;End of string char?
   207                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000028C5 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000028C7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   208 000028C8 E81BFEFFFF          <1>     call charOut_B.in
   209 000028CD EBF3                <1>     jmp short .ps0
   210                              <1> 
   211                              <1> checkStdinStatus:  ;ah = 0Bh
   212                              <1> ;Returns the status of the driver controlling vCon
   213 000028CF E8DB000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   214 000028D4 B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   215                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000028D6 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000028D8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   216 000028D9 FEC8                <1>     dec al  ;Set al to -1 if char available
   217                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 000028DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> clearbuffDoFunc:   ;ah = 0Ch
   219                              <1> ;Clears any buffers and issues a console read command (the command in al)
   220                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   221 000028DC 50                  <1>     push rax
   222 000028DD 52                  <1>     push rdx
   223 000028DE 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   224 000028E0 E895010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   225 000028E5 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   226 000028E7 B404                <1>     mov ah, 04h ;Flush input buffers
   227 000028E9 E80DFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   228                              <1> .skipFlush:
   229 000028EE 5A                  <1>     pop rdx
   230 000028EF 58                  <1>     pop rax
   231 000028F0 88C4                <1>     mov ah, al  ;Move function number into ah
   232 000028F2 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   233 000028F4 7507                <1>     jne .others
   234 000028F6 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   235 000028F9 7412                <1>     jz .bad ;Yes, exit
   236 000028FB EB13                <1>     jmp short .callFunction ;Else, call function in ah
   237                              <1> .others:
   238 000028FD 3C01                <1>     cmp al, 01h
   239 000028FF 740F                <1>     je .callFunction
   240 00002901 3C07                <1>     cmp al, 07h
   241 00002903 740B                <1>     je .callFunction
   242 00002905 3C08                <1>     cmp al, 08h
   243 00002907 7407                <1>     je .callFunction
   244 00002909 3C0A                <1>     cmp al, 0Ah
   245 0000290B 7403                <1>     je .callFunction
   246                              <1> .bad:
   247 0000290D 30C0                <1>     xor al, al
   248                              <1>     return
    13                              <2> %%_ret:
    14 0000290F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   249                              <1> .callFunction:
   250 00002910 FA                  <1>     cli ;Prepare to swap stack pointer
   251                              <1>     ;The below address avoids "properly" reentering DOS
   252                              <1>     ;We simply reuse the function dispatch aspect. 
   253                              <1>     ;this means we dont trash the caller's register frame 
   254 00002911 E9B64C0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   255                              <1> ;------------------------
   256                              <1> ;  Primitive functions  :
   257                              <1> ;------------------------
   258                              <1> swapPrimaryHeader:
   259                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   260                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   261 00002916 56                  <1>     push rsi
   262 00002917 57                  <1>     push rdi
   263 00002918 51                  <1>     push rcx
   264 00002919 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   264 00002922 00                  <1>
   265 00002923 488D35(C1040000)    <1>     lea rsi, primReqPkt
   266 0000292A 488D3D(EA190000)    <1>     lea rdi, bkupReqHdr
   267 00002931 7303                <1>     jnc .read
   268 00002933 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   269                              <1> .read:
   270 00002936 F3A4                <1>     rep movsb   ;Swap
   271 00002938 59                  <1>     pop rcx
   272 00002939 5F                  <1>     pop rdi
   273 0000293A 5E                  <1>     pop rsi
   274                              <1>     return
    13                              <2> %%_ret:
    14 0000293B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> outputOnStdout:
   276                              <1> ;Input: al = Char to output
   277                              <1> ;Output: CF=CY, all good
   278 0000293C 53                  <1>     push rbx
   279 0000293D BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   280 00002942 E833010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   281 00002947 7217                <1>     jc .exit
   282 00002949 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   283 0000294F 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   284 00002951 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   285 00002955 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 29?
   286 0000295B 7405                <1>     jz .notCharDevOrFast
   287 0000295D CD29                <1>     int 29h ;Fast output
   288                              <1> .exitOk:
   289 0000295F F8                  <1>     clc
   290                              <1> .exit:
   291 00002960 5B                  <1>     pop rbx
   292                              <1>     return
    13                              <2> %%_ret:
    14 00002961 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   293                              <1> .notCharDevOrFast:
   294 00002962 E80A000000          <1>     call outputOnSFT
   295 00002967 5B                  <1>     pop rbx
   296                              <1>     return
    13                              <2> %%_ret:
    14 00002968 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> outputToHandle:
   299                              <1> ;Char to output must be in al
   300 00002969 E80C010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   301                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000296E 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002970 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   302                              <1> outputOnSFT:
   303                              <1> ;Output char in al to SFT in rsi
   304                              <1> ;Waits until device is not busy to send char.
   305                              <1> ;Calls int 28h if device busy
   306 00002971 50                  <1>     push rax
   307 00002972 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   308 00002974 E882FBFFFF          <1>     call mainCharIO
   309 00002979 58                  <1>     pop rax
   310 0000297A 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   311 0000297C B402                <1>     mov ah, 02h ;Output char in al
   312 0000297E E878FBFFFF          <1>     call mainCharIO
   313 00002983 F8                  <1>     clc
   314                              <1>     return
    13                              <2> %%_ret:
    14 00002984 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> .signalLoop:
   316 00002985 E802000000          <1>     call callInt28h
   317 0000298A EBE5                <1>     jmp short outputOnSFT
   318                              <1> 
   319                              <1> callInt28h:
   320                              <1> ;Preserve full state, including "safetocallint28" flag and flags
   321 0000298C 9C                  <1>     pushfq
   322 0000298D F605(95040000)FF    <1>     test byte [int28Flag], -1
   323 00002994 7417                <1>     jz .exit    ;If zero, not safe
   324 00002996 F605(07040000)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   325 0000299D 750E                <1>     jnz .exit
   326                              <1> ;Preserve stack alignment!!! Push Qword including and after int28Flag 
   327 0000299F FF35(95040000)      <1>     push qword [int28Flag] 
   328 000029A5 CD28                <1>     int 28h
   329 000029A7 8F05(95040000)      <1>     pop qword [int28Flag]    ;Return original value
   330                              <1> .exit:
   331 000029AD 9D                  <1>     popfq
   332                              <1>     return
    13                              <2> %%_ret:
    14 000029AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> 
   334                              <1> 
   335                              <1> vConCtrlCheck:
   336                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   337                              <1> ; the processing. 
   338                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   339                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   340                              <1> ;
   341                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   342                              <1> ;^S will pause screen processing until another key is processed by vCon input
   343                              <1> ;^P will toggle the printer echo feature of the vConsole
   344                              <1> ;
   345                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   346                              <1> ; in ASCII mode when called using 21h/3Fh (Handle Read)
   347                              <1> ;
   348                              <1> ;Output: 
   349                              <1> ;   CF=CY : Error
   350                              <1> ;   CF=NC : ...
   351                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   352                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   353 000029AF E829010000          <1>     call checkBreak ;Check if there is a ^C on CON
   354 000029B4 53                  <1>     push rbx
   355 000029B5 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   356 000029B7 E8BE000000          <1>     call getCharDevSFT
   357 000029BC 5B                  <1>     pop rbx
   358                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000029BD 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000029BF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   359 000029C0 B401                <1>     mov ah, 01  ;Non destructively read CON
   360 000029C2 E834FBFFFF          <1>     call mainCharIO
   361 000029C7 74C3                <1>     jz callInt28h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 28h
   362                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   363 000029C9 3C13                <1>     cmp al, DC3 ;^S ?
   364 000029CB 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   365 000029CD 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   366 000029CF E827FBFFFF          <1>     call mainCharIO
   367 000029D4 E963000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   368                              <1> .checkPrintOrExit:
   369 000029D9 3C10                <1>     cmp al, DLE ;Do we have ^P?
   370 000029DB 7468                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   371 000029DD 3C03                <1>     cmp al, ETX ;Do we have ^C?
   372 000029DF 7464                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   373                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   374                              <1>     return 
    13                              <2> %%_ret:
    14 000029E1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   375                              <1> .printToggle:
   376 000029E2 F615(CF030000)      <1>     not byte [printEcho]    ;Compliment the flag.
   377 000029E8 53                  <1>     push rbx
   378 000029E9 BB04000000          <1>     mov ebx, 4  ;PRN handle
   379 000029EE E887000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   380 000029F3 5B                  <1>     pop rbx
   381                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000029F4 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000029F6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   382 000029F7 57                  <1>     push rdi
   383 000029F8 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   384 000029FB 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   385 00002A01 741D                <1>     jz .notNet
   386 00002A03 50                  <1>     push rax
   387 00002A04 B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   388 00002A09 CD2F                <1>     int 2Fh
   389 00002A0B 58                  <1>     pop rax
   390 00002A0C 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   391                              <1>     ;If something went wrong, turn off echo
   392 00002A0E C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   393 00002A15 50                  <1>     push rax
   394 00002A16 B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   395 00002A1B CD2F                <1>     int 2Fh
   396 00002A1D 58                  <1>     pop rax
   397 00002A1E EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   398                              <1> .notNet:
   399                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   400                              <1> ; 0Dh or 0Eh
   401 00002A20 803D(CF030000)00    <1>     cmp byte [printEcho], 00
   402 00002A27 7507                <1>     jnz .echoOn
   403 00002A29 E82DFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   404 00002A2E EB05                <1>     jmp short .printExit
   405                              <1> .echoOn:
   406 00002A30 E81DFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   407                              <1> .printExit:
   408 00002A35 5F                  <1>     pop rdi
   409                              <1>     return
    13                              <2> %%_ret:
    14 00002A36 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   410                              <1> .sigNextChar:   ;Signal Int 28h before waiting for the next char
   411 00002A37 E850FFFFFF          <1>     call callInt28h
   412                              <1> .waitNextChar:   ;Here get next char
   413 00002A3C B401                <1>     mov ah, 01h ;ND read
   414 00002A3E E8B8FAFFFF          <1>     call mainCharIO
   415 00002A43 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 28h and keep waiting
   416                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   417 00002A45 53                  <1>     push rbx
   418 00002A46 31DB                <1>     xor ebx, ebx
   419 00002A48 E82D000000          <1>     call getCharDevSFT
   420 00002A4D 5B                  <1>     pop rbx
   421                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002A4E 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002A50 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   422 00002A51 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   423 00002A53 E8A3FAFFFF          <1>     call mainCharIO
   424 00002A58 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   425 00002A5A 7514                <1>     jnz .checkBreak2
   426 00002A5C 803D(141A0000)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   427 00002A63 0F8479FFFFFF        <1>     jz .printToggle ;If 0, toggle!
   428 00002A69 C605(141A0000)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   429                              <1> .checkBreak2:
   430 00002A70 3C03                <1>     cmp al, ETX
   431                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002A72 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002A74 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   432 00002A75 E9B43E0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   433                              <1> 
   434                              <1> 
   435                              <1> getCharDevSFT:
   436                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   437                              <1> ;Input: bx = zero extended handle number
   438                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   439                              <1> ;        CF=CY => al = Error code, abort operation
   440 00002A7A F605(94040000)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   441 00002A81 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   442                              <1> .getSFT:
   443 00002A83 57                  <1>     push rdi
   444 00002A84 E867260000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   445 00002A89 4889FE              <1>     mov rsi, rdi
   446 00002A8C 5F                  <1>     pop rdi
   447                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 00002A8D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> .swap:
   449                              <1> ;workingSFT is only set for CON calls
   450 00002A8E 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   451 00002A94 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   452 00002A96 488B35(22070000)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   453 00002A9D F8                  <1>     clc
   454                              <1>     return
    13                              <2> %%_ret:
    14 00002A9E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   455                              <1> 
   456                              <1> ;------------------------
   457                              <1> ;   Utility functions   :
   458                              <1> ;------------------------
   459                              <1> printCaretASCII:
   460                              <1> ;Input: al = Char to print with a caret
   461                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   462                              <1> ;First check if the char should be careted, and then print normally if so
   463 00002A9F 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   464 00002AA1 0F8341FCFFFF        <1>     jae charOut_B.in
   465 00002AA7 3C09                <1>     cmp al, TAB
   466 00002AA9 0F8439FCFFFF        <1>     je charOut_B.in
   467 00002AAF 3C15                <1>     cmp al, NAK
   468 00002AB1 0F8431FCFFFF        <1>     je charOut_B.in
   469 00002AB7 3C14                <1>     cmp al, DC4
   470 00002AB9 0F8429FCFFFF        <1>     je charOut_B.in
   471 00002ABF 50                  <1>     push rax
   472 00002AC0 B05E                <1>     mov al, "^" ;Get caret in place
   473 00002AC2 E821FCFFFF          <1>     call charOut_B.in
   474 00002AC7 58                  <1>     pop rax
   475 00002AC8 0440                <1>     add al, "@" ;Turn into an ASCII Char
   476 00002ACA E919FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   477                              <1> printCRLF:
   478 00002ACF B00D                <1>     mov al, CR
   479 00002AD1 E812FCFFFF          <1>     call charOut_B.in
   480 00002AD6 B00A                <1>     mov al, LF
   481 00002AD8 E90BFCFFFF          <1>     jmp charOut_B.in
   482                              <1> 
   483                              <1> checkBreak:
   484                              <1> ;Reads bytes from CON if there are any bytes to read and 
   485                              <1> ; if it is a ^C or CTRL+BREAK, then exit via Int 23h
   486 00002ADD 803D(08040000)01    <1>     cmp byte [inDOS], 1
   487                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002AE4 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002AE6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   488                              <1> ;Returns in al the keystroke that is available IF one is available
   489                              <1> ; or al=0 if no keystroke available
   490 00002AE7 53                  <1>     push rbx
   491 00002AE8 56                  <1>     push rsi
   492 00002AE9 488B35(53000000)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   493                              <1>     ;Place command code and a zero status word at the same time
   494 00002AF0 C705(ED040000)0500- <1>     mov dword [critReqPkt + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   494 00002AF8 0000                <1>
   495                              <1>     ;Place the packet size in the hdrlen field
   496 00002AFA C605(EB040000)0E    <1>     mov byte [critReqPkt + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   497 00002B01 488D1D(EB040000)    <1>     lea rbx, critReqPkt
   498 00002B08 E898420000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   499                              <1>     ;Check if the busy bit is set (No keystroke available)
   500 00002B0D 66F705(EE040000)00- <1>     test word [critReqPkt + ndInNoWaitPkt.status], drvBsyStatus
   500 00002B15 02                  <1>
   501 00002B16 7405                <1>     jz .charFound
   502                              <1> .exit:
   503 00002B18 30C0                <1>     xor al, al
   504 00002B1A 5E                  <1>     pop rsi
   505 00002B1B 5B                  <1>     pop rbx
   506                              <1>     return
    13                              <2> %%_ret:
    14 00002B1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> .charFound:
   508                              <1> ;Keystroke available, proceed
   509 00002B1D 8A05(F8040000)      <1>     mov al, byte [critReqPkt + ndInNoWaitPkt.retbyt]    ;Get char
   510 00002B23 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   511 00002B25 75F1                <1>     jne .exit   ;If not equal exit
   512                              <1> ;Now we pull the char out of the buffer
   513 00002B27 C705(ED040000)0400- <1>     mov dword [critReqPkt + ioReqPkt.cmdcde], drvREAD ;Read command
   513 00002B2F 0000                <1>
   514 00002B31 C605(EB040000)2A    <1>     mov byte [critReqPkt + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   515                              <1>     ;Place pointers and number of chars
   516 00002B38 C705(01050000)0100- <1>     mov dword [critReqPkt + ioReqPkt.tfrlen], 1 ;One char to be read
   516 00002B40 0000                <1>
   517                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   518 00002B42 488D05(F8040000)    <1>     lea rax, qword [critReqPkt + ioReqPkt.medesc]
   519 00002B49 488905(F9040000)    <1>     mov qword [critReqPkt + ioReqPkt.bufptr], rax
   520 00002B50 E850420000          <1>     call goDriver   ;RSI and RBX as before
   521 00002B55 E9D43D0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   522                              <1> 
   523                              <1> vConSwapDriver:
   524                              <1> ;Sets up the vCon to use the alternative SFT pointer
   525 00002B5A 57                  <1>     push rdi
   526 00002B5B C605(94040000)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   527 00002B62 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   528 00002B69 48893D(22070000)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   529 00002B70 5F                  <1>     pop rdi
   530                              <1>     return
    13                              <2> %%_ret:
    14 00002B71 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> vConRetDriver:
   533                              <1> ;Returns the original driver (sets flag down)
   534 00002B72 C605(94040000)00    <1>     mov byte [vConDrvSwp], 0
   535                              <1>     return
    13                              <2> %%_ret:
    14 00002B79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   536                              <1> 
   537                              <1> ;--------------------------------------------------
   538                              <1> ;      Main Keyboard Buffered Input Function      :
   539                              <1> ;--------------------------------------------------
   540                              <1> buffCharInput_BE:  ;ah = 0Ah
   541                              <1> ;Buffer pointer in rdx
   542                              <1> ; byte [rdx + 0], buffer length
   543                              <1> ; byte [rdx + 1], number of chars in buffer
   544                              <1> ; byte [rdx + 2], buffer start
   545                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   546                              <1> ;Register use
   547                              <1> ; dh = Char offset in internal buffer
   548                              <1> ; dl = Buffer length
   549                              <1> ; bh = Char offset in user buffer
   550                              <1> ; bl = Number of chars already in the buffer
   551                              <1> ; rdi = Internal buffer
   552                              <1> ; rsi = User buffer
   553 00002B7A 4889D6              <1>     mov rsi, rdx
   554 00002B7D 66AD                <1>     lodsw   ;Get buffer metadata in ax
   555 00002B7F 84C0                <1>     test al, al
   556                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002B81 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002B83 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   557 00002B84 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   558 00002B87 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   559 00002B89 7606                <1>     jbe .avoidcheck
   560 00002B8B 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   561 00002B8F 7402                <1>     je .functionKeyOk
   562                              <1> .avoidcheck:
   563 00002B91 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   564                              <1> .functionKeyOk:
   565 00002B93 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   566 00002B96 FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   567                              <1> .breakEP:
   568 00002B98 8A05(CC020000)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   569 00002B9E 8805(CD020000)      <1>     mov byte [vConCurCnt], al
   570 00002BA4 56                  <1>     push rsi    ;Push user buffer address
   571 00002BA5 488D3D(CE020000)    <1>     lea rdi, vConBuffer
   572 00002BAC C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   573 00002BB3 30F6                <1>     xor dh, dh  ;Ensure these are 0 when coming back from break!
   574 00002BB5 30FF                <1>     xor bh, bh  ;They should be... earmark
   575 00002BB7 E8A4FCFFFF          <1>     call charIn_B   ;Get a char in AL from 21/08h
   576 00002BBC 3C0A                <1>     cmp al, LF
   577 00002BBE 7505                <1>     jne .checkControlChars
   578                              <1> .mainLoop:
   579 00002BC0 E89BFCFFFF          <1>     call charIn_B
   580                              <1> .checkControlChars:
   581 00002BC5 3C06                <1>     cmp al, ACK
   582 00002BC7 74F7                <1>     je .mainLoop   ;Get another char
   583 00002BC9 3A056BD4FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   584 00002BCF 0F842E010000        <1>     je .escape
   585 00002BD5 3C7F                <1>     cmp al, DEL
   586 00002BD7 0F848F000000        <1>     je .delete
   587 00002BDD 3C08                <1>     cmp al, BSP
   588 00002BDF 0F8487000000        <1>     je .delete
   589 00002BE5 3C17                <1>     cmp al, ETB
   590                              <1>     ;Add space for patched jump instructions
   591 00002BE7 9090909090          <1>     db 5 dup (90h)  ;NOP
   592 00002BEC 3C15                <1>     cmp al, NAK
   593 00002BEE 9090909090          <1>     db 5 dup (90h)
   594 00002BF3 3C0D                <1>     cmp al, CR
   595 00002BF5 7452                <1>     je .carriageReturn
   596 00002BF7 3C0A                <1>     cmp al, LF
   597 00002BF9 7467                <1>     je .lineFeed
   598 00002BFB 3A053AD4FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   599 00002C01 7429                <1>     je .break
   600                              <1> .checkIfCanInsert:
   601 00002C03 38D6                <1>     cmp dh, dl
   602 00002C05 731C                <1>     jae .bufOflw
   603 00002C07 AA                  <1>     stosb   ;Store the byte and increment rdi!
   604 00002C08 FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   605 00002C0A E890FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   606 00002C0F 803D(03070000)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   607 00002C16 75A8                <1>     jne .mainLoop
   608                              <1>     ;IF not in insert mode, we fall here
   609                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   610                              <1>     ; or insert chars if needed.
   611 00002C18 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   612 00002C1A 73A4                <1>     jae .mainLoop  ;If geq dont follow in user buffer
   613 00002C1C 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   614 00002C1F FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   615 00002C21 EB9D                <1>     jmp short .mainLoop
   616                              <1> .bufOflw:
   617                              <1> ;Buffer overflow
   618 00002C23 B007                <1>     mov al, BEL ;Sound the bell
   619 00002C25 E8BEFAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   620 00002C2A EB94                <1>     jmp short .mainLoop
   621                              <1> .break:
   622                              <1> ;Break, Place a "\", and do a CRLF
   623 00002C2C B05C                <1>     mov al, "\"
   624 00002C2E E8B5FAFFFF          <1>     call charOut_B.in
   625 00002C33 5E                  <1>     pop rsi ;Realign stack
   626                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   627 00002C34 E896FEFFFF          <1>     call printCRLF
   628                              <1>     ;Align to next tabstop
   629 00002C39 8A05(CD020000)      <1>     mov al, byte [vConCurCnt]  ;Get without rounding!!
   630 00002C3F E84DFBFFFF          <1>     call charOut_B.outputATab
   631 00002C44 E94FFFFFFF          <1>     jmp .breakEP
   632                              <1> .carriageReturn:
   633 00002C49 AA                  <1>     stosb
   634 00002C4A E899FAFFFF          <1>     call charOut_B.in
   635 00002C4F 5F                  <1>     pop rdi ;User buffer address was pushed 
   636 00002C50 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   637 00002C53 FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   638                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   639 00002C55 488D35(CE020000)    <1>     lea rsi, vConBuffer
   640 00002C5C 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   641 00002C5F F3A4                <1>     rep movsb  ;If the inc dh cause an overflow, dont copy! 
   642                              <1>     return
    13                              <2> %%_ret:
    14 00002C61 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   643                              <1> .lineFeed:
   644 00002C62 E868FEFFFF          <1>     call printCRLF
   645 00002C67 E954FFFFFF          <1>     jmp .mainLoop
   646                              <1> .delete:
   647 00002C6C E805000000          <1>     call .removeChar
   648 00002C71 E94AFFFFFF          <1>     jmp .mainLoop
   649                              <1> .removeChar:
   650 00002C76 84F6                <1>     test dh, dh ;Is char count 0?
   651 00002C78 741C                <1>     jz .normalChar   ;If so, skip going back!
   652 00002C7A E86A000000          <1>     call .vConErase
   653 00002C7F 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   654 00002C81 3C20                <1>     cmp al, SPC
   655 00002C83 7311                <1>     jae .normalChar
   656 00002C85 3C09                <1>     cmp al, TAB
   657 00002C87 7422                <1>     je .eraTab
   658 00002C89 3C15                <1>     cmp al, NAK
   659 00002C8B 7409                <1>     je .normalChar
   660 00002C8D 3C14                <1>     cmp al, DC4
   661 00002C8F 7405                <1>     je .normalChar
   662 00002C91 E858000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   663                              <1> .normalChar:
   664 00002C96 803D(03070000)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   665                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002C9D 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002C9F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   666 00002CA0 84FF                <1>     test bh, bh ;Beginning of user buffer?
   667                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002CA2 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002CA4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   668 00002CA5 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   669 00002CA8 FECF                <1>     dec bh
   670                              <1>     return
    13                              <2> %%_ret:
    14 00002CAA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> .eraTab:
   672                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   673                              <1> ; up to a tab stop worth of space chars printed
   674 00002CAB 57                  <1>     push rdi
   675 00002CAC 48FFCF              <1>     dec rdi
   676 00002CAF FD                  <1>     std ;Go backwards
   677 00002CB0 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   678 00002CB3 B020                <1>     mov al, SPC
   679 00002CB5 53                  <1>     push rbx
   680 00002CB6 BB07000000          <1>     mov ebx, 7
   681 00002CBB 67E30D              <1>     jecxz .onTabstop
   682                              <1> .scanString:
   683 00002CBE AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   684 00002CBF 7608                <1>     jbe .notChar    ;No, skip handling
   685 00002CC1 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   686 00002CC5 740A                <1>     je .tabChar
   687 00002CC7 FECB                <1>     dec bl
   688                              <1> .notChar:
   689 00002CC9 E2F3                <1>     loop .scanString
   690                              <1> .onTabstop:
   691 00002CCB 2A1D(CD020000)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   692                              <1> .tabChar:
   693 00002CD1 28F3                <1>     sub bl, dh  ;Same on tabstop
   694 00002CD3 00D9                <1>     add cl, bl
   695 00002CD5 80E107              <1>     and cl, 7
   696 00002CD8 5B                  <1>     pop rbx
   697 00002CD9 5F                  <1>     pop rdi
   698 00002CDA FC                  <1>     cld
   699 00002CDB 74B9                <1>     jz .normalChar
   700                              <1>     ;Now erase all the spaces placed on the vCon
   701                              <1> .vConDelTab:
   702 00002CDD E80C000000          <1>     call .vConEraseNoDec
   703 00002CE2 E2F9                <1>     loop .vConDelTab
   704 00002CE4 E9ADFFFFFF          <1>     jmp .normalChar
   705                              <1> .vConErase:
   706                              <1> ;Erase the char on the vCon
   707                              <1> ;Return through the output function
   708 00002CE9 48FFCF              <1>     dec rdi ;Go back a space in the 
   709 00002CEC FECE                <1>     dec dh  ;Decrement char count in the buffer
   710                              <1> .vConEraseNoDec:
   711 00002CEE B008                <1>     mov al, BSP ;Move cursor back
   712 00002CF0 E8F3F9FFFF          <1>     call charOut_B.in
   713 00002CF5 B020                <1>     mov al, SPC ;Replace with a space
   714 00002CF7 E8ECF9FFFF          <1>     call charOut_B.in
   715 00002CFC B008                <1>     mov al, BSP ;Move cursor back again
   716 00002CFE E9E5F9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   717                              <1> .escape:
   718                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   719                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   720                              <1> ; including the function keys.
   721 00002D03 FF2529D3FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   722                              <1> .f2:
   723 00002D09 E846000000          <1>     call .fCommon2
   724 00002D0E EB0C                <1>     jmp short .fCommon
   725                              <1> .f3:
   726 00002D10 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   727 00002D13 28F9                <1>     sub cl, bh  ;Sub our current position
   728 00002D15 EB05                <1>     jmp short .fCommon
   729                              <1> .f1:
   730 00002D17 B901000000          <1>     mov ecx, 1  ;Get one char
   731                              <1> .fCommon:
   732 00002D1C C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   733 00002D23 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   734 00002D25 0F8495FEFFFF        <1>     je .mainLoop
   735 00002D2B 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   736 00002D2D 0F848DFEFFFF        <1>     je .mainLoop
   737                              <1>     ;Else, copy byte by byte, and retain char in al
   738 00002D33 AC                  <1>     lodsb
   739 00002D34 AA                  <1>     stosb
   740 00002D35 E865FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   741 00002D3A FEC7                <1>     inc bh
   742 00002D3C FEC6                <1>     inc dh
   743 00002D3E E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   744 00002D40 E97BFEFFFF          <1>     jmp .mainLoop
   745                              <1> .f4:
   746 00002D45 E80A000000          <1>     call .fCommon2
   747 00002D4A 4801CE              <1>     add rsi, rcx
   748 00002D4D 00CF                <1>     add bh, cl
   749 00002D4F E96CFEFFFF          <1>     jmp .mainLoop
   750                              <1> .fCommon2:
   751 00002D54 E807FBFFFF          <1>     call charIn_B   ;Get a char in al
   752 00002D59 3A05DBD2FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   753 00002D5F 750B                <1>     jne .fnotEscape
   754                              <1>     ;Get another char if they typed escape and force it in the buffer
   755                              <1>     ; Do not return to caller
   756 00002D61 E8FAFAFFFF          <1>     call charIn_B
   757                              <1> .fforceExit:
   758 00002D66 59                  <1>     pop rcx ;Get original return address from stack
   759 00002D67 E954FEFFFF          <1>     jmp .mainLoop
   760                              <1> .fnotEscape:
   761 00002D6C 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   762 00002D6F 28F9                <1>     sub cl, bh
   763 00002D71 74F3                <1>     jz .fforceExit
   764 00002D73 FFC9                <1>     dec ecx
   765 00002D75 74EF                <1>     jz .fforceExit
   766 00002D77 57                  <1>     push rdi
   767 00002D78 4889F7              <1>     mov rdi, rsi
   768 00002D7B 48FFC7              <1>     inc rdi
   769 00002D7E F2AE                <1>     repne scasb ;Search for the char to start printing from
   770 00002D80 5F                  <1>     pop rdi
   771 00002D81 75E3                <1>     jne .fforceExit ;If char not found, return
   772 00002D83 F6D1                <1>     not cl
   773 00002D85 00D9                <1>     add cl, bl
   774 00002D87 28F9                <1>     sub cl, bh
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002D89 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> .f5:
   777 00002D8A B040                <1>     mov al, "@"
   778 00002D8C E857F9FFFF          <1>     call charOut_B.in   ;Print the char
   779 00002D91 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   780 00002D92 57                  <1>     push rdi
   781 00002D93 E8BDFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   782 00002D98 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   783 00002D99 88F3                <1>     mov bl, dh
   784 00002D9B E994FEFFFF          <1>     jmp .breakAlt
   785                              <1> .f6:
   786                              <1> ;If the user wants to insert a EOF, they can use F6
   787 00002DA0 B01A                <1>     mov al, EOF
   788 00002DA2 E95CFEFFFF          <1>     jmp .checkIfCanInsert
   789                              <1> .f7:
   790                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   791 00002DA7 8A058DD2FFFF        <1>     mov al, byte [extESC]
   792 00002DAD E951FEFFFF          <1>     jmp .checkIfCanInsert
   793                              <1> .toggleIns:
   794 00002DB2 F615(03070000)      <1>     not byte [vConInsert]   ;Toggle
   795                              <1>     return
    13                              <2> %%_ret:
    14 00002DB8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> .eDel:
   797 00002DB9 38DF                <1>     cmp bh, bl
   798 00002DBB 0F84FFFDFFFF        <1>     je .mainLoop
   799 00002DC1 FEC7                <1>     inc bh
   800 00002DC3 48FFC6              <1>     inc rsi
   801 00002DC6 E9F5FDFFFF          <1>     jmp .mainLoop
   802                              <1> 
   803                              <1> editKeys:
   804                              <1> ;Our Default Extended keys handler
   805 00002DCB E890FAFFFF          <1>     call charIn_B   ;Get the next char in al
   806 00002DD0 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   807 00002DD5 57                  <1>     push rdi    ;Preserve rdi
   808 00002DD6 488D3D5FD2FFFF      <1>     lea rdi, extKeyTbl
   809 00002DDD 57                  <1>     push rdi
   810                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   811                              <1>     ; offset of function from extKeyTbl
   812                              <1> .lp:
   813 00002DDE AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   814 00002DDF 740D                <1>     je .charFound
   815 00002DE1 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   816 00002DE3 7414                <1>     jz .notInTable
   817 00002DE5 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   818 00002DEC EBF0                <1>     jmp short .lp
   819                              <1> .charFound:
   820 00002DEE 59                  <1>     pop rcx ;Pop back the effective address of the table
   821 00002DEF 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   822 00002DF3 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   823 00002DF6 5F                  <1>     pop rdi
   824 00002DF7 FFE1                <1>     jmp rcx
   825                              <1> .notInTable:
   826 00002DF9 59                  <1>     pop rcx ;Realign stack
   827 00002DFA 59                  <1>     pop rcx
   828 00002DFB E9C0FDFFFF          <1>     jmp buffCharInput_BE.mainLoop
    36                                  %include "./src/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 00002E00 E8A5010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 00002E05 E83B440000          <1>     call getUserRegs
     6 00002E0A 668B15(8E040000)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 00002E11 0FB60D(90040000)    <1>     movzx ecx, byte [years]
     9 00002E18 81C1BC070000        <1>     add ecx, 1980   ;Turn into the year from offset since 1980
    10 00002E1E 8A05(93040000)      <1>     mov al, byte [dayOfWeek]
    11 00002E24 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    12 00002E28 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    13                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002E2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    14                              <1> setDate:           ;ah = 2Bh
    15                              <1> ;	CX = year (1980-2099)
    16                              <1> ;   DH = month (1-12)
    17                              <1> ;	DL = day (1-31)
    18 00002E2D B0FF                <1>     mov al, -1      ;Default to fail
    19 00002E2F 6681E9BC07          <1>     sub cx, 1980    ;Turn into years since 1980
    20                              <1>     retc            ;Return with -1 if cx is below 1980. Avoids going into below.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002E34 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002E36 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    21 00002E37 E873000000          <1>     call writeDate  ;Sets ax to 0 or -1, cx needs to be offset since 1980
    22                              <1>     return
    13                              <2> %%_ret:
    14 00002E3C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> getTime:           ;ah = 2Ch
    24 00002E3D E868010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    25 00002E42 E8FE430000          <1>     call getUserRegs
    26 00002E47 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    27 00002E4E 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    28 00002E55 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    29 00002E59 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    30                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002E5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> setTime:           ;ah = 2Dh
    32                              <1> ;   CH = hour (0-23)
    33                              <1> ;	CL = minutes (0-59)
    34                              <1> ;	DH = seconds (0-59)
    35                              <1> ;	DL = hundredths (0-99)
    36 00002E5E 80FD17              <1>     cmp ch, 23
    37 00002E61 7749                <1>     ja .exitBad
    38 00002E63 80F93B              <1>     cmp cl, 59
    39 00002E66 7744                <1>     ja .exitBad
    40 00002E68 80FE3B              <1>     cmp dh, 59
    41 00002E6B 773F                <1>     ja .exitBad
    42 00002E6D 80FA63              <1>     cmp dl, 99
    43 00002E70 773A                <1>     ja .exitBad
    44                              <1> ;Now we read date (updating internal count if necessary)
    45 00002E72 E833010000          <1>     call readDateTimeRecord
    46 00002E77 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    47 00002E7E 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    48 00002E85 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    49 00002E88 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    50 00002E8C 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    51 00002E90 B906000000          <1>     mov ecx, 6
    52 00002E95 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    53 00002E98 E81F420000          <1>     call primReqWriteSetup   ;rbx now points to request header
    54 00002E9D 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    55 00002EA4 E8FC3E0000          <1>     call goDriver
    56 00002EA9 30C0                <1>     xor al, al
    57                              <1>     return
    13                              <2> %%_ret:
    14 00002EAB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    58                              <1> .exitBad:
    59 00002EAC B0FF                <1>     mov al, -1
    60                              <1>     return
    13                              <2> %%_ret:
    14 00002EAE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> ;------------------------
    62                              <1> ;   Utility functions   :
    63                              <1> ;------------------------
    64                              <1> writeDate:
    65                              <1> ;Input: cx = 00-120 (1980-2099)
    66                              <1> ;       dl = Day    (01-31)
    67                              <1> ;       dh = Month  (01-12)
    68 00002EAF 6681F97800          <1>     cmp cx, 120
    69 00002EB4 0F83ED000000        <1>     jae .exitBad
    70 00002EBA 84F6                <1>     test dh, dh
    71 00002EBC 0F84E5000000        <1>     jz .exitBad
    72 00002EC2 80FE0C              <1>     cmp dh, 12
    73 00002EC5 0F87DC000000        <1>     ja .exitBad
    74 00002ECB 84D2                <1>     test dl, dl
    75 00002ECD 0F84D4000000        <1>     jz .exitBad
    76 00002ED3 80FA1F              <1>     cmp dl, 31
    77 00002ED6 0F87CB000000        <1>     ja .exitBad
    78 00002EDC 668915(8E040000)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    79                              <1>     ;mov byte [monthOfYear], dh
    80 00002EE3 880D(90040000)      <1>     mov byte [years], cl    ;Save the years count
    81 00002EE9 E884010000          <1>     call setDaysInFeb   ;Set days in february this year
    82 00002EEE 80FE02              <1>     cmp dh, 2   ;Are we in Feb?
    83 00002EF1 750C                <1>     jne .notFeb
    84 00002EF3 3A1565D1FFFF        <1>     cmp dl, byte [monthsTbl + 1] ;Compare if we are a bad date?
    85 00002EF9 0F87A8000000        <1>     ja .exitBad ;If 29-28 (for example), error!
    86                              <1> .notFeb:
    87 00002EFF 88CD                <1>     mov ch, cl ;Get years count in ch
    88 00002F01 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    89 00002F04 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    90 00002F07 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    91 00002F0A BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    92 00002F0F F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    93                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    94 00002F11 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    95 00002F14 67E311              <1>     jecxz .addDay    ;Skip adding years
    96 00002F17 056E010000          <1>     add eax, 366    ;First add for a leap year
    97                              <1> .addYears:
    98 00002F1C FFC9                <1>     dec ecx
    99 00002F1E 67E307              <1>     jecxz .addDay    ;Jump if in year after leap year
   100 00002F21 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   101 00002F26 EBF4                <1>     jmp short .addYears
   102                              <1> .addDay:
   103 00002F28 89C2                <1>     mov edx, eax    ;Save this number in edx
   104                              <1>     ;Now to add day offset
   105 00002F2A 0FB60D(8F040000)    <1>     movzx ecx, byte [monthOfYear]
   106 00002F31 488D3525D1FFFF      <1>     lea rsi, monthsTbl
   107                              <1> .addDaysInMonth:
   108 00002F38 FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   109 00002F3A 67E308              <1>     jecxz .addMonthOffset
   110 00002F3D AC                  <1>     lodsb   ;Get the number of days in the month in al
   111 00002F3E 0FB6C0              <1>     movzx eax, al
   112 00002F41 01C2                <1>     add edx, eax
   113 00002F43 EBF3                <1>     jmp short .addDaysInMonth
   114                              <1> .addMonthOffset:
   115 00002F45 0FB60D(8E040000)    <1>     movzx ecx, byte [dayOfMonth]
   116 00002F4C FFC9                <1>     dec ecx
   117 00002F4E 01CA                <1>     add edx, ecx    ;Add month offset
   118                              <1>     ;edx has the number of days since 01/01/1980
   119 00002F50 668915(91040000)    <1>     mov word [daysOffset], dx   ;Store!
   120                              <1> ;Now read and then write CLOCKrecrd
   121 00002F57 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   122 00002F5E B906000000          <1>     mov ecx, 6
   123 00002F63 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   124 00002F66 E85C410000          <1>     call primReqReadSetup   ;rbx now points to request header
   125 00002F6B 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   126 00002F72 E82E3E0000          <1>     call goDriver
   127                              <1> ;Now we change daycount and write it back
   128 00002F77 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   129 00002F7E 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   130 00002F85 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   131 00002F88 B906000000          <1>     mov ecx, 6
   132 00002F8D 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   133 00002F90 E827410000          <1>     call primReqWriteSetup   ;rbx now points to request header
   134 00002F95 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   135 00002F9C E8043E0000          <1>     call goDriver
   136 00002FA1 E8AE000000          <1>     call setDayofWeek
   137                              <1>     return
    13                              <2> %%_ret:
    14 00002FA6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> .exitBad:
   139 00002FA7 B0FF                <1>     mov al, -1
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002FA9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> readDateTimeRecord:
   143                              <1> ;Will read the clock using the primary request header
   144                              <1> ;Preserves all regs except eax and flags
   145 00002FAA 53                  <1>     push rbx
   146 00002FAB 51                  <1>     push rcx
   147 00002FAC 52                  <1>     push rdx
   148 00002FAD 56                  <1>     push rsi
   149 00002FAE 55                  <1>     push rbp
   150                              <1> 
   151 00002FAF 66C705(151A0000)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   151 00002FB7 00                  <1>
   152 00002FB8 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   153 00002FBF B906000000          <1>     mov ecx, 6      ;Number of bytes to xfr
   154 00002FC4 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   155                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   156                              <1> ; rbx = Data storage buffer ptr
   157                              <1> ; ecx = Number of sectors to transfer | Number of bytes to xfr, if char dev
   158                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   159 00002FC7 E8FB400000          <1>     call primReqReadSetup   ;rbx now points to request header
   160 00002FCC 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   161 00002FD3 E8CD3D0000          <1>     call goDriver
   162 00002FD8 0FB705(16050000)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   163                              <1> ;Here we have:  ax = Days since 1/1/1980
   164                              <1> ;Updates the internal date fields
   165                              <1> ;Internal time fields are in the clock record
   166                              <1> ;So now we check if the number of days since 1980 are the same.
   167                              <1> ;If so, we can skip updating.
   168 00002FDF 663B05(91040000)    <1>     cmp ax, word [daysOffset]
   169 00002FE6 7466                <1>     je .exit    ;Return if equal
   170 00002FE8 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   171 00002FED 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   172 00002FEF 668905(91040000)    <1>     mov word [daysOffset], ax   ;Save this new offset
   173                              <1>     ;Now want to update years, month and day fields
   174                              <1>     ;ax has the number of days since 01/01/1980
   175                              <1>     ;Get days in a 4 year period
   176 00002FF6 BBB5050000          <1>     mov ebx, 365*4 + 1
   177 00002FFB 31D2                <1>     xor edx, edx
   178 00002FFD 89D1                <1>     mov ecx, edx  ;Zero ecx
   179 00002FFF F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   180                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   181                              <1>     ;edx has offset into current 4 year bunch
   182 00003001 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   183 00003006 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   184 00003008 7210                <1>     jb .foundBunch
   185 0000300A 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   186 0000300C FFC1                <1>     inc ecx
   187 0000300E FFCB                <1>     dec ebx ;Number of days in a normal year
   188                              <1> .findBunch:
   189 00003010 39DA                <1>     cmp edx, ebx
   190 00003012 7206                <1>     jb .foundBunch
   191 00003014 29DA                <1>     sub edx, ebx
   192 00003016 FFC1                <1>     inc ecx
   193 00003018 EBF6                <1>     jmp short .findBunch
   194                              <1> .foundBunch:
   195                              <1>     ;If ecx = 0, february has 29 days!
   196                              <1>     ;eax has number of four year bunches elapsed since 1980
   197 0000301A C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   198 0000301D 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   199                              <1>     ;ecx now has the number of years since 1980
   200 0000301F E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   201                              <1> ;edx has number of days into the year we are in
   202                              <1> ;eax has number of days in Feb for this year
   203 00003024 488D3532D0FFFF      <1>     lea rsi, monthsTbl
   204 0000302B 31C9                <1>     xor ecx, ecx    ;Use as month counter
   205                              <1> .monthSearch:
   206 0000302D FFC1                <1>     inc ecx ;Start from 1
   207 0000302F AC                  <1>     lodsb   ;Get value in al and inc rsi
   208 00003030 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   209 00003033 39C2                <1>     cmp edx, eax
   210 00003035 7204                <1>     jb .monthFound
   211 00003037 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   212 00003039 EBF2                <1>     jmp short .monthSearch
   213                              <1> .monthFound:
   214                              <1>     ;cl has the month (01h-0Ch)
   215                              <1>     ;dl has the day of the month - 1
   216 0000303B FFC2                <1>     inc edx
   217 0000303D 880D(8F040000)      <1>     mov byte [monthOfYear], cl
   218 00003043 8815(8E040000)      <1>     mov byte [dayOfMonth], dl
   219 00003049 E806000000          <1>     call setDayofWeek
   220                              <1> .exit:
   221 0000304E 5D                  <1>     pop rbp
   222 0000304F 5E                  <1>     pop rsi
   223 00003050 5A                  <1>     pop rdx
   224 00003051 59                  <1>     pop rcx
   225 00003052 5B                  <1>     pop rbx
   226                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 00003053 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> setDayofWeek:
   229                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   230 00003054 0FB705(91040000)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   231 0000305B 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   232                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   233 00003060 31D2                <1>     xor edx, edx
   234 00003062 B907000000          <1>     mov ecx, 7   
   235 00003067 F7F1                <1>     div ecx  ;Get remainder in dl
   236 00003069 8815(93040000)      <1>     mov byte [dayOfWeek], dl
   237                              <1> ;Set ZF to indicate all ok
   238 0000306F 31C0                <1>     xor eax, eax
   239                              <1>     return
    13                              <2> %%_ret:
    14 00003071 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> setDaysInFeb:   ;Int 2Fh AX = 121Bh, Set days in february
   242                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   243                              <1> ;Input: cl = Year - 1980
   244                              <1> ;Output: al = Number of days in February
   245 00003072 880D(90040000)      <1>     mov byte [years], cl    ;Save this figure
   246 00003078 F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   247 0000307B 51                  <1>     push rcx
   248 0000307C 57                  <1>     push rdi
   249 0000307D B81C000000          <1>     mov eax, 28  ;Usual days in february
   250 00003082 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   251 00003087 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   252 0000308A 488D3DCDCFFFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   253 00003091 AA                  <1>     stosb   ;Store the word in rdi
   254 00003092 5F                  <1>     pop rdi
   255 00003093 59                  <1>     pop rcx
   256                              <1>     return
    13                              <2> %%_ret:
    14 00003094 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> getDirDTwords:
   259                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   260                              <1> ; High word of eax = Date
   261                              <1> ; Low word of eax = Time
   262                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   263                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   264                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   265                              <1> 
   266                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   267                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   268                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   269                              <1> ;Preserves all registers except eax
   270 00003095 53                  <1>     push rbx
   271 00003096 0FB61D(1B050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   272 0000309D D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   273 0000309F 89D8                <1>     mov eax, ebx
   274 000030A1 0FB61D(18050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   275 000030A8 C1E305              <1>     shl ebx, 5
   276 000030AB 09D8                <1>     or eax, ebx
   277 000030AD 0FB61D(19050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   278 000030B4 C1E30B              <1>     shl ebx, 11
   279 000030B7 09D8                <1>     or eax, ebx
   280 000030B9 0FB61D(8E040000)    <1>     movzx ebx, byte [dayOfMonth]
   281 000030C0 C1E310              <1>     shl ebx, 16
   282 000030C3 09D8                <1>     or eax, ebx
   283 000030C5 0FB61D(8F040000)    <1>     movzx ebx, byte [monthOfYear]
   284 000030CC C1E315              <1>     shl ebx, 21
   285 000030CF 09D8                <1>     or eax, ebx
   286 000030D1 0FB61D(90040000)    <1>     movzx ebx, byte [years]
   287 000030D8 C1E319              <1>     shl ebx, 25
   288 000030DB 09D8                <1>     or eax, ebx
   289 000030DD 5B                  <1>     pop rbx
   290                              <1>     return
    13                              <2> %%_ret:
    14 000030DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   291                              <1> getDateAndTimeOld:  ;Int 2Fh AX=120Dh
   292                              <1> ;Returns edx = time
   293                              <1> ;        eax = date
   294                              <1> ; Formally ax and dx but we clear the upper words
   295 000030DF E8C6FEFFFF          <1>     call readDateTimeRecord
   296 000030E4 E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   297 000030E9 31D2                <1>     xor edx, edx
   298 000030EB 6689C2              <1>     mov dx, ax  ;Save time
   299 000030EE C1E810              <1>     shr eax, 10h    ;Get date into rax
   300                              <1>     return
    13                              <2> %%_ret:
    14 000030F1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                                  %include "./src/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for particular uses. This is planned
     3                              <1> ; to be extended later.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently generally supported:
    14                              <1> ;   openFCB -> Except for creating a volume label.
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB -> Except for creating a volume label.
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions will result in returning al = -1 and 
    24                              <1> ; an extended error code of 05 - Access Denied
    25                              <1> 
    26                              <1> findFirstFileFCB:  ;ah = 11h
    27                              <1> ;Input: rdx -> FCB
    28 000030F2 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    29 000030F9 4889D6              <1>     mov rsi, rdx
    30 000030FC 803EFF              <1>     cmp byte [rsi], -1
    31 000030FF 7507                <1>     jne .notExt1
    32 00003101 4881C607000000      <1>     add rsi, exFcb.driveNum
    33                              <1> .notExt1:
    34 00003108 0FB606              <1>     movzx eax, byte [rsi]
    35 0000310B 50                  <1>     push rax    ;Push on stack the drive number
    36 0000310C 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    37 00003113 E822030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    38 00003118 7306                <1>     jnc .fcbOk
    39 0000311A 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    40 0000311B E9D6450000          <1>     jmp fcbErrExit
    41                              <1> .fcbOk:
    42 00003120 488D3D(1E050000)    <1>     lea rdi, buffer1
    43 00003127 E84BE4FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    44 0000312C 7306                <1>     jnc .fileFound
    45 0000312E 5B                  <1>     pop rbx
    46 0000312F E9C2450000          <1>     jmp fcbErrExit
    47                              <1> .fileFound:
    48                              <1> ;Now we build an FFBlock internally
    49 00003134 488D3D(2F060000)    <1>     lea rdi, dosffblock
    50 0000313B 57                  <1>     push rdi
    51 0000313C E8DCE2FFFF          <1>     call setupFFBlock
    52 00003141 5E                  <1>     pop rsi
    53                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    54 00003142 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB]
    55 00003149 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    56 00003150 7407                <1>     jz .notExt2
    57 00003152 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    58                              <1> .notExt2:
    59 00003159 5B                  <1>     pop rbx ;Get back the drive number in bl
    60 0000315A 85DB                <1>     test ebx, ebx
    61 0000315C 7509                <1>     jnz .notCurrentDrive
    62 0000315E 0FB61D(31040000)    <1>     movzx ebx, byte [currentDrv]
    63 00003165 FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    64                              <1> .notCurrentDrive:
    65 00003167 AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    66 00003168 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    67 0000316B B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    68 00003170 F3A5                <1>     rep movsd
    69 00003172 89D8                <1>     mov eax, ebx
    70 00003174 AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    71 00003175 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    72 0000317C 488D35(5A060000)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    73 00003183 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    74 0000318A 7412                <1>     jz .notExt3
    75 0000318C B8FFFFFFFF          <1>     mov eax, -1
    76 00003191 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    77 00003192 FFC0                <1>     inc eax ;Make it zero
    78 00003194 AB                  <1>     stosd
    79 00003195 AA                  <1>     stosb   ;Store 5 bytes of zero
    80 00003196 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]
    81 0000319D AA                  <1>     stosb   ;Store the search attributes
    82                              <1> .notExt3:
    83 0000319E 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    84 000031A0 AA                  <1>     stosb
    85 000031A1 B904000000          <1>     mov ecx, fatDirEntry_size/8
    86 000031A6 F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    87 000031A9 E945450000          <1>     jmp fcbGoodExit
    88                              <1>     
    89                              <1> findNextFileFCB:   ;ah = 12h
    90 000031AE 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    91 000031B5 C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    92 000031BC C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    93 000031C3 4889D6              <1>     mov rsi, rdx
    94                              <1> 
    95 000031C6 803EFF              <1>     cmp byte [rsi], -1
    96 000031C9 7514                <1>     jne .notExt
    97 000031CB FE0D(FB060000)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
    98 000031D1 4881C606000000      <1>     add rsi, exFcb.attribute
    99 000031D8 AC                  <1>     lodsb   ;Get search attr in al
   100 000031D9 8805(FC060000)      <1>     mov byte [searchAttr], al
   101                              <1> .notExt:
   102                              <1>     ;rsi points to drive letter
   103 000031DF 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   104 000031E6 31C0                <1>     xor eax, eax
   105 000031E8 AC                  <1>     lodsb   ;Get the FCB drive letter
   106 000031E9 50                  <1>     push rax    ;Push drive letter on the stack
   107 000031EA 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   108 000031ED AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   109 000031EE B905000000          <1>     mov ecx, 5
   110 000031F3 F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   111 000031F5 FF35(17040000)      <1>     push qword [currentDTA] ;Save original currentDTA
   112 000031FB 488D3D(2F060000)    <1>     lea rdi, dosffblock
   113 00003202 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   114 00003203 8F05(17040000)      <1>     pop qword [currentDTA]
   115 00003209 E8E2DDFFFF          <1>     call findNextMain
   116 0000320E 8F05(17040000)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   117 00003214 0F831AFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   118 0000321A 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   119 00003221 F607FF              <1>     test byte [rdi], -1
   120 00003224 7407                <1>     jz .notExt2
   121 00003226 4881C707000000      <1>     add rdi, exFcb.driveNum
   122                              <1> .notExt2:
   123 0000322D 5B                  <1>     pop rbx ;Get the drive letter back into bl
   124 0000322E 881F                <1>     mov byte [rdi], bl
   125 00003230 E9C1440000          <1>     jmp fcbErrExit  ;And exit bad
   126                              <1> 
   127                              <1> deleteFileFCB:     ;ah = 13h
   128 00003235 488D3D(1E050000)    <1>     lea rdi, buffer1
   129 0000323C 57                  <1>     push rdi
   130 0000323D E8F8010000          <1>     call fcbInitRoutine ;Build path and find file to delete
   131 00003242 5F                  <1>     pop rdi ;Point rdi to the canonised path
   132 00003243 0F82AD440000        <1>     jc fcbErrExit
   133 00003249 E829E3FFFF          <1>     call getFilePathNoCanon ;Get the file
   134 0000324E 0F82A2440000        <1>     jc fcbErrExit
   135 00003254 E8E70F0000          <1>     call outerDeleteMain
   136 00003259 0F8297440000        <1>     jc fcbErrExit
   137 0000325F E98F440000          <1>     jmp fcbGoodExit
   138                              <1> 
   139                              <1> renameFileFCB:     ;ah = 17h
   140                              <1> ;Input: rdx -> User FCB
   141 00003264 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   142                              <1>     ;First we get the drive letter 
   143 0000326B 4889D6              <1>     mov rsi, rdx
   144 0000326E 803EFF              <1>     cmp byte [rsi], -1
   145 00003271 7507                <1>     jne .notExt
   146 00003273 4881C607000000      <1>     add rsi, exFcb.driveNum
   147                              <1> .notExt:
   148 0000327A 31C0                <1>     xor eax, eax
   149 0000327C AC                  <1>     lodsb
   150 0000327D 50                  <1>     push rax    ;Push the drive letter on the stack for now
   151 0000327E 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   152 00003285 E8B0010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   153 0000328A 723D                <1>     jc .badPop
   154 0000328C FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   155 00003292 8F05(26060000)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   156 00003298 58                  <1>     pop rax ;Get drive letter back
   157 00003299 488D3D(9E050000)    <1>     lea rdi, buffer2
   158 000032A0 E869010000          <1>     call fcbInitName2
   159 000032A5 7223                <1>     jc short .bad
   160 000032A7 488B05(26060000)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   161 000032AE 488705(1E060000)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   162 000032B5 488905(26060000)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   163 000032BC E8A30B0000          <1>     call renameMain
   164 000032C1 0F832C440000        <1>     jnc fcbGoodExit
   165 000032C7 EB01                <1>     jmp short .bad
   166                              <1> .badPop:
   167 000032C9 5B                  <1>     pop rbx ;Pop drive number off stack
   168                              <1> .bad:
   169 000032CA E927440000          <1>     jmp fcbErrExit
   170                              <1> 
   171                              <1> getFileSizeFCB:    ;ah = 23h
   172                              <1> ;This function which can be used to test existance of file without opening it 
   173                              <1> ;Input: rdx -> FCB
   174 000032CF 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   175 000032D6 488D3D(1E050000)    <1>     lea rdi, buffer1
   176 000032DD 57                  <1>     push rdi
   177 000032DE E857010000          <1>     call fcbInitRoutine
   178 000032E3 5F                  <1>     pop rdi
   179 000032E4 0F820C440000        <1>     jc fcbErrExit
   180 000032EA E888E2FFFF          <1>     call getFilePathNoCanon
   181 000032EF 0F8201440000        <1>     jc fcbErrExit
   182 000032F5 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   183                              <1>     ;Now we gotta set up FCB randRecrd Field
   184 000032FB 488B35(1A070000)    <1>     mov rsi, qword [workingFCB]
   185 00003302 803EFF              <1>     cmp byte [rsi], -1
   186 00003305 7507                <1>     jne .notExtended
   187 00003307 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   188                              <1> .notExtended:
   189                              <1> ;rsi points to the drive number now
   190 0000330E 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   191 00003312 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   192 00003314 85D2                <1>     test edx, edx
   193 00003316 7402                <1>     jz .noRemainder
   194 00003318 FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   195                              <1> .noRemainder:
   196 0000331A 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   197 0000331D E9D1430000          <1>     jmp fcbGoodExit
   198                              <1> 
   199                              <1> setDTA:            ;ah = 1Ah, Always can be used
   200                              <1> ;Called with:
   201                              <1> ;   rdx = Pointer to the new default DTA
   202 00003322 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   203 00003329 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   204 0000332D 488915(17040000)    <1>     mov qword [currentDTA], rdx
   205 00003334 C3                  <1>     ret
   206                              <1> 
   207                              <1> getDTA:            ;ah = 2Fh, Always can be used
   208 00003335 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   209 0000333C 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   210 00003343 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   211                              <1>     return
    13                              <2> %%_ret:
    14 00003347 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   212                              <1>     
   213                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   214                              <1> ;Input:
   215                              <1> ;rsi points to a command line to parse
   216                              <1> ;rdi points to a future unopened FCB
   217                              <1> ;al = parsing control bits. 
   218                              <1> ; al[0] = If set, leading filename separators are scanned off
   219                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   220                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   221                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   222                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   223                              <1> ;        al = 1 => Wildcards found
   224                              <1> ;        al = -1 => Drive specifier invalid
   225                              <1> ;rsi -> to the first char past the parsed filename
   226                              <1> ;rdi -> First byte of the FCB 
   227                              <1> 
   228 00003348 E88D010000          <1>     call parseNameToFCB
   229 0000334D 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   230 0000334E E8F23E0000          <1>     call getUserRegs
   231 00003353 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   232                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 00003356 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> createFileFCB:     ;ah = 16h
   235                              <1> openFileFCB:       ;ah = 0Fh
   236                              <1> ;rdx -> Extended FCB
   237                              <1> ;   MUST BE EXTENDED. 
   238                              <1> ;   MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   239                              <1> ; Using FCB's, one can only create a volume label on a volume.
   240                              <1> ;
   241                              <1> ;Deleting a volume label can be done using delete file (fcb)
   242                              <1> ;Renaming a volume label can be done using rename file (fcb)
   243                              <1> ;Creating a volume label can be done using create file (fcb and hdl)
   244                              <1> ;
   245                              <1> ; In all cases, we recommend the use of fcb's ONLY. Hdl funcs are not 
   246                              <1> ; suggested for use with the vol crud because, do we really need the hdl? No!
   247                              <1> ;
   248 00003357 488915(1A070000)    <1>     mov qword [workingFCB], rdx     ;Save the FCB ptr
   249 0000335E 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   250 00003361 755F                <1>     jne .exitErr
   251 00003363 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   252 00003367 7559                <1>     jne .exitErr
   253                              <1>     ;Here we proceed with creating a volume label
   254 00003369 488D3D(1E050000)    <1>     lea rdi, buffer1
   255 00003370 57                  <1>     push rdi
   256 00003371 E8C4000000          <1>     call fcbInitRoutine     ;Build path to volid
   257 00003376 5E                  <1>     pop rsi                 ;Point rsi to the canonised path
   258 00003377 0F8279430000        <1>     jc fcbErrExit
   259 0000337D 4889F7              <1>     mov rdi, rsi            ;Pass argument to rdi. rsi, rdi preserved
   260 00003380 E8A1400000          <1>     call checkPathspecOK    ;If the path has wildcards, fail!
   261 00003385 723B                <1>     jc .exitErr
   262 00003387 E8EBE1FFFF          <1>     call getFilePathNoCanon ;Get the file if it exists! Sets DPB too.
   263 0000338C 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
   264 00003392 30C0                <1>     xor al, al
   265 00003394 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Do null path check!
   266 00003399 7427                <1>     je .exitErr
   267 0000339B 488D1D(100D0000)    <1>     lea rbx, scratchSFT     ;Set the working SFT to the scratch in the SDA
   268 000033A2 48891D(32070000)    <1>     mov qword [currentSFT], rbx
   269 000033A9 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]   ;Get the file attribute in al
   270 000033B0 E875100000          <1>     call createMain
   271 000033B5 720B                <1>     jc .exitErr
   272                              <1>     ;We close the sda sft since we dont have an explicit FCB close fn.
   273                              <1>     ;Necessary to close the associated share record when sharing.
   274 000033B7 E88F130000          <1>     call closeMain
   275 000033BC 0F8331430000        <1>     jnc fcbGoodExit     ;We require no back copying so exit!
   276                              <1> .exitErr:
   277 000033C2 B805000000          <1>     mov eax, errAccDen
   278 000033C7 E92A430000          <1>     jmp fcbErrExit
   279                              <1> 
   280                              <1> ;=================================================================
   281                              <1> ;=================================================================
   282                              <1> ;These functions are marked as reserved for future expansion.
   283                              <1> ;=================================================================
   284                              <1> ;=================================================================
   285                              <1> closeFileFCB:      ;ah = 10h
   286                              <1> sequentialReadFCB: ;ah = 14h
   287                              <1> sequentialWriteFCB:;ah = 15h
   288                              <1> randomReadFCB:     ;ah = 21h
   289                              <1> randomWriteFCB:    ;ah = 22h
   290                              <1> setRelRecordFCB:   ;ah = 24h
   291                              <1> randBlockReadFCB:  ;ah = 27h
   292                              <1> randBlockWriteFCB: ;ah = 28h
   293 000033CC B805000000          <1>     mov eax, errAccDen
   294 000033D1 E920430000          <1>     jmp fcbErrExit
   295                              <1> 
   296                              <1> 
   297                              <1> ;--------------------------------
   298                              <1> ;  Common FCB related Routines  :
   299                              <1> ;--------------------------------
   300                              <1> fcbCheckDriveType:
   301                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   302                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   303                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   304                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   305                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   306                              <1> ;If a net CDS, automatic fail (for now).
   307 000033D6 C605(F9060000)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   308 000033DD 51                  <1>     push rcx
   309 000033DE 57                  <1>     push rdi
   310 000033DF 55                  <1>     push rbp
   311 000033E0 9C                  <1>     pushfq
   312 000033E1 F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   313 000033E8 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   314 000033EA E8C23D0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   315 000033EF 7218                <1>     jc .exit
   316                              <1>     ;rdi has cds ptr now
   317 000033F1 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   318 000033F5 E816D6FFFF          <1>     call getFATtype
   319 000033FA 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   320 00003400 7707                <1>     ja .exit
   321                              <1> .okToGo:
   322 00003402 C605(F9060000)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   323                              <1> .exit:
   324 00003409 9D                  <1>     popfq
   325 0000340A 5D                  <1>     pop rbp
   326 0000340B 5F                  <1>     pop rdi
   327 0000340C 59                  <1>     pop rcx
   328                              <1>     return
    13                              <2> %%_ret:
    14 0000340D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   329                              <1> fcbInitName2:
   330                              <1> ;Must be called after fcbInitRoutine has been run once
   331                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   332                              <1> ;       rdx -> UserFCB
   333                              <1> ;       eax[0] = Drive number (0 based)
   334 0000340E 55                  <1>     push rbp
   335 0000340F 4889E5              <1>     mov rbp, rsp
   336 00003412 4881EC0F000000      <1>     sub rsp, 15
   337 00003419 57                  <1>     push rdi
   338 0000341A 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   339 0000341E 4889D6              <1>     mov rsi, rdx
   340 00003421 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
   341 00003428 7407                <1>     jz .notExtended
   342 0000342A 4881C607000000      <1>     add rsi, exFcb.driveNum
   343                              <1> .notExtended:
   344                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   345 00003431 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   346 00003438 EB36                <1>     jmp short fcbInitRoutine.rename2EP
   347                              <1> fcbInitRoutine:
   348                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   349                              <1> ;Input: rdx -> User FCB
   350                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   351 0000343A 55                  <1>     push rbp
   352 0000343B 4889E5              <1>     mov rbp, rsp
   353 0000343E 4881EC0F000000      <1>     sub rsp, 15    ;Make 16 char space on stack
   354                              <1>     ;This space is used to store X:FILENAME.EXT,0
   355 00003445 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   356 00003446 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   357 0000344A C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   358 00003451 C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   359 00003458 E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   360 0000345D 7410                <1>     jz .notExtended
   361 0000345F C605(FB060000)FF    <1>     mov byte [extFCBFlag], -1
   362 00003466 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   363 00003469 8805(FC060000)      <1>     mov byte [searchAttr], al
   364                              <1> .notExtended:
   365 0000346F AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   366                              <1> .rename2EP:
   367                              <1> ;Call notjoin to prevent choosing a CDS that is a join cds for a FCB operation
   368 00003470 E8F43D0000          <1>     call getCDSNotJoin ;Get the CDS (preserves rdi)
   369 00003475 723F                <1>     jc .badDisk
   370 00003477 E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   371 0000347C 488D1DD9CFFFFF      <1>     lea rbx, asciiCharProperties
   372 00003483 B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   373 00003488 56                  <1>     push rsi    ;rsi -> fcb.filename
   374                              <1> .nameCharCheck:
   375 00003489 AC                  <1>     lodsb   ;Get the char in al
   376 0000348A D7                  <1>     xlatb   ;Get the char signature in al
   377 0000348B A808                <1>     test al, badFCBChar  ;Make sure it is a valid FCB filename char
   378 0000348D 7427                <1>     jz .badDisk
   379 0000348F FFC9                <1>     dec ecx
   380 00003491 75F6                <1>     jnz .nameCharCheck
   381 00003493 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   382 00003494 4889FB              <1>     mov rbx, rdi    ;Save ptr to first char past X: (or X:\)
   383 00003497 E841DFFFFF          <1>     call FCBToAsciiz
   384 0000349C 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   385 0000349D 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0 (or X:\,0)?
   386 000034A0 7414                <1>     je .badDisk
   387 000034A2 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   388 000034A6 55                  <1>     push rbp
   389 000034A7 E890E0FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename (add curr dir if X:)
   390 000034AC 5D                  <1>     pop rbp
   391 000034AD 7207                <1>     jc .badDisk
   392 000034AF E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   393 000034B4 EB03                <1>     jmp short .jiggleStack  ;Skip the error
   394                              <1> .badDisk:
   395 000034B6 B003                <1>     mov al, errPnf  ;DOS does this... so will I
   396 000034B8 F9                  <1>     stc
   397                              <1> .jiggleStack:
   398 000034B9 4889EC              <1>     mov rsp, rbp
   399 000034BC 5D                  <1>     pop rbp
   400                              <1> .exit:
   401                              <1>     return
    13                              <2> %%_ret:
    14 000034BD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   402                              <1> 
   403                              <1> storeZeroBasedDriveNumber:
   404                              <1> ;Input: al => 0 based drive letter
   405                              <1> ;       rdi -> Points to buffer to store the X: in
   406 000034BE FEC0                <1>     inc al
   407                              <1> storeOneBasedDriveNumber:
   408                              <1> ;Input: al => 1 based drive letter
   409                              <1> ;       rdi -> Points to buffer to store the X: in
   410 000034C0 0440                <1>     add al, "@"
   411 000034C2 B43A                <1>     mov ah, ":"
   412 000034C4 66AB                <1>     stosw
   413                              <1>     return
    13                              <2> %%_ret:
    14 000034C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> 
   415                              <1> isFCBExtended:
   416                              <1> ;Input: rdx = FCB ptr
   417                              <1> ;Output: rsi -> Drive letter of FCB
   418                              <1> ;        rdx -> FCB first byte
   419                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   420 000034C7 4889D6              <1>     mov rsi, rdx
   421 000034CA 803EFF              <1>     cmp byte [rsi], -1
   422 000034CD 7507                <1>     jne .notExtended
   423 000034CF 4881C607000000      <1>     add rsi, exFcb.driveNum
   424                              <1> .notExtended:
   425 000034D6 4839F2              <1>     cmp rdx, rsi
   426                              <1>     return
    13                              <2> %%_ret:
    14 000034D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   427                              <1> 
   428                              <1> parseNameToFCB:
   429                              <1> ;rsi points to a command line to parse
   430                              <1> ;rdi points to a future unopened FCB
   431                              <1> ;al = parsing control bits. 
   432                              <1> ; al[0] = If set, leading filename separators are scanned off
   433                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   434                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   435                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   436                              <1> ;
   437                              <1> ;Separators include : . ; , = + TAB SPACE
   438                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   439 000034DA C605(8D040000)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   440 000034E1 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   441 000034E3 A802                <1>     test al, 2  ;Set drive letter
   442 000034E5 7402                <1>     jz .skipDriveLetter
   443 000034E7 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   444                              <1> .skipDriveLetter:
   445 000034E9 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   446 000034EC B908000000          <1>     mov ecx, 8  ;Copy Filename
   447 000034F1 A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   448 000034F3 93                  <1>     xchg eax, ebx
   449 000034F4 B020                <1>     mov al, " " ;Clear the field
   450 000034F6 7405                <1>     jz .clearFilenameField
   451 000034F8 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   452 000034FB 31C9                <1>     xor ecx, ecx
   453                              <1> .clearFilenameField:
   454 000034FD F3AA                <1>     rep stosb
   455 000034FF B903000000          <1>     mov ecx, 3
   456 00003504 F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   457 00003507 7405                <1>     jz .clearExtensionField
   458 00003509 4801CF              <1>     add rdi, rcx
   459 0000350C 31C9                <1>     xor ecx, ecx
   460                              <1> .clearExtensionField:
   461 0000350E F3AA                <1>     rep stosb
   462 00003510 91                  <1>     xchg eax, ecx
   463 00003511 AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   464 00003512 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   465 00003519 F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   466 0000351C 740F                <1>     jz .dontScanOffTerm
   467 0000351E E89F000000          <1>     call skipSeparators ;Skip leading separators
   468 00003523 E8713E0000          <1>     call isCharTerminator   ;If first char is terminator, go past and keep skipping
   469 00003528 7508                <1>     jnz .skipIfNotTerminator
   470 0000352A 48FFC6              <1>     inc rsi
   471                              <1> .dontScanOffTerm:
   472 0000352D E890000000          <1>     call skipSeparators  ;Skip separators
   473                              <1> .skipIfNotTerminator:
   474 00003532 E83A3E0000          <1>     call uppercaseCharAtPtr 
   475 00003537 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   476 00003539 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   477 0000353C 7519                <1>     jne .skipSettingDriveLetter
   478 0000353E 48FFC6              <1>     inc rsi ;Goto next char
   479 00003541 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   480 00003543 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   481 00003545 50                  <1>     push rax    ;Save the 1 based drive letter
   482 00003546 E81E3D0000          <1>     call getCDSNotJoin   ;Verifies if this drive letter is valid
   483 0000354B 58                  <1>     pop rax
   484 0000354C 7302                <1>     jnc .validDriveLetter
   485                              <1> .invalidDriveLetter:
   486 0000354E B2FF                <1>     mov dl, -1
   487                              <1> .validDriveLetter:
   488 00003550 AA                  <1>     stosb
   489 00003551 48FFC6              <1>     inc rsi ;Align pointers...
   490 00003554 48FFCF              <1>     dec rdi 
   491                              <1> .skipSettingDriveLetter:
   492 00003557 48FFCE              <1>     dec rsi
   493 0000355A 48FFC7              <1>     inc rdi
   494                              <1> getFCBFilename:
   495                              <1> ;Input: rsi points to first char of filename
   496                              <1> ;       rdi points to storage buffer for filename
   497                              <1> ;       dl contains the signature if drive invalid
   498                              <1> ;Output:
   499                              <1> ;       Fields filled
   500                              <1> ;       al = Return signature
   501 0000355D B908000000          <1>     mov ecx, 8
   502 00003562 E815000000          <1>     call getFCBNameField
   503 00003567 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   504 0000356A 750D                <1>     jne .noExt
   505 0000356C B903000000          <1>     mov ecx, 3
   506 00003571 48FFC6              <1>     inc rsi ;Skip this char
   507 00003574 E814000000          <1>     call forceFCBNameField
   508                              <1> .noExt:
   509 00003579 88D0                <1>     mov al, dl  ;Store the return signature
   510                              <1>     return
    13                              <2> %%_ret:
    14 0000357B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   511                              <1> 
   512                              <1> getFCBNameField:
   513                              <1> ;Checks if the field is appropriate before copying it
   514 0000357C E8F03D0000          <1>     call uppercaseCharAtPtr
   515 00003581 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   516 00003583 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   517 00003586 48FFCE              <1>     dec rsi ;Point to previous char
   518                              <1>     return
    13                              <2> %%_ret:
    14 00003589 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   519                              <1> .okName:
   520 0000358A 48FFCE              <1>     dec rsi ;Go back now a char
   521                              <1> forceFCBNameField:
   522                              <1> ;Forcefully copies the name from rsi to rdi
   523 0000358D E8DF3D0000          <1>     call uppercaseCharAtPtr
   524 00003592 7226                <1>     jc .terminatingSpace
   525 00003594 750D                <1>     jnz .notSep
   526 00003596 F605(8D040000)FF    <1>     test byte [fcbSpaceOk], -1
   527 0000359D 741B                <1>     jz .terminatingSpace
   528 0000359F 3C20                <1>     cmp al, " "
   529 000035A1 7517                <1>     jne .terminatingSpace
   530                              <1> .notSep:
   531 000035A3 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   532 000035A6 FFC9                <1>     dec ecx
   533 000035A8 3C2A                <1>     cmp al, "*" ;Big wildcard?
   534 000035AA 7504                <1>     jne .notBigWildcard
   535 000035AC B03F                <1>     mov al, "?"
   536 000035AE F3AA                <1>     rep stosb
   537                              <1> .notBigWildcard:
   538 000035B0 AA                  <1>     stosb   ;Stores the uppercased char
   539 000035B1 3C3F                <1>     cmp al, "?"
   540 000035B3 75D8                <1>     jne forceFCBNameField
   541 000035B5 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   542 000035B8 EBD3                <1>     jmp short forceFCBNameField
   543                              <1> .terminatingSpace:
   544 000035BA B020                <1>     mov al, " "
   545 000035BC F3AA                <1>     rep stosb   ;Store remaining chars worth in spaces
   546 000035BE 48FFCE              <1>     dec rsi     ;Point back to terminating char
   547                              <1>     return
    13                              <2> %%_ret:
    14 000035C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   548                              <1> 
   549                              <1> skipSeparators:
   550                              <1> ;Input: rsi -> String 
   551                              <1> ;Output: rsi -> First non separator type char
   552 000035C2 AC                  <1>     lodsb
   553 000035C3 E8E03D0000          <1>     call isCharSeparator
   554 000035C8 74F8                <1>     jz skipSeparators
   555 000035CA 48FFCE              <1>     dec rsi
   556                              <1>     return
    13                              <2> %%_ret:
    14 000035CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                                  %include "./src/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 000035CE 51                  <1>     push rcx    ;Save file attributes on stack
    11 000035CF 488D0D540E0000      <1>     lea rcx, createMain
    12 000035D6 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with directory
    13 000035DD EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 000035DF BB16000000          <1>     mov ebx, dirInclusive
    21 000035E4 F605(02070000)FF    <1>     test byte [dosInvoke], -1
    22 000035EB 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 000035EE 880D(FC060000)      <1>     mov byte [searchAttr], cl
    24 000035F4 488D0D040D0000      <1>     lea rcx, openMain  
    25 000035FB 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 000035FC 4889D6              <1>     mov rsi, rdx
    28 000035FF E8223E0000          <1>     call checkPathspecOK
    29 00003604 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    31 00003606 58                  <1>     pop rax
    32 00003607 B805000000          <1>     mov eax, errAccDen
    33 0000360C E905410000          <1>     jmp extErrExit
    34                              <1> .pathOk:
    35 00003611 E8B5400000          <1>     call dosCrit1Enter
    36 00003616 E8D9190000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    37 0000361B E8B5400000          <1>     call dosCrit1Exit
    38 00003620 0F82D3000000        <1>     jc .exitBad
    39                              <1>     ;Now save variables
    40 00003626 E8FF180000          <1>     call setCurrentSFT
    41 0000362B 66891D(3A070000)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    42 00003632 E8861A0000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    43 00003637 0F82BC000000        <1>     jc .exitBad
    44 0000363D 66891D(3C070000)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    45 00003644 48893D(2A070000)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    46 0000364B 0FB71D(3A070000)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    47 00003652 881F                <1>     mov byte [rdi], bl  ;And open the file
    48                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    49 00003654 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    50 00003657 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    51 0000365E 51                  <1>     push rcx    ;Save the procedure to call on stack
    52 0000365F E858DEFFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    53 00003664 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    54 00003665 488D05930C0000      <1>     lea rax, openMain   ;Get EA for open procedure
    55 0000366C 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    56 00003673 7334                <1>     jnc .proceedCall
    57                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    58                              <1> ;                              For Create New, Bad but handled later.
    59                              <1> ;If CF=CY => Path doesnt all exist:
    60                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    61                              <1> ;Now we check if we are creating or opening.
    62 00003675 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    63 00003678 7419                <1>     je .badFile ;Jmp to error if opening file that doesnt exist
    64 0000367A F605(05070000)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    65 00003681 741B                <1>     jz .badPathspec ;If not then exit bad path
    66                              <1>     ;Now check the path is not X:\<NUL>
    67 00003683 8B0D(1E050000)      <1>     mov ecx, dword [buffer1]    ;Get the first four chars for comparison
    68 00003689 30C9                <1>     xor cl, cl
    69 0000368B 81F9003A5C00        <1>     cmp ecx, 005C3A00h  ;If this is a null path, set file not found!
    70 00003691 7516                <1>     jnz .proceedCall    ;Else, proceed.
    71                              <1> .badFile:   ;If trying to open a file that doesnt exit, error so!
    72 00003693 58                  <1>     pop rax
    73 00003694 B802000000          <1>     mov eax, errFnf 
    74 00003699 E95F000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    75                              <1> .badPathspec:   ;If the parent path doesnt exist, error thus.
    76 0000369E 58                  <1>     pop rax
    77 0000369F B803000000          <1>     mov eax, errPnf
    78 000036A4 E954000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    79                              <1> .proceedCall:
    80                              <1> ;If the pathspec exists, recall that for create, we truncate.
    81 000036A9 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    82 000036AB 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    83 000036AE 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    84 000036AF 750B                <1>     jne .callProc   ;Jump if we are creating
    85                              <1>     ;al means openmode here
    86 000036B1 A880                <1>     test al, 80h    ;No Inherit bit set?
    87 000036B3 7407                <1>     jz .callProc
    88 000036B5 247F                <1>     and al, 7Fh     ;Clear this bit
    89 000036B7 B900100000          <1>     mov ecx, devNoInherit
    90                              <1> .callProc:
    91 000036BC 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    92 000036C2 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    93 000036C8 51                  <1>     push rcx    ;Save the device word 
    94 000036C9 FFD3                <1>     call rbx    ;Enter with open mode in 
    95 000036CB 59                  <1>     pop rcx
    96 000036CC 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    97 000036D3 7228                <1>     jc .exitBad2
    98 000036D5 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
    99 000036DA 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   100 000036DE 0FB705(3C070000)    <1>     movzx eax, word [currentHdl]
   101 000036E5 FF15(1F010000)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
   102 000036EB 66C705(3A070000)FF- <1>     mov word [currentNdx], -1       ;Now reset the index back to -1
   102 000036F3 FF                  <1>
   103 000036F4 E90F400000          <1>     jmp extGoodExit ;Save ax and return OK
   104                              <1> .exitBad:
   105 000036F9 FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   106 000036FA 5B                  <1>     pop rbx ;Pop the word from the stack
   107 000036FB EB16                <1>     jmp short .exitBadCommon
   108                              <1> .exitBad2:
   109                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   110 000036FD 488B35(2A070000)    <1>     mov rsi, qword [curHdlPtr]
   111 00003704 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   112 00003707 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
   113 0000370E 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   114                              <1> .exitBadCommon:
   115 00003713 66C705(3A070000)FF- <1>     mov word [currentNdx], -1
   115 0000371B FF                  <1>
   116 0000371C E9F53F0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   117                              <1> 
   118                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   119                              <1> ;Input: bx = file handle to close
   120 00003721 E8AE190000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   121 00003726 0F82EA3F0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   122 0000372C E8F9170000          <1>     call setCurrentSFT  ;Set this as the current SFT
   123 00003731 66813F0100          <1>     cmp word [rdi + sft.wNumHandles], 1 ;If this is last reference to sft
   124 00003736 740A                <1>     je .killHdl ;always kill the handle!
   125                              <1>     ;Else if network file opened as FCB, avoid nuking JFT!
   126 00003738 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   127 0000373C 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   128 0000373E 3C70                <1>     cmp al, netFCBShare
   129 00003740 7408                <1>     je .notNetFCB
   130                              <1> .killHdl:
   131 00003742 E841190000          <1>     call getJFTPtr  ;Remember, bx has handle number
   132 00003747 C607FF              <1>     mov byte [rdi], -1  ;Now free the JFT entry
   133                              <1> .notNetFCB:
   134 0000374A E8FC0F0000          <1>     call closeMain  ;Call close main!
   135 0000374F 0F82C13F0000        <1>     jc extErrExit   ;If an error, exit through error exit
   136 00003755 B8003E0000          <1>     mov eax, 3E00h    ;Return value
   137 0000375A E9A93F0000          <1>     jmp extGoodExit
   138                              <1> 
   139                              <1> readFileHdl:       ;ah = 3Fh, handle function
   140 0000375F 488D35B2100000      <1>     lea rsi, readBytes
   141                              <1> .common:
   142 00003766 E869190000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   143 0000376B 0F82A53F0000        <1>     jc extErrExit   ;Error code in al and exit
   144 00003771 E8B4170000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   145 00003776 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   146 00003778 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   147 0000377E 488915(17040000)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   148 00003785 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   149 00003787 8F05(17040000)      <1>     pop qword [currentDTA]
   150 0000378D 0F82833F0000        <1>     jc extErrExit   ;Error code in al and exit
   151 00003793 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   152 00003795 E9653F0000          <1>     jmp extGoodExit2    ;and exit!
   153                              <1> 
   154                              <1> writeFileHdl:      ;ah = 40h, handle function
   155 0000379A 488D35D3130000      <1>     lea rsi, writeBytes
   156 000037A1 E9C0FFFFFF          <1>     jmp readFileHdl.common
   157                              <1> 
   158                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   159                              <1> ;Here don't allow malformed chars unless it is a network CDS
   160                              <1> ;Allows deleting volume labels.
   161 000037A6 BB16000000          <1>     mov ebx, dirInclusive    ;Search all files, dirs handled later
   162 000037AB F605(02070000)FF    <1>     test byte [dosInvoke], -1
   163 000037B2 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   164 000037B5 880D(FC060000)      <1>     mov byte [searchAttr], cl
   165 000037BB 4889D6              <1>     mov rsi, rdx
   166 000037BE E8633C0000          <1>     call checkPathspecOK
   167 000037C3 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   168 000037C5 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   169                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   170 000037C7 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   171 000037CE 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   172                              <1> .badPath:
   173 000037D0 B805000000          <1>     mov eax, errAccDen
   174 000037D5 E93C3F0000          <1>     jmp extErrExit
   175                              <1> .pathOk:
   176 000037DA 488D3D(1E050000)    <1>     lea rdi, buffer1
   177 000037E1 52                  <1>     push rdx
   178 000037E2 E8D5DCFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   179 000037E7 5A                  <1>     pop rdx
   180 000037E8 0F82283F0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   181                              <1>     ;In the case of a wildcard, recall this will return the first file
   182 000037EE 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   183 000037F5 0F851B3F0000        <1>     jnz extErrExit
   184 000037FB E8400A0000          <1>     call outerDeleteMain
   185 00003800 0F82103F0000        <1>     jc extErrExit
   186 00003806 E9FD3E0000          <1>     jmp extGoodExit
   187                              <1> 
   188                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   189                              <1> ;Input: ecx=0, edx=Position to seek to
   190                              <1> ;ecx may be non-zero for 64-bit IFS but currently DOS does not natively
   191                              <1> ; support them. INT 2Fh filesystems may have a tough time if they wish to
   192                              <1> ; use a 64 bit file pointer... They can try though!
   193                              <1> ;Output: If CF=NC: edx=0, eax=New position of file handle
   194                              <1> ;           Again, if network file, edx = Upper bytes of file hdl!
   195 0000380B E8C4180000          <1>     call getSFTPtr
   196 00003810 0F82003F0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   197 00003816 3C03                <1>     cmp al, 3
   198 00003818 720A                <1>     jb .validFunction
   199 0000381A B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   200 0000381F E9F23E0000          <1>     jmp extErrExit
   201                              <1> .validFunction:
   202 00003824 3C01                <1>     cmp al, 1
   203 00003826 771A                <1>     ja .seekend
   204 00003828 7203                <1>     jb .seekset
   205                              <1> ;Here we are at seekcur, seek from current (signed)
   206 0000382A 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   207                              <1> .seekset:
   208                              <1> ;Seek from the start (unsigned)
   209 0000382D 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   210 00003830 31D2                <1>     xor edx, edx    ;All FAT files have 0 upper 32 bits! Set to 0!
   211                              <1>     ;We return the file position in eax anyway!
   212                              <1> .seekExit:
   213 00003832 E80E3A0000          <1>     call getUserRegs    ;Get user regs in rsi
   214 00003837 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   215 0000383A 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   216 0000383D E9BD3E0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   217                              <1> .seekend:
   218                              <1> ;Here we are at seekend, seek from end (signed)
   219 00003842 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   220 00003848 7505                <1>     jnz .netCheck
   221                              <1> .proceedDisk:
   222 0000384A 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   223 0000384D EBDE                <1>     jmp short .seekset
   224                              <1> .netCheck:
   225 0000384F 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   226 00003855 75F3                <1>     jnz .proceedDisk
   227 00003857 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   228                              <1>     ;Check it's share mode
   229 0000385B 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   230 00003860 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   231 00003865 7407                <1>     je .netSeek
   232 00003867 3D30000000          <1>     cmp eax, denyReadShare
   233 0000386C 75DC                <1>     jne .proceedDisk
   234                              <1> .netSeek:
   235 0000386E B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   236 00003873 CD2F                <1>     int 2Fh
   237 00003875 73BB                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   238 00003877 E99A3E0000          <1>     jmp extErrExit
   239                              <1> 
   240                              <1> 
   241                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   242 0000387C 3C01                <1>     cmp al, 1
   243 0000387E 761F                <1>     jbe .subFuncOk
   244 00003880 B801000000          <1>     mov eax, errInvFnc
   245                              <1> .chmodError:
   246                              <1> ;Call with ax = errorcode
   247 00003885 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   248 0000388C C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   249 00003893 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
   250 0000389A E9773E0000          <1>     jmp extErrExit
   251                              <1> .subFuncOk:
   252 0000389F 4889D6              <1>     mov rsi, rdx
   253 000038A2 89C3                <1>     mov ebx, eax    ;Store function code in bl
   254 000038A4 53                  <1>     push rbx
   255 000038A5 51                  <1>     push rcx
   256 000038A6 E87B3B0000          <1>     call checkPathspecOK
   257 000038AB 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   258                              <1> .badPath:
   259 000038AD 59                  <1>     pop rcx
   260 000038AE 5B                  <1>     pop rbx
   261 000038AF B805000000          <1>     mov eax, errAccDen
   262 000038B4 EBCF                <1>     jmp short .chmodError
   263                              <1> .pathOk:
   264 000038B6 E8453C0000          <1>     call checkPathNet 
   265 000038BB 74F0                <1>     jz .badPath ;Or Net paths
   266 000038BD E81F3C0000          <1>     call scanPathWC
   267 000038C2 72E9                <1>     jc .badPath ;Dont allow wildcards
   268 000038C4 488D3D(1E050000)    <1>     lea rdi, buffer1
   269 000038CB 52                  <1>     push rdx
   270 000038CC C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   271 000038D3 E8E4DBFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   272 000038D8 5A                  <1>     pop rdx
   273 000038D9 59                  <1>     pop rcx
   274 000038DA 5B                  <1>     pop rbx
   275 000038DB 0F82353E0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   276                              <1>     ;In the case of a wildcard, recall this will return the first file
   277 000038E1 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   278 000038E8 759B                <1>     jnz .chmodError
   279                              <1> 
   280 000038EA E8C2380000          <1>     call testCDSNet
   281 000038EF 730C                <1>     jnc .notNet
   282 000038F1 750A                <1>     jnz .notNet ;This type of net ok
   283 000038F3 B805000000          <1>     mov eax, errAccDen
   284 000038F8 E9193E0000          <1>     jmp extErrExit
   285                              <1> .notNet:
   286 000038FD 84DB                <1>     test bl, bl
   287 000038FF 7526                <1>     jnz .setAttribs
   288                              <1>     ;Get attribs here
   289 00003901 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   290 00003907 7412                <1>     jz .getDiskAttribs
   291 00003909 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   292 0000390E CD2F                <1>     int 2Fh
   293 00003910 0F82003E0000        <1>     jc extErrExit
   294 00003916 E9ED3D0000          <1>     jmp extGoodExit
   295                              <1> .getDiskAttribs:
   296 0000391B 0FB605(65060000)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   297 00003922 E9E13D0000          <1>     jmp extGoodExit
   298                              <1> 
   299                              <1> .setAttribs:
   300                              <1>     ;Set attribs here
   301 00003927 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   302 0000392D 7417                <1>     jz .setDiskAttribs
   303 0000392F 0FB7C9              <1>     movzx ecx, cx
   304 00003932 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   305 00003933 B80E110000          <1>     mov eax, 110Eh
   306 00003938 CD2F                <1>     int 2Fh
   307 0000393A 59                  <1>     pop rcx
   308 0000393B 0F82D53D0000        <1>     jc extErrExit
   309 00003941 E9C23D0000          <1>     jmp extGoodExit
   310                              <1> .setDiskAttribs:
   311 00003946 E883080000          <1>     call checkNoOpenHandlesForShareAction
   312 0000394B 730A                <1>     jnc .okToSet
   313 0000394D B820000000          <1>     mov eax, errShrVio
   314 00003952 E9BF3D0000          <1>     jmp extErrExit
   315                              <1> .okToSet:
   316 00003957 E86F3D0000          <1>     call dosCrit1Enter
   317 0000395C E83EEAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   318 00003961 722D                <1>     jc .setErrorNoFlush
   319 00003963 F6C118              <1>     test cl, volLabelFile | directoryFile
   320 00003966 740A                <1>     jz .set
   321 00003968 B805000000          <1>     mov eax, errAccDen
   322 0000396D E91E000000          <1>     jmp .setErrorNoFlush
   323                              <1> .set:
   324 00003972 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   325 00003975 80E518              <1>     and ch, (volLabelFile | directoryFile)    ;Keep these two bits
   326 00003978 08E9                <1>     or cl, ch
   327 0000397A 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   328 0000397D E89ACDFFFF          <1>     call flushAllBuffersForDPB
   329 00003982 720C                <1>     jc .setError
   330 00003984 E84C3D0000          <1>     call dosCrit1Exit
   331 00003989 31C0                <1>     xor eax, eax
   332 0000398B E9783D0000          <1>     jmp extGoodExit
   333                              <1> .setError:
   334                              <1> 
   335                              <1> .setErrorNoFlush:
   336 00003990 E8403D0000          <1>     call dosCrit1Exit
   337 00003995 E97C3D0000          <1>     jmp extErrExit
   338                              <1> 
   339                              <1> duplicateHandle:   ;ah = 45h, handle function
   340                              <1> ;Input: bx = Handle to duplicate
   341                              <1> ;Output: If ok then ax = New handle
   342 0000399A 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   343 0000399D E81B170000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   344                              <1> .duplicateCommon:
   345 000039A2 0F826E3D0000        <1>     jc extErrExit   ;Exit if no space
   346 000039A8 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   347 000039AB 93                  <1>     xchg eax, ebx
   348 000039AC E823170000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   349 000039B1 0F825F3D0000        <1>     jc extErrExit
   350 000039B7 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   351 000039BA 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   352 000039C0 7505                <1>     jnz .netFile
   353 000039C2 E8F0090000          <1>     call openDriverMux
   354                              <1> .netFile:
   355 000039C7 E8BC160000          <1>     call getJFTPtr
   356 000039CC 8A1F                <1>     mov bl, byte [rdi]
   357 000039CE 881E                <1>     mov byte [rsi], bl
   358 000039D0 E9333D0000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   359                              <1> 
   360                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   361                              <1> ;Input: bx = Handle to duplicate
   362                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   363                              <1>     ;First we close cx if it exists
   364 000039D5 0FB7C9              <1>     movzx ecx, cx
   365 000039D8 53                  <1>     push rbx
   366 000039D9 51                  <1>     push rcx
   367 000039DA 89CB                <1>     mov ebx, ecx
   368 000039DC E840FDFFFF          <1>     call closeFileHdl   ;Close handle 
   369 000039E1 5B                  <1>     pop rbx
   370 000039E2 58                  <1>     pop rax
   371 000039E3 E8A0160000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   372 000039E8 EBB8                <1>     jmp short duplicateHandle.duplicateCommon
   373                              <1> 
   374                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   375                              <1> ;Input: cx = Search Attributes, cl only used
   376                              <1> ;       rdx = Ptr to path to file to look for
   377                              <1> ;       al = Document as needing to be 0 for now
   378                              <1> ;Return:
   379                              <1> ;Data in the DTA or error through AX with CF=CY
   380                              <1> ;CAVEATS!
   381                              <1> ;DTA:attribFnd = 40h => Char dev
   382                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   383 000039EA 880D(FC060000)      <1>     mov byte [searchAttr], cl
   384 000039F0 4889D6              <1>     mov rsi, rdx
   385 000039F3 E82E3A0000          <1>     call checkPathspecOK
   386 000039F8 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   387 000039FA 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   388                              <1> .badPath:
   389 000039FC B805000000          <1>     mov eax, errAccDen  ;Gets xlat to errNoFil
   390 00003A01 E9103D0000          <1>     jmp extErrExit
   391                              <1> .pathspecOk:
   392 00003A06 FF35(17040000)      <1>     push qword [currentDTA]
   393 00003A0C 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   394 00003A13 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   395 00003A1A 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   396 00003A21 E896DAFFFF          <1>     call getFilePath
   397                              <1> .findfileExit:
   398 00003A26 8F05(17040000)      <1>     pop qword [currentDTA]
   399 00003A2C 0F82E43C0000        <1>     jc extErrExit
   400 00003A32 488D3D(2F060000)    <1>     lea rdi, dosffblock
   401 00003A39 57                  <1>     push rdi
   402 00003A3A E8DED9FFFF          <1>     call setupFFBlock
   403 00003A3F 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   404 00003A40 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
   405 00003A47 B92B000000          <1>     mov ecx, ffBlock_size
   406 00003A4C F3A4                <1>     rep movsb   ;Copy the whole block. 
   407                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   408 00003A4E 31C0                <1>     xor eax, eax    ;Return value
   409 00003A50 E9B33C0000          <1>     jmp extGoodExit ;Exit well
   410                              <1> 
   411                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   412                              <1> ;Input: DTA has the find first block from the previous search
   413 00003A55 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
   414 00003A5C 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   415 00003A63 B92B000000          <1>     mov ecx, ffBlock_size
   416 00003A68 F3A4                <1>     rep movsb
   417 00003A6A FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
   418 00003A70 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   419 00003A77 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   420 00003A7E E86DD5FFFF          <1>     call findNextMain
   421 00003A83 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   422                              <1> 
   423                              <1> renameFile:        ;ah = 56h
   424                              <1> ;Input: rdx -> Filespec to rename
   425                              <1> ;       rdi -> New filespec
   426                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   427 00003A85 4889D6              <1>     mov rsi, rdx
   428 00003A88 BB16000000          <1>     mov ebx, dirInclusive
   429 00003A8D F605(02070000)FF    <1>     test byte [dosInvoke], -1
   430 00003A94 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   431 00003A97 880D(FC060000)      <1>     mov byte [searchAttr], cl
   432                              <1>     ;Step 0, verify both paths provided are valid
   433 00003A9D E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   434 00003AA2 7249                <1>     jc .accDenError
   435 00003AA4 56                  <1>     push rsi
   436 00003AA5 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   437 00003AA8 E84A000000          <1>     call .renamePathCheck
   438 00003AAD 5E                  <1>     pop rsi
   439 00003AAE 723D                <1>     jc .accDenError
   440                              <1>     ;Now we canonicalise the filenames to make life easy
   441 00003AB0 56                  <1>     push rsi
   442 00003AB1 4889FE              <1>     mov rsi, rdi
   443 00003AB4 488D3D(9E050000)    <1>     lea rdi, buffer2
   444 00003ABB E87CDAFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   445 00003AC0 5E                  <1>     pop rsi
   446 00003AC1 722A                <1>     jc .accDenError
   447                              <1>     ;Now test if first file exists.
   448 00003AC3 FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   449 00003AC9 8F05(26060000)      <1>     pop qword [fname2Ptr]
   450 00003ACF 488D3D(1E050000)    <1>     lea rdi, buffer1
   451 00003AD6 E861DAFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   452 00003ADB 7210                <1>     jc .accDenError 
   453 00003ADD E882030000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   454 00003AE2 0F822E3C0000        <1>     jc extErrExit
   455 00003AE8 E91B3C0000          <1>     jmp extGoodExit
   456                              <1> .accDenError:
   457 00003AED B805000000          <1>     mov eax, errAccDen
   458 00003AF2 E91F3C0000          <1>     jmp extErrExit
   459                              <1> .renamePathCheck:
   460                              <1> ;Checks if the pathspec in rsi is OK
   461 00003AF7 56                  <1>     push rsi
   462 00003AF8 57                  <1>     push rdi
   463 00003AF9 E828390000          <1>     call checkPathspecOK
   464 00003AFE 5F                  <1>     pop rdi
   465 00003AFF 5E                  <1>     pop rsi
   466 00003B00 730D                <1>     jnc .pathOk     ;Path ok 
   467 00003B02 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   468                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   469 00003B04 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   470 00003B0B 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   471                              <1> .badPath:
   472 00003B0D F9                  <1>     stc
   473                              <1>     return
    13                              <2> %%_ret:
    14 00003B0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   474                              <1> .pathOk:
   475 00003B0F F8                  <1>     clc
   476                              <1>     return
    13                              <2> %%_ret:
    14 00003B10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   477                              <1> 
   478                              <1> getSetFileDateTime: ;ah = 57h
   479 00003B11 3C01                <1>     cmp al, 1
   480 00003B13 760A                <1>     jbe .oksubfun
   481 00003B15 B801000000          <1>     mov eax, errInvFnc
   482 00003B1A E9F73B0000          <1>     jmp extErrExit
   483                              <1> .oksubfun:
   484 00003B1F E8B0150000          <1>     call getSFTPtr  ;Preserves al unless error returned
   485 00003B24 0F82EC3B0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   486 00003B2A 3C01                <1>     cmp al, 1
   487 00003B2C 7426                <1>     je .setTimeDate
   488                              <1>     ;Here we get the Time/Date
   489 00003B2E E8983B0000          <1>     call dosCrit1Enter
   490 00003B33 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   491 00003B37 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   492 00003B3B E8953B0000          <1>     call dosCrit1Exit
   493 00003B40 E800370000          <1>     call getUserRegs
   494 00003B45 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   495 00003B49 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   496 00003B4D 31C0                <1>     xor eax, eax
   497 00003B4F E9B43B0000          <1>     jmp extGoodExit
   498                              <1> .setTimeDate:
   499                              <1>     ;Here we set the Time/Date
   500 00003B54 E8723B0000          <1>     call dosCrit1Enter
   501 00003B59 66894F13            <1>     mov word [rdi + sft.wTime], cx
   502 00003B5D 66895715            <1>     mov word [rdi + sft.wDate], dx
   503 00003B61 31C0                <1>     xor eax, eax
   504 00003B63 FF15(2F010000)      <1>     call qword [updateDirShare]
   505                              <1>     ;Clear the flag to indicate that the dir needs to be updated and dont 
   506                              <1>     ; further change the file time since we have manually overridden it 
   507                              <1>     ; with the time specified
   508 00003B69 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;Clear flag to sync
   509 00003B6F 66814F050040        <1>     or word [rdi + sft.wDeviceInfo], blokNoDTonClose    ;Force it to this time
   510 00003B75 E85B3B0000          <1>     call dosCrit1Exit
   511 00003B7A 31C0                <1>     xor eax, eax
   512 00003B7C E9873B0000          <1>     jmp extGoodExit
   513                              <1> 
   514                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   515                              <1> ;Uses the clock to do it's bidding
   516                              <1> ;cx = file attribute 
   517                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   518                              <1> ;       filename
   519 00003B81 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   520 00003B86 740A                <1>     jz .validAttribs
   521 00003B88 B805000000          <1>     mov eax, errAccDen
   522 00003B8D E9843B0000          <1>     jmp extErrExit
   523                              <1> .validAttribs:
   524 00003B92 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   525 00003B96 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   526 00003B99 B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   527 00003B9E 31C0                <1>     xor eax, eax
   528 00003BA0 4889D7              <1>     mov rdi, rdx
   529 00003BA3 F2AE                <1>     repne scasb
   530 00003BA5 85C9                <1>     test ecx, ecx
   531 00003BA7 750A                <1>     jnz .nullFnd
   532                              <1>     ;Bad path
   533 00003BA9 B803000000          <1>     mov eax, errPnf
   534 00003BAE E9633B0000          <1>     jmp extErrExit
   535                              <1> .nullFnd:
   536 00003BB3 48FFCF              <1>     dec rdi
   537 00003BB6 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   538 00003BBA E8A7370000          <1>     call swapPathSeparator
   539 00003BBF 7403                <1>     jz .pathsepFnd
   540                              <1>     ;If no pathsep found, force one at rdi
   541 00003BC1 B05C                <1>     mov al, "\"
   542 00003BC3 AA                  <1>     stosb
   543                              <1> .pathsepFnd:
   544 00003BC4 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   545                              <1> .fileCreateLoop:
   546 00003BC7 55                  <1>     push rbp
   547 00003BC8 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   548 00003BCD 5D                  <1>     pop rbp
   549 00003BCE 0FB7C1              <1>     movzx eax, cx
   550 00003BD1 0FB7D2              <1>     movzx edx, dx
   551 00003BD4 C1E010              <1>     shl eax, 10h
   552 00003BD7 09D0                <1>     or eax, edx  ;Add the bits of dx too
   553 00003BD9 E831000000          <1>     call .writeNybbles
   554 00003BDE 31C0                <1>     xor eax, eax
   555 00003BE0 AA                  <1>     stosb   ;Store terminating null
   556 00003BE1 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   557 00003BE4 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   558 00003BE7 55                  <1>     push rbp
   559 00003BE8 E85C000000          <1>     call createNewFile
   560 00003BED 5D                  <1>     pop rbp
   561 00003BEE 0F83143B0000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   562 00003BF4 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   563 00003BFB 3D05000000          <1>     cmp eax, errAccDen
   564 00003C00 74C5                <1>     je .fileCreateLoop
   565 00003C02 3D50000000          <1>     cmp eax, errFilExist
   566 00003C07 74BE                <1>     je .fileCreateLoop
   567 00003C09 F9                  <1>     stc
   568 00003C0A E9073B0000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   569                              <1> .writeNybbles:
   570                              <1> ;Write the nybbles of eax at rdi
   571 00003C0F B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   572                              <1> .wnLp:
   573 00003C14 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   574 00003C17 50                  <1>     push rax
   575 00003C18 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   576 00003C1D 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   577 00003C22 3D39000000          <1>     cmp eax, '9'
   578 00003C27 7605                <1>     jbe .notExtDigit
   579 00003C29 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   580                              <1> .notExtDigit:
   581 00003C2E AA                  <1>     stosb   ;Store the digit
   582 00003C2F 58                  <1>     pop rax
   583 00003C30 FFC9                <1>     dec ecx
   584 00003C32 75E0                <1>     jnz .wnLp
   585                              <1>     return
    13                              <2> %%_ret:
    14 00003C34 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   586                              <1> 
   587                              <1> .uniqueTimeGet:
   588 00003C35 E870F3FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   589 00003C3A 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   590 00003C41 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   591                              <1>     return
    13                              <2> %%_ret:
    14 00003C48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   592                              <1> 
   593                              <1> createNewFile:     ;ah = 5Bh
   594 00003C49 51                  <1>     push rcx    ;Save file attributes on stack
   595 00003C4A 488D0DC4070000      <1>     lea rcx, createNewMain
   596 00003C51 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with dir (handled later)
   597 00003C58 E99FF9FFFF          <1>     jmp openFileHdl.openCommon
   598                              <1> 
   599                              <1> lockUnlockFile:    ;ah = 5Ch
   600                              <1> ;ah = 5Ch
   601                              <1> ;al = subfunction
   602                              <1> ;       00h lock region of file
   603                              <1> ;       01h unlock region of file
   604                              <1> ;ebx = file handle
   605                              <1> ;ecx = start offset of region within file
   606                              <1> ;edi = length of region in bytes
   607 00003C5D 3C01                <1>     cmp al, 1
   608 00003C5F 7757                <1>     ja .badFunction
   609 00003C61 57                  <1>     push rdi
   610 00003C62 E889140000          <1>     call derefSFTPtr
   611 00003C67 730B                <1>     jnc .validHdl
   612 00003C69 58                  <1>     pop rax ;Discard the qword on the stack
   613 00003C6A B806000000          <1>     mov eax, errBadHdl
   614 00003C6F E9A23A0000          <1>     jmp extErrExit
   615                              <1> .validHdl:
   616 00003C74 84C0                <1>     test al, al ;Check if al = 0
   617 00003C76 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   618 00003C77 7424                <1>     jz .lockFileRegion
   619 00003C79 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   620 00003C7F 740B                <1>     jz .unlockShare ;Jump if a local file only
   621 00003C81 50                  <1>     push rax
   622 00003C82 B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   623 00003C87 CD2F                <1>     int 2Fh
   624 00003C89 5B                  <1>     pop rbx
   625 00003C8A EB06                <1>     jmp short .exitSelect
   626                              <1> .unlockShare:
   627 00003C8C FF15(F7000000)      <1>     call qword [unlockFileShare]    ;Call share hook
   628                              <1> .exitSelect:
   629 00003C92 0F827E3A0000        <1>     jc extErrExit
   630 00003C98 E96B3A0000          <1>     jmp extGoodExit
   631                              <1> .lockFileRegion:
   632 00003C9D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   633 00003CA3 740B                <1>     jz .lockShare   ;Jump if a local file only
   634 00003CA5 50                  <1>     push rax
   635 00003CA6 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   636 00003CAB CD2F                <1>     int 2Fh
   637 00003CAD 5B                  <1>     pop rbx
   638 00003CAE EBE2                <1>     jmp short .exitSelect
   639                              <1> .lockShare:
   640 00003CB0 FF15(EF000000)      <1>     call qword [lockFileShare]  ;Call share hook
   641 00003CB6 EBDA                <1>     jmp short .exitSelect
   642                              <1> .badFunction:
   643 00003CB8 B801000000          <1>     mov eax, errInvFnc
   644 00003CBD 668905(0B040000)    <1>     mov word [errorExCde], ax
   645 00003CC4 E94D3A0000          <1>     jmp extErrExit
   646                              <1> 
   647                              <1> setHandleCount:    ;ah = 67h
   648                              <1> ;Input: bx = Size of new file handle table for process
   649                              <1> ;Output: CF=NC -> Ok to make more handles
   650                              <1> ;        CF=CY -> ax = Error code
   651                              <1> ;Five cases to consider:
   652                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   653                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   654                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   655                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   656                              <1> ;   Special case below, cannot be enacted directly by caller.
   657                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   658 00003CC9 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   659 00003CCC 488B2D(1F040000)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   660 00003CD3 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   661 00003CD7 7765                <1>     ja short .moreHdlsReq
   662 00003CD9 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   663 00003CDE 771A                <1>     ja short .reduceExternal
   664                              <1>     ;Here if 20 handles or less requested
   665 00003CE0 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   666 00003CE6 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   667 00003CE8 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   668 00003CEA 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   669                              <1> .exitGood:
   670 00003CF0 E9133A0000          <1>     jmp extGoodExit
   671                              <1> .exitBad:
   672 00003CF5 E91C3A0000          <1>     jmp extErrExit
   673                              <1> .reduceExternal:
   674                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   675                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   676                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   677                              <1> ; and failing that, it will free it and then allocate a new block.
   678 00003CFA 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   679 00003CFE E8E9000000          <1>     call .checkOpenHandles
   680 00003D03 72F0                <1>     jc short .exitBad
   681                              <1>     ;Recall ebx has the numebr of handles here
   682 00003D05 E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   683 00003D0A 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   684 00003D0E EBE0                <1>     jmp short .exitGood
   685                              <1> .reduceFree:
   686                              <1> ;Entered once we know that we have an external block
   687                              <1> ;Now we close all handles above JFT size
   688 00003D10 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   689 00003D14 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   690 00003D17 E8D0000000          <1>     call .checkOpenHandles
   691 00003D1C 72D7                <1>     jc short .exitBad
   692 00003D1E BB14000000          <1>     mov ebx, dfltJFTsize
   693 00003D23 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   694                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   695 00003D25 E8B9000000          <1>     call .copyBlock
   696                              <1>     ;Now we can free the old block
   697 00003D2A 4989F0              <1>     mov r8, rsi
   698 00003D2D 53                  <1>     push rbx
   699 00003D2E E8EE1A0000          <1>     call freeMemory
   700 00003D33 5B                  <1>     pop rbx
   701 00003D34 72BF                <1>     jc short .exitBad
   702 00003D36 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   703 00003D3A 31C0                <1>     xor eax, eax
   704                              <1> .exitGood2:
   705 00003D3C EBB2                <1>     jmp short .exitGood
   706                              <1> .moreHdlsReq:
   707 00003D3E 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   708 00003D44 7507                <1>     jne short .okToExpand
   709 00003D46 B801000000          <1>     mov eax, errInvFnc
   710                              <1> .exitBad2:
   711 00003D4B EBA8                <1>     jmp short .exitBad
   712                              <1> .okToExpand:
   713                              <1> ;Need to check if we are external and reallocating. 
   714                              <1> ;   If we are, can we realloc or do we need to free and save?
   715 00003D4D 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   716 00003D53 762E                <1>     jbe short .moreFromJFT
   717 00003D55 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   718 00003D59 E83C000000          <1>     call .reallocBlock
   719 00003D5E 7390                <1>     jnc short .exitGood
   720 00003D60 E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   721 00003D65 728E                <1>     jc short .exitBad
   722 00003D67 4989F0              <1>     mov r8, rsi ;Free the source block
   723 00003D6A 53                  <1>     push rbx
   724 00003D6B 57                  <1>     push rdi    ;Save the new pointer here
   725 00003D6C 55                  <1>     push rbp
   726 00003D6D E8AF1A0000          <1>     call freeMemory
   727 00003D72 5D                  <1>     pop rbp
   728 00003D73 5F                  <1>     pop rdi
   729 00003D74 5B                  <1>     pop rbx
   730 00003D75 7317                <1>     jnc short .freeOk ;Free'd the original block
   731 00003D77 50                  <1>     push rax    ;Save error code on stack
   732 00003D78 4989F8              <1>     mov r8, rdi ;Free the new block
   733 00003D7B E8A11A0000          <1>     call freeMemory
   734 00003D80 58                  <1>     pop rax
   735 00003D81 EBC8                <1>     jmp short .exitBad2
   736                              <1> .moreFromJFT:
   737 00003D83 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   738 00003D87 E826000000          <1>     call .getBlock
   739 00003D8C 72BD                <1>     jc short .exitBad2
   740                              <1> .freeOk:
   741 00003D8E 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   742 00003D92 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   743 00003D96 31C0                <1>     xor eax, eax
   744 00003D98 EBA2                <1>     jmp short .exitGood2
   745                              <1> .reallocBlock:
   746                              <1> ;Input:
   747                              <1> ;   rsi -> Source block to reallocate
   748                              <1> ;   ebx = Number of handles
   749                              <1> ;   rbp -> Current PSP
   750                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   751                              <1> ;                 ebx = Number of handles
   752                              <1> ;        CF=CY => Error, EAX has error code
   753 00003D9A 56                  <1>     push rsi ;Save external pointer on stack
   754 00003D9B 53                  <1>     push rbx    ;Save number of handles on stack
   755 00003D9C 55                  <1>     push rbp
   756 00003D9D 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   757 00003DA3 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   758 00003DA6 4989F0              <1>     mov r8, rsi
   759 00003DA9 E87B1B0000          <1>     call reallocMemory
   760 00003DAE 5D                  <1>     pop rbp
   761 00003DAF 5B                  <1>     pop rbx
   762 00003DB0 5E                  <1>     pop rsi ;Get external pointer back in rsi
   763                              <1>     return
    13                              <2> %%_ret:
    14 00003DB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   764                              <1> .getBlock:
   765                              <1> ;rsi -> Source block for copy 
   766                              <1> ;ebx = Number of new handles
   767                              <1> ;Output: rsi and ebx as before
   768                              <1> ;        rdi -> New block
   769                              <1> ;IF CF=CY, bad exit
   770 00003DB2 53                  <1>     push rbx    ;bx has the number of handles we want
   771 00003DB3 56                  <1>     push rsi
   772 00003DB4 55                  <1>     push rbp
   773 00003DB5 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   774 00003DBB C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   775 00003DBE 89D9                <1>     mov ecx, ebx
   776 00003DC0 C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   777 00003DC3 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   778 00003DC4 E854180000          <1>     call allocateMemory ;Allocate memory 
   779 00003DC9 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   780 00003DCA 5D                  <1>     pop rbp ;Get the PSP pointer back
   781 00003DCB 5E                  <1>     pop rsi ;Get the source pointer back
   782 00003DCC 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   783                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003DCD 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003DCF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   784 00003DD0 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   785 00003DD3 57                  <1>     push rdi
   786 00003DD4 31C0                <1>     xor eax, eax
   787 00003DD6 FFC8                <1>     dec eax
   788 00003DD8 F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   789 00003DDA 5F                  <1>     pop rdi
   790 00003DDB 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   791 00003DDD E801000000          <1>     call .copyBlock ;Copy all the handles over
   792                              <1>     return
    13                              <2> %%_ret:
    14 00003DE2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .copyBlock:
   794                              <1> ;Input: rsi -> Source block
   795                              <1> ;       rdi -> Destination block
   796                              <1> ;       ecx = Number of handles to copy
   797 00003DE3 56                  <1>     push rsi
   798 00003DE4 57                  <1>     push rdi
   799 00003DE5 51                  <1>     push rcx
   800 00003DE6 F3A4                <1>     rep movsb
   801 00003DE8 59                  <1>     pop rcx
   802 00003DE9 5F                  <1>     pop rdi
   803 00003DEA 5E                  <1>     pop rsi
   804                              <1>     return
    13                              <2> %%_ret:
    14 00003DEB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   805                              <1> .checkOpenHandles:
   806                              <1> ;Checks for open handles in the range that is to be freed.
   807                              <1> ;If any found, error exit
   808                              <1> ;Input: rsi -> Where to start searching
   809 00003DEC 56                  <1>     push rsi
   810 00003DED 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   811                              <1> .cohLoop:
   812 00003DF1 803EFF              <1>     cmp byte [rsi], -1
   813 00003DF4 7509                <1>     jne .checkOpenHandlesBadExit
   814 00003DF6 48FFC6              <1>     inc rsi
   815 00003DF9 FFC9                <1>     dec ecx
   816 00003DFB 75F4                <1>     jnz .cohLoop
   817 00003DFD 5E                  <1>     pop rsi
   818                              <1>     return
    13                              <2> %%_ret:
    14 00003DFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   819                              <1> .checkOpenHandlesBadExit:
   820 00003DFF B804000000          <1>     mov eax, errNhl
   821 00003E04 F9                  <1>     stc
   822 00003E05 5E                  <1>     pop rsi
   823                              <1>     return
    13                              <2> %%_ret:
    14 00003E06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   824                              <1> 
   825                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   826                              <1>     ;Input: bx = File to flush
   827 00003E07 E8C8120000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   828 00003E0C 0F8204390000        <1>     jc extErrExit
   829 00003E12 E813110000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   830                              <1>     ;Now we check if the device is a char, disk or net file and commit
   831 00003E17 E811000000          <1>     call commitMain
   832 00003E1C 0F82F4380000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   833                              <1> .exitOk:
   834 00003E22 30C0                <1>     xor al, al
   835 00003E24 E81C340000          <1>     call getUserRegs
   836 00003E29 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   837                              <1>     return
    13                              <2> %%_ret:
    14 00003E2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   838                              <1> 
   839                              <1> ;-----------------------------------:
   840                              <1> ;       Main File IO Routines       :
   841                              <1> ;-----------------------------------:
   842                              <1> commitMain:
   843                              <1> ;Commits the current SFT 
   844 00003E2D E800110000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   845 00003E32 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
   846 00003E36 F7C3C0000000        <1>     test ebx, devCharDev | blokFileNoFlush
   847                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003E3C 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003E3E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   848 00003E3F F7C300800000        <1>     test ebx, devRedirDev
   849 00003E45 7408                <1>     jz .notNet
   850                              <1>     ;Commit file net redir call and exit
   851 00003E47 B807110000          <1>     mov eax, 1107h
   852 00003E4C CD2F                <1>     int 2Fh
   853                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003E4E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   854                              <1> .notNet:
   855 00003E4F E877380000          <1>     call dosCrit1Enter
   856 00003E54 E8B7E5FFFF          <1>     call updateSFTDateTimeFields    ;Update the SFT Time fields
   857 00003E59 B8FFFFFFFF          <1>     mov eax, -1         ;Set a "large" count for open handles
   858 00003E5E E81B090000          <1>     call flushFile      ;Now file gets flushed and exit critical section
   859                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003E63 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   860                              <1>     
   861                              <1> renameMain:
   862                              <1> ;Now, creates a special find first block for the source file
   863                              <1> ; that is in curDirCopy. Then we build a search pattern for the new name, 
   864                              <1> ; following wildcard rules sourcing from the filespec in the special find first 
   865                              <1> ; block. 
   866                              <1> ;Then we search for that file name specifically (again), replacing 
   867                              <1> ; the filename portion of the destination buffer. If it exists or the 
   868                              <1> ; filename is a char device, we crap out. If it doesnt exist, we create
   869                              <1> ; the new directory entry and delete the original file. 
   870                              <1> ;Input:
   871                              <1> ; filenamePtr1 -> Source path + filename pattern
   872                              <1> ; filenamePtr2 -> New path + filename pattern
   873                              <1> ; workingCDS -> CDS for drive we are considering (set by first pathspec)
   874                              <1> ; searchAttr = Set to search attributes (inclusive or by request if netinvoke)
   875 00003E64 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   876 00003E6B E841330000          <1>     call testCDSNet ;CF=NC => Not net
   877 00003E70 7308                <1>     jnc .notNet
   878 00003E72 B811110000          <1>     mov eax, 1111h
   879 00003E77 CD2F                <1>     int 2Fh
   880                              <1>     return
    13                              <2> %%_ret:
    14 00003E79 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   881                              <1> .notNet:
   882                              <1> ;First check if both drives are on the same disk
   883 00003E7A 8A05(1E050000)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   884 00003E80 8A25(9E050000)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   885 00003E86 38E0                <1>     cmp al, ah
   886 00003E88 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   887 00003E8A B811000000          <1>     mov eax, errDevUnk
   888 00003E8F F9                  <1>     stc
   889                              <1>     return
    13                              <2> %%_ret:
    14 00003E90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   890                              <1> .sameDrive:
   891                              <1> ;Now we check if either pathsepc is simply X:\,0
   892                              <1> ; If they are, return fail as we cannot rename the root dir
   893 00003E91 E835380000          <1>     call dosCrit1Enter
   894 00003E96 8B05(1E050000)      <1>     mov eax, dword [buffer1]
   895 00003E9C 30C0                <1>     xor al, al
   896 00003E9E 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   897 00003EA3 750B                <1>     jne .checkpath2
   898                              <1> .accDen:
   899 00003EA5 B805000000          <1>     mov eax, errAccDen
   900                              <1> .errorExit:
   901 00003EAA F9                  <1>     stc
   902 00003EAB E9D3020000          <1>     jmp .exit2
   903                              <1> .checkpath2:
   904 00003EB0 8B05(9E050000)      <1>     mov eax, dword [buffer2]
   905 00003EB6 30C0                <1>     xor al, al
   906 00003EB8 3D003A5C00          <1>     cmp eax, 005C3A00h
   907 00003EBD 74E6                <1>     je .accDen  ;If this is the root, exit access denied
   908                              <1>     ;Now ensure hte two paths are not equal
   909 00003EBF 488D35(1E050000)    <1>     lea rsi, buffer1
   910 00003EC6 488D3D(9E050000)    <1>     lea rdi, buffer2
   911 00003ECD E828350000          <1>     call compareFileNames
   912 00003ED2 74D1                <1>     jz .accDen
   913                              <1> ;Now we find first the source file
   914 00003ED4 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
   915 00003EDB 4889F7              <1>     mov rdi, rsi
   916 00003EDE E894D6FFFF          <1>     call getFilePathNoCanon    ;Get the path for the file to delete
   917 00003EE3 0F829A020000        <1>     jc .exit2    ;Return with CF=CY if file doesn't exist
   918 00003EE9 488D35(5A060000)    <1>     lea rsi, curDirCopy
   919 00003EF0 488D3D(BD070000)    <1>     lea rdi, renameDir
   920 00003EF7 B904000000          <1>     mov ecx, fatDirEntry_size/8
   921 00003EFC F348A5              <1>     rep movsq   ;Copy directory over
   922 00003EFF 488D3D(92070000)    <1>     lea rdi, renameFFBlk
   923 00003F06 E812D5FFFF          <1>     call setupFFBlock   ;Need this to save the dir entry cluster/sector/offset 
   924                              <1>     ;Now we check this path, if it is a DIR, ensure it is not the current
   925                              <1>     ; dir for any CDS.
   926 00003F0B F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   927 00003F12 7591                <1>     jnz .accDen ;Cant rename a char file!
   928 00003F14 F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
   929 00003F1B 7447                <1>     jz .notDirCheck
   930 00003F1D 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]
   931 00003F24 57                  <1>     push rdi
   932 00003F25 E898340000          <1>     call strlen ;Get asciiz length in ecx
   933 00003F2A 5B                  <1>     pop rbx
   934 00003F2B FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
   935 00003F2D 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr]
   936 00003F34 0FB615(78000000)    <1>     movzx edx, byte [lastdrvNum]
   937                              <1> .dirCheck:
   938 00003F3B 4889DF              <1>     mov rdi, rbx
   939 00003F3E 51                  <1>     push rcx    ;Save the char count to check!
   940 00003F3F 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
   941 00003F40 F3A6                <1>     repe cmpsb  ;Compare while they are equal
   942 00003F42 AC                  <1>     lodsb   ;Get the last char to check in al
   943 00003F43 5E                  <1>     pop rsi ;Put rsi back to the start of the string
   944 00003F44 59                  <1>     pop rcx
   945 00003F45 7512                <1>     jne .neqDir
   946                              <1>     ;Instead of failing, if not join, simply reset that CDS entry to root.
   947 00003F47 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
   948 00003F49 7404                <1>     je .curDirChangeErr
   949 00003F4B 84C0                <1>     test al, al
   950 00003F4D 750A                <1>     jne .neqDir ;Proceed as normal if not null
   951                              <1> .curDirChangeErr:
   952                              <1>     ;Here we are trying to change a current directory. Fail it!
   953                              <1>     ;This is (DOS 5.0+/Windows)-like behaviour but its sensible and what
   954                              <1>     ; we initially had programmed in (with access denied error instead).
   955 00003F4F B810000000          <1>     mov eax, errDelCD   ;This is a more descriptive error.
   956 00003F54 E951FFFFFF          <1>     jmp .errorExit
   957                              <1> .neqDir:
   958 00003F59 4881C65F000000      <1>     add rsi, cds_size   ;Goto next CDS
   959 00003F60 FFCA                <1>     dec edx
   960 00003F62 75D7                <1>     jnz .dirCheck
   961                              <1> .notDirCheck:
   962                              <1>     ;Now use FFBlock to temp swap out the filename with the source pattern
   963 00003F64 B9FFFFFFFF          <1>     mov ecx, -1    ;Just a large number to search
   964 00003F69 31C0                <1>     xor eax, eax
   965 00003F6B 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]
   966 00003F72 F2AE                <1>     repne scasb   ;Search for terminating null
   967 00003F74 FD                  <1>     std ;Go backwards now, to find the path sep
   968 00003F75 B05C                <1>     mov al, "\"
   969 00003F77 F2AE                <1>     repne scasb   ;Now rsi points one before
   970 00003F79 FC                  <1>     cld ;Go normal ways now
   971 00003F7A 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
   972 00003F81 57                  <1>     push rdi
   973 00003F82 4889FE              <1>     mov rsi, rdi
   974 00003F85 488D3D(E5060000)    <1>     lea rdi, wcdFcbName
   975 00003F8C E804D4FFFF          <1>     call asciiToFCB ;Copy the search pattern to wcdFcbName
   976 00003F91 5F                  <1>     pop rdi
   977 00003F92 57                  <1>     push rdi    ;Save rdi on stack again
   978 00003F93 488D35(B0070000)    <1>     lea rsi, qword [renameFFBlk + ffBlock.asciizName]
   979                              <1>     ;Copy the asciiz name (including terminating null) to pathspec
   980 00003F9A 48A5                <1>     movsq
   981 00003F9C A5                  <1>     movsd
   982 00003F9D A4                  <1>     movsb   ;This is a terminating null if a full 8.3 filename
   983 00003F9E 5F                  <1>     pop rdi ;rdi points to first char position
   984 00003F9F E82A020000          <1>     call checkNoOpenHandlesForShareAction   ;Now do this, all regs saved!
   985 00003FA4 0F8200FFFFFF        <1>     jc .errorExit   ;Propagate the share error code
   986                              <1>     ;Else return the pattern back to its original position
   987 00003FAA 488D35(E5060000)    <1>     lea rsi, wcdFcbName ;rsi -> FCBified pattern, rdi -> First char for name
   988 00003FB1 E827D4FFFF          <1>     call FCBToAsciiz
   989                              <1>     ;Delete the original directory entry
   990 00003FB6 E8E4E3FFFF          <1>     call getDiskDirectoryEntry  ;Vars were setup in getFilePathNoCanon call
   991                              <1>     ;rsi points to the file entry
   992 00003FBB 8A05(08070000)      <1>     mov al, byte [delChar]
   993 00003FC1 8806                <1>     mov byte [rsi], al
   994 00003FC3 E8C9C8FFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
   995                              <1> 
   996                              <1>     ;Now we use the destination filename pattern to build the new filename
   997 00003FC8 488B3D(26060000)    <1>     mov rdi, qword [fname2Ptr]  ;Get the destination path ptr in rdi
   998 00003FCF 31C0                <1>     xor eax, eax
   999 00003FD1 B943000000          <1>     mov ecx, 67
  1000 00003FD6 F2AE                <1>     repne scasb   ;Find the null terminator of the destination path
  1001                              <1> .findPattern:
  1002 00003FD8 48FFCF              <1>     dec rdi
  1003 00003FDB 803F5C              <1>     cmp byte [rdi], "\" ;Is this a pathsep?
  1004 00003FDE 75F8                <1>     jne .findPattern
  1005                              <1> ;rdi points to the pathseparator, unless it is the root pathsep
  1006 00003FE0 C605(FE060000)00    <1>     mov byte [fileFDflg], 0 ;Clear this byte
  1007 00003FE7 807FFF3A            <1>     cmp byte [rdi - 1], ":"
  1008 00003FEB 750D                <1>     jne .notRoot
  1009                              <1>     ;The root dir always exists on a volume so can skip the check.
  1010 00003FED 48FFC7              <1>     inc rdi ;Goto the first char of the filename
  1011 00003FF0 57                  <1>     push rdi
  1012 00003FF1 800D(FE060000)02    <1>     or byte [fileFDflg], 2  ;Bit 2 means ROOT DIR FILE
  1013 00003FF8 EB29                <1>     jmp short .skipCheck
  1014                              <1> .notRoot:
  1015 00003FFA AA                  <1>     stosb   ;Store a null over the "\" and inc rdi to char one of pattern
  1016 00003FFB 57                  <1>     push rdi    ;Push the new name pattern portion ptr in var
  1017                              <1>     ;Now check if the parent directory exists for the destination
  1018 00003FFC 57                  <1>     push rdi    ;Save the ptr to the first char of the pathsep
  1019 00003FFD FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Preserve original source buffer
  1020 00004003 488D35(9E050000)    <1>     lea rsi, buffer2
  1021 0000400A 4889F7              <1>     mov rdi, rsi
  1022 0000400D E85ED5FFFF          <1>     call getDirPathNoCanon ;We are searching for a directory ONLY
  1023 00004012 8F05(1E060000)      <1>     pop qword [fname1Ptr]
  1024 00004018 5F                  <1>     pop rdi
  1025 00004019 0F826F010000        <1>     jc .badExit    ;Error if the parent dir doesnt exist
  1026 0000401F C647FF5C            <1>     mov byte [rdi - 1], "\" ;Replace the pathseparator
  1027                              <1> .skipCheck:
  1028                              <1>     ;rdi now points to the first char of the pattern
  1029 00004023 4889FE              <1>     mov rsi, rdi
  1030 00004026 488D3D(E5060000)    <1>     lea rdi, wcdFcbName
  1031 0000402D E863D3FFFF          <1>     call asciiToFCB ;Convert the asciiz name to FCB format
  1032                              <1>     ;Ensure the destination pattern is not all question marks
  1033 00004032 813D(E5060000)3F3F- <1>     cmp dword [wcdFcbName], "????"
  1033 0000403A 3F3F                <1>
  1034 0000403C 7524                <1>     jne .validRenPattern
  1035 0000403E 813D(E9060000)3F3F- <1>     cmp dword [wcdFcbName + 4], "????"
  1035 00004046 3F3F                <1>
  1036 00004048 7518                <1>     jne .validRenPattern
  1037 0000404A 66813D(ED060000)3F- <1>     cmp word [wcdFcbName + 8], "??"
  1037 00004052 3F                  <1>
  1038 00004053 750D                <1>     jne .validRenPattern
  1039 00004055 803D(EF060000)3F    <1>     cmp byte [wcdFcbName + 10], "?"
  1040 0000405C 0F8427010000        <1>     je .bad ;Access denied buddy ol' pal
  1041                              <1> .validRenPattern:
  1042                              <1>     ;curDirCopy has information for the destination directory file we will 
  1043                              <1>     ; write to. The cluster points to the directory file itself to search in
  1044                              <1>     ;Each filename we create must be searched for to ensure it doesnt exist
  1045                              <1>     ;Make new fname in fcbName from asciizname in renameDir
  1046 00004062 488D35(BD070000)    <1>     lea rsi, renameDir  ;Copy the source filename over
  1047 00004069 488D3D(D9060000)    <1>     lea rdi, fcbName
  1048 00004070 57                  <1>     push rdi    ;Preserve this as the destination for copy
  1049 00004071 B90B000000          <1>     mov ecx, 11
  1050 00004076 F3A4                <1>     rep movsb
  1051 00004078 5F                  <1>     pop rdi
  1052 00004079 488D35(E5060000)    <1>     lea rsi, wcdFcbName ;Now source the chars from here
  1053                              <1> .mnnLp:
  1054 00004080 AC                  <1>     lodsb
  1055 00004081 3C3F                <1>     cmp al, "?" ;Is it a wc?
  1056 00004083 7404                <1>     je .mnnWC   ;Skip overriding this char
  1057 00004085 AA                  <1>     stosb   ;Store new char and go forwards by one
  1058 00004086 48FFCF              <1>     dec rdi ;Now go back by one
  1059                              <1> .mnnWC:
  1060 00004089 48FFC7              <1>     inc rdi ;Goto next letter
  1061 0000408C FFC1                <1>     inc ecx
  1062 0000408E 81F90B000000        <1>     cmp ecx, 11
  1063 00004094 75EA                <1>     jne .mnnLp
  1064 00004096 488D35(D9060000)    <1>     lea rsi, fcbName
  1065 0000409D 488D3D(BD070000)    <1>     lea rdi, renameDir
  1066 000040A4 B90B000000          <1>     mov ecx, 11
  1067 000040A9 F3A4                <1>     rep movsb   ;Move the name over from fcbName to new dir entry name field
  1068 000040AB 5F                  <1>     pop rdi ;Get the first char of the filename place in destination pathspec
  1069 000040AC 57                  <1>     push rdi    ;Push it on stack again to be reused later if a WC spec
  1070 000040AD 488D35(D9060000)    <1>     lea rsi, fcbName
  1071 000040B4 E824D3FFFF          <1>     call FCBToAsciiz    ;Copy the name over to asciiz 
  1072 000040B9 488B35(26060000)    <1>     mov rsi, qword [fname2Ptr]
  1073 000040C0 4889F7              <1>     mov rdi, rsi
  1074 000040C3 E8AFD4FFFF          <1>     call getFilePathNoCanon    ;This must be a non-existant file
  1075 000040C8 0F83C0000000        <1>     jnc .badExit   ;If the file exists, then error
  1076 000040CE 3C02                <1>     cmp al, errFnf ;If Fnf error then we may proceed
  1077 000040D0 0F85B8000000        <1>     jne .badExit
  1078                              <1>     ;Now we search the parent dir (the curDirCopy dir) for free space
  1079                              <1>     ;If the parent is root, deal with special case
  1080 000040D6 488D1D(5A060000)    <1>     lea rbx, curDirCopy
  1081 000040DD F605(FE060000)02    <1>     test byte [fileFDflg], 2
  1082 000040E4 C605(FE060000)00    <1>     mov byte [fileFDflg], 0 ;Clear the flag again
  1083 000040EB 7416                <1>     jz .notRoot2
  1084 000040ED 488D35(D9060000)    <1>     lea rsi, fcbName
  1085 000040F4 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1086 000040FB 48A5                <1>     movsq
  1087 000040FD A5                  <1>     movsd
  1088 000040FE A4                  <1>     movsb
  1089 000040FF 31C0                <1>     xor eax, eax    ;Dir to search
  1090 00004101 EB13                <1>     jmp short .getSpace
  1091                              <1> .notRoot2:
  1092 00004103 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
  1093 0000410A 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
  1094 00004111 C1E210              <1>     shl edx, 10h
  1095 00004114 09D0                <1>     or eax, edx ;Get first cluster of dir file in eax
  1096                              <1> .getSpace:
  1097 00004116 E877000000          <1>     call .searchForDirSpace
  1098 0000411B 726C                <1>     jc .bad
  1099                              <1> ;dir Entry found, rsi points to space in buffer
  1100 0000411D 4889F7              <1>     mov rdi, rsi
  1101 00004120 488D35(BD070000)    <1>     lea rsi, renameDir
  1102 00004127 B904000000          <1>     mov ecx, fatDirEntry_size/8
  1103 0000412C F348A5              <1>     rep movsq   ;Copy dir over
  1104 0000412F E85DC7FFFF          <1>     call markBufferDirty ;Mark buffer as written to now
  1105                              <1>     ;Now we check if source filename or wcdFcbname has a wildcard
  1106                              <1>     ;If it does, we find next. If not, we exit
  1107 00004134 B03F                <1>     mov al, "?"
  1108 00004136 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]  ;Check filename
  1109 0000413D E880320000          <1>     call strlen ;Get in rcx to get the length of the string
  1110 00004142 F2AE                <1>     repne scasb
  1111 00004144 7535                <1>     jne .exit  ;If source name has no wildcards, exit
  1112 00004146 B90B000000          <1>     mov ecx, 11
  1113 0000414B 488D3D(E5060000)    <1>     lea rdi, wcdFcbName
  1114 00004152 F2AE                <1>     repne scasb
  1115 00004154 7525                <1>     jne .exit
  1116                              <1>     ;Here we gotta do a find next now!
  1117 00004156 FF35(17040000)      <1>     push qword [currentDTA]
  1118 0000415C 488D3D(92070000)    <1>     lea rdi, renameFFBlk
  1119 00004163 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;Set renameFFBlk as currentDTA for operation
  1120 0000416A E881CEFFFF          <1>     call findNextMain
  1121 0000416F 8F05(17040000)      <1>     pop qword [currentDTA]
  1122 00004175 0F83E7FEFFFF        <1>     jnc .validRenPattern    ;If this is ok, now find next file
  1123                              <1>     ;Else propagate the CF if this ends with an error (inc no more files)
  1124                              <1> .exit:
  1125 0000417B 5F                  <1>     pop rdi ;Pop the ptr to the dest pathspec ptr off stack
  1126 0000417C E89BC5FFFF          <1>     call flushAllBuffersForDPB
  1127 00004181 720B                <1>     jc .badExit
  1128                              <1> .exit2: ;Bad exit before we push qword on stack 
  1129 00004183 E84D350000          <1>     call dosCrit1Exit
  1130                              <1>     return
    13                              <2> %%_ret:
    14 00004188 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1131                              <1> .bad:
  1132 00004189 B805000000          <1>     mov eax, errAccDen  ;Temp return code
  1133                              <1> .badExit:
  1134 0000418E F9                  <1>     stc
  1135 0000418F 5F                  <1>     pop rdi
  1136 00004190 EBF1                <1>     jmp short .exit2
  1137                              <1> .searchForDirSpace:
  1138                              <1> ;Input: eax = First directory to search 
  1139 00004192 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1140 00004198 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1141 0000419A 668905(83070000)    <1>     mov word [dirSect], ax
  1142 000041A1 8905(85070000)      <1>     mov dword [dirEntry], eax
  1143 000041A7 E8DFE1FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1144 000041AC 731C                <1>     jnc .dirEntryFnd
  1145 000041AE 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1145 000041B6 0000                <1>
  1146 000041B8 7412                <1>     je .searchBad ;Set CF and exit
  1147 000041BA E8BBE2FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1148 000041BF 720B                <1>     jc .searchBad
  1149 000041C1 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1150 000041C6 7404                <1>     je .searchBad
  1151                              <1>     ;Else eax = Newly allocated cluster
  1152 000041C8 EBC8                <1>     jmp short .searchForDirSpace
  1153                              <1> .dirEntryFnd:
  1154 000041CA F8                  <1>     clc
  1155                              <1>     return
    13                              <2> %%_ret:
    14 000041CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1156                              <1> .searchBad:
  1157 000041CC F9                  <1>     stc
  1158                              <1>     return
    13                              <2> %%_ret:
    14 000041CD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1159                              <1> 
  1160                              <1> 
  1161                              <1> checkNoOpenHandlesForShareAction:
  1162                              <1> ;We check that we can proceed. This function will fail IF there are handles
  1163                              <1> ; open, and thus makes it an ideal candidate for checking in RENAME, for 
  1164                              <1> ; both filenames, DELETE and SETFILEATTRIBS if we have any open files. If we
  1165                              <1> ; do, then we should get a Share error and thus it would prevent us from 
  1166                              <1> ; proceeding.
  1167                              <1> ;
  1168                              <1> ;If SHARE not loaded, ALL handles must be closed before Rename or Delete.
  1169                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1170                              <1> ;       currDirCopy = Directory entry for the file
  1171 000041CE E8E1340000          <1>     call dosPushRegs    ;Save the context completely
  1172 000041D3 803D(BF000000)00    <1>     cmp byte [openFileCheck], 0 ;Some 16-bit SHAREs set the marker to 0.
  1173 000041DA 740C                <1>     jz .noOpenFileCheckHandler
  1174 000041DC FF15(BF000000)      <1>     call qword [openFileCheck]
  1175 000041E2 7204                <1>     jc .noOpenFileCheckHandler  ;If CF=CY, this function not defined
  1176 000041E4 7447                <1>     jz .exit    ;If CF=NC && ZF=ZE, Function defined and No open files, proceed.
  1177 000041E6 EB4C                <1>     jmp short .errorMain    ;If ZF=NZ -> Have some open files, error out!
  1178                              <1> .noOpenFileCheckHandler:
  1179                              <1>     ;The following closes most recent shared handles referencing it
  1180                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1181                              <1>     ; mode and if there is precisely 1  
  1182 000041E8 FF15(27010000)      <1>     call qword [closeNewHdlShare]    
  1183                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1184 000041EE 488D3D(100D0000)    <1>     lea rdi, scratchSFT
  1185 000041F5 48893D(32070000)    <1>     mov qword [currentSFT], rdi
  1186 000041FC B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1187 00004201 C605(07070000)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
  1188                              <1>     ;This is to avoid needing to put the file attributes on the stack
  1189 00004208 57                  <1>     push rdi    ;Save the SFT ptr
  1190 00004209 E8D9020000          <1>     call buildSFTEntry
  1191 0000420E 5F                  <1>     pop rdi
  1192 0000420F 7223                <1>     jc .errorMain
  1193 00004211 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1194 00004216 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1195 0000421C E83D3D0000          <1>     call shareFile  ;Puts an sft handle in rdi
  1196 00004221 7211                <1>     jc .errorMain
  1197 00004223 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0
  1198 00004228 E8C53C0000          <1>     call closeShareCallWrapper
  1199                              <1> .exit:
  1200 0000422D E86B340000          <1>     call dosPopRegs
  1201 00004232 F8                  <1>     clc
  1202                              <1>     return
    13                              <2> %%_ret:
    14 00004233 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1203                              <1> .errorMain:
  1204 00004234 E864340000          <1>     call dosPopRegs
  1205 00004239 B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1206 0000423E F9                  <1>     stc
  1207                              <1>     return
    13                              <2> %%_ret:
    14 0000423F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1208                              <1> 
  1209                              <1> outerDeleteMain:
  1210                              <1> ;Internal current dir must be populated with dir entry
  1211                              <1> ; and internal DOS directory variables now point to this entry.
  1212                              <1> ;Checks if the file is a char device or read only.
  1213                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1214                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1215                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1216                              <1> ;         CF=NC => File deleted
  1217 00004240 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1218 00004247 E8652F0000          <1>     call testCDSNet ;CF=NC => Not net
  1219 0000424C 7308                <1>     jnc .notNet
  1220 0000424E B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1221 00004253 CD2F                <1>     int 2Fh
  1222                              <1>     return
    13                              <2> %%_ret:
    14 00004255 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1223                              <1> .notNet:
  1224 00004256 B805000000          <1>     mov eax, errAccDen  
  1225 0000425B F605(65060000)51    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev | dirDirectory | dirReadOnly
  1226 00004262 7549                <1>     jnz .exitBad  ;Can't delete char dev, dir or ro file
  1227 00004264 E846000000          <1>     call deleteMain
  1228 00004269 7242                <1>     jc .exitBad
  1229                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1230 0000426B B03F                <1>     mov al, "?"
  1231 0000426D 488D3D(D9060000)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1232 00004274 B90B000000          <1>     mov ecx, 11
  1233 00004279 F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1234 0000427B 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1235 0000427D F8                  <1>     clc
  1236                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 0000427E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1237                              <1> .serverWCloop:
  1238 0000427F FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
  1239 00004285 488D3D(2F060000)    <1>     lea rdi, dosffblock
  1240 0000428C 57                  <1>     push rdi    ;Push this address onto the stack
  1241 0000428D E88BD1FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1242 00004292 8F05(17040000)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1243 00004298 E853CDFFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1244 0000429D 8F05(17040000)      <1>     pop qword [currentDTA]
  1245                              <1>     retc    ;Return with no more files error now
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000042A3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000042A5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1246 000042A6 E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1247 000042AB 73D2                <1>     jnc .serverWCloop     
  1248                              <1> ;Stop as soon as an error occurs
  1249                              <1> .exitBad:
  1250 000042AD F9                  <1>     stc
  1251                              <1>     return
    13                              <2> %%_ret:
    14 000042AE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1252                              <1> 
  1253                              <1> deleteMain:
  1254                              <1> ;Now unlink FAT chain and then clear directory entry
  1255                              <1> ;Get the start cluster of this file
  1256                              <1> ;Input:
  1257                              <1> ; The file must have NOT be read-only.
  1258                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1259                              <1> ;     - curDirCopy must be filled with the file directory information
  1260                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1261                              <1> ;Output: CF=NC => Success, 
  1262                              <1> ; If not net CDS:
  1263                              <1> ;   rsi keeps pointing to directory entry.
  1264                              <1> ;   al = First char of the file that was deleted.
  1265                              <1> ;        CF=CY => Error
  1266                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1267 000042AF E81AFFFFFF          <1>     call checkNoOpenHandlesForShareAction   ;Also cannot delete if open handle
  1268                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000042B4 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000042B6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1269 000042B7 55                  <1>     push rbp
  1270 000042B8 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1271 000042BF 52                  <1>     push rdx
  1272 000042C0 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1273 000042C7 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1274 000042CE C1E010              <1>     shl eax, 10h
  1275 000042D1 09D0                <1>     or eax, edx ;Add low bits to eax
  1276 000042D3 5A                  <1>     pop rdx
  1277 000042D4 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1278 000042D6 7407                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1279 000042D8 E8F6C9FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1280 000042DD 721D                <1>     jc .exitBad
  1281                              <1> .skipUnlink:
  1282                              <1>     ;Now replace the first char of the directory to 0E5h
  1283                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1284 000042DF E8BBE0FFFF          <1>     call getDiskDirectoryEntry
  1285 000042E4 7216                <1>     jc .exitBad
  1286 000042E6 8A05(08070000)      <1>     mov al, byte [delChar]
  1287 000042EC 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1288 000042EE E89EC5FFFF          <1>     call markBufferDirty
  1289                              <1>     ;CF must be clear
  1290 000042F3 E824C4FFFF          <1>     call flushAllBuffersForDPB
  1291 000042F8 5D                  <1>     pop rbp
  1292                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000042F9 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000042FB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1293                              <1> .exitBad:
  1294 000042FC 5D                  <1>     pop rbp
  1295 000042FD F9                  <1>     stc
  1296                              <1>     return
    13                              <2> %%_ret:
    14 000042FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1297                              <1> 
  1298                              <1> openMain:
  1299                              <1> ;Input: ax (formally al) = Open mode
  1300                              <1> ;       [currentSFT] = SFT we are building
  1301                              <1> ;       [workingCDS] = CDS of drive to access
  1302                              <1> ;       [workingDPB] = DPB of drive to access
  1303                              <1> ;Ouput: CF=CY => Error, eax has error code
  1304 000042FF E8D4000000          <1>     call setOpenMode
  1305                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004304 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004306 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1306 00004307 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1307 0000430E 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1308 00004315 30E4                <1>     xor ah, ah  ;al has the access mode
  1309 00004317 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1310 0000431E 750A                <1>     jne .notNet
  1311                              <1> .redirOpen:
  1312 00004320 50                  <1>     push rax    ;Push open mode onto stack
  1313 00004321 B816110000          <1>     mov eax, 1116h  ;Open remote file on "\\" pathspec drives
  1314 00004326 CD2F                <1>     int 2Fh
  1315 00004328 58                  <1>     pop rax
  1316                              <1>     return
    13                              <2> %%_ret:
    14 00004329 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1317                              <1> .notNet:
  1318 0000432A 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1319 00004330 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1320 00004332 E894330000          <1>     call dosCrit1Enter
  1321                              <1> ;Ensure our disk attributes permit opening
  1322 00004337 8A15(65060000)      <1>     mov dl, byte [curDirCopy + fatDirEntry.attribute]   ;Get the disk attrib
  1323 0000433D F6C208              <1>     test dl, dirVolumeID    ;Is the found file a volume label?
  1324 00004340 752C                <1>     jnz .accDenExit
  1325 00004342 F6C201              <1>     test dl, dirReadOnly    ;Is the found file marked as RO in the file system?
  1326 00004345 7439                <1>     jz short .openFile      ;If not, proceed.
  1327                              <1> ;Else, we check if we are permitted to open this file.
  1328 00004347 0FB74E02            <1>     movzx ecx, word [rsi + sft.wOpenMode]   ;Get the user-set open mode
  1329 0000434B F7C100800000        <1>     test ecx, FCBopenedFile  ;We consider FCBs here for future net use 
  1330 00004351 7522                <1>     jnz .fcbOpen    ;If FCB open, intervene appropriately
  1331 00004353 89CA                <1>     mov edx, ecx
  1332 00004355 81E270000000        <1>     and edx, 070h   ;Isolate the share bits only
  1333 0000435B 81FA70000000        <1>     cmp edx, netFCBShare ;Is this a net server FCB open?
  1334 00004361 7412                <1>     je .fcbOpen     ;If it is net fcb, similarly force to ro as before
  1335 00004363 81E10F000000        <1>     and ecx, 0Fh    ;Else, isolate the bottom nybble
  1336 00004369 80F900              <1>     cmp cl, ReadAccess  ;Are we asking for more than read?
  1337 0000436C 7412                <1>     je .openFile    ;If no, proceed, eax has openmode. Else, access denied!
  1338                              <1> .accDenExit:
  1339 0000436E B805000000          <1>     mov eax, errAccDen
  1340 00004373 EB27                <1>     jmp short .errorExit
  1341                              <1> .fcbOpen:
  1342 00004375 6681E1F0FF          <1>     and cx, 0FFF0h  ;Set to read access open only. Preserve share/property bits
  1343 0000437A 66894E02            <1>     mov word [rsi + sft.wOpenMode], cx
  1344 0000437E 89C8                <1>     mov eax, ecx    ;Move the modified open mode into eax for buildSFT
  1345                              <1> .openFile:
  1346 00004380 C605(07070000)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1347 00004387 C605(08070000)E5    <1>     mov byte [delChar], 0E5h
  1348 0000438E E854010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1349 00004393 7207                <1>     jc .errorExit
  1350 00004395 E8C43B0000          <1>     call shareFile      ;Puts an SFT handle in rdi
  1351 0000439A 7306                <1>     jnc .fileSharedOk   ;If the file open doesnt violate share, jump!
  1352                              <1> .errorExit:
  1353 0000439C E834330000          <1>     call dosCrit1Exit   ;Else we error out with error code in al
  1354                              <1>     return
    13                              <2> %%_ret:
    14 000043A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1355                              <1> .fileSharedOk:
  1356 000043A2 B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1357 000043A7 E8860B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1358 000043AC FF15(2F010000)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1359 000043B2 E81E330000          <1>     call dosCrit1Exit
  1360                              <1> openDriverMux:  ;Int 2Fh, AX=120Ch, jumped to by Create
  1361 000043B7 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1362 000043BE E88FE2FFFF          <1>     call openSFT
  1363 000043C3 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1364 000043C9 7501                <1>     jnz .netOpen
  1365                              <1>     return
    13                              <2> %%_ret:
    14 000043CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1366                              <1> .netOpen:
  1367 000043CC 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1368 000043D3 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1369                              <1>     return
    13                              <2> %%_ret:
    14 000043D7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1370                              <1> 
  1371                              <1> setOpenMode:
  1372                              <1> ;Input: al = Open mode for the file open
  1373 000043D8 8805(FD060000)      <1>     mov byte [fileOpenMd], al
  1374 000043DE 53                  <1>     push rbx
  1375                              <1> ;Check we are not opening a directory. This is to prevent disk io with a dir
  1376 000043DF F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
  1377 000043E6 7525                <1>     jnz .somBad    ;Directories are not allowed to be opened
  1378 000043E8 88C3                <1>     mov bl, al
  1379 000043EA 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1380 000043ED 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1    
  1381 000043F4 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1382 000043F6 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1383 000043F9 7405                <1>     je .s2
  1384                              <1> .s1:
  1385 000043FB 80FB40              <1>     cmp bl, denyNoneShare
  1386 000043FE 770D                <1>     ja .somBad
  1387                              <1> .s2:
  1388 00004400 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1389 00004402 80E30F              <1>     and bl, 0Fh
  1390 00004405 80FB02              <1>     cmp bl, RWAccess
  1391 00004408 7703                <1>     ja .somBad
  1392 0000440A 5B                  <1>     pop rbx
  1393 0000440B F8                  <1>     clc
  1394                              <1>     return
    13                              <2> %%_ret:
    14 0000440C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1395                              <1> .somBad:
  1396 0000440D 5B                  <1>     pop rbx
  1397 0000440E B80C000000          <1>     mov eax, errAccCde
  1398 00004413 F9                  <1>     stc
  1399                              <1>     return
    13                              <2> %%_ret:
    14 00004414 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1400                              <1> 
  1401                              <1> createNewMain:
  1402                              <1> ;Input: ax (formally al) = File attributes
  1403                              <1> ;       [currentSFT] = SFT we are building
  1404                              <1> ;       [workingCDS] = CDS of drive to access
  1405                              <1> ;       [workingDPB] = DPB of drive to access
  1406 00004415 0FB6C0              <1>     movzx eax, al
  1407 00004418 B401                <1>     mov ah, 1    ;Tell redir to create new file
  1408 0000441A F605(04070000)FF    <1>     test byte [fileExist], -1
  1409 00004421 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1410 00004423 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1411 00004428 F9                  <1>     stc
  1412                              <1>     return
    13                              <2> %%_ret:
    14 00004429 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1413                              <1> createMain:
  1414                              <1> ;Input: ax (formally al) = File attributes
  1415                              <1> ;       [currentSFT] = SFT we are building
  1416                              <1> ;       [workingCDS] = CDS of drive to access
  1417                              <1> ;       [workingDPB] = DPB of drive to access
  1418 0000442A 0FB6C0              <1>     movzx eax, al
  1419                              <1> .createNewEP:
  1420 0000442D A880                <1>     test al, 80h    ; Is this invalid bit set?
  1421 0000442F 750C                <1>     jnz .invalidAttrib
  1422 00004431 A808                <1>     test al, volLabelFile    ;Is this a volume label?
  1423 00004433 7402                <1>     jz .notVol
  1424 00004435 B008                <1>     mov al, volLabelFile ;If the vol bit is set, set the whole thing to volume only
  1425                              <1>     ;Set archive bit for new vol labels for incremental archivers to update
  1426                              <1> .notVol:
  1427 00004437 0C20                <1>     or al, archiveFile   ;Set archive bit
  1428 00004439 A850                <1>     test al, directoryFile | charFile   ;Invalid bits?
  1429 0000443B 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1430                              <1> .invalidAttrib:
  1431 0000443D B805000000          <1>     mov eax, errAccDen
  1432 00004442 F9                  <1>     stc
  1433                              <1>     return
    13                              <2> %%_ret:
    14 00004443 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1434                              <1> .validAttr:
  1435                              <1> ;Check we are not creating a directory.
  1436 00004444 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1437 0000444B 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1438 00004452 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1439 00004459 750A                <1>     jne .diskFile
  1440 0000445B 50                  <1>     push rax    ;Save the new attributes
  1441 0000445C B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1442 00004461 CD2F                <1>     int 2Fh
  1443 00004463 5B                  <1>     pop rbx
  1444                              <1>     return
    13                              <2> %%_ret:
    14 00004464 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1445                              <1> .diskFile:
  1446 00004465 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1447 0000446B 740A                <1>     jz .hardFile
  1448 0000446D 50                  <1>     push rax    ;Save the new attributes
  1449 0000446E B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1450 00004473 CD2F                <1>     int 2Fh
  1451 00004475 5B                  <1>     pop rbx
  1452                              <1>     return
    13                              <2> %%_ret:
    14 00004476 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1453                              <1> .hardFile:
  1454 00004477 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1455 0000447D C605(07070000)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1456 00004484 C605(08070000)E5    <1>     mov byte [delChar], 0E5h
  1457 0000448B E83B320000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1458 00004490 57                  <1>     push rdi    ;Save the sft handle
  1459 00004491 50                  <1>     push rax    ;Save the file attributes on stack
  1460 00004492 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1461 00004497 E84B000000          <1>     call buildSFTEntry
  1462 0000449C 5B                  <1>     pop rbx ;Pop the file attribute off
  1463 0000449D 5F                  <1>     pop rdi
  1464 0000449E 7241                <1>     jc .errorExit
  1465 000044A0 E8B93A0000          <1>     call shareFile  ;Puts an sft handle in rdi, preserves rbx
  1466 000044A5 723A                <1>     jc .errorExit
  1467 000044A7 F6C308              <1>     test bl, volLabelFile    ;Was the attribute a volume label?
  1468 000044AA 7420                <1>     jz .notVolLabel    ;If not vol label, skip.
  1469                              <1> ; Treat volume label creation case here. Rebuild DPB.
  1470 000044AC 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]    ;Get the CDS ptr for getDiskDPB
  1471 000044B3 8A07                <1>     mov al, byte [rdi]     ;Get the drive letter
  1472 000044B5 2C41                <1>     sub al, "A"            ;Convert to a 0 based number
  1473 000044B7 8805(E1190000)      <1>     mov byte [rebuildDrv], al  ;Set the volid rebuild var
  1474 000044BD E809320000          <1>     call dosCrit1Enter
  1475 000044C2 E8502A0000          <1>     call getDiskDPB        ;Rebuild DPB and clear var
  1476 000044C7 E809320000          <1>     call dosCrit1Exit
  1477                              <1> .notVolLabel:
  1478 000044CC B802000000          <1>     mov eax, 2  ;Needed for the SHARE call
  1479 000044D1 FF15(2F010000)      <1>     call qword [updateDirShare]
  1480 000044D7 E8F9310000          <1>     call dosCrit1Exit
  1481 000044DC E9D6FEFFFF          <1>     jmp openDriverMux
  1482                              <1> .errorExit:
  1483 000044E1 E8EF310000          <1>     call dosCrit1Exit
  1484                              <1>     return
    13                              <2> %%_ret:
    14 000044E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1485                              <1> buildSFTEntry:
  1486                              <1> ;Called in a critical section.
  1487                              <1> ;Input: al = Open mode
  1488                              <1> ;       STACK: File attributes if creating a file
  1489                              <1> ;       [currentSFT] = SFT we are building
  1490                              <1> ;       [workingCDS] = CDS of drive to access
  1491                              <1> ;       [workingDPB] = DPB of drive to access
  1492                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1493                              <1> ;
  1494                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1495                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1496                              <1> ;        If CF=CY: - Return fail
  1497                              <1> ;
  1498                              <1> ;
  1499                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1500                              <1> ;   If not, create disk entry.
  1501                              <1> ;Check if the device was a char device by checking curDirCopy.
  1502                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1503                              <1> 
  1504                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1505                              <1> ; to start of file fields of the SFT
  1506 000044E7 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1507 000044E8 4889E5              <1>     mov rbp, rsp
  1508 000044EB 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1509                              <1> ;Set the open mode
  1510 000044F2 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1511                              <1> ;Get current time
  1512 000044F6 E8AFEAFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1513 000044FB E895EBFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1514 00004500 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1515                              <1> ;Set current Owner
  1516 00004503 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1517 0000450A 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1518                              <1> ;Set file pointer to first byte
  1519 0000450E C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1520                              <1> ;Common fields set
  1521 00004515 F605(07070000)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1522 0000451C 0F84CA010000        <1>     jz .openProc
  1523                              <1>     ;Here if Creating a file.
  1524                              <1>     ;First check if we are handling a volume label
  1525 00004522 48F7451008000000    <1>     test qword [rbp + 10h], volLabelFile  ;Are we creating a volume label?
  1526 0000452A 7427                <1>     jz .notVolLbl   ;Bit not set? Jump!
  1527 0000452C 56                  <1>     push rsi
  1528 0000452D 57                  <1>     push rdi
  1529 0000452E 55                  <1>     push rbp
  1530 0000452F C605(5F040000)FF    <1>     mov byte [volIdFlag], -1    ;Set the volid search bit
  1531 00004536 E84FCCFFFF          <1>     call searchDir  ;Searches the root dir
  1532 0000453B C605(5F040000)00    <1>     mov byte [volIdFlag], 0     ;We are done searching for volid
  1533 00004542 5D                  <1>     pop rbp
  1534 00004543 5F                  <1>     pop rdi
  1535 00004544 5E                  <1>     pop rsi
  1536 00004545 0F83F8010000        <1>     jnc .bad ;If CF=NC, then we have found a vollbl, fail.
  1537 0000454B 3C12                <1>     cmp al, errNoFil
  1538 0000454D 0F85F0010000        <1>     jne .bad ;If not "no file found", error out
  1539                              <1> .notVolLbl:
  1540 00004553 F605(04070000)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1541 0000455A 0F84D7000000        <1>     jz .createFile
  1542 00004560 F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1543 00004567 0F8588010000        <1>     jnz .charDev    ;If its valid, just reopens it!
  1544 0000456D F605(65060000)11    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile | dirReadOnly
  1545 00004574 0F85C9010000        <1>     jnz .bad    ;Cant recreate a dir or ro file!
  1546                              <1>     ;Here disk file exists, so recreating the file.
  1547 0000457A 55                  <1>     push rbp
  1548 0000457B FF35(32070000)      <1>     push qword [currentSFT]
  1549 00004581 E829FDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1550 00004586 8F05(32070000)      <1>     pop qword [currentSFT]
  1551 0000458C 5D                  <1>     pop rbp
  1552 0000458D 0F82B0010000        <1>     jc .bad
  1553                              <1>     ;al has the char for the filename
  1554                              <1>     ;Sets vars for the sector/offset into the sector
  1555 00004593 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1556 0000459A 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1557 0000459C 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1558                              <1>     ;al has file attributes.
  1559 000045A0 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1560 000045A3 31C0                <1>     xor eax, eax
  1561                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1562 000045A5 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1563 000045A9 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1564 000045AD 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1565 000045B0 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1566 000045B3 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1567 000045B6 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1568 000045B9 57                  <1>     push rdi    ;Save SFT pointer
  1569 000045BA 488D3D(5A060000)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1570 000045C1 B920000000          <1>     mov ecx, fatDirEntry_size
  1571 000045C6 F3A4                <1>     rep movsb
  1572 000045C8 E8C4C2FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1573 000045CD 5F                  <1>     pop rdi
  1574                              <1> .createCommon:  ;rdi must point to the current SFT 
  1575                              <1>     ;Now populate the remaining SFT fields 
  1576 000045CE 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1577 000045D5 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1578 000045D8 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1579 000045DB 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1580 000045E2 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1581 000045E6 0FB705(4E070000)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1582 000045ED C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1583 000045F0 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1584 000045F3 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1585 000045F6 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1586 000045F9 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1587 000045FD 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1588 00004601 C1E210              <1>     shl edx, 10h
  1589 00004604 09D0                <1>     or eax, edx
  1590 00004606 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1591                              <1> 
  1592 00004609 31C0                <1>     xor eax, eax
  1593                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1594 0000460B 8A05(09070000)      <1>     mov al, byte [workingDrv]
  1595 00004611 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1596 00004613 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1597 00004617 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
  1598 0000461E 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1599                              <1>     ;Last thing, copy the filename over
  1600                              <1>     ;Now save the name
  1601                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1602 00004622 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1603 00004626 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1604 0000462D 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1605 0000462F 66A5                <1>     movsw
  1606 00004631 A4                  <1>     movsb
  1607                              <1>     ;SFT filled
  1608 00004632 E903010000          <1>     jmp .exit
  1609                              <1> .createFile:
  1610                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1611                              <1>     ;rsi points to current sft entry
  1612 00004637 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1613                              <1>     ;Clear out the dir entry
  1614 0000463E 57                  <1>     push rdi
  1615 0000463F B904000000          <1>     mov ecx, 4
  1616 00004644 31C0                <1>     xor eax, eax
  1617 00004646 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1618 00004649 5F                  <1>     pop rdi
  1619                              <1>     ;Copy the FCB name over    
  1620 0000464A 56                  <1>     push rsi
  1621 0000464B 57                  <1>     push rdi
  1622 0000464C B90B000000          <1>     mov ecx, 11
  1623 00004651 488D35(D9060000)    <1>     lea rsi, fcbName
  1624 00004658 F3A4                <1>     rep movsb   ;Move over the FCB name
  1625 0000465A 5F                  <1>     pop rdi
  1626 0000465B 5E                  <1>     pop rsi
  1627                              <1> 
  1628 0000465C 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1629                              <1>     ;al has file attributes.
  1630 00004660 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1631 00004663 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1632 00004666 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1633 00004669 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1634 0000466C 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1635                              <1> .searchForDirSpace:
  1636 00004672 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1637 00004678 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1638 0000467A 668905(83070000)    <1>     mov word [dirSect], ax
  1639 00004681 8905(85070000)      <1>     mov dword [dirEntry], eax
  1640 00004687 57                  <1>     push rdi
  1641 00004688 E8FEDCFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1642 0000468D 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1643 0000468E 7328                <1>     jnc .dirEntryFnd
  1644 00004690 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1644 00004698 0000                <1>
  1645 0000469A 0F84A3000000        <1>     je .bad ;Set CF and exit
  1646 000046A0 E8D5DDFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1647 000046A5 0F828F000000        <1>     jc .exit
  1648 000046AB 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1649 000046B0 0F848D000000        <1>     je .bad
  1650                              <1>     ;Else eax = Newly allocated cluster
  1651 000046B6 EBBA                <1>     jmp short .searchForDirSpace
  1652                              <1> .dirEntryFnd:
  1653 000046B8 4887FE              <1>     xchg rdi, rsi
  1654 000046BB B904000000          <1>     mov ecx, 4
  1655 000046C0 F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1656 000046C3 E8C9C1FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1657 000046C8 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1658 000046CF E9FAFEFFFF          <1>     jmp .createCommon
  1659                              <1> .open:
  1660                              <1> ;curdircopy has a copy of the disk file directory
  1661                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1662 000046D4 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1663 000046DB 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1664                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1665 000046E2 E8B8DCFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1666 000046E7 E9E2FEFFFF          <1>     jmp .createCommon
  1667                              <1> .openProc:
  1668                              <1>     ;Here if Opening a file. 
  1669                              <1>     ;Dirs cannot be opened through open, only for renaming.
  1670                              <1>     ;This is taken care of by openMain.
  1671 000046EC F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute],dirCharDev
  1672 000046F3 74DF                <1>     jz .open
  1673                              <1> .charDev:
  1674 000046F5 488B05(5A060000)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1675 000046FC E8132E0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1676 00004701 7307                <1>     jnc .notBadCharDevName
  1677 00004703 B805000000          <1>     mov eax, errAccDen
  1678 00004708 EB30                <1>     jmp short .exit ;CF already set
  1679                              <1> .notBadCharDevName:
  1680 0000470A 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1681 00004711 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1682 00004715 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1683 00004719 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1684 0000471C 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1685 0000471F 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1686 00004723 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1687 0000472A 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1688 0000472E B820202020          <1>     mov eax, "    "
  1689 00004733 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1690 00004737 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1691                              <1> .exit:
  1692 0000473A E8FF090000          <1>     call writeThroughBuffersForHandle
  1693 0000473F 7207                <1>     jc .bad2
  1694 00004741 5D                  <1>     pop rbp
  1695                              <1>     return
    13                              <2> %%_ret:
    14 00004742 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1696                              <1> .bad:   ;Set Access Denied
  1697 00004743 B805000000          <1>     mov eax, errAccDen
  1698                              <1> .bad2:  ;Error propagating error code
  1699 00004748 F9                  <1>     stc
  1700 00004749 5D                  <1>     pop rbp
  1701                              <1>     return
    13                              <2> %%_ret:
    14 0000474A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1702                              <1> closeMain: ;Int 2Fh AX=1201h
  1703                              <1> ;Gets the directory entry for a file
  1704                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1705                              <1> ;If CF=CY on return: Error, return error with al = error code
  1706                              <1> ;Preserve all regs except eax and rdi
  1707                              <1> ; If CF=NC on return: eax = Unknown
  1708                              <1> ;                     rdi = current SFT ptr
  1709 0000474B 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1710 00004752 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1711 00004756 F7C300800000        <1>     test ebx, devRedirDev ;Is this a network drive?
  1712 0000475C 7408                <1>     jz .physical
  1713                              <1>     ;Here we beep out the request to the network redirector (Int 2Fh AX=1106h)
  1714 0000475E B806110000          <1>     mov eax, 1106h  ;Make request
  1715 00004763 CD2F                <1>     int 2Fh ;Beep!
  1716                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 00004765 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1717                              <1> .physical:  
  1718                              <1> ; We make a request to the dev dir to close the device
  1719                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1720 00004766 E8602F0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1721 0000476B E8A0DCFFFF          <1>     call updateSFTDateTimeFields
  1722 00004770 E8BA090000          <1>     call decrementOpenCount ;rdi = current SFT, returns (e)ax = old handle count
  1723 00004775 50                  <1>     push rax
  1724 00004776 53                  <1>     push rbx
  1725 00004777 E876370000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1726 0000477C 5B                  <1>     pop rbx
  1727 0000477D 58                  <1>     pop rax
  1728                              <1> flushFile:  ;Make this non-local to be jumped to by commit too!
  1729                              <1> ;Updates the Dir entry with info from SFT and flushes.
  1730                              <1> ;Closes the handle properly if only one reference to file remains.
  1731                              <1> ;Input: ax = Initial open handle count
  1732                              <1> ;       bx = attribute byte from the SFT
  1733                              <1> ;       rdi -> Current SFT
  1734 0000477E 50                  <1>     push rax    ;Save the handle count for later
  1735 0000477F 66F7C3C000          <1>     test bx, blokFileNoFlush | devCharDev
  1736 00004784 7577                <1>     jnz .notDiskBitsSet
  1737 00004786 E8B7DCFFFF          <1>     call getAndUpdateDirSectorForFile   ;rsi -> Buffer dir entry
  1738 0000478B B805000000          <1>     mov eax, errAccDen
  1739 00004790 726C                <1>     jc .accDenExit
  1740 00004792 56                  <1>     push rsi    ; -> Buffer dir entry
  1741 00004793 57                  <1>     push rdi    ; -> SFT ptr
  1742 00004794 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]    ;Ensure this is the right file
  1743 00004798 E8CDCBFFFF          <1>     call findInBuffer.nameCompare
  1744 0000479D 5F                  <1>     pop rdi     ; -> SFT ptr
  1745 0000479E 5E                  <1>     pop rsi     ; -> Buffer dir entry
  1746 0000479F 7408                <1>     jz .dirEntryForUs
  1747                              <1> .badFileFound:
  1748 000047A1 B802000000          <1>     mov eax, errFnf ;Dir entry has changed, and now file not found on medium
  1749 000047A6 F9                  <1>     stc
  1750 000047A7 EB55                <1>     jmp short .accDenExit
  1751                              <1> .dirEntryForUs:
  1752 000047A9 0FB64E0B            <1>     movzx ecx, byte [rsi + fatDirEntry.attribute] ;Get dir file attrib
  1753 000047AD 0FB64704            <1>     movzx eax, byte [rdi + sft.bFileAttrib]   ;Get SFT file attrib
  1754 000047B1 F6D0                <1>     not al  ;Reverse the bits
  1755 000047B3 20C8                <1>     and al, cl  ;These should be equal
  1756 000047B5 2416                <1>     and al, dirInclusive ;And nothing outside of these should be set
  1757 000047B7 75E8                <1>     jnz .badFileFound
  1758                              <1>     
  1759 000047B9 804E0B20            <1>     or byte [rsi + fatDirEntry.attribute], dirArchive   ;File changed!
  1760 000047BD 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
  1761 000047C0 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax ;And update field
  1762 000047C3 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
  1763 000047C7 66894616            <1>     mov word [rsi + fatDirEntry.wrtTime], ax    ;And update field
  1764 000047CB 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
  1765 000047CF 66894618            <1>     mov word [rsi + fatDirEntry.wrtDate], ax    ;And update field
  1766 000047D3 66894612            <1>     mov word [rsi + fatDirEntry.lastAccDat], ax ;Partialy implemented
  1767 000047D7 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
  1768 000047DA 6689461A            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusLo], ax
  1769 000047DE C1E810              <1>     shr eax, 10h
  1770 000047E1 66894614            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusHi], ax
  1771 000047E5 E8A7C0FFFF          <1>     call markBufferDirty
  1772 000047EA 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]
  1773 000047F1 E838BFFFFF          <1>     call flushAllBuffersForDrive
  1774 000047F6 B805000000          <1>     mov eax, errAccDen
  1775 000047FB 7201                <1>     jc .accDenExit
  1776                              <1> .notDiskBitsSet:
  1777 000047FD F8                  <1>     clc
  1778                              <1> .accDenExit:
  1779 000047FE 9C                  <1>     pushfq
  1780 000047FF E857DEFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1781 00004804 9D                  <1>     popfq
  1782 00004805 59                  <1>     pop rcx ;Get back the initial open handle count
  1783 00004806 0FB7C9              <1>     movzx ecx, cx   ;Force upper bits clear
  1784 00004809 9C                  <1>     pushfq
  1785 0000480A FFC9                <1>     dec ecx ;Decrement count
  1786 0000480C 7503                <1>     jnz .exit   ;If our initial count was not 1, skip resetting the count since
  1787 0000480E 66890F              <1>     mov word [rdi], cx ; decrementOpenCount didnt set it to -1
  1788                              <1> .exit:
  1789 00004811 E8BF2E0000          <1>     call dosCrit1Exit
  1790 00004816 9D                  <1>     popfq
  1791                              <1>     return
    13                              <2> %%_ret:
    14 00004817 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1792                              <1> 
  1793                              <1> readBytes:
  1794                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1795                              <1> ;Input: ecx = Number of bytes to read
  1796                              <1> ;Output: ecx = Number of bytes read
  1797                              <1> ;Number of bytes read 
  1798                              <1> ;If CF=CY, return with error code in ax
  1799 00004818 E815070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1800 0000481D 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1801 00004821 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1802 00004823 3C01                <1>     cmp al, WriteAccess
  1803 00004825 7509                <1>     jne .readable
  1804 00004827 B805000000          <1>     mov eax, errAccDen
  1805 0000482C 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1806 0000482E F9                  <1>     stc
  1807                              <1>     return
    13                              <2> %%_ret:
    14 0000482F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1808                              <1> .readable:
  1809 00004830 E843070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1810 00004835 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1811 00004838 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1812 0000483E 740A                <1>     jz .notRedir
  1813 00004840 B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1814 00004845 CD2F                <1>     int 2Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1815                              <1>     return 
    13                              <2> %%_ret:
    14 00004847 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1816                              <1> .exitOk:
  1817 00004848 F8                  <1>     clc
  1818                              <1>     return 
    13                              <2> %%_ret:
    14 00004849 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1819                              <1> .notRedir:
  1820 0000484A 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1821 00004850 7510                <1>     jnz readCharDev
  1822 00004852 E8742E0000          <1>     call dosCrit1Enter
  1823 00004857 E89E010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1824 0000485C E8742E0000          <1>     call dosCrit1Exit
  1825                              <1>     return 
    13                              <2> %%_ret:
    14 00004861 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1826                              <1> readCharDev:
  1827                              <1> ;rdi points to sft for char dev to read
  1828                              <1> ;ecx has the number of bytes to transfer
  1829                              <1> ;Vars have been set up and DTA has the transfer address
  1830                              <1> ;Returns in ecx, the actual bytes transferred
  1831                              <1> ;If CF=CY, return with error code in ax
  1832 00004862 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1833 00004869 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1834 0000486D 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1835 00004874 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1836 00004877 0F84CA020000        <1>     jz charReadExitOk    ;If it does, jump to exit as if EOF has been hit
  1837 0000487D F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1838 00004880 7407                <1>     jz .notNul
  1839                              <1>     ;If it is a new NUL device hdl, we can simply return!
  1840                              <1>     ;NUL never transfers bytes and now clears this bit to indicate EOF
  1841 00004882 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1842 00004884 E9BE020000          <1>     jmp charReadExitOk    ;Goto exit
  1843                              <1> .notNul:
  1844 00004889 F6C320              <1>     test bl, charDevBinary
  1845 0000488C 0F857F000000        <1>     jnz .binary
  1846                              <1>     ;Here if the device is in ASCII mode
  1847 00004892 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1848 00004895 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1849                              <1> .consoleInput:
  1850                              <1>     ;Console input here
  1851 0000489B E8BAE2FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1852                              <1>     ;Get current offset into buffer (if one exists)
  1853 000048A0 488B35(2B000000)    <1>     mov rsi, qword [vConHdlOff]
  1854 000048A7 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1855 000048AA 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1856 000048AC 803D(4E030000)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1857 000048B3 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1858                              <1>     ;Else, reset the buffer
  1859 000048B5 66C705(4E030000)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1859 000048BD FF                  <1>
  1860                              <1> .oldBuf:
  1861                              <1> ;Preserve the dta and number of chars to tfr
  1862 000048BE 51                  <1>     push rcx
  1863 000048BF 57                  <1>     push rdi
  1864 000048C0 488D15(4E030000)    <1>     lea rdx, vConInBuf
  1865 000048C7 E8AEE2FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1866 000048CC 5F                  <1>     pop rdi
  1867 000048CD 59                  <1>     pop rcx
  1868 000048CE 488D35(50030000)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1869 000048D5 803E1A              <1>     cmp byte [rsi], EOF
  1870 000048D8 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1871 000048DA C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1872 000048DD B00A                <1>     mov al, LF
  1873 000048DF E804DEFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1874 000048E4 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1875 000048E6 EB18                <1>     jmp short .exit
  1876                              <1> .tfrBuf:
  1877 000048E8 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1878 000048E9 AA                  <1>     stosb
  1879 000048EA 3C0D                <1>     cmp al, CR 
  1880 000048EC 7503                <1>     jne .noCRLF
  1881 000048EE C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1882                              <1> .noCRLF:
  1883 000048F1 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1884 000048F3 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1885 000048F5 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1886                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1887 000048F7 E8ECDDFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1888 000048FC 31F6                <1>     xor esi, esi
  1889 000048FE 0C01                <1>     or al, 1    ;Set ZF = NZ
  1890                              <1> .exit:
  1891 00004900 E86DE2FFFF          <1>     call vConRetDriver
  1892 00004905 488935(2B000000)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1893                              <1>     ;Only return with ZF=ZE if first char in buffer was EOF
  1894 0000490C E936020000          <1>     jmp charReadExitOk    ;Exit ok! ecx has # chars tfred
  1895                              <1> 
  1896                              <1> .binary:
  1897                              <1>     ;Setup registers for transfer
  1898 00004911 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1899 00004914 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1900                              <1>     ;ecx has the number of bytes to transfer directly
  1901 00004917 E8AB270000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1902 0000491C 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1903 00004923 E87D240000          <1>     call goDriver   ;Make the request
  1904 00004928 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1905 0000492B 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status] ;Get status word in di
  1906 00004932 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1907 00004938 7422                <1>     jz .binNoError
  1908                              <1>     ;ERROR HERE! Prepare for Int 24h (if SFT allows us to issue Int 24h)
  1909 0000493A B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1910 0000493C E8491E0000          <1>     call charDevErr   ;ah = has part of the error 
  1911                              <1>     ;al now has the response
  1912 00004941 3C00                <1>     cmp al, critIgnore
  1913 00004943 7417                <1>     je .binNoError ;Simply proceed as normal
  1914 00004945 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1915 00004948 3C03                <1>     cmp al, critFail
  1916 0000494A 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1917                              <1>     ;Fallthrough here for fail!
  1918                              <1> .failExit:
  1919 0000494C 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1920 00004953 31C9                <1>     xor ecx, ecx
  1921 00004955 B805000000          <1>     mov eax, errAccDen
  1922 0000495A F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1923                              <1>     return
    13                              <2> %%_ret:
    14 0000495B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1924                              <1> .binNoError:
  1925                              <1>     ;Get number of bytes transferred into 
  1926 0000495C 8B05(D7040000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]   ;Get bytes transferred
  1927 00004962 F7D8                <1>     neg eax ;make it into -eax
  1928 00004964 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1929                              <1>     ;ecx now has bytes left to transfer
  1930 00004968 50                  <1>     push rax    ;Save value on stack
  1931 00004969 31C0                <1>     xor eax, eax ;Set ZF
  1932 0000496B FFC0                <1>     inc eax ;Clear ZF
  1933 0000496D 58                  <1>     pop rax ;Get back the original value
  1934 0000496E E9D4010000          <1>     jmp charReadExitOk    ;GoExit with ecx=Bytes left to read. ZF=NZ always
  1935                              <1> .generalASCII:
  1936                              <1>     ;ecx has bytes to transfer here
  1937                              <1>     ;Setup registers for transfer
  1938 00004973 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1939 00004976 51                  <1>     push rcx
  1940 00004977 B901000000          <1>     mov ecx, 1  ;Get one char
  1941 0000497C 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1942 0000497F E843270000          <1>     call primReqReadSetup   ;Setup request
  1943 00004984 59                  <1>     pop rcx
  1944                              <1>     ;rbx now has request header ptr
  1945 00004985 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1946                              <1> .asciiReadChar:
  1947 0000498C 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1948 0000498F E849E1FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1949 00004994 E80C240000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1950 00004999 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status] ;Get status word in di
  1951 000049A0 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1952 000049A6 7420                <1>     jz .asciiNoError
  1953 000049A8 B486                <1>     mov ah, critCharDev | critData
  1954 000049AA E8DB1D0000          <1>     call charDevErr    ;Call Int 24h, ecx preserved
  1955                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1956 000049AF C705(D7040000)0100- <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], 1
  1956 000049B7 0000                <1>
  1957 000049B9 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1958 000049BC 3C03                <1>     cmp al, critFail
  1959 000049BE 748C                <1>     je .failExit
  1960 000049C0 3C01                <1>     cmp al, critRetry
  1961 000049C2 74C8                <1>     je .asciiReadChar
  1962                              <1>     ;Ignore here, pretend NULL CHAR was read
  1963 000049C4 30C0                <1>     xor al, al
  1964 000049C6 EB15                <1>     jmp short .asciiIgnoreEP
  1965                              <1> .asciiNoError:
  1966                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  1967                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  1968                              <1> ;Preserve RBX, RSI
  1969                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  1970 000049C8 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  1971 000049CB 813D(D7040000)0100- <1>     cmp dword [primReqPkt + ioReqPkt.tfrlen], 1
  1971 000049D3 0000                <1>
  1972 000049D5 0F856C010000        <1>     jne charReadExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  1973 000049DB 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  1974                              <1> .asciiIgnoreEP:
  1975 000049DD 48FF05(CF040000)    <1>     inc qword [primReqPkt + ioReqPkt.bufptr]   ;Goto next char position
  1976 000049E4 48FFC7              <1>     inc rdi ;Also advance register pointer
  1977 000049E7 3C1A                <1>     cmp al, EOF ;Was the char just read EOF?
  1978 000049E9 0F8458010000        <1>     je charReadExitOk   ;Exit if so!
  1979 000049EF 3C0D                <1>     cmp al, CR  ;Was this char CR?
  1980 000049F1 E099                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  1981                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  1982 000049F3 FEC0                <1>     inc al  ;make ZF=NZ
  1983 000049F5 E94D010000          <1>     jmp charReadExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  1984                              <1> 
  1985                              <1> readDiskFile:
  1986                              <1> ;rdi = Current SFT
  1987                              <1> ;rbp = WorkingDPB
  1988                              <1> ;ecx = Bytes to transfer
  1989 000049FA C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  1990 00004A01 C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Read operation
  1991                              <1>     ;We have the following vars setup:
  1992                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  1993                              <1>     ;currClustF
  1994                              <1>     ;Now convert currSectC to disk sector by using currClustF
  1995                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  1996 00004A08 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  1997 00004A0B 85D2                <1>     test edx, edx
  1998 00004A0D 0F843F010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  1999 00004A13 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2000 00004A19 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  2001 00004A1C 8905(54070000)      <1>     mov dword [currClustD], eax
  2002 00004A22 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  2003 00004A24 0F8428010000        <1>     jz readExitOk
  2004 00004A2A 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  2005 00004A2F 0F841D010000        <1>     jz readExitOk   
  2006 00004A35 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  2007                              <1>     ;Check if we have opened a volume label (should never happen)
  2008 00004A3B F6470408            <1>     test byte [rdi + sft.bFileAttrib], volLabelFile    ;If we try read from vollbl
  2009 00004A3F 7407                <1>     jz .shareCheck
  2010 00004A41 B805000000          <1>     mov eax, errAccDen
  2011 00004A46 F9                  <1>     stc
  2012                              <1>     return
    13                              <2> %%_ret:
    14 00004A47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2013                              <1> .shareCheck:
  2014                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  2015 00004A48 E8AC340000          <1>     call retryShareIODelay
  2016 00004A4D 7308                <1>     jnc .shareOk
  2017 00004A4F E845350000          <1>     call shareCheckReadLockViolation
  2018 00004A54 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  2019                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 00004A56 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2020                              <1> .shareOk:
  2021 00004A57 E87DBCFFFF          <1>     call markBuffersAsUnreferencedWrapper
  2022 00004A5C 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  2023 00004A5E 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  2024 00004A60 7426                <1>     jz .skipWalk
  2025                              <1> .goToCurrentCluster:
  2026 00004A62 E8A6C2FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2027 00004A67 0F82CB000000        <1>     jc .badExit   ;This can only return Fail
  2028 00004A6D 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  2029 00004A72 0F84DA000000        <1>     je readExitOk ;Exit with no bytes transferred
  2030 00004A78 8905(54070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2031 00004A7E FFCA                <1>     dec edx ;Decrement counter
  2032 00004A80 75E0                <1>     jnz .goToCurrentCluster
  2033 00004A82 8B05(54070000)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  2034                              <1> .skipWalk:
  2035 00004A88 E8EEBFFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2036                              <1>     ;Now we add the offset to this
  2037 00004A8D 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2038 00004A94 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2039 00004A97 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2040                              <1> ;Main
  2041                              <1> .mainRead:
  2042 00004A9E E8BB000000          <1>     call diskIOGetBuffer
  2043 00004AA3 0F828F000000        <1>     jc .badExit
  2044 00004AA9 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  2045 00004AAD 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2046 00004AB4 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  2047                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2048                              <1>     ; 1) Bytes left in sector size, 2) Bytes left in File, 
  2049                              <1>     ; 3) Bytes left to read from Request
  2050                              <1> 
  2051 00004AB7 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  2052 00004ABA 2B0D(67070000)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  2053 00004AC0 8B1D(77070000)      <1>     mov ebx, dword [tfrCntr]
  2054 00004AC6 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  2055 00004AC8 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  2056 00004ACB 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  2057 00004ACF 662B1D(65070000)    <1>     sub bx, word [currByteS]    ;Remove the number of bytes into the sector we are
  2058 00004AD6 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  2059 00004AD8 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  2060                              <1>     
  2061 00004ADB 57                  <1>     push rdi
  2062 00004ADC 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
  2063 00004AE3 51                  <1>     push rcx
  2064 00004AE4 F3A4                <1>     rep movsb
  2065 00004AE6 59                  <1>     pop rcx
  2066 00004AE7 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2067 00004AED 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2068 00004AF3 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2069 00004AFA 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2070 00004B00 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2071 00004B04 31D2                <1>     xor edx, edx    ;Zero rdx
  2072 00004B06 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2073 00004B08 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2074 00004B0F 5F                  <1>     pop rdi
  2075 00004B10 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2076 00004B16 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2077 00004B18 7438                <1>     jz readExitOk ;Exit if so!
  2078 00004B1A E82FC1FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  2079 00004B1F 7217                <1>     jc .badExit
  2080                              <1>     ;If ZF=ZE then currClustF has last cluster
  2081 00004B21 742F                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  2082                              <1>     ;Else repeat
  2083                              <1>     ;currSectD has been updated, we now set currByteS = 0
  2084 00004B23 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2084 00004B2B 00                  <1>
  2085 00004B2C 488B05(5D070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2086 00004B33 E966FFFFFF          <1>     jmp .mainRead
  2087                              <1> .badExit:
  2088                              <1>     ;When a disk error occurs within the bit where vars have changed,
  2089                              <1>     ; we need to update the SFT before returning
  2090 00004B38 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  2091 00004B3E 30C0                <1>     xor al, al  ;Set ZF flag
  2092 00004B40 E80D000000          <1>     call readExitOk   ;We call this
  2093 00004B45 F9                  <1>     stc ;All calls which end up here return Fail!
  2094 00004B46 C3                  <1>     ret
  2095                              <1> charReadExitOk:
  2096                              <1> ;Input: ecx = Number of bytes left to transfer!
  2097                              <1> ;       ZF=ZE => Ensure we reach "EOF" on char device!
  2098                              <1> ;       ZF=NZ => preserve bit 6
  2099 00004B47 7509                <1>     jnz readExitOk
  2100 00004B49 E8E4030000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  2101 00004B4E 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~charDevNoEOF
  2102                              <1> readExitOk: ;Disk xfrs always go here. Binary char too but by bouncing!
  2103                              <1> ;Input: ecx = Number of bytes left to transfer! 
  2104 00004B52 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2105 00004B58 E8DD030000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2106                              <1>     return 
    13                              <2> %%_ret:
    14 00004B5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2107                              <1> 
  2108                              <1> diskIOGetBuffer:
  2109                              <1> ;If appropriate, checks if the user has typed a ^C at the console.
  2110                              <1> ; Then reads the specified sector into a buffer and returns a ptr to 
  2111                              <1> ; the buffer.
  2112                              <1> ;Input: rax = Sector to get buffer for. 
  2113                              <1> ;Output:  If CF=NC: rbx -> bufHdrptr with buffer filled with sector data
  2114                              <1> ;         Else: Error
  2115 00004B5E F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set
  2116 00004B65 7407                <1>     jz .skipBreak
  2117 00004B67 50                  <1>     push rax
  2118 00004B68 E870DFFFFF          <1>     call checkBreak
  2119 00004B6D 58                  <1>     pop rax
  2120                              <1> .skipBreak:
  2121 00004B6E E888BEFFFF          <1>     call getBufForData
  2122                              <1>     return
    13                              <2> %%_ret:
    14 00004B73 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2123                              <1> 
  2124                              <1> writeBytes:
  2125                              <1> ;Writes the bytes from the user buffer
  2126                              <1> ;Input: ecx = Bytes to xfr
  2127                              <1> ;Returns number of bytes written in ecx if CF=NC
  2128 00004B74 E8B9030000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2129 00004B79 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2130 00004B7D 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2131 00004B7F 3C00                <1>     cmp al, ReadAccess
  2132 00004B81 7509                <1>     jne .writeable
  2133                              <1> .noWrite:
  2134 00004B83 B805000000          <1>     mov eax, errAccDen
  2135 00004B88 31C9                <1>     xor ecx, ecx
  2136 00004B8A F9                  <1>     stc
  2137 00004B8B C3                  <1>     ret
  2138                              <1> .writeable:
  2139                              <1> ;FCB check file attributes since we can create an RO flag and write to it directly
  2140                              <1> ; but cannot open a read only file. This is redundant whilst we don't allow for 
  2141                              <1> ; FCB IO
  2142 00004B8C 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  2143 00004B92 7406                <1>     jz .skipAttribCheck
  2144 00004B94 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  2145 00004B98 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2146                              <1> .skipAttribCheck:
  2147 00004B9A E8D9030000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2148 00004B9F 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  2149 00004BA5 7408                <1>     jz .notRedir
  2150 00004BA7 B809110000          <1>     mov eax, 1109h  ;Write to redir
  2151 00004BAC CD2F                <1>     int 2Fh
  2152                              <1>     return
    13                              <2> %%_ret:
    14 00004BAE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2153                              <1> .notRedir:
  2154 00004BAF 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2155 00004BB5 7510                <1>     jnz writeCharDev
  2156 00004BB7 E80F2B0000          <1>     call dosCrit1Enter
  2157 00004BBC E84E010000          <1>     call writeDiskFile
  2158 00004BC1 E80F2B0000          <1>     call dosCrit1Exit
  2159                              <1>     return
    13                              <2> %%_ret:
    14 00004BC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2160                              <1> writeCharDev:
  2161 00004BC7 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
  2162                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2163 00004BCE 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  2164 00004BD4 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2165                              <1>     ;If ecx = 0, we exit
  2166 00004BD8 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2167 00004BDA 85C9                <1>     test ecx, ecx
  2168 00004BDC 0F8438030000        <1>     jz writeExitChar
  2169 00004BE2 88D8                <1>     mov al, bl  ;Move the flags over
  2170 00004BE4 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2171 00004BEB 4889DF              <1>     mov rdi, rbx
  2172 00004BEE 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2173 00004BF0 A820                <1>     test al, charDevBinary
  2174 00004BF2 744A                <1>     jz .asciiDev
  2175                              <1> ;Write binary transfer here
  2176                              <1> .binaryLp:
  2177 00004BF4 31C0                <1>     xor eax, eax
  2178 00004BF6 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2179 00004BF9 E8BE240000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2180 00004BFE 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2181 00004C05 E897210000          <1>     call goDriverChar
  2182 00004C0A 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2183 00004C0D B487                <1>     mov ah, critCharDev | critData | critWrite
  2184 00004C0F 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status]  ;Get status word
  2185 00004C16 F7C700800000        <1>     test edi, drvErrStatus
  2186 00004C1C 7415                <1>     jz .binXfrOk
  2187 00004C1E E8671B0000          <1>     call charDevErr ;Invoke Int 24h
  2188 00004C23 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2189 00004C26 3C00                <1>     cmp al, critIgnore
  2190 00004C28 7409                <1>     je .binXfrOk
  2191 00004C2A 3C01                <1>     cmp al, critRetry
  2192 00004C2C 74C6                <1>     je .binaryLp
  2193 00004C2E E9D5000000          <1>     jmp .exitFail
  2194                              <1> .binXfrOk:
  2195 00004C33 8B05(D7040000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]
  2196 00004C39 E9DC020000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2197                              <1> .asciiDev:
  2198 00004C3E A802                <1>     test al, charDevConOut
  2199 00004C40 0F859E000000        <1>     jnz .conDev
  2200 00004C46 A804                <1>     test al, charDevNulDev
  2201 00004C48 0F858F000000        <1>     jnz .nulDev
  2202                              <1>     ;Here we transfer for a generic character device in ascii mode
  2203 00004C4E 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2204 00004C50 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2205 00004C53 0F84C1020000        <1>     je writeExitChar
  2206 00004C59 51                  <1>     push rcx
  2207 00004C5A B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2208 00004C5F 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2209 00004C62 E855240000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2210 00004C67 59                  <1>     pop rcx
  2211 00004C68 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2212 00004C6F 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2213                              <1> .asciiLp:
  2214 00004C73 E865DEFFFF          <1>     call checkBreak
  2215 00004C78 E828210000          <1>     call goDriver
  2216 00004C7D 57                  <1>     push rdi
  2217 00004C7E B487                <1>     mov ah, critCharDev | critData | critWrite
  2218 00004C80 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status]  ;Get status word
  2219 00004C87 F7C700800000        <1>     test edi, drvErrStatus
  2220 00004C8D 741D                <1>     jz .asciiNoError
  2221 00004C8F E8F61A0000          <1>     call charDevErr ;Invoke Int 24h
  2222 00004C94 5F                  <1>     pop rdi
  2223 00004C95 C705(D7040000)0100- <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2223 00004C9D 0000                <1>
  2224 00004C9F 3C01                <1>     cmp al, critRetry
  2225 00004CA1 74D0                <1>     je .asciiLp
  2226 00004CA3 3C00                <1>     cmp al, critIgnore
  2227 00004CA5 7412                <1>     je .ignoreEp
  2228 00004CA7 E95C000000          <1>     jmp .exitFail
  2229                              <1> .asciiNoError:
  2230 00004CAC 5F                  <1>     pop rdi
  2231 00004CAD 813D(D7040000)0000- <1>     cmp dword [primReqPkt + ioReqPkt.tfrlen], 0
  2231 00004CB5 0000                <1>
  2232 00004CB7 741D                <1>     je .bytesXfrdOk
  2233                              <1> .ignoreEp:
  2234 00004CB9 FFC2                <1>     inc edx ;One more char has been xfrd
  2235 00004CBB FF05(CF040000)      <1>     inc dword [primReqPkt + ioReqPkt.bufptr]    ;Increment buffer ptr
  2236 00004CC1 48FFC7              <1>     inc rdi ;And our copy... 
  2237 00004CC4 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2238 00004CC7 740D                <1>     je .bytesXfrdOk
  2239 00004CC9 66C705(C4040000)00- <1>     mov word [primReqPkt + ioReqPkt.status], 0
  2239 00004CD1 00                  <1>
  2240 00004CD2 FFC9                <1>     dec ecx
  2241 00004CD4 759D                <1>     jnz .asciiLp
  2242                              <1> .bytesXfrdOk:
  2243 00004CD6 89D0                <1>     mov eax, edx
  2244 00004CD8 E93D020000          <1>     jmp writeExitChar
  2245                              <1> .nulDev:
  2246 00004CDD 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2247 00004CDF E936020000          <1>     jmp writeExitChar
  2248                              <1> .conDev:
  2249 00004CE4 E871DEFFFF          <1>     call vConSwapDriver
  2250 00004CE9 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2251 00004CEC 51                  <1>     push rcx
  2252                              <1> .conDevLp:
  2253 00004CED AC                  <1>     lodsb
  2254 00004CEE 3C1A                <1>     cmp al, EOF
  2255 00004CF0 7409                <1>     je .conDevExit
  2256 00004CF2 E8F1D9FFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2257 00004CF7 FFC9                <1>     dec ecx
  2258 00004CF9 75F2                <1>     jnz .conDevLp
  2259                              <1> .conDevExit:
  2260 00004CFB 58                  <1>     pop rax ;Get initial ecx back into eax
  2261 00004CFC 29C8                <1>     sub eax, ecx
  2262 00004CFE E86FDEFFFF          <1>     call vConRetDriver
  2263 00004D03 E912020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2264                              <1> .exitFail:
  2265 00004D08 B805000000          <1>     mov eax, errAccDen
  2266 00004D0D F9                  <1>     stc
  2267                              <1>     return
    13                              <2> %%_ret:
    14 00004D0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2268                              <1> writeDiskFile:
  2269                              <1>     ;rdi has SFT ptr
  2270 00004D0F 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2271 00004D15 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk 
  2272 00004D1C C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Write operation
  2273 00004D23 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2274 00004D29 0F85A3010000        <1>     jnz .badExit
  2275 00004D2F 85C9                <1>     test ecx, ecx
  2276 00004D31 7505                <1>     jnz .nonZeroWrite
  2277 00004D33 B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0, check for no locks
  2278                              <1> .nonZeroWrite:
  2279                              <1>     ;Now do share check here
  2280 00004D38 E8BC310000          <1>     call retryShareIODelay
  2281 00004D3D 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2282 00004D3F E84C320000          <1>     call shareCheckWriteLockViolation
  2283 00004D44 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2284                              <1>     return  ;Else return with CF=CY
    13                              <2> %%_ret:
    14 00004D46 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2285                              <1> .proceedWithWrite:
  2286                              <1> ;Ensure that we update the directory entry after this write
  2287 00004D47 66816705BFBF        <1>     and word [rdi + sft.wDeviceInfo], ~(charDevNoEOF|blokNoDTonClose)
  2288                              <1> ;Ensure that all buffers are now unreferenced
  2289 00004D4D E887B9FFFF          <1>     call markBuffersAsUnreferencedWrapper
  2290 00004D52 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2291                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2292 00004D55 85C0                <1>     test eax, eax
  2293 00004D57 7516                <1>     jnz .notStart
  2294 00004D59 E89ABDFFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2295                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004D5E 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004D60 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2296 00004D61 3DFFFFFFFF          <1>     cmp eax, -1         ;Disk full?
  2297 00004D66 0F8455010000        <1>     je .diskFullExit
  2298                              <1>     ;Now eax has the first cluster of chain
  2299 00004D6C 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2300                              <1> .notStart:
  2301                              <1> ;eax has the start cluster of the file
  2302                              <1> ;Now we go to CurntOff
  2303 00004D6F 8905(54070000)      <1>     mov dword [currClustD], eax ;Store in var
  2304 00004D75 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2305 00004D7B 85D2                <1>     test edx, edx   ;If the fileptr is in the first cluster, already there
  2306 00004D7D 7442                <1>     jz .atCluster
  2307 00004D7F E87E000000          <1>     call .walkFAT   ;Walks the fat, gets the next cluster in eax
  2308                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004D84 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004D86 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2309 00004D87 3DFFFFFFFF          <1>     cmp eax, -1     ;Not EOC, eax = the cluster we need to be at
  2310 00004D8C 7533                <1>     jne .atCluster
  2311 00004D8E 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
  2312 00004D95 7505                <1>     jne .haveFreeClustCnt
  2313 00004D97 E837BEFFFF          <1>     call findFreeClusterData
  2314                              <1> .haveFreeClustCnt:
  2315 00004D9C 395531              <1>     cmp dword [rbp + dpb.dFreeClustCnt], edx
  2316 00004D9F 0F821C010000        <1>     jb .diskFullExit
  2317                              <1>     ;Here we know we have enough cluster to allocate to the file,
  2318                              <1>     ; so just roll with it. 
  2319 00004DA5 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get the current disk cluster 
  2320 00004DAB 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2321 00004DAD 89D1                <1>     mov ecx, edx    ;Allocate the remainder of clusters!
  2322 00004DAF E873BDFFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2323                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004DB4 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004DB6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2324 00004DB7 89D8                <1>     mov eax, ebx    ;Move the start sector for the walk back
  2325 00004DB9 E844000000          <1>     call .walkFAT   ;Walks the fat, gets the next cluster in eax
  2326                              <1>     retc    
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004DBE 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004DC0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2327                              <1> .atCluster:
  2328                              <1> ;Fall here with the sector number in eax
  2329 00004DC1 E8B5BCFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2330                              <1>     ;Now we add the offset to this
  2331 00004DC6 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2332 00004DCD 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2333 00004DD0 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2334 00004DD7 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2335 00004DDD 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2336 00004DDF 753C                <1>     jnz .mainWrite  
  2337                              <1> ;Here we have a zero byte write, so either truncate or have an extend.
  2338                              <1> ;Zero byte writes do not sanitise! Filesize=Filepointer in this case
  2339                              <1> ;CurrentOffset < Filesize means truncate. Else, we extend.
  2340 00004DE1 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2341 00004DE4 3B4717              <1>     cmp eax, dword [rdi + sft.dFileSize]
  2342 00004DE7 7311                <1>     jae .extend
  2343                              <1> ;Here we truncate!
  2344 00004DE9 8B05(54070000)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2345 00004DEF E8B8BEFFFF          <1>     call truncateFAT    ;Truncate from current cluster setting it to EOC
  2346                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004DF4 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004DF6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2347 00004DF7 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2348                              <1> .extend:
  2349 00004DFA 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2350 00004DFD E9D7000000          <1>     jmp .noByteExit ;Exit ok!
  2351                              <1> .walkFAT:
  2352                              <1> ;Input: eax = Cluster to start walking from
  2353                              <1> ;Output: If eax = -1: currClustD is the cluster we just read
  2354                              <1> ;        Else: currClustD = eax is the cluster value we are at
  2355                              <1> ;       edx = Number of clusters left (0 or #toAllocate)
  2356                              <1> ;If CF=CY, hard error, fail!
  2357 00004E02 E806BFFFFF          <1>     call readFAT
  2358                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004E07 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004E09 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2359 00004E0A 3DFFFFFFFF          <1>     cmp eax, -1 ;Is the next cluster an EOC?
  2360 00004E0F 740A                <1>     je .wFatExit    ;Return if so
  2361 00004E11 8905(54070000)      <1>     mov dword [currClustD], eax     ;Else, save eax as current cluster
  2362 00004E17 FFCA                <1>     dec edx                         ;Decrement counter
  2363 00004E19 75E7                <1>     jnz .walkFAT                    ;If we still have to walk, do it again!
  2364                              <1> .wFatExit:
  2365 00004E1B F8                  <1>     clc ;Dont remove, need this because of the compare above!!
  2366                              <1>     return
    13                              <2> %%_ret:
    14 00004E1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2367                              <1> .mainWrite:
  2368                              <1> ;Must intervene here for direct writes (if the handle specifies no buffering)
  2369 00004E1D E83CFDFFFF          <1>     call diskIOGetBuffer
  2370 00004E22 0F82AA000000        <1>     jc .badExit
  2371 00004E28 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2372 00004E2C 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2373 00004E33 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2374                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2375                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2376                              <1>     ; 3) Number of bytes left free in the sector
  2377 00004E36 31C0                <1>     xor eax, eax
  2378 00004E38 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2379 00004E3C 89D8                <1>     mov eax, ebx
  2380 00004E3E 662B05(65070000)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2381 00004E45 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]
  2382                              <1> 
  2383 00004E4B 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2384 00004E4D 0F47CB              <1>     cmova ecx, ebx
  2385 00004E50 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2386 00004E52 0F47C8              <1>     cmova ecx, eax
  2387                              <1> 
  2388 00004E55 56                  <1>     push rsi
  2389 00004E56 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
  2390 00004E5D 51                  <1>     push rcx
  2391 00004E5E F3A4                <1>     rep movsb
  2392 00004E60 59                  <1>     pop rcx
  2393 00004E61 E82BBAFFFF          <1>     call markBufferDirty   ;Preserves all CPU state, this buffer is now dirty
  2394                              <1> 
  2395 00004E66 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2396 00004E6C 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2397 00004E72 488935(17040000)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2398 00004E79 5E                  <1>     pop rsi
  2399                              <1> 
  2400 00004E7A 8B05(73070000)      <1>     mov eax, dword [tfrLen] ;Get total length
  2401 00004E80 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2402 00004E86 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2403 00004E88 745A                <1>     jz writeExit
  2404 00004E8A 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2404 00004E92 00                  <1>
  2405 00004E93 E8B6BDFFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2406 00004E98 7238                <1>     jc .badExit
  2407 00004E9A 7581                <1>     jnz .mainWrite   ;Else, rax = Next sector to write to
  2408                              <1>     ;Here we need to extend by a cluster since we are at the end of the 
  2409                              <1>     ; current allocation chain
  2410 00004E9C 8B1D(54070000)      <1>     mov ebx, dword [currClustD] ;Setup last cluster value in ebx
  2411 00004EA2 B901000000          <1>     mov ecx, 1  ;Append one more cluster to it!
  2412 00004EA7 E87BBCFFFF          <1>     call allocateClusters
  2413 00004EAC 7224                <1>     jc .badExit
  2414 00004EAE 3DFFFFFFFF          <1>     cmp eax, -1 ;If we cannot allocate any more clusters, disk full!
  2415 00004EB3 740C                <1>     je .diskFullExit  ;End write in this case!
  2416                              <1> ;Else we just allocated a new cluster to the chain, so we have a sector to 
  2417                              <1> ; write to! 
  2418                              <1> ;The cluster state has not changed due to the allocate clusters call.
  2419 00004EB5 E894BDFFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2420 00004EBA 7216                <1>     jc .badExit
  2421 00004EBC E95CFFFFFF          <1>     jmp .mainWrite    ;rax = Next sector to write to
  2422                              <1> .diskFullExit:
  2423 00004EC1 56                  <1>     push rsi
  2424 00004EC2 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2425 00004EC9 66F746020020        <1>     test word [rsi + sft.wOpenMode], diskFullFail
  2426 00004ECF 5E                  <1>     pop rsi
  2427 00004ED0 7412                <1>     jz writeExit    ;If no trigger Int 24h, return success
  2428                              <1>     ;Here we future proof for triggering Int 24h.
  2429                              <1> .badExit:
  2430 00004ED2 B805000000          <1>     mov eax, errAccDen
  2431 00004ED7 F9                  <1>     stc
  2432                              <1>     return
    13                              <2> %%_ret:
    14 00004ED8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2433                              <1> .noByteExit:
  2434 00004ED9 B802000000          <1>     mov eax, 2  ;Update last accessed fields of SFT
  2435 00004EDE FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2436                              <1> writeExit:
  2437                              <1> ;Advances the bytes on the file pointer
  2438                              <1> ;Return: ecx = Number of bytes transferred
  2439 00004EE4 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2440 00004EEB E84A000000          <1>     call updateCurrentSFT
  2441 00004EF0 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2442 00004EF6 7515                <1>     jnz .exit   ;These just exit as no filesize!
  2443 00004EF8 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush
  2444 00004EFA 7411                <1>     jz .exit
  2445 00004EFC 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2446                              <1> ;Now replace the filesize with the currentoffset if it is greater
  2447 00004F02 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2448 00004F05 394717              <1>     cmp dword [rdi + sft.dFileSize], eax    
  2449 00004F08 7303                <1>     jae .exit
  2450 00004F0A 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2451                              <1> .exit:
  2452 00004F0D B801000000          <1>     mov eax, 1  ;Give it one last update of the data in the directory!
  2453 00004F12 FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2454 00004F18 F8                  <1>     clc
  2455                              <1>     return
    13                              <2> %%_ret:
    14 00004F19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2456                              <1> writeExitChar:
  2457                              <1> ;Input: eax = Number of chars transferred
  2458 00004F1A 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2459 00004F20 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2460 00004F22 890D(77070000)      <1>     mov dword [tfrCntr], ecx
  2461 00004F28 EBBA                <1>     jmp short writeExit
  2462                              <1> ;-----------------------------------:
  2463                              <1> ;        File Handle routines       :
  2464                              <1> ;-----------------------------------:
  2465                              <1> 
  2466                              <1> setCurrentSFT:
  2467                              <1> ;Set the pointer in rdi as current SFT 
  2468 00004F2A 48893D(32070000)    <1>     mov qword [currentSFT], rdi
  2469                              <1>     return 
    13                              <2> %%_ret:
    14 00004F31 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2470                              <1> getCurrentSFT:
  2471                              <1> ;Get the current SFT pointer in rdi
  2472 00004F32 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2473                              <1>     return 
    13                              <2> %%_ret:
    14 00004F39 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2474                              <1> updateCurrentSFT:
  2475                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2476                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2477 00004F3A 57                  <1>     push rdi
  2478 00004F3B 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2479                              <1> ;Get in ecx the number of bytes we xferred
  2480 00004F42 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2481 00004F48 F7D9                <1>     neg ecx ;Multiply by -1
  2482 00004F4A 030D(73070000)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2483                              <1> ;ecx has bytes transferred
  2484 00004F50 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2485 00004F56 751D                <1>     jnz .exit
  2486                              <1> ;Down here for disk files only!
  2487 00004F58 50                  <1>     push rax
  2488 00004F59 8B05(54070000)      <1>     mov eax, dword [currClustD]
  2489 00004F5F 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2490 00004F62 8B05(50070000)      <1>     mov eax, dword [currClustF]
  2491 00004F68 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2492 00004F6B 8B05(67070000)      <1>     mov eax, dword [currByteF]
  2493 00004F71 89471B              <1>     mov dword [rdi + sft.dCurntOff], eax
  2494 00004F74 58                  <1>     pop rax
  2495                              <1> .exit:
  2496 00004F75 5F                  <1>     pop rdi
  2497 00004F76 F8                  <1>     clc
  2498                              <1>     return 
    13                              <2> %%_ret:
    14 00004F77 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2499                              <1> 
  2500                              <1> setupVarsForTransfer:
  2501                              <1> ;Computes the actual bytes to be transferred and 
  2502                              <1> ; sets up internal variables for the transfer. 
  2503                              <1> ;Works for both reading and writing
  2504                              <1> ;Input: ecx = User desired Bytes to transfer
  2505                              <1> ;       rdi = SFT pointer for the file
  2506                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2507                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2508                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2509                              <1> ;
  2510                              <1> ;Note: Does not account for a FULL disk. When writing,
  2511                              <1> ; if the disk will get full as a result of the write,
  2512                              <1> ; stop at the last byte before the transfer. If the 
  2513                              <1> ; file pointer is past the last free byte, write 0
  2514 00004F78 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2515 00004F7C 488935(0A070000)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2516 00004F83 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2517 00004F86 8905(67070000)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2518 00004F8C 890D(73070000)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2519 00004F92 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2520 00004F98 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2521                              <1>     retnz   ;Redir and char devices leave here
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004F9E 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004FA0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2522                              <1> ;Disk files...
  2523 00004FA1 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2524 00004FA4 8905(67070000)      <1>     mov dword [currByteF], eax
  2525 00004FAA 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2526                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2527 00004FAE 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2528 00004FB5 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2529 00004FB8 881D(09070000)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2530 00004FBE 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2531 00004FC4 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2532 00004FC8 31D2                <1>     xor edx, edx    ;Zero rdx
  2533 00004FCA F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2534                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2535                              <1>     ;edx has the offset into that sector
  2536 00004FCC 8905(58070000)      <1>     mov dword [currSectF], eax
  2537 00004FD2 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2538 00004FD9 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2539 00004FDB 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2540 00004FDE 8805(5C070000)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2541 00004FE4 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2542 00004FE6 8A4D05              <1>     mov cl, byte [rbp + dpb.bSecPerClustShift]
  2543 00004FE9 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2544 00004FEB 8915(50070000)      <1>     mov dword [currClustF], edx ;Save in var
  2545 00004FF1 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2546                              <1>     return 
    13                              <2> %%_ret:
    14 00004FF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2547                              <1> 
  2548                              <1> findFreeSFT:
  2549                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2550                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2551                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2552                              <1> ;        CF=CY => eax = errNhl, error exit
  2553 00004FF4 31DB                <1>     xor ebx, ebx
  2554                              <1> .mainLp:
  2555 00004FF6 53                  <1>     push rbx    ;Save the sft ndx
  2556 00004FF7 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2557 00004FFC 5B                  <1>     pop rbx
  2558 00004FFD 7307                <1>     jnc .sftExists
  2559 00004FFF B804000000          <1>     mov eax, errNhl
  2560 00005004 F9                  <1>     stc
  2561                              <1>     return
    13                              <2> %%_ret:
    14 00005005 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2562                              <1> .sftExists:
  2563 00005006 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2564 0000500B 7427                <1>     je .sftFound
  2565 0000500D 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2566 00005012 751C                <1>     jne .gotoNextNdx
  2567                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2568 00005014 53                  <1>     push rbx
  2569 00005015 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2570 0000501C 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2571 00005020 750B                <1>     jne .netGoToNextNdx
  2572 00005022 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2573 00005029 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2574                              <1> .netGoToNextNdx:
  2575 0000502D 5B                  <1>     pop rbx
  2576 0000502E 7404                <1>     je .sftFound
  2577                              <1> .gotoNextNdx:
  2578 00005030 FFC3                <1>     inc ebx
  2579 00005032 EBC2                <1>     jmp short .mainLp
  2580                              <1> .sftFound:
  2581 00005034 53                  <1>     push rbx
  2582 00005035 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2583 0000503A 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2584 00005041 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2585 00005045 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2586 0000504C 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2587 00005050 5B                  <1>     pop rbx
  2588 00005051 F8                  <1>     clc
  2589                              <1>     return
    13                              <2> %%_ret:
    14 00005052 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2590                              <1> getSFTPtrfromSFTNdx:    ;Int 2Fh AX=1216h
  2591                              <1> ;Return a pointer to the SFT entry in rdi
  2592                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2593                              <1> ;Output: rdi = SFT pointer
  2594 00005053 488B3D(43000000)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2595                              <1> .walk:
  2596 0000505A 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2597 0000505E 7212                <1>     jb .thisTable
  2598 00005060 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2599 00005064 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2600 00005067 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2601 0000506E 75EA                <1>     jne .walk
  2602 00005070 F9                  <1>     stc
  2603                              <1>     return
    13                              <2> %%_ret:
    14 00005071 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2604                              <1> .thisTable:
  2605 00005072 50                  <1>     push rax
  2606 00005073 52                  <1>     push rdx
  2607 00005074 B84F000000          <1>     mov eax, sft_size
  2608 00005079 F7E3                <1>     mul ebx
  2609 0000507B 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2610 0000507E 5A                  <1>     pop rdx
  2611 0000507F 58                  <1>     pop rax
  2612 00005080 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2613                              <1>     return
    13                              <2> %%_ret:
    14 00005087 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2614                              <1> getJFTPtr:    ;Int 2Fh AX=1220h
  2615                              <1> ;Return a zero extended value in rdi for the SFT entry
  2616                              <1> ;Input: bx = JFT handle (we zero extend)
  2617                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2618                              <1> ;        CF=CY => al = Error code, Fail
  2619 00005088 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2620 0000508B 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
  2621 00005092 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  2622 00005096 7204                <1>     jb .ok
  2623 00005098 B006                <1>     mov al, errBadHdl
  2624 0000509A F9                  <1>     stc
  2625                              <1>     return
    13                              <2> %%_ret:
    14 0000509B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2626                              <1> .ok:
  2627 0000509C 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  2628 000050A2 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  2629 000050A4 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  2630 000050A6 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  2631 000050AA 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  2632 000050AE EB0B                <1>     jmp short .pspOkExit
  2633                              <1> .pspJftBelow:
  2634 000050B0 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  2635                              <1> .pspJftOk:
  2636 000050B6 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2637                              <1> .pspOkExit:
  2638 000050BB F8                  <1>     clc
  2639                              <1>     return
    13                              <2> %%_ret:
    14 000050BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2640                              <1> findFreeJFTEntry:
  2641                              <1> ;Finds a free JFT entry in the currentPSP.
  2642                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2643                              <1> ;        CF=CY => al=errNhl
  2644 000050BD 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2645                              <1> .searchLp:
  2646 000050BF E8C4FFFFFF          <1>     call getJFTPtr
  2647 000050C4 720A                <1>     jc .badExit
  2648 000050C6 803FFF              <1>     cmp byte [rdi], -1
  2649                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000050C9 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000050CB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2650 000050CC FFC3                <1>     inc ebx
  2651 000050CE EBEF                <1>     jmp short .searchLp
  2652                              <1> .badExit:
  2653 000050D0 B004                <1>     mov al, errNhl
  2654 000050D2 F9                  <1>     stc
  2655                              <1>     return
    13                              <2> %%_ret:
    14 000050D3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2656                              <1> getSFTPtr:
  2657                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2658                              <1> ;Input: bx = JFT handle
  2659                              <1> ;Output: CF=NC: rdi = SFT pointer
  2660                              <1> ;        CF=CY: Error, ax=Error code
  2661 000050D4 E817000000          <1>     call derefSFTPtr
  2662                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000050D9 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000050DB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2663 000050DC 50                  <1>     push rax
  2664 000050DD 0FB705(43040000)    <1>     movzx eax, word [machineNum]
  2665 000050E4 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2666 000050E8 58                  <1>     pop rax
  2667                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000050E9 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000050EB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2668 000050EC B006                <1>     mov al, errBadHdl   ;Error code
  2669 000050EE F9                  <1>     stc         ;Reset CF
  2670                              <1>     return
    13                              <2> %%_ret:
    14 000050EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2671                              <1> 
  2672                              <1> derefSFTPtr:
  2673                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2674                              <1> ;Input: bx = File handle (gets zero extended)
  2675                              <1> ;Output: CF=NC: rdi = SFT pointer
  2676                              <1> ;        CF=CY: Error, ax=Error code
  2677 000050F0 E893FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2678 000050F5 7205                <1>     jb .fail
  2679 000050F7 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2680 000050FA 7504                <1>     jne .ok
  2681                              <1> .fail:
  2682 000050FC B006                <1>     mov al, errBadHdl
  2683 000050FE F9                  <1>     stc
  2684                              <1>     return
    13                              <2> %%_ret:
    14 000050FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2685                              <1> .ok:
  2686 00005100 53                  <1>     push rbx    ;Preserve the JFT handle
  2687 00005101 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2688 00005104 E84AFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2689 00005109 5B                  <1>     pop rbx 
  2690                              <1>     return
    13                              <2> %%_ret:
    14 0000510A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2691                              <1> 
  2692                              <1> getSFTndxInheritable:
  2693                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2694                              <1> ;Input: ebx = SFTndx (word)
  2695                              <1> ;Output: 
  2696                              <1> ;   ZF=ZE => Inheritable
  2697                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2698 0000510B 57                  <1>     push rdi
  2699 0000510C E842FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2700 00005111 7208                <1>     jc .badNdx
  2701 00005113 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2702 00005119 5F                  <1>     pop rdi
  2703                              <1>     return
    13                              <2> %%_ret:
    14 0000511A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2704                              <1> .badNdx:
  2705 0000511B 31FF                <1>     xor edi, edi
  2706 0000511D FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2707 0000511F F8                  <1>     clc
  2708 00005120 5F                  <1>     pop rdi
  2709                              <1>     return
    13                              <2> %%_ret:
    14 00005121 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2710                              <1> 
  2711                              <1> incrementOpenCount:
  2712                              <1> ;Given a SFTndx, this function will increment it's open count
  2713                              <1> ;Output:
  2714                              <1> ;   CF=NC => sftndx ok, count incremented
  2715                              <1> ;   CF=CY => Bad ndx
  2716 00005122 57                  <1>     push rdi
  2717 00005123 E82BFFFFFF          <1>     call getSFTPtrfromSFTNdx
  2718 00005128 7203                <1>     jc .exit
  2719 0000512A 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2720                              <1> .exit:
  2721 0000512D 5F                  <1>     pop rdi
  2722                              <1>     return
    13                              <2> %%_ret:
    14 0000512E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2723                              <1> 
  2724                              <1> decrementOpenCount: ;Int 2Fh AX = 1208h
  2725                              <1> ;Input: rdi = SFT pointer
  2726                              <1> ;Output: ax = Original wNumHandles count (zero extended to eax)
  2727 0000512F 9C                  <1>     pushfq
  2728 00005130 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2729 00005133 FFC8                <1>     dec eax     ;Decrement count
  2730 00005135 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2731 00005137 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2732                              <1> .exit:
  2733 00005139 9D                  <1>     popfq
  2734 0000513A 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2735                              <1>     return
    13                              <2> %%_ret:
    14 0000513D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2736                              <1> 
  2737                              <1> ;Buffer Wrapper
  2738                              <1> writeThroughBuffersForHandle:
  2739                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2740 0000513E 57                  <1>     push rdi
  2741 0000513F 55                  <1>     push rbp
  2742 00005140 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2743 00005147 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2744 0000514D 751C                <1>     jnz .exit
  2745 0000514F FF35(0A070000)      <1>     push qword [workingDPB]
  2746 00005155 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2747 00005159 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2748 00005160 E8B7B5FFFF          <1>     call flushAllBuffersForDPB
  2749 00005165 8F05(0A070000)      <1>     pop qword [workingDPB]
  2750                              <1> .exit:
  2751 0000516B 5D                  <1>     pop rbp
  2752 0000516C 5F                  <1>     pop rdi
  2753                              <1>     return
    13                              <2> %%_ret:
    14 0000516D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2754                              <1> 
  2755                              <1> setDPBfromSFT:
  2756                              <1> ;Sets and updates the DPB from an SFT ptr
  2757                              <1> ;Input: rdi -> sft
  2758                              <1> ;Output: CF=NC: workingDPB set
  2759                              <1> ;        CF=CY: Error fail, exit
  2760 0000516E 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get the DPB ptr in rbp
  2761 00005172 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]
  2762 00005176 8805(09070000)      <1>     mov byte [workingDrv], al
  2763 0000517C E828200000          <1>     call setWorkingDPB
  2764 00005181 E8E31D0000          <1>     call ensureDiskValid
  2765                              <1>     return
    13                              <2> %%_ret:
    14 00005186 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                                  %include "./src/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35 00005187 3C0F                <1>     cmp al, 15
    36 00005189 7747                <1>     ja .invalidFunction
    37 0000518B 84C0                <1>     test al, al
    38 0000518D 745B                <1>     jz .getDevWord
    39 0000518F 3C01                <1>     cmp al, 1
    40 00005191 746E                <1>     je .setDevWord
    41 00005193 2C02                <1>     sub al, 2
    42 00005195 3C03                <1>     cmp al, 3
    43 00005197 7673                <1>     jbe .ioctlStringFunctions
    44 00005199 2C04                <1>     sub al, 4
    45 0000519B 3C01                <1>     cmp al, 1
    46 0000519D 0F8644010000        <1>     jbe .ioStatusFunctions
    47 000051A3 2C02                <1>     sub al, 2
    48 000051A5 3C02                <1>     cmp al, 2
    49 000051A7 0F86CD010000        <1>     jbe .devControl
    50 000051AD 2C03                <1>     sub al, 3
    51 000051AF 0F8498020000        <1>     jz .setSharingCount
    52 000051B5 FEC8                <1>     dec al
    53 000051B7 0F84AE020000        <1>     jz .genericCharDevIOCTL
    54 000051BD FEC8                <1>     dec al
    55 000051BF 0F84D4020000        <1>     jz .genericBlokDevIOCTL
    56 000051C5 FEC8                <1>     dec al
    57 000051C7 0F847B030000        <1>     jz .getDrvLogicalDevice
    58 000051CD E9D6030000          <1>     jmp .setDrvLogicalDevice
    59                              <1> .invalidFunction:
    60 000051D2 B801000000          <1>     mov eax, errInvFnc
    61                              <1> .ifExit:
    62 000051D7 E93A250000          <1>     jmp extErrExit
    63                              <1> .accessDeniedError:
    64 000051DC B805000000          <1>     mov eax, errAccDen
    65 000051E1 EBF4                <1>     jmp short .ifExit
    66                              <1> .badHandle:
    67 000051E3 B806000000          <1>     mov eax, errBadHdl
    68 000051E8 EBED                <1>     jmp short .ifExit
    69                              <1> 
    70                              <1> ;...Functions...
    71                              <1> .getDevWord:
    72                              <1> ;Input: bx = File Handle
    73 000051EA E801FFFFFF          <1>     call derefSFTPtr
    74 000051EF 72F2                <1>     jc .badHandle
    75 000051F1 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    76 000051F5 30C0                <1>     xor al, al
    77 000051F7 E849200000          <1>     call getUserRegs
    78 000051FC 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00005200 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .setDevWord:
    81                              <1> ;Input: bx = File Handle
    82                              <1> ;       dl = Low byte of Device information word
    83 00005201 E8EAFEFFFF          <1>     call derefSFTPtr
    84 00005206 72DB                <1>     jc .badHandle 
    85 00005208 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    86                              <1>     return
    13                              <2> %%_ret:
    14 0000520B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> .ioctlStringFunctions:
    88                              <1> ;al = 0 -> ReadCharDev
    89                              <1> ;al = 1 -> WriteCharDev
    90                              <1> ;al = 2 -> ReadDiskDev
    91                              <1> ;al = 3 -> WriteDiskDev
    92                              <1> ;Input: bx = File handle/drive number
    93                              <1> ;       ecx = Bytes to transfer
    94                              <1> ;       rdx = Ptr to string to transfer
    95 0000520C 0FB6F3              <1>     movzx esi, bl
    96 0000520F 488D1D(C1040000)    <1>     lea rbx, primReqPkt
    97 00005216 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    98 0000521D C605(68040000)00    <1>     mov byte [Int24bitfld], 0
    99                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   100                              <1> ;Setup the common ioReqPkt fields and the read/write 
   101 00005224 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   102 00005227 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103 0000522A 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   104 0000522E 51                  <1>     push rcx
   105 0000522F 52                  <1>     push rdx
   106 00005230 B903000000          <1>     mov ecx, drvIOCTLREAD
   107 00005235 BA0C000000          <1>     mov edx, drvIOCTLWRITE
   108 0000523A A801                <1>     test al, 1  ;If set, this is a write operation
   109 0000523C 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   110 0000523F 7507                <1>     jnz .notWrite
   111 00005241 800D(68040000)01    <1>     or byte [Int24bitfld], critWrite
   112                              <1> .notWrite:
   113 00005248 5A                  <1>     pop rdx
   114 00005249 59                  <1>     pop rcx
   115 0000524A 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   116 0000524D 3C01                <1>     cmp al, 1
   117 0000524F 772F                <1>     ja .ioctlStringBlockDevice
   118                              <1>     ;Here we are for char devices only
   119 00005251 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   120 00005254 E897FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   121 00005259 7288                <1>     jc .badHandle 
   122 0000525B C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   123 00005262 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   124 00005268 0F8464FFFFFF        <1>     jz .invalidFunction
   125                              <1> 
   126 0000526E 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   127 00005272 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   128 00005279 4887DE              <1>     xchg rbx, rsi   ;Swap back
   129 0000527C 31C0                <1>     xor eax, eax
   130 0000527E EB38                <1>     jmp short .ioctlStringCommon
   131                              <1> .ioctlStringBlockDevice:
   132                              <1>     ;Here we are for block devices only
   133                              <1>     ;esi has the drive number
   134 00005280 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   135 00005287 89F0                <1>     mov eax, esi
   136 00005289 53                  <1>     push rbx
   137 0000528A E84A200000          <1>     call getCDS ;Returns in al the unit number of the drive
   138 0000528F 5B                  <1>     pop rbx
   139 00005290 730A                <1>     jnc .okDrive
   140 00005292 B80F000000          <1>     mov eax, errBadDrv
   141 00005297 E97A240000          <1>     jmp extErrExit
   142                              <1> .okDrive:
   143 0000529C 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   144 000052A3 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   145 000052A7 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   146 000052AA 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   147 000052AD 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   148 000052B1 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   149 000052B4 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   150                              <1> .ioctlStringCommon:
   151                              <1>     ;rsi -> Device Driver header
   152                              <1>     ;rbx -> Request Header
   153                              <1>     ;al = Media descriptor
   154 000052B8 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   155 000052BB 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   156 000052C1 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   157                              <1>     ;Make request now
   158 000052C7 51                  <1>     push rcx    ;Push xfrctr
   159 000052C8 52                  <1>     push rdx    ;Buffer Ptr
   160 000052C9 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   161 000052CF E8D11A0000          <1>     call goDriver
   162 000052D4 5A                  <1>     pop rdx
   163 000052D5 59                  <1>     pop rcx
   164                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   165 000052D6 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   166 000052DC 0F8426240000        <1>     jz extGoodExit
   167 000052E2 E91B030000          <1>     jmp failIOCTLCall
   168                              <1> 
   169                              <1> .ioStatusFunctions:
   170                              <1> ;al = 0 -> Get input status 
   171                              <1> ;al = 1 -> Get output status
   172 000052E7 E804FEFFFF          <1>     call derefSFTPtr
   173 000052EC 0F82F1FEFFFF        <1>     jc .badHandle 
   174 000052F2 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   175 000052F9 C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   176 000052FC C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   177 00005303 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   178 00005309 0F85C3FEFFFF        <1>     jnz .invalidFunction
   179 0000530F C605(68040000)00    <1>     mov byte [Int24bitfld], 0
   180 00005316 B906000000          <1>     mov ecx, drvINSTATUS
   181 0000531B BA0A000000          <1>     mov edx, drvOUTSTATUS
   182 00005320 84C0                <1>     test al, al
   183 00005322 0F45CA              <1>     cmovnz ecx, edx
   184 00005325 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   185 00005328 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   186 0000532E 7416                <1>     jz .ioStatDisk
   187 00005330 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   188 00005337 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   189 0000533E 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   190 00005342 30C0                <1>     xor al, al
   191 00005344 EB15                <1>     jmp short .ioStatCommon
   192                              <1> .ioStatDisk:
   193 00005346 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   194 0000534D 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   195 00005351 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   196 00005354 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   197 00005357 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   198                              <1> .ioStatCommon:
   199 0000535B E8451A0000          <1>     call goDriver
   200 00005360 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   201 00005366 0F8596020000        <1>     jnz failIOCTLCall
   202 0000536C 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   203 00005372 7403                <1>     jz .notBusyExit
   204 00005374 B0FF                <1>     mov al, -1  ;Device Busy/EOF
   205                              <1>     return 
    13                              <2> %%_ret:
    14 00005376 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> .notBusyExit:
   207                              <1> ;Device ready/NotEOF
   208 00005377 31C0                <1>     xor eax, eax
   209                              <1>     return
    13                              <2> %%_ret:
    14 00005379 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> .devControl:
   212                              <1> ;al = 0 -> Is media removable?
   213                              <1> ;al = 1 -> Is device local or remote?
   214                              <1> ;al = 2 -> Is handle local or remote?
   215 0000537A 84C0                <1>     test al, al
   216 0000537C 746D                <1>     jz .remTest
   217 0000537E A801                <1>     test al, 1
   218 00005380 751B                <1>     jnz .deviceTest
   219                              <1> ;Handle Local or Remote
   220 00005382 E869FDFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   221 00005387 0F8256FEFFFF        <1>     jc .badHandle 
   222 0000538D 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   223                              <1> .devControlExit:
   224 00005391 E8AF1E0000          <1>     call getUserRegs
   225 00005396 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   226 0000539A 31C0                <1>     xor eax, eax
   227                              <1>     return 
    13                              <2> %%_ret:
    14 0000539C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   228                              <1> .deviceTest:
   229                              <1> ;Drive Local or Remote
   230                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   231                              <1> ;Else, just get the CDS word and swap subst and net
   232 0000539D 88D8                <1>     mov al, bl
   233 0000539F E8351F0000          <1>     call getCDS
   234 000053A4 730A                <1>     jnc .devTestOkDrive
   235 000053A6 B80F000000          <1>     mov eax, errBadDrv
   236 000053AB E966230000          <1>     jmp extErrExit
   237                              <1> .devTestOkDrive:
   238 000053B0 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   239 000053B7 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   240 000053BB 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   241 000053C0 7513                <1>     jnz .remoteDrive
   242 000053C2 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   243 000053C6 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   244 000053CA 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   245 000053CE 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   246 000053D3 EBBC                <1>     jmp short .devControlExit
   247                              <1> .remoteDrive:
   248 000053D5 6689D3              <1>     mov bx, dx
   249 000053D8 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   250 000053DD 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   251 000053E2 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   252 000053E4 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   253 000053E9 EBA6                <1>     jmp short .devControlExit   ;Store it
   254                              <1> 
   255                              <1> .remTest:
   256                              <1> ;Drive letter in bl
   257 000053EB 88D8                <1>     mov al, bl
   258 000053ED E8E71E0000          <1>     call getCDS
   259 000053F2 730A                <1>     jnc .remTestOkDrive
   260                              <1> .remTestBadDrv:
   261 000053F4 B80F000000          <1>     mov eax, errBadDrv
   262 000053F9 E918230000          <1>     jmp extErrExit
   263                              <1> .remTestOkDrive:
   264 000053FE 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   265 00005405 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   266 0000540B 75E7                <1>     jnz .remTestBadDrv
   267 0000540D 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   268 00005414 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   269 00005418 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   270 0000541B 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   271 0000541F 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   272 00005425 0F84A7FDFFFF        <1>     jz .invalidFunction
   273 0000542B C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   274 0000542E C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   275 00005432 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   276 00005438 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   277 0000543B E865190000          <1>     call goDriver
   278 00005440 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   279 00005444 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   280 00005449 C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   281                              <1>     return
    13                              <2> %%_ret:
    14 0000544C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> .setSharingCount:
   284                              <1> ;Input: cx = Share Count
   285                              <1> ;       dx = Share Retry
   286 0000544D 66890D(1F000000)    <1>     mov word [shareCount], cx
   287 00005454 6685D2              <1>     test dx, dx
   288 00005457 0F8475FDFFFF        <1>     jz .invalidFunction
   289 0000545D 668915(21000000)    <1>     mov word [shareDelay], dx
   290 00005464 31C0                <1>     xor eax, eax
   291 00005466 E99D220000          <1>     jmp extGoodExit
   292                              <1> 
   293                              <1> .genericCharDevIOCTL:
   294 0000546B E864FCFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   295 00005470 7311                <1>     jnc .okHandle
   296                              <1> .ioctrlBadHandle:
   297 00005472 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   298 00005479 B806000000          <1>     mov eax, errBadHdl
   299 0000547E E993220000          <1>     jmp extErrExit
   300                              <1> .okHandle:
   301 00005483 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   302 00005489 75E7                <1>     jnz .ioctrlBadHandle
   303 0000548B 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   304 00005491 74DF                <1>     jz .ioctrlBadHandle
   305 00005493 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   306 00005497 EB49                <1>     jmp short .ioctlReqMake
   307                              <1> .genericBlokDevIOCTL:
   308 00005499 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   309 0000549B 51                  <1>     push rcx
   310 0000549C 52                  <1>     push rdx
   311 0000549D E8371E0000          <1>     call getCDS ;Sets the current CDS
   312 000054A2 5A                  <1>     pop rdx
   313 000054A3 59                  <1>     pop rcx
   314 000054A4 7217                <1>     jc .badDrv
   315                              <1>     ;Check the CDS not net, subst or join
   316 000054A6 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   317 000054AD 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   318 000054B1 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   319 000054B5 7406                <1>     jz .badDrv
   320 000054B7 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   321 000054BB 7411                <1>     jz .goodDrive
   322                              <1> .badDrv:
   323 000054BD C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   324 000054C4 B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   325 000054C9 E948220000          <1>     jmp extErrExit
   326                              <1> .goodDrive:
   327                              <1>     ;CDS is good,now get the DPB
   328 000054CE 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   329 000054D2 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   330 000054D6 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   331 000054D9 8805(C2040000)      <1>     mov byte [primReqPkt + ioctlReqPkt.unitnm], al
   332 000054DF 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   333                              <1> .ioctlReqMake:
   334                              <1> ;rsi must point to the driver header here
   335 000054E2 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   336 000054E8 7511                <1>     jnz .supportsIOCTL
   337                              <1> .badFunction:
   338 000054EA C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   339 000054F1 B801000000          <1>     mov eax, errInvFnc
   340 000054F6 E91B220000          <1>     jmp extErrExit
   341                              <1> .supportsIOCTL:
   342                              <1>     ;Setup the request header
   343 000054FB 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   344 00005502 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   345 00005505 C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   346 00005509 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   347 0000550F 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   348 00005513 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   349 00005517 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   350 0000551A E8261D0000          <1>     call getUserRegs
   351 0000551F 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   352 00005523 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   353 00005527 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   354 0000552B 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   355 0000552F 4889FE              <1>     mov rsi, rdi
   356 00005532 E86E180000          <1>     call goDriver
   357 00005537 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   358 0000553D 0F84C5210000        <1>     jz extGoodExit
   359 00005543 E9BA000000          <1>     jmp failIOCTLCall
   360                              <1> 
   361                              <1> .getDrvLogicalDevice:
   362 00005548 88D8                <1>     mov al, bl
   363 0000554A 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   364 00005551 C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   365 00005555 C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   366 00005558 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   367 0000555E 53                  <1>     push rbx
   368 0000555F E8751D0000          <1>     call getCDS
   369 00005564 8805(09070000)      <1>     mov byte [workingDrv], al
   370 0000556A 5B                  <1>     pop rbx
   371 0000556B 0F8283FEFFFF        <1>     jc .remTestBadDrv
   372 00005571 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   373 00005578 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   374 0000557C 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   375 00005580 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   376 00005583 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   377                              <1> 
   378 00005586 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   379 0000558C 0F8440FCFFFF        <1>     jz .invalidFunction
   380 00005592 E80E180000          <1>     call goDriver
   381 00005597 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   382 0000559D 7405                <1>     jz .getDrvOk
   383 0000559F E95E000000          <1>     jmp failIOCTLCall
   384                              <1> .getDrvOk:
   385 000055A4 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   386                              <1>     return
    13                              <2> %%_ret:
    14 000055A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .setDrvLogicalDevice:
   388 000055A8 88D8                <1>     mov al, bl
   389 000055AA 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   390 000055B1 C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   391 000055B5 C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   392 000055B8 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   393 000055BE 53                  <1>     push rbx
   394 000055BF E8151D0000          <1>     call getCDS
   395 000055C4 8805(09070000)      <1>     mov byte [workingDrv], al
   396 000055CA 5B                  <1>     pop rbx
   397 000055CB 0F8223FEFFFF        <1>     jc .remTestBadDrv
   398 000055D1 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   399 000055D8 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   400 000055DC 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   401 000055E0 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   402 000055E3 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   403 000055E6 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   404 000055EC 0F84E0FBFFFF        <1>     jz .invalidFunction
   405 000055F2 E8AE170000          <1>     call goDriver
   406 000055F7 30C0                <1>     xor al, al
   407 000055F9 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   408                              <1>     retz    ;Return if OK, else fail
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000055FF 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00005601 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   409                              <1> failIOCTLCall:
   410                              <1> ;Called to fail IOCTL calls that don't trigger Int 24h
   411                              <1> ;rbx -> Driver request packet
   412 00005602 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   413 00005606 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   414 0000560C E84D110000          <1>     call xlatHardError
   415 00005611 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] 
   416 00005618 E9F9200000          <1>     jmp extErrExit
   417                              <1> 
    40                                  %include "./src/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> ;NOTE: 
     7                              <1> ;   If less than 6 paragraphs requested for alloc, allocate 6 paragraphs.
     8                              <1> ;   If between 0 and 6 paras requested for realloc, realloc to 6.
     9                              <1> ;       If 0 requested for realloc, free.
    10                              <1> allocateMemory:    ;ah = 48h
    11                              <1> ;Input: ebx = Number of paragraphs requested
    12                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    13                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    14 0000561D E8A9200000          <1>     call dosCrit1Enter
    15 00005622 B806000000          <1>     mov eax, 6
    16 00005627 39C3                <1>     cmp ebx, eax
    17 00005629 0F42D8              <1>     cmovb ebx, eax
    18 0000562C 31D2                <1>     xor edx, edx
    19                              <1>     ;Clear the pointers
    20 0000562E 488915(45040000)    <1>     mov qword [firstMCB], rdx
    21 00005635 488915(4D040000)    <1>     mov qword [bestMCB], rdx
    22 0000563C 488915(55040000)    <1>     mov qword [lastMCB], rdx
    23 00005643 31ED                <1>     xor ebp, ebp    
    24 00005645 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    25 00005647 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    26                              <1> .walk:
    27 0000564E 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    28 00005651 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    29 00005654 7409                <1>     je .walk1
    30 00005656 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    31 00005659 0F85E5040000        <1>     jne badMCBChain
    32                              <1> .walk1:
    33                              <1>     ;Here if valid but not the last block
    34 0000565F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    35 00005667 0F8582000000        <1>     jne .walk2
    36                              <1>     ;Here we consolidate adjacent free blocks if there are any
    37                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    38                              <1>     ;End consolidation at first non free block or at last block in chain
    39 0000566D 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    40 00005670 744A                <1>     je .det0    ;Determine if this block is useful
    41 00005672 31C9                <1>     xor ecx, ecx
    42 00005674 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    43 00005677 4881C610000000      <1>     add rsi, mcb.program
    44                              <1> .cons0:
    45 0000567E 48C1E104            <1>     shl rcx, 4
    46 00005682 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    47 00005685 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    48 00005688 7409                <1>     je .cons1
    49 0000568A 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    50 0000568D 0F85B1040000        <1>     jne badMCBChain 
    51                              <1> .cons1:
    52 00005693 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 0000569B 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    54                              <1>     ;Here rsi, points to a free block, add it to rdi
    55 0000569D 31C9                <1>     xor ecx, ecx
    56 0000569F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    57 000056A2 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    58 000056A8 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    59 000056AB 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    60 000056AD 31D2                <1>     xor edx, edx
    61 000056AF 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    62 000056B2 48895608            <1>     mov qword [rsi + 8], rdx
    63 000056B6 3C5A                <1>     cmp al, mcbMarkEnd
    64 000056B8 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    65                              <1>     ;Here we deal with if the block was the last one 
    66 000056BA 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    67                              <1> .det0:  ;Now determine if pointer in rdi is useful
    68 000056BC 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    69                              <1> ;ebx must be less than the arena size for the arena to be useful!
    70 000056BF 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    71 000056C2 39D9                <1>     cmp ecx, ebx
    72 000056C4 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    73 000056C6 488935(55040000)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    74 000056CD 488B05(45040000)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    75 000056D4 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    76 000056D7 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    77 000056D9 488935(45040000)    <1>     mov qword [firstMCB], rsi
    78                              <1> .det1:
    79                              <1>     ;Now test for best fit.
    80 000056E0 29D9                <1>     sub ecx, ebx    ;Block - ebx
    81 000056E2 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    82 000056E4 7209                <1>     jb .walk2
    83 000056E6 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    84 000056E8 488935(4D040000)    <1>     mov qword [bestMCB], rsi
    85                              <1> .walk2:
    86 000056EF 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    87 000056F2 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    88 000056F4 31C9                <1>     xor ecx, ecx
    89 000056F6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    90 000056F9 48C1E104            <1>     shl rcx, 4
    91 000056FD 4881C610000000      <1>     add rsi, mcb.program
    92 00005704 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    93 00005707 E942FFFFFF          <1>     jmp .walk
    94                              <1> .allocate:
    95                              <1>     ;Allocation fails IF the pointer is the null pointer
    96 0000570C 803D(D3030000)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    97 00005713 723A                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    98                              <1>     ;Fall thru if last fit
    99 00005715 488B35(55040000)    <1>     mov rsi, qword [lastMCB]
   100 0000571C 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   101 0000571F 0F84A8000000        <1>     jz .allocFail
   102 00005725 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   103 00005727 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   104 0000572A 31C9                <1>     xor ecx, ecx
   105 0000572C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 0000572F 29D9                <1>     sub ecx, ebx
   107 00005731 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   108 00005737 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   109 0000573A 48C1E104            <1>     shl rcx, 4
   110 0000573E 4881C610000000      <1>     add rsi, mcb.program
   111 00005745 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   112 00005748 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   113 0000574A 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   114 0000574D EB56                <1>     jmp short .bfPerfectFit
   115                              <1> .bfCommon:
   116 0000574F 488B35(45040000)    <1>     mov rsi, qword [firstMCB]
   117 00005756 803D(D3030000)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   118 0000575D 480F4435(4D040000)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   119 00005765 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   120 00005768 7463                <1>     jz .allocFail
   121                              <1>     ;Now check if we need to make a "spill over" free MCB
   122 0000576A 31C9                <1>     xor ecx, ecx
   123 0000576C 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]  ;Get current whole block size
   124 0000576F 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   125 00005771 7432                <1>     jz short .bfPerfectFit
   126                              <1>     ;Make the spill over MCB 
   127 00005773 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   128 00005779 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   129 0000577C 8A06                <1>     mov al, byte [rsi + mcb.marker]
   130 0000577E C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   131 00005781 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   132 00005784 4881C710000000      <1>     add rdi, mcb.program
   133 0000578B 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   134 00005791 48C1E304            <1>     shl rbx, 4
   135 00005795 4801DF              <1>     add rdi, rbx
   136 00005798 8807                <1>     mov byte [rdi + mcb.marker], al ;Store old marker in new block
   137 0000579A 48C7470100000000    <1>     mov qword [rdi + mcb.owner], mcbOwnerFree
   138 000057A2 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx
   139                              <1> .bfPerfectFit:
   140                              <1>     ;Now set the current PSP as the owner of this new MCB
   141 000057A5 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   142 000057AC 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   143 000057B0 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   144 000057B7 488D4610            <1>     lea rax, qword [rsi + mcb.program]  ;Point return ptr to program area
   145 000057BB 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   146 000057BE 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 000057C2 E850030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 000057C7 E8091F0000          <1>     call dosCrit1Exit
   149                              <1>     return
    13                              <2> %%_ret:
    14 000057CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   150                              <1> .allocFail:
   151                              <1>     ;Walk the MCB chain to determine the biggest block size
   152 000057CD 488B35(33000000)    <1>     mov rsi, [mcbChainPtr]
   153 000057D4 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   154                              <1> .af0:
   155 000057D6 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   156 000057D9 7409                <1>     je .af1
   157 000057DB 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   158 000057DE 0F8560030000        <1>     jne badMCBChain
   159                              <1> .af1:
   160 000057E4 31C9                <1>     xor ecx, ecx
   161 000057E6 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   162 000057E9 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   163 000057F1 7505                <1>     jne .af2
   164 000057F3 39D9                <1>     cmp ecx, ebx
   165 000057F5 0F47D9              <1>     cmova ebx, ecx
   166                              <1> .af2:
   167 000057F8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   168 000057FB 7410                <1>     je .afExit
   169 000057FD 48C1E104            <1>     shl rcx, 4
   170 00005801 4881C610000000      <1>     add rsi, mcb.program
   171 00005808 4801CE              <1>     add rsi, rcx
   172 0000580B EBD7                <1>     jmp short .af1
   173                              <1> .afExit:
   174 0000580D B808000000          <1>     mov eax, errNoMem
   175 00005812 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   176 00005819 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   177 0000581C E931030000          <1>     jmp mcbErrHdlr
   178                              <1> freeMemory:        ;ah = 49h
   179                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   180                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   181                              <1> ;Always skip the first block as this is the anchor for DOS
   182 00005821 E8A51E0000          <1>     call dosCrit1Enter
   183 00005826 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   184 0000582D 31C9                <1>     xor ecx, ecx
   185 0000582F 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   186 00005836 4889F7              <1>     mov rdi, rsi
   187 00005839 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   188 0000583C 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   189 00005840 4881C610000000      <1>     add rsi, mcb.program
   190 00005847 4801CE              <1>     add rsi, rcx    ;Go to next block
   191                              <1> .mainLoop:
   192 0000584A 31C9                <1>     xor ecx, ecx
   193 0000584C 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   194 0000584F 7409                <1>     je .valid
   195 00005851 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   196 00005854 0F85EA020000        <1>     jne badMCBChain
   197                              <1> .valid:
   198 0000585A 4939F0              <1>     cmp r8, rsi
   199 0000585D 741C                <1>     je .blockFound
   200                              <1>     ;Not valid, check if last block in chain
   201 0000585F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   202 00005862 0F84A5000000        <1>     je .blockError
   203 00005868 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   204 0000586B 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   205 0000586F 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   206 00005876 4801CE              <1>     add rsi, rcx    ;Go to next block
   207 00005879 EBCF                <1>     jmp short .mainLoop
   208                              <1> .blockFound:
   209                              <1>     ;If hole, error.
   210                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   211 0000587B 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   212 00005883 0F8484000000        <1>     je .blockError
   213 00005889 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   214 00005891 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   215 00005899 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   216                              <1>     ;It is, let it absorb this space
   217 0000589B 31C9                <1>     xor ecx, ecx
   218 0000589D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 000058A0 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   220 000058A6 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   221                              <1>     ;Replace block marker
   222 000058A9 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   223 000058AB 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   224 000058AD 31C9                <1>     xor ecx, ecx
   225 000058AF 48890E              <1>     mov qword [rsi], rcx
   226 000058B2 48894E08            <1>     mov qword [rsi + 8], rcx
   227 000058B6 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   228                              <1> .blockFoundCheckFollowing:
   229                              <1>     ;First check if we are the last block in chain
   230 000058B9 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   231 000058BC 7439                <1>     je .blockFoundExit  ;If yes, exit!
   232 000058BE 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   233 000058C1 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 000058C4 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 000058C8 4881C110000000      <1>     add rcx, mcb.program
   236 000058CF 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 000058D2 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   238 000058DA 751B                <1>     jne .blockFoundExit ;If not free, exit
   239                              <1>     ;If free, absorb into block pointed to by rdi
   240 000058DC 31C9                <1>     xor ecx, ecx
   241 000058DE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 000058E1 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 000058E7 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 000058EA 8A06                <1>     mov al, byte [rsi + mcb.marker]
   246 000058EC 8807                <1>     mov byte [rdi + mcb.marker], al
   247 000058EE 31C9                <1>     xor ecx, ecx
   248 000058F0 48890E              <1>     mov qword [rsi], rcx
   249 000058F3 48894E08            <1>     mov qword [rsi + 8], rcx
   250                              <1> .blockFoundExit:
   251 000058F7 E81B020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   252 000058FC E8D41D0000          <1>     call dosCrit1Exit
   253 00005901 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   254 00005908 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   255                              <1>     return
    13                              <2> %%_ret:
    14 0000590C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .blockError:
   257 0000590D C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   258 00005914 B809000000          <1>     mov eax, errMemAddr
   259 00005919 E8F81D0000          <1>     call extErrExit ;Error thru the unified error handler
   260 0000591E E8F4010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   261 00005923 E8AD1D0000          <1>     call dosCrit1Exit
   262                              <1>     return
    13                              <2> %%_ret:
    14 00005928 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> reallocMemory:     ;ah = 4Ah
   264                              <1> ;Input: r8 = address of the block to be realloc'ed
   265                              <1> ;       ebx = How many paras this block should contain after realloc. 
   266                              <1> ;               If ebx = 0, jump to free memory
   267 00005929 E89D1D0000          <1>     call dosCrit1Enter
   268 0000592E 85DB                <1>     test ebx, ebx
   269 00005930 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   270 00005936 B806000000          <1>     mov eax, 6
   271 0000593B 39C3                <1>     cmp ebx, eax    ;Are we trying to resize to less than 6?
   272 0000593D 0F42D8              <1>     cmovb ebx, eax
   273 00005940 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   274 00005947 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   275 0000594A 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   276 0000594D 7409                <1>     je .ctn
   277 0000594F 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   278 00005952 0F856F010000        <1>     jne .badAddrGiven
   279                              <1> .ctn:
   280                              <1>     ;Provided block is valid and not a hole
   281                              <1>     ;Check if Growth or Shrink
   282 00005958 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   283 00005960 74AB                <1>     je freeMemory.blockError
   284 00005962 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   285 00005965 31C9                <1>     xor ecx, ecx
   286 00005967 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   287 0000596A 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   288 0000596C 0F8791000000        <1>     ja .growth
   289 00005972 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   290                              <1> ;We can always shrink
   291 00005978 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   292 0000597A 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   293 00005980 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   294 00005983 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   295 00005989 48C1E304            <1>     shl rbx, 4
   296 0000598D 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   297 00005994 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   298 00005997 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   299 00005999 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   300 0000599C 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   301 0000599E 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   302 000059A6 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   303 000059A9 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   304 000059AB 0F84E6000000        <1>     je .exit
   305                              <1> ;Else, now see if the block following is also free and absorb it
   306 000059B1 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   307 000059B4 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   308 000059B8 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   309 000059BF 4801CE              <1>     add rsi, rcx    ;Goto next arena
   310 000059C2 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   311 000059C5 7409                <1>     je .shrinkAbsorb
   312 000059C7 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   313 000059CA 0F8574010000        <1>     jne badMCBChain
   314                              <1> .shrinkAbsorb:
   315 000059D0 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   316 000059D8 0F85B9000000        <1>     jne .exit
   317                              <1>     ;It is free, absorb it
   318 000059DE 8A06                <1>     mov al, byte [rsi + mcb.marker]
   319 000059E0 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   320 000059E2 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   321 000059E5 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   322 000059E8 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   323 000059EB 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   324 000059EE 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   325 000059F2 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   326 000059F5 31C9                <1>     xor ecx, ecx
   327                              <1>     ;Clear absorbed MCB
   328 000059F7 48890E              <1>     mov qword [rsi], rcx
   329 000059FA 48894E08            <1>     mov qword [rsi + 8], rcx
   330 000059FE E994000000          <1>     jmp .exit
   331                              <1> .growth:
   332                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   333 00005A03 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   334 00005A06 0F84A5000000        <1>     je .notEnuffMem
   335                              <1> ;Now check the following space is free. If not, not enuff mem err
   336 00005A0C 31C9                <1>     xor ecx, ecx
   337 00005A0E 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   338 00005A11 48C1E104            <1>     shl rcx, 4
   339 00005A15 4889F7              <1>     mov rdi, rsi    
   340 00005A18 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   341 00005A1F 4801CE              <1>     add rsi, rcx
   342 00005A22 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 00005A25 7409                <1>     je .growthOK
   344 00005A27 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 00005A2A 0F8514010000        <1>     jne badMCBChain
   346                              <1> .growthOK:
   347                              <1>     ;rdi points to block we are growing
   348 00005A30 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   349 00005A38 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   350                              <1>     ;rsi must own all memory up to the next owned arena
   351 00005A3A 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   352 00005A3C 31C9                <1>     xor ecx, ecx
   353 00005A3E 31D2                <1>     xor edx, edx
   354 00005A40 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   355 00005A43 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   356 00005A49 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   357 00005A4C 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   358 00005A4E 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   359 00005A50 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   360 00005A53 775E                <1>     ja .notEnuffMem1
   361 00005A55 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   362 00005A57 81FA01000000        <1>     cmp edx, 1
   363 00005A5D 744E                <1>     je .notEnuffMem2
   364 00005A5F 31C9                <1>     xor ecx, ecx
   365 00005A61 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   366 00005A64 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   367 00005A68 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   368 00005A6B 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   369 00005A6E 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   370 00005A75 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   371 00005A79 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   372 00005A7C 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   373 00005A80 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   374                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   375                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   376 00005A82 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   377 00005A84 7411                <1>     jz .exit
   378 00005A86 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   379 00005A8C 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   380 00005A8F 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   381                              <1> .exit:
   382 00005A97 E87B000000          <1>     call verifyIntegrityOfMCBChain
   383 00005A9C E8341C0000          <1>     call dosCrit1Exit
   384 00005AA1 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   385 00005AA8 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   386                              <1>     return
    13                              <2> %%_ret:
    14 00005AAC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .notEnuffMem2:
   388 00005AAD FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   389 00005AAF EB02                <1>     jmp short .notEnuffMem1
   390                              <1> .notEnuffMem:
   391 00005AB1 31DB                <1>     xor ebx, ebx    ;No space to grow
   392                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   393 00005AB3 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   394 00005AB8 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   395 00005ABF 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   396 00005AC2 E98B000000          <1>     jmp mcbErrHdlr
   397                              <1> .badAddrGiven:
   398 00005AC7 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   399 00005ACC E981000000          <1>     jmp mcbErrHdlr
   400                              <1> getsetMallocStrat: ;ah = 58h
   401 00005AD1 84C0                <1>     test al, al
   402 00005AD3 741F                <1>     jz .get
   403 00005AD5 3C02                <1>     cmp al, 2
   404 00005AD7 7337                <1>     jae .bad
   405                              <1> ;Set here
   406 00005AD9 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   407 00005AE0 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   408 00005AE4 8805(D3030000)      <1>     mov byte [allocStrat], al   ;Only save low word
   409 00005AEA 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 00005AEE E824000000          <1>     call verifyIntegrityOfMCBChain
   411                              <1>     return
    13                              <2> %%_ret:
    14 00005AF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .get:
   413 00005AF4 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   414 00005AFB 31C0                <1>     xor eax, eax
   415 00005AFD 8A05(D3030000)      <1>     mov al, byte [allocStrat]
   416 00005B03 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   417 00005B06 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   418 00005B0A E808000000          <1>     call verifyIntegrityOfMCBChain
   419                              <1>     return
    13                              <2> %%_ret:
    14 00005B0F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .bad:
   421 00005B10 B801000000          <1>     mov eax, errInvFnc
   422 00005B15 EB3B                <1>     jmp short mcbErrHdlr
   423                              <1> ;-----------------------------------:
   424                              <1> ;      Memory related routines      :
   425                              <1> ;-----------------------------------:
   426                              <1> verifyIntegrityOfMCBChain:
   427 00005B17 50                  <1>     push rax
   428 00005B18 53                  <1>     push rbx
   429 00005B19 488B1D(33000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   430                              <1> .ok:
   431 00005B20 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   432 00005B23 7408                <1>     je .ok1
   433 00005B25 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   434 00005B28 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   435                              <1> .exit:
   436 00005B2A 5B                  <1>     pop rbx
   437 00005B2B 58                  <1>     pop rax
   438                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 00005B2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .ok1:
   440 00005B2D 31C0                <1>     xor eax, eax
   441 00005B2F 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   442 00005B32 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   443 00005B36 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   444 00005B3D 4801C3              <1>     add rbx, rax
   445 00005B40 EBDE                <1>     jmp short .ok
   446                              <1> .bmcbPrep:
   447 00005B42 5B                  <1>     pop rbx ;Pop off the stack first!
   448 00005B43 58                  <1>     pop rax
   449                              <1> badMCBChain:
   450 00005B44 B007                <1>     mov al, errMCBbad   ;Yikes!
   451 00005B46 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   452 00005B4D E9C41B0000          <1>     jmp extErrExit
   453                              <1> mcbErrHdlr:
   454                              <1>     ;Jumped to with eax = error code
   455 00005B52 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   456 00005B59 E8B81B0000          <1>     call extErrExit ;Error thru the unified error handler
   457 00005B5E EBB7                <1>     jmp short verifyIntegrityOfMCBChain  ;Check chain ok if error != errMCBbad
    41                                  %include "./src/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 20h
     7 00005B60 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 00005B62 E9DC190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=00h (which jumps to 21h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 27h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 00005B67 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 00005B6D C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 00005B70 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 21h/AH=31h
    14 00005B75 E9C9190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 00005B7A C605(15050000)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 00005B81 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    34 00005B88 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 00005B8A 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 00005B8B EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 00005B8D 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    43 00005B94 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 00005B98 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 00005B99 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 00005BA0 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 00005BA4 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 00005BA8 4C89C6              <1>     mov rsi, r8
    52 00005BAB 4889D7              <1>     mov rdi, rdx
    53 00005BAE B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 00005BB3 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 00005BB6 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 00005BBE F605(15050000)FF    <1>     test byte [pspCopyFlg], -1
    57 00005BC5 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 00005BC7 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 00005BCF 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 00005BD3 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 00005BD7 31C9                <1>     xor ecx, ecx
    64 00005BD9 B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 00005BDE 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 00005BE2 B0FF                <1>     mov al, -1
    67 00005BE4 F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 00005BE6 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 00005BE8 E89BF4FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 00005BED 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 00005BF0 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 00005BF4 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 00005BF8 67E31C              <1>     jecxz .copy
    77 00005BFB FFC9                <1>     dec ecx
    78 00005BFD AC                  <1>     lodsb   ;Get the SFTndx in al
    79 00005BFE 0FB6D8              <1>     movzx ebx, al
    80 00005C01 53                  <1>     push rbx
    81 00005C02 E804F5FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 00005C07 58                  <1>     pop rax
    83 00005C08 7508                <1>     jnz .badJFT
    84 00005C0A AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 00005C0B E812F5FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 00005C10 EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 00005C12 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 00005C15 EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 00005C17 C605(15050000)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 00005C1E 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 00005C1F 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 00005C22 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt22h]
    96 00005C26 B022                <1>     mov al, 22h
    97 00005C28 E8EA150000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 00005C2D 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 00005C30 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 00005C32 B023                <1>     mov al, 23h
   101 00005C34 E8DE150000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 00005C39 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 00005C3C 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 00005C3E B024                <1>     mov al, 24h
   105 00005C40 E8D2150000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 00005C45 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 00005C48 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 00005C4A 66C702CD20          <1>     mov word [rdx + psp.return], 020CDh  ;Int 20h
   110 00005C4F 66C74250CD21        <1>     mov word [rdx + psp.unixEntry], 021CDh  
   111 00005C55 C64252C3            <1>     mov byte [rdx + psp.unixEntry + 2], 0C3h ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 00005C59 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 00005C5A C605(06070000)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 00005C61 81FA06000000        <1>     cmp edx, 6
   120 00005C67 7305                <1>     jae .aboveMinimum
   121 00005C69 BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 00005C6E 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 00005C75 89D3                <1>     mov ebx, edx
   129 00005C77 50                  <1>     push rax    ;Preserve errorlevel across call
   130 00005C78 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 00005C79 E8ABFCFFFF          <1>     call reallocMemory
   132 00005C7E 5B                  <1>     pop rbx
   133 00005C7F 58                  <1>     pop rax
   134 00005C80 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 00005C82 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 00005C86 EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 00005C88 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ;For now, adjust error level in var
   143 00005C8A 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   144 00005C8C 8625(06070000)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   145 00005C92 F605(8C040000)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   146 00005C99 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   147 00005C9B 8625(8C040000)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   148 00005CA1 C605(06070000)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   149                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   150 00005CA8 8A25(06070000)      <1>     mov ah, byte [exitType] ;Get the exitType
   151                              <1> .storeELvl:
   152 00005CAE 668905(2F040000)    <1>     mov word [errorLevel], ax   ;Store word
   153                              <1> ;rbx points to current PSP
   154                              <1> ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   155 00005CB5 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   156 00005CBC 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt24h]
   157 00005CC0 B024                <1>     mov al, 24h
   158 00005CC2 E8831C0000          <1>     call setIntVector
   159 00005CC7 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt23h]
   160 00005CCB B023                <1>     mov al, 23h
   161 00005CCD E8781C0000          <1>     call setIntVector
   162 00005CD2 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt22h]
   163 00005CD6 B022                <1>     mov al, 22h
   164 00005CD8 E86D1C0000          <1>     call setIntVector
   165                              <1> 
   166 00005CDD B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   167 00005CDF CD2A                <1>     int 2Ah
   168 00005CE1 C605(96040000)FF    <1>     mov byte [Int24Trans], -1   ;Aborts now get translated temporarily
   169 00005CE8 B822110000          <1>     mov eax, 1122h              ;Net redir, Process Termination Hook
   170 00005CED 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   171 00005CF4 CD2F                <1>     int 2Fh
   172                              <1> 
   173 00005CF6 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   174 00005CFD 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   175 00005D00 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   176 00005D04 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   177 00005D07 0F8494000000        <1>     je .ownParent   ;No resource freeing if it is its own parent!
   178 00005D0D 803D(06070000)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   179 00005D14 747A                <1>     je .freeOk   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   180                              <1> 
   181 00005D16 803D(06070000)02    <1>     cmp byte [exitType], 2  ;Abort type exit?
   182 00005D1D 7507                <1>     jne .skipAbortNetClose  ;Skip the following
   183 00005D1F B81D110000          <1>     mov eax, 111Dh  ; Close all remote files for process on Abort!
   184 00005D24 CD2F                <1>     int 2Fh
   185                              <1> .skipAbortNetClose:
   186 00005D26 FF15(DF000000)      <1>     call qword [closeTaskShare] ;Close all shared files for this task
   187 00005D2C FF15(B7000000)      <1>     call qword [unloadDLLHook]  ;Now free exported function for this task
   188                              <1> ;Now close file handles
   189 00005D32 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   190 00005D39 0FB74F4E            <1>     movzx ecx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   191 00005D3D 31DB                <1>     xor ebx, ebx    ;Start from handle 0
   192                              <1> .hdlLp:
   193 00005D3F 53                  <1>     push rbx
   194 00005D40 51                  <1>     push rcx
   195 00005D41 E8DBD9FFFF          <1>     call closeFileHdl
   196 00005D46 59                  <1>     pop rcx
   197 00005D47 5B                  <1>     pop rbx
   198 00005D48 FFC3                <1>     inc ebx ;Goto next handle to close
   199 00005D4A 39CB                <1>     cmp ebx, ecx
   200 00005D4C 75F1                <1>     jne .hdlLp   ;Keep looping for all entries in the JFT 
   201                              <1> ;Now free MCB's owned by task
   202 00005D4E 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   203                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   204                              <1>     ; with the currentPSP signature and free them.
   205 00005D55 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   206                              <1> .wlkMcb:  ;And walk the chain
   207                              <1> ;First verify the address in rsi is a valid mcb
   208 00005D5C 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   209 00005D5E 80F94D              <1>     cmp cl, mcbMarkCtn
   210 00005D61 7405                <1>     je .checkToFree
   211 00005D63 80F95A              <1>     cmp cl, mcbMarkEnd
   212 00005D66 7528                <1>     jne .freeOk  ;Something wrong so stop freeing
   213                              <1> .checkToFree:
   214 00005D68 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   215 00005D6C 750F                <1>     jne .noFree
   216 00005D6E 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   217 00005D72 53                  <1>     push rbx
   218 00005D73 51                  <1>     push rcx
   219 00005D74 56                  <1>     push rsi
   220 00005D75 E8A7FAFFFF          <1>     call freeMemory ;Free this memory block
   221 00005D7A 5E                  <1>     pop rsi
   222 00005D7B 59                  <1>     pop rcx
   223 00005D7C 5B                  <1>     pop rbx
   224                              <1>     ;If an error occured, the internal vars will be set.
   225                              <1> .noFree:
   226 00005D7D 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   227 00005D80 740E                <1>     je .freeOk          ;Skip if we are
   228 00005D82 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   229 00005D85 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   230 00005D89 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   231 00005D8E EBCC                <1>     jmp short .wlkMcb
   232                              <1> .freeOk:
   233 00005D90 FF15(A7000000)      <1>     call qword [terminateTask]  ;Registers task terminating, no retval
   234 00005D96 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   235 00005D9A 488905(1F040000)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   236                              <1> .ownParent:
   237 00005DA1 B0FF                <1>     mov al, -1  ;Flush all drive buffers
   238 00005DA3 E823190000          <1>     call dosCrit1Enter
   239 00005DA8 E881A9FFFF          <1>     call flushAllBuffersForDrive
   240 00005DAD E823190000          <1>     call dosCrit1Exit
   241 00005DB2 FA                  <1>     cli
   242 00005DB3 C605(96040000)00    <1>     mov byte [Int24Trans], 0    
   243 00005DBA C605(08040000)00    <1>     mov byte [inDOS], 0     ;Exiting DOS now
   244 00005DC1 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Reset error drive
   245 00005DC8 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   246 00005DCF 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]   ;Point rsp to the rsp on entry to DOS call
   247                              <1>     ;Dont touch the previous stack pointer thats left on the stack, only
   248                              <1>     ; the ret ptr and the flags
   249 00005DD3 B022                <1>     mov al, 22h
   250 00005DD5 E83D140000          <1>     call muxGetIntVector    ;Get return vector in rbx
   251 00005DDA 48895C2448          <1>     mov qword [rsp + callerFrame.rip], rbx
   252 00005DDF 48C744245802020000  <1>     mov qword [rsp + callerFrame.flags], 0202h  ;Mimic safely DOS's ret flags
   253 00005DE8 E8B0180000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   254 00005DED 48CF                <1>     iretq   ;rsp ends up on the stack of the last entry into DOS
    42                                  %include "./src/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    16                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    17                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    18                              <1> 
    19                              <1> ;If AL = 0 and 4 (if DOSMGR present):
    20                              <1> ;            Load Child Program and Xfr control to it
    21                              <1> ; rbx ------>   |-------------------------------|
    22                              <1> ;               |   Ptr to Environment Block    |
    23                              <1> ;               |                               |
    24                              <1> ;               | Can be 0 => Get pointer to    |
    25                              <1> ;               | parent Environment Block      |
    26                              <1> ;               |-------------------------------|
    27                              <1> ;               |   Ptr to Command Line to be   |
    28                              <1> ;               |   placed at PSP + 80h         |
    29                              <1> ;               |-------------------------------|
    30                              <1> ;               |   Ptr to first default FCB    |
    31                              <1> ;               |      to copy to PSP.fcb1      |
    32                              <1> ;               |                               |
    33                              <1> ;               | Should be used to parse the   |
    34                              <1> ;               |  first two command line args  |
    35                              <1> ;               |-------------------------------|
    36                              <1> ;               |   Ptr to second default FCB   |
    37                              <1> ;               |      to copy to PSP.fcb2      |
    38                              <1> ;               |-------------------------------|
    39                              <1> ;
    40                              <1> ;If AL = 1 :
    41                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    42                              <1> ; rbx ------>   |-------------------------------|
    43                              <1> ;               |         AS IN AL=00H          |
    44                              <1> ;               |-------------------------------|
    45                              <1> ;               |     Initial Value of RSP      |
    46                              <1> ;               |       on program launch       |
    47                              <1> ;               |                               |
    48                              <1> ;               |     This is returned to the   |
    49                              <1> ;               |         caller by DOS         |
    50                              <1> ;               |-------------------------------|
    51                              <1> ;               |     Initial Value of RIP      |
    52                              <1> ;               |       on program launch       |
    53                              <1> ;               |                               |
    54                              <1> ;               |     This is returned to the   |
    55                              <1> ;               |         caller by DOS         |
    56                              <1> ;               |-------------------------------|
    57                              <1> ;
    58                              <1> ;                      !!Important Note!!
    59                              <1> ;   The block pointed to by rbx must reserve the space for 
    60                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    61                              <1> ;
    62                              <1> ;If AL = 3 :
    63                              <1> ;                      Load program overlay
    64                              <1> ; rbx ------>   |-------------------------------|
    65                              <1> ;               |  Pointer to the byte in the   |
    66                              <1> ;               |  prog space to start writing  |
    67                              <1> ;               |        the overlay at.        |
    68                              <1> ;               |-------------------------------|
    69                              <1> ;               | QWORD value used as the base  |
    70                              <1> ;               |   address for relocation      |
    71                              <1> ;               |   computations. In most cases |
    72                              <1> ;               |   should be the same as the   |
    73                              <1> ;               |   load pointer. The desired   |
    74                              <1> ;               |   load address is subtracted  |
    75                              <1> ;               |   from this value to generate |
    76                              <1> ;               |   a valid relocation factor,  |
    77                              <1> ;               |   much like for normal load   |
    78                              <1> ;               |   but here we are controlling |
    79                              <1> ;               |    precisely the factor by    |
    80                              <1> ;               |     which we relocate the     |
    81                              <1> ;               |           symbols.            |
    82                              <1> ;               |  (Called a Relocation Factor) |
    83                              <1> ;               |     Only FOR EXE Overlays.    |
    84                              <1> ;               |    For COM, 0 is sufficient.  |
    85                              <1> ;               |-------------------------------|
    86                              <1> ; For AL = 3: Both pointers must be aligned to section alignment.
    87                              <1> ;   If this is not the case, DOS will round UP both pointers to the 
    88                              <1> ;   section alignment for the file being loaded. 
    89                              <1> ; The overlay will be loaded so that the first byte at the start of the memory
    90                              <1> ; block is the first byte of the first section of the executable. No header
    91                              <1> ; information will be retained. Thus, (for now) overlays cannot be used to export 
    92                              <1> ; functions or import functions from DLLs. Furthermore, it is HIGHLY recommended
    93                              <1> ; that you compile any .EXE overlays to have a section alignment of 1 byte.
    94                              <1> ;
    95                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    96                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    97                              <1> ;
    98                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    99 00005DEF 55                  <1>     push rbp
   100 00005DF0 4889E5              <1>     mov rbp, rsp
   101 00005DF3 4881EC80000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   102                              <1>     ;Clear up the pointers on the stack frame
   103 00005DFA 31C9                <1>     xor ecx, ecx
   104 00005DFC 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   105 00005E00 48894DD0            <1>     mov qword [rbp - execFrame.pEnvBase], rcx
   106 00005E04 48894DC0            <1>     mov qword [rbp - execFrame.pProgBase], rcx
   107 00005E08 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   108 00005E0C 48894D98            <1>     mov qword [rbp - execFrame.pProgEP], rcx
   109                              <1> 
   110 00005E10 B403                <1>     mov ah, execOverlay
   111 00005E12 F605(9E000000)FF    <1>     test byte [dosMgrPresent], -1 ;If bits set, change max to execBkgrnd
   112 00005E19 7402                <1>     jz short .noMulti
   113 00005E1B B404                <1>     mov ah, execBkgrnd
   114                              <1> .noMulti:
   115 00005E1D 38E0                <1>     cmp al, ah
   116 00005E1F 7615                <1>     jbe .validSubfunction
   117                              <1> .badSubFunction:
   118 00005E21 B801000000          <1>     mov eax, errInvFnc
   119 00005E26 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   120                              <1> .badExit:
   121 00005E2D 4889EC              <1>     mov rsp, rbp
   122 00005E30 5D                  <1>     pop rbp
   123 00005E31 E9E0180000          <1>     jmp extErrExit
   124                              <1> 
   125                              <1> .validSubfunction:
   126 00005E36 3C02                <1>     cmp al, execInvld
   127 00005E38 74E7                <1>     je .badSubFunction
   128                              <1>     ;Save registers for each function call
   129 00005E3A 48895DE0            <1>     mov qword [rbp - execFrame.pParam], rbx
   130 00005E3E 488955D8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   131 00005E42 0FB6C0              <1>     movzx eax, al
   132 00005E45 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   133 00005E49 4889D7              <1>     mov rdi, rdx
   134 00005E4C E871150000          <1>     call strlen ;Get string length in cx
   135 00005E51 66894DE8            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   136                              <1>     ;Now open the file we wanna yeet to
   137 00005E55 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   138 00005E57 55                  <1>     push rbp    ;Preserve local frame ptr
   139 00005E58 E882D7FFFF          <1>     call openFileHdl
   140 00005E5D 5D                  <1>     pop rbp
   141 00005E5E 72CD                <1>     jc .badExit ;Exit preserving error code in al
   142                              <1>     ;Now ax has the file handle
   143 00005E60 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   144 00005E64 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   145 00005E67 E884F2FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   146 00005E6C 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   147 00005E70 F7C280000000        <1>     test edx, devCharDev
   148 00005E76 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   149 00005E78 B002                <1>     mov al, errFnf
   150 00005E7A E92B060000          <1>     jmp .cleanAndFail
   151                              <1> .validDiskFile:
   152 00005E7F 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   153 00005E87 0F848D000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   154 00005E8D 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   155 00005E91 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   156 00005E94 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. inherit parent env ptr)
   157 00005E97 7514                <1>     jnz short .copyEnvironmentBlock
   158 00005E99 488B35(1F040000)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   159 00005EA0 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get the environment ptr
   160 00005EA4 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Store the parent ptr
   161 00005EA8 4885C0              <1>     test rax, rax   ;Was the parent pointer 0? If so, skip
   162 00005EAB 746D                <1>     jz short .loadProgram ;This is used by the boot process!!
   163                              <1> .copyEnvironmentBlock:
   164 00005EAD 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   165                              <1>     ;Get the length of the environment
   166 00005EB0 B9FF7F0000          <1>     mov ecx, 7fffh  ;Arbitrary 32kb DOS limit, consider increasing to 64Kb
   167                              <1> ;    cmp byte [rdi - mcb_size + mcb.marker], mcbMarkCtn
   168                              <1> ;    je .envMCBFound
   169                              <1> ;    cmp byte [rdi - mcb_size + mcb.marker], mcbMarkEnd
   170                              <1> ;    jne .invalidEnvironmentError
   171                              <1> ;.envMCBFound:
   172                              <1>     ;The env block mcb size must be between 160 and 32768 bytes.
   173                              <1>     ;Get the length of the environment from the MCB itself!
   174                              <1> ;    xor ecx, ecx
   175                              <1> ;    mov ecx, dword [rdi - mcb_size + mcb.blockSize]
   176                              <1> ;    shl ecx, 4  ;Convert to bytes from paragraphs
   177                              <1> ;    cmp ecx, 7FF0h  ;Is it above 32Kb?
   178                              <1> ;    ja .invalidEnvironmentError ;Error out!
   179                              <1> ;    cmp ecx, 0A0h   ;Is the environment less than 160 bytes?
   180                              <1> ;    jb .invalidEnvironmentError ;Error out!
   181 00005EB5 31C0                <1>     xor eax, eax
   182 00005EB7 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   183                              <1> .envVerifyLp:
   184 00005EBA F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   185 00005EBC 7531                <1>     jnz short .invalidEnvironmentError
   186 00005EBE 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   187 00005EC1 FFC9                <1>     dec ecx
   188 00005EC3 AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   189 00005EC4 75F4                <1>     jnz short .envVerifyLp
   190                              <1> 
   191 00005EC6 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   192 00005EC9 57                  <1>     push rdi     ;Save the length of the environment block
   193 00005ECA 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   194 00005ED0 0FB75DE8            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   195 00005ED4 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   196 00005ED6 89FB                <1>     mov ebx, edi
   197 00005ED8 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   198 00005EDB 55                  <1>     push rbp
   199 00005EDC E83CF7FFFF          <1>     call allocateMemory
   200 00005EE1 5D                  <1>     pop rbp
   201 00005EE2 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   202 00005EE3 7314                <1>     jnc short .copyEnvironment
   203                              <1>     ;Fall thru if not enuff memory
   204                              <1> .insufficientMemory:
   205 00005EE5 B808000000          <1>     mov eax, errNoMem
   206 00005EEA E9BB050000          <1>     jmp .cleanAndFail
   207                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   208 00005EEF B80A000000          <1>     mov eax, errBadEnv
   209 00005EF4 E9B1050000          <1>     jmp .cleanAndFail
   210                              <1> 
   211                              <1> .copyEnvironment:
   212                              <1>     ;rax has the ptr to allocated memory block
   213                              <1>     ;rcx has the number of chars to copy from the source env block
   214 00005EF9 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   215 00005EFC 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   216 00005F00 488B75E0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   217 00005F04 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   218 00005F07 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   219 00005F09 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   220 00005F0E 66AB                <1>     stosw       ;Away you go!
   221 00005F10 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   222 00005F14 0FB74DE8            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   223 00005F18 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   224                              <1> ;Done with the environment... more or less
   225                              <1> .loadProgram:
   226 00005F1A B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   227 00005F1F 488D15(1E050000)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   228 00005F26 E89B050000          <1>     call .readDataFromHdl
   229 00005F2B 0F8274050000        <1>     jc .badFmtErr
   230 00005F31 85C0                <1>     test eax, eax   ;Were zero bytes read?
   231 00005F33 0F846C050000        <1>     jz .badFmtErr
   232 00005F39 3D40000000          <1>     cmp eax, imageDosHdr_size
   233 00005F3E 0F826F030000        <1>     jb .loadCom
   234                              <1> 
   235 00005F44 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   236 00005F49 740B                <1>     je .proceedEXE
   237 00005F4B 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   238 00005F50 0F855D030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   239                              <1> .proceedEXE:
   240                              <1>     ;Now we need to read e_lfanew
   241 00005F56 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   242 00005F57 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   243 00005F5A 8955B0              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   244 00005F5D 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   245 00005F5F 30C0                <1>     xor al, al  ;Set file pointer from start of file
   246 00005F61 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   247 00005F65 E8A1D8FFFF          <1>     call lseekHdl   ;Move to that position in the file
   248 00005F6A 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   249 00005F6B B918000000          <1>     mov ecx, imageFileHeader_size
   250 00005F70 E851050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   251 00005F75 85C0                <1>     test eax, eax   ;Were zero bytes read?
   252 00005F77 0F8428050000        <1>     jz .badFmtErr
   253 00005F7D 3D18000000          <1>     cmp eax, imageFileHeader_size
   254 00005F82 0F821D050000        <1>     jb .badFmtErr
   255                              <1>     ;So now rdx points to the imageFileHeader
   256 00005F88 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   257 00005F8E 0F8511050000        <1>     jne .badFmtErr
   258 00005F94 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   259 00005F9A 0F8505050000        <1>     jne .badFmtErr
   260                              <1>     ;Check the binary is executable
   261 00005FA0 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   262 00005FA4 66A90200            <1>     test ax, imageFileExecutable
   263 00005FA8 0F84F7040000        <1>     jz .badFmtErr
   264 00005FAE 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   265                              <1> 
   266 00005FB2 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   267 00005FB8 0F82E7040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   268                              <1>     ;Now save the number of sections in the the file
   269 00005FBE 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   270 00005FC2 85C0                <1>     test eax, eax   ;If this is 0, what?
   271 00005FC4 0F84DB040000        <1>     jz .badFmtErr
   272 00005FCA 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   273                              <1>     ;Now load Optional header, file ptr points to it so all good!
   274 00005FCE B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   275                              <1>     ;rdx points to exeHdrSpace
   276 00005FD3 E8EE040000          <1>     call .readDataFromHdl
   277 00005FD8 85C0                <1>     test eax, eax   ;Were zero bytes read?
   278 00005FDA 0F84C5040000        <1>     jz .badFmtErr
   279 00005FE0 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   280 00005FE5 0F82BA040000        <1>     jb .badFmtErr
   281                              <1>     ;Now File Ptr points to data dirs, not an issue
   282 00005FEB 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   283                              <1>     ;We load the program in, one section at a time, reading section headers in
   284                              <1>     ; one at a time to the section header internal buffer.
   285 00005FF2 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   286 00005FFA 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   287 00005FFC 8B1D(56050000)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   288 00006002 488B05(6E050000)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackCommit]
   289 00006009 4885C0              <1>     test rax, rax
   290 0000600C 750A                <1>     jnz .notDefaultStackAlloc
   291 0000600E 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   291 00006017 00                  <1>
   292                              <1> .notDefaultStackAlloc:
   293 00006018 01C3                <1>     add ebx, eax    ;Add stack allocation
   294 0000601A 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   295                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   296                              <1>     ; section aligned and so we will need to align before reading, to 
   297                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   298 00006020 031D(3E050000)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   299 00006026 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   300 00006029 81C311000000        <1>     add ebx, 11h
   301 0000602F C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   302 00006032 55                  <1>     push rbp
   303 00006033 E8E5F5FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   304 00006038 5D                  <1>     pop rbp
   305 00006039 0F82A6FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   306 0000603F 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   307 00006043 480500010000        <1>     add rax, psp_size
   308 00006049 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of exe hdr goes here
   309                              <1>     ;Finally, just check that we have some code to execute. 
   310                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   311 0000604D 813D(22050000)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   311 00006055 0000                <1>
   312 00006057 0F8448040000        <1>     je .badFmtErr   ;If no bytes, exit error
   313 0000605D EB0B                <1>     jmp short .exeProceed1
   314                              <1> .exeOvlySkipAlloc:
   315 0000605F 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   316 00006063 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   317 00006066 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   318                              <1> .exeProceed1:
   319                              <1> ;===========================================================================
   320                              <1>     ;The below blocks are being kept because they can be turned on later
   321                              <1>     ; to change this exe loader to force section alignment of the 
   322                              <1>     ; base load address. It appears there is no need to enforce that the 
   323                              <1>     ; base load address be section aligned, but individual sections need
   324                              <1>     ; to adhere to the section alignment requirements thereafter. 
   325                              <1>     ;Finally, the pProgBase gets rescaled so that the first byte of the 
   326                              <1>     ; first section gets places at the load address and not at some
   327                              <1>     ; offset from it (as is usually the case, offset 1000h).
   328                              <1> ;===========================================================================
   329                              <1>     ;=======================================================================
   330                              <1>     ;Now we align the progBase to full header size aligned to the next page
   331                              <1>     ;mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   332                              <1>     ;add rax, rbx    ;Add this offset where the header should go in future
   333                              <1>     ;=======================================================================
   334                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   335                              <1>     ;It appears that the load address does NOT need to be aligned at all xD
   336                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   337                              <1>     ;Now we section pad. Once aligned, that is the program base address!
   338                              <1>     ;push rax
   339                              <1>     ;mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   340                              <1>     ;dec ecx ;Turn into a mask
   341                              <1>     ;and rax, rcx    ;Compute ptr modulo mask
   342                              <1>     ;inc ecx
   343                              <1>     ;sub rcx, rax
   344                              <1>     ;pop rdi
   345                              <1>     ;xor eax, eax
   346                              <1>     ;rep stosb
   347                              <1>     ;mov qword [rbp - execFrame.pProgBase], rdi
   348                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   349                              <1> 
   350                              <1>     ;So now copy one section at a time, read section header in
   351                              <1>     ;File pointer points to the directory table, so skip that
   352 0000606A 8B15(8A050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   353                              <1>     ;Load however many directories we have into place
   354                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   355 00006070 C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   356 00006073 31C9                <1>     xor ecx, ecx
   357 00006075 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   358 00006079 B001                <1>     mov al, 1   ;Move handle forwards from current position
   359 0000607B E88BD7FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   360                              <1>     ;eax has pointer location after adjustment
   361 00006080 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   362                              <1>     ;File now points to start of Section headers. Read first header in.
   363                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   364 00006083 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   365 00006087 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   366 0000608B 31F6                <1>     xor esi, esi    ;Use as an indicator for the first data segment. 
   367 0000608D 488975A8            <1>     mov qword [rbp - execFrame.bSegCount], rsi  ;Clear the segment counter
   368                              <1> .loadLp:
   369 00006091 51                  <1>     push rcx    ;Save # of segments left on stack
   370 00006092 57                  <1>     push rdi    ;Save the current buffer ptr here
   371 00006093 B928000000          <1>     mov ecx, imageSectionHdr_size
   372 00006098 488D15(9E050000)    <1>     lea rdx, sectHdr    ;Read section headers here
   373 0000609F E822040000          <1>     call .readDataFromHdl
   374 000060A4 5F                  <1>     pop rdi
   375 000060A5 59                  <1>     pop rcx
   376 000060A6 85C0                <1>     test eax, eax
   377 000060A8 0F84F7030000        <1>     jz .badFmtErr
   378 000060AE 3D28000000          <1>     cmp eax, imageSectionHdr_size
   379 000060B3 0F85EC030000        <1>     jne .badFmtErr
   380                              <1>     ;File ptr moved forwards to next section header
   381 000060B9 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   382                              <1>     ;Section header read, now we load section into memory
   383                              <1>     ;Move file ptr to data location
   384 000060C0 8B15(B2050000)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   385 000060C6 85D2                <1>     test edx, edx
   386 000060C8 744B                <1>     jz short .skipRawPtrMove
   387 000060CA 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   388 000060CE 31C0                <1>     xor eax, eax    ;Seek from start of file
   389 000060D0 51                  <1>     push rcx
   390 000060D1 57                  <1>     push rdi
   391 000060D2 E834D7FFFF          <1>     call lseekHdl
   392 000060D7 5F                  <1>     pop rdi
   393 000060D8 59                  <1>     pop rcx
   394                              <1>     ;Is this a overlay load?
   395 000060D9 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   396 000060E1 7532                <1>     jne short .skipRawPtrMove
   397                              <1>     ;Here we rescale to put the first byte at pLoadLoc and use the 
   398                              <1>     ; rescale value against RelocFct to compute the qRelocVal for later
   399                              <1>     ;Is this is the first segment with data being read into memory?
   400 000060E3 48FF45A8            <1>     inc qword [rbp - execFrame.bSegCount]
   401 000060E7 48817DA801000000    <1>     cmp qword [rbp - execFrame.bSegCount], 1 
   402 000060EF 7524                <1>     jne short .skipRawPtrMove   ;If not, skip
   403                              <1>     ;Now rebase the program to point the first byte of the first
   404                              <1>     ; section at the ProgBase.
   405 000060F1 51                  <1>     push rcx
   406 000060F2 57                  <1>     push rdi
   407 000060F3 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Get the load address
   408 000060F7 8B0D(AA050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualAddress]
   409 000060FD 4829CF              <1>     sub rdi, rcx    ;Rebase by offset of the first section
   410 00006100 48897DC0            <1>     mov qword [rbp - execFrame.pProgBase], rdi 
   411 00006104 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam]
   412 00006108 488B7F08            <1>     mov rdi, qword [rdi + loadOvly.qRelocFct]   ;Get the reload factor
   413 0000610C 4829CF              <1>     sub rdi, rcx    ;Now rescale the relocation factor by the same amount
   414 0000610F 48897D88            <1>     mov qword [rbp - execFrame.qRelocVal], rdi  ;Now store this value for later
   415 00006113 5F                  <1>     pop rdi
   416 00006114 59                  <1>     pop rcx
   417                              <1> .skipRawPtrMove:
   418 00006115 51                  <1>     push rcx
   419 00006116 31FF                <1>     xor edi, edi
   420 00006118 8B3D(AA050000)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   421 0000611E 48037DC0            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   422                              <1>     ;If a section has a virtual address outside of the allocation arena
   423                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   424                              <1>     ; next section.
   425 00006122 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   426 00006126 4885D2              <1>     test rdx, rdx   ;If this is 0 (as in the case of overlay)...
   427 00006129 7432                <1>     jz short .okToLoad  ;skip this as it is assumed there is enough space!
   428 0000612B 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   429 00006132 31C9                <1>     xor ecx, ecx
   430 00006134 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   431 00006137 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   432 0000613B 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   433 00006142 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   434 00006145 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   435 00006148 7713                <1>     ja short .okToLoad
   436                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   437                              <1> 
   438                              <1>     ;V-0000000000-EARMARK FOR REMOVAL-0000000000-V
   439 0000614A F705(C2050000)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   439 00006152 0000                <1>
   440 00006154 0F854B030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   441                              <1>     ;^-0000000000-EARMARK FOR REMOVAL-0000000000-^
   442                              <1> 
   443                              <1>     ;Else, just skip this section, goto next section
   444 0000615A 59                  <1>     pop rcx
   445 0000615B EB3F                <1>     jmp short .gotoNextSection
   446                              <1> .okToLoad:
   447 0000615D 8B0D(A6050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   448 00006163 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   449 00006166 57                  <1>     push rdi    ;Save section in memory locally
   450 00006167 E85A030000          <1>     call .readDataFromHdl
   451 0000616C 5F                  <1>     pop rdi
   452 0000616D 59                  <1>     pop rcx     ; Matches push after skipRawPtrMove
   453 0000616E 0F8231030000        <1>     jc .badFmtErr
   454                              <1>     ;Don't check for a zero section read as empty sections may be present!
   455 00006174 3B05(A6050000)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   456 0000617A 0F8525030000        <1>     jne .badFmtErr
   457                              <1>     ;Data read ok, now fill in any zeros needed
   458 00006180 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   459                              <1> 
   460 00006183 51                  <1>     push rcx
   461                              <1>     ;Here do section padding
   462 00006184 4889F8              <1>     mov rax, rdi    ;Get the current address
   463 00006187 8B0D(3E050000)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   464 0000618D FFC9                <1>     dec ecx ;Turn into a mask
   465 0000618F 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   466 00006192 FFC1                <1>     inc ecx
   467 00006194 4829C1              <1>     sub rcx, rax
   468 00006197 31C0                <1>     xor eax, eax
   469 00006199 F3AA                <1>     rep stosb
   470 0000619B 59                  <1>     pop rcx
   471                              <1> .gotoNextSection:
   472 0000619C FFC9                <1>     dec ecx ;Decrement our section counter
   473 0000619E 7419                <1>     jz short .doExeFixups
   474                              <1>     ;Read next section header in here
   475 000061A0 51                  <1>     push rcx
   476 000061A1 57                  <1>     push rdi
   477 000061A2 30C0                <1>     xor al, al  ;Move rel start of file
   478 000061A4 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   479 000061A7 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   480 000061AB 31C9                <1>     xor ecx, ecx
   481 000061AD E859D6FFFF          <1>     call lseekHdl
   482 000061B2 5F                  <1>     pop rdi
   483 000061B3 59                  <1>     pop rcx
   484 000061B4 E9D8FEFFFF          <1>     jmp .loadLp
   485                              <1> .doExeFixups:
   486                              <1> ;Here we fixup addresses if needed
   487                              <1> ;If the program is loaded at its desired location never need to relocate.
   488                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   489                              <1> ;   If the program has had it's .reloc section stripped by the linker
   490                              <1> ;       or has no .reloc directory, we fail
   491                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   492                              <1> ;       relocations anyway.
   493                              <1> 
   494                              <1> ;If program base = desired load, skip relocs
   495 000061B9 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   496 000061BD 483B15(36050000)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   497 000061C4 0F84CA000000        <1>     je .exeComplete
   498                              <1> ;If program has had relocs stripped, fail
   499 000061CA 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   500 000061CE 66A90100            <1>     test ax, imageFileRelocsStripped
   501 000061D2 0F85CD020000        <1>     jnz .badFmtErr
   502                              <1> ;If program has no .reloc section, fail
   503 000061D8 8B15(8A050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   504 000061DE 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   505 000061E4 0F82BB020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   506                              <1> ;Now we get the reloc section
   507 000061EA 8B55B0              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   508 000061ED 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   509                              <1>     ;eax now points to position in file of directory entry for reloc
   510 000061F3 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   511 000061F7 31C0                <1>     xor eax, eax
   512 000061F9 E80DD6FFFF          <1>     call lseekHdl   ;Move handle there in file
   513 000061FE 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   514 00006201 B908000000          <1>     mov ecx, imageDataDirectory_size
   515                              <1>     ;Read 8 bytes into sectHdr space
   516 00006206 488D15(9E050000)    <1>     lea rdx, sectHdr
   517 0000620D E8B4020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   518 00006212 85C0                <1>     test eax, eax
   519 00006214 0F848B020000        <1>     jz .badFmtErr
   520 0000621A 39C8                <1>     cmp eax, ecx
   521 0000621C 0F8583020000        <1>     jne .badFmtErr
   522                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   523 00006222 8B35(9E050000)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   524 00006228 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   525 0000622A 7468                <1>     jz .exeComplete   ;... including if overlay
   526 0000622C 480375C0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   527                              <1>     ;Now rsi points to where in memory the relocation data table is
   528                              <1>     ;Now compute the relocation factor =
   529                              <1>     ;   Difference from the load address and prefered
   530 00006230 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   531 00006234 482B05(36050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   532 0000623B 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   533 00006243 750F                <1>     jne short .notOverlayReloc
   534                              <1>     ;For overlays, we use the relocation factor as the base of computation.
   535                              <1>     ;Thus now the relocation factor becomes the ProgBase.
   536                              <1>     ;This should be the same as ProgBase anyway for overlays.
   537 00006245 488B4588            <1>     mov rax, qword [rbp - execFrame.qRelocVal]   ;Get the overlay reloc factor
   538 00006249 482B05(36050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   539                              <1>     ;Store this as the overlay program base
   540 00006250 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   541                              <1> .notOverlayReloc:
   542 00006254 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   543                              <1>     ;rsi points to relocation data table in memory
   544 00006257 8B0D(A2050000)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   545 0000625D 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   546 0000625F 7433                <1>     jz .exeComplete
   547                              <1>     ;rsi points to the first base relocation block. The relocations begin
   548                              <1>     ; after the first block
   549                              <1>     ;ecx has the number of base relocation blocks to process.
   550                              <1> .nextBlock:
   551 00006261 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   552 00006262 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   553 00006264 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   554 00006268 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   555 0000626B 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   556 0000626E 67E31E              <1>     jecxz .blockDone    
   557 00006271 81E908000000        <1>     sub ecx, 8
   558 00006277 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   559 0000627E D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   560                              <1> .blockNotDone:
   561 00006280 66AD                <1>     lodsw   ;Get the next page offset word
   562 00006282 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   563                              <1>     ;rdi points to base, rax give offset into 4Kb page
   564 00006287 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   565 0000628B FFC9                <1>     dec ecx
   566 0000628D 75F1                <1>     jnz .blockNotDone
   567                              <1> .blockDone:
   568 0000628F 59                  <1>     pop rcx
   569 00006290 FFC9                <1>     dec ecx
   570 00006292 75CD                <1>     jnz .nextBlock
   571                              <1> .exeComplete:
   572 00006294 8B05(2E050000)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   573                              <1>     ;Now get EP relative to the (rescaled) load address.
   574 0000629A 480345C0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   575 0000629E 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   576 000062A2 FF15(AF000000)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   577 000062A8 0F82F7010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   578 000062AE E9CC000000          <1>     jmp .buildChildPSP
   579                              <1> .loadCom:
   580                              <1>     ;File is open here, so just read the file into memory. 
   581                              <1>     ;The file cannot exceed 64Kb in size.
   582                              <1>     ;Allocate 64Kb of memory, or as much as we can
   583 000062B3 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   584 000062BB 745C                <1>     je .comOverlay
   585 000062BD BBF0FF0000          <1>     mov ebx, 0FFF0h ;64Kb - 16 bytes, give me FFF0h bytes
   586 000062C2 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   587 000062C5 C1EB04              <1>     shr ebx, 4      ;Convert to paragraphs
   588 000062C8 55                  <1>     push rbp
   589 000062C9 E84FF3FFFF          <1>     call allocateMemory
   590 000062CE 5D                  <1>     pop rbp
   591 000062CF 7355                <1>     jnc .comallocOk
   592 000062D1 3C08                <1>     cmp al, errNoMem
   593 000062D3 0F85D1010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   594                              <1>     ;rbx should have the amount available in paragraphs
   595 000062D9 09DB                <1>     or ebx, ebx ;Clear the upper dword
   596 000062DB 48C1E304            <1>     shl rbx, 4
   597                              <1>     ;We check if this value is psp_size more than filesize
   598 000062DF 53                  <1>     push rbx    ;Save new minimum size
   599 000062E0 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   600 000062E5 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   601 000062E9 31D2                <1>     xor edx, edx    ;Go to end of file
   602 000062EB E81BD5FFFF          <1>     call lseekHdl
   603                              <1>     ;eax has file size
   604 000062F0 5B                  <1>     pop rbx ;Get back max alloc size
   605 000062F1 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   606 000062F3 29C2                <1>     sub edx, eax
   607 000062F5 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   608 000062FB 0F82E4FBFFFF        <1>     jb .insufficientMemory   ;Fail
   609 00006301 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   610 00006304 C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   611 00006307 55                  <1>     push rbp
   612 00006308 E810F3FFFF          <1>     call allocateMemory
   613 0000630D 5D                  <1>     pop rbp
   614 0000630E 0F8296010000        <1>     jc .cleanAndFail
   615 00006314 E90D000000          <1>     jmp .comallocOk
   616                              <1> .comOverlay:
   617                              <1>     ;Here we simply read the file into the buffer provided
   618 00006319 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   619 0000631D 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   620 00006320 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   621 00006324 EB0A                <1>     jmp short .comRead
   622                              <1> .comallocOk:
   623                              <1>     ;rax should point to the first byte
   624 00006326 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   625 0000632A 480500010000        <1>     add rax, psp_size
   626                              <1> .comRead:
   627 00006330 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   628                              <1> 
   629 00006334 B802000000          <1>     mov eax, 2    ;Reposition to end of file
   630 00006339 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   631 0000633D 31D2                <1>     xor edx, edx    ;Go to end of file
   632 0000633F E8C7D4FFFF          <1>     call lseekHdl
   633                              <1>     ;eax has filesize now
   634 00006344 50                  <1>     push rax    ;Save filesize
   635 00006345 31C0                <1>     xor eax, eax    ;Reposition to start of file
   636 00006347 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   637 0000634B 31D2                <1>     xor edx, edx    ;Go to start of file
   638 0000634D E8B9D4FFFF          <1>     call lseekHdl
   639 00006352 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   640 00006353 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   641 0000635B 7411                <1>     je .comOverlay2
   642                              <1>     ;Now we check if the space we have available is sufficient to load
   643                              <1>     ; the program. Skipped if an overlay being loaded
   644                              <1>     ;ecx = # File size
   645 0000635D 8B55B8              <1>     mov edx, dword [rbp - execFrame.dProgSize]  ;Get the alloc space size
   646 00006360 81EA00010000        <1>     sub edx, psp_size
   647 00006366 39CA                <1>     cmp edx, ecx    ;Do we have space for the PSP and program?
   648 00006368 0F8277FBFFFF        <1>     jb .insufficientMemory
   649                              <1> .comOverlay2:
   650 0000636E 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   651 00006372 E84F010000          <1>     call .readDataFromHdl   ;Read from the file handle
   652 00006377 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   653 0000637B 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   654                              <1> .buildChildPSP:
   655                              <1>     ;We can close handle now
   656 0000637F 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   657 00006383 55                  <1>     push rbp
   658 00006384 E898D3FFFF          <1>     call closeFileHdl   ;Close the file
   659 00006389 5D                  <1>     pop rbp
   660                              <1> 
   661                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   662 0000638A 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   663 00006392 0F84EA000000        <1>     je .overlayExit
   664                              <1>     ;Now build the PSP
   665 00006398 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   666 0000639B 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   667 0000639F 52                  <1>     push rdx
   668 000063A0 55                  <1>     push rbp
   669 000063A1 E8D4F7FFFF          <1>     call createPSP
   670 000063A6 5D                  <1>     pop rbp
   671 000063A7 5A                  <1>     pop rdx
   672                              <1> 
   673                              <1>     ;Now copy the environment block over if rax != 0
   674 000063A8 488B5DD0            <1>     mov rbx, qword [rbp - execFrame.pEnvBase]
   675 000063AC 4885DB              <1>     test rbx, rbx
   676 000063AF 7404                <1>     jz short .skipEnvCopy
   677 000063B1 48895A3E            <1>     mov qword [rdx + psp.envPtr], rbx
   678                              <1> .skipEnvCopy:
   679                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   680 000063B5 488915(1F040000)    <1>     mov qword [currentPSP], rdx
   681 000063BC E80A130000          <1>     call dosCrit1Enter
   682 000063C1 E827010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   683                              <1> 
   684 000063C6 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   685 000063CD 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;and set it!
   686                              <1> 
   687                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   688                              <1>     ; and set FS to point to the PSP
   689 000063D4 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   690                              <1> 
   691 000063D8 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   692 000063DC B925000000          <1>     mov ecx, fcb_size
   693 000063E1 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   694 000063E5 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   695 000063E7 F3A4                <1>     rep movsb   ;Copy fcb 1 over
   696 000063E9 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   697 000063ED B925000000          <1>     mov ecx, fcb_size
   698 000063F2 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   699 000063F6 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   700 000063F8 F3A4                <1>     rep movsb   ;Copy fcb 2 over
   701 000063FA 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   702 000063FE 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   703 00006405 B980000000          <1>     mov ecx, 80h
   704 0000640A F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   705                              <1> 
   706 0000640C 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   707 0000640E 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   708                              <1> 
   709                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   710 00006411 88D8                <1>     mov al, bl
   711 00006413 30DB                <1>     xor bl, bl
   712 00006415 E84F0E0000          <1>     call getCDSNotJoin
   713 0000641A 7302                <1>     jnc .drive1Ok
   714 0000641C B3FF                <1>     mov bl, -1
   715                              <1> .drive1Ok:
   716 0000641E 88F8                <1>     mov al, bh
   717 00006420 30FF                <1>     xor bh, bh
   718 00006422 E8420E0000          <1>     call getCDSNotJoin
   719 00006427 7302                <1>     jnc .drive2Ok
   720 00006429 B7FF                <1>     mov bh, -1
   721                              <1> .drive2Ok:
   722                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   723                              <1>     ;rdi has pointer to psp
   724 0000642B 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   725                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   726 0000642E 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   727 00006433 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   727 0000643C FF                  <1>
   728 0000643D 4821C6              <1>     and rsi, rax    ;To align downwards
   729                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   730                              <1>     ;That is the job of the runtime to handle.
   731                              <1> ;Registers carrying data at this point:
   732                              <1> ;bx = FCB drive statuses
   733                              <1> ;rsi = Stack Base
   734                              <1> ;rbp = execFrame
   735 00006440 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   736 00006444 750B                <1>     jne short .noBg
   737                              <1>     ;Get termination mode in ecx before xfring control to dosmgr
   738 00006446 56                  <1>     push rsi
   739 00006447 E8F90D0000          <1>     call getUserRegs
   740 0000644C 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]  ;Get termination mode
   741 00006450 5E                  <1>     pop rsi
   742                              <1> .noBg:
   743 00006451 FF15(9F000000)      <1>     call qword [launchTask]
   744 00006457 7251                <1>     jc short .cleanAndFail
   745                              <1> ;Final step: Transfer control
   746 00006459 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   747 0000645D 742C                <1>     je .xfrProgram
   748 0000645F 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   749 00006463 741D                <1>     je .overlayExit ;Skip the below for background tasks
   750 00006465 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   751 00006469 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   752 0000646D 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   753 00006471 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   754 00006474 4881EE08000000      <1>     sub rsi, 8  ;Now go down one so that we can pop the AX value from the stack
   755 0000647B 488906              <1>     mov qword [rsi], rax    ;Store the FCB status on the top of stack for AH=01h
   756 0000647E 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   757                              <1> .overlayExit:
   758 00006482 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   759 00006485 5D                  <1>     pop rbp ;Point rsp to the return address
   760 00006486 E97D120000          <1>     jmp extGoodExit ;And return!
   761                              <1> .xfrProgram:
   762 0000648B FA                  <1>     cli
   763 0000648C 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   764 0000648F C605(08040000)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   765 00006496 FB                  <1>     sti
   766                              <1> 
   767 00006497 57                  <1>     push rdi    ;Push &psp[0] onto the stack to allow for ret exit
   768 00006498 FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   769 0000649B 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   770 0000649E 4989F9              <1>     mov r9, rdi
   771 000064A1 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   772                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 000064A4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   773                              <1> ;r8 is guaranteed to have a copy of the PSP.
   774                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   775                              <1> ;Everything else is optional and potentially changable at a later stage
   776                              <1> 
   777                              <1> .badFmtErr:
   778 000064A5 B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   779                              <1> .cleanAndFail:
   780                              <1> ;Close the open file and any open resources and fail
   781 000064AA E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   782 000064AF E821120000          <1>     call dosCrit1Exit
   783 000064B4 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   784 000064B8 50                  <1>     push rax    ;Save error code
   785 000064B9 55                  <1>     push rbp
   786 000064BA E862D2FFFF          <1>     call closeFileHdl
   787 000064BF 5D                  <1>     pop rbp
   788 000064C0 58                  <1>     pop rax
   789 000064C1 E967F9FFFF          <1>     jmp .badExit
   790                              <1> 
   791                              <1> .readDataFromHdl:
   792                              <1> ;Input: ecx = Number of bytes to transfer
   793                              <1> ;       rdx = Ptr to the buffer to use
   794 000064C6 52                  <1>     push rdx
   795 000064C7 E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   796 000064CC 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   797 000064D0 55                  <1>     push rbp
   798 000064D1 E889D2FFFF          <1>     call readFileHdl
   799 000064D6 5D                  <1>     pop rbp
   800 000064D7 E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   801 000064DC 5A                  <1>     pop rdx
   802                              <1>     return
    13                              <2> %%_ret:
    14 000064DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   803                              <1> .clearArenaOwner:
   804 000064DE 53                  <1>     push rbx
   805 000064DF 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   806 000064E1 E8E5110000          <1>     call dosCrit1Enter
   807 000064E6 E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   808 000064EB 5B                  <1>     pop rbx
   809                              <1>     return
    13                              <2> %%_ret:
    14 000064EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   810                              <1> .setPSPArenaOwner:
   811                              <1> ;Sets the current PSP as the arena owner
   812 000064ED 53                  <1>     push rbx
   813 000064EE 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   814 000064F5 E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   815 000064FA E8D6110000          <1>     call dosCrit1Exit
   816 000064FF 5B                  <1>     pop rbx
   817                              <1>     return
    13                              <2> %%_ret:
    14 00006500 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   818                              <1> .setProgOrEnvArenaOwnerToRBX:
   819                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   820 00006501 9C                  <1>     pushfq
   821 00006502 50                  <1>     push rax
   822                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   823                              <1>     ;This is because they are set up at separate points in the routine!
   824 00006503 488B45C8            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   825 00006507 E80C000000          <1>     call .writeArenaHeaderOwner
   826 0000650C 488B45D0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   827 00006510 E803000000          <1>     call .writeArenaHeaderOwner
   828 00006515 58                  <1>     pop rax
   829 00006516 9D                  <1>     popfq
   830                              <1>     return
    13                              <2> %%_ret:
    14 00006517 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   831                              <1> .writeArenaHeaderOwner:
   832                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   833                              <1> ;       rbx = Owner ID
   834 00006518 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   835                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000651B 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000651D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   836 0000651E 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   837 00006524 48895801            <1>     mov qword [rax + 1], rbx
   838                              <1>     return
    13                              <2> %%_ret:
    14 00006528 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    43                                  %include "./src/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 00006529 3C01                <1>     cmp al, 01
    12 0000652B 740B                <1>     je .setSC
    13 0000652D 7210                <1>     jb .getSC
    14 0000652F 3C03                <1>     cmp al, 03
    15 00006531 7214                <1>     jb .getDev
    16 00006533 741C                <1>     je .setDev
    17 00006535 B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 00006537 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 00006538 8815(D1030000)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 0000653E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 0000653F 8A15(D1030000)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 00006545 EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 00006547 B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 00006549 E8F70C0000          <1>     call getUserRegs
    29 0000654E 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 00006551 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;---------------------------------------------------------
    36                              <1> ;Common input registers
    37                              <1> ;al = Country code, 0 means current country info.
    38                              <1> ;bx = Country code if al = -1.
    39                              <1> ;Get country info:
    40                              <1> ;   rdx -> Buffer for the country table (not extended table)
    41                              <1> ;Set country info:
    42                              <1> ;   rdx = -1
    43                              <1> ;---------------------------------------------------------
    44                              <1> ;Return:
    45                              <1> ;Get country info:
    46                              <1> ;   CF=CY -> Error, ax = Error code
    47                              <1> ;   CF=NC -> OK, ax=bx=Country code, buffer @ rdx filled
    48                              <1> ;Set country info:
    49                              <1> ;   CF=CY -> Error, ax = Error code
    50                              <1> ;   CF=NC -> OK
    51                              <1> ;---------------------------------------------------------
    52 00006552 4889D7              <1>     mov rdi, rdx    ;Move the pointer/set indicator to rdi
    53 00006555 0FB6D0              <1>     movzx edx, al   ;Move potential partial country code, zx to edx
    54 00006558 3CFF                <1>     cmp al, -1      ;Does bx have the country code?
    55 0000655A 0F45DA              <1>     cmovne ebx, edx ;If not, move it there
    56 0000655D 31ED                <1>     xor ebp, ebp    ;Get country table
    57 0000655F B901000000          <1>     mov ecx, 1      ;Set country table
    58 00006564 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;Set or Get?
    59 0000656B 7429                <1>     je .goToNlsFuncSet ;If set, immediately goto nls func
    60 0000656D 85DB                <1>     test ebx, ebx   ;Else, in get, are we looking for current country?
    61 0000656F 7527                <1>     jnz .goToNlsFunc    ;If not zero, goto nls func
    62                              <1>     ;Get current country info here, works w/o NLSFUNC
    63                              <1> .copyCountryTable:
    64 00006571 488D35889CFFFF      <1>     lea rsi, ctryTbl
    65 00006578 B926000000          <1>     mov ecx, countryStruc_size
    66 0000657D F3A4                <1>     rep movsb
    67 0000657F 0FB71D769CFFFF      <1>     movzx ebx, word [extCtryTbl.countryCode]    ;Get current country code
    68                              <1> .exitWithCountryCode:
    69 00006586 E8BA0C0000          <1>     call getUserRegs
    70 0000658B 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx    ;And store it in users bx
    71                              <1> .exitNoCountryCode: 
    72 0000658F 89D8                <1>     mov eax, ebx    ;Move country code into eax for return (undocumented)
    73 00006591 E972110000          <1>     jmp extGoodExit
    74                              <1> .goToNlsFuncSet:
    75 00006596 89CD                <1>     mov ebp, ecx    ;Also set ebp to 1
    76                              <1> .goToNlsFunc:
    77 00006598 E812000000          <1>     call .nlsWrap   ;Access NLS functionality
    78 0000659D 0F8273110000        <1>     jc extErrExit   ;If CF=CY, exit error (error code in al)
    79 000065A3 85ED                <1>     test ebp, ebp   ;If set, exit, else get, we may need to copy data
    80 000065A5 75E8                <1>     jnz .exitNoCountryCode 
    81 000065A7 85DB                <1>     test ebx, ebx   ;If ebx = 0, we entered NLS and data copied for us.
    82 000065A9 75C6                <1>     jnz .copyCountryTable   ; If not, we gotta copy from our internal copy.
    83 000065AB 89D3                <1>     mov ebx, edx    ;Move the country code into ebx
    84 000065AD EBD7                <1>     jmp short .exitWithCountryCode
    85                              <1> .nlsWrap:
    86                              <1> ;Subroutine to wrap NLS functions. Should do nothing if we are looking
    87                              <1> ; for the current country (to avoid hitting NLSFUNC and erroring if
    88                              <1> ; not installed).
    89                              <1> ;Input: ebp = 0 -> Get country info
    90                              <1> ;           = 1 -> Set DOS country info
    91                              <1> ;        bx = Country code (bx <> 0 here)
    92                              <1> ;       rdi -> User buffer
    93                              <1> ;       rsi -> DOS internal NLS structure
    94                              <1> ;Output: CF = CY -> Error, al has error code (-1 is generic error)
    95                              <1> ;        CF = NC -> OK
    96                              <1> ;        bx = 0 => Entered NLS and data copied to user buffer.
    97                              <1> ;           > 0 => User requested current country code. Data NOT copied.
    98                              <1> ;All other registers remain the unaffected.
    99 000065AF 663B1D469CFFFF      <1>     cmp bx, word [extCtryTbl.countryCode]   ;No NLS access if current ctry.
   100                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000065B6 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000065B8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   101 000065B9 89DA                <1>     mov edx, ebx    ;Save the country code in edx
   102 000065BB 31DB                <1>     xor ebx, ebx    ;Set indicator that we are accessing NLS.
   103 000065BD B800140000          <1>     mov eax, 1400h  ;Is NLS installed?
   104 000065C2 CD2F                <1>     int 2fh
   105 000065C4 3CFF                <1>     cmp al, -1      ;If al <> -1, error exit
   106 000065C6 751F                <1>     jne .errNotInstalled
   107 000065C8 488D35BA9BFFFF      <1>     lea rsi, dosNLSPtr    ;Point rsi to the DOS codepage area
   108 000065CF B804140000          <1>     mov eax, 1404h  ;Get Country Info, for country code in dx
   109 000065D4 B903140000          <1>     mov ecx, 1403h  ;Set DOS Country Info, to country code in dx
   110 000065D9 85ED                <1>     test ebp, ebp   ;What can I do you for amigo?
   111 000065DB 0F45C1              <1>     cmovnz eax, ecx ;Set codepage if this is non-zero
   112 000065DE CD2F                <1>     int 2fh
   113 000065E0 84C0                <1>     test al, al ;If al = 0, all ok and return CF=NC!
   114                              <1>     retz  
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000065E2 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000065E4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   115                              <1> .exitErr:   ;Else return with the retuned error code
   116 000065E5 F9                  <1>     stc     ;and CF set
   117                              <1>     return
    13                              <2> %%_ret:
    14 000065E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> .errNotInstalled:
   119 000065E7 B001                <1>     mov al, errInvFnc  ;Set invalid function signature
   120 000065E9 EBFA                <1>     jmp short .exitErr
   121                              <1> 
   122                              <1> 
   123                              <1> getExtLocalInfo:    ;ah = 65h, Get Extended Country Info
   124                              <1> ;al = info ID
   125                              <1> ;   01h get general internationalization info
   126                              <1> ;   02h get pointer to uppercase table
   127                              <1> ;   04h get pointer to filename uppercase table
   128                              <1> ;   05h get pointer to filename terminator table
   129                              <1> ;   06h get pointer to collating sequence table
   130                              <1> ;bx = code page (FFFFh=global code page)
   131                              <1> ;dx = country ID (FFFFh=current country)
   132                              <1> ;rdi -> country information buffer
   133                              <1> ;ecx = size of buffer (>= 9), fail if less! NOTE THE CHANGE FROM 5 to 9!!!!
   134                              <1> ;Return:
   135                              <1> ;CF=CY if error
   136                              <1> ;ax = error code
   137                              <1> ;CF=NC if successful
   138                              <1> ;ecx = size of country information returned
   139                              <1> ;rdi -> country information filled in
   140                              <1> ;Undocumented: ax = default Codepage if nls or requested codepage if internal
   141 000065EB 81F909000000        <1>     cmp ecx, 9  ;Is our buffer of minimum acceptable size?
   142 000065F1 7250                <1>     jb .invFuncExit
   143 000065F3 488D358F9BFFFF      <1>     lea rsi, dosNLSPtr
   144 000065FA 6681FAFFFF          <1>     cmp dx, -1
   145 000065FF 660F4415F59BFFFF    <1>     cmove dx, word [extCtryTbl.countryCode] ;Get the current country code
   146 00006607 6681FBFFFF          <1>     cmp bx, -1
   147 0000660C 660F441DEA9BFFFF    <1>     cmove bx, word [extCtryTbl.activeCP]    ;Get the current codepage
   148 00006614 663B15E19BFFFF      <1>     cmp dx, word [extCtryTbl.countryCode]
   149 0000661B 7569                <1>     jne .nlsReq
   150 0000661D 663B1DDA9BFFFF      <1>     cmp bx, word [extCtryTbl.activeCP]
   151 00006624 7560                <1>     jne .nlsReq
   152                              <1>     ;We access our local DOS nationalisation tables to 
   153                              <1>     ; avoid hitting NLS.
   154 00006626 488D35A89BFFFF      <1>     lea rsi, charTableArray
   155 0000662D 0FB72D9F9BFFFF      <1>     movzx ebp, word [ctryFunctions]    ;Get max number of tables to parse
   156                              <1> .loopTableSearch:
   157 00006634 3A06                <1>     cmp al, byte [rsi]  ;Is the table ours?
   158 00006636 7515                <1>     jne .tblFound
   159 00006638 4881C609000000      <1>     add rsi, 9          ;Go to next table (skip one byte and one qword)
   160 0000663F FFCD                <1>     dec ebp
   161 00006641 75F1                <1>     jnz .loopTableSearch
   162                              <1>     ;Fallthrough to error if no match
   163                              <1> .invFuncExit:
   164 00006643 B801000000          <1>     mov eax, 1
   165 00006648 E9C9100000          <1>     jmp extErrExit
   166                              <1> .tblFound:
   167 0000664D A4                  <1>     movsb   ;Copy over the first byte, moving both pointers by 1
   168 0000664E 3C01                <1>     cmp al, 1
   169 00006650 741B                <1>     je .getExtCtryTbl
   170                              <1>     ;Here we simply copy over a qword
   171 00006652 B908000000          <1>     mov ecx, 8  ;Copy 8 more bytes
   172 00006657 B809000000          <1>     mov eax, 9  ;Number of bytes to save as having had been written
   173                              <1> .copyTable:
   174                              <1> ;Come here with eax = full copy len, ebx = codepage value, ecx = bytes to xfr
   175 0000665C F3A4                <1>     rep movsb   ;Copy the rest of the bytes
   176 0000665E E8E20B0000          <1>     call getUserRegs
   177 00006663 894610              <1>     mov dword [rsi + callerFrame.rcx], eax    ;Store in ecx # of bytes
   178                              <1>     ;Undocumented, if success, ax contains the requested codepage
   179                              <1>     ; value. This is undocumented and should not be relied upon.
   180 00006666 89D8                <1>     mov eax, ebx    
   181 00006668 E99B100000          <1>     jmp extGoodExit
   182                              <1> .getExtCtryTbl:
   183                              <1> ;ecx has length of caller buffer
   184 0000666D 81E903000000        <1>     sub ecx, 3  ;Remove the byte from the count and the length we will store
   185 00006673 31C0                <1>     xor eax, eax    ;Clear eax
   186 00006675 66AD                <1>     lodsw           ;Get word at rsi (full table len) and advance rsi by 2
   187 00006677 39C8                <1>     cmp eax, ecx    ;Do we have more bytes in buffer than we need?
   188 00006679 0F47C8              <1>     cmova ecx, eax  ;Set it to exactly the table length in that case
   189 0000667C 89C8                <1>     mov eax, ecx    ;Copy the number of bytes back to eax too
   190 0000667E 66AB                <1>     stosw           ;Store number of bytes we will copy and adv rdi by 2
   191 00006680 678D4103            <1>     lea eax, dword [ecx + 3] ;Add 3 to eax, for first 3 bytes copied
   192 00006684 EBD6                <1>     jmp short .copyTable
   193                              <1>     
   194                              <1> .nlsReq:    ;nlsReq moved here to reach the short jumps :)
   195                              <1> ;As before, now rsi -> DOSNLS structure
   196                              <1> ; and bpl has the function code (1,2,4,5,6)
   197 00006686 0FB6E8              <1>     movzx ebp, al   ;Place the function code in ebp (low byte, zx the rest)
   198 00006689 B800140000          <1>     mov eax, 1400h  ;Install check!
   199 0000668E CD2F                <1>     int 2fh
   200 00006690 3CFF                <1>     cmp al, -1          ;If not installed, error exit
   201 00006692 75AF                <1>     jne .invFuncExit    
   202 00006694 B802140000          <1>     mov eax, 1402h      ;Get codepage info
   203 00006699 CD2F                <1>     int 2fh
   204 0000669B 84C0                <1>     test al, al         ;If the return code is 0, we are ok, else
   205 0000669D 0F8573100000        <1>     jne extErrExit      ; al has error code
   206                              <1>     ;Undocumented, if success, ax contains the default codepage
   207                              <1>     ; value. This is undocumented and should not be relied upon.
   208                              <1>     ;This value never changes, not even by NLSFUNC.
   209 000066A3 0FB705279BFFFF      <1>     movzx eax, word [defaultCP]
   210 000066AA E959100000          <1>     jmp extGoodExit
   211                              <1> 
   212                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage
   213                              <1> ;If al = 01h -> Get Global Codepage
   214                              <1> ;Return:    ebx = Active (current) codepage
   215                              <1> ;           edx = System (default) codepage
   216                              <1> ;If al = 02h -> Set Global Codepage
   217                              <1> ;   bx = Active (current) codepage
   218                              <1> ;   dx = System (default) codepage. Not needed, so don't document.
   219 000066AF 3C01                <1>     cmp al, 1
   220 000066B1 7528                <1>     jne .setCodepage
   221                              <1> ;Here we get the codepage
   222 000066B3 E88D0B0000          <1>     call getUserRegs
   223 000066B8 0FB71D3F9BFFFF      <1>     movzx ebx, word [extCtryTbl.activeCP]   ;Get the active codepage value
   224 000066BF 0FB7150B9BFFFF      <1>     movzx edx, word [defaultCP] ;Get the default codepage
   225 000066C6 895E08              <1>     mov dword [rsi + callerFrame.rbx], ebx
   226 000066C9 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   227 000066CC E937100000          <1>     jmp extGoodExit
   228                              <1> .exitBadFunc:
   229 000066D1 B801000000          <1>     mov eax, errInvFnc
   230 000066D6 E93B100000          <1>     jmp extErrExit
   231                              <1> .setCodepage:
   232 000066DB 3C02                <1>     cmp al, 2
   233 000066DD 75F2                <1>     jne .exitBadFunc
   234 000066DF 0FB715AB9AFFFF      <1>     movzx edx, word [defltCtry] ;Get the country ID
   235 000066E6 B800140000          <1>     mov eax, 1400h
   236 000066EB CD2F                <1>     int 2Fh
   237 000066ED 3CFF                <1>     cmp al, -1
   238 000066EF 75E0                <1>     jne .exitBadFunc
   239 000066F1 488D35919AFFFF      <1>     lea rsi, dosNLSPtr  ;Get pointer to the DOS codepage in rsi
   240 000066F8 B801140000          <1>     mov eax, 1401h      ;Set global codepage
   241 000066FD CD2F                <1>     int 2Fh
   242 000066FF 84C0                <1>     test al, al
   243 00006701 0F8401100000        <1>     jz extGoodExit
   244 00006707 3C41                <1>     cmp al, errNLSAcDen
   245 00006709 0F8507100000        <1>     jne extErrExit
   246 0000670F 6698                <1>     cbw     ;Zero extend al into ax (as we know al = 41h)
   247 00006711 668905(0B040000)    <1>     mov word [errorExCde], ax
   248 00006718 C605(0D040000)06    <1>     mov byte [errorAction], eActIgn
   249 0000671F C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   250 00006726 C605(0E040000)05    <1>     mov byte [errorClass], eClsHrdFlt
   251 0000672D E9F10F0000          <1>     jmp extErrExit.noXlat   ;Jump to error exit without translating the error
   252                              <1> 
   253                              <1> 
   254                              <1> caseMapFunc:
   255                              <1> ;Input: AL=Char to convert to uppercase (above 80h)
   256 00006732 3C80                <1>     cmp al, 80h
   257                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006734 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006736 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   258 00006737 53                  <1>     push rbx
   259 00006738 488D1DE99AFFFF      <1>     lea rbx, ucTbl
   260 0000673F 2C80                <1>     sub al, 80h ;Turn into an offset into the table
   261 00006741 D7                  <1>     xlatb
   262 00006742 5B                  <1>     pop rbx
   263                              <1>     return
    13                              <2> %%_ret:
    14 00006743 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    44                                  %include "./src/Kernel/Error/ctrlc.asm"
     1                              <1> 
     2                              <1> diskIOError:
     3                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
     4                              <1> ;Input: rwFlag = 0 or 1 for read/write
     5                              <1> ;       eax = Status word
     6                              <1> ;       rdi -> disk pointer
     7                              <1> ;       rbp -> DPB ptr
     8 00006744 3C0F                <1>     cmp al, drvBadDskChnge
     9 00006746 7510                <1>     jne .doReq
    10 00006748 50                  <1>     push rax    ;If a bad disk change, drop the volume label ptr here
    11 00006749 488B05(E3040000)    <1>     mov rax, qword [primReqPkt + ioReqPkt.desptr]   ;Get volume label ptr
    12 00006750 488905(0F040000)    <1>     mov qword [errorVolLbl], rax    ;and save it!
    13                              <1>     ;Later versions will include a serial number after the lbl too
    14 00006757 58                  <1>     pop rax
    15                              <1> .doReq:
    16 00006758 E849000000          <1>     call diskDevErr ;Preserves the disk pointer
    17                              <1>     return
    13                              <2> %%_ret:
    14 0000675D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                              <1> xlatHardError:
    19                              <1> ;Translates a hard error code to a generic DOS error
    20                              <1> ;Input: edi = Hard Error Code
    21                              <1> ;       ah = Bitfield
    22                              <1> ;       al = Failing drive number
    23 0000675E 50                  <1>     push rax    ;Wanna preserve ax
    24 0000675F 6681FF1000          <1>     cmp di, hardXlatTblL    ;If errorcode > 15, do not adjust!!
    25 00006764 0FB7C7              <1>     movzx eax, di  ;Clears 64 bits and moves error code into ax
    26 00006767 730A                <1>     jae .skipXlat   ;Skip xlat if above 15, for IOCTL return errors
    27 00006769 53                  <1>     push rbx
    28 0000676A 488D1DF898FFFF      <1>     lea rbx, hardXlatTbl
    29 00006771 D7                  <1>     xlatb    ;Get translated byte from the table in al
    30 00006772 5B                  <1>     pop rbx
    31                              <1> .skipXlat:
    32 00006773 668905(0B040000)    <1>     mov word [errorExCde], ax   ;Store this error code here
    33 0000677A 58                  <1>     pop rax
    34 0000677B 56                  <1>     push rsi
    35 0000677C 488D359299FFFF      <1>     lea rsi, extErrTbl
    36 00006783 E8E70F0000          <1>     call setErrorVars
    37 00006788 5E                  <1>     pop rsi
    38                              <1>     return
    13                              <2> %%_ret:
    14 00006789 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> charDevErr:
    41                              <1> ;Hard character device errors come here
    42                              <1> ;Input:
    43                              <1> ; ah = Additional Int 24h flags. Top bit should be set!
    44                              <1> ;edi = error code in low byte
    45                              <1> ;rbp -> Not accessed but preserved
    46 0000678A 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK   ;Set the always bits
    47 0000678D 8825(68040000)      <1>     mov byte [Int24bitfld], ah
    48 00006793 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp
    49 0000679A 56                  <1>     push rsi
    50 0000679B 400FB6FF            <1>     movzx edi, dil    ;Zero extend the error code up
    51 0000679F E87C000000          <1>     call hardErrorCommon
    52 000067A4 5E                  <1>     pop rsi
    53                              <1>     return
    13                              <2> %%_ret:
    14 000067A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> diskDevErr:
    55                              <1> ;Called, NOT Jumped to. 
    56                              <1> ;Input: rdi = Disk Buffer pointer (or 0 to mean share)
    57                              <1> ;       eax = Status word (error code in al)
    58                              <1> ;       rbp = Disk DPB pointer
    59                              <1> ; [Int24hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    60                              <1> ;Output: al = Int 24h response (0-3)
    61                              <1> ; All other registers preserved
    62 000067A6 B308                <1>     mov bl, dataBuffer  ;Set dflt flags for invoke
    63 000067A8 4885FF              <1>     test rdi, rdi       ;Is this a share invokation?
    64 000067AB 7403                <1>     je .skipbufferread  ;Jump if so, since share lock issues occur on data io
    65 000067AD 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Else get the buffer data type
    66                              <1> .skipbufferread:
    67 000067B0 57                  <1>     push rdi        ;Save the buffer pointer
    68 000067B1 0FB6F8              <1>     movzx edi, al   ;Store status code in dil, zero extend
    69 000067B4 81FF00000000        <1>     cmp edi, drvWPErr
    70 000067BA 7509                <1>     jne .notReset
    71                              <1>     ;Reset the error drive to report dpb drive if a write protect error!
    72 000067BC 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    73 000067BF 8805(09040000)      <1>     mov byte [errorDrv], al ;Store this value
    74                              <1> .notReset:
    75 000067C5 8A25(68040000)      <1>     mov ah, byte [Int24bitfld]  ;Get the permissions in var
    76 000067CB 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set the always bits
    77                              <1>     ;Test for correct buffer data type
    78 000067CE F6C301              <1>     test bl, dosBuffer
    79 000067D1 7505                <1>     jnz .df0
    80 000067D3 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    81 000067D6 EB1E                <1>     jmp short .df3
    82                              <1> .df0:
    83 000067D8 F6C302              <1>     test bl, fatBuffer
    84 000067DB 750C                <1>     jnz .df1
    85 000067DD 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    86 000067E0 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Invalidate the count!
    87 000067E7 EB0D                <1>     jmp short .df3
    88                              <1> .df1:
    89 000067E9 F6C304              <1>     test bl, dirBuffer
    90 000067EC 7505                <1>     jnz .df2
    91 000067EE 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    92 000067F1 EB03                <1>     jmp short .df3
    93                              <1> .df2:
    94 000067F3 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    95                              <1> .df3:
    96 000067F6 8025(00070000)01    <1>     and byte [rwFlag], 1    ;Save only the bottom bit
    97 000067FD 0A25(00070000)      <1>     or ah, byte [rwFlag]    ;And set the low bit here
    98 00006803 0A25(68040000)      <1>     or ah, byte [Int24bitfld]
    99                              <1>     ;Continue down with failing disk buffer pointer on stack
   100 00006809 E802000000          <1>     call diskDevErrBitfield
   101 0000680E 5F                  <1>     pop rdi ;Pop back the disk buffer pointer
   102                              <1>     return   
    13                              <2> %%_ret:
    14 0000680F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> diskDevErrBitfield:
   104                              <1> ;Called with Int24Bitfield constructed and in ah and error code in dil
   105                              <1> ;This is to avoid rebuilding the bitfield.
   106 00006810 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get the drive number
   107 00006813 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save the DPB 
   108 0000681A 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;And get the driver ptr in rsi
   109 0000681E 31ED                <1>     xor ebp, ebp    ;Finally, set ebp to 0 to simulate the segment
   110                              <1> hardErrorCommon:
   111                              <1> ;The common fields, with the vars set up. 
   112                              <1> ;Ensure we dont have a crazy error code.
   113                              <1> ;Entered with: ah = bitfield, al = Fail drive (0 based) if not char
   114                              <1> ; dil = Driver error code, rsi -> Driver header
   115                              <1> ;tmpDBPPtr = Fail DPB if not char, rwFlag set/clear
   116 00006820 E839FFFFFF          <1>     call xlatHardError
   117 00006825 50                  <1>     push rax
   118 00006826 B80C000000          <1>     mov eax, errGF - drvErrShft
   119 0000682B 39C7                <1>     cmp edi, eax    ; If the returned error code is above largest driver code
   120 0000682D 0F47F8              <1>     cmova edi, eax  ; return the driver largest code
   121 00006830 58                  <1>     pop rax
   122                              <1> criticalDOSError:   ;Int 2Fh, AX=1206h, Invoke Critical Error Function 
   123                              <1> ;Will swap stacks and enter int 24h safely and handle passing the right data 
   124                              <1> ; to the critical error handler.
   125                              <1> ; Called with rsi set as required by Int 24h (caller decides), ax, di
   126                              <1> ; and with Int24Bitfield set
   127                              <1> ;               AH = Critical Error Bitfield
   128                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   129                              <1> ;               Bit 6 - Reserved
   130                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   131                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   132                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   133                              <1> ;               Bits [2-1] = Affected Disk Error
   134                              <1> ;                     0 0   DOS area
   135                              <1> ;                     0 1   FAT area
   136                              <1> ;                     1 0   Directory area
   137                              <1> ;                     1 1   Data area
   138                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   139                              <1> ;               AL  = Failing drive number if AH[7] = 0
   140                              <1> ;               DIL = Error code for errorMsg
   141                              <1> ;               RSI = EA of Device Header for which device the error occured
   142                              <1> ;Return:
   143                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   144                              <1> ;                  = 1 - Retry the Operation    (Retry)
   145                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   146                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   147                              <1> ; Return response from int 24h in al
   148                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   149                              <1> ; This function will terminate the program if an abort was requested!
   150                              <1> ; This function also destroys RBP
   151 00006831 803D(07040000)01    <1>     cmp byte [critErrFlag], 1
   152 00006838 7204                <1>     jb .noIntError  ;If not 0, enter
   153 0000683A B003                <1>     mov al, critFail    ;Else, return Fail always
   154 0000683C EB76                <1>     jmp short .exit     ;Don't translate fail to abort
   155                              <1> .noIntError:
   156 0000683E 488925(60040000)    <1>     mov qword [xInt24hRSP], rsp ;Save our critical error stack
   157 00006845 66813D(3A070000)FF- <1>     cmp word  [currentNdx], -1  ;If this is -1, we are not opening a file
   157 0000684D FF                  <1>
   158 0000684E 740C                <1>     je .notOpeningFile
   159 00006850 57                  <1>     push rdi
   160 00006851 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]  ;Get the pointer to the current handle entry
   161 00006858 C607FF              <1>     mov byte [rdi], -1          ;Free this handle
   162 0000685B 5F                  <1>     pop rdi
   163                              <1> .notOpeningFile:
   164 0000685C FA                  <1>     cli                         
   165 0000685D FE05(07040000)      <1>     inc byte [critErrFlag]      ;Set flag for critical error
   166 00006863 FE0D(08040000)      <1>     dec byte [inDOS]            ;Exiting DOS
   167 00006869 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]     ;Get the stack ptr after regs were pushed
   168 00006870 31ED                <1>     xor ebp, ebp                ;Always zeroed for DOS portability!
   169 00006872 CD24                <1>     int 24h                     ;Call crit. err. hdlr. Ints reset on
   170 00006874 488925(7B040000)    <1>     mov qword [oldRSP], rsp     ;Allows user to change reg vals on fail!
   171 0000687B 488B25(60040000)    <1>     mov rsp, qword [xInt24hRSP] ;Ret to DOS stack for failing device
   172 00006882 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   173 00006889 FE05(08040000)      <1>     inc byte [inDOS]            ;Reenter DOS
   174 0000688F 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]
   175 00006896 FB                  <1>     sti                         
   176                              <1>     ;Now we check that the response given was allowed, and translate if needed
   177                              <1> .checkResponse:
   178 00006897 3C00                <1>     cmp al, critIgnore
   179 00006899 743F                <1>     je .checkIgnore
   180 0000689B 3C01                <1>     cmp al, critRetry
   181 0000689D 7446                <1>     je .checkRetry
   182 0000689F 3C03                <1>     cmp al, critFail
   183 000068A1 754D                <1>     jne .abort   ;Must be abort
   184                              <1> .setFail:   ;Here is for fail
   185 000068A3 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int24 responded Fail)
   186 000068A5 FE05(6A040000)      <1>     inc byte [Int24Fail]        ;Inc the fail counter!
   187 000068AB F605(68040000)08    <1>     test byte [Int24bitfld], critFailOK
   188 000068B2 743C                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   189                              <1> .exit:
   190 000068B4 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   191 000068BB 803D(3A070000)FF    <1>     cmp byte [currentNdx], -1   ;Is there a file that needs handling?
   192                              <1>     rete    ;Only if this is not equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000068C2 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000068C4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   193                              <1>     ;In that case, we set the jft entry to its initial value, whatever it was
   194 000068C5 50                  <1>     push rax
   195 000068C6 57                  <1>     push rdi
   196 000068C7 0FB705(3A070000)    <1>     movzx eax, word [currentNdx]
   197 000068CE 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]
   198 000068D5 8807                <1>     mov byte [rdi], al
   199 000068D7 5F                  <1>     pop rdi
   200 000068D8 58                  <1>     pop rax
   201                              <1>     return
    13                              <2> %%_ret:
    14 000068D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   202                              <1> .checkIgnore:
   203 000068DA F605(68040000)20    <1>     test byte [Int24bitfld], critIgnorOK
   204 000068E1 75D1                <1>     jnz .exit
   205 000068E3 EBBE                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   206                              <1> .checkRetry:
   207 000068E5 F605(68040000)10    <1>     test byte [Int24bitfld], critRetryOK
   208 000068EC 75C6                <1>     jnz .exit   
   209 000068EE EBB3                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   210                              <1> .abort:
   211                              <1> ;Prepare to abort. We abort from within!
   212 000068F0 E87DC2FFFF          <1>     call vConRetDriver  ;Always reset the driver flag on abort
   213                              <1> ;If a network request requests abort, translate to fail
   214 000068F5 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1
   215 000068FC 7509                <1>     jne .kill   ;If this is zero, local invokation
   216 000068FE C605(96040000)FF    <1>     mov byte [Int24Trans], -1   ;We are translating a Abort to Fail. Mark it
   217 00006905 EBAD                <1>     jmp short .exit
   218                              <1> .kill:
   219 00006907 31C0                <1>     xor eax, eax    ;Default return code to 0. Abort flag will be set later
   220 00006909 C605(06070000)02    <1>     mov byte [exitType], 2      ;We are returning from Abort, ret type 2!
   221 00006910 C605(5F040000)00    <1>     mov byte [volIdFlag], 0     ;Clear special vol search byte if set
   222                              <1>     ;Before returning, we need to set the aborting psp.rspPtr back to 
   223                              <1>     ; the oldRSP as a syscall during Int 24h would change this value.
   224                              <1>     ;This only affects programs which are their own parents as when aborting
   225                              <1>     ; we swap to the parentPSP. This prevents a bug from arising as the 
   226                              <1>     ; stack ptr in psp.rspPtr may have changed since initially entering DOS
   227                              <1>     ; as the Int 24h handler may have made an Int 21h call, meaning if 
   228                              <1>     ; the Int 24h handler plays with the stack too much, the value in 
   229                              <1>     ; psp.rspPtr is no longer pointing at a "valid" stack frame (i.e. 
   230                              <1>     ; with valid SS:RSP). The only sane thing to do is to reset this 
   231                              <1>     ; pointer to the value it had on entry to the initial DOS call which
   232                              <1>     ; triggered the Int 24h (or the equivalent stack frame that was 
   233                              <1>     ; replaced by the Int 24h handler). If the task being aborted is not 
   234                              <1>     ; its own parent the following is a NOP. If it is its own parent, we
   235                              <1>     ; the following prevents a GP. Fault.
   236 00006917 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   237 0000691E 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   238 00006925 48895F46            <1>     mov qword [rdi + psp.rspPtr], rbx
   239 00006929 E97AF3FFFF          <1>     jmp terminateClean.altEP
   240                              <1> 
   241                              <1> ctrlBreakHdlr:
   242 0000692E B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
   243 00006930 E86AC1FFFF          <1>     call printCaretASCII
   244 00006935 E895C1FFFF          <1>     call printCRLF
   245                              <1>     ;Reset the console back to 0
   246 0000693A E833C2FFFF          <1>     call vConRetDriver
   247                              <1> ;Handles a control break, juggles stacks and enters int 21h 
   248                              <1> .exceptEP:
   249                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
   250                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
   251                              <1> ;   interrupted DOS call is restarted
   252 0000693F FA                  <1> 	cli
   253 00006940 488B25(7B040000)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
   254 00006947 E8510D0000          <1> 	call dosPopRegs ;Get user state back
   255 0000694C C605(08040000)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
   256 00006953 C605(07040000)00    <1>     mov byte [critErrFlag], 0
   257 0000695A 488925(27040000)    <1>     mov qword [xInt23hRSP], rsp  ;Save user rsp. This is the og psp rsp.
   258 00006961 F8                  <1>     clc
   259 00006962 CD23                <1>     int 23h ;Call critical error handler
   260 00006964 FA                  <1>     cli ;Clear interrupts again
   261 00006965 488905(33040000)    <1>     mov qword [oldRAX], rax ;Save rax
   262 0000696C 9C                  <1>     pushfq  ;Get flags in rax
   263 0000696D 58                  <1>     pop rax 
   264 0000696E 483B25(27040000)    <1>     cmp rsp, qword [xInt23hRSP] ;Did the user return with ret 8?
   265 00006975 750C                <1>     jne .checkCF
   266                              <1> .returnToDOS:
   267 00006977 488B05(33040000)    <1>     mov rax, qword [oldRAX]
   268 0000697E E9C00B0000          <1>     jmp functionDispatch    ;Goto int 21h
   269                              <1> .checkCF:
   270 00006983 488B25(27040000)    <1>     mov rsp, qword [xInt23hRSP]  ;Account for the flags and SS:RSP left on stack
   271 0000698A A801                <1>     test al, 1  ;CF set?
   272 0000698C 74E9                <1>     jz .returnToDOS ;If yes, subfunction number must be in al
   273 0000698E B8004C0000          <1>     mov eax, 4c00h  ;Exit without error code
   274 00006993 C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1  ;CTRL+BREAK termination
   275 0000699A E9A40B0000          <1>     jmp functionDispatch ;When jumping now, rsp will go back into psp.rsp!
   276                              <1> 
   277                              <1> ;CPU Exception handlers
   278                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
   279                              <1> ; CTRL+C exit.
   280                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
   281                              <1> ; system.
   282                              <1> ; Also halt if the application is it's own parent.
   283                              <1> ;An application should hook these interupts if they wish to not 
   284                              <1> ; CTRL+C exit, and instead return to DOS.
   285                              <1> i0:
   286 0000699F 31C0                <1>     xor eax, eax
   287 000069A1 E9AB000000          <1>     jmp cpu_2args
   288                              <1> i1:
   289 000069A6 B801000000          <1>     mov eax, 1
   290 000069AB E9A1000000          <1>     jmp cpu_2args
   291                              <1> i2:
   292 000069B0 B802000000          <1>     mov eax, 2
   293 000069B5 E997000000          <1>     jmp cpu_2args
   294                              <1> i3:
   295 000069BA B803000000          <1>     mov eax, 3
   296 000069BF E98D000000          <1>     jmp cpu_2args
   297                              <1> i4:
   298 000069C4 B804000000          <1>     mov eax, 4
   299 000069C9 E983000000          <1>     jmp cpu_2args
   300                              <1> i5:
   301 000069CE B805000000          <1>     mov eax, 5
   302 000069D3 EB7C                <1>     jmp short cpu_2args
   303                              <1> i6:
   304 000069D5 B806000000          <1>     mov eax, 6
   305 000069DA EB75                <1>     jmp short cpu_2args
   306                              <1> i7:
   307 000069DC B807000000          <1>     mov eax, 7
   308 000069E1 EB6E                <1>     jmp short cpu_2args
   309                              <1> i8:
   310 000069E3 B808000000          <1>     mov eax, 8
   311 000069E8 EB60                <1>     jmp short cpu_3args
   312                              <1> i9:
   313 000069EA B809000000          <1>     mov eax, 9
   314 000069EF EB60                <1>     jmp short cpu_2args
   315                              <1> i10:
   316 000069F1 B80A000000          <1>     mov eax, 0Ah
   317 000069F6 EB52                <1>     jmp short cpu_3args
   318                              <1> i11:
   319 000069F8 B80B000000          <1>     mov eax, 0Bh
   320 000069FD EB4B                <1>     jmp short cpu_3args
   321                              <1> i12:
   322 000069FF B80C000000          <1>     mov eax, 0Ch
   323 00006A04 EB44                <1>     jmp short cpu_3args
   324                              <1> i13:
   325 00006A06 B80D000000          <1>     mov eax, 0Dh
   326 00006A0B EB3D                <1>     jmp short cpu_3args
   327                              <1> i14:
   328 00006A0D B80E000000          <1>     mov eax, 0Eh
   329 00006A12 EB2F                <1>     jmp short cpu_4args
   330                              <1> i15:
   331 00006A14 B80F000000          <1>     mov eax, 0Fh
   332 00006A19 EB36                <1>     jmp short cpu_2args
   333                              <1> i16:
   334 00006A1B B810000000          <1>     mov eax, 10h
   335 00006A20 EB2F                <1>     jmp short cpu_2args
   336                              <1> i17:
   337 00006A22 B811000000          <1>     mov eax, 11h
   338 00006A27 EB21                <1>     jmp short cpu_3args
   339                              <1> i18:
   340 00006A29 B812000000          <1>     mov eax, 12h
   341 00006A2E EB21                <1>     jmp short cpu_2args
   342                              <1> i19:
   343 00006A30 B813000000          <1>     mov eax, 13h
   344 00006A35 EB1A                <1>     jmp short cpu_2args
   345                              <1> i20:
   346 00006A37 B814000000          <1>     mov eax, 14h
   347 00006A3C EB13                <1>     jmp short cpu_2args
   348                              <1> i21:
   349 00006A3E B815000000          <1>     mov eax, 15h
   350                              <1> cpu_4args:
   351 00006A43 B903000000          <1>     mov ecx, 3
   352 00006A48 EB0C                <1>     jmp short cpu_exception
   353                              <1> cpu_3args:
   354 00006A4A B902000000          <1>     mov ecx, 2
   355 00006A4F EB05                <1>     jmp short cpu_exception
   356                              <1> cpu_2args:
   357 00006A51 B901000000          <1>     mov ecx, 1
   358                              <1> cpu_exception:
   359                              <1> ;Enter with:
   360                              <1> ; eax = Exception number in binary
   361                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
   362 00006A56 488D3537020000      <1>     lea rsi, .fatalt0   ;Get the ptr
   363 00006A5D BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
   364 00006A62 E8E5010000          <1>     call .writeExceptionMessage
   365                              <1> 
   366 00006A67 C605(91070000)00    <1>     mov byte [haltDOS], 0   ;Clear first as we are recycling this byte in SDA
   367 00006A6E 803D(08040000)01    <1>     cmp byte [inDOS], 1     ;Are we in DOS? 
   368 00006A75 7327                <1>     jae .introStop          ;Crap out, cant guarantee DOS is stable anymore
   369 00006A77 3D02000000          <1>     cmp eax, 2              ;NMI?
   370 00006A7C 7420                <1>     je .introStop           ;Freeze the PC to stop it from hurting itself...
   371                              <1> 
   372 00006A7E 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;If self-parent craps out... 
   373 00006A85 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr] ;Who do we call? COMSPEC?
   374 00006A89 7413                <1>     je .introStop   ;Nah, for now, just hard stop like if DOS is bad.
   375                              <1> 
   376 00006A8B 488D352B020000      <1>     lea rsi, .fatal1
   377 00006A92 BBC1000000          <1>     mov ebx, fatal1L
   378 00006A97 E8B0010000          <1>     call .writeExceptionMessage
   379 00006A9C EB18                <1>     jmp short .introEnd
   380                              <1> .introStop:
   381 00006A9E C605(91070000)FF    <1>     mov byte [haltDOS], -1  ;Set crap out byte...
   382 00006AA5 488D35D5020000      <1>     lea rsi, .fatalHalt     ;Get the ptr
   383 00006AAC BB19000000          <1>     mov ebx, fatalHaltL     ;Get the length
   384 00006AB1 E896010000          <1>     call .writeExceptionMessage
   385                              <1> .introEnd:
   386 00006AB6 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   387 00006ABD E858010000          <1>     call .printbyte ;Store the error code in the byte buffer
   388 00006AC2 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   389 00006AC9 BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   390 00006ACE E879010000          <1>     call .writeExceptionMessage
   391                              <1> 
   392 00006AD3 488D35A4020000      <1>     lea rsi, .fatal2
   393 00006ADA BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   394 00006ADF E868010000          <1>     call .writeExceptionMessage
   395                              <1> 
   396 00006AE4 80F901              <1>     cmp cl, 1
   397 00006AE7 0F8793000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   398                              <1> .cpurollprint:
   399 00006AED 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   400 00006AF4 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   401                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   402 00006AF8 B108                <1>     mov cl, 8    ;8 bytes
   403                              <1> .cpurollprint1:
   404 00006AFA 48C1C208            <1>     rol rdx, 8
   405 00006AFE 88D0                <1>     mov al, dl
   406 00006B00 52                  <1>     push rdx
   407 00006B01 E814010000          <1>     call .printbyte
   408 00006B06 5A                  <1>     pop rdx
   409 00006B07 FEC9                <1>     dec cl
   410 00006B09 75EF                <1>     jnz .cpurollprint1
   411                              <1> 
   412 00006B0B BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   413 00006B10 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   414 00006B17 E830010000          <1>     call .writeExceptionMessage
   415                              <1> 
   416 00006B1C BB03000000          <1>     mov ebx, crlfL
   417 00006B21 488D3572020000      <1>     lea rsi, .crlf
   418 00006B28 E81F010000          <1>     call .writeExceptionMessage    
   419                              <1> 
   420 00006B2D F605(91070000)FF    <1>     test byte [haltDOS], -1
   421 00006B34 7534                <1>     jnz .fatalStop
   422 00006B36 E8FC000000          <1>     call .readInputChar
   423                              <1>     ;Set error code to General Failure
   424 00006B3B 66C705(0B040000)1F- <1>     mov word [errorExCde], errGF
   424 00006B43 00                  <1>
   425 00006B44 C605(0D040000)04    <1>     mov byte [errorAction], eActAbt
   426 00006B4B C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   427 00006B52 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   428 00006B59 B8FF4C0000          <1>     mov eax, 4cFFh
   429 00006B5E C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1
   430                              <1>     ;If a errGF error code and ctrlC exit and the extended error
   431                              <1>     ; setup as above, chances are it was a CPU error
   432 00006B65 E9D9090000          <1>     jmp functionDispatch    ;Call Int 21h politely, clean up resources
   433                              <1> .fatalStop:
   434                              <1> ;This is called if inDOS > 1 or NMI occured
   435                              <1> ;Freezes the machine
   436 00006B6A B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   437 00006B6F CD2A                <1>     int 2Ah
   438 00006B71 E8550B0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   439 00006B76 E8640B0000          <1>     call dosCrit2Enter  ;Get the lock to drivers
   440 00006B7B FA                  <1>     cli                 ;Halt all interrupts
   441                              <1> .fatalLp:
   442 00006B7C F390                <1>     pause
   443 00006B7E EBFC                <1>     jmp short .fatalLp  ;Stay here forever, we cant guarantee anything anymore!
   444                              <1> .cpuextendederror:
   445 00006B80 5A                  <1>     pop rdx
   446 00006B81 48FFC9              <1>     dec rcx
   447 00006B84 51                  <1>     push rcx
   448 00006B85 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   449 00006B8C B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   450 00006B8E 86D6                <1>     xchg dl, dh   
   451                              <1> .pr1:
   452 00006B90 88D0                <1>     mov al, dl
   453 00006B92 52                  <1>     push rdx
   454 00006B93 E882000000          <1>     call .printbyte
   455 00006B98 5A                  <1>     pop rdx
   456 00006B99 C1CA08              <1>     ror edx, 8    ;Print just dx for now
   457 00006B9C FEC9                <1>     dec cl
   458 00006B9E 75F0                <1>     jnz .pr1
   459                              <1> 
   460 00006BA0 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   461 00006BA7 BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   462 00006BAC E89B000000          <1>     call .writeExceptionMessage
   463                              <1> 
   464 00006BB1 488D35C6010000      <1>     lea rsi, .fatal2
   465 00006BB8 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   466 00006BBD E88A000000          <1>     call .writeExceptionMessage
   467                              <1> 
   468 00006BC2 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   469 00006BC3 48FFC9              <1>     dec rcx
   470 00006BC6 0F8421FFFFFF        <1>     jz .cpurollprint
   471                              <1> 
   472 00006BCC B108                <1>     mov cl, 8   ;16 nybbles
   473 00006BCE 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   474 00006BD1 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   475                              <1> .pr2:
   476 00006BD8 48C1C208            <1>     rol rdx, 8    ;Print rdx
   477 00006BDC 88D0                <1>     mov al, dl
   478 00006BDE 52                  <1>     push rdx
   479 00006BDF E836000000          <1>     call .printbyte
   480 00006BE4 5A                  <1>     pop rdx
   481 00006BE5 FEC9                <1>     dec cl
   482 00006BE7 75EF                <1>     jnz .pr2
   483                              <1> 
   484 00006BE9 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   485 00006BF0 BB10000000          <1>     mov ebx, 16
   486 00006BF5 E852000000          <1>     call .writeExceptionMessage
   487                              <1> 
   488 00006BFA 488D357D010000      <1>     lea rsi, .fatal2
   489 00006C01 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   490 00006C06 E841000000          <1>     call .writeExceptionMessage
   491                              <1> 
   492 00006C0B E9DDFEFFFF          <1>     jmp .cpurollprint
   493                              <1> 
   494                              <1> 
   495                              <1> .char:    ;Print a single character
   496 00006C10 488D1D6D000000      <1>     lea rbx, .ascii
   497 00006C17 D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   498 00006C18 AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   499 00006C19 C3                  <1>     ret
   500                              <1> .printbyte:
   501 00006C1A 88C2                <1>     mov dl, al            ;save byte in dl
   502 00006C1C 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   503 00006C20 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   504 00006C25 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   505 00006C29 E8E2FFFFFF          <1>     call .char
   506 00006C2E 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   507 00006C31 E8DAFFFFFF          <1>     call .char
   508 00006C36 C3                  <1>     ret        
   509                              <1> 
   510                              <1> 
   511                              <1> .readInputChar:
   512 00006C37 C605(ED040000)04    <1>     mov byte [critReqPkt + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   513 00006C3E 488D35(1C050000)    <1>     lea rsi, singleIObyt
   514 00006C45 BB01000000          <1>     mov ebx, 1  ;Read one char
   515 00006C4A EB07                <1>     jmp short .ioException
   516                              <1> .writeExceptionMessage:
   517                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   518 00006C4C C605(ED040000)08    <1>     mov byte [critReqPkt + ioReqPkt.cmdcde], drvWRITE
   519                              <1> .ioException:
   520 00006C53 C605(EB040000)2A    <1>     mov byte [critReqPkt + ioReqPkt.hdrlen], ioReqPkt_size
   521 00006C5A 66C705(EE040000)00- <1>     mov word [critReqPkt + ioReqPkt.status], 0
   521 00006C62 00                  <1>
   522 00006C63 891D(01050000)      <1>     mov dword [critReqPkt + ioReqPkt.tfrlen], ebx
   523 00006C69 488D1D(EB040000)    <1>     lea rbx, critReqPkt
   524 00006C70 488935(F9040000)    <1>     mov qword [critReqPkt + ioReqPkt.bufptr], rsi
   525 00006C77 488B35(53000000)    <1>     mov rsi, qword [vConPtr]
   526 00006C7E E822010000          <1>     call goDriver
   527                              <1>     return
    13                              <2> %%_ret:
    14 00006C83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   528                              <1> 
   529                              <1> 
   530                              <1> ;Error messages
   531 00006C84 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   531 00006C8D 39414243444546      <1>
   532 00006C94 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   532 00006C9D 20205343502F444F53- <1>
   532 00006CA6 20455843455054494F- <1>
   532 00006CAF 4E2044455445435445- <1>
   532 00006CB8 44210D0A0A          <1>
   533                              <1> fatalt0L   equ $ - .fatalt0
   534                              <1> 
   535                              <1> .fatal1:   
   536 00006CBD 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   536 00006CC6 656E7469616C6C7920- <1>
   536 00006CCF 666174616C20657272- <1>
   536 00006CD8 6F7220686173206265- <1>
   536 00006CE1 656E20646574656374- <1>
   536 00006CEA 65640D0A            <1>
   537 00006CEE 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   537 00006CF7 68652063757272656E- <1>
   537 00006D00 74206170706C696361- <1>
   537 00006D09 74696F6E206D757374- <1>
   537 00006D12 206265207465726D69- <1>
   537 00006D1B 6E617465642E0D0A0A  <1>
   538 00006D24 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   538 00006D2D 20616E79206B657920- <1>
   538 00006D36 746F20636F6E74696E- <1>
   538 00006D3F 7565206F7220435452- <1>
   538 00006D48 4C2B414C542B44454C- <1>
   538 00006D51 20746F207265737461- <1>
   538 00006D5A 727420746865206D61- <1>
   538 00006D63 6368696E652E        <1>
   539 00006D69 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   539 00006D72 5354454D204552524F- <1>
   539 00006D7B 523A20              <1>
   540                              <1> fatal1L equ $ - .fatal1
   541                              <1> 
   542 00006D7E 203A20              <1> .fatal2:   db " : "
   543                              <1> fatal2L    equ $ - .fatal2
   544                              <1> 
   545                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   546 00006D81 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   546 00006D8A 4F532053595354454D- <1>
   546 00006D93 2053544F503A20      <1>
   547                              <1> fatalHaltL equ $ - .fatalHalt
   548 00006D9A 0D0A0A              <1> .crlf:  db CR,LF,LF
   549                              <1> crlfL  equ $ - .crlf
    45                                  %include "./src/Kernel/Core/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 25h Int 26h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 00006D9D B003                <1>     mov al, critFail
     7 00006D9F 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 00006DA1 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 00006DA5 E835090000          <1>     call dosCrit2Enter
    16 00006DAA FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 00006DAD FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 00006DB0 E834090000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 00006DB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> ;The NUL driver lives here as it is implemented by the Kernel by default!
    22                              <1> nulStrat:
    23 00006DB6 66C743030001        <1>     mov word [rbx + drvReqHdr.status], drvDonStatus    ;Set done bit directly
    24                              <1> nulIntr:
    25                              <1>     return
    13                              <2> %%_ret:
    14 00006DBC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> setupPhysicalDiskRequest:
    28                              <1> ;Ensure that al has valid disk number
    29                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    30                              <1> ;If CF=NC, rbp = DPB ptr.
    31                              <1> ;If CF=CY, exit error
    32 00006DBD 84C0                <1>     test al, al
    33 00006DBF 723F                <1>     jc .diskError
    34 00006DC1 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
    35 00006DC7 7337                <1>     jae .diskError
    36 00006DC9 50                  <1>     push rax
    37 00006DCA FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    38 00006DCC E808050000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    39 00006DD1 58                  <1>     pop rax
    40 00006DD2 7235                <1>     jc .error
    41 00006DD4 8805(09070000)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    42 00006DDA 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    43 00006DE1 48F7454300800000    <1>     test qword [rbp + cds.wFlags], cdsRedirDrive   ;On a network?
    44 00006DE9 750A                <1>     jnz .netError
    45 00006DEB 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    46 00006DEF E8B5030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    47                              <1>     return
    13                              <2> %%_ret:
    14 00006DF4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> .netError:
    49 00006DF5 66C705(0B040000)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    49 00006DFD 00                  <1>
    50 00006DFE EB09                <1>     jmp short .error
    51                              <1> .diskError:
    52 00006E00 66C705(0B040000)0F- <1>     mov word [errorExCde], errBadDrv
    52 00006E08 00                  <1>
    53                              <1> .error: ;This error setting needs to remain as is to allow for Int 25/46
    54 00006E09 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    55 00006E10 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
    56 00006E17 C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
    57 00006E1E F9                  <1>     stc
    58                              <1>     return
    13                              <2> %%_ret:
    14 00006E1F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    59                              <1> 
    60                              <1> setupAbsDiskEntry:
    61                              <1> ;Prepares to sets up the CDS and DPB for the request
    62 00006E20 FE05(08040000)      <1>     inc byte [inDOS]
    63 00006E26 FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    64 00006E27 FC                  <1>     cld ;Set string ops in the right direction
    65 00006E28 E890FFFFFF          <1>     call setupPhysicalDiskRequest
    66                              <1>     retc    ;Error exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006E2D 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006E2F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    67 00006E30 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;We prob. will invalidate
    68 00006E37 56                  <1>     push rsi
    69 00006E38 50                  <1>     push rax
    70 00006E39 488D35(1E050000)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    71 00006E40 8806                <1>     mov byte [rsi], al  ;Construct a path
    72 00006E42 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    73 00006E45 66C746013A00        <1>     mov word [rsi + 1], ":" ;Path Colon and terminating zero
    74 00006E4B F8                  <1>     clc
    75                              <1> ;++++++++++++++++++++++++++++
    76                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    77                              <1> ;Entered with path in rsi (ah=03h)
    78 00006E4C B800030000          <1>     mov eax, 0300h  
    79 00006E51 CD2A                <1>     int 2Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    80                              <1> ;++++++++++++++++++++++++++++
    81 00006E53 58                  <1>     pop rax
    82 00006E54 5E                  <1>     pop rsi
    83                              <1> .exit:
    84 00006E55 729E                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    85                              <1>     return
    13                              <2> %%_ret:
    14 00006E57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> absDiskWrite:       ;Int 26h
    88                              <1> ;al = Drive number
    89                              <1> ;rbx = Memory Buffer address to read from
    90                              <1> ;ecx = Number of sectors to write
    91                              <1> ;rdx = Start LBA to write to
    92 00006E58 FA                  <1>     cli
    93 00006E59 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    94 00006E60 488D25(D8190000)    <1>     lea rsp, DiskStakTop
    95 00006E67 55                  <1>     push rbp
    96 00006E68 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    97 00006E69 E8B2FFFFFF          <1>     call setupAbsDiskEntry
    98 00006E6E 7252                <1>     jc absDiskExit
    99 00006E70 E847020000          <1>     call primReqWriteSetup
   100 00006E75 EB1D                <1>     jmp short absDiskReadWriteCommon
   101                              <1> absDiskRead:        ;Int 25h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to write to
   104                              <1> ;ecx = Number of sectors to read
   105                              <1> ;rdx = Start LBA to read from
   106 00006E77 FA                  <1>     cli 
   107 00006E78 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 00006E7F 488D25(D8190000)    <1>     lea rsp, DiskStakTop
   109 00006E86 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   110 00006E87 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   111 00006E88 E893FFFFFF          <1>     call setupAbsDiskEntry
   112 00006E8D 7233                <1>     jc absDiskExit
   113 00006E8F E833020000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   114                              <1> absDiskReadWriteCommon:
   115                              <1> ;Entered with the appropriate function number in ah
   116                              <1> ; and primary request header in rbx
   117 00006E94 E859000000          <1>     call absDiskDriverCall
   118 00006E99 7427                <1>     jz absDiskExit  ;Skip error code checking
   119 00006E9B 8A05(C4040000)      <1>     mov al, byte [primReqPkt + ioReqPkt.status] ;Get low byte into al
   120                              <1>     ;DOS uses the following pairs in a table
   121                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   122 00006EA1 B480                <1>     mov ah, 80h ;Attachment failure
   123 00006EA3 3C0C                <1>     cmp al, 0Ch ;Gen error
   124 00006EA5 741A                <1>     je .absExit
   125 00006EA7 B440                <1>     mov ah, 40h ;Seek error
   126 00006EA9 3C06                <1>     cmp al, 06h
   127 00006EAB 7414                <1>     je .absExit
   128 00006EAD B408                <1>     mov ah, 08h ;Bad CRC
   129 00006EAF 3C04                <1>     cmp al, 04h
   130 00006EB1 740E                <1>     je .absExit
   131 00006EB3 B404                <1>     mov ah, 04h ;Sector not found
   132 00006EB5 3C08                <1>     cmp al, 08h
   133 00006EB7 7408                <1>     je .absExit
   134 00006EB9 30E4                <1>     xor ah, ah  ;Write Protect Violation
   135 00006EBB 84C0                <1>     test al, al
   136 00006EBD 7402                <1>     je .absExit
   137 00006EBF B402                <1>     mov ah, 02h ;Other Error
   138                              <1> .absExit:
   139 00006EC1 F9                  <1>     stc
   140                              <1> absDiskExit:
   141 00006EC2 5B                  <1>     pop rbx
   142 00006EC3 5D                  <1>     pop rbp
   143 00006EC4 FA                  <1>     cli
   144 00006EC5 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]
   145 00006ECC FB                  <1>     sti ;Reenable interrupts
   146 00006ECD 488D0D0D000000      <1>     lea rcx, absStackJuggle
   147 00006ED4 9C                  <1>     pushfq
   148 00006ED5 5A                  <1>     pop rdx ;Get the current flags
   149 00006ED6 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   150 00006EDA 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   151 00006EDF 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   152                              <1> absStackJuggle:
   153 00006EE1 FA                  <1>     cli
   154 00006EE2 52                  <1>     push rdx    ;Push the flags on the stack
   155 00006EE3 51                  <1>     push rcx    ;Push the return address on the stack
   156 00006EE4 9C                  <1>     pushfq
   157 00006EE5 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   158 00006EE7 89CA                <1>     mov edx, ecx
   159 00006EE9 FE0D(08040000)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   160 00006EEF 9D                  <1>     popfq
   161 00006EF0 FB                  <1>     sti
   162                              <1>     return
    13                              <2> %%_ret:
    14 00006EF1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;       rbx = Request header address
   167                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   168                              <1> ;       eax = Status word from request
   169                              <1> ;       ecx = Number of sectors transferred
   170 00006EF2 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 00006EF3 8B0D(D7040000)      <1>     mov ecx, dword [primReqPkt + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 00006EF9 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 00006EFD E8A3FEFFFF          <1>     call goDriver   ;Make request
   176 00006F02 5E                  <1>     pop rsi
   177 00006F03 8B05(D7040000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]   ;Get actual num tfrd
   178 00006F09 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   179 00006F0B 0FB705(C4040000)    <1>     movzx eax, word [primReqPkt + ioReqPkt.status]
   180 00006F12 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   181                              <1>     return
    13                              <2> %%_ret:
    14 00006F16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> getDiskDPB:
   184                              <1> ;Gets the disk DPB if the Disk is valid
   185                              <1> ;Otherwise will return a pointer to the drive DPB
   186                              <1> ;Called with rdi pointing to the CDS
   187                              <1> ;CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   188 00006F17 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   189 00006F1B 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   190 00006F1E 8805(09070000)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   191 00006F24 E880020000          <1>     call setWorkingDPB
   192 00006F29 57                  <1>     push rdi    ;Save the CDS ptr
   193 00006F2A E83A000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   194 00006F2F 5F                  <1>     pop rdi
   195                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006F30 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006F32 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   196 00006F33 7532                <1>     jnz .exit
   197                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched
   198 00006F35 0FB60D(78000000)    <1>     movzx ecx, byte [lastdrvNum]
   199 00006F3C 31C0                <1>     xor eax, eax
   200 00006F3E FFC8                <1>     dec eax ; -1 means start of root dir and never accessed (i.e. reset path)!
   201 00006F40 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]  ;Get DPB ptr
   202 00006F44 488B3D(65000000)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   203                              <1> .checkCDS:
   204                              <1> ;Redir are skipped as they are not associated with a DPB
   205 00006F4B 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   206 00006F51 7509                <1>     jnz .next
   207 00006F53 48397745            <1>     cmp qword [rdi + cds.qDPBPtr], rsi  ;If the dpb ptr matches, reset
   208 00006F57 7503                <1>     jne .next   ;Else, goto next
   209 00006F59 89474D              <1>     mov dword [rdi + cds.dStartCluster], eax  ;Reset start cluster!
   210                              <1> .next:
   211 00006F5C 4881C75F000000      <1>     add rdi, cds_size
   212 00006F63 FFC9                <1>     dec ecx
   213 00006F65 75E4                <1>     jnz .checkCDS
   214                              <1> .exit:
   215 00006F67 F8                  <1>     clc
   216                              <1>     return
    13                              <2> %%_ret:
    14 00006F68 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> 
   218                              <1> ensureDiskValid:
   219                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   220                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   221                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   222                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   223 00006F69 E8A2010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   224                              <1> ;Return in rbx the req hdr address
   225 00006F6E 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   226 00006F72 E82EFEFFFF          <1>     call goDriver   ;Request!
   227 00006F77 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   228 00006F7B F7C700800000        <1>     test edi, drvErrStatus
   229 00006F81 0F85C6000000        <1>     jnz .diskDrvCritErr
   230 00006F87 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]   ;Get the drive number for test
   231 00006F8E 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   232 00006F91 3805(E1190000)      <1>     cmp byte [rebuildDrv], al   ;Do we need to rebuild this drive?
   233 00006F97 750C                <1>     jne .notForce
   234                              <1>     ;Here we are forced to rebuild the DPB. In principle, the medium has
   235                              <1>     ; not changed but the new volume needs to be updated. 
   236                              <1>     ;The driver can use this opportunity to synchronise its BPB with the 
   237                              <1>     ; new label.  
   238 00006F99 C605(E1190000)FF    <1>     mov byte [rebuildDrv], -1   ;Now reset this flag as we are doing our job.
   239 00006FA0 E95F000000          <1>     jmp .resetDPB   ;Don't need to flush as the disk is the same.
   240                              <1> .notForce:
   241 00006FA5 08630E              <1>     or byte [rbx + mediaCheckReqPkt.medret], ah ;Carry flag always cleared!
   242 00006FA8 7855                <1>     js short .invalidateBuffers  ;If either byte is -1, freebuffers and buildbpb
   243                              <1>     retnz ;If zero, check for dirty buffers for drv, if found, exit
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006FAA 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006FAC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   244                              <1>     ;Here we check for any dirty buffers
   245                              <1>     ;If dirty buffer found, dont get new DPB
   246 00006FAD 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   247                              <1> .checkBuffer:
   248 00006FB4 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]              ;IS this buffer for us?
   249 00006FB7 7508                <1>     jne .gotoNextBuffer ;If no, goto next buffer
   250 00006FB9 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this buffer dirty?
   251 00006FBD 7402                <1>     jz .gotoNextBuffer  ;If no, goto next buffer
   252 00006FBF F8                  <1>     clc 
   253                              <1>     return
    13                              <2> %%_ret:
    14 00006FC0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   254                              <1> .gotoNextBuffer:
   255 00006FC1 488B3F              <1>     mov rdi, qword [rdi]    ;Get buffer link pointer
   256 00006FC4 4881FFFFFFFFFF      <1>     cmp rdi, -1
   257 00006FCB 75E7                <1>     jne .checkBuffer        ;Check for this buffer
   258                              <1>     ;If we get here, we found no dirty buffers for our drive
   259                              <1>     ;We use the reference bit to keep track of which buffers we've gone through
   260 00006FCD C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Reset number of free to unknown
   261 00006FD4 E80897FFFF          <1>     call markBuffersAsUnreferenced  ;We're going to walk through so clear ref bit
   262                              <1> .dirtyLoop:
   263 00006FD9 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer    ;Set this buffer as referenced
   264 00006FDD 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]          ;Is this buffer for us?
   265 00006FE0 7515                <1>     jne .skipDirtyCheck
   266 00006FE2 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this dirty?
   267 00006FE6 0F8491000000        <1>     je .dirtyBufferError
   268                              <1>     ;Set reference bit and drive to free
   269 00006FEC 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], (refBuffer << 8) | freeBuffer 
   270 00006FF2 E80497FFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Move this up, get next buffer
   271                              <1> .skipDirtyCheck:
   272 00006FF7 E80D97FFFF          <1>     call findUnreferencedBuffer ;Get the next unreferenced buffer
   273 00006FFC 75DB                <1>     jnz .dirtyLoop  ;Now repeat for this buffer too
   274                              <1> .exit:
   275                              <1>     return
    13                              <2> %%_ret:
    14 00006FFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> .invalidateBuffers:    ;Invalidate all buffers on all drives using this dpb
   277 00006FFF E86398FFFF          <1>     call freeBuffersForDrive    ;Free all the buffers with the DPB in rbp
   278                              <1> .resetDPB:    ;If no buffers found, skip freeing them as theres nothing to free!
   279 00007004 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1 ;Mark DPB as inaccurate now
   280                              <1>     ;Get a buffer to read BPB into in rdi
   281 00007008 31C0                <1>     xor eax, eax   ;Dummy read sector 0 in
   282 0000700A E8DD99FFFF          <1>     call getBufForDOS ;Get a disk buffer for DOS
   283                              <1>     retc    ;Immediately exit with the carry flag set
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000700F 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007011 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   284 00007012 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   285                              <1> .repeatEP:
   286 00007016 E821010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   287 0000701B 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   288 0000701F E881FDFFFF          <1>     call goDriver   ;Request!
   289 00007024 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   290 00007028 F7C700800000        <1>     test edi, drvErrStatus
   291 0000702E 751D                <1>     jnz .diskDrvCritErr
   292                              <1>     ;Now rebuild the dpb fields for this drive
   293 00007030 488B730E            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bufptr]    ;Get ptr to BPB
   294 00007034 53                  <1>     push rbx
   295 00007035 E8310A0000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   296 0000703A 5B                  <1>     pop rbx
   297                              <1>     ;Adjust the buffer header information
   298 0000703B 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   299 0000703E 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   300 00007041 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   301 00007044 884313              <1>     mov byte [rbx + bufferHdr.bufFATsize], al
   302 00007047 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   303 00007049 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   304                              <1>     return
    13                              <2> %%_ret:
    14 0000704C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   305                              <1> .diskDrvCritErr:
   306                              <1> ;Critical Errors fall through here
   307                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   308 0000704D C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Reset freecluster count
   309 00007054 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   310 0000705B B41A                <1>     mov ah, critRead | critFAT | critFailOK | critRetryOK
   311 0000705D 8825(68040000)      <1>     mov byte [Int24bitfld], ah  ;Save the permissions in var
   312 00007063 400FB6FF            <1>     movzx edi, dil  ;Clear the upper bytes, save only error code
   313 00007067 E8A4F7FFFF          <1>     call diskDevErrBitfield ;Goto disk crit error, but with bitfield set
   314 0000706C 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]
   315 00007073 3C01                <1>     cmp al, critRetry
   316 00007075 0F84EEFEFFFF        <1>     je ensureDiskValid
   317                              <1> .errorExitBad:
   318 0000707B F9                  <1>     stc     ;Set error flag to indicate fail
   319                              <1>     return  ;And exit
    13                              <2> %%_ret:
    14 0000707C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   320                              <1> 
   321                              <1> .dirtyBufferError:
   322 0000707D 55                  <1>     push rbp
   323 0000707E 488B6D1B            <1>     mov rbp, qword [rbp + dpb.qDriverHeaderPtr] ;Get the ptr to the driver
   324 00007082 66F745080008        <1>     test word [rbp + drvHdr.attrib], devDrvHdlCTL
   325 00007088 5D                  <1>     pop rbp
   326 00007089 74F0                <1>     jz .errorExitBad    ;Just return fail if bit not set
   327                              <1>     ;rbp points to the dpb still
   328 0000708B 57                  <1>     push rdi
   329 0000708C 488B3D(D0040000)    <1>     mov rdi, qword [primReqPkt + mediaCheckReqPkt.desptr]   ;Get the pointer into rdi
   330 00007093 48893D(0F040000)    <1>     mov qword [errorVolLbl], rdi    ;Save the erroring volume label pointer
   331 0000709A 5F                  <1>     pop rdi ;Get back the buffer pointer
   332 0000709B C605(68040000)18    <1>     mov byte [Int24bitfld], critRead | critDOS | critRetryOK | critFailOK
   333 000070A2 C605(00070000)01    <1>     mov byte [rwFlag], 1    ;A write was the cause of the error
   334 000070A9 B80F000000          <1>     mov eax, drvBadDskChnge ;Set the driver error code to bad disk change
   335 000070AE E8F3F6FFFF          <1>     call diskDevErr
   336 000070B3 3C03                <1>     cmp al, critFail    ;Did the user select fail?
   337 000070B5 74C4                <1>     je .errorExitBad    ;If so, exit with CF set
   338 000070B7 E95BFEFFFF          <1>     jmp getDiskDPB  ;Now we try again
   339                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   340                              <1> ;           Primitive Driver Requests
   341                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   342                              <1> ;First are Disk requests, then Char device requests
   343                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   344                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   345                              <1> 
   346                              <1> primReqWriteSetup:
   347 000070BC 50                  <1>     push rax
   348 000070BD B408                <1>     mov ah, drvWRITE    ;Command code
   349 000070BF 0225(D0030000)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   350 000070C5 EB03                <1>     jmp short primReqRWCommon
   351                              <1> primReqReadSetup:
   352 000070C7 50                  <1>     push rax
   353 000070C8 B404                <1>     mov ah, drvREAD
   354                              <1> primReqRWCommon:
   355                              <1> ;Sets up the IO request packet with:
   356                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   357                              <1> ; rbx = Data storage buffer ptr
   358                              <1> ; ecx = Number of sectors to transfer
   359                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   360                              <1> ; ~~~~ Set by entry function ~~~~ 
   361                              <1> ; ah = Command code
   362                              <1> ; All regs preserved EXCEPT rbx.
   363                              <1> ; Return: rbx = Transfer Address
   364 000070CA 48891D(CF040000)    <1>     mov qword [primReqPkt + ioReqPkt.bufptr], rbx   ;Buffer
   365 000070D1 890D(D7040000)      <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   366 000070D7 C605(C1040000)2A    <1>     mov byte [primReqPkt + ioReqPkt.hdrlen], ioReqPkt_size
   367 000070DE 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   368 000070E3 8905(C2040000)      <1>     mov dword [primReqPkt + ioReqPkt.unitnm], eax   ;Clear unit number field
   369 000070E9 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   370 000070EC 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   371                              <1>     ;Disk operations only here!
   372 000070EE 488915(DB040000)    <1>     mov qword [primReqPkt + ioReqPkt.strtsc], rdx   ;Start sector
   373 000070F5 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   374 000070F8 8805(CE040000)      <1>     mov byte [primReqPkt + ioReqPkt.medesc], al ;Store medesc!
   375 000070FE 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   376 00007101 8805(C2040000)      <1>     mov byte [primReqPkt + ioReqPkt.unitnm], al ;Store the unit number
   377                              <1> primReqCommonExit:
   378                              <1> ;Returns in rbx the primary request header as these functions
   379                              <1> ; setup the request in the primary request header space
   380 00007107 58                  <1>     pop rax
   381 00007108 488D1D(C1040000)    <1>     lea rbx, primReqPkt ;Put in rbx the primary request header
   382                              <1>     return
    13                              <2> %%_ret:
    14 0000710F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   383                              <1> 
   384                              <1> primReqMedCheckSetup:
   385                              <1> ;Prepare the diskIO packet for mediacheck
   386                              <1> ;rbp has DPB pointer for device to check media on
   387 00007110 50                  <1>     push rax
   388 00007111 C605(C1040000)17    <1>     mov byte [primReqPkt + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   389 00007118 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   390 0000711B 8805(CE040000)      <1>     mov byte [primReqPkt + mediaCheckReqPkt.medesc], al
   391 00007121 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   392 00007124 8805(C2040000)      <1>     mov byte [primReqPkt + mediaCheckReqPkt.unitnm], al
   393 0000712A C605(C3040000)01    <1>     mov byte [primReqPkt + mediaCheckReqPkt.cmdcde], drvMEDCHK
   394 00007131 66C705(C4040000)00- <1>     mov word [primReqPkt + mediaCheckReqPkt.status], 0
   394 00007139 00                  <1>
   395 0000713A EBCB                <1>     jmp short primReqCommonExit
   396                              <1> 
   397                              <1> primReqGetBPBSetup:
   398                              <1> ;rbp has DPB pointer for device
   399                              <1> ;rdi has sector buffer header pointer for transfer
   400 0000713C 50                  <1>     push rax
   401 0000713D 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   402 00007141 48893D(CF040000)    <1>     mov qword [primReqPkt + bpbBuildReqPkt.bufptr], rdi
   403 00007148 C605(C1040000)1E    <1>     mov byte [primReqPkt + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   404 0000714F 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   405 00007152 8805(CE040000)      <1>     mov byte [primReqPkt + bpbBuildReqPkt.medesc], al
   406 00007158 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   407 0000715B 8805(C2040000)      <1>     mov byte [primReqPkt + bpbBuildReqPkt.unitnm], al
   408 00007161 C605(C3040000)02    <1>     mov byte [primReqPkt + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   409 00007168 66C705(C4040000)00- <1>     mov word [primReqPkt + bpbBuildReqPkt.status], 0
   409 00007170 00                  <1>
   410 00007171 EB94                <1>     jmp short primReqCommonExit
   411                              <1> 
   412                              <1> primReqOpenSetup:
   413                              <1> ;al = unit number if a disk device. Undefined otherwise
   414 00007173 50                  <1>     push rax
   415 00007174 B40D                <1>     mov ah, drvOPEN
   416 00007176 EB03                <1>     jmp short primReqOCcommon
   417                              <1> primReqCloseSetup:
   418                              <1> ;al = unit number if a disk device. Undefined otherwise
   419 00007178 50                  <1>     push rax
   420 00007179 B40E                <1>     mov ah, drvCLOSE
   421                              <1> primReqOCcommon:
   422 0000717B C605(C1040000)0D    <1>     mov byte [primReqPkt + openReqPkt.hdrlen], openReqPkt_size
   423 00007182 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   424 00007183 8905(C2040000)      <1>     mov dword [primReqPkt + openReqPkt.unitnm], eax
   425                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   426 00007189 E979FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   427                              <1> 
   428                              <1> secdReqCharIOReq:
   429                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   430                              <1> ;Input:
   431                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   432                              <1> ; ecx = Length of buffer
   433                              <1> ; rdi = Buffer pointer
   434                              <1> ;Output: 
   435                              <1> ; rbx = Transfer Address 
   436 0000718E 488D1D(97040000)    <1>     lea rbx, secdReqPkt
   437 00007195 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   438 00007198 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   439 0000719B 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   440 000071A1 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   441 000071A5 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   442                              <1>     return
    13                              <2> %%_ret:
    14 000071A8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   443                              <1> ;If the device which will process this request is a disk device
   444                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   445                              <1> ;Then we will read the appropriate byte from that buffer to the 
   446                              <1> ; singleIOByt buffer.
   447                              <1> ;Such a request will require additional setup with the following fields:
   448                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    46                                  %include "./src/Kernel/Core/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 2Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 000071A9 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 000071B0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (UNC paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 000071B1 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    21 000071B8 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 000071BF 7409                <1>     je .net
    23 000071C1 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 000071C7 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 000071C9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 000071CA F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 000071CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 000071CC E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 000071D1 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 000071D3 B80C110000          <1>     mov eax, 110Ch 
    43 000071D8 CD2F                <1>     int 2Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 000071DA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 000071DB C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    48 000071E2 E8E4040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 000071E7 E82BFDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 000071EC 7223                <1>     jc .exit
    51 000071EE E8E099FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 000071F3 721C                <1>     jc .exit
    53 000071F5 55                  <1>     push rbp
    54 000071F6 E82195FFFF          <1>     call flushAllBuffersForDPB  ;To ensure FAT32 FSInfo sectors synced
    55 000071FB 5D                  <1>     pop rbp
    56 000071FC 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    57 000071FF FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    58 00007201 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    59 00007204 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr] ;This is the max cluster address
    60 00007207 FFCB                <1>     dec ebx ;Get the number of clusters
    61 00007209 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    62 0000720D 8B5531              <1>     mov edx, dword [rbp + dpb.dFreeClustCnt]    ;Get # free clusters
    63 00007210 F8                  <1>     clc
    64                              <1> .exit:
    65 00007211 E8BF040000          <1>     call dosCrit1Exit
    66                              <1>     return
    13                              <2> %%_ret:
    14 00007216 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> 
    68                              <1> muxGetIntVector:    ;Int 2Fh AX=1202h
    69                              <1> ;Input: al = Interrupt number
    70                              <1> ;Output: rbx = Interrupt Vector
    71 00007217 50                  <1>     push rax    ;Preserve rax
    72 00007218 FA                  <1>     cli ;Halt interrupts
    73 00007219 0F010D(171A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
    74 00007220 0FB6C0              <1>     movzx eax, al
    75 00007223 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    76 00007227 480305(191A0000)    <1>     add rax, qword [dosIdtPtr.base]    
    77 0000722E 31DB                <1>     xor ebx, ebx
    78 00007230 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    79 00007233 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    80 00007237 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    81 0000723B 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    82 0000723F 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    83 00007242 FB                  <1>     sti
    84 00007243 58                  <1>     pop rax
    85                              <1>     return
    13                              <2> %%_ret:
    14 00007244 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> getUserRegs:   ;Int 2Fh AX=1218h
    88                              <1> ;Returns ptr to user regs in rsi
    89 00007245 488B35(7B040000)    <1>     mov rsi, qword [oldRSP]
    90                              <1>     return
    13                              <2> %%_ret:
    14 0000724C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> walkDPBchain:
    93                              <1> ;Called with al = 0 based drive number
    94                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    95 0000724D 488B35(3B000000)    <1>     mov rsi, qword [dpbHeadPtr]  ;Get variable pointing to first DPB
    96                              <1> .walk:
    97 00007254 4881FEFFFFFFFF      <1>     cmp rsi, -1
    98 0000725B 740A                <1>     je .exitBad
    99 0000725D 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   100 0000725F 7407                <1>     je .exit    ;Drive found
   101 00007261 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   102 00007265 EBED                <1>     jmp short .walk
   103                              <1> .exitBad:
   104 00007267 F9                  <1>     stc
   105                              <1> .exit:
   106                              <1>     return
    13                              <2> %%_ret:
    14 00007268 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> getCDSNotJoin:   
   108                              <1> ;Gets a drive CDS, sets it as working and checks it is not a join drive
   109                              <1> ;Input: al = 1-based drive number
   110                              <1> ;Output: al = 0-based drive number
   111                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Join)
   112                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Join flags
   113                              <1> ;            set.
   114 00007269 E86B000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   115 0000726E 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   116 00007270 56                  <1>     push rsi
   117 00007271 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   118 00007278 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   119 0000727E 5E                  <1>     pop rsi
   120 0000727F 7401                <1>     jz .exit
   121 00007281 F9                  <1>     stc
   122                              <1> .exit:
   123                              <1>     return
    13                              <2> %%_ret:
    14 00007282 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> 
   125                              <1> buildNewCDS:   ;Int 2Fh AX=121Fh
   126                              <1> ;If used with SDA CDS allows for direct disk access without needing to 
   127                              <1> ; actually use the real CDS. This prevents troubles when findnext on a 
   128                              <1> ; drive occurs the real CDS itself may have completely changed, i.e. 
   129                              <1> ; become unavailable. The SDA CDS becomes like the protoCDS of DOS 2 
   130                              <1> ; that was just an appendix of the DPB. Otherwise, can be used to init
   131                              <1> ; a new CDS or even a new complete CDS array!
   132                              <1> ;Input: al = Drive Letter for drive
   133                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   134                              <1> ;Output: rdi = newly filled in workingCDS
   135                              <1> ;CF=NC => CDS valid and has a DPB
   136                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   137 00007283 50                  <1>     push rax
   138 00007284 2C40                <1>     sub al, "A"-1
   139 00007286 3805(77000000)      <1>     cmp byte [numPhysVol], al    ;al must be bigger than # of block drives
   140 0000728C 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   141 00007293 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   142 00007299 58                  <1>     pop rax
   143 0000729A 723C                <1>     jb .exit    ;Exit with CF=CY
   144 0000729C 50                  <1>     push rax
   145 0000729D 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   146 000072A2 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   147 000072A4 58                  <1>     pop rax
   148 000072A5 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   149 000072AB C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   150 000072B2 48C7475100000000    <1>     mov qword [rdi + cds.qIFSPtr], 0    ;Optional redir signature field
   151 000072BA C7475900000000      <1>     mov dword [rdi + cds.dNetStore], 0   ;Optional storage/signature dword
   152 000072C1 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   153                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   154 000072C7 50                  <1>     push rax
   155 000072C8 56                  <1>     push rsi
   156 000072C9 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   157 000072CB E87DFFFFFF          <1>     call walkDPBchain
   158 000072D0 7204                <1>     jb .skipSettingDPB
   159 000072D2 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   160                              <1> .skipSettingDPB:
   161 000072D6 5E                  <1>     pop rsi
   162 000072D7 58                  <1>     pop rax
   163                              <1> .exit:
   164                              <1>     return
    13                              <2> %%_ret:
    14 000072D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> 
   166                              <1> getCDS:     ;Int 2Fh AX=1219h
   167                              <1> ;Gets the device DPB and saves it in the DOS variable
   168                              <1> ;This can be called to get CDS for network drives too!
   169                              <1> ;Input: al = 1 based drive number
   170                              <1> ;Sets workingCDS var with the CDS for the device. 
   171                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   172 000072D9 84C0                <1>     test al, al
   173 000072DB 7508                <1>     jnz .skip
   174 000072DD 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive
   175 000072E3 FEC0                <1>     inc al
   176                              <1> .skip:
   177 000072E5 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   178 000072E7 56                  <1>     push rsi
   179 000072E8 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   180 000072EF F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   181 000072F6 7423                <1>     jz .localCall
   182                              <1>     ;Invokation via 21/5D00
   183 000072F8 50                  <1>     push rax
   184 000072F9 57                  <1>     push rdi
   185 000072FA 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   186 00007301 48893D(12070000)    <1>     mov qword [workingCDS], rdi ;Make it current
   187 00007308 0441                <1>     add al, "A" ;Convert to a drive letter
   188 0000730A E874FFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   189 0000730F 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   190 00007315 5F                  <1>     pop rdi
   191 00007316 58                  <1>     pop rax
   192 00007317 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   193 00007319 EB17                <1>     jmp short .exitOk   ;All oki
   194                              <1> .localCall:
   195 0000731B E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   196 00007320 7208                <1>     jc .exitBad
   197 00007322 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   198 00007328 7508                <1>     jnz .exitOk ;Exit with flag cleared
   199                              <1>     ;Else Return to unknown error locus
   200                              <1> .exitBad:
   201 0000732A C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   202                              <1> .exitBad1:
   203 00007331 F9                  <1>     stc
   204                              <1> .exitOk:
   205 00007332 5E                  <1>     pop rsi
   206                              <1>     return
    13                              <2> %%_ret:
    14 00007333 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> getCDSforDrive:     ;Int 2Fh AX=1217h
   209                              <1>     ;Gets the CDS for the current drive in al
   210                              <1>     ;Input: al = Drive number, 0 = A ...
   211                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   212                              <1>     ;        CF=CY => al not valid
   213 00007334 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
   214 0000733A 7202                <1>     jb .ctn
   215 0000733C F9                  <1>     stc 
   216                              <1>     return
    13                              <2> %%_ret:
    14 0000733D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> .ctn:
   218 0000733E 50                  <1>     push rax
   219 0000733F 52                  <1>     push rdx
   220 00007340 0FB6C0              <1>     movzx eax, al
   221 00007343 48BE5F000000000000- <1>     mov rsi, cds_size
   221 0000734C 00                  <1>
   222 0000734D 31D2                <1>     xor edx, edx
   223 0000734F F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   224 00007351 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   225 00007358 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   226 0000735B 488935(12070000)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   227 00007362 5A                  <1>     pop rdx
   228 00007363 58                  <1>     pop rax
   229 00007364 F8                  <1>     clc
   230                              <1>     return
    13                              <2> %%_ret:
    14 00007365 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> 
   233                              <1> swapPathSeparator:  ;Int 2Fh, AX=1204h, Normalise Path Separator
   234                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   235                              <1> ;Input: AL = Char to normalise.
   236                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   237                              <1> ;If path separator, set ZF=ZE
   238 00007366 3C5C                <1>     cmp al, "\"
   239 00007368 7406                <1>     je .exit
   240 0000736A 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   241 0000736C 7502                <1>     jne .exit
   242 0000736E B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   243                              <1> .exit:
   244                              <1>     return
    13                              <2> %%_ret:
    14 00007370 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> 
   246                              <1> uppercaseCharAtPtr:
   247                              <1> ;Get the char pointed to by rsi and then fall
   248 00007371 AC                  <1>     lodsb
   249                              <1> uppercaseChar:      ;Int 2Fh, AX=1213h, Uppercase Char
   250                              <1> ;Convert a lowercase char to uppercase
   251                              <1> ; Leave alone uppercase chars and invalid chars
   252                              <1> ;Input: al = Char to convert to uppercase
   253                              <1> ;Output: al = Processed char
   254 00007372 53                  <1>     push rbx
   255 00007373 3C61                <1>     cmp al, "a"
   256 00007375 7214                <1>     jb .exit
   257 00007377 3C7A                <1>     cmp al, "z"
   258 00007379 7702                <1>     ja .checkExt
   259 0000737B 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   260                              <1> .checkExt:
   261 0000737D 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   262 0000737F 720A                <1>     jb .exit
   263 00007381 2C80                <1>     sub al, 80h ;Turn into table offset
   264 00007383 488D1D208FFFFF      <1>     lea rbx, fileUCTbl    ;Get ptr to ucFilenameTable
   265 0000738A D7                  <1>     xlatb   ;Get converted extended byte into al
   266                              <1> .exit:
   267 0000738B 50                  <1>     push rax    ;Save al temporarily
   268 0000738C 488D1DC990FFFF      <1>     lea rbx, asciiCharProperties
   269 00007393 D7                  <1>     xlatb   ;Get the signature in al
   270 00007394 A801                <1>     test al, badChar
   271 00007396 58                  <1>     pop rax
   272 00007397 5B                  <1>     pop rbx
   273                              <1>     return
    13                              <2> %%_ret:
    14 00007398 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   274                              <1> 
   275                              <1> isCharTerminator:
   276                              <1> ;Input: al = Char to check properties of
   277                              <1> ;Output:    ZF=NZ => Char not name terminator
   278                              <1> ;           ZF=ZE => Char terminator
   279 00007399 50                  <1>     push rax
   280 0000739A 53                  <1>     push rbx
   281 0000739B 488D1DBA90FFFF      <1>     lea rbx, asciiCharProperties
   282 000073A2 D7                  <1>     xlatb
   283 000073A3 A802                <1>     test al, termChar
   284 000073A5 5B                  <1>     pop rbx
   285 000073A6 58                  <1>     pop rax
   286                              <1>     return
    13                              <2> %%_ret:
    14 000073A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   287                              <1> 
   288                              <1> isCharSeparator:
   289                              <1> ;Input: al = Char to check properties of
   290                              <1> ;Output:    ZF=NZ => Char not separator
   291                              <1> ;           ZF=ZE => Char separator
   292 000073A8 50                  <1>     push rax
   293 000073A9 53                  <1>     push rbx
   294 000073AA 488D1DAB90FFFF      <1>     lea rbx, asciiCharProperties
   295 000073B1 D7                  <1>     xlatb
   296 000073B2 A804                <1>     test al, sepChar
   297 000073B4 5B                  <1>     pop rbx
   298 000073B5 58                  <1>     pop rax
   299                              <1>     return
    13                              <2> %%_ret:
    14 000073B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   300                              <1> 
   301                              <1> strlen2:    ;Int 2Fh, AX=1212h
   302                              <1> ;Entry point for Multiplex
   303 000073B7 57                  <1>     push rdi
   304 000073B8 4889F7              <1>     mov rdi, rsi
   305 000073BB E802000000          <1>     call strlen
   306 000073C0 5F                  <1>     pop rdi
   307                              <1>     return
    13                              <2> %%_ret:
    14 000073C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   308                              <1> strlen: 
   309                              <1> ;Gets the length of a ASCIIZ string
   310                              <1> ;Input: rdi = Source buffer
   311                              <1> ;Output: ecx = Length of string
   312 000073C2 50                  <1>     push rax
   313 000073C3 57                  <1>     push rdi
   314 000073C4 30C0                <1>     xor al, al
   315 000073C6 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   316 000073C8 FFC9                <1>     dec ecx ;rcx = -1
   317 000073CA F2AE                <1>     repne scasb
   318 000073CC F7D1                <1>     not ecx
   319 000073CE 5F                  <1>     pop rdi
   320 000073CF 58                  <1>     pop rax
   321                              <1>     return
    13                              <2> %%_ret:
    14 000073D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   322                              <1> 
   323                              <1> strcpy:
   324                              <1> ;Copies a null terminated string from rsi to rdi
   325 000073D1 AC                  <1>     lodsb
   326 000073D2 AA                  <1>     stosb
   327 000073D3 84C0                <1>     test al, al
   328                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000073D5 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000073D7 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   329 000073D8 EBF7                <1>     jmp short strcpy
   330                              <1> 
   331                              <1> strcmp:
   332                              <1> ;Compares two ASCIIZ strings for equality.
   333                              <1> ;Input: rsi = First string
   334                              <1> ;       rdi = Second string
   335                              <1> ;       ecx = Number of bytes to compare
   336                              <1> ;Output: ZF=ZE => Equal
   337                              <1> ;        ZF=NZ => Not equal
   338 000073DA 56                  <1>     push rsi
   339 000073DB 57                  <1>     push rdi
   340 000073DC F3A6                <1>     repe cmpsb
   341 000073DE 5F                  <1>     pop rdi
   342 000073DF 5E                  <1>     pop rsi
   343                              <1>     return
    13                              <2> %%_ret:
    14 000073E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   344                              <1> 
   345                              <1> 
   346                              <1> normaliseFileName:  ;Int 2Fh, AX=1211h
   347                              <1> ;Converts lowercase to uppercase and / to "\"
   348                              <1> ;Input: rsi = Source buffer
   349                              <1> ;       rdi = Buffer to place normalised path
   350 000073E1 50                  <1>     push rax
   351 000073E2 56                  <1>     push rsi
   352 000073E3 57                  <1>     push rdi
   353                              <1> .scan:
   354 000073E4 AC                  <1>     lodsb
   355 000073E5 84C0                <1>     test al, al
   356 000073E7 740D                <1>     jz .exit
   357 000073E9 E878FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   358 000073EE E87FFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   359 000073F3 AA                  <1>     stosb
   360 000073F4 EBEE                <1>     jmp short .scan
   361                              <1> .exit:
   362 000073F6 5F                  <1>     pop rdi
   363 000073F7 5E                  <1>     pop rsi
   364 000073F8 58                  <1>     pop rax
   365                              <1>     return
    13                              <2> %%_ret:
    14 000073F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> 
   367                              <1> compareFileNames:   ;Int 2Fh, AX=121Eh
   368                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   369                              <1> ;Input: rsi = One ASCIIZ pathname
   370                              <1> ;       rdi = Second ASCIIZ pathname
   371                              <1> ;Return:
   372                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   373 000073FA 50                  <1>     push rax
   374 000073FB 56                  <1>     push rsi
   375 000073FC 57                  <1>     push rdi
   376                              <1> .scan:
   377 000073FD AC                  <1>     lodsb
   378 000073FE E818000000          <1>     call .normaliseChar
   379 00007403 88C4                <1>     mov ah, al  ;Save normalised char in ah
   380 00007405 8A07                <1>     mov al, byte [rdi]  ;Get the char in path2
   381 00007407 48FFC7              <1>     inc rdi ;And goto next char
   382 0000740A E80C000000          <1>     call .normaliseChar
   383 0000740F 38E0                <1>     cmp al, ah  ;Are they equal?
   384 00007411 7504                <1>     jne .exit   ;If not equal, exit
   385 00007413 84C0                <1>     test al, al ;Here al=ah. If al == 0, exit!
   386 00007415 75E6                <1>     jnz .scan
   387                              <1> .exit:
   388 00007417 5F                  <1>     pop rdi
   389 00007418 5E                  <1>     pop rsi
   390 00007419 58                  <1>     pop rax
   391                              <1>     return
    13                              <2> %%_ret:
    14 0000741A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   392                              <1> .normaliseChar:
   393 0000741B E852FFFFFF          <1>     call uppercaseChar      ;Uppercase the char if uppercaseable
   394 00007420 E841FFFFFF          <1>     call swapPathSeparator  ;Swap if a pathsep char
   395                              <1>     return
    13                              <2> %%_ret:
    14 00007425 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   396                              <1> checkPathspecOK:
   397                              <1> ;Input:
   398                              <1> ;rsi -> points to a path to verify if it is ok.
   399                              <1> ;Output:
   400                              <1> ;CF=NC => The path is totally clean and ok to use.
   401                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   402                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   403                              <1> ; and depending on method of invokation and caller, may be permissable.
   404                              <1> ;We accept lc and uc characters in this check function.
   405 00007426 50                  <1>     push rax
   406 00007427 53                  <1>     push rbx    ;Use rbx as the return flag status
   407 00007428 56                  <1>     push rsi
   408 00007429 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   409                              <1>     ;Start by getting the length of the ASCIIZ string.
   410 0000742B 51                  <1>     push rcx
   411 0000742C 57                  <1>     push rdi
   412 0000742D 4889F7              <1>     mov rdi, rsi
   413 00007430 E88DFFFFFF          <1>     call strlen
   414 00007435 89C8                <1>     mov eax, ecx    ;Save the length in eax
   415 00007437 5F                  <1>     pop rdi
   416 00007438 59                  <1>     pop rcx
   417 00007439 3D40000000          <1>     cmp eax, 64    ;Check
   418 0000743E 0F8792000000        <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   419 00007444 85C0                <1>     test eax, eax   ;If the path is empty, also error out!
   420 00007446 0F848A000000        <1>     jz .badExit
   421                              <1>     ;First we verify if our path is relative or canonical (absolute)
   422 0000744C 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   423 0000744F 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   424 00007453 7416                <1>     je .netName
   425 00007455 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   426 00007459 7410                <1>     je .netName
   427 0000745B 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   428 0000745E 7419                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   429                              <1>     ;Here if relative
   430 00007460 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   431 00007467 756D                <1>     jnz .badExit    ;If this is -1, server invoke.
   432 00007469 EB3B                <1>     jmp short .okToScan
   433                              <1> .netName:
   434 0000746B 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the UNC start symbol
   435 00007472 803E00              <1>     cmp byte [rsi], 0   ;If this is an empty path, error!
   436 00007475 745F                <1>     je .badExit
   437 00007477 EB2D                <1>     jmp short .okToScan
   438                              <1> .diskPath:
   439 00007479 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   440 00007480 803E00              <1>     cmp byte [rsi], 0   ;Cannot have an empty relative path!
   441 00007483 7451                <1>     je .badExit
   442 00007485 F605(02070000)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   443 0000748C 740F                <1>     jz .localAbsCheck
   444                              <1> .absMain:
   445 0000748E AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   446 0000748F E8D2FEFFFF          <1>     call swapPathSeparator
   447 00007494 7540                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   448 00007496 803E00              <1>     cmp byte [rsi], 0   ;Is the char after the slash null?
   449 00007499 743B                <1>     je .badExit ;Error if so!
   450 0000749B EB09                <1>     jmp short .okToScan
   451                              <1> .localAbsCheck:
   452 0000749D 8A06                <1>     mov al, byte [rsi]  ;Get the char we are pointing at
   453 0000749F E8C2FEFFFF          <1>     call swapPathSeparator  ;Is it a pathsep?
   454 000074A4 74E8                <1>     jz .absMain ;If it is, we do the absolute check
   455                              <1>     ;Else we are relative and begin wildcard search
   456                              <1> .okToScan:
   457 000074A6 AC                  <1>     lodsb   
   458 000074A7 84C0                <1>     test al, al ;End of path char?
   459 000074A9 7430                <1>     jz .exit
   460 000074AB E8B6FEFFFF          <1>     call swapPathSeparator
   461 000074B0 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   462 000074B2 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   463 000074B4 7411                <1>     je .wcFound
   464 000074B6 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   465 000074B8 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   466                              <1>     ;Else we check that the char in al is an acceptable char
   467 000074BA 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   468 000074BC 74E8                <1>     je .okToScan
   469 000074BE E831000000          <1>     call checkCharValid
   470 000074C3 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   471 000074C5 EBDF                <1>     jmp short .okToScan
   472                              <1> .wcFound:
   473 000074C7 BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   474 000074CC EBD8                <1>     jmp short .okToScan
   475                              <1> .wcCheck:
   476                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   477 000074CE F7C340000000        <1>     test ebx, 40h
   478 000074D4 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   479                              <1>     ;Else fall through in error
   480                              <1> .badExit:
   481 000074D6 BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   482                              <1> .exit:
   483 000074DB 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   484 000074DC 9D                  <1>     popfq
   485 000074DD 5E                  <1>     pop rsi
   486 000074DE 5B                  <1>     pop rbx
   487 000074DF 58                  <1>     pop rax
   488                              <1>     return
    13                              <2> %%_ret:
    14 000074E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> scanPathWC:
   491                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   492                              <1> ; even in the final path componant.
   493                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   494                              <1> ;Output: CF=NC => No wildcards present
   495                              <1> ;        CF=CY => Wildcards found
   496 000074E1 50                  <1>     push rax
   497 000074E2 56                  <1>     push rsi
   498                              <1> .scan:
   499 000074E3 AC                  <1>     lodsb
   500 000074E4 84C0                <1>     test al, al
   501 000074E6 7409                <1>     jz .exit
   502 000074E8 3C3F                <1>     cmp al, "?"
   503 000074EA 7404                <1>     je .wcFnd
   504 000074EC 3C2A                <1>     cmp al, "*"
   505 000074EE 75F3                <1>     jne .scan
   506                              <1> .wcFnd:
   507 000074F0 F9                  <1>     stc
   508                              <1> .exit:
   509 000074F1 5E                  <1>     pop rsi
   510 000074F2 58                  <1>     pop rax
   511                              <1>     return
    13                              <2> %%_ret:
    14 000074F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512                              <1> 
   513                              <1> checkCharValid:
   514                              <1> ;If ZF=ZE => Invalid Char
   515                              <1> ;If ZF=NZ => Valid Char
   516 000074F4 50                  <1>     push rax
   517 000074F5 E878FEFFFF          <1>     call uppercaseChar  ;Sets ZF if invalid filename char
   518 000074FA 58                  <1>     pop rax
   519                              <1>     return
    13                              <2> %%_ret:
    14 000074FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   520                              <1> 
   521                              <1> 
   522                              <1> compareFarPointers: ;Int 2Fh, AX = 1214h
   523                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   524                              <1> ;Input: rsi = One pointer
   525                              <1> ;       rdi = Second pointer
   526                              <1> ;Output: ZF=ZE if equal
   527                              <1> ;        ZF=NZ if not
   528 000074FC 4839FE              <1>     cmp rsi, rdi
   529                              <1>     return
    13                              <2> %%_ret:
    14 000074FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> checkPathNet:
   532                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   533                              <1> ;Output: ZF=ZE => Path is a net path
   534                              <1> ;        ZF=NZ => Path is not a net path
   535 00007500 50                  <1>     push rax
   536 00007501 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   537 00007504 E85DFEFFFF          <1>     call swapPathSeparator
   538 00007509 7507                <1>     jnz .exit
   539 0000750B 88E0                <1>     mov al, ah  ;Get the second char
   540 0000750D E854FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   541                              <1> .exit:
   542 00007512 58                  <1>     pop rax
   543                              <1>     return
    13                              <2> %%_ret:
    14 00007513 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   544                              <1> 
   545                              <1> getCharDevDriverPtr:
   546                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   547                              <1> ;Input: rax = Device Driver name (space padded)
   548                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   549 00007514 488D3D(7A000000)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   550                              <1> .lp:
   551 0000751B 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   552                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000751F 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007521 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   553 00007522 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   554 00007525 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   555 0000752C 75ED                <1>     jne .lp ;If not loop
   556 0000752E F9                  <1>     stc ;Else bad exit
   557                              <1>     return
    13                              <2> %%_ret:
    14 0000752F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   558                              <1> 
   559                              <1> getDrvChain: ;Int 2Fh, AX=122Ch
   560                              <1> ;Pointer to the first non-null device driver in the chain.
   561                              <1> ;Returns the value in rax only
   562 00007530 488D05(7A000000)    <1>     lea rax, nulDevHdr
   563 00007537 488B00              <1>     mov rax, qword [rax + drvHdr.nxtPtr]    ;Get the pointer at null driver
   564                              <1>     return
    13                              <2> %%_ret:
    14 0000753A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> getExtErrCde:   ;Int 2Fh, AX=122Dh
   567                              <1> ;Gets the extended error code in ax and returns
   568 0000753B 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   569                              <1>     return
    13                              <2> %%_ret:
    14 00007542 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    47                                  %include "./src/Kernel/Core/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 21h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7 00007543 FA                  <1>     cli ;Halt external interrupts
     8 00007544 FC                  <1>     cld ;Ensure all string ops occur in the right direction
     9 00007545 80FC69              <1>     cmp ah, kDispTblL/2    ;Number of functions
    10 00007548 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    11                              <1>     ;Cherry pick functions
    12 0000754E 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    13 00007551 7235                <1>     jb .fsbegin   ;If below skip these checks
    14 00007553 0F847C020000        <1>     je ctrlBreakCheck
    15 00007559 80FC64              <1>     cmp ah, 64h
    16 0000755C 0F84D8020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 21h spiel
    17 00007562 7724                <1>     ja .fsbegin   ;If above, do usual Int21 entry
    18 00007564 80FC51              <1>     cmp ah, 51h
    19 00007567 0F84BB020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    20 0000756D 80FC62              <1>     cmp ah, 62h
    21 00007570 0F84BB020000        <1>     je getPSPaddr          ;Calls the above function
    22 00007576 80FC50              <1>     cmp ah, 50h
    23 00007579 0F84A0020000        <1>     je setCurrProcessID
    24 0000757F 80FC61              <1>     cmp ah, 61h           ;New service, Process Services, reentrant
    25 00007582 0F84BA020000        <1>     je systemServices
    26                              <1> .fsbegin:
    27 00007588 E827010000          <1>     call dosPushRegs ;Push the usual prologue registers
    28 0000758D 48891D(83040000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    29 00007594 66C705(43040000)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    29 0000759C 00                  <1>
    30 0000759D 488B05(7B040000)    <1>     mov rax, qword [oldRSP]
    31 000075A4 488905(6B040000)    <1>     mov qword [oldoldRSP], rax
    32 000075AB FE05(08040000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    33 000075B1 488925(7B040000)    <1>     mov qword [oldRSP], rsp
    34                              <1> ;Network related variable resetting
    35 000075B8 C605(02070000)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    36                              <1> ;Here, we want to save oldRSP in the callers PSP
    37 000075BF 488B05(1F040000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    38 000075C6 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    39 000075CA 58                  <1>     pop rax     ;Get old rax back
    40 000075CB 50                  <1>     push rax    ;and push it back onto the stack
    41                              <1> .charFun0CEP:
    42                              <1> .serverEP:
    43 000075CC 488D25(080D0000)    <1>     lea rsp, critStakTop
    44 000075D3 FB                  <1>     sti         ;Reenable interrupts
    45                              <1> 
    46 000075D4 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    47 000075D6 881D(94040000)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    48 000075DC C605(95040000)01    <1>     mov byte [int28Flag], 1 ;Make it ok to trigger Int 28h
    49 000075E3 881D(6A040000)      <1>     mov byte [Int24Fail], bl    ;Clear the Int24 returned fail flag
    50 000075E9 881D(8B040000)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    51                              <1> 
    52 000075EF 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    53 000075F0 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    54 000075F2 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    55 000075F4 488D05618FFFFF      <1>     lea rax, kDispTbl
    56 000075FB 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    57 000075FE 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    58 00007602 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    59 00007605 58                  <1>     pop rax
    60                              <1> 
    61 00007606 84E4                <1>     test ah, ah     ;Simple Terminate function?
    62 00007608 741C                <1>     jz .fddiskOp
    63 0000760A 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    64 0000760D 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    65 0000760F 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    66 00007612 7712                <1>     ja .fddiskOp
    67                              <1> ;Char operations here
    68 00007614 F605(07040000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    69 0000761B 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    70 0000761D 488D25(98130000)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    71 00007624 EB40                <1>     jmp short .fdGoToFunction
    72                              <1> .fddiskOp:
    73                              <1>     ;Disk operations go here
    74                              <1>     ;Save rax on entry to a disk funciton
    75 00007626 488905(33040000)    <1>     mov qword [oldRAX], rax
    76                              <1>     ;Clear up error info
    77 0000762D C605(0A040000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    78 00007634 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    79 0000763B C605(09040000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    80                              <1> 
    81 00007642 50                  <1>     push rax
    82 00007643 B482                <1>     mov ah, 82h ;Cancel all critical section!
    83 00007645 CD2A                <1>     int 2ah ;DOS critical section semphore handler (default, iretq)
    84 00007647 58                  <1>     pop rax
    85                              <1> 
    86 00007648 C605(95040000)00    <1>     mov byte [int28Flag], 0     ;Turn off the ability to trigger Int 28h
    87 0000764F 488D25(D8190000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
    88 00007656 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;Test if set
    89 0000765D 7407                <1>     jz .fdGoToFunction
    90                              <1> ; HANDLE CTRL+BREAK HERE!
    91 0000765F 50                  <1>     push rax
    92 00007660 E878B4FFFF          <1>     call checkBreak   ; Check for a ^C
    93 00007665 58                  <1>     pop rax
    94                              <1> .fdGoToFunction:
    95 00007666 48871D(83040000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
    96 0000766D FF15(83040000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
    97                              <1> .fdExit:
    98 00007673 FA                  <1>     cli     ;Redisable interrupts
    99 00007674 FE0D(08040000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   100 0000767A 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   101 00007681 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   102 00007684 488B05(6B040000)    <1>     mov rax, qword [oldoldRSP]
   103 0000768B 488905(7B040000)    <1>     mov qword [oldRSP], rax
   104 00007692 E806000000          <1>     call dosPopRegs  ;Pop the frame
   105 00007697 48CF                <1>     iretq
   106                              <1> .fdExitBad:
   107 00007699 30C0                <1>     xor al, al
   108                              <1> defaultIretq:
   109 0000769B 48CF                <1>     iretq
   110                              <1> dosPopRegs:
   111 0000769D 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   112 000076A3 58                  <1>     pop rax
   113 000076A4 5B                  <1>     pop rbx
   114 000076A5 59                  <1>     pop rcx
   115 000076A6 5A                  <1>     pop rdx
   116 000076A7 5E                  <1>     pop rsi
   117 000076A8 5F                  <1>     pop rdi
   118 000076A9 5D                  <1>     pop rbp
   119 000076AA 4158                <1>     pop r8
   120 000076AC 4159                <1>     pop r9
   121 000076AE FF25(73040000)      <1>     jmp qword [dosReturn]
   122                              <1> dosPushRegs:
   123 000076B4 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   124 000076BA 4151                <1>     push r9
   125 000076BC 4150                <1>     push r8
   126 000076BE 55                  <1>     push rbp
   127 000076BF 57                  <1>     push rdi
   128 000076C0 56                  <1>     push rsi
   129 000076C1 52                  <1>     push rdx
   130 000076C2 51                  <1>     push rcx
   131 000076C3 53                  <1>     push rbx
   132 000076C4 50                  <1>     push rax
   133 000076C5 FF25(73040000)      <1>     jmp qword [dosReturn]
   134                              <1> dosCrit1Enter:
   135                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 000076CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136 000076CC B801800000          <1>     mov eax, 8001h
   137 000076D1 CD2A                <1>     int 2ah
   138 000076D3 58                  <1>     pop rax
   139                              <1>     return
    13                              <2> %%_ret:
    14 000076D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   140                              <1> dosCrit1Exit:
   141                              <1>     return
    13                              <2> %%_ret:
    14 000076D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   142 000076D6 B801810000          <1>     mov eax, 8101h
   143 000076DB CD2A                <1>     int 2ah
   144 000076DD 58                  <1>     pop rax
   145                              <1>     return
    13                              <2> %%_ret:
    14 000076DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   146                              <1> dosCrit2Enter:
   147                              <1>     return
    13                              <2> %%_ret:
    14 000076DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   148 000076E0 B802800000          <1>     mov eax, 8002h
   149 000076E5 CD2A                <1>     int 2ah
   150 000076E7 58                  <1>     pop rax
   151                              <1>     return
    13                              <2> %%_ret:
    14 000076E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   152                              <1> dosCrit2Exit:
   153                              <1>     return
    13                              <2> %%_ret:
    14 000076E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   154 000076EA B802810000          <1>     mov eax, 8102h
   155 000076EF CD2A                <1>     int 2ah
   156 000076F1 58                  <1>     pop rax
   157                              <1>     return
    13                              <2> %%_ret:
    14 000076F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   158                              <1> 
   159                              <1> ;FCB specific returns
   160                              <1> fcbGoodExit:
   161                              <1> ;Preserve the carry flag on entry to DOS
   162 000076F3 30C0                <1>     xor al, al ;Set return code al = 0
   163                              <1>     return
    13                              <2> %%_ret:
    14 000076F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   164                              <1> fcbErrExit:
   165                              <1> ;Preserve the carry flag on entry to DOS
   166                              <1> ;Input: eax = Extended error code to store in SDA 
   167 000076F6 E836000000          <1>     call xLatError
   168 000076FB B0FF                <1>     mov al, -1  ;Set return code al = -1
   169 000076FD F9                  <1>     stc
   170                              <1>     return
    13                              <2> %%_ret:
    14 000076FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   171                              <1> 
   172                              <1> ;Handle and General DOS Returns
   173                              <1> ;All good exits destroy AT LEAST ax 
   174                              <1> extGoodExit2:
   175                              <1> ;Good exit with an extended return code in eax
   176 000076FF E841FBFFFF          <1>     call getUserRegs
   177 00007704 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   178 00007706 EB08                <1>     jmp short extGoodExit.extGoodCommon
   179                              <1> extGoodExit:
   180                              <1> ;Good exit
   181                              <1> ;Return code in ax
   182 00007708 E838FBFFFF          <1>     call getUserRegs
   183 0000770D 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   184                              <1> .extGoodCommon:
   185 00007710 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   186 00007714 F8                  <1>     clc
   187                              <1>     return
    13                              <2> %%_ret:
    14 00007715 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   188                              <1> extErrExit:
   189                              <1> ;The extended error exit from DOS
   190                              <1> ;Jumped to with AL=Extended error code
   191                              <1> ;Can be called too.
   192                              <1> ;Input: al = Extended error code
   193                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   194                              <1> ;   Returns with: eax = xLat Error
   195                              <1> ;                 rsi = callerFrame
   196 00007716 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   197 00007719 E813000000          <1>     call xLatError
   198 0000771E E891000000          <1>     call checkFail
   199                              <1> .noXlat:
   200 00007723 E81DFBFFFF          <1>     call getUserRegs
   201 00007728 668906              <1>     mov word [rsi + callerFrame.rax], ax
   202 0000772B 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   203 0000772F F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   204                              <1>     return
    13                              <2> %%_ret:
    14 00007730 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   205                              <1> xLatError:
   206                              <1> ;Translates the error code given in ax and sets error code in the var
   207                              <1> ; Input: ax = Extended Error Code
   208                              <1> ; Output: ax = Potentially translated Error Code
   209                              <1> ;         [errorExCde] = Original Error Code
   210                              <1> ;Preserves all registers except ax
   211                              <1> ;AH is always returned as 0
   212 00007731 53                  <1>     push rbx
   213 00007732 51                  <1>     push rcx
   214 00007733 56                  <1>     push rsi
   215 00007734 668905(0B040000)    <1>     mov word [errorExCde], ax
   216 0000773B 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   217 0000773D 488D353589FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   218                              <1> .readEntry:
   219 00007744 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   220 00007746 3CFF                <1>     cmp al, -1
   221 00007748 741F                <1>     je .skipXlat
   222 0000774A 3A05(34040000)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   223 00007750 7408                <1>     je .found
   224                              <1>     ;Here, entry not found, goto next entry
   225 00007752 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   226 00007755 4801C6              <1>     add rsi, rax    ;Goto next entry
   227 00007758 EBEA                <1>     jmp short .readEntry
   228                              <1> .found:
   229                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   230 0000775A 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   231                              <1> .mainSearch:
   232 0000775D AC                  <1>     lodsb   ;Get one byte into al
   233 0000775E 38C3                <1>     cmp bl, al  ;Check against the error code
   234 00007760 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   235 00007762 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   236 00007764 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   237                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   238 00007766 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   239                              <1> .skipXlat:
   240 00007769 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   241 0000776B 5E                  <1>     pop rsi
   242 0000776C 59                  <1>     pop rcx
   243 0000776D 5B                  <1>     pop rbx
   244                              <1>     return
    13                              <2> %%_ret:
    14 0000776E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> setErrorVars:   ;Int 2Fh, AX=1222h
   246                              <1> ;Looks up the error code in the variable and sets the other error vars
   247                              <1> ;Called with the lookup table in rsi
   248                              <1> ;All regs preserved
   249 0000776F 50                  <1>     push rax
   250 00007770 53                  <1>     push rbx
   251 00007771 51                  <1>     push rcx
   252 00007772 56                  <1>     push rsi
   253 00007773 0FB71D(0B040000)    <1>     movzx ebx, word [errorExCde]
   254 0000777A B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   255                              <1> .readEntry:
   256 0000777F AD                  <1>     lodsd   ;Read the dword table entry into eax
   257 00007780 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   258 00007785 7428                <1>     je .exit    
   259 00007787 38D8                <1>     cmp al, bl  ;Compare the error codes
   260 00007789 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   261 0000778B D3E8                <1>     shr eax, cl
   262 0000778D 3CFF                <1>     cmp al, -1
   263 0000778F 7406                <1>     je .skipClass
   264 00007791 8805(0E040000)      <1>     mov byte [errorClass], al
   265                              <1> .skipClass:
   266 00007797 D3E8                <1>     shr eax, cl
   267 00007799 3CFF                <1>     cmp al, -1
   268 0000779B 7406                <1>     je .skipAct
   269 0000779D 8805(0D040000)      <1>     mov byte [errorAction], al
   270                              <1> .skipAct:
   271 000077A3 D3E8                <1>     shr eax, cl
   272 000077A5 3CFF                <1>     cmp al, -1
   273 000077A7 7406                <1>     je .exit
   274 000077A9 8805(0A040000)      <1>     mov byte [errorLocus], al
   275                              <1> .exit:
   276 000077AF 5E                  <1>     pop rsi
   277 000077B0 59                  <1>     pop rcx
   278 000077B1 5B                  <1>     pop rbx
   279 000077B2 58                  <1>     pop rax
   280                              <1>     return
    13                              <2> %%_ret:
    14 000077B3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   281                              <1> checkFail:
   282                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 24h
   283                              <1> ; and swaps the var error code if so
   284 000077B4 F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;If zero, skip!
   285 000077BB 7409                <1>     jz .skipFail
   286 000077BD 66C705(0B040000)53- <1>     mov word [errorExCde], errFI24  ;Set error to "Fail on Int 24h"
   286 000077C5 00                  <1>
   287                              <1> .skipFail:
   288 000077C6 56                  <1>     push rsi
   289 000077C7 488D354789FFFF      <1>     lea rsi, extErrTbl
   290 000077CE E89CFFFFFF          <1>     call setErrorVars
   291 000077D3 5E                  <1>     pop rsi
   292                              <1>     return
    13                              <2> %%_ret:
    14 000077D4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   293                              <1> ;========================================:
   294                              <1> ;      Reentrant Kernel Functions        :
   295                              <1> ;========================================:
   296                              <1> ctrlBreakCheck:    ;ah = 33h
   297 000077D5 3C06                <1>     cmp al, 6
   298 000077D7 743C                <1>     je .trueVer
   299 000077D9 3C05                <1>     cmp al, 5
   300 000077DB 742E                <1>     je .getBtDrv    ;Peel off btdrv req.
   301 000077DD 84C0                <1>     test al, al
   302 000077DF 7508                <1>     jnz .cbcget     ;Get the state or other functions
   303 000077E1 8A15(32040000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   304 000077E7 48CF                <1>     iretq
   305                              <1> .cbcget:
   306 000077E9 3C02                <1>     cmp al, 02h
   307 000077EB 771A                <1>     ja .cbcBad
   308 000077ED 740D                <1>     jz .cbcxchg ;Function 2
   309 000077EF 52                  <1>     push rdx
   310 000077F0 80E201              <1>     and dl, 1   ;Get only the bottom bit
   311 000077F3 8815(32040000)      <1>     mov byte [breakFlag], dl    ;Set the state
   312 000077F9 5A                  <1>     pop rdx
   313 000077FA 48CF                <1>     iretq
   314                              <1> .cbcxchg:
   315 000077FC 80E201              <1>     and dl, 1
   316 000077FF 8615(32040000)      <1>     xchg byte [breakFlag], dl
   317 00007805 48CF                <1>     iretq
   318                              <1> .cbcBad:
   319 00007807 B0FF                <1>     mov al, -1
   320 00007809 48CF                <1>     iretq
   321                              <1> .getBtDrv:
   322                              <1> ;Undocumented.
   323                              <1> ;Might be unreliable so dont document yet.
   324                              <1> ;Return 1 based boot drive in dl
   325 0000780B 8A15(10000000)      <1>     mov dl, byte [bootDrive]    ;Get the 0 based bootDrive number
   326 00007811 FEC2                <1>     inc dl  ;Return a 1 based drive number
   327 00007813 48CF                <1>     iretq
   328                              <1> .trueVer:
   329                              <1> ;Undocumented.
   330                              <1> ;bx returns true DOS number.
   331                              <1> ;dl has "revision" number in bits 0-2. 
   332                              <1> ;dh has various flags. All reserved for future use.
   333 00007815 66BB0062            <1>     mov bx, dosVerMac
   334 00007819 66BA0000            <1>     mov dx, (dosVerFlags << 8) | dosRev
   335 0000781D 48CF                <1>     iretq
   336                              <1> 
   337                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   338 0000781F 48891D(1F040000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   339 00007826 48CF                <1>     iretq
   340                              <1> 
   341                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   342 00007828 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   343 0000782F 48CF                <1>     iretq
   344                              <1> 
   345                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   346 00007831 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   347 00007838 48CF                <1>     iretq
   348                              <1> 
   349                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   350 0000783A 8805(E0190000)      <1>     mov byte [lookahead], al    
   351 00007840 48CF                <1>     iretq
   352                              <1> 
   353                              <1> systemServices: ;ah = 61h
   354                              <1> ;All pointers returned in rdx
   355                              <1> ;al = 0 -> Get Environment pointer in rdx
   356                              <1> ;al = 1 -> Get Command Line Arguments Pointer in rdx
   357                              <1> ;al = 2 -> Get ptr to ASCIIZ FQFN for program in rdx
   358                              <1> ;       al = 2 can fail. If CF=CY or rdx = 0, cannot use ptr.
   359                              <1> ;                        Else, rdx -> Filename
   360 00007842 3C01                <1>     cmp al, 1
   361 00007844 7453                <1>     je short .getCmdLineArgs
   362 00007846 3C02                <1>     cmp al, 2
   363 00007848 760C                <1>     jbe .getEnvPtr
   364 0000784A B801000000          <1>     mov eax, errInvFnc
   365                              <1> .exitBad:
   366 0000784F 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on
   367 00007854 48CF                <1>     iretq
   368                              <1> .getEnvPtr:
   369                              <1>     ;Gets the environment pointer in rdx
   370 00007856 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   371 0000785D 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environement pointer
   372 00007861 7541                <1>     jne short .exitOk   ;If it is not equal to 2, exit (since it was 0)
   373                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   374                              <1> ; pass the ptr to the word after.
   375 00007863 FA                  <1>     cli
   376 00007864 51                  <1>     push rcx
   377 00007865 31C9                <1>     xor ecx, ecx
   378 00007867 B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   379                              <1> .gep0:
   380 0000786C 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   381 00007871 740D                <1>     je short .gep1
   382 00007873 48FFC2              <1>     inc rdx         ;Go to the next byte
   383 00007876 FFC9                <1>     dec ecx
   384 00007878 75F2                <1>     jnz short .gep0
   385                              <1> .gep00:
   386                              <1>     ;Failure here if we haven't hit the double null by the end of 32Kb
   387 0000787A 59                  <1>     pop rcx
   388 0000787B FB                  <1>     sti
   389 0000787C 31D2                <1>     xor edx, edx    ;Turn it into null pointer
   390 0000787E EBCF                <1>     jmp short .exitBad
   391                              <1> .gep1:
   392 00007880 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   393 00007887 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   394 0000788C 75EC                <1>     jne .gep00
   395 0000788E 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word.
   396 00007895 59                  <1>     pop rcx
   397 00007896 FB                  <1>     sti
   398 00007897 EB0B                <1>     jmp short .exitOk
   399                              <1> .getCmdLineArgs:
   400 00007899 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   401 000078A0 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   402                              <1> .exitOk:
   403 000078A4 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF
   404 000078A9 48CF                <1>     iretq
   405                              <1> 
   406                              <1> 
   407                              <1> ;========================================:
   408                              <1> ;            Kernel Functions            :
   409                              <1> ;========================================:
   410                              <1> diskReset:         ;ah = 0Dh
   411                              <1> ;Flush all dirty buffers to disk
   412 000078AB E81BFEFFFF          <1>     call dosCrit1Enter
   413 000078B0 B0FF                <1>     mov al, -1  ;Mark all drives as flushable
   414 000078B2 E8778EFFFF          <1>     call flushAllBuffersForDrive  
   415                              <1>     ;Now we free all buffers and set their referenced bit
   416 000078B7 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   417                              <1> .drBufferLp:
   418 000078BE 4881FFFFFFFFFF      <1>     cmp rdi, -1
   419 000078C5 740B                <1>     je .drExit
   420 000078C7 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   421 000078CD 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   422 000078D0 EBEC                <1>     jmp short .drBufferLp
   423                              <1> .drExit:
   424 000078D2 E8FEFDFFFF          <1>     call dosCrit1Exit
   425 000078D7 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   426 000078DC CD2F                <1>     int 2fh
   427                              <1>     return
    13                              <2> %%_ret:
    14 000078DE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   428                              <1> 
   429                              <1> selectDisk:        ;ah = 0Eh
   430                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   431 000078DF 88D0                <1>     mov al, dl
   432 000078E1 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   433 000078E3 E881F9FFFF          <1>     call getCDSNotJoin  ;Must make sure provided drive is valid
   434 000078E8 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   435 000078EA 8805(31040000)      <1>     mov byte [currentDrv], al   ;Set drive as current
   436                              <1> .skipSettingCurrent:
   437 000078F0 0FB605(78000000)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   438                              <1>     return
    13                              <2> %%_ret:
    14 000078F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> 
   440                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   441 000078F8 8A05(31040000)      <1>     mov al, byte [currentDrv]
   442                              <1>     return
    13                              <2> %%_ret:
    14 000078FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   443                              <1> 
   444                              <1> FATinfoDefault:    ;ah = 1Bh
   445 000078FF 30D2                <1>     xor dl, dl
   446                              <1> FATinfoDevice:     ;ah = 1Ch
   447                              <1> ;Input: dl = 1 based drive number
   448                              <1> ;Output:
   449                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   450                              <1> ;cx = bytes per sector
   451                              <1> ;edx = total number of clusters
   452                              <1> ;rbx = Ptr to media ID byte
   453 00007901 88D0                <1>     mov al, dl  ;Move drive number into al
   454 00007903 E8D1F9FFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   455 00007908 7307                <1>     jnc .fidCDSFound
   456 0000790A B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   457 0000790F EB2E                <1>     jmp short .error 
   458                              <1> .fidCDSFound:
   459 00007911 E8B6F8FFFF          <1>     call getDiskData
   460 00007916 7227                <1>     jc .error
   461                              <1> ;Now we have that:
   462                              <1> ;al = sectors per cluster
   463                              <1> ;ah = media ID byte
   464                              <1> ;ebx = total clusters
   465                              <1> ;cx = bytes per sector
   466                              <1> ;edx = number of available clusters
   467 00007918 E828F9FFFF          <1>     call getUserRegs
   468 0000791D 8825(91070000)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   469 00007923 30E4                <1>     xor ah, ah
   470 00007925 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   471 00007928 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   472 0000792C 488D1D(91070000)    <1>     lea rbx, mediaByte
   473 00007933 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   474 00007937 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   475                              <1> .badExit:
   476 0000793B 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   477                              <1>     return
    13                              <2> %%_ret:
    14 0000793E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   478                              <1> .error:
   479 0000793F E8D2FDFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   480 00007944 66B8FFFF            <1>     mov ax, -1
   481 00007948 EBF1                <1>     jmp short .badExit
   482                              <1> 
   483                              <1> setIntVector:      ;ah = 25h
   484                              <1> ;Called with:
   485                              <1> ;   rdx = Pointer to interrupt handler
   486                              <1> ;   al = Interrupt number
   487 0000794A FA                  <1>     cli ;Halt interrupts
   488 0000794B 0F010D(171A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
   489 00007952 0FB6C0              <1>     movzx eax, al
   490 00007955 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   491 00007959 480305(191A0000)    <1>     add rax, qword [dosIdtPtr.base]    
   492 00007960 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
   493 00007963 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
   494 00007967 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
   495 0000796B 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
   496 0000796F 895008              <1>     mov dword [rax + 8], edx
   497 00007972 FB                  <1>     sti
   498                              <1>     return
    13                              <2> %%_ret:
    14 00007973 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   499                              <1> 
   500                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   501 00007974 8805(D0030000)      <1>     mov byte [verifyFlag], al
   502 0000797A 8025(D0030000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   503                              <1>     return
    13                              <2> %%_ret:
    14 00007981 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   504                              <1> getDOSversion:     ;ah = 30h
   505 00007982 E8BEF8FFFF          <1>     call getUserRegs
   506 00007987 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   507 00007989 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   508 0000798C 668B056D86FFFF      <1>     mov ax, word [dosVersion] ;Major and minor version in al,ah resp.
   509 00007993 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   510                              <1>     return
    13                              <2> %%_ret:
    14 00007996 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   511                              <1> 
   512                              <1> setDOSversion:  ;Int 2Fh, AX=122Fh - Set DOS verstion to report
   513                              <1> ;Input: dx = Version number. Value of 0 means true value.
   514 00007997 6685D2              <1>     test dx, dx
   515 0000799A 750A                <1>     jnz .newVal
   516 0000799C 66C7055B86FFFF0062  <1>     mov word [dosVersion], dosVerMac    ;Reset the value
   517                              <1>     return
    13                              <2> %%_ret:
    14 000079A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   518                              <1> .newVal:
   519 000079A6 6689155386FFFF      <1>     mov word [dosVersion], dx    ;Store dx in the value to report.
   520                              <1>     return
    13                              <2> %%_ret:
    14 000079AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   521                              <1> 
   522                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   523                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 21h\ah=32h with dl=0
   524 000079AE 30D2                <1>     xor dl, dl
   525                              <1> getDeviceDPBptr:   ;ah = 32h
   526                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   527                              <1> ;On exit: rbx = DPB pointer
   528 000079B0 88D0                <1>     mov al, dl
   529 000079B2 E822F9FFFF          <1>     call getCDS
   530 000079B7 722C                <1>     jc .bad
   531 000079B9 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   532 000079C0 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   533 000079C6 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   534                              <1>     ;Here ONLY if accessing critical Disk data structures
   535 000079C8 E8FEFCFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   536 000079CD E845F5FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   537 000079D2 E8FEFCFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   538 000079D7 720C                <1>     jc .bad
   539 000079D9 E867F8FFFF          <1>     call getUserRegs
   540 000079DE 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   541 000079E2 30C0                <1>     xor al, al
   542                              <1>     return
    13                              <2> %%_ret:
    14 000079E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   543                              <1> .bad:
   544 000079E5 B0FF                <1>     mov al, -1
   545                              <1>     return
    13                              <2> %%_ret:
    14 000079E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   546                              <1> 
   547                              <1> getInDOSflagPtr:   ;ah = 34h
   548 000079E8 488D15(08040000)    <1>     lea rdx, inDOS
   549 000079EF E851F8FFFF          <1>     call getUserRegs
   550 000079F4 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   551                              <1>     return
    13                              <2> %%_ret:
    14 000079F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   552                              <1> 
   553                              <1> getIntVector:      ;ah = 35h
   554                              <1> ;Called with:
   555                              <1> ;   al = Interrupt Number
   556                              <1> ;Returns:
   557                              <1> ;   rbx = Pointer to interrupt handler
   558 000079F9 E819F8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   559 000079FE E842F8FFFF          <1>     call getUserRegs
   560 00007A03 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   561                              <1>     return
    13                              <2> %%_ret:
    14 00007A07 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   562                              <1> 
   563                              <1> getDiskFreeSpace:  ;ah = 36h
   564                              <1> ;Input: Drive number in dl (0 = Current)
   565                              <1> ;Output:    ax = sectors per cluster
   566                              <1> ;           ebx = number of free clusters
   567                              <1> ;           cx = bytes per sector
   568                              <1> ;           edx = total clusters on drive
   569 00007A08 88D0                <1>     mov al, dl
   570 00007A0A E8CAF8FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   571 00007A0F 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   572                              <1> ;Else, we at an error.
   573                              <1> ;Simply return with CY set and error code in al with extended error info
   574 00007A11 B80F000000          <1>     mov eax, errBadDrv
   575 00007A16 E8FBFCFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   576                              <1>     ;extErrExit sets rsi to caller regs
   577 00007A1B 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   578                              <1>     return
    13                              <2> %%_ret:
    14 00007A20 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   579                              <1> .gdfsCDSFound:
   580 00007A21 E8A6F7FFFF          <1>     call getDiskData
   581 00007A26 7219                <1>     jc .error
   582                              <1> ;Now we have that:
   583                              <1> ;al = sectors per cluster
   584                              <1> ;ah = media ID byte
   585                              <1> ;ebx = total clusters
   586                              <1> ;cx = bytes per sector
   587                              <1> ;edx = number of available clusters
   588 00007A28 E818F8FFFF          <1>     call getUserRegs
   589 00007A2D 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   590 00007A2F 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   591 00007A32 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   592 00007A36 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   593 00007A39 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   594                              <1> .badExit:
   595 00007A3D 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   596                              <1>     return
    13                              <2> %%_ret:
    14 00007A40 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   597                              <1> .error:
   598 00007A41 E8D0FCFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   599 00007A46 66B8FFFF            <1>     mov ax, -1
   600 00007A4A EBF1                <1>     jmp short .badExit
   601                              <1> 
   602                              <1> 
   603                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   604 00007A4C 31C0                <1>     xor eax, eax
   605 00007A4E 668705(2F040000)    <1>     xchg ax, word [errorLevel]
   606 00007A55 E9AEFCFFFF          <1>     jmp extGoodExit
   607                              <1> 
   608                              <1> getSysVarsPtr:     ;ah = 52h
   609 00007A5A 488D15(3B000000)    <1>     lea rdx, sysVarsPtr
   610 00007A61 E8DFF7FFFF          <1>     call getUserRegs
   611 00007A66 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   612                              <1>     return
    13                              <2> %%_ret:
    14 00007A6A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   613                              <1> 
   614                              <1> 
   615                              <1> ;AH = 53h - CREATE DPB
   616                              <1> createDPB:         ;generates a DPB from a given BPB
   617                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   618                              <1> ;This is done so that the other fields of the DPB can be recycled
   619                              <1> ;Input: rsi = ptr to the BPB
   620                              <1> ;       rbp = ptr to the DPB
   621                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   622                              <1> ;bMediaDescriptor
   623 00007A6B 8A4615              <1>     mov al, byte [rsi + bpb.media]
   624 00007A6E 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   625                              <1> ;dNextFreeClst
   626 00007A71 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1  ;Start is default (clust 2)
   627                              <1> ;dFreeClustCnt
   628 00007A78 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Start with unknown
   629                              <1> ;wBytesPerSector
   630 00007A7F 0FB7460B            <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   631 00007A83 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   632                              <1> ;bMaxSectorInCluster
   633 00007A87 8A460D              <1>     mov al, byte [rsi + bpb.secPerClus]
   634 00007A8A FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   635 00007A8C 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   636                              <1> ;bSecPerClustShift
   637 00007A8F FEC0                <1>     inc al
   638 00007A91 30C9                <1>     xor cl, cl
   639                              <1> .cd2:
   640 00007A93 D0E8                <1>     shr al, 1
   641 00007A95 7404                <1>     jz .cd3
   642 00007A97 FEC1                <1>     inc cl
   643 00007A99 EBF8                <1>     jmp short .cd2
   644                              <1> .cd3:
   645 00007A9B 884D05              <1>     mov byte [rbp + dpb.bSecPerClustShift], cl
   646                              <1> ;wFAToffset, number of reserved sectors in partition
   647 00007A9E 668B460E            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   648 00007AA2 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   649                              <1> ;bNumberOfFATs
   650 00007AA6 8A4610              <1>     mov al, byte [rsi + bpb.numFATs]
   651 00007AA9 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   652                              <1> ;wNumberRootDirEntries
   653                              <1> ;Gets the number of 32 byte entries in the root directory
   654                              <1> ;Only valid for FAT 12/16
   655 00007AAC 0FB74611            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   656 00007AB0 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   657                              <1> ;dFATlength, get the FAT length
   658 00007AB4 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   659 00007AB8 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   660 00007ABB 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   661 00007ABD 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   662 00007AC0 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   663                              <1> ;Complex cases below...
   664                              <1> ;dClusterHeapOffset, start sector of the data area
   665 00007AC3 0FB74616            <1>     movzx eax, word [rsi + bpb.FATsz16]
   666 00007AC7 8B5E24              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   667 00007ACA 85C0                <1>     test eax, eax
   668 00007ACC 0F44C3              <1>     cmovz eax, ebx
   669                              <1> ;eax = FATsz
   670 00007ACF 0FB75E13            <1>     movzx ebx, word [rsi + bpb.totSec16]
   671 00007AD3 8B4E20              <1>     mov ecx, dword [rsi + bpb.totSec32]
   672 00007AD6 85DB                <1>     test ebx, ebx
   673 00007AD8 0F44D9              <1>     cmovz ebx, ecx 
   674                              <1> ;ebx = TotSec
   675 00007ADB 8A4E10              <1>     mov cl, byte [rsi + bpb.numFATs]
   676 00007ADE 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   677                              <1> .cd4:
   678 00007AE0 01C2                <1>     add edx, eax
   679 00007AE2 FEC9                <1>     dec cl
   680 00007AE4 75FA                <1>     jnz .cd4
   681 00007AE6 89D0                <1>     mov eax, edx    ;Store product in eax
   682 00007AE8 0FB7560E            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   683 00007AEC 01D0                <1>     add eax, edx
   684                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   685 00007AEE 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   686 00007AF2 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   687 00007AF5 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   688 00007AF9 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   689 00007AFA 89D0                <1>     mov eax, edx
   690 00007AFC 31D2                <1>     xor edx, edx
   691 00007AFE F7F1                <1>     div ecx
   692 00007B00 89C2                <1>     mov edx, eax
   693 00007B02 58                  <1>     pop rax
   694 00007B03 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   695                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   696                              <1>     ;aka eax = Start sector of the data area in volume
   697 00007B05 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   698                              <1> ;dClusterCount
   699 00007B08 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   700 00007B0A 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   701 00007B0C 31D2                <1>     xor edx, edx
   702 00007B0E BB01000000          <1>     mov ebx, 1
   703 00007B13 8A4D05              <1>     mov cl, byte [rbp + dpb.bSecPerClustShift]
   704 00007B16 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   705 00007B18 F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   706 00007B1A FFC0                <1>     inc eax ;Maximum valid cluster address is cluster count + 1
   707 00007B1C 89450F              <1>     mov dword [rbp + dpb.dMaxClusterAddr], eax    ;eax = Max cluster address
   708                              <1> ;dFirstUnitOfRootDir
   709 00007B1F 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   710 00007B24 8B462C              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   711 00007B27 770F                <1>     ja .cd5
   712                              <1>     ;Else, we need to find the first sector of the root directory
   713                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   714 00007B29 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   715 00007B2D 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   716                              <1> .cd51:
   717 00007B31 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   718 00007B34 FFC9                <1>     dec ecx
   719 00007B36 75F9                <1>     jnz .cd51
   720                              <1> .cd5:
   721 00007B38 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   722 00007B3B C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   723 00007B3F E87793FFFF          <1>     call readFSInfoSector   ;If FAT32, updates free cluster data with FSinfo
   724                              <1> ;Exit epilogue
   725                              <1> .exit:
   726 00007B44 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   727 00007B4B 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   728                              <1>     return
    13                              <2> %%_ret:
    14 00007B4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   729                              <1> 
   730                              <1> getVerifySetting:  ;ah = 54h
   731 00007B4E 8A05(D0030000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   732                              <1>     return
    13                              <2> %%_ret:
    14 00007B54 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   733                              <1> 
   734                              <1> getExtendedError:  ;ah = 59h
   735 00007B55 E8EBF6FFFF          <1>     call getUserRegs
   736 00007B5A 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   737 00007B61 8A2D(0A040000)      <1>     mov ch, byte [errorLocus]
   738 00007B67 8A3D(0E040000)      <1>     mov bh, byte [errorClass]
   739 00007B6D 8A1D(0D040000)      <1>     mov bl, byte [errorAction]
   740 00007B73 488B3D(0F040000)    <1>     mov rdi, qword [errorVolLbl]
   741 00007B7A 668906              <1>     mov word [rsi + callerFrame.rax], ax
   742 00007B7D 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   743 00007B81 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   744 00007B84 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi
   745                              <1> noOp:
   746                              <1>     return
    13                              <2> %%_ret:
    14 00007B88 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   747                              <1> ;At some point we will implement the below function but that is
   748                              <1> ; a low priority as it is not a DOS 3.3 function. 
   749                              <1> ;getsetDiskSerial:  ;ah = 69h, get/set disk serial number
    48                                  %include "./src/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 00007B89 3C07                <1>     cmp al, 07h
     8 00007B8B 7204                <1>     jb .skip
     9 00007B8D 3C09                <1>     cmp al, 09h
    10 00007B8F 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 00007B91 4889D6              <1>     mov rsi, rdx
    13 00007B94 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 00007B98 66891D(43040000)    <1>     mov word [machineNum], bx
    15 00007B9F 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 00007BA3 48891D(3B040000)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 00007BAA 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 00007BB1 53                  <1>     push rbx
    20 00007BB2 488B1D(E2190000)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 00007BB9 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 00007BBA 50                  <1>     push rax    ;Push al onto stack as a qword
    23 00007BBB E856010000          <1>     call serverFunctionSelect
    24 00007BC0 B801000000          <1>     mov eax, eLocUnk
    25 00007BC5 8805(0A040000)      <1>     mov byte [errorLocus], al
    26 00007BCB E946FBFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 00007BD0 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 00007BD1 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 00007BD2 5F                  <1>     pop rdi
    33 00007BD3 E86DF6FFFF          <1>     call getUserRegs
    34 00007BD8 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 00007BDB 56                  <1>     push rsi
    36 00007BDC B906000000          <1>     mov ecx, 6
    37 00007BE1 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 00007BE4 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 00007BEB 48A5                <1>     movsq   ;Transfer r8...
    40 00007BED 48A5                <1>     movsq   ;... and r9
    41 00007BEF 5E                  <1>     pop rsi
    42 00007BF0 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 00007BF3 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 00007BF7 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 00007BFB 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 00007BFF 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 00007C03 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 00007C07 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 00007C0B 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 00007C0F 48891D(83040000)    <1>     mov qword [oldRBX], rbx
    51 00007C16 C605(02070000)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 00007C1D E9AAF9FFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CDh 20h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 00007C22 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 00007C29 66813BCD20          <1>     cmp word [rbx], 20CDh
    61 00007C2E 740A                <1>     je .validTask
    62 00007C30 B805000000          <1>     mov eax, errAccDen
    63 00007C35 E9DCFAFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 00007C3A 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 00007C3C E88AFAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 00007C41 53                  <1>     push rbx
    70 00007C42 E8A9D4FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 00007C47 7227                <1>     jc .exit
    72 00007C49 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 00007C4E 741B                <1>     je .gotoNextFile
    74 00007C50 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 00007C55 7414                <1>     je .gotoNextFile
    76 00007C57 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
    77 00007C5D 750C                <1>     jnz .gotoNextFile
    78 00007C5F 48893D(32070000)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
    79 00007C66 E8C2C1FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 00007C6B 5B                  <1>     pop rbx
    83 00007C6C FFC3                <1>     inc ebx
    84 00007C6E EBD1                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 00007C70 E860FAFFFF          <1>     call dosCrit1Exit
    87 00007C75 5B                  <1>     pop rbx ;Align stack
    88 00007C76 E98DFAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 00007C7B FF15(E7000000)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 00007C81 0F828FFAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 00007C87 E97CFAFFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 00007C8C FF15(D7000000)      <1>     call qword [closeCompShare]
   100 00007C92 EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 00007C94 FF15(DF000000)      <1>     call qword [closeTaskShare]
   104 00007C9A EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 00007C9C FF15(07010000)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 00007CA2 72DD                <1>     jc closeFilesByName.shareExitBad
   109 00007CA4 E89CF5FFFF          <1>     call getUserRegs
   110 00007CA9 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 00007CAD 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 00007CB1 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 00007CB5 EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 00007CB7 488D3D(07040000)    <1>     lea rdi, sda
   124 00007CBE 48B9DB150000000000- <1>     mov rcx, sdaLen
   124 00007CC7 00                  <1>
   125 00007CC8 48BA2C000000000000- <1>     mov rdx, sdaLen - sdaDOSLen ;Get the difference
   125 00007CD1 00                  <1>
   126 00007CD2 E86EF5FFFF          <1>     call getUserRegs
   127 00007CD7 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 00007CDB 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 00007CDF EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 00007CE1 50                  <1>     push rax
   133 00007CE2 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 00007CE7 CD2F                <1>     int 2Fh
   135 00007CE9 5B                  <1>     pop rbx
   136 00007CEA 7295                <1>     jc short closeFilesByName.shareExitBad
   137 00007CEC EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 00007CEE 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 00007CF0 668905(0B040000)    <1>     mov word [errorExCde], ax
   144 00007CF7 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Set the volume label pointer var
   145 00007CFB 488905(0F040000)    <1>     mov qword [errorVolLbl], rax
   146 00007D02 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 00007D05 668905(0D040000)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 00007D0C 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 00007D0F 8825(0A040000)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 00007D15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 00007D16 55                  <1>     push rbp
   156 00007D17 4889E5              <1>     mov rbp, rsp
   157 00007D1A 53                  <1>     push rbx
   158 00007D1B 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 00007D1F 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 00007D22 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 00007D25 7621                <1>     jbe short .argumentTooBig
   162 00007D27 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx
   163 00007D2B D1E3                <1>     shl ebx, 1  ;Convert to word offset
   164 00007D2D FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 00007D2F 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   166 00007D33 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   167 00007D36 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   168 00007D3A 48895D20            <1>     mov qword [rbp + 4*8], rbx  ;Store this address as the return address
   169 00007D3E 5B                  <1>     pop rbx
   170 00007D3F 5D                  <1>     pop rbp
   171 00007D40 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   172                              <1>     return
    13                              <2> %%_ret:
    14 00007D47 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> .argumentTooBig:
   174 00007D48 5B                  <1>     pop rbx
   175 00007D49 5D                  <1>     pop rbp
   176 00007D4A C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   177                              <1> 
   178                              <1> netServices:   ;ah = 5Eh, do nothing
   179                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   180 00007D4D 3C01                <1>     cmp al, 01
   181 00007D4F 7214                <1>     jb .getName
   182 00007D51 7437                <1>     jz .setName
   183 00007D53 3C06                <1>     cmp al, 6
   184 00007D55 724C                <1>     jb .netRedir
   185 00007D57 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   186 00007D5E B001                <1>     mov al, errInvFnc
   187                              <1> .badExit:
   188 00007D60 E9B1F9FFFF          <1>     jmp extErrExit
   189                              <1> .getName:
   190                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   191                              <1> ;Output: CF=NC => Success.
   192                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   193                              <1> ;        CL = NetBIOS number for the machine
   194                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   195                              <1> ;        CF=CY => Failure
   196                              <1> ;        AX = Errorcode
   197 00007D65 4889D7              <1>     mov rdi, rdx
   198 00007D68 0FB70D(1D000000)    <1>     movzx ecx, word [validNetNam]
   199 00007D6F E8D1F4FFFF          <1>     call getUserRegs
   200 00007D74 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   201 00007D78 488D35(D6030000)    <1>     lea rsi, machineName
   202                              <1> .nameCmn:
   203 00007D7F 31C0                <1>     xor eax, eax
   204 00007D81 48A5                <1>     movsq
   205 00007D83 A5                  <1>     movsd
   206 00007D84 66A5                <1>     movsw
   207 00007D86 A4                  <1>     movsb
   208 00007D87 AA                  <1>     stosb   ;Store terminating null
   209 00007D88 EB24                <1>     jmp short .exitGood
   210                              <1> .setName:
   211                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   212                              <1> ;       CH = 0 => Mark name as invalid
   213                              <1> ;         != 0 => Mark name as valid
   214                              <1> ;       CL = NetBIOS number for the name
   215 00007D8A 66890D(1D000000)    <1>     mov word [validNetNam], cx
   216 00007D91 4889D6              <1>     mov rsi, rdx
   217 00007D94 FE05(D5030000)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   218 00007D9A 488D3D(D6030000)    <1>     lea rdi, machineName
   219 00007DA1 EBDC                <1>     jmp short .nameCmn
   220                              <1> 
   221                              <1> .netRedir:
   222 00007DA3 50                  <1>     push rax
   223 00007DA4 B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   224 00007DA9 CD2F                <1>     int 2Fh
   225 00007DAB 5A                  <1>     pop rdx
   226 00007DAC 72B2                <1>     jc .badExit
   227                              <1> .exitGood:
   228 00007DAE E955F9FFFF          <1>     jmp extGoodExit
   229                              <1> 
   230                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   231                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   232 00007DB3 80FC07              <1>     cmp ah, 07h
   233 00007DB6 7419                <1>     je .driveAction
   234 00007DB8 80FC08              <1>     cmp ah, 08h
   235 00007DBB 7414                <1>     je .driveAction
   236                              <1>     ;Else, use redirector to process request
   237 00007DBD 50                  <1>     push rax
   238 00007DBE B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   239 00007DC3 CD2F                <1>     int 2Fh
   240 00007DC5 5B                  <1>     pop rbx
   241                              <1> .badExit:
   242 00007DC6 0F824AF9FFFF        <1>     jc extErrExit
   243                              <1> .goodExit:
   244 00007DCC E937F9FFFF          <1>     jmp extGoodExit
   245                              <1> .driveAction:
   246                              <1> ;dl must have valid 0-based drive number
   247 00007DD1 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   248 00007DD3 E85CF5FFFF          <1>     call getCDSforDrive
   249 00007DD8 72EC                <1>     jc short .badExit
   250                              <1>     ;rsi points to CDS
   251 00007DDA 80EA07              <1>     sub dl, 7
   252 00007DDD 7408                <1>     jz .enable
   253 00007DDF 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   254 00007DE5 EBE5                <1>     jmp short .goodExit
   255                              <1> .enable:
   256 00007DE7 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   257 00007DED EBDD                <1>     jmp short .goodExit
    49                                  %include "./src/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer and install check for other DOS multiplex functions.
     2                              <1> ;Mainly to handle the DOS multiplexer, i.e. ah=12h. Three other 
     3                              <1> ; cases also handled as outlined below.
     4                              <1> ;------------------------------------------------------------------------
     5                              <1> ;Handle ah = 10h,11h,14h install check requests only (al=0).
     6                              <1> ; If al <> 0, return error, set CF and al = 1.
     7                              <1> ; For reference:
     8                              <1> ; ah = 10h, (SHARE)
     9                              <1> ;           Return: al = 0, not installed, ok to install
    10                              <1> ;                   al = 1, not installed, not ok to install
    11                              <1> ;                   al = -1, installed.
    12                              <1> ; ah = 11h, (REDIR)
    13                              <1> ; ah = 14h, (NLS)
    14                              <1> ;Any other value of ah simply falls through the IRETQ
    15                              <1> ;------------------------------------------------------------------------
    16                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    17                              <1> ; stack before the interrupt is called. This word is always read from the
    18                              <1> ; stack, but the stack is not rejiggled to remove it.
    19                              <1> 
    20                              <1> multiplexHdlr:          ;Int 2Fh, AH=12h, exposed internal functions
    21 00007DEF 80FC10              <1>     cmp ah, 10h ;Are we share?
    22 00007DF2 7411                <1>     je .installCheck
    23 00007DF4 80FC11              <1>     cmp ah, 11h ;Are we redir?
    24 00007DF7 740C                <1>     je .installCheck
    25 00007DF9 80FC12              <1>     cmp ah, 12h
    26 00007DFC 741E                <1>     je .goMplx
    27 00007DFE 80FC14              <1>     cmp ah, 14h ;Are we NLS?
    28 00007E01 7402                <1>     je .installCheck
    29 00007E03 48CF                <1>     iretq
    30                              <1> 
    31                              <1> .installCheck:
    32                              <1> ;Here if a share, redir or NLS request.
    33                              <1> ;All of these should be installed over us if installed.
    34                              <1> ;Thus we are not installed. Return not installed, if that is what the 
    35                              <1> ;request wants. (AL=0)
    36                              <1> ;If anything else requested, return error.
    37 00007E05 84C0                <1>     test al, al
    38 00007E07 7411                <1>     jz .exit
    39                              <1> .exitBad:
    40 00007E09 B801000000          <1>     mov eax, errInvFnc
    41 00007E0E C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    42 00007E15 804C241001          <1>     or byte [rsp + 8h*2], 1 ;Set CF
    43                              <1> .exit:
    44 00007E1A 48CF                <1>     iretq
    45                              <1> 
    46                              <1> .goMplx:
    47 00007E1C 3C30                <1>     cmp al, mDispTblL / 2
    48 00007E1E 73E9                <1>     jae .exitBad   ;If above or equal, exit
    49                              <1>     ;Rejiggle stack! 
    50                              <1> 
    51 00007E20 53                  <1>     push rbx    ;Storage for return from DOS ret addr
    52 00007E21 53                  <1>     push rbx    ;Storage for DOS function
    53 00007E22 53                  <1>     push rbx    ;Stores rbx value
    54 00007E23 488D1D2E000000      <1>     lea rbx, .retAddr
    55 00007E2A 48895C2410          <1>     mov qword [rsp + 2*8], rbx    ;Store ret addr from DOS routine
    56                              <1> 
    57 00007E2F 51                  <1>     push rcx
    58 00007E30 488D1DF787FFFF      <1>     lea rbx, qword mDispTbl   ;Get mplx displacement tbl
    59 00007E37 53                  <1>     push rbx
    60 00007E38 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    61 00007E3B D1E1                <1>     shl ecx, 1   ;multiply by 2
    62 00007E3D 48FFC3              <1>     inc rbx         ;Go past the first byte (length count)
    63 00007E40 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    64 00007E44 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    65 00007E45 4801CB              <1>     add rbx, rcx
    66 00007E48 59                  <1>     pop rcx
    67 00007E49 48895C2408          <1>     mov qword [rsp + 8], rbx
    68 00007E4E 5B                  <1>     pop rbx
    69 00007E4F 488B442428          <1>     mov rax, qword [rsp + 5*8]  ;Get the old stack pointer from the frame
    70 00007E54 488B00              <1>     mov rax, qword [rax]        ;Get the argument we pushed on the stack
    71                              <1>     return  ;Now we have no alignement requirements :D 
    13                              <2> %%_ret:
    14 00007E57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    72                              <1> 
    73                              <1> .retAddr:
    74 00007E58 53                  <1>     push rbx
    75 00007E59 9C                  <1>     pushfq
    76 00007E5A 5B                  <1>     pop rbx
    77 00007E5B 48895C2418          <1>     mov qword [rsp + 3*8], rbx
    78 00007E60 5B                  <1>     pop rbx
    79 00007E61 48CF                <1>     iretq
    80                              <1> 
    81                              <1> multiplexTest:
    82 00007E63 B0FF                <1>     mov al, -1
    83 00007E65 C3                  <1>     ret
    84                              <1> 
    85                              <1> getDosDataSeg:  ;Int 2Fh, AX=1203h
    86                              <1> ;Return: r8 = Dos Data Segment Pointer
    87 00007E66 4C8D05(00000000)    <1>     lea r8, dosDataArea
    88                              <1>     return
    13                              <2> %%_ret:
    14 00007E6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    89                              <1> 
    90                              <1> mpxOpen:   ;Int 2Fh, AX=1226h, Open File
    91                              <1> ;Input: cl = open mode
    92                              <1> ;       rdx -> Ptr to filename to open
    93                              <1> ;Output: ax = Error code/handle with CF indicating failure/success
    94 00007E6E 88C8                <1>     mov al, cl
    95 00007E70 E86AB7FFFF          <1>     call openFileHdl
    96                              <1>     return
    13                              <2> %%_ret:
    14 00007E75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    97                              <1> 
    98                              <1> mpxLseek:  ;Int 2Fh, AX=1228h, LSEEK
    99                              <1> ;Input:  
   100                              <1> ;   ebp = Low byte contains subfunction, in normal EP is provided by al
   101                              <1> ;   ebx = Handle to move (lower word only)
   102                              <1> ;   ecx = Number of bytes to move
   103                              <1> ;   edx = 0 (upper dword, reserved for now)
   104                              <1> ;Return:
   105                              <1> ;   eax = New pointer location
   106                              <1> ;   edx = 0
   107 00007E76 FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   108 00007E7C 488D05(211A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   109 00007E83 488905(7B040000)    <1>     mov qword [oldRSP], rax
   110 00007E8A 89E8                <1>     mov eax, ebp
   111 00007E8C E87AB9FFFF          <1>     call lseekHdl   ;Sets the values of our registers by how it exits
   112 00007E91 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   113                              <1>     return
    13                              <2> %%_ret:
    14 00007E97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> mpxIOCTL:  ;Int 2Fh, AX=122Bh
   116                              <1> ;IO is done exactly as documented by DOS except al is passed in 
   117                              <1> ; low byte of bp.
   118 00007E98 FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   119 00007E9E 488D05(211A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   120 00007EA5 488905(7B040000)    <1>     mov qword [oldRSP], rax
   121 00007EAC 89E8                <1>     mov eax, ebp
   122 00007EAE E8D4D2FFFF          <1>     call ioctrl   ;Sets the values of our registers by how it exits
   123 00007EB3 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   124                              <1>     return  
    13                              <2> %%_ret:
    14 00007EB9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> mpxChecksum:
   127                              <1> ;Computes the checksum of a number of bytes in memory
   128                              <1> ;Input: edx = Start value for checksum
   129                              <1> ;       ecx = number of bytes to sum
   130                              <1> ;       rsi -> Ptr to byte array to perform sum on
   131 00007EBA 31C0                <1>     xor eax, eax
   132 00007EBC 67E307              <1>     jecxz .exit
   133                              <1> .lp:
   134 00007EBF AC                  <1>     lodsb
   135 00007EC0 01C2                <1>     add edx, eax
   136 00007EC2 FFC9                <1>     dec ecx
   137 00007EC4 75F9                <1>     jnz .lp
   138                              <1> .exit:
   139                              <1>     return
    13                              <2> %%_ret:
    14 00007EC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   140                              <1> mpxSum: ;Could use in readDateTimeRecord (two places)
   141                              <1> ;Sums the values in a number of bytes in memory
   142                              <1> ;Input: rsi -> Byte array to sum values of
   143                              <1> ;       edx = Value limit (for the sum)
   144                              <1> ;       ecx = 0
   145 00007EC7 31C0                <1>     xor eax, eax
   146                              <1> .lp:
   147 00007EC9 AC                  <1>     lodsb
   148 00007ECA 39C2                <1>     cmp edx, eax
   149                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007ECC 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007ECE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   150 00007ECF 29C2                <1>     sub edx, eax
   151 00007ED1 FFC1                <1>     inc ecx
   152 00007ED3 EBF4                <1>     jmp short .lp
    50                                  %include "./src/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 00007ED5 B801000000          <1>     mov eax, errInvFnc
     6 00007EDA 668905(0B040000)    <1>     mov word [errorExCde], ax
     7 00007EE1 F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 00007EE2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 00007EE3 E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 00007EE8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 00007EE9 F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 00007EEA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 00007EEB FF15(C7000000)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 00007EF1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 00007EF2 FF15(CF000000)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 00007EF8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 00007EF9 0FB71D(1F000000)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 00007F00 53                  <1>     push rbx
    34 00007F01 FF15(FF000000)      <1>     call qword [checkFileLockShare]
    35 00007F07 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007F08 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007F0A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    37 00007F0B E806000000          <1>     call shareRetryCountdown
    38 00007F10 FFCB                <1>     dec ebx
    39 00007F12 75EC                <1>     jnz .mainLoop
    40 00007F14 F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 00007F15 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 00007F16 F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007F1D 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007F1F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    48 00007F20 51                  <1>     push rcx
    49 00007F21 0FB70D(21000000)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 00007F28 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 00007F2B 51                  <1>     push rcx
    53 00007F2C 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 00007F2E 66FFC9              <1>     dec cx
    56 00007F31 75FB                <1>     jnz .mainLoop
    57 00007F33 59                  <1>     pop rcx
    58 00007F34 FFC9                <1>     dec ecx
    59 00007F36 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 00007F38 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00007F39 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 00007F3A 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
    67 00007F40 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 00007F42 50                  <1>     push rax
    69 00007F43 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 00007F47 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 00007F4C 58                  <1>     pop rax
    72 00007F4D 7508                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 00007F4F E872000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007F54 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007F56 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    76                              <1> .notInCompatMode:
    77 00007F57 B820000000          <1>     mov eax, errShrVio
    78 00007F5C F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 00007F5D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resources within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87                              <1> ;Output: rdi -> Current SFT!!
    88 00007F5E 51                  <1>     push rcx
    89                              <1> .reloadCounter:
    90 00007F5F 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    91                              <1> .keepLooping:
    92 00007F66 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
    93 00007F6D 31C0                <1>     xor eax, eax
    94 00007F6F 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    95 00007F75 51                  <1>     push rcx
    96 00007F76 E870FFFFFF          <1>     call openShareCallWrapper
    97 00007F7B 59                  <1>     pop rcx
    98 00007F7C 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    99 00007F7E E893FFFFFF          <1>     call shareRetryCountdown
   100 00007F83 FFC9                <1>     dec ecx
   101 00007F85 75DF                <1>     jnz .keepLooping
   102 00007F87 E842000000          <1>     call shareCriticalError
   103 00007F8C 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   104                              <1> .exit:
   105 00007F8E 59                  <1>     pop rcx
   106                              <1>     return
    13                              <2> %%_ret:
    14 00007F8F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> 
   108                              <1> shareCheckWriteLockViolation:
   109 00007F90 C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   110 00007F97 EB07                <1>     jmp short shareCheckReadLockViolation.common
   111                              <1> shareCheckReadLockViolation:
   112 00007F99 C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   113                              <1> .common:
   114                              <1> ;Input:
   115                              <1> ;rdi -> SFT for the file we are reading
   116 00007FA0 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   117 00007FA6 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   118 00007FA8 50                  <1>     push rax
   119 00007FA9 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   120 00007FAD 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   121 00007FB2 58                  <1>     pop rax
   122 00007FB3 7508                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   123                              <1> .fcbQuirk:
   124 00007FB5 E80C000000          <1>     call shareLockViolationCriticalError
   125                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007FBA 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007FBC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   126                              <1> .notInCompatMode:
   127 00007FBD 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   128 00007FBF B821000000          <1>     mov eax, errLokVio
   129 00007FC4 F9                  <1>     stc ;Set the flag for error
   130                              <1>     return
    13                              <2> %%_ret:
    14 00007FC5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> shareLockViolationCriticalError:
   133                              <1> ;This does NOT force rwFlag to 0 and signals a lock violation
   134 00007FC6 57                  <1>     push rdi
   135 00007FC7 B821000000          <1>     mov eax, errLokVio
   136 00007FCC EB08                <1>     jmp short shareCriticalError.common
   137                              <1> shareCriticalError: ;Int 2Fh AX=120Ah
   138                              <1> ;Used for share Read requests
   139                              <1> ;Input: eax = Error code
   140 00007FCE 57                  <1>     push rdi
   141 00007FCF C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Default to read
   142                              <1> .common:
   143 00007FD6 C605(68040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   144 00007FDD 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] 
   145 00007FE4 31FF                <1>     xor edi, edi   ;Indicate that this was due to share
   146 00007FE6 E8BBE7FFFF          <1>     call diskDevErr
   147 00007FEB 5F                  <1>     pop rdi
   148 00007FEC 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   149                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007FEE 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007FF0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   150 00007FF1 F9                  <1>     stc
   151                              <1>     return
    13                              <2> %%_ret:
    14 00007FF2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    51                                  
    52                                  ;=========================END OF DOS MODULE==========================
    52          ------------------       info: assembly required 1+16+2 passes

