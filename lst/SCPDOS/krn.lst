     1                                  [DEFAULT REL]
     2                                  BITS 64
     3                                  
     4                                  %include "./src/Include/dosMacro.mac"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------------------------------
     3                              <1> ;Generic Macros file
     4                              <1> ;The following instruction extensions allow to conditionally return
     5                              <1> ;The idea was borrowed from the DOS Source Code
     6                              <1> ;
     7                              <1> ;-------------------------------------------------------------------------------
     8                              <1> 
     9                              <1> ;-------------------------------------------------------------------------------
    10                              <1> ;These macros are live and must not be touched
    11                              <1> ;-------------------------------------------------------------------------------
    12                              <1> %macro return 0
    13                              <1> %%_ret:
    14                              <1>     ret
    15                              <1> %assign retOff %%_ret-$$  ;Get offset into segment of %%_ret
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro cret 1
    19                              <1> %%_base:
    20                              <1> %assign baseVar %%_base-$$ ;Get offset into segment of %%_base
    21                              <1> ;    %ifdef retOff
    22                              <1> ;    %if (baseVar - retOff <= 126) && (baseVar > retOff)
    23                              <1> ;    %ifdef currSegVBase
    24                              <1> ;    j%+1 short (retOff+currSegVBase)
    25                              <1> ;    %else
    26                              <1> ;    j%+1 short retOff
    27                              <1> ;    %endif  ;End ifdef currSegVBase
    28                              <1> ;    %else 
    29                              <1> ;    j%-1 short %%a
    30                              <1> ;    return
    31                              <1> ;%%a:
    32                              <1> ;    %endif  ;End the distance measurement if
    33                              <1> ;    %else   
    34                              <1>     j%-1 short %%a
    35                              <1>     return
    36                              <1> %%a:
    37                              <1> ;    %endif  ;End ifdef retoff
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro retz 0
    41                              <1> cret z
    42                              <1> %endmacro
    43                              <1> 
    44                              <1> %macro retnz 0
    45                              <1> cret nz
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> %macro rete 0
    49                              <1> cret e
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro retne 0
    53                              <1> cret ne
    54                              <1> %endmacro
    55                              <1> 
    56                              <1> %macro retc 0
    57                              <1> cret c
    58                              <1> %endmacro
    59                              <1> 
    60                              <1> %macro retnc 0
    61                              <1> cret nc
    62                              <1> %endmacro
    63                              <1> 
    64                              <1> %macro retb 0
    65                              <1> cret b
    66                              <1> %endmacro
    67                              <1> 
    68                              <1> %macro retnb 0
    69                              <1> cret nb
    70                              <1> %endmacro
    71                              <1> 
    72                              <1> %macro reta 0
    73                              <1> cret a
    74                              <1> %endmacro
    75                              <1> 
    76                              <1> %macro retna 0
    77                              <1> cret na
    78                              <1> %endmacro
    79                              <1> 
    80                              <1> %macro rets 0
    81                              <1> cret s
    82                              <1> %endmacro
    83                              <1> 
    84                              <1> %macro retns 0
    85                              <1> cret ns
    86                              <1> %endmacro
    87                              <1> 
    88                              <1> %macro breakpoint 0
    89                              <1> xchg bx, bx
    90                              <1> %endmacro
     5                                  %include "./src/Include/drvStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous SCP/DOS      ;
     4                              <1> ; device driver related structures.                     ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> struc drvHdr  ;Device Driver Header for character and block devices
     8                              <1> 
     9 00000000 ????????????????    <1>     .nxtPtr dq ?  ;Pointer to the next driver header, -1 if at the end
    10 00000008 ????                <1>     .attrib dw ?  ;Attribute Word
    11 0000000A ????????????????    <1>     .strPtr dq ?  ;Strategy Entry Pointer
    12 00000012 ????????????????    <1>     .intPtr dq ?  ;Interrupt Entry Pointer
    13                              <1>     .drvUnt:        ;Number of units pointer
    14 0000001A ????????????????    <1>     .drvNam db 8 dup (?)  ;Driver name (Char) or Number of units byte (Block)
    15                              <1> 
    16                              <1> endstruc
    17                              <1> 
    18                              <1> ;Command Code equates
    19                              <1>     drvINIT         equ 0
    20                              <1>     drvMEDCHK       equ 1
    21                              <1>     drvBUILDBPB     equ 2
    22                              <1>     drvIOCTLREAD    equ 3
    23                              <1>     drvREAD         equ 4
    24                              <1>     drvNONDESTREAD  equ 5
    25                              <1>     drvINSTATUS     equ 6
    26                              <1>     drvFLUSHINBUF   equ 7
    27                              <1>     drvWRITE        equ 8
    28                              <1>     drvWRITEVERIFY  equ 9
    29                              <1>     drvOUTSTATUS    equ 10
    30                              <1>     drvFLUSHOUTBUF  equ 11
    31                              <1>     drvIOCTLWRITE   equ 12
    32                              <1>     drvOPEN         equ 13
    33                              <1>     drvCLOSE        equ 14
    34                              <1>     drvREMMEDCHECK  equ 15
    35                              <1>     drvOUTTILBUSY   equ 16
    36                              <1>     drvIOCTL        equ 19
    37                              <1>     drvGETDRVMAP    equ 23
    38                              <1>     drvSETDRVMAP    equ 24
    39                              <1>     drvMAXCMD       equ 24
    40                              <1> ;Driver Error equates 
    41                              <1>     drvWPErr        equ 0   ;Write Protect Violation
    42                              <1>     drvBadUnit      equ 1   ;Unknown unit
    43                              <1>     drvNotReady     equ 2   ;Device not ready
    44                              <1>     drvBadCmd       equ 3   ;Unknown command
    45                              <1>     drvCRCErr       equ 4   ;CRC Error
    46                              <1>     drvBadDrvReq    equ 5   ;Bad drive request structure length
    47                              <1>     drvBadSeek      equ 6   ;Seek error
    48                              <1>     drvBadMed       equ 7   ;Unknown media
    49                              <1>     drvSecNotFnd    equ 8   ;Sector not found
    50                              <1>     drvNoPaper      equ 9   ;Printer out of paper
    51                              <1>     drvWriteFault   equ 10  ;Write Fault
    52                              <1>     drvReadFault    equ 11  ;Read Fault
    53                              <1>     drvGenFault     equ 12  ;General Fault
    54                              <1>     drvBadDskChnge  equ 15  ;Invalid disk change
    55                              <1> 
    56                              <1> ;Driver status word status bit meanings
    57                              <1>     drvErrStatus    equ 8000h  
    58                              <1>     drvDonStatus    equ 0100h
    59                              <1>     drvBsyStatus    equ 0200h
    60                              <1> 
    61                              <1> ;Driver Attribute Word bit meanings
    62                              <1>     devDrvConIn     equ 1h  ;If set, device is CON input
    63                              <1>     devDrvConOut    equ 2h  ;If set, device is CON output
    64                              <1>     devDrvNulDev    equ 4h  ;If set, device is NULL device
    65                              <1>     devDrvClockDev  equ 8h  ;If set, device is CLOCK device
    66                              <1>     devDrvFastOut   equ 10h ;If set, device supports Int 29h
    67                              <1>     devDrvIOCTL     equ 40h ;If set, IOCTL and GET/SET suported
    68                              <1>     devDrvHdlCTL    equ 800h ;If set, Open, Close and Rem media supported
    69                              <1>     devDrvNotIBM    equ 2000h ;If set, buffer in Build BPB is scratch space
    70                              <1>     devDrvOutToBsy  equ 2000h ;If set, char dev supports output until busy
    71                              <1>     devDrvIOCTLRW   equ 4000h ;If set, IOCTL Read/Write supported
    72                              <1>     devDrvChar      equ 8000h ;If set, Char device
    73                              <1> ;Bit 0 1=console input
    74                              <1> ;    1 1=console output (character devices)
    75                              <1> ;    2 1=NUL device
    76                              <1> ;    3 1=CLOCK device
    77                              <1> ;    4 1=Int 29 output (CON)
    78                              <1> ;    6 1=extended functions supported (13,17,18) (3.2+)
    79                              <1> ;    7 1=query IOCTL function supported (19) (5.0+)
    80                              <1> ;   11 1=open/close/removable media supported (3.0+)
    81                              <1> ;   13 1=output until busy supported (character devices) (3.0+)
    82                              <1> ;      1=media descriptor in FAT required (block devices)
    83                              <1> ;   14 1=IOCTL supported
    84                              <1> ;   15 0=block device
    85                              <1> ;      1=character device
    86                              <1> 
    87                              <1> ;Driver structures
    88                              <1> 
    89                              <1> %macro drvReqPktM 0 ;Driver Request Header Macro
    90                              <1> 
    91                              <1>     .hdrlen db ?  ;Length of the request header
    92                              <1>     .unitnm db ?  ;Unit number, meaningless for character devs
    93                              <1>     .cmdcde db ?  ;Command code
    94                              <1>     .status dw ?  ;Status word
    95                              <1>     .devptr dq ?  ;Device queue pointer field, reserved for future use
    96                              <1> 
    97                              <1> %endmacro
    98                              <1> 
    99                              <1> struc drvReqPkt
   100                              <1>     drvReqPktM
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   101                              <1> endstruc
   102                              <1> 
   103                              <1> struc initReqPkt  ;Init Request Packet
   104                              <1> 
   105                              <1>     drvReqPktM   ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   106 0000000D ??                  <1>     .numunt db ?  ;Number of logical units (Block only, 0 for char)
   107 0000000E ????????????????    <1>     .endptr dq ?  ;Pointer to first free byte after driver
   108 00000016 ????????????????    <1>     .optptr dq ?  ;Ptr to BPB array (blkdev) or cmdline args
   109 0000001E ??                  <1>     .drvnum db ?  ;First Drive number
   110                              <1> 
   111                              <1> endstruc
   112                              <1> 
   113                              <1> struc mediaCheckReqPkt ;Media Check Request Packet
   114                              <1> 
   115                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   116 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   117 0000000E ??                  <1>     .medret db ?  ;Return byte (Has media been changed?)
   118 0000000F ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field
   119                              <1> 
   120                              <1> endstruc
   121                              <1> 
   122                              <1> struc bpbBuildReqPkt  ;Build BPB Request Packet
   123                              <1> 
   124                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   125 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   126 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   127 00000016 ????????????????    <1>     .bpbptr dq ?  ;Pointer to the BPB
   128                              <1> 
   129                              <1> endstruc
   130                              <1> 
   131                              <1> struc ioReqPkt   ;IO Request Packet
   132                              <1> 
   133                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   134 0000000D ??                  <1>     .medesc db ?  ;DOS media descriptor
   135 0000000E ????????????????    <1>     .bufptr dq ?  ;Transfer buffer
   136 00000016 ????????            <1>     .tfrlen dd ?  ;Number of Sectors/bytes to transfer
   137 0000001A ????????????????    <1>     .strtsc dq ?  ;Starting sector for transfer
   138 00000022 ????????????????    <1>     .desptr dq ?  ;Pointer to a valid volume id field if error
   139                              <1> 
   140                              <1> endstruc
   141                              <1> 
   142                              <1> struc ndInNoWaitPkt    ;Nondestructive Input No Wait Request Packet
   143                              <1>     
   144                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   145 0000000D ??                  <1>     .retbyt db ?  ;Byte read non destructively
   146                              <1> 
   147                              <1> endstruc
   148                              <1> 
   149                              <1> struc statusReqPkt   ;Status Request Packet
   150                              <1> 
   151                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   152                              <1> 
   153                              <1> endstruc
   154                              <1> 
   155                              <1> struc flushReqPkt ;Flush Request Packet, terminate all pending requests
   156                              <1> 
   157                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   158                              <1>      
   159                              <1> endstruc
   160                              <1> 
   161                              <1> struc openReqPkt ;Open Device Request Packet
   162                              <1> 
   163                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   164                              <1>      
   165                              <1> endstruc
   166                              <1> 
   167                              <1> struc closeReqPkt ;Close Device Request Packet
   168                              <1> 
   169                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   170                              <1>      
   171                              <1> endstruc
   172                              <1> 
   173                              <1> struc remMediaReqPkt ;Removeable Media Request Packet
   174                              <1> 
   175                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   176                              <1>      
   177                              <1> endstruc
   178                              <1> 
   179                              <1> struc ioctlReqPkt    ;Generic IOCTL Request Packet
   180                              <1> 
   181                              <1>     drvReqPktM    ;Common Driver Header Macro  
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   182 0000000D ??                  <1>     .majfun db ?  ;Major function number
   183 0000000E ??                  <1>     .minfun db ?  ;Minor function number
   184 0000000F ????????????????    <1>     .rsival dq ?  ;Contents of RSI
   185 00000017 ????????????????    <1>     .rdival dq ?  ;Contents of RDI
   186 0000001F ????????????????    <1>     .ctlptr dq ?  ;Pointer to Generic IOCTL Request Packet
   187                              <1> 
   188                              <1> endstruc
   189                              <1> 
   190                              <1> struc getDevReqPkt ;Get Logical Device Request Packet
   191                              <1>     
   192                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   193                              <1> 
   194                              <1> endstruc
   195                              <1> 
   196                              <1> struc setDevReqPkt ;Set Logical Device Request Packet
   197                              <1>     
   198                              <1>     drvReqPktM    ;Common Driver Header Macro
    90                              <2> 
    91 00000000 ??                  <2>  .hdrlen db ?
    92 00000001 ??                  <2>  .unitnm db ?
    93 00000002 ??                  <2>  .cmdcde db ?
    94 00000003 ????                <2>  .status dw ?
    95 00000005 ????????????????    <2>  .devptr dq ?
    96                              <2> 
   199                              <1> 
   200                              <1> endstruc
   201                              <1> ;IOCTL structs
   202                              <1> 
   203                              <1> struc lbaParamsBlock
   204 00000000 ??                  <1>     .bSize          db ?
   205 00000001 ??                  <1>     .bSpecFuncs     db ?    ;0 = Update drive info from medium and return that
   206                              <1>                             ;1 = Get current saved drive info w/o updating
   207                              <1>                             ;2 = Get physical parameters of the medium
   208                              <1>                             ;Only meaningful on get. Set must have this as 0
   209 00000002 ????                <1>     .wDevFlgs       dw ?    ;Only bits 0 and 1 are xmitted/read
   210 00000004 ????                <1>     .wFSType        dw ?    ;If one, it is a FAT type. Only valid on getlba
   211                              <1>                             ; If one, can use CHS functions with returned vals
   212 00000006 ????                <1>     .wRes           dw ?    ;Reserved word
   213 00000008 ????????????????    <1>     .qSectorSize    dq ?    ;Only the lower word is valid here
   214 00000010 ????????????????    <1>     .qNumSectors    dq ?    ;Only the lower dword is valid here
   215                              <1> ;The below is the absolute start sector of the partition. It is the 
   216                              <1> ; partition at which to find the BPB.
   217 00000018 ????????????????    <1>     .qStartSector   dq ?    ;Only the lower dword is valid here.
   218                              <1> endstruc
   219                              <1> 
   220                              <1> %macro lbIOCmnM 0   ;IOCTL LBA request common portion macro
   221                              <1>     .size           db ?
   222                              <1>     .numSectors     db ?  ;# sectors to act on. Returns sectors acted on
   223                              <1>     .res            db 6 dup (?)
   224                              <1>     .startSector    dq ?  ;Sector to start action on
   225                              <1> %endmacro
   226                              <1> 
   227                              <1> struc lbaIOBlock
   228                              <1>     lbIOCmnM
   221 00000000 ??                  <2>  .size db ?
   222 00000001 ??                  <2>  .numSectors db ?
   223 00000002 ????????????        <2>  .res db 6 dup (?)
   224 00000008 ????????????????    <2>  .startSector dq ?
   229 00000010 ????????????????    <1>     .xferBuffer     dq ?  ;Transfer buffer for data
   230                              <1> endstruc
   231                              <1> 
   232                              <1> struc lbaFormatBlock
   233                              <1>     lbIOCmnM
   221 00000000 ??                  <2>  .size db ?
   222 00000001 ??                  <2>  .numSectors db ?
   223 00000002 ????????????        <2>  .res db 6 dup (?)
   224 00000008 ????????????????    <2>  .startSector dq ?
   234                              <1> endstruc
   235                              <1> 
   236                              <1> struc chsParamsBlock
   237 00000000 ??                  <1>     .bSpecFuncs db ?    ;
   238 00000001 ??                  <1>     .bDevType   db ?    ;5 if fixed, 7 otherwise
   239 00000002 ????                <1>     .wDevFlgs   dw ?    ;Only bits 0 and 1 are xmitted/read
   240 00000004 ????                <1>     .wNumCyl    dw ?
   241 00000006 ??                  <1>     .bMedTyp    db ?    ;Perma 0 for us, meaningless. Reserved.
   242 00000007 <res 35h>           <1>     .deviceBPB  db 53 dup (?)   ;Full length with reserved bytes of BPB32
   243                              <1>     .TrackLayout:
   244                              <1> endstruc
   245                              <1> 
   246                              <1> ;Used for get and set params. Refer to DOS docs for meaning of bit.
   247                              <1> specFuncBPB equ 1<<0    ;Does BPB stuff
   248                              <1> ;Only used in setparams requests. Ignored for getparams 
   249                              <1> specFuncTrk equ 1<<1    ;Set if just track layout cpy. Clear if set all.
   250                              <1> specFuncSec equ 1<<2    ;Set if all sectors samze size. Clear if not.
   251                              <1> 
   252                              <1> 
   253                              <1> struc chsIOBlock
   254 00000000 ??                  <1>     .bSpecFuncs     db ?
   255 00000001 ????                <1>     .wStartHead     dw ?
   256 00000003 ????                <1>     .wStartCyl      dw ?    ;Zero based.
   257 00000005 ????                <1>     .wStartSector   dw ?    ;Zero based.
   258 00000007 ????                <1>     .wNumSectors    dw ?
   259 00000009 ????????????????    <1>     .pXferBuffer    dq ?
   260                              <1> endstruc
   261                              <1> 
   262                              <1> struc chsFormatBlock
   263 00000000 ??                  <1>     .bSpecFuncs db ?
   264 00000001 ????                <1>     .wStartHead dw ?
   265 00000003 ????                <1>     .wStartCyl  dw ?        ;Zero based.
   266                              <1> endstruc
   267                              <1> 
   268                              <1> struc accFlgBlk
   269 00000000 ??                  <1>     .bSpecFuncs db ?    ;Must be 0
   270 00000001 ??                  <1>     .bAccMode   db ?    ;Set if access allowed. Clear if not.
   271                              <1> endstruc
   272                              <1> 
   273                              <1> struc idParamBlk
   274 00000000 ????                <1>     .wCallLvl   dw ?    ;Should be zero
   275 00000002 ????????            <1>     .volId      dd ?    ;Volume Id
   276 00000006 <res Bh>            <1>     .volLab     db 11 dup (?)   ;Volume label string
   277 00000011 ????????????????    <1>     .filSysType db 8 dup (?)    ;File system type string
   278                              <1> endstruc
     6                                  %include "./src/Include/fatStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous FAT driver   ;
     4                              <1> ; structures. exFAT will have it's own files at a later ;
     5                              <1> ; stage.                                                ;
     6                              <1> ;-------------------------------------------------------;
     7                              <1> ;-------------------------------------------------------;
     8                              <1> ;-------------------------------------------------------;
     9                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    10                              <1> ;   REMEMBER, CLUSTER NUMBERS START AT 2!               ;
    11                              <1> ;   THE FIRST DATA CLUSTER ON A DISK IS CLUSTER 2!!!    ;
    12                              <1> ;   ON FAT12/16, A CLUSTER NUMBER OF 0 MEANS ROOT DIR!  ;
    13                              <1> ;   ON FAT32, A CLUSTER NUMBER OF 0 ALIASES THE FIRST   ;
    14                              <1> ;       CLUSTER OF THE ROOT DIRECTORY!!                 ;
    15                              <1> ;  IMPORTANT!!! IMPORTANT!!! IMPORTANT!!! IMPORTANT!!!  ;
    16                              <1> ;-------------------------------------------------------;
    17                              <1> 
    18                              <1> struc oemHeader
    19 00000000 ??????              <1>     .jump       db 3 dup (?)    ;Jump instruction
    20 00000003 ????????????????    <1>     .oemString  db 8 dup (?)    ;OEM string
    21                              <1> endstruc
    22                              <1> 
    23                              <1> struc bpb          ;FAT 12 and 16 BPB
    24 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    25 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    26 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors, in volume
    27 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    28 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of 32 byte entries in Root directory
    29 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    30 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    31 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT
    32 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    33 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    34 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors, preceeding volume start
    35 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    36                              <1> endstruc
    37                              <1> 
    38                              <1> struc extBs
    39                              <1> ;Extended bootsector structure. If present, comes immediately after 
    40                              <1> ; BPB in bootsector
    41 00000000 ??                  <1>     .drvNum     db ?  ;Logical drive number (00h or 80h)
    42 00000001 ??                  <1>     .reserved1  db ?  ;Reserved byte
    43 00000002 ??                  <1>     .bootSig    db ?  ;Extended boot signature
    44 00000003 ????????            <1>     .volId      dd ?  ;Volume serial number
    45 00000007 <res Bh>            <1>     .volLab     db 11 dup (?) ;Volume label string
    46 00000012 ????????????????    <1>     .filSysType db 8 dup (?)  ;File system type string
    47                              <1> endstruc
    48                              <1> extBsSig    equ 29h
    49                              <1> 
    50                              <1> struc bpb32       ;FAT 32 BPB
    51 00000000 ????                <1>     .bytsPerSec dw ?  ;Bytes per sector
    52 00000002 ??                  <1>     .secPerClus db ?  ;Sectors per cluster
    53 00000003 ????                <1>     .revdSecCnt dw ?  ;Number of reserved sectors
    54 00000005 ??                  <1>     .numFATs    db ?  ;Number of FATs on media
    55 00000006 ????                <1>     .rootEntCnt dw ?  ;Number of entries in Root directory
    56 00000008 ????                <1>     .totSec16   dw ?  ;Number of sectors on medium
    57 0000000A ??                  <1>     .media      db ?  ;Media descriptor byte
    58 0000000B ????                <1>     .FATsz16    dw ?  ;Number of sectors per FAT, must be 0 for FAT 32
    59 0000000D ????                <1>     .secPerTrk  dw ?  ;Number of sectors per "track"
    60 0000000F ????                <1>     .numHeads   dw ?  ;Number of read "heads"
    61 00000011 ????????            <1>     .hiddSec    dd ?  ;Number of hidden sectors
    62 00000015 ????????            <1>     .totSec32   dd ?  ;32 bit count of sectors
    63 00000019 ????????            <1>     .FATsz32    dd ?  ;32 bit count of sectors occupied by one FAT
    64 0000001D ????                <1>     .extFlags   dw ?  ;Extended Flags word
    65 0000001F ????                <1>     .FSver      dw ?  ;File system version word, must be 0
    66 00000021 ????????            <1>     .RootClus   dd ?  ;First Cluster of Root Directory
    67 00000025 ????                <1>     .FSinfo     dw ?  ;Sector number of FSINFO structure, usually 1
    68 00000027 ????                <1>     .BkBootSec  dw ?  ;Backup Boot sector, either 0 or 6
    69 00000029 <res Ch>            <1>     .reserved   db 12 dup (?) ;Reserved 12 bytes
    70                              <1> endstruc
    71                              <1> 
    72                              <1> struc FSInfo
    73 00000000 ????????            <1>     .leadSig    dd ? ;Leading Signature, should be 041615252h
    74 00000004 <res 1E0h>          <1>     .reserved1  db 480 dup (?)
    75 000001E4 ????????            <1>     .strucSig   dd ?  ;Should be 061417272h
    76 000001E8 ????????            <1>     .freeCount  dd ?  ;Contains the last known free cluster on volume
    77 000001EC ????????            <1>     .nextFree   dd ?  ;Contains the first known free cluster on volume
    78 000001F0 <res Ch>            <1>     .reserved2  db 12 dup (?) ;Should be 0
    79 000001FC ????????            <1>     .trailSig   dd ?  ;Should be 0AA550000h
    80                              <1> endstruc
    81                              <1> 
    82                              <1> fsInfoSig1  equ 041615252h
    83                              <1> fsInfoSig2  equ 061417272h
    84                              <1> fsInfoSig3  equ 0AA550000h
    85                              <1> 
    86                              <1> struc mbr
    87 00000000 <res 1B8h>          <1>     .bsCode     db 440 dup (?)
    88 000001B8 ????????            <1>     .diskID     dd ?
    89 000001BC ????                <1>     .reserved   dw ?
    90 000001BE <res 10h>           <1>     .mbrEntry1  db 16 dup (?)
    91 000001CE <res 10h>           <1>     .mbrEntry2  db 16 dup (?)
    92 000001DE <res 10h>           <1>     .mbrEntry3  db 16 dup (?)
    93 000001EE <res 10h>           <1>     .mbrEntry4  db 16 dup (?)
    94 000001FE ????                <1>     .mbrSig     dw ?
    95                              <1> endstruc
    96                              <1> 
    97                              <1> struc ebr   ;A special type of MBR
    98 00000000 <res 1BEh>          <1>     .bsCode     db 446 dup (?)    ;Basic 16-bit code to error if launched into
    99 000001BE <res 10h>           <1>     .ebrVolHdr  db 16 dup (?) ;Information about the volume itself
   100 000001CE <res 10h>           <1>     .ebrLinkHdr db 16 dup (?) ;Link ptr to next logical volume in ebr
   101 000001DE <res 20h>           <1>     .reserved   db 32 dup (?) ;Reserved
   102 000001FE ????                <1>     .mbrSig     dw ?
   103                              <1> endstruc
   104                              <1> 
   105                              <1> struc mbrEntry
   106 00000000 ??                  <1>     .ptnAtrib   db ?  ;80h = active
   107 00000001 ??????              <1>     .chsStart   db 3 dup (?)  ;Ignore practically
   108 00000004 ??                  <1>     .ptnType    db ?  ;This being 00 means free
   109 00000005 ??????              <1>     .chsEnd     db 3 dup (?)  ;Ignore
   110 00000008 ????????            <1>     .lbaStart   dd ?  ;Start of partition in 32 bit LBA
   111 0000000C ????????            <1>     .numSectors dd ?  ;Number of sectors in partition
   112                              <1> endstruc
   113                              <1> 
   114                              <1> struc fatDirEntry
   115 00000000 <res Bh>            <1>     .name       db 11 dup (?) ;8.3 File Name w/o fullstop
   116 0000000B ??                  <1>     .attribute  db ?  ;Usual attributes
   117 0000000C ??                  <1>     .ntRes      db ?  ;Reserved 0
   118 0000000D ??                  <1>     .crtTimeT   db ?  ;Count of tenths of a second of file creation time <=199
   119 0000000E ????                <1>     .crtTime    dw ?  ;Creation time, granularity of 2 seconds
   120 00000010 ????                <1>     .crtDate    dw ?  ;Creation date
   121 00000012 ????                <1>     .lastAccDat dw ?  ;Last Read/Write date, not 100% supported (consider later)
   122 00000014 ????                <1>     .fstClusHi  dw ?  ;Hi word of 1st data cluster for file/dir, 0 on FAT12/16
   123 00000016 ????                <1>     .wrtTime    dw ?  ;Last modification (write) time
   124 00000018 ????                <1>     .wrtDate    dw ?  ;Last modification (write) date
   125 0000001A ????                <1>     .fstClusLo  dw ?  ;Lo word of 1st data cluster for file/dir
   126 0000001C ????????            <1>     .fileSize   dd ?  ;32-bit quantity with size of file described by entry
   127                              <1> endstruc
   128                              <1> ;Directory attribute equates
   129                              <1>     dirReadOnly     equ 01h
   130                              <1>     dirHidden       equ 02h
   131                              <1>     dirSystem       equ 04h
   132                              <1>     dirVolumeID     equ 08h
   133                              <1>     dirDirectory    equ 10h
   134                              <1>     dirArchive      equ 20h
   135                              <1>     dirCharDev      equ 40h ;Never written to disk, used to represent a Char Dev
   136                              <1>     dirLongName     equ dirReadOnly | dirHidden | dirSystem | dirVolumeID
   137                              <1>     ;If any of the three bits are set, then ALL three bits are set
   138                              <1>     ; in addition to whatever the user passed to search for.
   139                              <1>     dirInclusive    equ dirHidden | dirSystem | dirDirectory
   140                              <1>     dirIncFiles     equ dirHidden | dirSystem
   141                              <1> 
   142                              <1> struc bpbEx   ;exFAT BPB, SIZE: 120 bytes
   143                              <1> 
   144                              <1>     ;.jmpBoot                db 3 dup (?)
   145                              <1>     ;.oemName                db 8 dup (?)  ;OEM name
   146                              <1> ;BPB starts here
   147 00000000 <res 35h>           <1>     .MustBeZero             db 53 dup (?) ;Must be 0, 53 bytes
   148 00000035 ????????????????    <1>     .partitionOffset        dq ?  ;in sectors, 0 means ignore this field
   149 0000003D ????????????????    <1>     .volumeLength           dq ?  ;Volume Length in sectors
   150 00000045 ????????            <1>     .FAToffset              dd ?  ;Volume rel offset of first FAT, in sectors
   151 00000049 ????????            <1>     .FATlength              dd ?  ;FAT length, in sectors
   152 0000004D ????????            <1>     .clusterHeapOffset      dd ?  ;Start of data area, in sectors
   153 00000051 ????????            <1>     .clusterCount           dd ?  ;Number of clusters on medium
   154 00000055 ????????            <1>     .firstClusterOfRootDir  dd ?  ;First Cluster of Root Directory, min 2
   155 00000059 ????????            <1>     .volumeSerialNum        dd ?  ;Volume Serial Number
   156 0000005D ????                <1>     .FSrevision             dw ?  ;Should be 0001 (v1.00)
   157 0000005F ????                <1>     .volumeFlags            dw ?  ;Volume Flags, refer to documentation
   158 00000061 ??                  <1>     .bytesPerSectorShift    db ?  ;min 9 (512 bps), max 12 (4096 bps)
   159 00000062 ??                  <1>     .sectorsPerClusterShift db ?  ;Result of log_2(N) for N=sec per clus
   160 00000063 ??                  <1>     .numberOfFATs           db ?  ;Number of FATs, only 1 or 2
   161 00000064 ??                  <1>     .driveSelect            db ?  ;Drive Select, 0 or 80h (Int 13h)
   162 00000065 ??                  <1>     .percentInUse           db ?  ;Rounded down. FFh means unknown
   163 00000066 ??????????????      <1>     .reserved               db 7 dup (?)  ;Reserved for alignment
   164                              <1> 
   165                              <1> endstruc
     7                                  %include "./src/Include/fcbStruc.inc"
     1                              <1> ;FCB related structures
     2                              <1> 
     3                              <1> ;Note: If record size > 64, high byte of randRecrd is ignored.
     4                              <1> ;This field also used for random read/write ops to find the right record
     5                              <1> struc fcb
     6 00000000 ??                  <1>     .driveNum   resb 1  ;0 based drive number
     7 00000001 ????????????????    <1>     .filename   resb 8
     8 00000009 ??????              <1>     .fileext    resb 3
     9 0000000C ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    10                              <1> ;One block consists of 128 records, of size denoted in the below
    11 0000000E ????                <1>     .recordSize resb 2  ;Record size, default 80h
    12 00000010 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    13 00000014 ????                <1>     .fileDate   resb 2  ;Standard date format
    14 00000016 ????                <1>     .fileTime   resb 2  ;Standard time format
    15                              <1>     ;----------------------------------------
    16                              <1>     ;Internal Records
    17 00000018 ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    18 00000019 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    19 0000001A ????????????        <1>     .special    resb 6  ;For use with below internal structures
    20                              <1>     ;----------------------------------------
    21 00000020 ??                  <1>     .recordNum  resb 1  ;Current record in block
    22 00000021 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    23                              <1> endstruc
    24                              <1> 
    25                              <1> struc exFcb
    26 00000000 ??                  <1>     .extSig     resb 1  ;If the first byte is -1, signals an exFCB
    27 00000001 ??????????          <1>     .reserved   resb 5  
    28 00000006 ??                  <1>     .attribute  resb 1  ;File attribute byte
    29 00000007 ??                  <1>     .driveNum   resb 1  ;0 based drive number
    30 00000008 ????????????????    <1>     .filename   resb 8
    31 00000010 ??????              <1>     .fileext    resb 3
    32 00000013 ????                <1>     .curBlock   resb 2  ;Current block number relative to 0
    33                              <1> ;One block consists of 128 records, of size denoted in the below
    34 00000015 ????                <1>     .recordSize resb 2  ;Record size, default 80h
    35 00000017 ????????            <1>     .fileSize   resb 4  ;File size, in bytes
    36 0000001B ????                <1>     .fileDate   resb 2  ;Standard date format
    37 0000001D ????                <1>     .fileTime   resb 2  ;Standard time format
    38                              <1>     ;----------------------------------------
    39                              <1>     ;Internal Records
    40 0000001F ??                  <1>     .sftNdx     resb 1  ;Internal, SFT ndx number
    41 00000020 ??                  <1>     .fcbMode    resb 1  ;Internal byte, to indicate format of special field
    42 00000021 ????????????        <1>     .special    resb 6  ;For use with below internal structures
    43                              <1>     ;----------------------------------------
    44 00000027 ??                  <1>     .recordNum  resb 1  ;Current record in block
    45 00000028 ????????            <1>     .randRecrd  resb 4  ;Relative record number, relative to start of file
    46                              <1> endstruc
    47                              <1> 
    48                              <1> struc renameFcb
    49                              <1> ;Used for accessing the names and drive letter for renaming
    50                              <1> ;The fcb ptr must be pointing to the drivenumber even if the passed fcb was ext
    51 00000000 ??                  <1>     .driveNum   resb 1
    52 00000001 ????????????????    <1>     .filename   resb 8
    53 00000009 ??????              <1>     .fileext    resb 3
    54 0000000C ????????            <1>     .reserved   resb 4  ;Alignment bytes, cleared by AH=29h
    55 00000010 ??                  <1>     .resDrvNum  resb 1  ;Always zero, used by AH=29h for the drive letter
    56 00000011 ????????????????    <1>     .newName    resb 8
    57 00000019 ??????              <1>     .newExt     resb 3
    58 0000001C ????????            <1>     .reserved2  resb 4  ;Alignement bytes, cleared by AH=29h
    59                              <1> endstruc
    60                              <1> 
    61                              <1> ;FCBmode equates:
    62                              <1> ;Bit 7 = Set => Share loaded, Clear => Share not loaded
    63                              <1> ;Bit 6 = Set => Char device, Clear => Disk file
    64                              <1> ;Bits [5,0] = Low 6 bits of device attribute word 
    65                              <1> fcbShareOn  equ 80h
    66                              <1> fcbCharDev  equ 40h
    67                              <1> fcbLocal    equ 40h
    68                              <1> 
    69                              <1> ;Structures of the special 6 bytes
    70                              <1> 
    71                              <1> ;Used when share is NOT loaded (fcbMode = 0xxxxxxxb)
    72                              <1> struc noShare   
    73 00000000 ??                  <1>     .attribWord resb 1  ;(lowbyte DevAttrWord && 0Ch) || open mode
    74 00000001 ????                <1>     .startClust resb 2  ;Starting cluster of file (too small for FAT32)
    75 00000003 ????                <1>     .dirSect    resb 2  ;Sector containing dir entry (too small for FAT32)
    76 00000005 ??                  <1>     .dirEntry   resb 1  ;Number of 32 byte directory entry IN sector
    77                              <1> endstruc
    78                              <1> 
    79                              <1> ;Used when the volume is local and share is loaded (fcbMode = 11xxxxxxb)
    80                              <1> struc shareLocal    
    81 00000000 ????                <1>     .strtClust  resb 2  ;Starting cluster on disk of file (too small for FAT32)
    82 00000002 ????                <1>     .shareSig   resb 2  ;Share record number for this file (to find record)
    83 00000004 ????                <1>     .fileAttr   resb 2  ;File attribute (accessed as a byte)
    84                              <1> endstruc
    85                              <1> 
    86                              <1> ;Used when the volume is remote and share is loaded (fcbMode = 10xxxxxxb)
    87                              <1> struc shareNet
    88                              <1> ;All three fields too small for FAT32
    89 00000000 ????                <1>     .dirSect    resb 2  ;Sector number containing dir entry
    90 00000002 ????                <1>     .relClust   resb 2  ;File relative cluster of last cluster accessed
    91 00000004 ????                <1>     .absClust   resb 2  ;Disk relative cluster of last cluster accessed
    92                              <1> endstruc
     8                                  %include "./src/Include/dosStruc.inc"
     1                              <1> 
     2                              <1> ;-------------------------------------------------------;
     3                              <1> ; This include file contains miscellaneous internal     ;
     4                              <1> ; SCP/DOS structures.                                   ;
     5                              <1> ;-------------------------------------------------------;
     6                              <1> 
     7                              <1> ;------------------------------------------------------------------------;
     8                              <1> ; Each mass storage device up to LASTDRIVE gets a DPB, describing 
     9                              <1> ; its file system structure. This is used to locate files and structures
    10                              <1> ; on the device itself and to translate file requests to cluster chains
    11                              <1> ; to LBAs to pass to the disk driver..
    12                              <1> ; The DPBs form a linked list, with each DPB formed after the devices 
    13                              <1> ; drivers Initialise routine has been called.
    14                              <1> ;------------------------------------------------------------------------;
    15                              <1> struc dpb        ;Drive Parameter Block
    16                              <1> 
    17 00000000 ??                  <1>     .bDriveNumber           db ?  ;Drive number (0=A, 1=B ...)
    18 00000001 ??                  <1>     .bUnitNumber            db ?  ;Unit number in device
    19 00000002 ????                <1>     .wBytesPerSector        dw ?  ;min 512, max 4096
    20 00000004 ??                  <1>     .bMaxSectorInCluster    db ?  ;(Maximum sector in cluster) - 1
    21 00000005 ??                  <1>     .bSecPerClustShift      db ?  ;Sectors per cluster exponent
    22 00000006 ????                <1>     .wFAToffset             dw ?  ;Number of reserved sectors in partition
    23 00000008 ??                  <1>     .bNumberOfFATs          db ?  ;Number of FATs
    24 00000009 ????                <1>     .wNumberRootDirEntries  dw ?  ;In 32 byte units, this is 0 for FAT32
    25 0000000B ????????            <1>     .dClusterHeapOffset     dd ?  ;Start sector of data area
    26 0000000F ????????            <1>     .dMaxClusterAddr        dd ?  ;Max Cluster Addr = # of data clusters + 1
    27 00000013 ????????            <1>     .dFATlength             dd ?  ;FAT length, in sectors
    28 00000017 ????????            <1>     .dFirstUnitOfRootDir    dd ?  
    29                              <1>     ;Unit=Sector/Cluster of Root Directory (FAT12/16 = Sector, FAT32 = Cluster)
    30 0000001B ????????????????    <1>     .qDriverHeaderPtr       dq ?  ;Pointer to device driver header
    31 00000023 ??                  <1>     .bMediaDescriptor       db ?  ;Media descriptor
    32 00000024 ??                  <1>     .bAccessFlag            db ?  ;Access Flag (0 if accessed, else -1)
    33 00000025 ????????????????    <1>     .qNextDPBPtr            dq ?  ;Pointer to next DPB, -1 if at end
    34 0000002D ????????            <1>     .dNextFreeClst          dd ?  ;Starting cluster of free space search
    35 00000031 ????????            <1>     .dFreeClustCnt          dd ?  ;Number of free clusters, -1 unknown
    36                              <1> 
    37                              <1> endstruc
    38                              <1> 
    39                              <1> fat12MaxClustCnt    equ 4085    ;Cluster count less than this is FAT12
    40                              <1> fat16MaxClustCnt    equ 65525   ;Cluster count less than this is FAT16
    41                              <1> ;------------------------------------------------------------------------;
    42                              <1> ; Each mass storage device up to LASTDRIVE has a CDS associated with it.
    43                              <1> ; All disk pathing requests go via the CDS for that drive.
    44                              <1> ; The default drive is the last accessed drive, this number is stored
    45                              <1> ; in the DOS data area.
    46                              <1> ; The CDS is stored as an array with the offset into the array being 
    47                              <1> ; given by the drive letter's offset into the alphabet (with A=0).
    48                              <1> ;
    49                              <1> ; DEFAULT LASTDRIVE=E, MINIMUM LASTDRIVE=B
    50                              <1> ;------------------------------------------------------------------------;
    51                              <1> struc cds       ;Current Directory structure
    52 00000000 <res 43h>           <1>     .sCurrentPath        db 67 dup (?)    ;Current Directory Path String
    53 00000043 ????                <1>     .wFlags              dw ?   ;CDS Flags - 
    54 00000045 ????????????????    <1>     .qDPBPtr             dq ?   ;Ptr to the DPB of the dev using this CDS
    55 0000004D ????????            <1>     .dStartCluster       dd ?   ;Starting cluster of the directory on disk
    56 00000051 ????????????????    <1>     .qIFSPtr             dq ?   ;Reserved for IFS driver expansions
    57 00000059 ????????            <1>     .dNetStore           dd ?   ;For storing a owner dword for IFS (21h/5F03h)
    58 0000005D ????                <1>     .wBackslashOffset    dw ?   ;How many chars to skip for getting the path
    59                              <1> ; currentPath (usually 2 to skip C: in C:\, but when SUBSTing a drive letter to 
    60                              <1> ; another, we save the number of chars to skip to that deep level).
    61                              <1> ; I.E. if we SUBST A:\DOS G: then this value for the CDS for drive G is 6
    62                              <1> ; Only affects for SUBST drives, not JOIN
    63                              <1> ; Flags: Bit 15 set = Network drive
    64                              <1> ;        Bit 14 set = Physical drive
    65                              <1> ;        Bit 13 set = JOIN'ed drive
    66                              <1> ;        Bit 12 set = SUBST'ed drive
    67                              <1> ;        Bit 7  set = Redirected, not net. drive (This is how MSCDEX worked)
    68                              <1> endstruc
    69                              <1> ;CDS equates
    70                              <1> cdsRedirDrive   equ 8000h   ;All drives which use the Redirector interface
    71                              <1> cdsValidDrive   equ 4000h   ;CDS valid
    72                              <1> cdsJoinDrive    equ 2000h   ;CDS for joined drives
    73                              <1> cdsSubstDrive   equ 1000h   ;Drives formed by Subst
    74                              <1> cdsRdirLocDrive equ 0080h   ;Redirector but Local
    75                              <1> ;------------------------------------------------------------------------;
    76                              <1> ; The SFT is a way to allow applications to open file handles to files 
    77                              <1> ; and devices. As things stand, the SFT chain will have 5 file handles
    78                              <1> ; under the first header, and then a second header will be linked to the 
    79                              <1> ; first one after CONFIG.SYS has been read, to allow for FILES= to specify
    80                              <1> ; a size for the second SFT (default 10 files). Same for System FCBs, 
    81                              <1> ; using the FCBS= command. Default FCBS=5.
    82                              <1> ;
    83                              <1> ; A file handle describes the file, and the location within the file that
    84                              <1> ; we are reading. The file handle can be manipulated without the file
    85                              <1> ; being in memory, thus allowing the user to access data without needing 
    86                              <1> ; to take up large portions of memory. Similarly, file handles allow for
    87                              <1> ; accessing devices, by treating them as files with their drivers 
    88                              <1> ; responding and translating the manipulations of the file handle itself.
    89                              <1> ; Neither the driver nor the application should see or use the SFT for
    90                              <1> ; the handle, as it is subject to change (and will change when file 
    91                              <1> ; sharing provisions are included). The DOS will make requests to the 
    92                              <1> ; driver in a generic way and the driver will respond, with DOS keeping
    93                              <1> ; track of the information in the SFT entry for that handle. 
    94                              <1> ;
    95                              <1> ; One SFT entry can have multiple handles and multiple SFT entries
    96                              <1> ; can point to the same file. It all depends on what the applications 
    97                              <1> ; want to do with the File.
    98                              <1> ;
    99                              <1> ; !!!!IMPORTANT!!!!
   100                              <1> ; Currently there are plans for File Sharing, but I include minimal 
   101                              <1> ; provisions for it. I really just wanna get a DOS out the door.
   102                              <1> ;
   103                              <1> ;Each SFT may look like this:
   104                              <1> ;sysvars-->sfth------------>sfth------------>|ENDOFLIST|
   105                              <1> ;            |                |
   106                              <1> ;       wNumFiles*sft    wNumFiles*sft
   107                              <1> ;
   108                              <1> ; Two SFT chains are built; one for files, and a one for so called 
   109                              <1> ; System FCBs.
   110                              <1> ;
   111                              <1> ; Each SFT header has an array of SFT's below it, with the number of 
   112                              <1> ; SFTs given by wNumFiles. The SFT headers form a linked list.
   113                              <1> ;
   114                              <1> ; DEFAULT FILES=8, MINIMUM FILES=5
   115                              <1> ; DEFAULT FCBS=5,  MINIMUM FCBS=5
   116                              <1> ;------------------------------------------------------------------------;
   117                              <1> struc sfth   ;System file table header
   118                              <1> ; This is the SFT header.
   119                              <1> ; This structure comes before the start of the first file in the array/table.
   120 00000000 ????????????????    <1>     .qNextSFTPtr dq ?    ;Pointer to the next SFT
   121 00000008 ????                <1>     .wNumFiles   dw ?    ;Number of files in this table
   122                              <1> endstruc
   123                              <1> 
   124                              <1> struc sft
   125                              <1> ;This is the file struc itself
   126 00000000 ????                <1>     .wNumHandles dw ?    ;Number of handles pointing to this file
   127 00000002 ????                <1>     .wOpenMode   dw ?    ;File access permissions and behvaiours
   128 00000004 ??                  <1>     .bFileAttrib db ?    ;Regular File Attributes
   129 00000005 ????                <1>     .wDeviceInfo dw ?    ;Includes unit number if a block device
   130 00000007 ????????????????    <1>     .qPtr        dq ?    ;IF char, ptr to device driver header, ELSE DPBptr
   131 0000000F ????????            <1>     .dStartClust dd ?    ;Start cluster of file pointed to by SFT entry
   132 00000013 ????                <1>     .wTime       dw ?    ;File Time, updated on open and writes
   133 00000015 ????                <1>     .wDate       dw ?    ;File Date, updated on open and writes
   134 00000017 ????????            <1>     .dFileSize   dd ?    ;File Size, in bytes
   135 0000001B ????????            <1>     .dCurntOff   dd ?    ;Current Offset pointed to by SFT entry, in bytes
   136 0000001F ????????            <1>     .dRelClust   dd ?    ;Rel cluster pointed to by SFT entry
   137 00000023 ????????            <1>     .dAbsClusr   dd ?    ;Absolute cluster pointed to by SFT entry
   138 00000027 ????????????????    <1>     .qDirSect    dq ?    ;Abs number of sector containing directory entry 
   139 0000002F ??                  <1>     .bNumDirEnt  db ?    ;Directory entry within dir sector (byte offset/32)
   140 00000030 <res Bh>            <1>     .sFileName   db 11 dup (?)   ;8.3 Filename
   141 0000003B ????????????????    <1>     .qSharePtr   dq ?    ;SHARE pointer to previous SFT sharing same file
   142 00000043 ????                <1>     .wMachNum    dw ?    ;SHARE number of network machine opening file
   143 00000045 ????????????????    <1>     .qPSPOwner   dq ?    ;Addr of PSP of program which first opened this file
   144 0000004D ????                <1>     .wShareRec   dw ?    ;offset within SHARE code segment of sharing record
   145                              <1> ;                           0 means no record
   146                              <1> endstruc
   147                              <1> ;Open Mode equates
   148                              <1> ;Access modes   Bits[2:0]
   149                              <1> ReadAccess      equ 0h
   150                              <1> WriteAccess     equ 1h
   151                              <1> RWAccess        equ 2h
   152                              <1> ;Bit 3 reserved 0
   153                              <1> ;Sharing modes  Bits[6:4]
   154                              <1> CompatShare     equ 0h
   155                              <1> denyRWShare     equ 10h
   156                              <1> denyWriteShare  equ 20h
   157                              <1> denyReadShare   equ 30h
   158                              <1> denyNoneShare   equ 40h
   159                              <1> ;NetFCB is for files open by a local server, handling IO from a remote
   160                              <1> ; client by proxy opened by an FCB! Sets the Net bit to indicate this. 
   161                              <1> ;Thus, this is a handle with no JFT entry! Server handles its own JFT!
   162                              <1> netFCBShare     equ 70h     
   163                              <1> noInherit       equ 80h
   164                              <1> ;Bits 8-12 reserved 0
   165                              <1> ;Fancy open mode bits
   166                              <1> diskFullFail    equ 2000h   ;Reserved: If set, trigger Int 24h on disk full.
   167                              <1> noBufferWrites  equ 4000h   ;Reserved: If set, flush after each buffer write.
   168                              <1> ;Once share is loaded, if a local FCB open occurs, mark the sft as so.
   169                              <1> FCBopenedFile   equ 8000h   ;If set, file is opened by FCB, else handle based.
   170                              <1> 
   171                              <1> ;Attribute Byte
   172                              <1> readOnlyFile    equ 1h
   173                              <1> hiddenFile      equ 2h
   174                              <1> systemFile      equ 4h
   175                              <1> volLabelFile    equ 8h
   176                              <1> directoryFile   equ 10h ;Directory entry
   177                              <1> archiveFile     equ 20h
   178                              <1> charFile        equ 40h ;Reserved, never found in dir
   179                              <1> ;Device Info equates
   180                              <1> ;For a block device, bits [5:0] contain the drive number
   181                              <1> charDevConIn    equ 1h  ;If set, device is CON input
   182                              <1> charDevConOut   equ 2h  ;If set, device is CON output
   183                              <1> charDevNulDev   equ 4h  ;If set, device is NULL device
   184                              <1> charDevClockDev equ 8h  ;If set, device is CLOCK device
   185                              <1> charDevFastOut  equ 10h ;If set, device supports INT 29h
   186                              <1> charDevBinary   equ 20h ;If set, r/w char device in Binary mode!!!
   187                              <1> charDevNoEOF    equ 40h ;If set, no EOF when reading from device!!
   188                              <1> blokFileNoFlush equ 40h ;Set if file is synchronised with hard store!
   189                              <1> devCharDev      equ 80h ;If set, it is a char device!
   190                              <1> charDevNetSpool equ 800h    ;If set, device is a network spooler
   191                              <1> devNoInherit    equ 1000h   ;If set, handle not inherited by child processes
   192                              <1> charDevNamePipe equ 2000h   ;If set, device is a named pipe
   193                              <1> blokNoDTonClose equ 4000h   ;If set, dont update date and time when closing
   194                              <1> devRedirDev     equ 8000h   ;If set, dev/file is redirected!
   195                              <1>  
   196                              <1> ;------------------------------------------------------------------------;
   197                              <1> ; Buffers allow for buffered drive IO, by first transferring a sector 
   198                              <1> ; to an internal buffer, and then copying it to the specified location
   199                              <1> ; in memory. The buffer is kept in the buffer chain,  in the event that 
   200                              <1> ; another request for the same sector from the same device is made, so 
   201                              <1> ; that is can be read from the device directly. Buffers are uniform in 
   202                              <1> ; size, selected according to the largest detected sector size during 
   203                              <1> ; the initial loadup.
   204                              <1> ;
   205                              <1> ; The buffer pointer in SysVars points to most recently used Buffer
   206                              <1> ;
   207                              <1> ; DEFAULT BUFFERS=30, MINIMUM BUFFERS=2
   208                              <1> ;------------------------------------------------------------------------;
   209                              <1> 
   210                              <1> struc bufferHdr
   211 00000000 ????????????????    <1>     .nextBufPtr  dq  ?   ;Pointer to the next buffer in the chain or -1 at end
   212                              <1>     .wDrvNumFlg:         ;Read as a word to get the following two bytes!
   213 00000008 ??                  <1>     .driveNumber db  ?   ;Drive number the buffer is used for (or -1 for free)
   214 00000009 ??                  <1>     .bufferFlags db  ?   ;Standard Flags
   215 0000000A ????????????????    <1>     .bufferLBA   dq  ?   ;LBA the buffer contains
   216 00000012 ??                  <1>     .bufFATcopy  db  ?   ;Number of copies of the FAT to write (1 if non-FAT)
   217 00000013 ????????            <1>     .bufFATsize  dd  ?   ;Number of sectors per FAT (or 0 if non-FAT)
   218 00000017 ????????????????    <1>     .driveDPBPtr dq  ?   ;Pointer to the device DPB block
   219 0000001F ??                  <1>     .reserved    db  ?   ;Alignment byte
   220                              <1>     .dataarea:             ;Points to the start of the data area
   221                              <1> endstruc
   222                              <1> ;Buffer Flag equates
   223                              <1> dosBuffer   equ 1h  ;Sector 0 (BPB/VPB) in buffer
   224                              <1> fatBuffer   equ 2h  ;FAT sector in buffer
   225                              <1> dirBuffer   equ 4h  ;Directory sector in buffer
   226                              <1> dataBuffer  equ 8h  ;File Data sector in buffer
   227                              <1> refBuffer   equ 20h ;Data in buffer has been referenced by an application
   228                              <1> dirtyBuffer equ 40h ;Data in buffer modified by an application
   229                              <1> freeBuffer  equ 00FFh   ;A word which goes into the drive number to clear both fields
   230                              <1> ;Note! A buffer is marked as referenced when the buffer is "obtained" by a syscall
   231                              <1> ;------------------------------------------------------------------------;
   232                              <1> ; Memory control block for each memory arena
   233                              <1> ;------------------------------------------------------------------------;
   234                              <1> struc mcb
   235 00000000 ??                  <1>     .marker     db ?  ;M = Member of the MCB chain. Z = Last member
   236 00000001 ????????????????    <1>     .owner      dq ?  ;Owning application PSP (para aligned) or 0 for free
   237 00000009 ????????            <1>     .blockSize  dd ?  ;Number of contiguous paragraphs owned by this block
   238                              <1>     ;The following byte is reserved outside of sysinit
   239 0000000D ??                  <1>     .subSysMark db ?  ;Marks the optional DOS subsystem of the MCB
   240 0000000E ????                <1>     .reserved   db 2 dup (?) 
   241                              <1>     .program:
   242                              <1> endstruc
   243                              <1> ;MCB equates
   244                              <1> mcbOwnerHole    equ 7   ;Owner = 7 => Memory hole, always fail free/realloc
   245                              <1> mcbOwnerFree    equ 0   ;Owner = 0 => Free and available space
   246                              <1> mcbOwnerDOS     equ 8   ;Owner = 8 => Owned by DOS
   247                              <1> mcbOwnerNewDOS  equ 9   ;Owner = 9 => New Kernel driver alloc. Needs setting to 8.
   248                              <1> mcbMarkCtn      equ "M"
   249                              <1> mcbMarkEnd      equ "Z"
   250                              <1> ;The following are used on MCB's that belong to DOS, that are not part of the
   251                              <1> ; main kernel (i.e. the CONFIG.SYS optional parts).
   252                              <1> mcbSubDriver    equ "D" ;Any memory allocated for a device driver's code.
   253                              <1> mcbSubDrvExtra  equ "L" ;Any memory allocated by a device driver.
   254                              <1> mcbSubDrvDPB    equ "P" ;Blocks used for DPB's are marked so.
   255                              <1> mcbSubIFS       equ "I" ;Unused for now
   256                              <1> mcbSubFiles     equ "F" ;Any memory allocated for Files.
   257                              <1> mcbSubFCBS      equ "X" ;Unused for now
   258                              <1> mcbSubBuffers   equ "B" ;Any memory allocated for Buffers.
   259                              <1> mcbSubCDS       equ "L" ;Any memory allocated to store a CDS.
   260                              <1> mcbSubStacks    equ "S" ;Unused for now
   261                              <1> 
   262                              <1> 
   263                              <1> memFirstFit     equ 0   ;First free block goes to application
   264                              <1> memBestFit      equ 1   ;Block whos size closest matches requirement
   265                              <1> memLastFit      equ 2   ;Last free block goes to application
   266                              <1> 
   267                              <1> ;Owner = Para aligned address => Owning application PSP
   268                              <1> ;...To consider...
   269                              <1> ;Owner = Non-para aligned address => Error? Should maybe lock up system?
   270                              <1> ;blockSize counts the number of paragraphs FROM .program TO THE NEXT MCB!
   271                              <1> ;------------------------------------------------------------------------;
   272                              <1> ; For Int 21h, the callers registers are saved on their stack in the 
   273                              <1> ; following order, thus allowing for return values to be placed in the 
   274                              <1> ; registers by accessing the caller register stack frame.
   275                              <1> ;------------------------------------------------------------------------;
   276                              <1> struc callerFrame
   277 00000000 ????????????????    <1>     .rax    dq ?  ;Bottom of frame, pointer to rax saved in oldRSP
   278 00000008 ????????????????    <1>     .rbx    dq ?    
   279 00000010 ????????????????    <1>     .rcx    dq ?
   280 00000018 ????????????????    <1>     .rdx    dq ?
   281 00000020 ????????????????    <1>     .rsi    dq ?
   282 00000028 ????????????????    <1>     .rdi    dq ?
   283 00000030 ????????????????    <1>     .rbp    dq ?
   284 00000038 ????????????????    <1>     .r8     dq ?  ;To be removed if truly not needed
   285 00000040 ????????????????    <1>     .r9     dq ?
   286                              <1> ;Pushed by Processor when invoked via Interrupt
   287 00000048 ????????????????    <1>     .rip    dq ?
   288 00000050 ????????????????    <1>     .cs     dq ?
   289 00000058 ????????????????    <1>     .flags  dq ?
   290                              <1> endstruc
   291                              <1> 
   292                              <1> struc dpl
   293                              <1> ;DOS parameter list, pointer to this stack is passed to DOS in rdx on
   294                              <1> ; server calls
   295 00000000 ????????????????    <1>     .rax    dq ?
   296 00000008 ????????????????    <1>     .rbx    dq ?
   297 00000010 ????????????????    <1>     .rcx    dq ?
   298 00000018 ????????????????    <1>     .rdx    dq ?
   299 00000020 ????????????????    <1>     .rsi    dq ?
   300 00000028 ????????????????    <1>     .rdi    dq ?
   301 00000030 ????????????????    <1>     .r8     dq ?
   302 00000038 ????????????????    <1>     .r9     dq ?
   303 00000040 ????????????????    <1>     .align  dq ?
   304 00000048 ????????????????    <1>     .compID dq ?  ;Computer id, low word used only
   305 00000050 ????????????????    <1>     .procID dq ?  ;Process ID
   306                              <1> endstruc
   307                              <1> 
   308                              <1> struc cfgFrame  ;Frame used for config.sys parsing
   309 00000000 ????????????????    <1>     .oldRBP         dq ?    ;Ptr to DOSSEG
   310 00000008 ????????????????    <1>     .newBuffers     dq ?    ;New buffers value
   311 00000010 ????????????????    <1>     .newSFTVal      dq ?
   312 00000018 ????????????????    <1>     .newFCBSVal     dq ?
   313 00000020 ????????????????    <1>     .newProtFCBSVal dq ?    ;Number of protected FCBS
   314 00000028 ????????????????    <1>     .newLastdrive   dq ?
   315 00000030 ????????????????    <1>     .newStacks      dq ?    ;Ignored for now
   316 00000038 ????????????????    <1>     .newStackSize   dq ?    ;Ignored for now
   317 00000040 ????????????????    <1>     .cfgHandle      dq ?    ;CONFIG.SYS handle
   318 00000048 ????????????????    <1>     .lastLine       dq ?    ;Set if the last line is current
   319 00000050 ????????????????    <1>     .linePtr        dq ?    ;Ptr to line buffer of line being processed
   320 00000058 ????????????????    <1>     .driverBreak    dq ?    ;Ptr to the pathname terminator 
   321 00000060 ????????????????    <1>     .breakChar      dq ?    ;Char that was replaced by null for terminator
   322                              <1> endstruc
   323                              <1> 
   324                              <1> struc filename
   325                              <1> ;8.3 File name struct
   326 00000000 ????????????????    <1>     .fName  db 8 dup (?)
   327 00000008 ??????              <1>     .fExt   db 3 dup (?)
   328                              <1> endstruc
   329                              <1> 
   330                              <1> struc ffBlock   ;The structure of the Find First structure at the DTA
   331 00000000 ??                  <1>     .driveNum   db ?  ;Drive we are searching on, 1 based number
   332 00000001 <res Bh>            <1>     .template   db 11 dup (?) ;Search template (? meaning anything)
   333 0000000C ??                  <1>     .attrib     db ?  ;Search attribute
   334 0000000D ????????            <1>     .dirOffset  dd ?  ;32 byte entry within dir cluster
   335 00000011 ????????            <1>     .parDirClus dd ?  ;Parent Directory Cluster number
   336 00000015 ??                  <1>     .attribFnd  db ?  ;Attrib of file found
   337 00000016 ????                <1>     .fileTime   dw ?  ;File time
   338 00000018 ????                <1>     .fileDate   dw ?  ;File date
   339 0000001A ????????            <1>     .fileSize   dd ?  ;Number of bytes
   340 0000001E <res Dh>            <1>     .asciizName db 13 dup (?) ;ASCIIZ name with dot and terminating nul
   341                              <1> endstruc
   342                              <1> 
   343                              <1> dfltJFTsize equ 20  ;Default size of PSP JFT
   344                              <1> struc psp
   345 00000000 ????                <1>     .return     db 2 dup (?)  ;Should always be CDh 20h, same place as DOS
   346 00000002 ????????            <1>     .allocSize  dd ?  ;Number of paras in init alloc or when exiting as TSR.
   347 00000006 ????????            <1>                 dd ?  ;Reserved 4 bytes
   348 0000000A ????????????????    <1>     .oldInt22h  dq ?  ;Int 22h pointer on overlay load
   349 00000012 ????????????????    <1>     .oldInt23h  dq ?  ;Int 23h pointer on overlay load
   350 0000001A ????????????????    <1>     .oldInt24h  dq ?  ;Int 24h pointer on overlay load
   351 00000022 ????????????????    <1>     .parentPtr  dq ?  ;Pointer to parent process PSP
   352                              <1> ;If jftSize > 20, then the QWORD at .jobFileTbl becomes a pointer
   353                              <1> ; to the actual in use JFT and the other 12 bytes are left undefined.
   354                              <1> ;If jftSize < 20 (DOS will never set it so), then it is considered as 20
   355                              <1> ;If the user tries to reduce handle count to 20 or less, then the PSP JFT is 
   356                              <1> ; always used and jftSize.
   357                              <1>     .externalJFTPtr:    ;Ptr to external JFT array (first byte AFTER MCB)
   358 0000002A <res 14h>           <1>     .jobFileTbl db dfltJFTsize dup (?) ;Main File handle array, JFT
   359 0000003E ????????????????    <1>     .envPtr     dq ?  ;Pointer to the environment
   360 00000046 ????????????????    <1>     .rspPtr     dq ?  ;Pointer to rsp on entry to Int 21h
   361 0000004E ????                <1>     .jftSize    dw ?  ;JFT array size, 20 => PSP JFT in use
   362 00000050 ??????              <1>     .unixEntry  db 3 dup (?)  ;Must always be CDh 21h CBh, same place as DOS
   363 00000053 ????????????????    <1>     .prevPSP    dq ?  ;Pointer to the previous PSP in chain (used by SHARE)
   364 0000005B ??                  <1>                 db ?  ;Reserved byte
   365                              <1> ;The below are in the same place as in DOS.
   366                              <1>     .cmdLineArgPtr: ;Symbol for future use
   367 0000005C <res 10h>           <1>     .fcb1       db 16 dup (?)  ;First FCB,    argument 1 
   368 0000006C <res 14h>           <1>     .fcb2       db 20 dup (?)  ;Second FCB,   argument 2
   369                              <1>     .dta:   ;Pointer to the default DTA in the PSP
   370 00000080 ??                  <1>     .parmList   db ?   ;Number of characters in command tail
   371 00000081 <res 7Fh>           <1>     .progTail   db 127 dup (?) ;Default DTA/Program tail
   372                              <1> endstruc
   373                              <1> 
   374                              <1> struc clkStruc
   375 00000000 ????                <1>     .dateWord   dw ?
   376 00000002 ??                  <1>     .minutes    db ?
   377 00000003 ??                  <1>     .hours      db ?
   378 00000004 ??                  <1>     .hseconds   db ?  ;Hundreths of seconds
   379 00000005 ??                  <1>     .seconds    db ?
   380                              <1> endstruc
   381                              <1> 
   382                              <1> 
   383                              <1> struc extCtryStruc
   384 00000000 ??                  <1>     .infoIDCode db ?    ;Information ID code (01h)
   385 00000001 ????                <1>     .strucSize  dw ?    ;Length of the structure  (42 or less)
   386 00000003 ????                <1>     .ctryID     dw ?    ;Country ID number
   387 00000005 ????                <1>     .cpNumber   dw ?    ;Code page number
   388 00000007 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   389                              <1>                         ;0 = month day year hh:mm:ss
   390                              <1>                         ;1 = day month year hh:mm:ss
   391                              <1>                         ;2 = year month day hh:mm:ss
   392 00000009 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   393 0000000E ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   394 00000010 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   395 00000012 ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   396 00000014 ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   397 00000016 ??                  <1>     .currFmt    db ?    ;Currency Format
   398                              <1>                         ;0 = Symbol leads, without space
   399                              <1>                         ;1 = Symbol follows, without space
   400                              <1>                         ;2 = Symbol leads, one space
   401                              <1>                         ;3 = Symbol follows, one space
   402                              <1>                         ;4 = Symbol replace decimal separator
   403 00000017 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   404 00000018 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   405 00000019 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   406 00000021 ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   407 00000023 <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   408                              <1> endstruc
   409                              <1> 
   410                              <1> struc countryStruc
   411 00000000 ????                <1>     .dtfmt      dw ?    ;Date time format (2 bytes)
   412                              <1>                         ;0 = month day year hh:mm:ss
   413                              <1>                         ;1 = day month year hh:mm:ss
   414                              <1>                         ;2 = year month day hh:mm:ss
   415 00000002 ??????????          <1>     .curr       db 5 dup (?)   ;ASCIIZ Currency symbol (5 chars)
   416 00000007 ????                <1>     .thouSep    db 2 dup (?)   ;ASCIIZ Thousands separator
   417 00000009 ????                <1>     .dcmlSep    db 2 dup (?)   ;ASCIIZ Decimal separator
   418 0000000B ????                <1>     .dateSep    db 2 dup (?)   ;ASCIIZ Date separator
   419 0000000D ????                <1>     .timeSep    db 2 dup (?)   ;ASCIIZ Time separator
   420 0000000F ??                  <1>     .currFmt    db ?    ;Currency Format
   421                              <1>                         ;0 = Symbol leads, without space
   422                              <1>                         ;1 = Symbol follows, without space
   423                              <1>                         ;2 = Symbol leads, one space
   424                              <1>                         ;3 = Symbol follows, one space
   425                              <1>                         ;4 = Symbol replace decimal separator
   426 00000010 ??                  <1>     .digtdpt    db ?    ;Number of digits after the decimal point
   427 00000011 ??                  <1>     .timefmt    db ?    ;Time format, Bit 0 = 0 => 12 hour, = 1 => 24 hour clock
   428 00000012 ????????????????    <1>     .mapptr     db 8 dup (?)  ;Case map address (0 is nulptr), needs fixing up
   429 0000001A ????                <1>     .dataSep    db 2 dup (?)  ;Data list separator
   430 0000001C <res Ah>            <1>     .resv       db 10 dup (?) ;Reserve 10 bytes
   431                              <1> endstruc
   432                              <1> 
   433                              <1> ;Critical Error AH bitfield equates
   434                              <1> critRead    equ 0h
   435                              <1> critWrite   equ 1h
   436                              <1> critDOS     equ 0h
   437                              <1> critFAT     equ 2h
   438                              <1> critDir     equ 4h
   439                              <1> critData    equ 6h
   440                              <1> critFailOK  equ 8h
   441                              <1> critRetryOK equ 10h
   442                              <1> critIgnorOK equ 20h
   443                              <1> critCharDev equ 80h
   444                              <1> 
   445                              <1> critIgnore  equ 0
   446                              <1> critRetry   equ 1
   447                              <1> critAbort   equ 2
   448                              <1> critFail    equ 3
   449                              <1> 
   450                              <1> ;MISC ASCII control chars
   451                              <1> NUL equ 00h ;^@         | ASCII Null
   452                              <1> ETX equ 03h ;^C         | ASCII Break (End of Text) 
   453                              <1> ACK equ 06h ;^F         | ASCII Acknowledgement
   454                              <1> BEL equ 07h ;^G         | ASCII Bell
   455                              <1> BSP equ 08h ;^H         | ASCII Backspace
   456                              <1> TAB equ 09h ;^I         | ASCII Horizontal Tab
   457                              <1> LF  equ 0Ah ;^J         | ASCII Line Feed
   458                              <1> CR  equ 0Dh ;^M         | ASCII Carriage Return
   459                              <1> DLE equ 10h ;^P         | ASCII Data Link End (Toggle Print Echo)
   460                              <1> DC3 equ 13h ;^S         | ASCII Device Control 3 (Toggle Scroll Lock)
   461                              <1> DC4 equ 14h ;^T         | ASCII Device Control 4
   462                              <1> NAK equ 15h ;^U         | ASCII Negative Acknowledgement
   463                              <1> ETB equ 17h ;^W         | ASCII End of Transmission Block
   464                              <1> EOF equ 1Ah ;^Z         | ASCII Substitute character (End of File)
   465                              <1> ESC equ 1Bh ;           | ASCII Escape char, used for ANSI.SYS
   466                              <1> SPC equ 20h ;Printable  | ASCII Space
   467                              <1> ;This last one is NEVER printed with a caret as it is a console control char
   468                              <1> DEL equ 7Fh ;^?         | ASCII Rubout (Del char and dec cursor)
   469                              <1> 
   470                              <1> asciiCaret  equ 20h ;Used to check which chars need to be printed with caret
   471                              <1> ;Extended Ascii Codes
   472                              <1> eF1     equ 3Bh ;F1 second byte
   473                              <1> eF2     equ 3Ch ;F2 second byte
   474                              <1> eF3     equ 3Dh ;F3 second byte
   475                              <1> eF4     equ 3Eh ;F4 second byte
   476                              <1> eF5     equ 3Fh ;F5 second byte
   477                              <1> eF6     equ 40h ;F6 second byte
   478                              <1> eF7     equ 41h ;F7 second byte
   479                              <1> eCursL  equ 4Bh ;Cursor Left second byte
   480                              <1> eCursR  equ 4Dh ;Cursor Right second byte
   481                              <1> eIns    equ 52h ;Insert second byte
   482                              <1> eDel    equ 53h ;DEL second byte (not necessarily delete key)
   483                              <1> 
   484                              <1> ;Default Configuration for the system
   485                              <1> 
   486                              <1> buffersDefault  equ 30
   487                              <1> filesDefault    equ 20
   488                              <1> fcbsDefault     equ 4
   489                              <1> safeFcbsDeflt   equ 0
   490                              <1> lastDriveDeflt  equ 5   
   491                              <1> 
   492                              <1> ;ASCII char property table equates. If such a bit is clear in signature in table
   493                              <1> ; then the char has this property.
   494                              <1> badChar     equ 1   ;Bad ASCIIZ filename char
   495                              <1> termChar    equ 2   ;Terminator char type
   496                              <1> sepChar     equ 4   ;Separator char type
   497                              <1> badFCBChar  equ 8   ;FCB filename char
     9                                  %include "./src/Include/dosError.inc"
     1                              <1> ;DOS Error codes
     2                              <1> 
     3                              <1> ;Extended Error Codes
     4                              <1> errInvFnc   equ 1   ;Invalid function number
     5                              <1> errFnf      equ 2   ;File not found
     6                              <1> errPnf      equ 3   ;Path not found
     7                              <1> errNhl      equ 4   ;Too many open handles, no handles left
     8                              <1> errAccDen   equ 5   ;Access denied (to resource)
     9                              <1> errBadHdl   equ 6   ;Invalid handle
    10                              <1> errMCBbad   equ 7   ;MCB's destroyed
    11                              <1> errNoMem    equ 8   ;Insufficient memory
    12                              <1> errMemAddr  equ 9   ;Invalid Memory Block Address
    13                              <1> errBadEnv   equ 10  ;Invalid environment
    14                              <1> errBadFmt   equ 11  ;Invalid format (path etc)
    15                              <1> errAccCde   equ 12  ;Invalid Access Code    ?
    16                              <1> errInvDat   equ 13  ;Invalid data
    17                              <1> ;           equ 14  ;Reserved
    18                              <1> errBadDrv   equ 15  ;Invalid drive specified
    19                              <1> errDelCD    equ 16  ;Attempt to delete the current directory
    20                              <1> errDevUnk   equ 17  ;Not the same device (Device Unknown)
    21                              <1> errNoFil    equ 18  ;No more files, no match found
    22                              <1> ;The following are Driver error codes + 19
    23                              <1> drvErrShft  equ 19  ;Used to shift Driver error codes to extended error codes
    24                              <1> errWpd      equ 19  ;Attempt to write on write protected disk
    25                              <1> errUnkUnt   equ 20  ;Unknown Unit
    26                              <1> errDrvNR    equ 21  ;Drive not ready
    27                              <1> errUnkCmd   equ 22  ;Unknown Command
    28                              <1> errCRCerr   equ 23  ;Data (CRC) error
    29                              <1> errBadRLn   equ 24  ;Bad request structure length
    30                              <1> errSekErr   equ 25  ;Seek error
    31                              <1> errUnkMed   equ 26  ;Unknown media type
    32                              <1> errSecNF    equ 27  ;Sector not Found
    33                              <1> errNoPap    equ 28  ;Printer out of paper
    34                              <1> errWF       equ 29  ;Write fault
    35                              <1> errRF       equ 30  ;Read fault
    36                              <1> errGF       equ 31  ;General fault
    37                              <1> ;----------------------------------------------
    38                              <1> ;The following two go inbetween the Disk errors
    39                              <1> errShrVio   equ 32  ;Sharing violations
    40                              <1> errLokVio   equ 33  ;File Lock violation
    41                              <1> ;----------------------------------------------
    42                              <1> errIDC      equ 34  ;Driver code, Invalid Disk Change, settable by share
    43                              <1> errNoFCB    equ 35  ;FCB unavailable
    44                              <1> errShrFul   equ 36  ;Sharing buffer full
    45                              <1> 
    46                              <1> errNoNet    equ 50  ;Network request not supported, generic net fail
    47                              <1> errNLSAcDen equ 65  ;Network Access denied (NLS usage)
    48                              <1> 
    49                              <1> errFilExist equ 80  ;File already exists
    50                              <1> errDirExist equ 82  ;Directory already exists
    51                              <1> errFI24     equ 83  ;Fail on Int 24h
    52                              <1> errRedir    equ 84  ;Too many levels of redirection
    53                              <1> errDupRedir equ 85  ;Trying to redirect a redirection
    54                              <1> errBadPass  equ 86  ;Bad password
    55                              <1> errBadParam equ 87  ;Bad parameter passed to request
    56                              <1> errNetWrite equ 88  ;Network Write Fault
    57                              <1> ;-----------------------------------------------------------------------------
    58                              <1> ;Error Loci
    59                              <1> eLocUnk     equ 1   ;Unknown locus, nonspecific or not appropriate
    60                              <1> eLocDsk     equ 2   ;Disk, related to Random Access to a disk or block device
    61                              <1> eLocNet     equ 3   ;Network related issues, shouldnt affect us (yet!)
    62                              <1> eLocChr     equ 4   ;Serial/Character Device error
    63                              <1> eLocMem     equ 5   ;Related to RAM
    64                              <1> ;-----------------------------------------------------------------------------
    65                              <1> ;Error Actions
    66                              <1> eActRet     equ 1   ;Retry
    67                              <1> eActDRet    equ 2   ;Delay then retry (Try again later)
    68                              <1> eActUsr     equ 3   ;Ask user to re-input data, i.e. bad filename or something
    69                              <1> eActAbt     equ 4   ;Abort with cleanup
    70                              <1> eActKil     equ 5   ;Abort without cleanup
    71                              <1> eActIgn     equ 6   ;Ignore error
    72                              <1> eActRetUsr  equ 7   ;Retry after user intervention (i.e swap remdev)
    73                              <1> ;-----------------------------------------------------------------------------
    74                              <1> ;Error classes
    75                              <1> eClsOoR     equ 1   ;Out of resources, no mem or handles
    76                              <1> eClsTS      equ 2   ;Temp sitch, should go away
    77                              <1> eClsAuth    equ 3   ;Authorisation, e.g. file permission error 
    78                              <1> eClsInt     equ 4   ;Internal DOS error or bug
    79                              <1> eClsHrdFlt  equ 5   ;Hardware Failure
    80                              <1> eClsSysFlt  equ 6   ;System Failure, i.e. missing or bad cfg files
    81                              <1> eClsAppFlt  equ 7   ;Application Program error, inconsistent requests etc...
    82                              <1> eClsNotFnd  equ 8   ;Resource not found (such as free SFT entry etc...)
    83                              <1> eClsBadFmt  equ 9   ;Bad format for resource
    84                              <1> eClsLocked  equ 10  ;Resource Locked
    85                              <1> eClsMedia   equ 11  ;Error is on medium, i.e. wrong or damaged remdev
    86                              <1> eClsClash   equ 12  ;Resource already exists!
    87                              <1> eClsUnk     equ 13  ;Unknown class
    10                                  %include "./src/Include/dosExec.inc"
     1                              <1> ;This include file contains structures related to the EXE format
     2                              <1> ; and the exec frame used when setting up the EXE in memory by 21h/4Bh
     3                              <1> 
     4                              <1> ;Int 21h/4Bh stack frame, used to store values whilst processing a EXE or COM
     5                              <1> ; file.
     6                              <1> execLoadGo  equ 0
     7                              <1> execLoad    equ 1
     8                              <1> execInvld   equ 2
     9                              <1> execOverlay equ 3
    10                              <1> execBkgrnd  equ 4
    11                              <1> 
    12                              <1> struc execFrame
    13 00000000 ????????????????    <1>     .oldRBP     resq 1  
    14 00000008 ????????????????    <1>     .bSubFunc   resq 1  ;Subfunction number
    15 00000010 ????????????????    <1>     .wProgHdl   resq 1  ;File handle number for executable file
    16 00000018 ????????????????    <1>     .wNameLen   resq 1  ;Needs to be less than 64 but welp
    17 00000020 ????????????????    <1>     .pParam     resq 1  ;Parameter list pointer
    18 00000028 ????????????????    <1>     .pProgname  resq 1  ;Ptr to ASCIIZ program name
    19                              <1> 
    20 00000030 ????????????????    <1>     .pEnvBase   resq 1  ;Ptr to new Environment block, NOT THE MCB FOR ENV BLK
    21 00000038 ????????????????    <1>     .pPSPBase   resq 1  ;Ptr to new PSP base address
    22 00000040 ????????????????    <1>     .pProgBase  resq 1  ;Ptr to Prog. Base addr., ALIGNED FOR FIRST EXE SECTION
    23 00000048 ????????????????    <1>     .dProgSize  resq 1  ;Program size is saved here, PSP included.
    24 00000050 ????????????????    <1>     .dCOFFhdr   resq 1  ;Offset in file to COFF header. Set to 0 for COM
    25 00000058 ????????????????    <1>     .bSegCount  resq 1  ;Count of segments loaded into memory
    26 00000060 ????????????????    <1>     .wCOFFChars resq 1  ;Save the COFF characteristics in here
    27                              <1> .pProgEP:   ;Program EP, recycle this qword
    28 00000068 ????????????????    <1>     .wNumSeg    resq 1  ;Number of segments, consider reusing NameLen
    29 00000070 ????????????????    <1>     .dFilePtr   resq 1  ;Keep of track of where in file we are
    30 00000078 ????????????????    <1>     .qRelocVal  resq 1  ;Used when computing relocations, Rebasing factor
    31                              <1> endstruc
    32                              <1> 
    33                              <1> ;Possible blocks to be pointed to by rbx
    34                              <1> 
    35                              <1> struc execProg 
    36 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    37 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    38 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    39 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    40                              <1> endstruc
    41                              <1> 
    42                              <1> struc loadProg
    43 00000000 ????????????????    <1>     .pEnv       resq 1  ;Ptr to environment block (or 0 => copy parent env)
    44 00000008 ????????????????    <1>     .pCmdLine   resq 1  ;Ptr to the command line to be placed at PSP + 80h
    45 00000010 ????????????????    <1>     .pfcb1      resq 1  ;Ptr to the first FCB (parsed argument 1)
    46 00000018 ????????????????    <1>     .pfcb2      resq 1  ;Ptr to the second FCB  (parsed argument 2)
    47 00000020 ????????????????    <1>     .initRSP    resq 1  ;Return the start value for rsp
    48 00000028 ????????????????    <1>     .initRIP    resq 1  ;Return the entry point for the task
    49                              <1> endstruc
    50                              <1> 
    51                              <1> struc loadOvly
    52 00000000 ????????????????    <1>     .pLoadLoc   resq 1  ;Address in memory to load the overlay
    53 00000008 ????????????????    <1>     .qRelocFct  resq 1  ;Relocation address for relocatable items (0 for COM files)
    54                              <1> endstruc
    55                              <1> 
    56                              <1> ;----------------------------
    57                              <1> ;   EXE header structures   :
    58                              <1> ;----------------------------
    59                              <1> 
    60                              <1> ;DOS MZ .EXE header. Functionally useless except for e_magic and e_lfanew
    61                              <1> dosMagicSignature   equ "MZ"
    62                              <1> dosMagicSignature2  equ "ZM"
    63                              <1> struc imageDosHdr
    64 00000000 ????                <1>     .e_magic    resw 1  ;      // Magic number
    65 00000002 ????                <1>     .e_cblp     resw 1  ;      // Bytes on last page of file
    66 00000004 ????                <1>     .e_cp       resw 1  ;      // Pages in file
    67 00000006 ????                <1>     .e_crlc     resw 1  ;      // Relocations
    68 00000008 ????                <1>     .e_cparhdr  resw 1  ;      // Size of header in paragraphs
    69 0000000A ????                <1>     .e_minalloc resw 1  ;      // Minimum extra paragraphs needed
    70 0000000C ????                <1>     .e_maxalloc resw 1  ;      // Maximum extra paragraphs needed
    71 0000000E ????                <1>     .e_ss       resw 1  ;      // Initial (relative) SS value
    72 00000010 ????                <1>     .e_sp       resw 1  ;      // Initial SP value
    73 00000012 ????                <1>     .e_csum     resw 1  ;      // Checksum
    74 00000014 ????                <1>     .e_ip       resw 1  ;      // Initial IP value
    75 00000016 ????                <1>     .e_cs       resw 1  ;      // Initial (relative) CS value
    76 00000018 ????                <1>     .e_lfarlc   resw 1  ;      // File address of relocation table
    77 0000001A ????                <1>     .e_ovno     resw 1  ;      // Overlay number
    78 0000001C ????????????????    <1>     .e_res      resw 4  ;      // Reserved words
    79 00000024 ????                <1>     .e_oemid    resw 1  ;      // OEM identifier (for e_oeminfo)
    80 00000026 ????                <1>     .e_oeminfo  resw 1  ;      // OEM information; e_oemid specific
    81 00000028 <res 14h>           <1>     .e_res2     resw 10 ;      // Reserved words
    82 0000003C ????????            <1>     .e_lfanew   resd 1  ;      // File address of new exe header
    83                              <1> endstruc
    84                              <1> 
    85                              <1> ;Pssobile signatures pointed to by e_lfanew
    86                              <1> imageDosSignature   equ 05A4Dh      ; MZ, REJECT
    87                              <1> imageOS2Signature   equ 0454Eh      ; NE, REJECT
    88                              <1> imageOS2SignatureLE equ 0454Ch      ; LE, REJECT
    89                              <1> imagePESignature    equ 00004550h   ; PE00, ACCEPT
    90                              <1> 
    91                              <1> ;COFF File header @ [e_lfanew]
    92                              <1> 
    93                              <1> struc imageFileHeader
    94 00000000 ????????            <1>     .dPESignature        resd 1  ;PESignature, must be PE00
    95 00000004 ????                <1>     .wMachineType        resw 1  ;Machine Type, must be imageFileMachineAMD64
    96 00000006 ????                <1>     .wNumberOfSections   resw 1  ;Number of sections in file
    97 00000008 ????????            <1>     .dTimeDateStamp      resd 1  ;Unix datestamp
    98 0000000C ????????            <1>     .dPtrToSymbolTbl     resd 1  ;Pointer to the symbol table,      NOT USED
    99 00000010 ????????            <1>     .dNumberOfSymbols    resd 1  ;Number of symbols in the table,   NOT USED
   100 00000014 ????                <1>     .wSizeOfOptionalHdr  resw 1  ;Size of the optional header
   101 00000016 ????                <1>     .wCharacteristics    resw 1  ;Bitfield characteristics
   102                              <1> endstruc
   103                              <1> 
   104                              <1> ;The only valid values in the .machineType field
   105                              <1> 
   106                              <1> imageFileMachineUnknown equ 0
   107                              <1> imageFileMachineAMD64   equ 08664h 
   108                              <1> 
   109                              <1> ;Characteristics to check for
   110                              <1> imageFileRelocsStripped equ 0001h   ;If set, base addr MUST equal load addr
   111                              <1> imageFileExecutable     equ 0002h   ;Must always be set else badfmterr
   112                              <1> 
   113                              <1> ;Optional header, immediately follows COFF header
   114                              <1> 
   115                              <1> struc imageFileOptionalHeader
   116 00000000 ????                <1> 	.wMagic                     resw 1 ;0x010b - PE32, 0x020b - PE32+ (64 bit)
   117 00000002 ??                  <1> 	.bMajorLinkerVersion        resb 1
   118 00000003 ??                  <1> 	.bMinorLinkerVersion        resb 1
   119 00000004 ????????            <1> 	.dSizeOfCode                resd 1
   120 00000008 ????????            <1> 	.dSizeOfInitializedData     resd 1
   121 0000000C ????????            <1> 	.dSizeOfUninitializedData   resd 1
   122 00000010 ????????            <1> 	.dAddressOfEntryPoint       resd 1  ;RVA of the EP for program
   123 00000014 ????????            <1> 	.dBaseOfCode                resd 1
   124 00000018 ????????????????    <1>     .qImageBase                 resq 1  ;Preferred load address  
   125 00000020 ????????            <1> 	.dSectionAlignment          resd 1
   126 00000024 ????????            <1> 	.dFileAlignment             resd 1
   127 00000028 ????                <1> 	.wMajOSVer                  resw 1
   128 0000002A ????                <1> 	.wMinOSVer                  resw 1
   129 0000002C ????                <1> 	.wMajorImageVersion         resw 1
   130 0000002E ????                <1> 	.wMinorImageVersion         resw 1
   131 00000030 ????                <1> 	.wMajorSubsystemVersion     resw 1
   132 00000032 ????                <1> 	.wMinorSubsystemVersion     resw 1
   133 00000034 ????????            <1> 	.dWin32VersionValue         resd 1
   134 00000038 ????????            <1> 	.dSizeOfImage               resd 1  ;Size of ctg mem to hold program
   135 0000003C ????????            <1> 	.dSizeOfHeaders             resd 1
   136 00000040 ????????            <1> 	.dCheckSum                  resd 1
   137 00000044 ????                <1> 	.wSubsystem                 resw 1
   138 00000046 ????                <1> 	.wDllCharacteristics        resw 1
   139 00000048 ????????????????    <1> 	.qSizeOfStackReserve        resq 1
   140 00000050 ????????????????    <1> 	.qSizeOfStackCommit         resq 1  ;Default stack allocation is 256Kb
   141 00000058 ????????????????    <1> 	.qSizeOfHeapReserve         resq 1
   142 00000060 ????????????????    <1> 	.qSizeOfHeapCommit          resq 1
   143 00000068 ????????            <1> 	.dLoaderFlags               resd 1
   144 0000006C ????????            <1> 	.dNumberOfRvaAndSizes       resd 1  ;Number of data dirs entries in header
   145                              <1> endstruc
   146                              <1> 
   147                              <1> romMagicNum     equ 0107h
   148                              <1> pe32MagicNum    equ 010Bh
   149                              <1> pe64MagicNum    equ 020Bh
   150                              <1> 
   151                              <1> ;Data directory header structure
   152                              <1> 
   153                              <1> struc imageDataDirectory
   154 00000000 ????????            <1>     .virtualAddress  resd 1
   155 00000004 ????????            <1>     .size    resd 1
   156                              <1> endstruc
   157                              <1> 
   158                              <1> struc baseRelocBlock
   159 00000000 ????????            <1>     .pageRVA    resd 1  ;Offset from the load address
   160 00000004 ????????            <1>     .size       resd 1  ;Number of bytes in this block
   161                              <1>     ;Each entry is a word. High 4 bits are type of reloc (all must be 0Ah)
   162                              <1> endstruc
   163                              <1> ;Section headers that form the Section Table.
   164                              <1> ;There are wNumberOfSections many entries in this table.
   165                              <1> ;Each entry is one imageSectionHdr
   166                              <1> 
   167                              <1> struc imageSectionHdr       ;size 40 bytes
   168 00000000 ????????????????    <1>     .qName                  resb 8
   169 00000008 ????????            <1> 	.dVirtualSize           resd 1  ;If this is bigger than RawData, 0 pad
   170 0000000C ????????            <1> 	.dVirtualAddress        resd 1  ;Offset from ImageBase
   171 00000010 ????????            <1> 	.dSizeOfRawData         resd 1
   172 00000014 ????????            <1> 	.dPointerToRawData      resd 1  ;File pointer location
   173 00000018 ????????            <1> 	.dPointerToRelocations  resd 1
   174 0000001C ????????            <1> 	.dPointerToLinenumbers  resd 1
   175 00000020 ????                <1> 	.wNumberOfRelocations   resw 1
   176 00000022 ????                <1> 	.wNumberOfLinenumbers   resw 1
   177 00000024 ????????            <1> 	.dCharacteristics       resd 1
   178                              <1> endstruc
   179                              <1> 
   180                              <1> ;Section Hdr characteristics flags 
   181                              <1> imgScnCntCode   equ 20h   ;The section contains executable code.
   182                              <1> imgScnCntData   equ 40h   ;The section contains initialized data.
   183                              <1> imgScnCntBSS    equ 80h   ;The section contains uninitialized data. 
    11                                  %include "./src/Kernel/Debug/debSym.inc"    ;Always define debug symbols!
     1                              <1> ;This file will include the debuging symbols
     2                              <1> 
     3                              <1> %define true 1
     4                              <1> %define false 0
     5                              <1> 
     6                              <1> ;Switch the DEBUG to false in production!
     7                              <1> %define DEBUG false
     8                              <1> %define DPBINFO false
     9                              <1> %define REGS false
    10                              <1> %define ENDSTATUS false
    11                              <1> 
    12                              <1> 
    13                              <1> ;Use this space as the debug stack
    14                              <1> %define debStackTop 80000h
    12                                  
    13                                  ;========================START OF DOS MODULE=========================
    14                                  %include "./src/Kernel/dos.inc"
     1                              <1> ;DOS globals
     2                              <1> 
     3                              <1> ; DOS variables for reloc computations in sysinit
     4                              <1> GLOBAL dSegLen  ;Exported for calculations with dosSeg
     5                              <1> 
     6                              <1> ; DOS DATA AREA variables
     7                              <1> GLOBAL nulDevHdr
     8                              <1> GLOBAL anchorMcb
     9                              <1> GLOBAL dayOfMonth
    10                              <1> GLOBAL monthOfYear
    11                              <1> GLOBAL vConPtr
    12                              <1> GLOBAL clockPtr
    13                              <1> GLOBAL currentPSP
    14                              <1> GLOBAL editKeys
    15                              <1> GLOBAL shareCount
    16                              <1> GLOBAL shareDelay
    17                              <1> GLOBAL caseMapFunc
    18                              <1> GLOBAL charTableArray
    19                              <1> GLOBAL charTableArray.ucTable
    20                              <1> GLOBAL charTableArray.filenameUCTable
    21                              <1> GLOBAL charTableArray.filenameTerminatingTable
    22                              <1> GLOBAL charTableArray.collatingTable
    23                              <1> GLOBAL serverDispTbl
    24                              <1> GLOBAL machineName
    25                              <1> GLOBAL critPtchTbl
    26                              <1> GLOBAL dosCrit1Enter
    27                              <1> GLOBAL dosCrit1Exit
    28                              <1> GLOBAL dosCrit2Enter
    29                              <1> GLOBAL dosCrit2Exit
    30                              <1> GLOBAL dosMgrHooks
    31                              <1> GLOBAL dllHooks
    32                              <1> GLOBAL shareHooks
    33                              <1> GLOBAL goodDfltShareHook
    34                              <1> GLOBAL badDfltShareHook
    35                              <1> GLOBAL dosBIOSName
    36                              <1> GLOBAL biosVers
    37                              <1> GLOBAL biosPtr
    38                              <1> GLOBAL bootDrive
    39                              <1> GLOBAL numFiles
    40                              <1> GLOBAL lastdrvNum
    41                              <1> GLOBAL firstSftHeader
    42                              <1> GLOBAL mcbChainPtr
    43                              <1> GLOBAL vConPtr
    44                              <1> GLOBAL clockPtr
    45                              <1> GLOBAL extKeyFunc
    46                              <1> GLOBAL errorDrv
    47                              <1> GLOBAL currentNdx
    48                              <1> GLOBAL switchChar
    49                              <1> GLOBAL ctryTbl
    50                              <1> GLOBAL serverDispTblPtr
    51                              <1> GLOBAL currentDTA
    52                              <1> GLOBAL cdsHeadPtr
    53                              <1> GLOBAL dpbHeadPtr
    54                              <1> GLOBAL maxBytesSec
    55                              <1> GLOBAL bufHeadPtr
    56                              <1> GLOBAL sftHeadPtr
    57                              <1> GLOBAL numBuffers
    58                              <1> GLOBAL fcbsHeadPtr
    59                              <1> GLOBAL numPhysVol
    60                              <1> 
    61                              <1> GLOBAL i0
    62                              <1> GLOBAL i1
    63                              <1> GLOBAL i2
    64                              <1> GLOBAL i3
    65                              <1> GLOBAL i4
    66                              <1> GLOBAL i5
    67                              <1> GLOBAL i6
    68                              <1> GLOBAL i7
    69                              <1> GLOBAL i8
    70                              <1> GLOBAL i9
    71                              <1> GLOBAL i10
    72                              <1> GLOBAL i11
    73                              <1> GLOBAL i12
    74                              <1> GLOBAL i13
    75                              <1> GLOBAL i14
    76                              <1> GLOBAL i15
    77                              <1> GLOBAL i16
    78                              <1> GLOBAL i17
    79                              <1> GLOBAL i18
    80                              <1> GLOBAL i19
    81                              <1> GLOBAL i20
    82                              <1> GLOBAL i21
    83                              <1> 
    84                              <1> GLOBAL terminateProcess 
    85                              <1> GLOBAL functionDispatch 
    86                              <1> GLOBAL defaultIretq
    87                              <1> GLOBAL dosDefCritErrHdlr    
    88                              <1> GLOBAL absDiskRead      
    89                              <1> GLOBAL absDiskWrite     
    90                              <1> GLOBAL terminateRes     
    91                              <1> GLOBAL multiplexHdlr
    92                              <1> GLOBAL nulStrat
    93                              <1> GLOBAL nulIntr
    15                                  
    16                                  Segment dBSS bss private align=1
    17                                  ;---------------------------
    18                                  ;   DOS BSS data segment
    19                                  ;---------------------------
    20                                  %include "./src/Kernel/BSS/dosSeg.asm"
     1                              <1> ;This file contains the main DOS data segment
     2                              <1> dosDataArea:
     3 00000000 <res 10h>           <1>     anchorMcb   db mcb_size dup (?) ;This is space for the anchor MCB
     4 00000010 ??                  <1>     bootDrive   db ?    ;The logical drive we booted from
     5 00000011 ????????            <1>     biosVers    dd ?    ;Indicates BIOS type. Each OEM picks a number
     6 00000015 ????????????????    <1>     biosPtr     dq ?    ;For saving a data ptr to be used by BIOS/drivers
     7                              <1> ;Above is the system stats
     8                              <1> ;Below is the DOS vars, DO NOT TOUCH FROM validNetNam TO NUMJOINDRV
     9                              <1> ;Both below variables can be edited with Int 21h AX=440Bh
    10 0000001D ????                <1>     validNetNam dw ?    ;Flag if machinename valid, deflt no=0
    11 0000001F ????                <1>     shareCount  dw ?    ;Share Retry Count, number of repeats before fail.
    12 00000021 ????                <1>     shareDelay  dw ?    ;Share Delay, in multiples of ms. (TEMP, just loop)
    13 00000023 ????????????????    <1>                 dq ?    ;Unused ptr for future, current disk buffer
    14 0000002B ????????????????    <1>     vConHdlOff  dq ?    ;Ptr into buff to the next char to process in hdl req
    15                              <1>     ;   A value of 0 means no chars buffered.
    16 00000033 ????????????????    <1>     mcbChainPtr dq ?    ;Pointer to the MCB chain x
    17                              <1> sysVarsPtr:
    18 0000003B ????????????????    <1>     dpbHeadPtr  dq ?    ;Pointer to the first DPB in the DPB chain x
    19 00000043 ????????????????    <1>     sftHeadPtr  dq ?    ;Pointer to the first SFT header in SFT chain
    20 0000004B ????????????????    <1>     clockPtr    dq ?    ;Pointer to the current active CLOCK$ device header x
    21                              <1>     ;                    The last driver loaded with the CLOCK$ bit[3] set 
    22 00000053 ????????????????    <1>     vConPtr     dq ?    ;Ptr to the devdrv of the char dev controlling vCon x
    23                              <1>     ;                    The last driver loaded with the STDIN bit[0] set
    24 0000005B ????                <1>     maxBytesSec dw ?    ;Maximum number of bytes per sector (size of buffers)x
    25 0000005D ????????????????    <1>     bufHeadPtr  dq ?    ;Pointer to the head of the disk buffer chain x
    26 00000065 ????????????????    <1>     cdsHeadPtr  dq ?    ;Pointer to the head of the CDS array x
    27 0000006D ????????????????    <1>     fcbsHeadPtr dq ?    ;Pointer to the head of the System FCB chain
    28 00000075 ????                <1>     numSafeSFCB dw ?    ;Number of protected FCBs (y in FCBS=x,y)
    29 00000077 ??                  <1>     numPhysVol  db ?    ;Number of physical volumes in the system x
    30 00000078 ??                  <1>     lastdrvNum  db ?    ;Value of LASTDRIVE (default = 5) [Size of CDS array]x
    31 00000079 ??                  <1>     numBuffers  db ?    ;Buffers=30 default
    32 0000007A <res 22h>           <1>     nulDevHdr   db drvHdr_size dup (?)
    33 0000009C ??                  <1>     numJoinDrv  db ?    ;Number of Joined Drives
    34                              <1> ;Additional internal variables
    35 0000009D ??                  <1>     numFiles    db ?    ;FILES=5 default, max 255
    36                              <1>     ;DOSMGR hook functions and variable here
    37                              <1>     ;All DOSMGR hooks are 8 byte pointers and have been introduced to allow
    38                              <1>     ; an external application to install itself as a multitasker into the
    39                              <1>     ; DOS kernel. DOS's behaviour changes accordingly when a multitasker 
    40                              <1>     ; is installed. It is recommended that a multitasker NOT be installed
    41                              <1>     ; when a file sharing broker is not installed but that is up to the 
    42                              <1>     ; implementer to decide.  
    43                              <1>     ;Three function hooks are provided. NOTE, all functions must preserve
    44                              <1>     ; ALL registers used.
    45                              <1>     ;
    46                              <1>     ;launchTask:
    47                              <1>     ;This allows for a multitasker to install its handling routine for 
    48                              <1>     ; launching tasks. Note this is called after all setup
    49                              <1>     ; for the EXE has been done except for setting the PSP.
    50                              <1>     ; If the mode bSuFunc = 4, then we have we have the following:
    51                              <1>     ;       ecx = mode of termination
    52                              <1>     ;           = 00 -> Upon terminating, leave task in Zombie mode
    53                              <1>     ;                   awaiting for a task to read it's return code
    54                              <1>     ;           = 01 -> Upon terminating, discard all resources allocated
    55                              <1>     ;                   to the task.
    56                              <1>     ;           > 01 -> Error code, unknown function (01h).
    57                              <1>     ;This function must return to the caller via DOS with CF=CY if an error 
    58                              <1>     ;   and eax = Error code or CF=NC if all ok. DOS will then return to
    59                              <1>     ;   the parent task, with the background task hopefully scheduled to run
    60                              <1>     ;   in the DOSMGR.
    61                              <1>     ;Either before or on initial run, DOSMGR must set currentDTA in a bgTasks'
    62                              <1>     ; SDA to psp+80h. This can be done in launchBgTask.
    63                              <1>     ;
    64                              <1>     ;terminateTask:
    65                              <1>     ;This allows for a multitasker to install its handling routine for
    66                              <1>     ; cleaning up resources allocated to a task. 
    67                              <1>     ;
    68                              <1>     ;Specific function definitions:
    69                              <1>     ;
    70                              <1>     ;If we enter
    71                              <1>     ;   Input:  bx = FCB drive statuses
    72                              <1>     ;           ecx = Termination mode setting
    73                              <1>     ;           rsi = RSP value to start with
    74                              <1>     ;           rbp = execFrame. Use this to get parentPSP data et al.
    75                              <1>     ;           qword [rbp - execFrame.pProgEP] = RIP value to launch from
    76                              <1>     ;   Output: CF=NC -> Proceed with launch of bg task
    77                              <1>     ;           CF=CY -> Error exit, errorcode in eax
    78                              <1> dosMgrHooks:
    79 0000009E ??                  <1>     dosMgrPresent   db ?    ;Clear if no mgr, else set to -1
    80 0000009F ????????????????    <1>     launchTask      dq ?    ;Registers a new task, with specifics based on bSubfunc
    81 000000A7 ????????????????    <1>     terminateTask   dq ?    ;Called to tell the MGR that this task is ending
    82                              <1> 
    83                              <1>     ;DLL Manager hook functions here
    84                              <1>     ;All DLLMGR hooks are 8 byte pointers and are new to the DOS kernel.
    85                              <1>     ;They allow for the installation of a DLL manager program, which hooks
    86                              <1>     ; these pointers, to point to their own subroutines in the DLLMGR prog.
    87                              <1>     ;These hooks are called from within EXEC, only for PE type executables
    88                              <1>     ; and from within EXIT. 
    89                              <1>     ;
    90                              <1>     ;In EXEC mode, modes 0 and 1 create a PSP for the task and thus the 
    91                              <1>     ; task is self standing and has a PSP as a Unique ID. 
    92                              <1>     ;If mode 3, this is an overlay EXE. This means it is not it's own task and 
    93                              <1>     ; is an extension of the parent task. In such a case, the DLL Manager must 
    94                              <1>     ; look at where the overlay is to be loaded (execFrame.pProgBase), and if 
    95                              <1>     ; there is already an overlay there, to remove it's functions from the 
    96                              <1>     ; registery, replacing them with the new overlay's functions. All overlay
    97                              <1>     ; exports must be flagged as belonging to the parent task PSP so that
    98                              <1>     ; on EXIT, they can be removed from the registry. 
    99                              <1>     ;
   100                              <1>     ;In EXIT, the PSP of the ending task must be taken
   101                              <1>     ; into consideration, as if the PSP isn't registered then the task ending
   102                              <1>     ; is a .COM file or an .EXE with no exports.
   103                              <1>     ;Furthermore, if register fails (due to memory or namespace constraints),
   104                              <1>     ; it must return CF=CY.
   105                              <1> dllHooks:
   106 000000AF ????????????????    <1>     registerDLL     dq ?  ;Entered with rbp = execFrame
   107 000000B7 ????????????????    <1>     unloadDLLHook   dq ?  ;
   108                              <1>     ;Share hook functions here
   109                              <1>     ;All share hooks now take 8 bytes rather than 4 bytes as before
   110                              <1>     ;Thus ALL offsets from SFT header increase by 4 bytes and each entry
   111                              <1>     ; is a QWORD entry. Please adjust SHARE.EXE access as necessary.
   112                              <1> 
   113                              <1>     ;Note to programmer - Please adjust as necessary:
   114                              <1>     ;Functions which are nowhere called (yet) are noted as UNUSED in caps.
   115                              <1>     ;Those which are not meant to be used are noted as unused in lower case.
   116                              <1>     ;Those suffixed with a ? have their future in question.
   117                              <1>     ;Those suffixed with a / are done partially wrt MSDOS.
   118                              <1> 
   119                              <1> shareHooks:
   120 000000BF ????????????????    <1>     markerShare dq ?  ;Marker Share hook
   121 000000C7 ????????????????    <1>     openShare   dq ?  ;Share called on open.                          DONE 
   122 000000CF ????????????????    <1>     closeShare  dq ?  ;Share called on close.                         DONE
   123 000000D7 ????????????????    <1>     closeCompShare  dq ?  ;Share to close all files for a machine.    DONE
   124 000000DF ????????????????    <1>     closeTaskShare  dq ?  ;Share to close all files for a task.       DONE
   125 000000E7 ????????????????    <1>     closeNameShare  dq ?  ;Share to close file by name.               DONE
   126 000000EF ????????????????    <1>     lockFileShare   dq ?  ;Share to lock file region.                 DONE
   127 000000F7 ????????????????    <1>     unlockFileShare dq ?  ;Share to unlock file region.               DONE
   128 000000FF ????????????????    <1>     checkFileLockShare  dq ?  ;Share to check file region locked.     DONE
   129 00000107 ????????????????    <1>     openFileListShare   dq ?  ;Share to get open file list entry.     DONE
   130 0000010F ????????????????    <1>     updateFCBfromSFTShr dq ?  ;Share to update FCB from the SFT.      UNUSED
   131 00000117 ????????????????    <1>     fstClstOfFCBShare   dq ?  ;Share to get first cluster of FCB.     UNUSED
   132 0000011F ????????????????    <1>     closeDupFileShare   dq ?  ;Share to close file if dup for proc.   DONE
   133 00000127 ????????????????    <1>     closeNewHdlShare    dq ?  ;Share to close hdls of rec opened file. DONE
   134 0000012F ????????????????    <1>     updateDirShare      dq ?  ;Share to update dir info in SFT.       DONE 
   135                              <1> ;Create SFT header and corresponding array of five default sft entries
   136 00000137 <res Ah>            <1>     firstSftHeader  db sfth_size dup (?)
   137 00000141 <res 4Fh>           <1>     firstSft    db sft_size dup (?)
   138 00000190 <res 4Fh>           <1>     secondSft   db sft_size dup (?)
   139 000001DF <res 4Fh>           <1>     thirdSft    db sft_size dup (?)
   140 0000022E <res 4Fh>           <1>     fourthSft   db sft_size dup (?)
   141 0000027D <res 4Fh>           <1>     fifthSft    db sft_size dup (?)
   142                              <1> 
   143                              <1> ;Virtual CONsole Buffers
   144 000002CC ??                  <1>     vConCursPos db ?     ;Keeps track for tabs stops (and var with 7)
   145                              <1>     ;Only incremented when CON device runs vCon
   146                              <1> vConBuf:    ;Proper buffer symbol
   147 000002CD ??                  <1>     vConCurCnt  db ?     ;Current count of chars in vConBuffer
   148 000002CE <res 80h>           <1>     vConBuffer  db 128 dup (?)   ;General Buffer for vCon 256 bytes. 
   149                              <1>     ;Only 128 bytes at a time if doing CON IO via handle
   150 0000034E <res 80h>           <1>     vConInBuf   db 128 dup (?)   ;vConsole buffer for reads ONLY
   151 000003CE ??                  <1>                 db ?     ;Padding Buffer!
   152                              <1> 
   153 000003CF ??                  <1>     printEcho   db ?  ;If 0, no echo. Non-zero => Echo to PRN
   154 000003D0 ??                  <1>     verifyFlag  db ?  ;If set, writes are replaces with write/verify x
   155 000003D1 ??                  <1>     switchChar  db ?  ;Editable by 21h/37h. Set to / by default
   156 000003D2 ??                  <1>     vConErr     db ?  ;Inc on each char output call
   157                              <1>     ;Is and-ed with 03h, checks for ^C on every fourth char output
   158                              <1> 
   159 000003D3 ??                  <1>     allocStrat  db ?  ;Allocation strategy. First, Best or Last fit
   160                              <1> ;Server stuff. Default to all zeros (blank)
   161 000003D4 ??                  <1>     shareFlag   db ?  ;Sharing flag, set to 0 for now (future expansion)
   162                              <1>     ;When share is loaded, this flag is set to -1 !!!!!
   163 000003D5 ??                  <1>     serverCnt   db ?  ;Increments on each 21h/5E01h call
   164 000003D6 <res 10h>           <1>     machineName db 16 dup (?) ;Machine name (Set via 21h/5E01h) (set to SPC)    
   165                              <1> ;Swappable Data Area
   166 000003E6 <res 20h>           <1>     critPtchTbl dq 4 dup (?)  ;Offsets from DosDataArea addr to the 4 funcs
   167 00000406 ??                  <1>                 db ?  ;Alignment byte
   168                              <1> sda:    ;Start of Swappable Data Area, this bit can remain static
   169 00000407 ??                  <1>     critErrFlag db ?  ;Critical error flag, set on entry to Int 24h x
   170 00000408 ??                  <1>     inDOS       db ?  ;Inc on each DOS call, dec when leaving x
   171 00000409 ??                  <1>     errorDrv    db ?  ;Drive on which error occured or FFh x
   172 0000040A ??                  <1>     errorLocus  db ?  ;Where the error took place  
   173 0000040B ????                <1>     errorExCde  dw ?  ;Extended Error Code
   174 0000040D ??                  <1>     errorAction db ?  ;Suggested action for error  
   175 0000040E ??                  <1>     errorClass  db ?  ;Error Class
   176 0000040F ????????????????    <1>     errorVolLbl dq ?    ;Sets a ptr to the volume label of the error disk
   177 00000417 ????????????????    <1>     currentDTA  dq ?  ;Address of the current DTA x
   178 0000041F ????????????????    <1>     currentPSP  dq ?  ;Address of current PSP x
   179                              <1> 
   180 00000427 ????????????????    <1>     xInt23hRSP  dq ?  ;Saves RSP across an Int 23h call
   181 0000042F ????                <1>     errorLevel  dw ?  ;Last return code returned by Int 21h/4Ch x
   182                              <1>     ;Upper byte: 0=Normal, 1=Abort Occured, 2=CtrlC, 3=TSR 21h/31h
   183                              <1>     ;Lower byte: User Specified
   184 00000431 ??                  <1>     currentDrv  db ?  ;Default drive x
   185 00000432 ??                  <1>     breakFlag   db ?  ;If set, check for CTRL+C on all DOS calls x
   186                              <1> ;SDA, needs to be replaced between processes
   187                              <1> sdaDOSSwap:
   188 00000433 ????????????????    <1>     oldRAX      dq ?  ;Store rax on entering Int21h or returning Int 23h
   189 0000043B ????????????????    <1>     serverPSP   dq ?  ;PSP of prog making server request, used by net & share
   190 00000443 ????                <1>     machineNum  dw ?  ;for sharing/networking 00h = default number (us)
   191 00000445 ????????????????    <1>     firstMCB    dq ?  ;First fit MCB for request
   192 0000044D ????????????????    <1>     bestMCB     dq ?  ;Best fit MCB for request
   193 00000455 ????????????????    <1>     lastMCB     dq ?  ;Last fit MCB for request
   194 0000045D ????                <1>     dirEntryNum dw ?  ;Offset into directory of entry we are looking for
   195 0000045F ??                  <1>     volIdFlag   db ?    ;If set, we are searching for a volume ID
   196 00000460 ????????????????    <1>     xInt24hRSP  dq ?  ;RSP across an Int 24h call
   197 00000468 ??                  <1>     Int24bitfld db ?  ;Copies the bit field given to the Int 24h handler
   198 00000469 ??                  <1>     fileDirFlag db ?  ;File/Directory flag. 0 = Dir, ¬0 = File
   199 0000046A ??                  <1>     Int24Fail   db ?  ;Set if Int 24h returned fail
   200                              <1> 
   201 0000046B ????????????????    <1>     oldoldRSP   dq ?  ;RSP at prev Int 21h entry if called from within Int 21h
   202 00000473 ????????????????    <1>     dosReturn   dq ?  ;Used as a var to return when juggling stack
   203 0000047B ????????????????    <1>     oldRSP      dq ?  ;RSP when entering Int 21h
   204 00000483 ????????????????    <1>     oldRBX      dq ?  ;Temp var to save value of rbx during an Int 21 call
   205 0000048B ??                  <1>     dirFlag     db ?  ;Directory Flag. 0 => Search for Dir, 1 => for File
   206                              <1> ;The below flag tells DOS to print ^C in the termination function
   207 0000048C ??                  <1>     ctrlCExit   db ?  ;-1 => CTRL+BREAK termination, 0 otherwise
   208 0000048D ??                  <1>     fcbSpaceOk  db ?  ;If set, we allow embedded spaces in the filenames
   209                              <1> ;Time stuff
   210                              <1> ;Read the below two as a word
   211 0000048E ??                  <1>     dayOfMonth  db ?  ;01h - 1Fh (1 - 31)
   212 0000048F ??                  <1>     monthOfYear db ?  ;01h - 0Ch (1 - 12)
   213 00000490 ??                  <1>     years       db ?  ;00h - 7Fh (00 = 1980 - 127 = 2107)
   214 00000491 ????                <1>     daysOffset  dw ?  ;Days since 1-1-1980
   215 00000493 ??                  <1>     dayOfWeek   db ?  ;0 = Sunday <-> 6 = Saturday
   216                              <1> 
   217 00000494 ??                  <1>     vConDrvSwp  db ?  ;Set if vCon controlled by a different driver to vConPtr
   218 00000495 ??                  <1>     int28Flag   db ?  ;If set, Int 28h should be called, if clear no
   219 00000496 ??                  <1>     procExiting db ?  ;Set to -1 if in process termination
   220                              <1> ;A request routed through the FCB or handle uses primReqPkt for its main IO.
   221                              <1> ;A secondary header is present to allow simultaneous echoing to console 
   222                              <1> ; without forcing to re-build the whole primary request block.
   223                              <1> ;Thus all disk io uses the primary and CharIO goes through the primary
   224                              <1> ; with secondary char output going through the secondary header
   225                              <1> ;(i.e the char input functions use the primary for main input and secondary 
   226                              <1> ; for output)
   227                              <1> ;ioReqPkt is the largest possible packet
   228 00000497 <res 2Ah>           <1>     secdReqPkt  db ioReqPkt_size dup (?) ;Secondary, Char IO Reqhdr
   229 000004C1 <res 2Ah>           <1>     primReqPkt  db ioReqPkt_size dup (?) ;Main Drv Reqhdr 
   230                              <1> altRet: ;Accessed as a qword
   231 000004EB <res 2Ah>           <1>     critReqPkt  db ioReqPkt_size dup (?)  ;Used for ^C detection!
   232 00000515 ??                  <1>     pspCopyFlg  db ?  ;Set to -1 for child process PSP, 0 for simple PSP copy
   233                              <1> ;Swappable Buffers
   234 00000516 ????????????        <1>     CLOCKrecrd  db 6 dup (?)  ;Clock driver record
   235                              <1>     ;We add an additional byte to save ah too
   236 0000051C ????                <1>     singleIObyt dw ?  ;For single IO byte buffers
   237                              <1> extErrByteBuf:  ;Used by DOS execpt hdlr to build strings. Immediate abort!
   238                              <1> exeHdrSpace:    ;This needs 112 bytes in EXEC only, buffer is free for use!
   239 0000051E <res 80h>           <1>     buffer1     db 128 dup (?)  ;Space for one path and file name
   240                              <1> sectHdr:        ;This needs 20 bytes in EXEC only
   241 0000059E <res 80h>           <1>     buffer2     db 128 dup (?) ;Space for a second path and file name
   242 0000061E ????????????????    <1>     fname1Ptr   dq ?  ;Ptr to first filename argument
   243 00000626 ????????????????    <1>     fname2Ptr   dq ?  ;Ptr to second filename argument
   244 0000062E ??                  <1>     skipDisk    db ?  ;Set => Read Disk, Clear => Skip checking on disk
   245                              <1> ;Misc bookkeeping flags and vars
   246 0000062F <res 2Bh>           <1>     dosffblock  db ffBlock_size dup (?)  ;FF block (fullsize unlike DOS)
   247 0000065A <res 20h>           <1>     curDirCopy  db fatDirEntry_size dup (?)  ;Dir copy
   248 0000067A <res 5Fh>           <1>     tmpCDS      db cds_size dup (?)  ;Temp CDS for Server calls that need a tmp CDS
   249 000006D9 <res Ch>            <1>     fcbName     db 11+1 dup (?)   ;11 chars for 8.3 ( w/o the dot) and terminating 0
   250 000006E5 <res Ch>            <1>     wcdFcbName  db 11+1 dup (?)  ;Used to expand any wildcards for rename
   251 000006F1 ????????????????    <1>     fileDirSect dq ?  ;File/Directory starting sector, for each level
   252 000006F9 ??                  <1>     volIncmpFCB db ?  ;Set to -1 if the volume uses FAT32 (or all incompat FS)
   253 000006FA ??                  <1>     extFCBAttr  db ?  ;Extended FCB file attribute
   254 000006FB ??                  <1>     extFCBFlag  db ?  ;Set to -1 if Extended FCB
   255 000006FC ??                  <1>     searchAttr  db ?  ;Directory Search attributes
   256 000006FD ??                  <1>     fileOpenMd  db ?  ;Open mode (compat, r/w/rw?)
   257 000006FE ??                  <1>     fileFDflg   db ?  ;01h = File Found!, 04h = File deleted!
   258 000006FF ??                  <1>     badNameRen  db ?  ;Device name or File not found for rename
   259 00000700 ??                  <1>     rwFlag      db ?  ;00h=Read, 1=Write, read/write/share error reporting
   260 00000701 ??                  <1>     spliceFlag  db ?  ;00 = Relative path, !0 = Full path
   261 00000702 ??                  <1>     dosInvoke   db ?  ;0 = Invoked via Int 21h, -1 = Invoked via 21h/5D01h
   262                              <1> 
   263 00000703 ??                  <1>     vConInsert  db ?  ;Insert mode on 21/0ah (0 = not insert, !0 = insert)
   264 00000704 ??                  <1>     fileExist   db ?  ;-1 if file in pathspec exists (create/open)
   265 00000705 ??                  <1>     parDirExist db ?  ;-1 if parent directory for file exists (create/open)
   266 00000706 ??                  <1>     exitType    db ?  ;Forms the upper byte of the errorlvl
   267 00000707 ??                  <1>     openCreate  db ?  ;If open, set to 0, if Create set to -1
   268 00000708 ??                  <1>     delChar     db ?  ;Char to replace first byte of deleted file's name
   269 00000709 ??                  <1>     workingDrv  db ?  ;Working drive number, 0 based, from DPB
   270                              <1> qPtr:       ;Stores working DPB and/or device driver (if r/w a char device)
   271                              <1> workingDD:  ;Create a symbol for the working device driver too
   272 0000070A ????????????????    <1>     workingDPB  dq ?  ;Ptr to the DPB of the drive being accessed
   273 00000712 ????????????????    <1>     workingCDS  dq ?  ;Ptr to the CDS of the drive being accessed
   274 0000071A ????????????????    <1>     workingFCB  dq ?  ;Ptr to the caller FCB for FCB function
   275                              <1> ;Below is the symbol for saving the oldSFTptr during a char func
   276                              <1> vConAltSFTPtr: ;Alternate symbol for working SFT (used when CON is swapped)
   277 00000722 ????????????????    <1>     workingSFT  dq ?  ;Temporary SFT (may not be not current) ptr being used
   278 0000072A ????????????????    <1>     curHdlPtr   dq ?  ;Ptr to JFT handle entry in current PSP
   279 00000732 ????????????????    <1>     currentSFT  dq ?  ;Ptr to the SFT of the file being accessed
   280 0000073A ????                <1>     currentNdx  dw ?  ;Used to access the current SFTNdx being opened/created
   281 0000073C ????                <1>     currentHdl  dw ?  ;The current file handle is saved here
   282 0000073E ????????????????    <1>     currBuff    dq ?  ;Ptr to the Current Buffer (hdr) being accessed
   283                              <1> ;Temp vars, used when walking FAT or changing sectors, or reporting sector num
   284                              <1> ; and 32 byte offset into the sector for directory
   285 00000746 ????????????????    <1>     tempSect    dq ?  ;A scratch sector number
   286                              <1> pathLen:    ;Used to store the length of a path string for removal strcmp
   287 0000074E ????                <1>     entry       dw ?  ;32 byte offset into a sector or #fats sectors/fat
   288                              <1> ;***************************************************|
   289                              <1> ; Needs to be set up before any file access         |
   290                              <1> ; These vars keep track of file access properties   |
   291                              <1> ;   and must be used only for such purposes.        |
   292                              <1> ;***************************************************|
   293 00000750 ????????            <1>     currClustF  dd ?  ;Relative cluster in file being r/w to/from
   294 00000754 ????????            <1>     currClustD  dd ?  ;Current Disk Cluster being r/w to/from
   295                              <1> 
   296 00000758 ????????            <1>     currSectF   dd ?  ;Current Sector in File being r/w to/from
   297 0000075C ??                  <1>     currSectC   db ?  ;Current Sector in Cluster being r/w to/from
   298 0000075D ????????????????    <1>     currSectD   dq ?  ;Current absolute Sector number on Disk
   299                              <1> 
   300 00000765 ????                <1>     currByteS   dw ?  ;Current Byte in sector being r/w to/from
   301 00000767 ????????            <1>     currByteF   dd ?  ;Current Byte in file being r/w to/from
   302                              <1> ;***************************************************|
   303 0000076B ????????            <1>     lastClust   dd ?  ;Number of the last (rel) cluster of the file
   304 0000076F ????????            <1>     lastClustA  dd ?  ;Number of the last (abs) cluster of file on disk
   305 00000773 ????????            <1>     tfrLen      dd ?  ;Number of bytes to transfer
   306 00000777 ????????            <1>     tfrCntr     dd ?  ;Number of bytes left to transfer
   307                              <1> ;Directory stuff
   308 0000077B ????????            <1>     dirClustPar dd ?  ;Absolute disk cluster of the start of the parent dir
   309 0000077F ????????            <1>     dirClustA   dd ?  ;Absolute cluster number of current directory
   310 00000783 ????                <1>     dirSect     dw ?  ;Sector of current directory cluster
   311 00000785 ????????            <1>     dirEntry    dd ?  ;32 byte offset in dir for file being searched for
   312                              <1> ;Error DPB 
   313 00000789 ????????????????    <1>     tmpDPBPtr   dq ?  ;A DPB for error/temporary situations
   314                              <1> ;No clash recycling below var as the vars in SDA are invalid if in CPU 
   315                              <1> ; exception hdlr. This var gets cleared on entry to the exception handler. 
   316                              <1> ;If it remains clear, the task will Abort. If it gets set, DOS or COMMAND.COM 
   317                              <1> ; caused CPU exception or we have an NMI. Then we freeze as we cant guarantee 
   318                              <1> ; anything anymore.
   319                              <1> haltDOS:
   320 00000791 ??                  <1>     mediaByte   db ?  ;Calls 1Bh and 1Ch return ptr to here
   321                              <1>     
   322 00000792 <res 2Bh>           <1>     renameFFBlk db ffBlock_size dup (?)  ;Source file "find first" block
   323 000007BD <res 20h>           <1>     renameDir   db fatDirEntry_size dup (?)  ;Build new file dir entry here
   324                              <1> ;Stacks and scratch SFT
   325 000007DD ??????              <1>     alignb  8
   326 000007E0 <res 528h>          <1>     critStack   dq 165 dup (?)
   327 00000D08 ????????????????    <1>     critStakTop dq ?
   328                              <1> 
   329 00000D10 <res 4Fh>           <1>     scratchSFT  db sft_size dup (?)  ;Used in FCB calls to emulate a SFT
   330                              <1>     
   331 00000D5F ??                  <1>     alignb  8
   332 00000D60 <res 638h>          <1>     AuxStack    dq 199 dup (?)
   333 00001398 ????????????????    <1>     AuxStakTop  dq ?  ;Auxilliary stack (Char IO, Int 25h/46h etc)
   334 000013A0 <res 638h>          <1>     DiskStack   dq 199 dup (?)
   335 000019D8 ????????????????    <1>     DiskStakTop dq ?
   336                              <1> 
   337 000019E0 ??                  <1>     lookahead   db ?  ;-1 => Lookahead on select Char function calls!
   338                              <1> ;Below is used in create and delete for vol lbl only. Else is -1.
   339 000019E1 ??                  <1>     rebuildDrv  db ?  ;Stores the drive letter of the dpb to reset.
   340                              <1>     sdaLen      equ     $ - sda 
   341                              <1>     sdaDOSLen   equ     $ - sdaDOSSwap
   342                              <1> 
   343                              <1> ;Additional variables NOT in the SDA
   344 000019E2 ????????????????    <1>     serverDispTblPtr    dq ?  ;DO NOT MOVE! Used to find server dispatch tbl
   345 000019EA <res 2Ah>           <1>     bkupReqHdr  db ioReqPkt_size dup (?)  ;A backup header to allow copying to
   346                              <1>     ;for saving the current header when quickly doing a second request
   347                              <1> 
   348                              <1>     ;Prevent toggling print if in the middle of reading an extended ASCII char
   349                              <1> inExtASCII:
   350 00001A14 ??                  <1>     noPrintTog  db ?  ;00 = Toggle as usual, 01 = Prevent toggle
   351 00001A15 ????                <1>     keybTicks   dw ?  ;Counts the number of cycles spent in a kb loop.
   352                              <1>     ;Every time this overflows, we read the clock and update the DOS internal
   353                              <1>     ; copy of the date/time record
   354                              <1>     ;The idt doesnt need to be in the SDA as we will halt interrupts
   355                              <1>     ; until we get/set the address. Thus the IDT entry returned is the 
   356                              <1>     ; correct one AT the time of calling up to "the time it takes to get
   357                              <1>     ; to the read IDT routine".
   358                              <1> dosIdtPtr:          ;21h/25h will always read a new copy of IDT here
   359 00001A17 ????                <1>     .limit  dw ?    ;Overlap this with stack below as no call overlap
   360 00001A19 ????????????????    <1>     .base   dq ?
   361                              <1>     ;Lseek and IOCTL return data in registers as well as on the caller's 
   362                              <1>     ; stack. In Int 2Fh, this could overwrite user data if the functions
   363                              <1>     ; were allowed to write to original callers register stack. 
   364                              <1>     ; So we have this structure below that is used by these functions to 
   365                              <1>     ; write their "return" data onto a "stack", even though when accessed 
   366                              <1>     ; through the multiplexer we never will read this structure. 
   367                              <1>     ; Really only 4 qwords are needed (rax-rdx) but yaknow... safety
   368 00001A21 <res 60h>           <1>     mplxRegStack    db callerFrame_size dup (?) 
    21                                  dSegLen equ ($-$$)
    22                                  
    23                                  Segment dtext code private align=1 use64
    24                                  ;---------------------------
    25                                  ;       DOS segment
    26                                  ;---------------------------
    27                                  ;DOS main data/code seg. 
    28                                  ;No separation, as this is a single binary blob.
    29                                  %include "./src/Kernel/Data/staticData.asm"
     1                              <1> 
     2                              <1> ;-----------------------------------:
     3                              <1> ;       Static Data Variables       :
     4                              <1> ;-----------------------------------:
     5                              <1> ;Encode the true version number as a macro!
     6                              <1> ;This is to avoid mutability of the true number by obtaining a pointer to it.
     7                              <1> ;Initialise the reporting version number of DOS to the true version number
     8                              <1> dosMajor equ 0  ;Version 0
     9                              <1> dosMinor equ 99 ;.99
    10                              <1> ;Revision and version flags are a Byte at most.
    11                              <1> dosRev   equ 2  
    12                              <1> dosVerFlags equ 1   ;First proper testing of kernel (Beta)
    13                              <1> dosVerMac equ (dosMinor << 8) | dosMajor    ;DOS version macro
    14                              <1> 
    15 00000000 0063                <1> dosVersion  dw dosVerMac    ;DOS version number
    16 00000002 53435042494F53202E- <1> dosBIOSName db "SCPBIOS .SYS"
    16 0000000B 535953              <1>
    17 0000000E 534350444F5320202E- <1> dosKernName db "SCPDOS  .SYS"
    17 00000017 535953              <1>
    18                              <1> ;-----------------------------------:
    19                              <1> ;        Static Data Tables         :
    20                              <1> ;-----------------------------------:
    21                              <1> ;IO Char table
    22                              <1> ;This table has Request header length, command code and error flags
    23                              <1> ; as a packed DWORD entry
    24                              <1> ioRqCmdErrTbl:
    25                              <1> ;Request header length  Reserved byte     Command code  Error Flags
    26                              <1> ;          BYTE 0          BYTE 1            BYTE 2       BYTE 3   
    27 0000001A 2A000486            <1>     db ioReqPkt_size,       00h,            drvREAD,       86h  ;AH = 00h
    28 0000001E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 01h
    29 00000022 2A000887            <1>     db ioReqPkt_size,       00h,            drvWRITE,      87h  ;AH = 02h
    30 00000026 0D000A87            <1>     db statusReqPkt_size,   00h,          drvOUTSTATUS,    87h  ;AH = 03h
    31 0000002A 0D000786            <1>     db flushReqPkt_size,    00h,          drvFLUSHINBUF,   86h  ;AH = 04h
    32 0000002E 0E000586            <1>     db ndInNoWaitPkt_size,  00h,         drvNONDESTREAD,   86h  ;AH = 05h
    33                              <1> 
    34                              <1> 
    35                              <1> 
    36                              <1> ;Keyboard vCon static data that can be edited and replaced by a user if they
    37                              <1> ; wish to install their own custom logic. The table below is NOT patched
    38                              <1> ; but instead, the function below gets replaced. By default, it points to 
    39                              <1> ; the function editKeys in charFunc.asm. 
    40 00000032 0000000000000000    <1> extKeyFunc  dq 0 ;The editing keys can be replaced by replacing this ptr
    41 0000003A 00                  <1> extESC      db 00h  ;NULL char is our Escape char
    42 0000003B 1B                  <1> extBreak    db 1Bh  ;1Bh is our Break Char
    43                              <1> ;Extended ASCII keys with special meanings
    44 0000003C 3B                  <1> extKeyTbl   db eF1
    45 0000003D E22C                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    46 0000003F 3C                  <1>             db eF2
    47 00000040 D42C                <1>             dw (buffCharInput_BE.f2 - extKeyTbl)
    48 00000042 3D                  <1>             db eF3
    49 00000043 DB2C                <1>             dw (buffCharInput_BE.f3 - extKeyTbl)
    50 00000045 3E                  <1>             db eF4
    51 00000046 102D                <1>             dw (buffCharInput_BE.f4 - extKeyTbl)
    52 00000048 3F                  <1>             db eF5
    53 00000049 552D                <1>             dw (buffCharInput_BE.f5 - extKeyTbl)
    54 0000004B 40                  <1>             db eF6
    55 0000004C 6B2D                <1>             dw (buffCharInput_BE.f6 - extKeyTbl)
    56 0000004E 41                  <1>             db eF7
    57 0000004F 722D                <1>             dw (buffCharInput_BE.f7 - extKeyTbl)
    58 00000051 4B                  <1>             db eCursL
    59 00000052 372C                <1>             dw (buffCharInput_BE.delete - extKeyTbl)
    60 00000054 4D                  <1>             db eCursR
    61 00000055 E22C                <1>             dw (buffCharInput_BE.f1 - extKeyTbl)
    62 00000057 52                  <1>             db eIns
    63 00000058 7D2D                <1>             dw (buffCharInput_BE.toggleIns - extKeyTbl)
    64 0000005A 53                  <1>             db eDel
    65 0000005B 842D                <1>             dw (buffCharInput_BE.eDel - extKeyTbl)
    66                              <1> extKeyTbl_len   equ ($ - extKeyTbl) / 3
    67                              <1> 
    68                              <1> ;When counting the number of days, first compute the number of years since
    69                              <1> ; 1980 and your year. 
    70                              <1> ;Then, using the table below, find the number of leap years between 1980
    71                              <1> ; and (YourYear - 1). 
    72                              <1> ;Then do (YourYear - 1980) * 365 + numberOfLeapYears to get the number of 
    73                              <1> ; days since 01/01/1980 and 01/01/YourYear.
    74                              <1> ;
    75                              <1> ;Use the months table to get the number of days in a normal month as leap 
    76                              <1> ; years are added using the previous comment.
    77                              <1> 
    78                              <1> ;This table is the number of days in the month
    79                              <1> ;The function which updates the days in Feb writes the number to this table
    80                              <1> monthsTbl:  
    81 0000005D 1F1C1F1E1F1E1F1F1E- <1>     db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
    81 00000066 1F1E1F              <1>
    82                              <1> 
    83                              <1> ;Error tables
    84                              <1> hardXlatTbl:
    85                              <1> ;Hard error xlat table. Used so that it can be patched by 
    86                              <1> ; multitaskers and network tools as opposed to having a static
    87                              <1> ; conversion factor as was initially. Not extensible though (thats ok)
    88 00000069 13                  <1>     db errWpd       ;Attempt to write on write protected disk
    89 0000006A 14                  <1>     db errUnkUnt    ;Unknown Unit
    90 0000006B 15                  <1>     db errDrvNR     ;Drive not ready
    91 0000006C 16                  <1>     db errUnkCmd    ;Unknown Command
    92 0000006D 17                  <1>     db errCRCerr    ;Data (CRC) error
    93 0000006E 18                  <1>     db errBadRLn    ;Bad request structure length
    94 0000006F 19                  <1>     db errSekErr    ;Seek error
    95 00000070 1A                  <1>     db errUnkMed    ;Unknown media type
    96 00000071 1B                  <1>     db errSecNF     ;Sector not Found
    97 00000072 1C                  <1>     db errNoPap     ;Printer out of paper
    98 00000073 1D                  <1>     db errWF        ;Write fault
    99 00000074 1E                  <1>     db errRF        ;Read fault
   100 00000075 1F                  <1>     db errGF        ;General fault
   101                              <1>     ;The following two adjust for share errors
   102 00000076 1F                  <1>     db errGF        ;Sharing violations
   103 00000077 1F                  <1>     db errGF        ;File Lock violation
   104 00000078 22                  <1>     db errIDC       ;Invalid Disk Change
   105                              <1> hardXlatTblL equ $ - hardXlatTbl
   106                              <1> errXlatTbl:
   107                              <1> ;Each entry is n bytes long, defined as
   108                              <1> ; Byte 0      : DOS function number for which translation will occur
   109                              <1> ; Byte 1      : Length of the table entry - 2
   110                              <1> ; Bytes n - 3 : Acceptable Error codes
   111                              <1> ; Byte n - 1  : Acceptable Error code and default value to translate to
   112                              <1> ;The table is terminated with a single -1 byte
   113                              <1> ;Note, all of these functions use the disk stack so it is important to save rax
   114                              <1> ; only on entry to a disk function
   115 00000079 38020102            <1>     db 38h, 02h, errInvFnc, errFnf                      ;getsetCountryInfo
   116 0000007D 3903030205          <1>     db 39h, 03h, errPnf, errFnf, errAccDen              ;MKDIR
   117 00000082 3A040A030205        <1>     db 3Ah, 04h, errBadEnv, errPnf, errFnf, errAccDen   ;RMDIR
   118 00000088 3B020203            <1>     db 3Bh, 02h, errFnf, errPnf                         ;setCurrentDIR (CHDIR)
   119 0000008C 3C0403020405        <1>     db 3Ch, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create File (Handle)
   120 00000092 3D0503020C0405      <1>     db 3Dh, 05h, errPnf, errFnf, errAccCde, errNhl, errAccDen ;Open File Handle
   121 00000099 3E0106              <1>     db 3Eh, 01h, errBadHdl                              ;Close File Handle
   122 0000009C 3F020605            <1>     db 3Fh, 02h, errBadHdl, errAccDen                   ;Read File Handle
   123 000000A0 40020605            <1>     db 40h, 02h, errBadHdl, errAccDen                   ;Write File Handle
   124 000000A4 4103030205          <1>     db 41h, 03h, errPnf, errFnf, errAccDen              ;Delete File (Handle)
   125 000000A9 42020601            <1>     db 42h, 02h, errBadHdl, errInvFnc                   ;LSEEK
   126 000000AD 430403020105        <1>     db 43h, 04h, errPnf, errFnf, errInvFnc, errAccDen   ;CHMOD
   127 000000B3 44050F0D010605      <1>     db 44h, 05h, errBadDrv, errInvDat, errInvFnc, errBadHdl, errAccDen ;IOCTL
   128 000000BA 45020601            <1>     db 45h, 02h, errBadHdl, errInvFnc                   ;DUP handle
   129 000000BE 46020601            <1>     db 46h, 02h, errBadHdl, errInvFnc                   ;Force DUP handle
   130 000000C2 47010F              <1>     db 47h, 01h, errBadDrv                              ;Get Current Dir
   131 000000C5 48020708            <1>     db 48h, 02h, errMCBbad, errNoMem                    ;ALLOC
   132 000000C9 49020709            <1>     db 49h, 02h, errMCBbad, errMemAddr                  ;FREE
   133 000000CD 4A03070908          <1>     db 4Ah, 03h, errMCBbad, errMemAddr, errNoMem        ;REALLOC
   134 000000D2 4B08030102040B0A    <1>     db 4Bh, 08h, errPnf, errInvFnc, errFnf, errNhl, errBadFmt, errBadEnv, 
   135 000000DA 0805                <1>     db errNoMem, errAccDen                              ;EXEC
   136 000000DC 4E03030212          <1>     db 4Eh, 03h, errPnf, errFnf, errNoFil               ;Find First (Handle)
   137 000000E1 4F0112              <1>     db 4Fh, 01h, errNoFil                               ;Find Next (Handle)
   138 000000E4 560411030205        <1>     db 56h, 04h, errDevUnk, errPnf, errFnf, errAccDen   ;REN (Handle)
   139 000000EA 57020601            <1>     db 57h, 02h, errBadHdl, errInvFnc                   ;Set Handle Time/Date
   140 000000EE 580101              <1>     db 58h, 01h, errInvFnc                              ;Get Alloc strat
   141 000000F1 5A0403020405        <1>     db 5Ah, 04h, errPnf, errFnf, errNhl, errAccDen      ;Create Unique File
   142 000000F7 5B055003020405      <1>     db 5Bh, 05h, errFilExist, errPnf, errFnf, errNhl, errAccDen ;Create New File
   143 000000FE 5C0406012421        <1>     db 5Ch, 04h, errBadHdl, errInvFnc, errShrFul, errLokVio ;Lock/Unlock File
   144 00000104 65020102            <1>     db 65h, 02h, errInvFnc, errFnf                      ;Get Ext. Count. Info
   145 00000108 66020102            <1>     db 66h, 02h, errInvFnc, errFnf                      ;Get/Set Global Codepage
   146 0000010C 6703040801          <1>     db 67h, 03h, errNhl, errNoMem, errInvFnc            ;Set Handle Count
   147 00000111 680106              <1>     db 68h, 01h, errBadHdl                              ;Commit File
   148 00000114 FF                  <1>     db -1   ;End Of Table marker
   149                              <1> 
   150                              <1> 
   151                              <1> extErrTbl:
   152                              <1> ;This table contains the default values for how to respond
   153                              <1> ; to particular errors. Fields with -1 need to be filled in before
   154                              <1> ; setting variables using this table.
   155                              <1> ;Each entry in the table is 4 bytes long, and are defined as follows:
   156                              <1> ; Byte 0: Extended Error Code as a byte
   157                              <1> ; Byte 1: Error Class
   158                              <1> ; Byte 2: Error Suggested Action
   159                              <1> ; Byte 3: Error Locus
   160                              <1> ;If a byte is -1, we dont set that variable (Thus allowing the caller to set)
   161                              <1> ;
   162                              <1> ;Error 01: Invalid function number
   163 00000115 010704FF            <1>     db errInvFnc, eClsAppFlt, eActAbt, -1   ;Locus set before call
   164                              <1> ;Error 02: File not found
   165 00000119 02080302            <1>     db errFnf, eClsNotFnd, eActUsr, eLocDsk 
   166                              <1> ;Error 03: Path not found
   167 0000011D 03080302            <1>     db errPnf, eClsNotFnd, eActUsr, eLocDsk
   168                              <1> ;Error 04: Too many open handles, and no handles are left
   169 00000121 04010401            <1>     db errNhl, eClsOoR, eActAbt, eLocUnk
   170                              <1> ;Error 05: Access being denied
   171 00000125 05030301            <1>     db errAccDen, eClsAuth, eActUsr, eLocUnk
   172                              <1> ;Error 06: Invalid File handle being provided
   173 00000129 06070401            <1>     db errBadHdl, eClsAppFlt, eActAbt, eLocUnk
   174                              <1> ;Error 07: MCB chain destroyed
   175 0000012D 07070505            <1>     db errMCBbad, eClsAppFlt, eActKil, eLocMem
   176                              <1> ;Error 08: No Memory remaining
   177 00000131 08010405            <1>     db errNoMem, eClsOoR, eActAbt, eLocMem
   178                              <1> ;Error 09: Invalid MCB block Address
   179 00000135 09070405            <1>     db errMemAddr, eClsAppFlt, eActAbt, eLocMem
   180                              <1> ;Error 0A: Bad Environment block
   181 00000139 0A070405            <1>     db errBadEnv, eClsAppFlt, eActAbt, eLocMem
   182                              <1> ;Error 0B: Data provided in a bad format
   183 0000013D 0B090301            <1>     db errBadFmt, eClsBadFmt, eActUsr, eLocUnk
   184                              <1> ;Error 0C: Access Code Invalid
   185 00000141 0C070401            <1>     db errAccCde, eClsAppFlt, eActAbt, eLocUnk
   186                              <1> ;Error 0D: Error due to Invalid Data provided
   187 00000145 0D090401            <1>     db errInvDat, eClsBadFmt, eActAbt, eLocUnk
   188                              <1> ;Error 0F: Error due to a bad drive letter being provided
   189 00000149 0F080302            <1>     db errBadDrv, eClsNotFnd, eActUsr, eLocDsk
   190                              <1> ;Error 10: Error due to attempting to delete the CWD
   191 0000014D 10030302            <1>     db errDelCD, eClsAuth, eActUsr, eLocDsk
   192                              <1> ;Error 11: Error due to a unknown device being used
   193 00000151 110D0302            <1>     db errDevUnk, eClsUnk, eActUsr, eLocDsk
   194                              <1> ;Error 12: No more file handles available
   195 00000155 12080302            <1>     db errNoFil, eClsNotFnd, eActUsr, eLocDsk
   196                              <1> ;Error 50: Network request not supported
   197 00000159 320C0302            <1>     db errNoNet, eClsClash, eActUsr, eLocDsk
   198                              <1> ;Error 20: Generic Share Violation, Sharing Resource cannot be shared
   199 0000015D 200A0202            <1>     db errShrVio, eClsLocked, eActDRet, eLocDsk
   200                              <1> ;Error 21: File Locking Violation
   201 00000161 210A0202            <1>     db errLokVio, eClsLocked, eActDRet, eLocDsk
   202                              <1> ;Error 54: Too many levels of redirection error
   203 00000165 540104FF            <1>     db errRedir, eClsOoR, eActAbt, -1
   204                              <1> ;Error 56: Bad resource password provided
   205 00000169 56030301            <1>     db errBadPass, eClsAuth, eActUsr, eLocUnk
   206                              <1> ;Error 52: Directory already exists
   207 0000016D 52010402            <1>     db errDirExist, eClsOoR, eActAbt, eLocDsk
   208                              <1> ;Error 32: Network request not supported by DOS
   209 00000171 32090303            <1>     db errNoNet, eClsBadFmt, eActUsr, eLocNet
   210                              <1> ;Error 55: Trying to duplicate a redirection for a resource
   211 00000175 550C0303            <1>     db errDupRedir, eClsClash, eActUsr, eLocNet
   212                              <1> ;Error 57: Bad parameter in request
   213 00000179 57090301            <1>     db errBadParam, eClsBadFmt, eActUsr, eLocUnk
   214                              <1> ;Error 53: Fail was returned from Int 24h
   215 0000017D 530D0401            <1>     db errFI24, eClsUnk, eActAbt, eLocUnk
   216                              <1> ;Error 24: Sharing Buffer Full
   217 00000181 24010405            <1>     db errShrFul, eClsOoR, eActAbt, eLocMem
   218 00000185 FFFFFFFF            <1>     dd -1   ;End of table signature
   219                              <1> 
   220                              <1> ;Nationalisation stuff
   221                              <1> dosNLSPtr:      ;Symbol to point to the DOS internal NLS data
   222 00000189 0000000000000000    <1> leadingZeros:   db 8 dup (0)    ;Unknown why they are 0 in DOS
   223 00000191 5C434F554E5452592E- <1> defltCtry:      db "\COUNTRY.SYS", (64-12) dup (0) ;FQ Path to COUNTRY.SYS file
   223 0000019A 535953000000000000- <1>
   223 000001A3 000000000000000000- <1>
   223 000001AC 000000000000000000- <1>
   223 000001B5 000000000000000000- <1>
   223 000001BE 000000000000000000- <1>
   223 000001C7 000000000000000000- <1>
   223 000001D0 00                  <1>
   224 000001D1 B501                <1> defaultCP:      dw 437  ;Set to CP437 default
   225 000001D3 0500                <1> ctryFunctions:  dw 5    ;Support 5 extended functions: al=01,02,04,05,06
   226                              <1> charTableArray: ;All the qwords need fixing up here
   227                              <1> .ucTable:   ;Each table length is 9 bytes in length (except the last one)
   228 000001D5 02                  <1>     db 2
   229 000001D6 [2602000000000000]  <1>     dq ucTblExt
   230                              <1> .filenameUCTable:
   231 000001DE 04                  <1>     db 4
   232 000001DF [A802000000000000]  <1>     dq fileUCTblExt
   233                              <1> .filenameTerminatingTable:
   234 000001E7 05                  <1>     db 5
   235 000001E8 [2A03000000000000]  <1>     dq fileTermTblExt
   236                              <1> .collatingTable:
   237 000001F0 06                  <1>     db 6
   238 000001F1 [5A03000000000000]  <1>     dq collTblExt
   239                              <1> ;Extended country table
   240                              <1> extCtryTbl:
   241 000001F9 01                  <1>     db 1    ;infoIDCode (always 1), also matches function 1 value
   242                              <1>     ;Below: Length of structure (not including this word and above byte)
   243 000001FA 2A00                <1>     dw extCtryTblL
   244                              <1> .countryCode:
   245 000001FC 2C00                <1>     dw 044  ;Current (Active) Country ID (044 is UK)
   246                              <1> .activeCP:
   247 000001FE B501                <1>     dw 437  ;Current (Active) Code page (starts same as default)
   248                              <1> ;Regular country table
   249                              <1> ctryTbl:
   250                              <1> ;Country Table (defaulting to UK), refer to struct in dosStruc.inc
   251 00000200 0100                <1>     dw 1    ;Date format, UK style
   252 00000202 9C00000000          <1>     db 9Ch,0,0,0,0  ;9Ch = £ in British codepage
   253 00000207 2C00                <1>     db ",",0    ;Thousand separator
   254 00000209 2E00                <1>     db ".",0    ;Decimal separator
   255 0000020B 2D00                <1>     db "-",0    ;Date separator
   256 0000020D 3A00                <1>     db ":",0    ;Time separator
   257 0000020F 00                  <1>     db 0        ;Currency format, symbol leads with no space
   258 00000210 02                  <1>     db 2        ;Number of digits after decimal point
   259 00000211 00                  <1>     db 0        ;Time format, 12hr clock
   260 00000212 0000000000000000    <1>     dq 0        ;Map to function that does UC conversions
   261 0000021A 2C00                <1>     db ",",0    ;Data list separator
   262 0000021C 000000000000000000- <1>     db 10 dup (0)
   262 00000225 00                  <1>
   263                              <1> extCtryTblL equ $ - extCtryTbl.countryCode
   264                              <1> 
   265                              <1> ucTblExt:   ;External pointer to the uppercase table
   266 00000226 8000                <1>     dw 80h
   267                              <1> ucTbl:    ;Internal ptr, used by casemapfunc
   268 00000228 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   269 00000230 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   270 00000238 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   271 00000240 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   272 00000248 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   273 00000250 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   274 00000258 B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   275 00000260 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   276 00000268 C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   277 00000270 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   278 00000278 D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   279 00000280 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   280 00000288 E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   281 00000290 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   282 00000298 F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   283 000002A0 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   284                              <1> 
   285                              <1> fileUCTblExt:   ;External ptr to the uc table for filenames
   286 000002A8 8000                <1>     dw 80h
   287                              <1> fileUCTbl:    ;Internal ptr, used to convert pathspecs correctly
   288 000002AA 809A45418E418F80    <1>     db 080h, 09Ah, 045h, 041h, 08Eh, 041h, 08Fh, 080h
   289 000002B2 4545454949498E8F    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 08Eh, 08Fh
   290 000002BA 9092924F994F5555    <1>     db 090h, 092h, 092h, 04Fh, 099h, 04Fh, 055h, 055h
   291 000002C2 59999A9B9C9D9E9F    <1>     db 059h, 099h, 09Ah, 09Bh, 09Ch, 09Dh, 09Eh, 09Fh
   292 000002CA 41494F55A5A5A6A7    <1>     db 041h, 049h, 04Fh, 055h, 0A5h, 0A5h, 0A6h, 0A7h
   293 000002D2 A8A9AAABACADAEAF    <1>     db 0A8h, 0A9h, 0AAh, 0ABh, 0ACh, 0ADh, 0AEh, 0AFh
   294 000002DA B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   295 000002E2 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   296 000002EA C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   297 000002F2 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   298 000002FA D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   299 00000302 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   300 0000030A E0E1E2E3E4E5E6E7    <1>     db 0E0h, 0E1h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   301 00000312 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   302 0000031A F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   303 00000322 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   304                              <1> 
   305                              <1> fileTermTblExt:
   306 0000032A 1600                <1>     dw filenameTermTblExt_len - 2   ;Length not including this word
   307 0000032C 01                  <1>     db 1    ;Signature byte for the table (1)
   308 0000032D 00                  <1>     db 0    ;Lowest permissible char value for filename
   309 0000032E FF                  <1>     db -1   ;Highest permissible char value for filename
   310 0000032F 00                  <1>     db 0    ;Signature byte for DOS 3.3 (0)
   311                              <1> .startBadRange:
   312 00000330 00                  <1>     db 0    ;Start of the illegal range of filename chars
   313                              <1> .endBadRange:
   314 00000331 20                  <1>     db 20h  ;End of the illegal range of filename chars (inclusive)
   315 00000332 02                  <1>     db 2    ;Signature byte for DOS 3.3 (2)
   316                              <1> fileTermTbl:
   317 00000333 0E                  <1>     db fileTermTbl_len - 1 ;Length of the table below
   318 00000334 2E222F5C5B5D        <1>     db ".", '"', "/", "\", "[", "]", 
   319 0000033A 3A7C3C3E2B3D3B2C    <1>     db ":", "|", "<",">","+","=",";",","
   320                              <1>     fileTermTbl_len equ $ - fileTermTbl
   321                              <1>     filenameTermTblExt_len equ $ - fileTermTblExt
   322                              <1>     ;Buffer space
   323 00000342 000000000000000000- <1>     db 24 dup (0) ;DOS 3.30 has this buffer present
   323 0000034B 000000000000000000- <1>
   323 00000354 000000000000        <1>
   324                              <1> 
   325                              <1> collTblExt:  ;Collating sequence table, for sorting
   326 0000035A 0001                <1>     dw 0100h
   327                              <1> collTbl:
   328 0000035C 0001020304050607    <1>     db 000h, 001h, 002h, 003h, 004h, 005h, 006h, 007h
   329 00000364 08090A0B0C0D0E0F    <1>     db 008h, 009h, 00Ah, 00Bh, 00Ch, 00Dh, 00Eh, 00Fh
   330 0000036C 1011121314151617    <1>     db 010h, 011h, 012h, 013h, 014h, 015h, 016h, 017h
   331 00000374 18191A1B1C1D1E1F    <1>     db 018h, 019h, 01Ah, 01Bh, 01Ch, 01Dh, 01Eh, 01Fh
   332 0000037C 2021222324252627    <1>     db 020h, 021h, 022h, 023h, 024h, 025h, 026h, 027h
   333 00000384 28292A2B2C2D2E2F    <1>     db 028h, 029h, 02Ah, 02Bh, 02Ch, 02Dh, 02Eh, 02Fh
   334 0000038C 3031323334353637    <1>     db 030h, 031h, 032h, 033h, 034h, 035h, 036h, 037h
   335 00000394 38393A3B3C3D3E3F    <1>     db 038h, 039h, 03Ah, 03Bh, 03Ch, 03Dh, 03Eh, 03Fh
   336 0000039C 4041424344454647    <1>     db 040h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   337 000003A4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   338 000003AC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   339 000003B4 58595A5B5C5D5E5F    <1>     db 058h, 059h, 05Ah, 05Bh, 05Ch, 05Dh, 05Eh, 05Fh
   340 000003BC 6041424344454647    <1>     db 060h, 041h, 042h, 043h, 044h, 045h, 046h, 047h
   341 000003C4 48494A4B4C4D4E4F    <1>     db 048h, 049h, 04Ah, 04Bh, 04Ch, 04Dh, 04Eh, 04Fh
   342 000003CC 5051525354555657    <1>     db 050h, 051h, 052h, 053h, 054h, 055h, 056h, 057h
   343 000003D4 58595A7B7C7D7E7F    <1>     db 058h, 059h, 05Ah, 07Bh, 07Ch, 07Dh, 07Eh, 07Fh
   344 000003DC 4355454141414143    <1>     db 043h, 055h, 045h, 041h, 041h, 041h, 041h, 043h
   345 000003E4 4545454949494141    <1>     db 045h, 045h, 045h, 049h, 049h, 049h, 041h, 041h
   346 000003EC 4541414F4F4F5555    <1>     db 045h, 041h, 041h, 04Fh, 04Fh, 04Fh, 055h, 055h
   347 000003F4 594F552424242424    <1>     db 059h, 04Fh, 055h, 024h, 024h, 024h, 024h, 024h
   348 000003FC 41494F554E4EA6A7    <1>     db 041h, 049h, 04Fh, 055h, 04Eh, 04Eh, 0A6h, 0A7h
   349 00000404 3FA9AAABAC212222    <1>     db 03Fh, 0A9h, 0AAh, 0ABh, 0ACh, 021h, 022h, 022h
   350 0000040C B0B1B2B3B4B5B6B7    <1>     db 0B0h, 0B1h, 0B2h, 0B3h, 0B4h, 0B5h, 0B6h, 0B7h
   351 00000414 B8B9BABBBCBDBEBF    <1>     db 0B8h, 0B9h, 0BAh, 0BBh, 0BCh, 0BDh, 0BEh, 0BFh
   352 0000041C C0C1C2C3C4C5C6C7    <1>     db 0C0h, 0C1h, 0C2h, 0C3h, 0C4h, 0C5h, 0C6h, 0C7h
   353 00000424 C8C9CACBCCCDCECF    <1>     db 0C8h, 0C9h, 0CAh, 0CBh, 0CCh, 0CDh, 0CEh, 0CFh
   354 0000042C D0D1D2D3D4D5D6D7    <1>     db 0D0h, 0D1h, 0D2h, 0D3h, 0D4h, 0D5h, 0D6h, 0D7h
   355 00000434 D8D9DADBDCDDDEDF    <1>     db 0D8h, 0D9h, 0DAh, 0DBh, 0DCh, 0DDh, 0DEh, 0DFh
   356 0000043C E053E2E3E4E5E6E7    <1>     db 0E0h, 053h, 0E2h, 0E3h, 0E4h, 0E5h, 0E6h, 0E7h
   357 00000444 E8E9EAEBECEDEEEF    <1>     db 0E8h, 0E9h, 0EAh, 0EBh, 0ECh, 0EDh, 0EEh, 0EFh
   358 0000044C F0F1F2F3F4F5F6F7    <1>     db 0F0h, 0F1h, 0F2h, 0F3h, 0F4h, 0F5h, 0F6h, 0F7h
   359 00000454 F8F9FAFBFCFDFEFF    <1>     db 0F8h, 0F9h, 0FAh, 0FBh, 0FCh, 0FDh, 0FEh, 0FFh
   360                              <1> 
   361                              <1> asciiCharProperties:   ;This table is const. Gives "properties" of chars.
   362                              <1> ;Bit[0]=Clear if the char is an invalid filename character.
   363                              <1> ;Bit[1]=Clear if the char of a terminating type.
   364                              <1> ;Bit[2]=Clear if the char is of separator type.
   365                              <1> ;Bit[3]=Clear if the char is an invalid FCB name character.
   366                              <1> ;Bit[4-7]=Unused.    
   367                              <1> 
   368 0000045C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 00h-07h
   369 00000464 F6F0F6F6F6F6F6F6    <1>     db 0F6h, 0F0h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 08h-0Fh
   370 0000046C F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 10h-17h
   371 00000474 F6F6F6F6F6F6F6F6    <1>     db 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h, 0F6h   ;Chars 18h-1Fh
   372 0000047C F8FFF6FFFFFFFFFF    <1>     db 0F8h, 0FFh, 0F6h, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 20h-27h
   373 00000484 FFFFFFF4F4FFFEF6    <1>     db 0FFh, 0FFh, 0FFh, 0F4h, 0F4h, 0FFh, 0FEh, 0F6h   ;Chars 28h-2Fh
   374 0000048C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 30h-37h
   375 00000494 FFFFF4F4F4F4F4FF    <1>     db 0FFh, 0FFh, 0F4h, 0F4h, 0F4h, 0F4h, 0F4h, 0FFh   ;Chars 38h-3Fh
   376 0000049C FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 40h-47h
   377 000004A4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 48h-4Fh
   378 000004AC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 50h-57h
   379 000004B4 FFFFFFF6F6F6FFFF    <1>     db 0FFh, 0FFh, 0FFh, 0F6h, 0F6h, 0F6h, 0FFh, 0FFh   ;Chars 58h-5Fh
   380 000004BC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 60h-67h
   381 000004C4 FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 68h-6Fh
   382 000004CC FFFFFFFFFFFFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh, 0FFh   ;Chars 70h-77h
   383 000004D4 FFFFFFFFF4FFFFFF    <1>     db 0FFh, 0FFh, 0FFh, 0FFh, 0F4h, 0FFh, 0FFh, 0FFh   ;Chars 78h-7Fh
   384 000004DC FFFFFFFFFFFFFFFFFF- <1>     db 128 dup (0FFh)                                   ;Chars 80h-100h
   384 000004E5 FFFFFFFFFFFFFFFFFF- <1>
   384 000004EE FFFFFFFFFFFFFFFFFF- <1>
   384 000004F7 FFFFFFFFFFFFFFFFFF- <1>
   384 00000500 FFFFFFFFFFFFFFFFFF- <1>
   384 00000509 FFFFFFFFFFFFFFFFFF- <1>
   384 00000512 FFFFFFFFFFFFFFFFFF- <1>
   384 0000051B FFFFFFFFFFFFFFFFFF- <1>
   384 00000524 FFFFFFFFFFFFFFFFFF- <1>
   384 0000052D FFFFFFFFFFFFFFFFFF- <1>
   384 00000536 FFFFFFFFFFFFFFFFFF- <1>
   384 0000053F FFFFFFFFFFFFFFFFFF- <1>
   384 00000548 FFFFFFFFFFFFFFFFFF- <1>
   384 00000551 FFFFFFFFFFFFFFFFFF- <1>
   384 0000055A FFFF                <1>
    30                                  %include "./src/Kernel/Data/dispTbl.asm"
     1                              <1> ;Kernel Dispatch Function Table
     2                              <1> 
     3                              <1> kDispTbl:
     4 0000055C 4E57                <1>     dw simpleTerminate - kDispTbl     ;AH = 00H, PROCESS MANAGEMENT
     5 0000055E 8421                <1>     dw charIn_BE - kDispTbl           ;AH = 01H, CHAR IO
     6 00000560 9121                <1>     dw charOut_B - kDispTbl           ;AH = 02H, CHAR IO
     7 00000562 6722                <1>     dw auxIn_B - kDispTbl             ;AH = 03H, CHAR IO
     8 00000564 9122                <1>     dw auxOut_B - kDispTbl            ;AH = 04H, CHAR IO
     9 00000566 9922                <1>     dw prnOut_B - kDispTbl            ;AH = 05H, CHAR IO
    10 00000568 B122                <1>     dw directConIO - kDispTbl         ;AH = 06H, CHAR IO
    11 0000056A E522                <1>     dw charIn - kDispTbl              ;AH = 07H, CHAR IO
    12 0000056C 0B23                <1>     dw charIn_B - kDispTbl            ;AH = 08H, CHAR IO
    13 0000056E 6A23                <1>     dw printString_B - kDispTbl       ;AH = 09H, CHAR IO
    14 00000570 2526                <1>     dw buffCharInput_BE - kDispTbl    ;AH = 0AH, CHAR IO
    15 00000572 7A23                <1>     dw checkStdinStatus - kDispTbl    ;AH = 0BH, CHAR IO
    16 00000574 8723                <1>     dw clearbuffDoFunc - kDispTbl     ;AH = 0CH, CHAR IO
    17 00000576 6E73                <1>     dw diskReset - kDispTbl           ;AH = 0DH, DISK MANAGEMENT
    18 00000578 A273                <1>     dw selectDisk - kDispTbl          ;AH = 0EH, DISK MANAGEMENT
    19 0000057A 022E                <1>     dw openFileFCB - kDispTbl         ;AH = 0FH, FILE OPERATION       FCB
    20 0000057C 772E                <1>     dw closeFileFCB - kDispTbl        ;AH = 10H, FILE OPERATION       FCB
    21 0000057E 9D2B                <1>     dw findFirstFileFCB - kDispTbl    ;AH = 11H, FILE OPERATION       FCB
    22 00000580 592C                <1>     dw findNextFileFCB - kDispTbl     ;AH = 12H, FILE OPERATION       FCB
    23 00000582 E02C                <1>     dw deleteFileFCB - kDispTbl       ;AH = 13H, FILE OPERATION       FCB
    24 00000584 8E2E                <1>     dw sequentialReadFCB - kDispTbl   ;AH = 14H, RECORD OPERATION     FCB
    25 00000586 8E2E                <1>     dw sequentialWriteFCB - kDispTbl  ;AH = 15H, RECORD OPERTAION     FCB
    26 00000588 022E                <1>     dw createFileFCB - kDispTbl       ;AH = 16H, FILE OPERATION       FCB
    27 0000058A 0F2D                <1>     dw renameFileFCB - kDispTbl       ;AH = 17H, FILE OPERATION       FCB
    28 0000058C 5276                <1>     dw noOp - kDispTbl                ;AH = 18H, RESERVED
    29 0000058E BB73                <1>     dw getCurrentDisk - kDispTbl      ;AH = 19H, DISK MANAGEMENT
    30 00000590 CD2D                <1>     dw setDTA - kDispTbl              ;AH = 1AH, RECORD OPERATION     F/H
    31 00000592 C273                <1>     dw FATinfoDefault - kDispTbl      ;AH = 1BH, DISK MANAGEMENT
    32 00000594 C473                <1>     dw FATinfoDevice - kDispTbl       ;AH = 1CH, DISK MANAGEMENT
    33 00000596 5276                <1>     dw noOp - kDispTbl                ;AH = 1DH, RESERVED
    34 00000598 5276                <1>     dw noOp - kDispTbl                ;AH = 1EH, RESERVED
    35 0000059A 7174                <1>     dw getCurrentDPBptr - kDispTbl    ;AH = 1FH, RESERVED INTERNAL, GET CURR DRIVE DPB PTR
    36 0000059C 5276                <1>     dw noOp - kDispTbl                ;AH = 20H, RESERVED
    37 0000059E 8E2E                <1>     dw randomReadFCB - kDispTbl       ;AH = 21H, RECORD OPERATION     FCB
    38 000005A0 8E2E                <1>     dw randomWriteFCB - kDispTbl      ;AH = 22H, RECORD OPERATION     FCB
    39 000005A2 7A2D                <1>     dw getFileSizeFCB - kDispTbl      ;AH = 23H, FILE OPERATION       FCB
    40 000005A4 8E2E                <1>     dw setRelRecordFCB - kDispTbl     ;AH = 24H, RECORD OPERATION     FCB
    41 000005A6 0D74                <1>     dw setIntVector - kDispTbl        ;AH = 25H, MISC. SYS. FUNCTION
    42 000005A8 5356                <1>     dw copyPSP - kDispTbl             ;AH = 26H, PROCESS MANAGEMENT
    43 000005AA 8E2E                <1>     dw randBlockReadFCB - kDispTbl    ;AH = 27H, RECORD OPERATION     FCB
    44 000005AC 8E2E                <1>     dw randBlockWriteFCB - kDispTbl   ;AH = 28H, RECORD OPERATION     FCB
    45 000005AE F32D                <1>     dw parseFilenameFCB - kDispTbl    ;AH = 29H, FILE OPERATION       FCB
    46 000005B0 AB28                <1>     dw getDate - kDispTbl             ;AH = 2AH, TIME AND DATE
    47 000005B2 D828                <1>     dw setDate - kDispTbl             ;AH = 2BH, TIME AND DATE
    48 000005B4 E828                <1>     dw getTime - kDispTbl             ;AH = 2CH, TIME AND DATE
    49 000005B6 0929                <1>     dw setTime - kDispTbl             ;AH = 2DH, TIME AND DATE
    50 000005B8 3774                <1>     dw setResetVerify - kDispTbl      ;AH = 2EH, DISK MANAGEMENT
    51 000005BA E02D                <1>     dw getDTA - kDispTbl              ;AH = 2FH, RECORD OPERATION     F/H
    52 000005BC 4574                <1>     dw getDOSversion - kDispTbl       ;AH = 30H, MISC. SYS. FUNCTION
    53 000005BE 2057                <1>     dw terminateStayRes - kDispTbl    ;AH = 31H, PROCESS MANAGEMENT
    54 000005C0 7374                <1>     dw getDeviceDPBptr - kDispTbl     ;AH = 32H, RESERVED INTERNAL, GET DEVICE DPB PTR
    55 000005C2 9872                <1>     dw ctrlBreakCheck - kDispTbl      ;AH = 33H, MISC. SYS. FUNCTION
    56 000005C4 AB74                <1>     dw getInDOSflagPtr - kDispTbl     ;AH = 34H, RESERVED INTERNAL, GET PTR TO INDOS FLAG
    57 000005C6 BC74                <1>     dw getIntVector - kDispTbl        ;AH = 35H, MISC. SYS. FUNCTION
    58 000005C8 CB74                <1>     dw getDiskFreeSpace - kDispTbl    ;AH = 36H, DISK MANAGEMENT
    59 000005CA E25F                <1>     dw getsetSwitchChar - kDispTbl    ;AH = 37H, RESERVED INTERNAL, CHANGE SWITCH CHAR
    60 000005CC 0B60                <1>     dw getsetCountryInfo - kDispTbl   ;AH = 38H, MISC. SYS. FUNCTION
    61 000005CE A317                <1>     dw makeDIR - kDispTbl             ;AH = 39H, DIRECTORY OPERATION
    62 000005D0 041A                <1>     dw removeDIR - kDispTbl           ;AH = 3AH, DIRECTORY OPERATION
    63 000005D2 FF1B                <1>     dw setCurrentDIR - kDispTbl       ;AH = 3BH, DIRECTORY OPERATION
    64 000005D4 9030                <1>     dw createFileHdl - kDispTbl       ;AH = 3CH, FILE OPERATION       HANDLE
    65 000005D6 A130                <1>     dw openFileHdl - kDispTbl         ;AH = 3DH, FILE OPERATION       HANDLE
    66 000005D8 E331                <1>     dw closeFileHdl - kDispTbl        ;AH = 3EH, FILE OPERATION       HANDLE
    67 000005DA 2132                <1>     dw readFileHdl - kDispTbl         ;AH = 3FH, RECORD OPERATION     HANDLE
    68 000005DC 5C32                <1>     dw writeFileHdl - kDispTbl        ;AH = 40H, RECORD OPERATION     HANDLE
    69 000005DE 6832                <1>     dw deleteFileHdl - kDispTbl       ;AH = 41H, FILE OPERATION       HANDLE
    70 000005E0 CD32                <1>     dw lseekHdl - kDispTbl            ;AH = 42H, RECORD OPERATION     HANDLE
    71 000005E2 3E33                <1>     dw changeFileModeHdl - kDispTbl   ;AH = 43H, FILE OPERATION       HANDLE
    72 000005E4 4A4C                <1>     dw ioctrl - kDispTbl              ;AH = 44H, MISC. SYS. FUNCTION
    73 000005E6 5C34                <1>     dw duplicateHandle - kDispTbl     ;AH = 45H, FILE OPERATION       HANDLE
    74 000005E8 9734                <1>     dw forceDuplicateHdl - kDispTbl   ;AH = 46H, FILE OPERATION       HANDLE
    75 000005EA 871D                <1>     dw getCurrentDIR - kDispTbl       ;AH = 47H, DIRECTORY OPERATION
    76 000005EC E050                <1>     dw allocateMemory - kDispTbl      ;AH = 48H, MEMORY MANAGEMENT
    77 000005EE E452                <1>     dw freeMemory - kDispTbl          ;AH = 49H, MEMORY MANAGEMENT
    78 000005F0 EC53                <1>     dw reallocMemory - kDispTbl       ;AH = 4AH, MEMORY MANAGEMENT
    79 000005F2 AC58                <1>     dw loadExecChild - kDispTbl       ;AH = 4BH, PROCESS MANAGEMENT
    80 000005F4 5057                <1>     dw terminateClean - kDispTbl      ;AH = 4CH, PROCESS MANAGEMENT
    81 000005F6 0F75                <1>     dw getRetCodeChild - kDispTbl     ;AH = 4DH, PROCESS MANAGEMENT
    82 000005F8 AC34                <1>     dw findFirstFileHdl - kDispTbl    ;AH = 4EH, FILE OPERATION       HANDLE
    83 000005FA 1735                <1>     dw findNextFileHdl - kDispTbl     ;AH = 4FH, FILE OPERATION       HANDLE
    84 000005FC E272                <1>     dw setCurrProcessID - kDispTbl    ;AH = 50H, RESERVED INTERNAL, SET CURRENT PROCESS ID
    85 000005FE EB72                <1>     dw getCurrProcessID - kDispTbl    ;AH = 51H, RESERVED INTERNAL, GET CURRENT PROCESS ID
    86 00000600 1D75                <1>     dw getSysVarsPtr - kDispTbl       ;AH = 52H, RESERVED INTERNAL, GET SYSVARS POINTER
    87 00000602 2E75                <1>     dw createDPB - kDispTbl           ;AH = 53H, RESERVED INTERNAL, TRANSLATE A BPB TO DPB
    88 00000604 1876                <1>     dw getVerifySetting - kDispTbl    ;AH = 54H, DISK MANAGEMENT
    89 00000606 4056                <1>     dw createPSP - kDispTbl           ;AH = 55H, RESERVED INTERNAL, CREATE A PSP
    90 00000608 4735                <1>     dw renameFile - kDispTbl          ;AH = 56H, FILE OPERATION       HANDLE
    91 0000060A D335                <1>     dw getSetFileDateTime - kDispTbl  ;AH = 57H, FILE OPERATION       HANDLE
    92 0000060C 9455                <1>     dw getsetMallocStrat - kDispTbl   ;AH = 58H, MEMORY MANAGEMENT
    93 0000060E 1F76                <1>     dw getExtendedError - kDispTbl    ;AH = 59H, MISC. SYS. FUNCTION
    94 00000610 4336                <1>     dw createUniqueFile - kDispTbl    ;AH = 5AH, FILE OPERATION       HANDLE
    95 00000612 0B37                <1>     dw createNewFile - kDispTbl       ;AH = 5BH, FILE OPERATION       HANDLE
    96 00000614 1F37                <1>     dw lockUnlockFile - kDispTbl      ;AH = 5CH, RECORD OPERATION     HANDLE
    97 00000616 5376                <1>     dw dosServer - kDispTbl    ;AH = 5DH, RESERVED INTERNAL, GET CRIT. ERROR DATA
    98 00000618 1778                <1>     dw netServices - kDispTbl     ;AH = 5EH, RESERVED NETWORK FUNCTION
    99 0000061A 7D78                <1>     dw netRedir - kDispTbl  ;AH = 5FH, RESERVED NETWORK FUNCTION
   100 0000061C FC1D                <1>     dw trueName - kDispTbl            ;AH = 60H, RESERVED INTERNAL, GET TRUE NAME
   101 0000061E 0573                <1>     dw systemServices - kDispTbl      ;AH = 61H, PROCESS MANAGEMENT, NEW
   102 00000620 F472                <1>     dw getPSPaddr - kDispTbl          ;AH = 62H, PROCESS MANAGEMENT
   103 00000622 5276                <1>     dw noOp - kDispTbl                ;AH = 63H, RESERVED
   104 00000624 FD72                <1>     dw setDriverLookahead - kDispTbl  ;AH = 64H, RESERVED INTERNAL, DRIVER LOOKAHEAD
   105 00000626 A460                <1>     dw getExtLocalInfo - kDispTbl     ;AH = 65H, MISC. SYS. FUNCTION
   106 00000628 6861                <1>     dw getsetGlobalCP - kDispTbl      ;AH = 66H, MISC. SYS. FUNCTION
   107 0000062A 8B37                <1>     dw setHandleCount - kDispTbl      ;AH = 67H, FILE OPERAITON       F/H
   108 0000062C C938                <1>     dw commitFile - kDispTbl          ;AH = 68H, FILE OPERATION       HANDLE
   109                              <1>     ;dw getsetDiskSerial - kDispTbl    ;AH = 69H, RESERVED INTERNAL, GET/SET DISK SER. NUM
   110                              <1> kDispTblL  equ $ - kDispTbl 
   111                              <1> 
   112                              <1> mDispTbl:   ;Multiplex 2Fh/EAX=12xxh functions go here
   113 0000062E 30                  <1>     db mDispTblL/2  ;Number of entries in table
   114 0000062F 5B78                <1>     dw multiplexTest - mDispTbl ;Installation check, return FFh
   115 00000631 4C41                <1>     dw closeMain - mDispTbl     ;AX=1201h, Close File handle
   116 00000633 086C                <1>     dw muxGetIntVector - mDispTbl   ;AX=1202h, Get interrupt Vector
   117 00000635 5E78                <1>     dw getDosDataSeg - mDispTbl ;AX=1203h, Get DOS data segment pointer
   118 00000637 576D                <1>     dw swapPathSeparator - mDispTbl ; AX=1204h, Normalise path separator
   119 00000639 C120                <1>     dw charOut_B.in - mDispTbl  ;AX=1205h, Output Char to STDOUT
   120 0000063B 1862                <1>     dw criticalDOSError - mDispTbl ;AX=1206h, Invoke Critical Error
   121 0000063D 7800                <1>     dw makeBufferMostRecentlyUsed - mDispTbl    ;AX=1207h
   122 0000063F 304B                <1>     dw decrementOpenCount - mDispTbl    ;AX=1208h, Decrement SFT open count
   123 00000641 7901                <1>     dw flushAndFreeBuffer - mDispTbl    ;AX=1209h, Flush and Free disk buffer
   124 00000643 C679                <1>     dw shareCriticalError - mDispTbl    ;AX=120Ah, Signal Share Critical Error
   125 00000645 3279                <1>     dw shareCheckOpenViolation - mDispTbl  ;AX=120Bh, Signal Sharing Violation 
   126 00000647 B83D                <1>     dw openDriverMux - mDispTbl ;AX=120Ch, Open device
   127 00000649 B82A                <1>     dw getDateAndTimeOld - mDispTbl ;AX=120Dh, Get Date and Time words
   128 0000064B B300                <1>     dw markBuffersAsUnreferenced - mDispTbl ;AX=120Eh
   129 0000064D CD00                <1>     dw makeBufferMostRecentlyUsedGetNext - mDispTbl ;AX=120Fh
   130 0000064F DB00                <1>     dw findUnreferencedBuffer - mDispTbl ;AX=1210h
   131 00000651 D26D                <1>     dw normaliseFileName - mDispTbl ;AX=1211h
   132 00000653 B36D                <1>     dw strlen - mDispTbl ;AX=1212h, Get Length of ASCIIZ string
   133 00000655 636D                <1>     dw uppercaseChar - mDispTbl ;AX=1213h, Uppercase Char
   134 00000657 ED6E                <1>     dw compareFarPointers - mDispTbl   ;AX=1214h
   135 00000659 4A01                <1>     dw flushAndCleanBuffer - mDispTbl   ;AX=1215h
   136 0000065B 544A                <1>     dw getSFTPtrfromSFTNdx - mDispTbl   ;AX=1216h
   137 0000065D 256D                <1>     dw getCDSforDrive - mDispTbl    ;AX=1217h
   138 0000065F 366C                <1>     dw getUserRegs - mDispTbl   ;AX=1218h
   139 00000661 CA6C                <1>     dw getCDS - mDispTbl    ;AX=1219h
   140 00000663 790E                <1>     dw getDrvLetterFromPath - mDispTbl ;AX=121Ah
   141 00000665 4B2A                <1>     dw setDaysInFeb - mDispTbl  ;AX=121Bh
   142 00000667 B278                <1>     dw mpxChecksum - mDispTbl  ;AX=121Ch -> Checksum memory
   143 00000669 BF78                <1>     dw mpxSum - mDispTbl  ;AX=121Dh -> Sum Memory
   144 0000066B EB6D                <1>     dw compareFileNames - mDispTbl ;AX=121Eh, Compare Filenames
   145 0000066D 746C                <1>     dw buildNewCDS - mDispTbl   ;AX=121Fh, Build CDS
   146 0000066F 894A                <1>     dw getJFTPtr - mDispTbl     ;AX=1220h, Get JFT entry
   147 00000671 201D                <1>     dw trueNameMultiplex - mDispTbl     ;AX=1221h, Truename
   148 00000673 6071                <1>     dw setErrorVars - mDispTbl ;AX=1222h, Set Extended Error Info
   149 00000675 3D16                <1>     dw checkIfCharDevice - mDispTbl  ;AX=1223, Check If Char Device
   150 00000677 0E79                <1>     dw shareRetryCountdown - mDispTbl   ;AX=1224h, Share Retry
   151 00000679 A86D                <1>     dw strlen2 - mDispTbl   ;AX=1225h, strlen
   152                              <1>     ;The file ops need all vars setup as if accessing thru DOS
   153 0000067B 6678                <1>     dw mpxOpen - mDispTbl       ;AX=1226h, Open File
   154 0000067D 1131                <1>     dw closeFileHdl - mDispTbl  ;AX=1227h, Close File
   155 0000067F 6E78                <1>     dw mpxLseek - mDispTbl      ;AX=1228h, LSEEK
   156 00000681 4F31                <1>     dw readFileHdl - mDispTbl   ;AX=1229h, Read File
   157 00000683 8075                <1>     dw noOp - mDispTbl          ;AX=122Ah, Nop, Set FASTOPEN EP (reserved)
   158 00000685 9078                <1>     dw mpxIOCTL - mDispTbl      ;AX=122Bh, IOCTL
   159 00000687 216F                <1>     dw getDrvChain - mDispTbl   ;AX=122Ch, Get device Chain (ptr in rax)
   160 00000689 2C6F                <1>     dw getExtErrCde - mDispTbl  ;AX=122Dh, Get extended error code
   161 0000068B 8075                <1>     dw noOp - mDispTbl          ;AX=122Eh, Nop, Get/Set error table (reserved)
   162 0000068D 8873                <1>     dw setDOSversion - mDispTbl ;AX=122Fh, Set DOS version to report. Undocumented.
   163                              <1> mDispTblL   equ     $ - mDispTbl
   164                              <1> 
   165                              <1> serverDispTbl:  ;Server Dispatch functions
   166 0000068F 0B                  <1>     db serverDispTblL/2                         ;Number of entries
   167 00000690 6775                <1>     dw serverDispatch - serverDispTbl           ;AX=5D00h
   168 00000692 B975                <1>     dw commitAllFilesForProcess - serverDispTbl ;AX=5D01h
   169 00000694 1276                <1>     dw closeFilesByName - serverDispTbl         ;AX=5D02h
   170 00000696 2376                <1>     dw closeFilesByComputer - serverDispTbl     ;AX=5D03h
   171 00000698 2B76                <1>     dw closeFilesByProcess - serverDispTbl      ;AX=5D04h
   172 0000069A 3376                <1>     dw getOpenFileListEntry - serverDispTbl     ;AX=5D05h
   173 0000069C 4E76                <1>     dw getSDAData - serverDispTbl               ;AX=5D06h
   174 0000069E 7876                <1>     dw printerRedir - serverDispTbl             ;AX=5D07h
   175 000006A0 7876                <1>     dw printerRedir - serverDispTbl             ;AX=5D08h
   176 000006A2 7876                <1>     dw printerRedir - serverDispTbl             ;AX=5D09h
   177 000006A4 8576                <1>     dw setExtendedErrorInfo - serverDispTbl     ;AX=5D0Ah
   178                              <1> serverDispTblL   equ     $ - serverDispTbl
    31                                  %if DEBUG
    32                                  %include "./src/Kernel/Debug/debug.asm" ;Only include if debug symbols on!
    33                                  %endif
    34                                  %include "./src/Kernel/FAT/buffun.asm"
     1                              <1> ;This file contains FAT disk buffer related functions that
     2                              <1> ; dont fit anywhere else. These functions form a part of the FAT driver
     3                              <1> ;----------------------------------------------------
     4                              <1> ;           Externally referenced functions         :
     5                              <1> ;----------------------------------------------------
     6                              <1> 
     7                              <1> makeBufferMostRecentlyUsed: ;Int 2Fh AX=1207h
     8                              <1> ;Sets the buffer in rdi to the head of the chain
     9                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    10                              <1> ;Output: Buffer header set to the head of the chain
    11 000006A6 48393D(5D000000)    <1>     cmp qword [bufHeadPtr], rdi ;Is buffer already at the head?
    12                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000006AD 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000006AF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    13 000006B0 56                  <1>     push rsi
    14 000006B1 488B35(5D000000)    <1>     mov rsi, qword [bufHeadPtr] ;Go to the head of the pointer
    15                              <1> .mainlp:
    16 000006B8 48393E              <1>     cmp qword [rsi + bufferHdr.nextBufPtr], rdi ;Is the next buffer ours?
    17 000006BB 7405                <1>     je .fnd  ;Found the buffer as the next buffer in the chain
    18 000006BD 488B36              <1>     mov rsi, qword [rsi + bufferHdr.nextBufPtr]   ;Goto next buffer
    19 000006C0 EBF6                <1>     jmp short .mainlp
    20                              <1> .fnd:
    21 000006C2 57                  <1>     push rdi
    22 000006C3 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Get next buffer from rdi in rdi
    23 000006C6 48893E              <1>     mov qword [rsi + bufferHdr.nextBufPtr], rdi ;Set prev buf to goto next buf
    24 000006C9 5F                  <1>     pop rdi ;Get original buf back
    25 000006CA 4889FE              <1>     mov rsi, rdi    ;Save new head buf in rsi
    26 000006CD 488735(5D000000)    <1>     xchg qword [bufHeadPtr], rsi ;Set rsi to head, get new 2nd buf in rsi
    27 000006D4 488937              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rsi ;Set 2nd buf to rsi
    28 000006D7 5E                  <1>     pop rsi
    29                              <1>     return
    13                              <2> %%_ret:
    14 000006D8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    30                              <1> 
    31                              <1> markBuffersAsUnreferencedWrapper:
    32                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    33                              <1> ; and preserves rdi
    34 000006D9 57                  <1>     push rdi
    35 000006DA E802000000          <1>     call markBuffersAsUnreferenced
    36 000006DF 5F                  <1>     pop rdi
    37                              <1>     return
    13                              <2> %%_ret:
    14 000006E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                              <1> 
    39                              <1> markBuffersAsUnreferenced:  ;Int 2Fh AX=120Eh
    40                              <1> ;Marks all buffers as unreferenced (clears the reference bit from all buffers)
    41                              <1> ;Output: rdi = First disk buffer
    42 000006E1 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
    43 000006E8 57                  <1>     push rdi
    44                              <1> .lp:
    45 000006E9 806709DF            <1>     and byte [rdi + bufferHdr.bufferFlags], ~refBuffer
    46 000006ED 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    47 000006F0 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
    48 000006F7 75F0                <1>     jne .lp
    49 000006F9 5F                  <1>     pop rdi
    50                              <1>     return
    13                              <2> %%_ret:
    14 000006FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    51                              <1> 
    52                              <1> makeBufferMostRecentlyUsedGetNext: ;Int 2Fh AX=120Fh
    53                              <1> ;Sets the buffer in rdi to the head of the chain and gets the 
    54                              <1> ; second buffer in the chain in rdi
    55                              <1> ;Input: rdi = Buffer header to move to the head of the chain
    56                              <1> ;Output: rdi = Second buffer in the chain
    57 000006FB 52                  <1>     push rdx
    58 000006FC 488B17              <1>     mov rdx, qword [rdi + bufferHdr.nextBufPtr] ;Save next ptr in rdx
    59 000006FF E8A2FFFFFF          <1>     call makeBufferMostRecentlyUsed ;Make the buffer most recently used
    60 00000704 4889D7              <1>     mov rdi, rdx    ;Continue searching from where we left off
    61 00000707 5A                  <1>     pop rdx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00000708 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> findUnreferencedBuffer: ;Int 2Fh AX=1210h
    65                              <1> ;Finds the first unreferenced buffer starting at the given buffer header.
    66                              <1> ;Input: rdi = Buffer header to start searching at
    67                              <1> ;Output: ZF=NZ => rdi = Unreferenced Buffer Header
    68                              <1> ;        ZF=ZE => No unreferenced buffer found
    69 00000709 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Start by checking rdi is not at the end of the list already :)
    70                              <1>     rete    ;Return preserving ZF is so
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000710 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000712 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    71 00000713 F6470920            <1>     test byte [rdi + bufferHdr.bufferFlags], refBuffer
    72 00000717 7405                <1>     jz .exit    ;Unreferenced buffer found!
    73 00000719 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
    74 0000071C EBEB                <1>     jmp short findUnreferencedBuffer  ;Check next buffer
    75                              <1> .exit:
    76 0000071E 50                  <1>     push rax
    77 0000071F 0D01000000          <1>     or eax, 1   ;Clear ZF
    78 00000724 58                  <1>     pop rax
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000725 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> flushAllBuffersForDPB:  ;External linkage
    82                              <1> ;Wrapper to allow calls to the below functions from the workingDPB
    83 00000726 50                  <1>     push rax
    84 00000727 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
    85 0000072E 0FB600              <1>     movzx eax, byte [rax + dpb.bDriveNumber]
    86 00000731 E802000000          <1>     call flushAllBuffersForDrive
    87 00000736 58                  <1>     pop rax
    88                              <1>     return
    13                              <2> %%_ret:
    14 00000737 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    89                              <1> 
    90                              <1> flushAllBuffersForDrive:    ;External linkage (2 - diskReset/exit)
    91                              <1> ; Flushes and resets the dirty bit for all dirty bufs in buffer chain.
    92                              <1> ; Used also to allow flushing all buffers
    93                              <1> ; Input: al = 0-based physical drive number we are xacting on
    94                              <1> ; Returns: CF=NC => All is well, buffers flushed and dirty bits cleaned
    95                              <1> ;          CF=CY => A Buffer failed to flush, it was lost.
    96 00000738 57                  <1>     push rdi
    97 00000739 50                  <1>     push rax
    98 0000073A 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
    99 00000741 B4FF                <1>     mov ah, -1  ;Set to ignore no buffers
   100                              <1> .mainLp:
   101 00000743 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;When we get to the end of the buffer chain, exit
   102 0000074A 741E                <1>     je .exit   
   103 0000074C E827000000          <1>     call flushAndCleanBuffer    ;Flush this buffer if it is on the DPB we want
   104 00000751 50                  <1>     push rax
   105 00000752 0FB64708            <1>     movzx eax, byte [rdi + bufferHdr.driveNumber]
   106 00000756 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this a buffer on the error drive?
   107 0000075C 58                  <1>     pop rax
   108 0000075D 7405                <1>     je .errDrv    ;If not, goto next buffer
   109                              <1> .nextBuffer:
   110 0000075F 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;Goto next buffer
   111 00000762 EBDF                <1>     jmp short .mainLp
   112                              <1> .errDrv:
   113 00000764 C64708FF            <1>     mov byte [rdi + bufferHdr.driveNumber], -1  ;Free the buffer if caused error
   114 00000768 EBF5                <1>     jmp short .nextBuffer
   115                              <1> .exit:
   116 0000076A 58                  <1>     pop rax
   117 0000076B 5F                  <1>     pop rdi
   118 0000076C F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;Did we xlat error?
   119                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000773 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000775 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   120 00000776 F9                  <1>     stc ;If so, return CF=CY
   121                              <1>     return
    13                              <2> %%_ret:
    14 00000777 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   122                              <1> 
   123                              <1> flushAndCleanBuffer:   ;Internal Linkage Int 2Fh AX=1215h
   124                              <1> ;Flushes and cleans the dirty bit from the buffer
   125                              <1> ;Input: AH = Drives to ignore flush for
   126                              <1> ;       AL = Drive to flush for. If AL=AH, take this buffer unless ignored!
   127                              <1> ;       rdi -> Buffer in question
   128 00000778 3A6708              <1>     cmp ah, byte [rdi + bufferHdr.driveNumber]  ;Is this an ignorable drv number?
   129                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000077B 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000077D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   130 0000077E 38C4                <1>     cmp ah, al  ;Do we ignore ourselves?
   131 00000780 7407                <1>     je .takeThisBuffer
   132 00000782 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber] ;Is this an acceptable buffer?
   133 00000785 F8                  <1>     clc
   134                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000786 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000788 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   135                              <1> .takeThisBuffer:
   136 00000789 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer   ;Is it dirty?
   137                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000078D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000078F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   138 00000790 50                  <1>     push rax    ;Save the drive number
   139 00000791 0FB74708            <1>     movzx eax, word [rdi + bufferHdr.wDrvNumFlg]
   140 00000795 50                  <1>     push rax    ;Save the buffer flags
   141 00000796 E80C000000          <1>     call flushAndFreeBuffer
   142 0000079B 58                  <1>     pop rax     ;Get back the flags
   143 0000079C 7207                <1>     jc .exit
   144 0000079E 80E4BF              <1>     and ah, ~dirtyBuffer    ;Clean the dirty bit
   145 000007A1 66894708            <1>     mov word [rdi + bufferHdr.wDrvNumFlg], ax  ;And return the drv/flags!
   146                              <1> .exit:  
   147 000007A5 58                  <1>     pop rax     ;Get back the drive number
   148                              <1>     return
    13                              <2> %%_ret:
    14 000007A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   149                              <1> 
   150                              <1> flushAndFreeBuffer:    ;Int 2Fh AX=1209h 
   151                              <1> ;Frees, then attempts flushes the data in a sector buffer to disk!
   152                              <1> ;Entry: rdi = Pointer to buffer header for this buffer
   153                              <1> ;Exit:  CF=NC : Success
   154                              <1> ;       CF=CY : Fail, terminate the request
   155 000007A7 50                  <1>     push rax
   156 000007A8 53                  <1>     push rbx
   157 000007A9 51                  <1>     push rcx
   158 000007AA 52                  <1>     push rdx
   159 000007AB 56                  <1>     push rsi
   160 000007AC 55                  <1>     push rbp
   161                              <1> ;If the buffer is freed, skip flushing to avoid issues
   162 000007AD B8FF000000          <1>     mov eax, freeBuffer
   163 000007B2 66874708            <1>     xchg ax, word [rdi + bufferHdr.driveNumber] ;Free the buffer, get flags
   164                              <1>     ;ah = Flags, al = Drive number
   165 000007B6 3CFF                <1>     cmp al, -1  ;-1 means free buffer
   166 000007B8 7470                <1>     je .fbFreeExit  ;If it was free, exit
   167 000007BA F6C440              <1>     test ah, dirtyBuffer    ;Data modified?
   168 000007BD 746B                <1>     jz .fbFreeExit  ;Skip write to disk if data not modified
   169 000007BF 3A05(09040000)      <1>     cmp al, byte [errorDrv] ;Was this drive the error drive?    
   170 000007C5 7463                <1>     je .fbFreeExit  ;Skip write if this disk has caused an error
   171 000007C7 C605(68040000)19    <1>     mov byte [Int24bitfld], critWrite | critRetryOK | critFailOK
   172 000007CE F6C408              <1>     test ah, dataBuffer
   173 000007D1 7407                <1>     jz .fbWriteSetup
   174 000007D3 800D(68040000)20    <1>     or byte [Int24bitfld], critIgnorOK  ;If this is a data buffer, we can ignore too
   175                              <1> .fbWriteSetup:
   176 000007DA BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   177 000007DF F6C402              <1>     test ah, fatBuffer
   178 000007E2 7406                <1>     jz .fbWriteNotFat
   179 000007E4 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   180                              <1> .fbWriteNotFat:
   181 000007EA 0FB64F12            <1>     movzx ecx, byte [rdi + bufferHdr.bufFATcopy]   ;And FAT copies (if FAT sector)
   182 000007EE 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   183 000007F2 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   184 000007F6 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   185                              <1> .fbWriteDisk:
   186 000007FA 50                  <1>     push rax    ;Save the drive number and flags
   187 000007FB 53                  <1>     push rbx    ;Has pointer to buffer data area
   188 000007FC 51                  <1>     push rcx    ;# of FAT sectors
   189 000007FD 52                  <1>     push rdx    ;The LBA of the buffer that we are writing
   190 000007FE 56                  <1>     push rsi    ;Error counter (5 for FAT sectors, 3 otherwise) 
   191 000007FF 55                  <1>     push rbp    ;DPB ptr for drive
   192 00000800 B901000000          <1>     mov ecx, 1  ;One sector to copy
   193 00000805 E8EC680000          <1>     call primReqWriteSetup  ;Setup request (preserves setup registers)
   194 0000080A E8F7660000          <1>     call absDiskDriverCall    ;Make Driver Request
   195 0000080F 5D                  <1>     pop rbp
   196 00000810 5E                  <1>     pop rsi
   197 00000811 5A                  <1>     pop rdx
   198 00000812 59                  <1>     pop rcx
   199 00000813 5B                  <1>     pop rbx
   200                              <1>     ;Don't pop rax here to carry the error code if error!
   201 00000814 751C                <1>     jnz .fbFail
   202                              <1> ;Now check if the buffer was a FAT, to write additional copies
   203 00000816 58                  <1>     pop rax ;Now pop the drive number and flags off the stack
   204 00000817 F6C402              <1>     test ah, fatBuffer ;FAT buffer?
   205 0000081A 740E                <1>     jz .fbFreeExit  ;If not, exit
   206 0000081C FFC9                <1>     dec ecx
   207 0000081E 740A                <1>     jz .fbFreeExit  ;Once this goes to 0, stop writing FAT copies
   208 00000820 50                  <1>     push rax
   209 00000821 8B4713              <1>     mov eax, dword [rdi + bufferHdr.bufFATsize]
   210 00000824 4801C2              <1>     add rdx, rax ;Add the FAT size to the LBA (rdx has LBA number)
   211 00000827 58                  <1>     pop rax
   212 00000828 EBD0                <1>     jmp short .fbWriteDisk ;Make another request for the other FAT copy
   213                              <1> .fbFreeExit:
   214 0000082A F8                  <1>     clc
   215                              <1> .fbExitFail:
   216 0000082B 5D                  <1>     pop rbp
   217 0000082C 5E                  <1>     pop rsi
   218 0000082D 5A                  <1>     pop rdx
   219 0000082E 59                  <1>     pop rcx
   220 0000082F 5B                  <1>     pop rbx
   221 00000830 58                  <1>     pop rax
   222                              <1>     return
    13                              <2> %%_ret:
    14 00000831 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   223                              <1> .fbFail:
   224                              <1> ;Enter here only if the request failed
   225 00000832 FFCE                <1>     dec esi
   226 00000834 7403                <1>     jz .fbHardError ;Once we have tried it a number of times, fail!
   227 00000836 58                  <1>     pop rax     ;Else pop back the drive number and flags
   228 00000837 EBC1                <1>     jmp short .fbWriteDisk ;Try the request again!
   229                              <1> .fbHardError:
   230                              <1> ;Request failed thrice, critical error call
   231                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   232 00000839 800D(68040000)01    <1>     or byte [Int24bitfld], critWrite ;Set the initial bitfield to write req
   233 00000840 E8145F0000          <1>     call diskIOError ;Call with rdi = Buffer header and eax = Status Word
   234 00000845 3C01                <1>     cmp al, critRetry
   235 00000847 58                  <1>     pop rax     ;Now pop back the drive number and flags from the stack!
   236 00000848 7490                <1>     je .fbWriteSetup   ;If we retry, we rebuild the stack, values possibly trashed
   237                              <1>     ;Else we fail (Ignore=Fail here)
   238 0000084A F9                  <1>     stc ;Set error flag to indicate fail
   239 0000084B EBDE                <1>     jmp short .fbExitFail
   240                              <1> 
   241                              <1> testDirtyBufferForDrive:    ;External linkage
   242                              <1> ;Searches the buffer chain for a dirty buffer for a given drive letter.
   243                              <1> ;Input: al = Drive number (0 based)
   244                              <1> ;Output: CF=CY => Dirty buffer found, CF=NC => No dirty buffer found
   245                              <1> ;Consequently, ZF=NZ => Dirty buffer found, ZF=ZE => No dirty buffer found
   246 0000084D 53                  <1>     push rbx
   247 0000084E 488B1D(5D000000)    <1>     mov rbx, qword [bufHeadPtr]
   248                              <1> .tdbfdCheckBuffer:
   249 00000855 384308              <1>     cmp byte [rbx + bufferHdr.driveNumber], al
   250 00000858 7509                <1>     jne .tdbfdGotoNextBuffer
   251 0000085A F6430940            <1>     test byte [rbx + bufferHdr.bufferFlags], dirtyBuffer
   252 0000085E 7403                <1>     jz .tdbfdGotoNextBuffer ;Bit not set, goto next buffer
   253 00000860 F9                  <1>     stc ;Else dirty buffer found, set carry flag
   254                              <1> .tdbfdExit:
   255 00000861 5B                  <1>     pop rbx
   256                              <1>     return
    13                              <2> %%_ret:
    14 00000862 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> .tdbfdGotoNextBuffer:
   258 00000863 488B1B              <1>     mov rbx, qword [rbx + bufferHdr.nextBufPtr]
   259 00000866 4881FBFFFFFFFF      <1>     cmp rbx, -1     ;If rbx points to -1, exit (Also clears CF)
   260 0000086D 74F2                <1>     je .tdbfdExit
   261 0000086F EBE4                <1>     jmp short .tdbfdCheckBuffer
   262                              <1> 
   263                              <1> freeBuffersForDrive:  ;External Linkage (Before Get BPB in medchk)
   264                              <1> ;Walks the buffer chain and sets ALL buffers with the given DPB 
   265                              <1> ; to have a drive number of -1, thus freeing it
   266                              <1> ;Given Drive number is in al
   267 00000871 57                  <1>     push rdi
   268 00000872 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   269                              <1> .i0:
   270 00000879 4881FFFFFFFFFF      <1>     cmp rdi, -1
   271 00000880 7417                <1>     je .exit
   272 00000882 384708              <1>     cmp byte [rdi + bufferHdr.driveNumber], al  ;Chosen Drive?
   273 00000885 750D                <1>     jne .i1 ;If no, skip freeing
   274 00000887 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   275 0000088D E869FEFFFF          <1>     call makeBufferMostRecentlyUsedGetNext
   276 00000892 EBE5                <1>     jmp short .i0
   277                              <1> .i1:
   278 00000894 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr] ;goto next buffer
   279 00000897 EBE0                <1>     jmp short .i0
   280                              <1> .exit:
   281 00000899 5F                  <1>     pop rdi
   282                              <1>     return
    13                              <2> %%_ret:
    14 0000089A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   283                              <1> 
   284                              <1> markBufferDirty:
   285 0000089B 55                  <1>     push rbp
   286 0000089C 9C                  <1>     pushfq
   287 0000089D 488B2D(3E070000)    <1>     mov rbp, qword [currBuff]
   288 000008A4 804D0940            <1>     or byte [rbp + bufferHdr.bufferFlags], dirtyBuffer
   289 000008A8 9D                  <1>     popfq
   290 000008A9 5D                  <1>     pop rbp
   291                              <1>     return
    13                              <2> %%_ret:
    14 000008AA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   292                              <1> 
   293                              <1> getBuffer: ;Internal Linkage ONLY
   294                              <1> ;
   295                              <1> ;WHENEVER A DATA BUFFER IS NEEDED FOR SECTOR DATA, THIS IS THE FUNCTION
   296                              <1> ;TO CALL! WORKS ON THE WORKING DPB!
   297                              <1> ;Flushes if not in disk change mode. 
   298                              <1> ;If in disk change mode, will check to see if the selected buffer 
   299                              <1> ; has data referring a device using the same DPB as we are changing.
   300                              <1> ; If it is, skip flushing, if not, flush first!
   301                              <1> ;
   302                              <1> ;This function will return a pointer to the desired data sector OR 
   303                              <1> ; find the most appropriate buffer, flush and read the relevant data into the 
   304                              <1> ; buffer, again then returning a pointer to the sector buffer in rbx.
   305                              <1> ;Entry: rax = Sector to read
   306                              <1> ;        cl = Data type being read (DOS, FAT, DIR, Data)
   307                              <1> ;       rsi = DPB to use for transaction
   308                              <1> ;Exit:  CF=NC => 
   309                              <1> ;           Ptr to buffer header with valid data in buffer in rbx and [currBuf]
   310                              <1> ;       CF=CY => Critical Error returned Fail, rbx undefined
   311 000008AB 51                  <1>     push rcx
   312 000008AC 52                  <1>     push rdx
   313 000008AD 56                  <1>     push rsi
   314 000008AE 57                  <1>     push rdi
   315 000008AF 8A16                <1>     mov dl, byte [rsi + dpb.bDriveNumber]
   316 000008B1 E81F010000          <1>     call findSectorInBuffer ;rax = sector to read, dl = drive number
   317 000008B6 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Get in rdi the buffer ptr
   318 000008BD 741F                <1>     je .rbReadNewSector
   319 000008BF 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save the found buffer ptr in the variable
   320 000008C6 E8DBFDFFFF          <1>     call makeBufferMostRecentlyUsed
   321 000008CB F8                  <1>     clc
   322                              <1> .rbExit:
   323 000008CC 5F                  <1>     pop rdi
   324 000008CD 5E                  <1>     pop rsi
   325 000008CE 5A                  <1>     pop rdx
   326 000008CF 59                  <1>     pop rcx
   327 000008D0 9C                  <1>     pushfq
   328 000008D1 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]   ;Get current buffer
   329 000008D8 804B0920            <1>     or byte [rbx + bufferHdr.bufferFlags], refBuffer    ;Mark as referenced!
   330 000008DC 9D                  <1>     popfq
   331                              <1>     return
    13                              <2> %%_ret:
    14 000008DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   332                              <1> .rbReadNewSector:
   333 000008DE E89B000000          <1>     call findLRUBuffer  ;Get the LRU or first free buffer entry in rdi
   334 000008E3 E8BFFEFFFF          <1>     call flushAndFreeBuffer
   335 000008E8 72E2                <1>     jc .rbExit    ;Preserve the set carry flag
   336                              <1> ;rdi points to bufferHdr that has been appropriately linked to the head of chain
   337                              <1>     ;If the sector is to be lost or has been successfully flushed, then it
   338                              <1>     ; is no longer owned by that File so we mark the owner as none
   339 000008EA 885708              <1>     mov byte [rdi + bufferHdr.driveNumber], dl
   340 000008ED 884F09              <1>     mov byte [rdi + bufferHdr.bufferFlags], cl ;FAT/DIR/DATA and NOT dirty
   341 000008F0 4889470A            <1>     mov qword [rdi + bufferHdr.bufferLBA], rax
   342 000008F4 80F902              <1>     cmp cl, fatBuffer
   343 000008F7 B201                <1>     mov dl, 1   ;Default values if not fat buffer
   344 000008F9 7503                <1>     jne .rbNonFATbuffer
   345 000008FB 8A5608              <1>     mov dl, byte [rsi + dpb.bNumberOfFATs]
   346                              <1> .rbNonFATbuffer:
   347 000008FE 885712              <1>     mov byte [rdi + bufferHdr.bufFATcopy], dl
   348 00000901 8B5613              <1>     mov edx, dword [rsi + dpb.dFATlength]
   349 00000904 895713              <1>     mov dword [rdi + bufferHdr.bufFATsize], edx
   350 00000907 48897717            <1>     mov qword [rdi + bufferHdr.driveDPBPtr], rsi
   351 0000090B C6471F00            <1>     mov byte [rdi + bufferHdr.reserved], 0
   352 0000090F E802000000          <1>     call readSectorBuffer ;Carry the flag from the request
   353 00000914 EBB6                <1>     jmp short .rbExit   ;Jump preserving the carry flag
   354                              <1> 
   355                              <1> readSectorBuffer:   ;Internal Linkage
   356                              <1> ;Reads a sector into a built sector buffer
   357                              <1> ;Entry: rdi = Pointer to buffer header
   358                              <1> ;Exit:  CF=NC : Success
   359                              <1> ;       CF=CY : Fail, terminate the request
   360                              <1> ;       rbx pointing to buffer header
   361                              <1> ;First make request to device driver
   362 00000916 50                  <1>     push rax
   363 00000917 53                  <1>     push rbx
   364 00000918 51                  <1>     push rcx
   365 00000919 52                  <1>     push rdx
   366 0000091A 56                  <1>     push rsi
   367 0000091B 55                  <1>     push rbp
   368                              <1> .rsRequest0:
   369 0000091C BE03000000          <1>     mov esi, 3  ;Repeat attempt counter
   370 00000921 F6470902            <1>     test byte [rdi + bufferHdr.bufferFlags], fatBuffer
   371 00000925 7406                <1>     jz .rsRequest1
   372 00000927 81C602000000        <1>     add esi, 2  ;FAT sectors have 5 attempts
   373                              <1> .rsRequest1:
   374 0000092D 8A4708              <1>     mov al, byte [rdi + bufferHdr.driveNumber]
   375 00000930 B901000000          <1>     mov ecx, 1  ;One sector to copy
   376 00000935 488B570A            <1>     mov rdx, qword [rdi + bufferHdr.bufferLBA]
   377 00000939 488D5F20            <1>     lea rbx, qword [rdi + bufferHdr.dataarea]
   378 0000093D 488B6F17            <1>     mov rbp, qword [rdi + bufferHdr.driveDPBPtr]
   379 00000941 E8BB670000          <1>     call primReqReadSetup  ;Setup request (preserves setup registers)
   380 00000946 E8BB650000          <1>     call absDiskDriverCall    ;Make Driver Request
   381 0000094B 7508                <1>     jnz .rsFail
   382                              <1> .rsExit:
   383 0000094D F8                  <1>     clc
   384                              <1> .rsExitFail:
   385 0000094E 5D                  <1>     pop rbp
   386 0000094F 5E                  <1>     pop rsi
   387 00000950 5A                  <1>     pop rdx
   388 00000951 59                  <1>     pop rcx
   389 00000952 5B                  <1>     pop rbx
   390 00000953 58                  <1>     pop rax
   391                              <1>     return
    13                              <2> %%_ret:
    14 00000954 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   392                              <1> .rsFail:
   393                              <1> ;Enter here only if the request failed
   394 00000955 FFCE                <1>     dec esi
   395 00000957 75D4                <1>     jnz .rsRequest1 ;Try the request again!
   396                              <1> ;Request failed thrice, critical error call
   397                              <1> ;First free the buffer if we failed to read data into it. 
   398                              <1> ;We free this buffer to free the resource if the user aborts.
   399                              <1> ;This function is called in a critical section so the buffer pointer
   400                              <1> ; is under no thread of being reallocated.
   401                              <1> ;At this point, ax = Error code, rbp -> DPB, rdi -> Buffer code
   402 00000959 66C74708FF00        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer ;Free buffer
   403 0000095F C605(68040000)18    <1>     mov byte [Int24bitfld], critRead | critFailOK | critRetryOK
   404 00000966 E8EE5D0000          <1>     call diskIOError    ;Returns rbp -> DPB and rdi -> Buffer, al = Action code
   405 0000096B 3C01                <1>     cmp al, critRetry
   406 0000096D 7509                <1>     jne .fail   ;Else we fail
   407 0000096F 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]    ;Get drv num to put back
   408 00000973 884708              <1>     mov byte [rdi + bufferHdr.driveNumber], al ;Put it back (buffer type bits set)
   409 00000976 EBA4                <1>     jmp short .rsRequest0
   410                              <1> .fail:
   411 00000978 F9                  <1>     stc ;Set error flag to indicate fail
   412 00000979 E9D0FFFFFF          <1>     jmp .rsExitFail
   413                              <1>     
   414                              <1> findLRUBuffer: ;Internal Linkage
   415                              <1> ;Finds first free or least recently used buffer, links it and returns ptr to it 
   416                              <1> ; in rdi and the currBuff variable
   417                              <1> ;Input: Nothing
   418                              <1> ;Output: rdi = Pointer to the buffer hdr to use
   419                              <1> ;       [currBuff] = Pointer to the buffer hdr to use
   420 0000097E 52                  <1>     push rdx
   421 0000097F 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   422 00000986 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1  ;Check if 1st entry is free
   423 0000098A 7436                <1>     je .flbExit 
   424 0000098C 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1  ;Check if 1st entry is last
   425 00000993 742D                <1>     je .flbExit
   426                              <1> .flbWalk:
   427 00000995 4889FA              <1>     mov rdx, rdi    ;Save a ptr to the previous buffer header
   428 00000998 488B3A              <1>     mov rdi, qword [rdx + bufferHdr.nextBufPtr] ;Get next buffer header ptr
   429 0000099B 807F08FF            <1>     cmp byte [rdi + bufferHdr.driveNumber], -1
   430 0000099F 742A                <1>     je .flbFreeLink ;If free, link to head, and xlink prev and next buffs
   431 000009A1 48813FFFFFFFFF      <1>     cmp qword [rdi + bufferHdr.nextBufPtr], -1 ;Check if at LRU buffer
   432 000009A8 75EB                <1>     jne .flbWalk   ;If not LRU, keep walking, else process
   433 000009AA 48C702FFFFFFFF      <1>     mov qword [rdx + bufferHdr.nextBufPtr], -1  ;Make prev node the LRU node
   434                              <1> .flbHeadLink:
   435 000009B1 488B15(5D000000)    <1>     mov rdx, qword [bufHeadPtr]    ;Now copy old MRU buffer ptr to rdx
   436 000009B8 48893D(5D000000)    <1>     mov qword [bufHeadPtr], rdi    ;Sysvars to point to new buffer
   437 000009BF 488917              <1>     mov qword [rdi + bufferHdr.nextBufPtr], rdx
   438                              <1> .flbExit:
   439 000009C2 5A                  <1>     pop rdx
   440 000009C3 48893D(3E070000)    <1>     mov qword [currBuff], rdi   ;Save in variable too
   441                              <1>     return
    13                              <2> %%_ret:
    14 000009CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   442                              <1> .flbFreeLink:
   443 000009CB 51                  <1>     push rcx
   444 000009CC 488B0F              <1>     mov rcx, qword [rdi + bufferHdr.nextBufPtr]
   445 000009CF 48890A              <1>     mov qword [rdx + bufferHdr.nextBufPtr], rcx  ;Point prev buff past rdi
   446 000009D2 59                  <1>     pop rcx
   447 000009D3 EBDC                <1>     jmp short .flbHeadLink
   448                              <1> 
   449                              <1> findSectorInBuffer:     ;Internal linkage
   450                              <1> ;Finds the Buffer for a sector belonging to a particular dpb device
   451                              <1> ;If the sector is not in a buffer, returns with a -1
   452                              <1> ;Input: rax = Sector number
   453                              <1> ;       dl = Drive number
   454                              <1> ;Output: rdi = Buffer hdr pointer or -1
   455 000009D5 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   456                              <1> .fsiCheckBuffer:
   457 000009DC 385708              <1>     cmp byte [rdi + bufferHdr.driveNumber], dl
   458 000009DF 7507                <1>     jne .fsiGotoNextBuffer
   459 000009E1 4839470A            <1>     cmp qword [rdi + bufferHdr.bufferLBA], rax
   460 000009E5 7501                <1>     jne .fsiGotoNextBuffer
   461                              <1> .fsiExit:
   462                              <1>     return
    13                              <2> %%_ret:
    14 000009E7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   463                              <1> .fsiGotoNextBuffer:
   464 000009E8 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   465 000009EB 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;If rdi points to -1, exit
   466 000009F2 74F3                <1>     je .fsiExit
   467 000009F4 EBE6                <1>     jmp short .fsiCheckBuffer
   468                              <1> 
   469                              <1> ;-----------------------------------------------------------------------------
   470                              <1> ;SPECIAL BUFFER FUNCTIONS
   471                              <1> ;Buffer functions for sectors associated to file handles and specific purposes
   472                              <1> ; ALL sector types need to setup [workingDPB] to make the transfer
   473                              <1> ;-----------------------------------------------------------------------------
   474                              <1> getBufForDOS:
   475                              <1> ;Returns a buffer to use for DOS sector(s) in rbx
   476                              <1> ;Input: [workingDPB] = DPB to transact on
   477                              <1> ;       rax = Sector to transfer
   478                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   479 000009F6 51                  <1>     push rcx
   480 000009F7 B101                <1>     mov cl, dosBuffer
   481 000009F9 EB0D                <1>     jmp short getBufCommon
   482                              <1> getBufForFat:
   483                              <1> ;Returns a buffer to use for fat data in rbx
   484                              <1> ;Input: [workingDPB] = DPB to transact on
   485                              <1> ;       rax = Sector to transfer
   486                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   487 000009FB 51                  <1>     push rcx
   488 000009FC B102                <1>     mov cl, fatBuffer
   489 000009FE EB08                <1>     jmp short getBufCommon
   490                              <1> getBufForDir:
   491                              <1> ;Returns a buffer to use for disk directory data in rbx
   492                              <1> ;Input: [workingDPB] = File to manipulate
   493                              <1> ;       rax = Sector to transfer
   494                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   495 00000A00 51                  <1>     push rcx
   496 00000A01 B104                <1>     mov cl, dirBuffer
   497 00000A03 EB03                <1>     jmp short getBufCommon
   498                              <1> getBufForData:
   499                              <1> ;Returns a buffer to use for disk data in rbx
   500                              <1> ;Requires a File Handle.
   501                              <1> ;Input: [workingDPB] = File to manipulate
   502                              <1> ;       rax = Sector to transfer
   503                              <1> ;Output: rbx = Buffer to use or if CF=CY, error rbx = Undefined
   504 00000A05 51                  <1>     push rcx
   505 00000A06 B108                <1>     mov cl, dataBuffer
   506                              <1> getBufCommon:
   507 00000A08 56                  <1>     push rsi
   508 00000A09 57                  <1>     push rdi
   509 00000A0A 488B35(0A070000)    <1>     mov rsi, qword [workingDPB] ;Get working DPB 
   510                              <1> .makeReq:
   511 00000A11 E895FEFFFF          <1>     call getBuffer  ;Gives the buffer ptr in rbx
   512 00000A16 5F                  <1>     pop rdi
   513 00000A17 5E                  <1>     pop rsi
   514 00000A18 59                  <1>     pop rcx
   515                              <1>     return
    13                              <2> %%_ret:
    14 00000A19 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    35                                  %include "./src/Kernel/FAT/fat.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;       File System routines        :
     3                              <1> ;-----------------------------------:
     4                              <1> getFATtype:
     5                              <1> ;Gets a pointer to a DPB and returns the FAT type on the drive
     6                              <1> ;Entry: rbp = DPB to ascertain FAT
     7                              <1> ;Exit: ecx = 0 => FAT 12, ecx = 1 => FAT 16, ecx = 2 => FAT 32
     8 00000A1A 53                  <1>     push rbx
     9 00000A1B 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr]
    10 00000A1E B902000000          <1>     mov ecx, 2  ;FAT 32 marker
    11 00000A23 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    12 00000A29 730C                <1>     jae .exit
    13 00000A2B FFC9                <1>     dec ecx     ;FAT 16 marker
    14 00000A2D 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    15 00000A33 7302                <1>     jae .exit
    16 00000A35 FFC9                <1>     dec ecx     ;FAT 12 marker
    17                              <1> .exit:
    18 00000A37 5B                  <1>     pop rbx
    19                              <1>     return
    13                              <2> %%_ret:
    14 00000A38 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> clust2FATEntry:
    22                              <1> ;Converts a cluster number to a offset in the FAT
    23                              <1> ;Entry:  Uses the workingDPB to convert cluster number
    24                              <1> ;        eax = Cluster number to look for
    25                              <1> ;Exit:   eax = Sector on disk of FAT 
    26                              <1> ;        ecx = 0 => FAT12, 1 => FAT16, 2 => FAT32
    27                              <1> ;        edx = 1.5Byte/Word/DWord in sector of entry
    28 00000A39 53                  <1>     push rbx
    29 00000A3A 55                  <1>     push rbp
    30 00000A3B 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    31 00000A42 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr]
    32 00000A45 81FBF5FF0000        <1>     cmp ebx, fat16MaxClustCnt
    33 00000A4B 731E                <1>     jae .fat32
    34 00000A4D 81FBF50F0000        <1>     cmp ebx, fat12MaxClustCnt
    35 00000A53 7209                <1>     jb .fat12
    36                              <1> ;FAT16
    37 00000A55 D1E0                <1>     shl eax, 1  ;Multiply cluster number by 2
    38 00000A57 6801000000          <1>     push qword 1
    39 00000A5C EB15                <1>     jmp short .common
    40                              <1> .fat12:
    41 00000A5E 89C1                <1>     mov ecx, eax    ;ecx = eax
    42 00000A60 D1E9                <1>     shr ecx, 1      ;ecx = ecx / 2
    43 00000A62 01C8                <1>     add eax, ecx    ;eax = eax + ecx    (eax * 1.5)
    44 00000A64 6800000000          <1>     push qword 0
    45 00000A69 EB08                <1>     jmp short .common
    46                              <1> .fat32:
    47 00000A6B 6802000000          <1>     push qword 2
    48 00000A70 C1E002              <1>     shl eax, 2  ;Multiply cluster number by 4
    49                              <1> .common:
    50                              <1> ;eax has the FAToffset
    51 00000A73 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    52 00000A77 31D2                <1>     xor edx, edx    ;edx = 0
    53 00000A79 F7F1                <1>     div ecx         ;Divide by bytes per sector (0:eax / ecx)
    54 00000A7B 0FB75D06            <1>     movzx ebx, word [rbp + dpb.wFAToffset]   ;Add the offset to the first FAT
    55 00000A7F 01D8                <1>     add eax, ebx
    56 00000A81 59                  <1>     pop rcx ;Pop the FAT type back into rcx
    57 00000A82 5D                  <1>     pop rbp
    58 00000A83 5B                  <1>     pop rbx
    59                              <1>     return
    13                              <2> %%_ret:
    14 00000A84 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    60                              <1> 
    61                              <1> getStartSectorOfCluster:
    62                              <1> ;Input: eax = Cluster Number
    63                              <1> ;       rbp = dpb pointer
    64                              <1> ;Output: rax = Starting Sector number for cluster
    65                              <1> ;Gives the data sector we are at in the current cluster
    66                              <1> ;Start Sector = (ClusterNumber - 2)*SecPerClust + DataAreaStartSector
    67 00000A85 51                  <1>     push rcx
    68 00000A86 09C0                <1>     or eax, eax ;Zero upper dword
    69 00000A88 7416                <1>     jz .rootDir ;If eax is zero, that is an alias for Root Directory
    70                              <1> .fat32Root:
    71 00000A8A 482D02000000        <1>     sub rax, 2
    72 00000A90 8A4D05              <1>     mov cl, byte [rbp + dpb.bSecPerClustShift]
    73 00000A93 48D3E0              <1>     shl rax, cl
    74 00000A96 31C9                <1>     xor ecx, ecx
    75 00000A98 8B4D0B              <1>     mov ecx, dword [rbp + dpb.dClusterHeapOffset]
    76 00000A9B 4801C8              <1>     add rax, rcx
    77                              <1>     ;rax now has the first sector of the current cluster
    78 00000A9E 59                  <1>     pop rcx
    79                              <1>     return
    13                              <2> %%_ret:
    14 00000A9F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .rootDir:
    81 00000AA0 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]
    82 00000AA3 E872FFFFFF          <1>     call getFATtype
    83 00000AA8 81F902000000        <1>     cmp ecx, 2
    84 00000AAE 74DA                <1>     je .fat32Root   ;If FAT32, eax now has zero extended 1st cluster of Root Dir
    85                              <1>     ;Else rax has the first sector of the Root Dir
    86 00000AB0 59                  <1>     pop rcx
    87                              <1>     return
    13                              <2> %%_ret:
    14 00000AB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    88                              <1> 
    89                              <1> 
    90                              <1> getLastClusterInChain:
    91                              <1> ;Given a cluster value in eax, returns in eax the last cluster in the chain
    92                              <1> ;Input: eax = Cluster to start searching at
    93                              <1> ;Output: eax = Last cluster in chain
    94                              <1> ;If input eax = 0, output eax = 0
    95 00000AB2 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
    96                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000AB4 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AB6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    97 00000AB7 53                  <1>     push rbx
    98                              <1> .lp:
    99 00000AB8 89C3                <1>     mov ebx, eax
   100 00000ABA E858020000          <1>     call readFAT
   101 00000ABF 7209                <1>     jc .exit
   102 00000AC1 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   103 00000AC6 75F0                <1>     jne .lp
   104 00000AC8 89D8                <1>     mov eax, ebx    ;Get the last cluster value in ebx
   105                              <1> .exit: 
   106 00000ACA 5B                  <1>     pop rbx
   107                              <1>     return
    13                              <2> %%_ret:
    14 00000ACB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   108                              <1> 
   109                              <1> getNumberOfClustersInChain:
   110                              <1> ;Given a cluster value in eax, returns in eax the number of clusters in chain
   111                              <1> ;Input: eax = Cluster to start searching at
   112                              <1> ;Output: eax = Number of clusters in the chain
   113                              <1> ;If input eax = 0, output eax = 0
   114 00000ACC 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   115                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000ACE 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AD0 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   116 00000AD1 51                  <1>     push rcx
   117 00000AD2 31C9                <1>     xor ecx, ecx
   118                              <1> .lp:
   119 00000AD4 FFC1                <1>     inc ecx
   120 00000AD6 E83C020000          <1>     call readFAT
   121 00000ADB 7209                <1>     jc .exit
   122 00000ADD 3DFFFFFFFF          <1>     cmp eax, -1 ;Once this is EOC, we add a new cluster.
   123 00000AE2 75F0                <1>     jne .lp
   124 00000AE4 89C8                <1>     mov eax, ecx    ;Get the count
   125                              <1> .exit: 
   126 00000AE6 59                  <1>     pop rcx
   127                              <1>     return
    13                              <2> %%_ret:
    14 00000AE7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> getClusterInChain:
   130                              <1> ;Given a starting cluster, walk forwards by a number of clusters.
   131                              <1> ;If an EOC is encountered, then ecx will not be 
   132                              <1> ;Input: eax = Start Cluster to start searching from
   133                              <1> ;       ecx = Number of clusters to go forwards by;
   134                              <1> ;Ouput: eax = Value of the cluster ecx number of clusters forwards
   135                              <1> ;       ecx = # of clusters left to walk forwards by (0 EOC was not encountered)
   136                              <1> ;Also usual CF babble.
   137 00000AE8 85C0                <1>     test eax, eax   ;If eax = 0, then just exit
   138                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000AEA 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000AEC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   139 00000AED 53                  <1>     push rbx
   140 00000AEE 67E30F              <1>     jecxz .exit
   141                              <1> .lp:
   142 00000AF1 89C3                <1>     mov ebx, eax
   143 00000AF3 E81F020000          <1>     call readFAT
   144 00000AF8 7206                <1>     jc .exit
   145 00000AFA FFC9                <1>     dec ecx
   146 00000AFC 75F3                <1>     jnz .lp
   147 00000AFE 89D8                <1>     mov eax, ebx    ;Get the value of the cluster in eax
   148                              <1> .exit:
   149 00000B00 5B                  <1>     pop rbx
   150                              <1>     return
    13                              <2> %%_ret:
    14 00000B01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> startNewChain:
   153                              <1> ;Working dpb must be set
   154                              <1> ;Returns: eax = First cluster new chain or -1=> Disk full
   155                              <1> ;If CF=CY, hard error
   156 00000B02 53                  <1>     push rbx
   157 00000B03 56                  <1>     push rsi
   158 00000B04 E874000000          <1>     call findFreeCluster    ;Get a free cluster in eax
   159 00000B09 7223                <1>     jc .exit    ;Disk read error?
   160 00000B0B 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   161 00000B10 7415                <1>     je .exit2   ;Exit synching disk full status
   162 00000B12 BEFFFFFFFF          <1>     mov esi, -1 ;Value to write at eax is EOF
   163 00000B17 89C3                <1>     mov ebx, eax
   164 00000B19 E8A5020000          <1>     call writeFAT
   165 00000B1E 720E                <1>     jc .exit 
   166 00000B20 89D8                <1>     mov eax, ebx
   167 00000B22 E87C030000          <1>     call decrementFreeClusterCount
   168                              <1> .exit2:
   169 00000B27 50                  <1>     push rax
   170 00000B28 E821040000          <1>     call writeFSInfoSector
   171 00000B2D 58                  <1>     pop rax
   172                              <1> .exit:
   173 00000B2E 5E                  <1>     pop rsi
   174 00000B2F 5B                  <1>     pop rbx
   175                              <1>     return
    13                              <2> %%_ret:
    14 00000B30 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   176                              <1> 
   177                              <1> allocateClusters:
   178                              <1> ;Working dpb must be set. 
   179                              <1> ;Input: ecx = Number of clusters to allocate in a chain
   180                              <1> ;       ebx = Cluster to link to the new cluster
   181                              <1> ;Output:    
   182                              <1> ;   ecx = Number of allocated clusters
   183                              <1> ;   CF=NC => Complete.
   184                              <1> ;   If eax = -1, then no more free clusters. 
   185                              <1> ;   CF=CY => Hard error, exit
   186 00000B31 F8                  <1>     clc ;Always clear the flags before starting
   187 00000B32 53                  <1>     push rbx
   188 00000B33 56                  <1>     push rsi
   189 00000B34 51                  <1>     push rcx    ;Save tfr count on stack
   190 00000B35 67E332              <1>     jecxz .exit ;Allocating nothing? Exit
   191                              <1> .allocateLoop:
   192 00000B38 E840000000          <1>     call findFreeCluster
   193 00000B3D 722B                <1>     jc .exit
   194 00000B3F 3DFFFFFFFF          <1>     cmp eax, -1 ;No more free clusters?
   195 00000B44 7424                <1>     je .exit    ;If the cluster number is -1, return immediately
   196                              <1>     ;eax has first free cluster value to use
   197                              <1>     ;First we link the previous cluster to this cluster
   198 00000B46 BEFFFFFFFF          <1>     mov esi, -1 ;EOC marker
   199 00000B4B 50                  <1>     push rax
   200 00000B4C E872020000          <1>     call writeFAT   ;Allocate this cluster first
   201 00000B51 58                  <1>     pop rax
   202 00000B52 7216                <1>     jc .exit    ;Errors don't get flushed to disk so this is safe
   203 00000B54 E84A030000          <1>     call decrementFreeClusterCount
   204                              <1>     ;eax points to this allocated cluster
   205                              <1>     ;ebx points to the previous last cluster
   206 00000B59 89C6                <1>     mov esi, eax    ;New cluster as "value"
   207 00000B5B 89D8                <1>     mov eax, ebx    ;Previous cluster to allocate at
   208 00000B5D E861020000          <1>     call writeFAT   ;Now link previous EOC to this new EOC
   209 00000B62 7206                <1>     jc .exit
   210 00000B64 89F3                <1>     mov ebx, esi    ;Move new cluster as the value to be linked to a new cluster
   211 00000B66 FFC9                <1>     dec ecx ;One less cluster allocated
   212 00000B68 75CE                <1>     jnz .allocateLoop
   213                              <1> .exit:
   214 00000B6A 5E                  <1>     pop rsi ;Pop the tfr count into esi
   215 00000B6B 9C                  <1>     pushfq
   216 00000B6C F7D9                <1>     neg ecx
   217 00000B6E 01F1                <1>     add ecx, esi
   218 00000B70 50                  <1>     push rax
   219 00000B71 51                  <1>     push rcx
   220 00000B72 E8D7030000          <1>     call writeFSInfoSector
   221 00000B77 59                  <1>     pop rcx
   222 00000B78 58                  <1>     pop rax
   223 00000B79 9D                  <1>     popfq
   224 00000B7A 5E                  <1>     pop rsi
   225 00000B7B 5B                  <1>     pop rbx
   226                              <1>     return
    13                              <2> %%_ret:
    14 00000B7C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> findFreeCluster:
   229                              <1> ;Walks the FAT to find a free cluster and returns the 
   230                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   231                              <1> ;Starts from the pervious first free cluster and wraps around if 
   232                              <1> ; we hit the max disk size and keeps searching until we get back
   233                              <1> ; to the starting cluster value. 
   234                              <1> ;If the first free cluster is unknown, we start from 2. If we hit the 
   235                              <1> ; max disk size in that case, we fail.
   236                              <1> ;Works on the workingDPB.
   237                              <1> ;If returns with CF=CY => Fail set, return immediately to caller.
   238 00000B7D 53                  <1>     push rbx
   239 00000B7E 52                  <1>     push rdx
   240 00000B7F 55                  <1>     push rbp
   241 00000B80 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   242 00000B87 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]
   243 00000B8A 3DFFFFFFFF          <1>     cmp eax, -1     ;Do we have a good starting free cluster? 
   244 00000B8F 7511                <1>     jne .lp
   245                              <1>     ;Check if the count of free clusters is 0. If so, we are full!
   246 00000B91 817D3100000000      <1>     cmp dword [rbp + dpb.dFreeClustCnt], 0
   247 00000B98 742D                <1>     je .diskFull
   248                              <1>     ;Else, we just have unreliable metadata. Start search from 2!
   249 00000B9A B802000000          <1>     mov eax, 2      ;If not, start searching from 2.
   250 00000B9F 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax    ;Start searching here!
   251                              <1> .lp:
   252 00000BA2 89C3                <1>     mov ebx, eax
   253 00000BA4 E86E010000          <1>     call readFAT    ;Deref the cluster value of ebx into eax
   254 00000BA9 722E                <1>     jc .exitFast
   255 00000BAB 85C0                <1>     test eax, eax   ;Now eax = DATA [ebx]. If 0, this is free!
   256 00000BAD 7424                <1>     jz .freeFnd
   257 00000BAF 678D4301            <1>     lea eax, dword [ebx + 1]    ;Else, get sequentially the next cluster
   258                              <1>     ;If these are equal, we've gone through the whole FAT. Disk full!
   259 00000BB3 3B452D              <1>     cmp eax, dword [rbp + dpb.dNextFreeClst]
   260 00000BB6 740F                <1>     je .diskFull    
   261                              <1>     ;Are we past the max cluster address?
   262 00000BB8 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   263 00000BBB 76E5                <1>     jbe .lp ;If not, use this next cluster value!
   264                              <1> ;Else, we are past end of the disk. Start from 2 again or disk full?
   265 00000BBD B802000000          <1>     mov eax, 2  ;Default to search from 2 again
   266                              <1>     ;If the firstfreecluster = 2, then we've searched everything. Fail.
   267 00000BC2 39452D              <1>     cmp dword [rbp + dpb.dNextFreeClst], eax    
   268 00000BC5 75DB                <1>     jne .lp
   269                              <1> .diskFull:
   270                              <1> ;Set free cluster count to 0 and first free cluster to -1
   271 00000BC7 C7453100000000      <1>     mov dword [rbp + dpb.dFreeClustCnt], 0  ;Set the free clusters
   272 00000BCE BBFFFFFFFF          <1>     mov ebx, -1     ;Set cluster value to -1
   273                              <1> .freeFnd:
   274 00000BD3 89D8                <1>     mov eax, ebx    ;Get the free cluster value into eax
   275 00000BD5 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax    ;Save first free cluster!
   276 00000BD8 F8                  <1>     clc
   277                              <1> .exitFast:
   278 00000BD9 5D                  <1>     pop rbp
   279 00000BDA 5A                  <1>     pop rdx
   280 00000BDB 5B                  <1>     pop rbx
   281                              <1>     return
    13                              <2> %%_ret:
    14 00000BDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> findFreeClusterData:
   284                              <1> ;Walks the FAT to find a free cluster and returns the 
   285                              <1> ;   zero extended cluster number in eax (-1 means no free cluster)
   286                              <1> ; Also finds NumberOfFreeClusters, if it is unknown. 
   287                              <1> ; Both fields get filled in the workingDPB
   288                              <1> ;Works on the workingDPB
   289                              <1> ;If returns with CF=CY => Fail set, return immediately to caller
   290 00000BDD 53                  <1>     push rbx
   291 00000BDE 51                  <1>     push rcx
   292 00000BDF 52                  <1>     push rdx
   293 00000BE0 55                  <1>     push rbp
   294 00000BE1 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   295 00000BE8 E82DFEFFFF          <1>     call getFATtype
   296 00000BED 81F902000000        <1>     cmp ecx, 2  ;If not FAT32, always get afresh
   297 00000BF3 7512                <1>     jne .getNew
   298                              <1>     ;Else, if either entry is unknown, get both!
   299 00000BF5 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   300 00000BFC 7409                <1>     je .getNew
   301 00000BFE 817D2DFFFFFFFF      <1>     cmp dword [rbp + dpb.dNextFreeClst], -1
   302 00000C05 7543                <1>     jne .exit
   303                              <1> .getNew:
   304                              <1>     ;Reset this data. Get first free cluster
   305 00000C07 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1
   306 00000C0E C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1
   307 00000C15 E863FFFFFF          <1>     call findFreeCluster
   308 00000C1A 7237                <1>     jc .exitFail
   309 00000C1C C7453100000000      <1>     mov dword [rbp + dpb.dFreeClustCnt], 0  ;Set to 0 for new count
   310 00000C23 3DFFFFFFFF          <1>     cmp eax, -1 ;First free cluster = -1 means disk full!
   311 00000C28 7420                <1>     je .exit
   312                              <1>     ;Else, eax has the first free cluster. Keep reading FAT
   313 00000C2A E865020000          <1>     call incrementFreeClusterCount  ;Increment the count for the first clust!
   314                              <1> .lp:
   315 00000C2F 89C3                <1>     mov ebx, eax    ;Save the cluster number
   316 00000C31 E8E1000000          <1>     call readFAT    ;Get dereferenced value in eax
   317 00000C36 721B                <1>     jc .exitFail
   318 00000C38 85C0                <1>     test eax, eax
   319 00000C3A 7505                <1>     jnz .notFree
   320 00000C3C E853020000          <1>     call incrementFreeClusterCount  ;Increment the count!
   321                              <1> .notFree:
   322 00000C41 678D4301            <1>     lea eax, dword [ebx + 1]    ;Get the next consecutive cluster
   323 00000C45 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   324 00000C48 76E5                <1>     jbe .lp
   325                              <1> .exit:
   326 00000C4A 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]  ;Get first free cluster in eax
   327 00000C4D E8FC020000          <1>     call writeFSInfoSector
   328 00000C52 F8                  <1>     clc
   329                              <1> .exitFail:      ;Keep carry flag
   330 00000C53 5D                  <1>     pop rbp
   331 00000C54 5A                  <1>     pop rdx
   332 00000C55 59                  <1>     pop rcx
   333 00000C56 5B                  <1>     pop rbx
   334                              <1>     return
    13                              <2> %%_ret:
    14 00000C57 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   335                              <1> 
   336                              <1> getNextSectorOfFile:
   337                              <1> ;This function will return the next sector of a file in rax
   338                              <1> ;If the next sector to be read lives in the next cluster, it will update
   339                              <1> ; the vars appropriately
   340                              <1> ;
   341                              <1> ;Input: rbp = dpb pointer
   342                              <1> ;Output:
   343                              <1> ;       CF=NC => rax = Next sector to read into a memory buffer
   344                              <1> ;           If ZF=ZE => [currClustF] = Last Cluster of File.
   345                              <1> ;       CF=CY => Critical error occurred and was FAILed
   346                              <1> ;Read next sector. If at last sector in cluster, walk map, get
   347                              <1> ; next cluster and read first sector 
   348                              <1>     ;Check if we need to go to next cluster
   349 00000C58 8A05(5C070000)      <1>     mov al, byte [currSectC]    ;Get current sector rel Cluster
   350 00000C5E 3A4504              <1>     cmp al, byte [rbp + dpb.bMaxSectorInCluster]
   351 00000C61 741C                <1>     je .gotoNextCluster
   352                              <1>     ;Goto next sector in same cluster
   353 00000C63 FE05(5C070000)      <1>     inc byte [currSectC]    ;Goto next sector in cluster
   354 00000C69 48FF05(5D070000)    <1>     inc qword [currSectD]  ;Goto next sector on Disk
   355 00000C70 488B05(5D070000)    <1>     mov rax, qword [currSectD]
   356                              <1> .exit:
   357 00000C77 50                  <1>     push rax
   358 00000C78 31C0                <1>     xor eax, eax
   359 00000C7A FFC0                <1>     inc eax ;Ensure ZF=NZ
   360 00000C7C 58                  <1>     pop rax
   361 00000C7D F8                  <1>     clc     ;And CF=NC
   362                              <1>     return
    13                              <2> %%_ret:
    14 00000C7E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   363                              <1> .gotoNextCluster:
   364 00000C7F 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get absolute cluster number
   365 00000C85 E88D000000          <1>     call readFAT
   366                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000C8A 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000C8C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   367                              <1>     ;eax now has the next cluster number to read (or -1 if EOF)
   368 00000C8D 3DFFFFFFFF          <1>     cmp eax, -1 ;ZF=ZE and CF=NC if they are equal
   369                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000C92 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000C94 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   370                              <1> ;Update the new cluster and sector information
   371 00000C95 8905(54070000)      <1>     mov dword [currClustD], eax ;Update disk location of next cluster
   372 00000C9B FF05(50070000)      <1>     inc dword [currClustF]   ;Goto next file cluster
   373 00000CA1 E8DFFDFFFF          <1>     call getStartSectorOfCluster    ;Get start sector of Cluster
   374 00000CA6 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save it
   375 00000CAD C605(5C070000)00    <1>     mov byte [currSectC], 0      ;We are at sector 0 rel Clust
   376 00000CB4 EBC1                <1>     jmp short .exit
   377                              <1> 
   378                              <1> 
   379                              <1> truncateFAT:
   380                              <1> ;Same as below but always sets the cluster we are unlinking at to EOC.
   381                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   382                              <1> ;       rbp = Current DPB to use for disk
   383                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   384 00000CB6 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   385 00000CB7 56                  <1>     push rsi
   386 00000CB8 E82B000000          <1>     call freeChainFAT   ;Preserves eax, frees the full chain.
   387 00000CBD 721B                <1>     jc .exit
   388 00000CBF BEFFFFFFFF          <1>     mov esi, -1         ;Realloc the cluster we are freeing from as EOC
   389 00000CC4 50                  <1>     push rax            ;Save the cluster we are writing at
   390 00000CC5 E8F9000000          <1>     call writeFAT
   391 00000CCA 58                  <1>     pop rax
   392 00000CCB 720D                <1>     jc .exit
   393 00000CCD E8D1010000          <1>     call decrementFreeClusterCount  ;Remove it from the free cluster count!
   394                              <1> .setFree:
   395                              <1> ;Do this stuff here, because we want to update the free count too!
   396 00000CD2 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax ;And set this to search from
   397 00000CD5 E874020000          <1>     call writeFSInfoSector  ;New first free cluster values
   398                              <1> .exit:
   399 00000CDA 5E                  <1>     pop rsi
   400 00000CDB 58                  <1>     pop rax
   401                              <1>     return
    13                              <2> %%_ret:
    14 00000CDC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   402                              <1> unlinkFAT:
   403                              <1> ;Given a cluster number, will free the cluster and walk the FAT until the first
   404                              <1> ; cluster number considered EOC is found. The given cluster number MUST be
   405                              <1> ; the start cluster of a chain, or at least the cluster linking to the given
   406                              <1> ; cluster must be set to EOC before this proc is called.
   407                              <1> ;Stops at first invalid cluster number.
   408                              <1> ;
   409                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   410                              <1> ;       rbp = Current DPB to use for disk
   411                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   412                              <1> 
   413 00000CDD 50                  <1>     push rax    ;Save the cluster number to start unlinking at
   414 00000CDE 56                  <1>     push rsi
   415                              <1> ;The below call decrements the cluster count for the full chain freed including
   416                              <1> ; the starting cluster address.
   417 00000CDF E804000000          <1>     call freeChainFAT    ;Preserved eax. May set eax to first free cluster.
   418 00000CE4 73EC                <1>     jnc truncateFAT.setFree ;Set the first free sector to eax
   419 00000CE6 EBF2                <1>     jmp short truncateFAT.exit  ;If an error, skip updating the FSInfo sector
   420                              <1> 
   421                              <1> freeChainFAT:
   422                              <1> ;Given a cluster number, will set that cluster to EOC and walk the FAT freeing 
   423                              <1> ; each cluster until the firstcluster number considered EOC is found. The given 
   424                              <1> ; cluster number MUST be the start cluster of a chain, or at least the cluster 
   425                              <1> ; linking to the given cluster must be set to EOC before this proc is called.
   426                              <1> ;Stops at first invalid cluster number.
   427                              <1> ;
   428                              <1> ;Input: eax = Cluster to start unlinking at (zero extended to 32 bits)
   429                              <1> ;       rbp = Current DPB to use for disk
   430                              <1> ;Output: CF = NC => All ok. CF = CY => Hard Error, exit
   431 00000CE8 50                  <1>     push rax
   432 00000CE9 53                  <1>     push rbx
   433 00000CEA 51                  <1>     push rcx
   434 00000CEB 56                  <1>     push rsi
   435 00000CEC 89C3                <1>     mov ebx, eax    ;Store the current cluster we are at in ebx
   436                              <1> .lp:
   437 00000CEE E824000000          <1>     call readFAT    ;Get the value of the cluster at this location in eax
   438 00000CF3 721D                <1>     jc .exit    ;Error exit
   439 00000CF5 89C1                <1>     mov ecx, eax   ;Move chain marker to ecx
   440 00000CF7 93                  <1>     xchg eax, ebx  ;Move clust. to write at in eax and save next cluster in ebx
   441 00000CF8 31F6                <1>     xor esi, esi   ;Free cluster at eax (write a 0)
   442 00000CFA E8C4000000          <1>     call writeFAT
   443 00000CFF 7211                <1>     jc .exit    ;Error exit
   444 00000D01 E88E010000          <1>     call incrementFreeClusterCount  ;Successfully freed the cluster
   445 00000D06 81F9FFFFFFFF        <1>     cmp ecx, -1 ;End of chain?
   446 00000D0C 7404                <1>     je .exit
   447 00000D0E 89D8                <1>     mov eax, ebx    ;Move next cluster into eax
   448 00000D10 EBDC                <1>     jmp short .lp
   449                              <1> .exit:
   450 00000D12 5E                  <1>     pop rsi
   451 00000D13 59                  <1>     pop rcx
   452 00000D14 5B                  <1>     pop rbx
   453 00000D15 58                  <1>     pop rax
   454                              <1>     return
    13                              <2> %%_ret:
    14 00000D16 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   455                              <1> readFAT:
   456                              <1> ;Given a cluster number, it gives us the next cluster in the cluster chain
   457                              <1> ; or -1 to indicate end of cluster chain on the device with workingDPB
   458                              <1> ;Input: eax = Cluster number (zero extended to 32 bits)
   459                              <1> ;       rbp = DPB
   460                              <1> ;Output: eax = Next Cluster number (-1 indicates end of chain)
   461                              <1> ;If carry set, getBuffer failed!
   462 00000D17 53                  <1>     push rbx
   463 00000D18 51                  <1>     push rcx
   464 00000D19 52                  <1>     push rdx
   465 00000D1A 57                  <1>     push rdi
   466 00000D1B 55                  <1>     push rbp
   467 00000D1C 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   468 00000D1E E816FDFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   469                              <1>     ;and FAT type in ecx
   470 00000D23 E8D3FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   471 00000D28 7232                <1>     jc .exitFail
   472                              <1>     ;Check if FAT 12, 16, 32
   473 00000D2A 85C9                <1>     test ecx, ecx
   474 00000D2C 7434                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   475 00000D2E F7C101000000        <1>     test ecx, 1
   476 00000D34 740E                <1>     jz .goToNextClusterFat32
   477                              <1>     ;Here we handle FAT16
   478 00000D36 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]
   479 00000D3B 3DF7FF0000          <1>     cmp eax, 0FFF7h  ;Valid cluster number?
   480 00000D40 7219                <1>     jb .exit
   481 00000D42 EB0B                <1>     jmp short .eocExit
   482                              <1> .goToNextClusterFat32:
   483 00000D44 8B441320            <1>     mov eax, dword [rbx + bufferHdr.dataarea + rdx]
   484 00000D48 3DF7FFFF0F          <1>     cmp eax, 0FFFFFF7h ;First reserved value. Any Reserved number = EOC
   485 00000D4D 7207                <1>     jb .validCluster32   
   486                              <1> .eocExit:
   487 00000D4F B8FFFFFFFF          <1>     mov eax, -1 ;Always translate it to -1 and skip zeroing upper nybble
   488 00000D54 EB05                <1>     jmp short .exit
   489                              <1> .validCluster32:
   490 00000D56 25FFFFFF0F          <1>     and eax, 0FFFFFFFh  ;Zero upper nybble
   491                              <1> .exit:
   492 00000D5B F8                  <1>     clc
   493                              <1> .exitFail:
   494 00000D5C 5D                  <1>     pop rbp
   495 00000D5D 5F                  <1>     pop rdi
   496 00000D5E 5A                  <1>     pop rdx
   497 00000D5F 59                  <1>     pop rcx
   498 00000D60 5B                  <1>     pop rbx
   499                              <1>     return
    13                              <2> %%_ret:
    14 00000D61 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   500                              <1> .gotoNextClusterFat12:
   501                              <1> ;eax has the sector number of the FAT
   502                              <1> ;edx has byte offset into the sector
   503                              <1> ;edi has current cluster number
   504                              <1> ;rbx has ptr to buffer header
   505 00000D62 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   506 00000D66 F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   507 00000D6C 741C                <1>     jz .gotoNextClusterFat12Even
   508                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   509 00000D6E 29D1                <1>     sub ecx, edx
   510 00000D70 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   511 00000D72 750C                <1>     jnz .gotoNextClusterFat12OddNoX
   512 00000D74 E833000000          <1>     call .xBndry        ;Boundary cross, build entry properly
   513 00000D79 72E1                <1>     jc .exitFail    
   514 00000D7B C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   515 00000D7E EB23                <1>     jmp short .checkIfLastFAT12Cluster
   516                              <1> .gotoNextClusterFat12OddNoX:
   517 00000D80 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   518 00000D85 C1E804              <1>     shr eax, 4   ;Save upper three nybbles of loword, eax has cluster num
   519 00000D88 EB19                <1>     jmp short .checkIfLastFAT12Cluster
   520                              <1> .gotoNextClusterFat12Even:
   521 00000D8A 29D1                <1>     sub ecx, edx
   522 00000D8C FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   523 00000D8E 7509                <1>     jnz .gotoNextClusterFat12EvenNoX
   524 00000D90 E817000000          <1>     call .xBndry    ;Save the lower three nybbles
   525 00000D95 72C5                <1>     jc .exitFail
   526 00000D97 EB05                <1>     jmp short .evenCmn
   527                              <1> .gotoNextClusterFat12EvenNoX:
   528                              <1>     ;Here the cluster is even and can't cross a sector boundary
   529 00000D99 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   530                              <1> .evenCmn:
   531 00000D9E 25FF0F0000          <1>     and eax, 0FFFh   ;Save lower three nybbles, eax has cluster num
   532                              <1> .checkIfLastFAT12Cluster:
   533 00000DA3 3DF70F0000          <1>     cmp eax, 0FF7h   ;Is it below the first invalid cluster number?
   534 00000DA8 72B1                <1>     jb .exit         ;If so, exit with it in eax (and clear CF)
   535 00000DAA EBA3                <1>     jmp short .eocExit
   536                              <1> .xBndry:
   537                              <1> ;Gets a word that goes across a boundary in ax. It is left to the caller it 
   538                              <1> ; do what they will with it. If CF=CY on return, something went wrong.
   539 00000DAC 0FB65C1320          <1>     movzx ebx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ebx as it is free
   540 00000DB1 FFC0                <1>     inc eax ;Get next FAT sector
   541 00000DB3 53                  <1>     push rbx
   542 00000DB4 E842FCFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   543 00000DB9 59                  <1>     pop rcx ;Get bl in ecx, the last entry from the previous buffer
   544                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000DBA 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000DBC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   545 00000DBD 89C8                <1>     mov eax, ecx    ;Move the entry if all ok
   546 00000DBF 8A6320              <1>     mov ah, byte [rbx + bufferHdr.dataarea]  ;Read first entry of next sector
   547                              <1>     return
    13                              <2> %%_ret:
    14 00000DC2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   548                              <1> 
   549                              <1> writeFAT:
   550                              <1> ;Given a cluster number to edit in eax and a number in ebx to store in 
   551                              <1> ; that FAT entry, this program will write ebx for cluster eax in the FAT.
   552                              <1> ;If the FAT is FAT 12, only the low 12 bits of eax and ebx will be used.
   553                              <1> ;If the FAT is FAT 16, only the low 16 bits of eax and ebx will be used.
   554                              <1> ;Input: esi = Cluster value, eax = Cluster to write at
   555 00000DC3 53                  <1>     push rbx
   556 00000DC4 51                  <1>     push rcx
   557 00000DC5 52                  <1>     push rdx
   558 00000DC6 56                  <1>     push rsi
   559 00000DC7 57                  <1>     push rdi
   560 00000DC8 55                  <1>     push rbp
   561 00000DC9 89C7                <1>     mov edi, eax    ;Save cluster number in edi
   562 00000DCB E869FCFFFF          <1>     call clust2FATEntry ;Returns sector in FAT in eax, offset in sector in edx
   563                              <1>     ;and FAT type in ecx
   564 00000DD0 E826FCFFFF          <1>     call getBufForFat ;Buffer Header in ebx, first buffer being requested
   565 00000DD5 7223                <1>     jc .exitFail
   566                              <1>     ;Check if FAT 12, 16, 32
   567 00000DD7 85C9                <1>     test ecx, ecx
   568 00000DD9 7426                <1>     jz .gotoNextClusterFat12    ;Handle FAT 12 separately
   569 00000DDB F7C101000000        <1>     test ecx, 1
   570 00000DE1 7407                <1>     jz .goToNextClusterFat32
   571                              <1>     ;Here we handle FAT16
   572 00000DE3 6689741320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], si ;Store the value
   573 00000DE8 EB0A                <1>     jmp short .exit
   574                              <1> .goToNextClusterFat32:
   575 00000DEA 81E6FFFFFF0F        <1>     and esi, 0FFFFFFFh  ;Zero upper nybble
   576 00000DF0 89741320            <1>     mov dword [rbx + bufferHdr.dataarea + rdx], esi
   577                              <1> .exit:
   578 00000DF4 E8A2FAFFFF          <1>     call markBufferDirty
   579 00000DF9 F8                  <1>     clc
   580                              <1> .exitFail:
   581 00000DFA 5D                  <1>     pop rbp
   582 00000DFB 5F                  <1>     pop rdi
   583 00000DFC 5E                  <1>     pop rsi
   584 00000DFD 5A                  <1>     pop rdx
   585 00000DFE 59                  <1>     pop rcx
   586 00000DFF 5B                  <1>     pop rbx
   587                              <1>     return
    13                              <2> %%_ret:
    14 00000E00 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   588                              <1> .gotoNextClusterFat12:
   589                              <1> ;FAT12 might need two FAT sectors read so we always read two sectors
   590                              <1> ;eax has the sector number of the FAT
   591                              <1> ;edx has byte offset into the sector
   592                              <1> ;edi has current cluster number
   593                              <1> ;rbx has ptr to buffer header
   594 00000E01 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   595 00000E05 81E6FF0F0000        <1>     and esi, 0FFFh  ;Clear the upper bits. Save only low 12 bits
   596 00000E0B F7C701000000        <1>     test edi, 1  ;Check if cluster is odd
   597 00000E11 7432                <1>     jz .gotoNextClusterFat12Even
   598                              <1>     ;Here the cluster is ODD, and might cross sector boundary
   599 00000E13 29D1                <1>     sub ecx, edx
   600 00000E15 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   601 00000E17 7556                <1>     jnz .gotoNextClusterFat12OddNoX
   602                              <1>     ;Boundary cross, build entry properly
   603                              <1>     ;Replace the high nybble of the low byte
   604 00000E19 0FB64C1320          <1>     movzx ecx, byte [rbx + bufferHdr.dataarea + rdx] ;Use ecx as it is free
   605 00000E1E 81E10F000000        <1>     and ecx, 0Fh    ;Clear the high nybble
   606 00000E24 C1E604              <1>     shl esi, 4  ;Shift value up by 4 to insert the low nybble in the right place
   607 00000E27 09F1                <1>     or ecx, esi ;Add low nybble of esi to upper nybble of ecx
   608 00000E29 C1EE08              <1>     shr esi, 8  ;Move upper byte to lower byte of esi
   609 00000E2C 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl
   610 00000E30 E866FAFFFF          <1>     call markBufferDirty
   611 00000E35 FFC0                <1>     inc eax ;Get next FAT sector
   612 00000E37 E8BFFBFFFF          <1>     call getBufForFat ;Get buffer Header in ebx
   613 00000E3C 72BC                <1>     jc .exitFail
   614 00000E3E 89F1                <1>     mov ecx, esi    ;Get the high byte of the entry into cl
   615 00000E40 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl  ;Write entry
   616 00000E43 EBAF                <1>     jmp short .exit
   617                              <1> .gotoNextClusterFat12Even:
   618 00000E45 29D1                <1>     sub ecx, edx
   619 00000E47 FFC9                <1>     dec ecx ;If edx = BytesPerSector - 1 then it crosses, else no
   620 00000E49 7533                <1>     jnz .gotoNextClusterFat12EvenNoX
   621 00000E4B 89F1                <1>     mov ecx, esi
   622 00000E4D 80E50F              <1>     and ch, 0Fh ;Save only the lower nybble of ch
   623 00000E50 884C1320            <1>     mov byte [rbx + bufferHdr.dataarea + rdx], cl   ;Store the first byte
   624 00000E54 E842FAFFFF          <1>     call markBufferDirty
   625 00000E59 FFC0                <1>     inc eax ;Get next FAT sector
   626 00000E5B E89BFBFFFF          <1>     call getBufForFat
   627 00000E60 7298                <1>     jc .exitFail
   628 00000E62 8A4B20              <1>     mov cl, byte [rbx + bufferHdr.dataarea] ;Get the first data byte from buffer
   629 00000E65 80E1F0              <1>     and cl, 0F0h    ;Clear the lower nybble of this entry
   630 00000E68 08E9                <1>     or cl, ch       ;Add our entry in
   631 00000E6A 884B20              <1>     mov byte [rbx + bufferHdr.dataarea], cl ;Write it back
   632 00000E6D EB85                <1>     jmp short .exit    
   633                              <1> .gotoNextClusterFat12OddNoX:
   634 00000E6F 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   635 00000E74 250F000000          <1>     and eax, 0Fh    ;Clear the upper three nybbles of entry (the entry)
   636 00000E79 C1E604              <1>     shl esi, 4  ;Shift entry up by 4
   637 00000E7C EB0A                <1>     jmp short .fat12common
   638                              <1> .gotoNextClusterFat12EvenNoX:
   639                              <1>     ;Here the cluster is even and can't cross a sector boundary
   640 00000E7E 0FB7441320          <1>     movzx eax, word [rbx + bufferHdr.dataarea + rdx]    ;Read the entry
   641 00000E83 2500F00000          <1>     and eax, 0F000h ;Clear the lower three nybbles of entry (the entry)
   642                              <1> .fat12common:
   643 00000E88 09F0                <1>     or eax, esi     ;Add the new entry bits
   644 00000E8A 6689441320          <1>     mov word [rbx + bufferHdr.dataarea + rdx], ax   ;Replace the entry
   645 00000E8F E960FFFFFF          <1>     jmp .exit
   646                              <1> 
   647                              <1> incrementFreeClusterCount:
   648                              <1> ;Cluster Deallocated Function
   649 00000E94 9C                  <1>     pushfq
   650 00000E95 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   651 00000E9C 7403                <1>     je .exit
   652 00000E9E FF4531              <1>     inc dword [rbp + dpb.dFreeClustCnt]
   653                              <1> .exit:
   654 00000EA1 9D                  <1>     popfq
   655                              <1>     return
    13                              <2> %%_ret:
    14 00000EA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   656                              <1> decrementFreeClusterCount:
   657                              <1> ;Cluster Allocated Function
   658 00000EA3 9C                  <1>     pushfq
   659 00000EA4 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
   660 00000EAB 7403                <1>     je .exit
   661 00000EAD FF4D31              <1>     dec dword [rbp + dpb.dFreeClustCnt]
   662                              <1> .exit:
   663 00000EB0 9D                  <1>     popfq
   664                              <1>     return
    13                              <2> %%_ret:
    14 00000EB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   665                              <1> 
   666                              <1> getBytesPerCluster:
   667                              <1> ;Gets the bytes per cluster
   668                              <1> ;Input: rbp -> Current DPB
   669                              <1> ;Output: ecx = Total bytes per cluster
   670 00000EB2 50                  <1>     push rax
   671 00000EB3 52                  <1>     push rdx
   672 00000EB4 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   673 00000EB8 0FB64D04            <1>     movzx ecx, byte [rbp + dpb.bMaxSectorInCluster]
   674 00000EBC FFC1                <1>     inc ecx
   675 00000EBE F7E1                <1>     mul ecx
   676 00000EC0 89C1                <1>     mov ecx, eax
   677 00000EC2 5A                  <1>     pop rdx
   678 00000EC3 58                  <1>     pop rax
   679                              <1>     return
    13                              <2> %%_ret:
    14 00000EC4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   680                              <1> 
   681                              <1> readFSInfoSector:
   682                              <1> ;Given a DPB, will attempt to read the FS Info sector. Destroys all regs.
   683                              <1> ;Input: rbp -> DPB pointer for FAT32 volume. Silently returns ok
   684                              <1> ;               if the DPB is not FAT32.
   685                              <1> ;       rsi -> BPB for the FAT32 volume.
   686                              <1> ;Output: rbp -> DPB dNextFreeClst and dNumberOfFreeCluster fields
   687                              <1> ;               correctly filled in from the FSInfo sector, if appropriate.
   688 00000EC5 51                  <1>     push rcx
   689 00000EC6 E84FFBFFFF          <1>     call getFATtype
   690 00000ECB 81F902000000        <1>     cmp ecx, 2  ;Is the DPB a FAT32 DPB?
   691 00000ED1 59                  <1>     pop rcx
   692 00000ED2 7578                <1>     jne .exit
   693                              <1> ;Only read the FSinfo sector if the drive has never been accessed before!
   694 00000ED4 F64524FF            <1>     test byte [rbp + dpb.bAccessFlag], -1
   695 00000ED8 7472                <1>     jz .exit
   696 00000EDA 0FB74625            <1>     movzx eax, word [rsi + bpb32.FSinfo]    ;Get the FSInfo sector number
   697 00000EDE 85C0                <1>     test eax, eax   ;0 is an invalid value for this 
   698                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000EE0 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000EE2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   699 00000EE3 3DFFFF0000          <1>     cmp eax, 0FFFFh ;If this is unknown, return
   700                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000EE8 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000EEA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   701 00000EEB 48892D(0A070000)    <1>     mov qword [workingDPB], rbp ;Set this because it isnt set yet!
   702 00000EF2 E8FFFAFFFF          <1>     call getBufForDOS   ;Now get the sector number
   703                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000EF7 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000EF9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   704                              <1>     ;Now sanity check the sector data itself
   705 00000EFA 817B2052526141      <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.leadSig], fsInfoSig1
   706 00000F01 7549                <1>     jne .exit
   707 00000F03 81BB04020000727241- <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.strucSig], fsInfoSig2
   707 00000F0C 61                  <1>
   708 00000F0D 753D                <1>     jne .exit
   709 00000F0F 81BB1C020000000055- <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.trailSig], fsInfoSig3
   709 00000F18 AA                  <1>
   710 00000F19 7531                <1>     jne .exit
   711                              <1> ;Here we can assume the struct is accessible. 
   712                              <1> ;We sanity check the struct values to ensure they are possible.
   713                              <1> ;We reset with some sane defaults in the event of bad data
   714 00000F1B C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1  ;Start is default (clust 2)
   715 00000F22 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1  ;Unknown
   716                              <1>     ;Start with next free check
   717 00000F29 8B830C020000        <1>     mov eax, dword [rbx + bufferHdr.dataarea + FSInfo.nextFree] 
   718 00000F2F 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   719 00000F32 770A                <1>     ja .skipFirstFree
   720 00000F34 3D02000000          <1>     cmp eax, 2
   721 00000F39 7203                <1>     jb .skipFirstFree
   722 00000F3B 89452D              <1>     mov dword [rbp + dpb.dNextFreeClst], eax
   723                              <1> .skipFirstFree:
   724                              <1>     ;Now we do free count check
   725 00000F3E 8B8308020000        <1>     mov eax, dword [rbx + bufferHdr.dataarea + FSInfo.freeCount]
   726 00000F44 3B450F              <1>     cmp eax, dword [rbp + dpb.dMaxClusterAddr]
   727 00000F47 7703                <1>     ja .exit
   728 00000F49 894531              <1>     mov dword [rbp + dpb.dFreeClustCnt], eax
   729                              <1> .exit:
   730 00000F4C F8                  <1>     clc
   731                              <1>     return
    13                              <2> %%_ret:
    14 00000F4D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   732                              <1> 
   733                              <1> writeFSInfoSector:
   734                              <1> ;Will write an FS Info sector back to the disk.
   735                              <1> ;Input: rbp -> DPB of the disk we are writing the FSInfo date for.
   736                              <1> ;Output: CF=NC: Updated FSInfo fields if FAT32. CF=CY: Error reading disk
   737                              <1> 
   738 00000F4E 51                  <1>     push rcx
   739 00000F4F E8C6FAFFFF          <1>     call getFATtype
   740 00000F54 81F902000000        <1>     cmp ecx, 2  ;Is the DPB a FAT32 DPB?
   741 00000F5A 59                  <1>     pop rcx
   742 00000F5B F8                  <1>     clc         ;Clear the CF flag if not FAT32
   743                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00000F5C 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00000F5E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   744                              <1> 
   745 00000F5F 50                  <1>     push rax
   746 00000F60 53                  <1>     push rbx
   747 00000F61 51                  <1>     push rcx
   748 00000F62 52                  <1>     push rdx
   749 00000F63 56                  <1>     push rsi
   750 00000F64 57                  <1>     push rdi
   751                              <1> 
   752 00000F65 31C0                <1>     xor eax, eax        ;Get sector 0
   753 00000F67 E88AFAFFFF          <1>     call getBufForDOS   ;Get a buffer Sector 0 pointed to be rbx
   754 00000F6C 0F8281000000        <1>     jc .exit
   755 00000F72 0FB74345            <1>     movzx eax, word [rbx + bufferHdr.dataarea + bpb32.FSinfo]
   756 00000F76 85C0                <1>     test eax, eax
   757 00000F78 7479                <1>     jz .exit
   758 00000F7A 3DFFFF0000          <1>     cmp eax, 0FFFFh ;If this is unknown, return
   759 00000F7F 7472                <1>     je .exit
   760                              <1> ;First compute where the backup FSInfo is
   761 00000F81 89C1                <1>     mov ecx, eax    ;(e)ax has FSInfo sector number
   762 00000F83 66034B47            <1>     add cx, word [rbx + bufferHdr.dataarea + bpb32.BkBootSec]    
   763                              <1>     ;cx now has the backup sector
   764                              <1> ;If they are equal, because backup boot sector is 0, set ecx to -1
   765 00000F87 39C1                <1>     cmp ecx, eax
   766 00000F89 BAFFFFFFFF          <1>     mov edx, -1
   767 00000F8E 0F44CA              <1>     cmove ecx, edx  ;Set ecx to -1 to avoid writing the same sector twice
   768                              <1>     
   769 00000F91 51                  <1>     push rcx            ;Save the backup FSInfo sector value
   770 00000F92 E85FFAFFFF          <1>     call getBufForDOS   ;Now get the primary FSInfo sector
   771 00000F97 5F                  <1>     pop rdi             ;Return the backup FSInfo sector value in rdi
   772 00000F98 7259                <1>     jc .exit
   773                              <1> 
   774 00000F9A 31F6                <1>     xor esi, esi    ;Use as a dirty marker
   775 00000F9C 8B4D31              <1>     mov ecx, dword [rbp + dpb.dFreeClustCnt]
   776 00000F9F 398B08020000        <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], ecx
   777 00000FA5 7408                <1>     je .checkFirst
   778                              <1>     ;Update the value
   779 00000FA7 898B08020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], ecx 
   780 00000FAD FFC6                <1>     inc esi
   781                              <1> .checkFirst:
   782 00000FAF 8B4D2D              <1>     mov ecx, dword [rbp + dpb.dNextFreeClst]
   783 00000FB2 398B0C020000        <1>     cmp dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], ecx
   784 00000FB8 7408                <1>     je .checkFlush
   785 00000FBA 898B0C020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], ecx
   786 00000FC0 FFC6                <1>     inc esi
   787                              <1> .checkFlush:
   788 00000FC2 85F6                <1>     test esi, esi   ;If this is zero, we didn't write new values. Return
   789 00000FC4 742D                <1>     jz .exit
   790 00000FC6 E8D0F8FFFF          <1>     call markBufferDirty    ;Else, the sector is dirty. Mark for flushing!
   791                              <1>     ;Now since we have a dirty sector, we need to sync the backup sector too!
   792 00000FCB 81FFFFFFFFFF        <1>     cmp edi, -1 ;Do we have a backup sector? If not, simply return
   793 00000FD1 7420                <1>     je .exit
   794 00000FD3 89F8                <1>     mov eax, edi    ;Else get the backup FSInfo sector value in eax
   795 00000FD5 E81CFAFFFF          <1>     call getBufForDOS   ;Now get the sector pointer   
   796 00000FDA 7217                <1>     jc .exit            ;Fail to sync if this fails
   797                              <1>     ;Now we know there is something to write so write it!
   798                              <1>     ;Also CF=NC here
   799 00000FDC 8B4531              <1>     mov eax, dword [rbp + dpb.dFreeClustCnt]
   800 00000FDF 898308020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.freeCount], eax 
   801 00000FE5 8B452D              <1>     mov eax, dword [rbp + dpb.dNextFreeClst]
   802 00000FE8 89830C020000        <1>     mov dword [rbx + bufferHdr.dataarea + FSInfo.nextFree], eax
   803 00000FEE E8A8F8FFFF          <1>     call markBufferDirty    ;Mark this buffer as dirty too
   804                              <1> .exit:
   805 00000FF3 5F                  <1>     pop rdi
   806 00000FF4 5E                  <1>     pop rsi
   807 00000FF5 5A                  <1>     pop rdx
   808 00000FF6 59                  <1>     pop rcx
   809 00000FF7 5B                  <1>     pop rbx
   810 00000FF8 58                  <1>     pop rax
   811                              <1>     return
    13                              <2> %%_ret:
    14 00000FF9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    36                                  %include "./src/Kernel/FAT/findfile.asm"
     1                              <1> ;Generic Find First and Find Next functions here
     2                              <1> findNextMain:
     3 00000FFA 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the current DTA ptr in rdi
     4 00001001 F60780              <1>     test byte [rdi + ffBlock.driveNum], 80h ;Bit 7 set for network search
     5 00001004 7408                <1>     jz .notNet
     6 00001006 B81C110000          <1>     mov eax, 0111Ch ;Network find next
     7 0000100B CD2F                <1>     int 2Fh
     8                              <1>     return  ;Return propagating the error code
    13                              <2> %%_ret:
    14 0000100D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> .notNet:
    10 0000100E C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    11 00001015 E8D0660000          <1>     call dosCrit1Enter
    12 0000101A 488D05(7A060000)    <1>     lea rax, tmpCDS
    13 00001021 488905(12070000)    <1>     mov qword [workingCDS], rax ;Set the working CDS to be the tmp cds!
    14 00001028 8A07                <1>     mov al, byte [rdi + ffBlock.driveNum]   ;Get 1 based number back!
    15 0000102A 0440                <1>     add al, "@"  ;Convert into letter
    16 0000102C E871620000          <1>     call buildNewCDS     ;Build a new CDS bypassing the real CDS!
    17 00001031 723C                <1>     jc .critError   ;Return error if this fails
    18 00001033 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
    19 0000103A 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr] 
    20 0000103E E885610000          <1>     call setWorkingDPB
    21 00001043 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]
    22 00001047 8805(09070000)      <1>     mov byte [workingDrv], al
    23 0000104D C605(08070000)E5    <1>     mov byte [delChar], 0E5h
    24 00001054 C605(E4060000)00    <1>     mov byte [fcbName + 11], 0  ;Set to this being a file we are searching for
    25 0000105B C605(69040000)FF    <1>     mov byte [fileDirFlag], -1  ;Set to searching for a file!
    26 00001062 E80F000000          <1>     call searchMoreDir  ;Now find the next one!
    27 00001067 7206                <1>     jc .critError   ;Return error if this fails
    28                              <1> .errExit:
    29 00001069 E886660000          <1>     call dosCrit1Exit
    30                              <1>     return
    13                              <2> %%_ret:
    14 0000106E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> .critError:
    32 0000106F B812000000          <1>     mov eax, errNoFil
    33 00001074 EBF3                <1>     jmp short .errExit
    34                              <1> searchMoreDir:
    35                              <1> ;The three directory variables are set up from the ffblock. 
    36                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
    37                              <1> ;Current DTA is also used to contain the ff block address
    38                              <1> ;All registers can be trashed
    39 00001076 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    40                              <1>     ;First copy the search template back then setup dirClustA and dirSect vars
    41 0000107D 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
    42 00001084 57                  <1>     push rdi
    43 00001085 488D7701            <1>     lea rsi, qword [rdi + ffBlock.template]
    44 00001089 488D3D(D9060000)    <1>     lea rdi, fcbName
    45 00001090 B90B000000          <1>     mov ecx, 11
    46 00001095 F3A4                <1>     rep movsb   ;Get copy the search template!
    47 00001097 5F                  <1>     pop rdi
    48 00001098 F6471540            <1>     test byte [rdi + ffBlock.attribFnd], dirCharDev  ;Did we find a char dev?
    49 0000109C 0F85F0000000        <1>     jnz .errorExit                              ;No more files if so!!
    50 000010A2 8A470C              <1>     mov al, byte [rdi + ffBlock.attrib] ;Get search attrib...
    51 000010A5 8805(FC060000)      <1>     mov byte [searchAttr], al   ;... and save it!
    52 000010AB 8B4711              <1>     mov eax, dword [rdi + ffBlock.parDirClus]   ;Get the directory cluster
    53 000010AE 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;... into dir vars
    54 000010B4 8905(7B070000)      <1>     mov dword [dirClustPar], eax
    55                              <1>     ;Get number of 32 byte entries in a sector
    56 000010BA 8B470D              <1>     mov eax, dword [rdi + ffBlock.dirOffset]    ;Get the 32 byte entry
    57 000010BD 3DFFFFFFFF          <1>     cmp eax, -1 ;If this is an invalid value, exit error!
    58 000010C2 0F84CA000000        <1>     je .errorExit
    59 000010C8 8905(85070000)      <1>     mov dword [dirEntry], eax
    60                              <1>     ;Multiply by 32 to get the byte offset into the directory file
    61 000010CE C1E005              <1>     shl eax, 5  ;eax has byte offset into directory file
    62                              <1>     ;Now get bytes per cluster
    63 000010D1 89C6                <1>     mov esi, eax    ;Save bytewise file ptr in esi
    64 000010D3 813D(7F070000)0000- <1>     cmp dword [dirClustA], 0   ;If we at cluster 0, we are in old style root dir
    64 000010DB 0000                <1>
    65 000010DD 0F8492000000        <1>     je .oldFat
    66 000010E3 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
    67 000010E7 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSecPerClustShift]
    68 000010EB D3E0                <1>     shl eax, cl ;Shift to get bytes per cluster in eax
    69 000010ED 89C1                <1>     mov ecx, eax    ;Move bytes per cluster into ecx
    70 000010EF 89F0                <1>     mov eax, esi    ;Get bytewise file ptr back in eax
    71 000010F1 31D2                <1>     xor edx, edx
    72 000010F3 F7F1                <1>     div ecx ;file ptr / bytes per cluster 
    73                              <1>     ;eax now has which cluster rel file (need to walk FAT that many times)
    74                              <1>     ;edx has byte offset into cluster (or Root dir)
    75 000010F5 89C3                <1>     mov ebx, eax    ;Save cluster rel directory file in ebx
    76                              <1>     ;Now compute sector offset into cluster
    77 000010F7 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
    78 000010FB 89D0                <1>     mov eax, edx    ;Move offset into cluster
    79 000010FD 31D2                <1>     xor edx, edx
    80 000010FF F7F1                <1>     div ecx 
    81                              <1>     ;eax now has sector offset into cluster
    82                              <1>     ;edx has byte offset into sector 
    83 00001101 668905(83070000)    <1>     mov word [dirSect], ax  ;Store the sector offset into var
    84 00001108 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk cluster number
    85                              <1>     ;Now walk the FAT ebx many times starting from dirClustA in eax
    86 0000110E 89D9                <1>     mov ecx, ebx
    87 00001110 67E316              <1>     jecxz .skipFatWalk  ;IF ecx is 0, skip walking FAT
    88                              <1> .fatlp:
    89 00001113 E8FFFBFFFF          <1>     call readFAT
    90 00001118 3DFFFFFFFF          <1>     cmp eax, -1
    91 0000111D 7473                <1>     je .errorExit
    92 0000111F FFC9                <1>     dec ecx
    93 00001121 75F0                <1>     jnz .fatlp
    94 00001123 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store this cluster number in variable
    95                              <1> .skipFatWalk:
    96 00001129 488D05BC000000      <1>     lea rax, searchDir.nextEp
    97 00001130 50                  <1>     push rax    ;Push the return address onto stack
    98 00001131 8B05(7F070000)      <1>     mov eax, dword [dirClustA]
    99 00001137 E849F9FFFF          <1>     call getStartSectorOfCluster    ;Get Start Sector of cluster
   100 0000113C 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]   ;Get sector offset into the cluster
   101 00001143 4801D8              <1>     add rax, rbx    ;Add the sector offset into the cluster
   102                              <1> .common:
   103 00001146 E8B5F8FFFF          <1>     call getBufForDir
   104 0000114B 0F826B010000        <1>     jc searchDir.fnfError
   105 00001151 E86A010000          <1>     call prepSectorSearch  ;rbx has the buffer ptr for this dir sector
   106                              <1>     ;Gets also in ecx the # of 32 byte entries a sector
   107 00001156 8B05(85070000)      <1>     mov eax, dword [dirEntry]   ;Get 32 byte offset into directory
   108                              <1>     ;Need to convert into an offset into this sector
   109 0000115C 52                  <1>     push rdx
   110 0000115D 31D2                <1>     xor edx, edx
   111 0000115F F7F1                <1>     div ecx     ;Divide dirEntry by max entries in sector. Remainder in edx.
   112 00001161 29D1                <1>     sub ecx, edx ;Subtract the offset to get the number of entries left
   113 00001163 C1E205              <1>     shl edx, 5  ;Multiply by 32 to turn into bytes to add to rsi
   114 00001166 4801D6              <1>     add rsi, rdx    ;rsi points to current entry in the sector.
   115 00001169 5A                  <1>     pop rdx
   116                              <1>     ;We continue AS IF this entry was bad
   117                              <1>     ;Now setup al as upon normal entry 
   118 0000116A 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   119 00001170 E9C4010000          <1>     jmp findInBuffer.nextEntry ;Proceed from within to resume search properly!
   120                              <1>     ;The return address on the stack will return to the ep's pushed
   121                              <1> .oldFat:
   122                              <1> ;Old FAT 12/16 root dirs fall thru here only
   123                              <1> ;esi = byte ptr in root dir of entry
   124 00001175 488D0509010000      <1>     lea rax, searchDir.oldNextEP
   125 0000117C 50                  <1>     push rax    ;Push return address onto the stack
   126 0000117D 0FB74502            <1>     movzx eax, word [rbp + dpb.wBytesPerSector]
   127 00001181 31D2                <1>     xor edx, edx
   128 00001183 96                  <1>     xchg esi, eax
   129 00001184 F7F6                <1>     div esi ;Divide dir file position by bytes per sector
   130                              <1>     ;eax = Sector number 
   131                              <1>     ;edx = Byte offset within the sector
   132 00001186 668905(83070000)    <1>     mov word [dirSect], ax ;Set the root directory sector offset
   133 0000118D 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Add sector 0 of root dir
   134 00001190 EBB4                <1>     jmp short .common
   135                              <1> .errorExit:
   136 00001192 F9                  <1>     stc
   137                              <1>     return
    13                              <2> %%_ret:
    14 00001193 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> searchDir:
   139                              <1> ;Called in a level 1 critical section. 
   140                              <1> ;The directory variables are set and fcbName has the pattern to match
   141                              <1> ; WorkingDPB is setup also (hence, level 1 critical section)
   142                              <1> ;All registers can be trashed
   143                              <1> ;Return with CF=CY if no entry found in directory with al = errNoFil
   144                              <1> ;If CF=NC, then rsi also points to the directory entry in disk buffer.
   145                              <1> 
   146 00001194 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   147 0000119B 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working dpb for the transfer
   148 000011A2 F605(FC060000)08    <1>     test byte [searchAttr], dirVolumeID  ;If the attr has volid, intervene
   149 000011A9 7509                <1>     jnz .volIdSearch
   150 000011AB F605(5F040000)FF    <1>     test byte [volIdFlag], -1  ;Is volid search override flag set?
   151 000011B2 7410                <1>     jz .notVolSearch    ;Skip the intervention if not set
   152                              <1> .volIdSearch:
   153                              <1> ;Here we do a volid search intervention. Always searches root dir.
   154 000011B4 F605(69040000)FF    <1>     test byte [fileDirFlag], -1 ;If we are going down path, avoid invervention
   155 000011BB 7407                <1>     jz .notVolSearch
   156 000011BD 31C0                <1>     xor eax, eax ;Search the root dir.
   157 000011BF E89A060000          <1>     call prepSetupDirSearchVars
   158                              <1> .notVolSearch:
   159 000011C4 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get the cluster number to start searching at
   160 000011CA 85C0                <1>     test eax, eax
   161 000011CC 0F8498000000        <1>     jz .oldRoot
   162 000011D2 E8AEF8FFFF          <1>     call getStartSectorOfCluster    ;Else, get the start sector in rax
   163                              <1> .sectorLoop:
   164 000011D7 E824F8FFFF          <1>     call getBufForDir
   165 000011DC 0F82DA000000        <1>     jc .fnfError
   166 000011E2 E8D9000000          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   167                              <1> .rmdirEP: ;Entry used by rmdir to jump into this routine
   168 000011E7 E8E0000000          <1>     call findInBuffer
   169                              <1> .nextEp:
   170                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000011EC 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000011EE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   171 000011EF 0F84A8000000        <1>     jz .chardev    ;CF=CY AND ZF=ZE => File not found
   172                              <1>     ;If ZF=ZE then chardev (i.e. we hit an entry starting with 00)
   173                              <1>     ;Else, we now have to get the next sector of the cluster or next cluster
   174                              <1>     ;IF however, the next cluster is -1, then we return fail
   175 000011F5 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   176 000011FB 8905(54070000)      <1>     mov dword [currClustD], eax
   177 00001201 668B05(83070000)    <1>     mov ax, word [dirSect]
   178 00001208 8805(5C070000)      <1>     mov byte [currSectC], al    ;Cluster Relative sector
   179 0000120E 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
   180 00001212 488905(5D070000)    <1>     mov qword [currSectD], rax  
   181 00001219 C705(50070000)0000- <1>     mov dword [currClustF], 0 ;Use as flag to tell us if cluster has changed
   181 00001221 0000                <1>
   182 00001223 E830FAFFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
   183 00001228 0F828E000000        <1>     jc .fnfError
   184 0000122E 746D                <1>     jz .chardev    ;We are at the end of the directory and didnt find the file
   185 00001230 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Store the sector number here
   186 00001237 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector in cluster
   187 0000123E 50                  <1>     push rax    ;Save the next sector we need to read
   188 0000123F 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  ;Get disk relative cluster
   189 00001245 3B05(54070000)      <1>     cmp eax, dword [currClustD] ;Did it change?
   190 0000124B 58                  <1>     pop rax
   191 0000124C 7489                <1>     je .sectorLoop  ;If not, we advanced sectors only
   192 0000124E 66C705(83070000)00- <1>     mov word [dirSect], 0   ;If we did, reset this counter
   192 00001256 00                  <1>
   193 00001257 50                  <1>     push rax
   194 00001258 8B05(54070000)      <1>     mov eax, dword [currClustD]
   195 0000125E 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Put new cluster number in var
   196 00001264 58                  <1>     pop rax
   197 00001265 E96DFFFFFF          <1>     jmp .sectorLoop
   198                              <1> 
   199                              <1> .oldRoot:
   200                              <1> ;Different search for FAT 12/16 root directories. We assume we have 
   201                              <1> ; one large contiguous cluster.
   202                              <1> .oldSectorLp:
   203 0000126A 0FB705(83070000)    <1>     movzx eax, word [dirSect]    ;Move the sector number into eax
   204 00001271 034517              <1>     add eax, dword [rbp + dpb.dFirstUnitOfRootDir] ;Get sector 0 of root dir
   205 00001274 E887F7FFFF          <1>     call getBufForDir
   206 00001279 7241                <1>     jc .fnfError
   207 0000127B E840000000          <1>     call prepSectorSearch      ;rbx has the buffer pointer for this dir sector
   208 00001280 E847000000          <1>     call findInBuffer
   209                              <1> .oldNextEP:
   210                              <1>     retnc   ;If CF=NC, then the dir has been found and the DTA has been setup 
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001285 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001287 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   211 00001288 7413                <1>     jz .chardev
   212 0000128A 66FF05(83070000)    <1>     inc word [dirSect]  ;Goto next sector in directory
   213 00001291 0FB74509            <1>     movzx eax, word [rbp + dpb.wNumberRootDirEntries]
   214 00001295 3905(85070000)      <1>     cmp dword [dirEntry], eax ;Have we reached the last dir entry?
   215 0000129B 72CD                <1>     jb .oldSectorLp    ;If equal, no more entries to search. Game over!
   216                              <1> .chardev:
   217                              <1> ;Now check for a char device ONLY if we are checking for file or dir!
   218                              <1> ;If exclusive dir on, fail!
   219 0000129D F605(69040000)FF    <1>     test byte [fileDirFlag], -1 ;Set if file/dir. Clear if only dir!
   220 000012A4 7416                <1>     jz .fnfError    
   221 000012A6 E8C0090000          <1>     call checkIfCharDevice
   222 000012AB 720F                <1>     jc .fnfError    ;Not a char dev? Exit!
   223 000012AD E8F0090000          <1>     call buildCharDir
   224 000012B2 31F6                <1>     xor esi, esi        ;Clear the CF flag
   225 000012B4 488D35(5A060000)    <1>     lea rsi, curDirCopy ;Return with rsi pointing to the dir copy!
   226                              <1>     return
    13                              <2> %%_ret:
    14 000012BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> .fnfError:
   228 000012BC F9                  <1>     stc
   229 000012BD B012                <1>     mov al, errNoFil
   230                              <1>     return
    13                              <2> %%_ret:
    14 000012BF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> prepSectorSearch:
   232                              <1> ;Input: rbx -> Buffer with Dir sector to search
   233                              <1> ;Output: rsi -> Start of the dir data area
   234                              <1> ;        ecx = Max number of 32 byte dir entries in sector buffer
   235 000012C0 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Set rsi to buffer data area
   236 000012C4 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   237 000012C8 C1E905              <1>     shr ecx, 5  ;Divide by 32 to get # of entries in sector buffer
   238                              <1>     return
    13                              <2> %%_ret:
    14 000012CB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   239                              <1> 
   240                              <1> findInBuffer:
   241                              <1> ;Input:  rsi = Sector buffer data area
   242                              <1> ;        cx = Number of entries to check in the sector
   243                              <1> ;Output: CF=CY => No entries found
   244                              <1> ;        ZF=NE => Keep searching in subsequent directories
   245                              <1> ;        ZF=ZE => End of directory reached early, stop
   246                              <1> ;        CF=NC => Entry found, directory data copied to SDA
   247                              <1> ;        rsi = Points to start of the disk buffer directory entry
   248 000012CC 8A05(FC060000)      <1>     mov al, byte [searchAttr]  ;Get the search attrib
   249 000012D2 E8B5000000          <1>     call adjustSearchAttr   ;Adjust the search attributes, including volid
   250                              <1> .searchMainLp:
   251                              <1> ;First check if rsi is pointing to a 00h or 0E5h
   252 000012D7 8A25(08070000)      <1>     mov ah, byte [delChar]
   253 000012DD 803E00              <1>     cmp byte [rsi], 00h
   254 000012E0 7404                <1>     je .emptySlot   ;If so, check if we are looking for a free dir ptr
   255 000012E2 3826                <1>     cmp byte [rsi], ah  ;Is the first char the del char?
   256 000012E4 7510                <1>     jne .notLookingForEmpty
   257                              <1> .emptySlot:
   258                              <1> ;Here we check if we are looking for an empty directory entry or
   259                              <1> ; we have reached the end of the file (if the first byte is 00h)
   260                              <1> ;If the first byte of the FCB name = delchar => searching for free dir entry
   261 000012E6 3A25(D9060000)      <1>     cmp ah, byte [fcbName] 
   262                              <1>     rete    ;Return if equal (CF=NC too)
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000012EC 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000012EE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   263                              <1>     ;If we are not looking for an empty dir but rsi points to 00, exit bad
   264 000012EF 803E00              <1>     cmp byte [rsi], 00h ;Minor optimisation for dir searches
   265 000012F2 7545                <1>     jne .nextEntry  ;If not, skip this entry as it starts with 0E5h (free)
   266 000012F4 F9                  <1>     stc
   267                              <1>     return
    13                              <2> %%_ret:
    14 000012F5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   268                              <1> .notLookingForEmpty:
   269 000012F6 8A660B              <1>     mov ah, byte [rsi + fatDirEntry.attribute]  ;ah = File attributes
   270 000012F9 80E4DE              <1>     and ah, ~(dirReadOnly | dirArchive) ;Avoid these two bits in search
   271 000012FC F605(5F040000)FF    <1>     test byte [volIdFlag], -1   ;If this is set, intervene in search.
   272 00001303 7406                <1>     jz .notVolIdExclusive
   273 00001305 F6C408              <1>     test ah, dirVolumeID   ;If we are a volid, clear CF return
   274 00001308 742F                <1>     jz .nextEntry
   275                              <1>     return
    13                              <2> %%_ret:
    14 0000130A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   276                              <1> .notVolIdExclusive:
   277                              <1> ;If any entry has the volid bit set, it is considered a VOL id only.
   278 0000130B 803D(69040000)00    <1>     cmp byte [fileDirFlag], 0   ;Are we in dir only mode?
   279 00001312 743C                <1>     je .exclusiveDir
   280 00001314 3C08                <1>     cmp al, dirVolumeID ;Are WE searching for a volume label?
   281 00001316 743F                <1>     je .volFile ;If so, go here
   282 00001318 F6C408              <1>     test ah, dirVolumeID ;Is this file a vollbl that we are not looking for?
   283 0000131B 751C                <1>     jnz .nextEntry
   284 0000131D 84E4                <1>     test ah, ah ;Regular files are always accepted at this point!
   285 0000131F 7408                <1>     jz .scanName
   286 00001321 3C16                <1>     cmp al, dirInclusive    ;Is this an inclusive search?
   287 00001323 7404                <1>     je .scanName            ;If so, we accept this file!
   288 00001325 38C4                <1>     cmp ah, al              ;(ah=File bits)==(al=Search bits)?
   289 00001327 7510                <1>     jne .nextEntry          ;If bits dont match now, we ignore entry
   290                              <1> .scanName:
   291                              <1> ;rsi points to the start of the fatDirEntry in the Sector Buffer (fname)
   292 00001329 56                  <1>     push rsi
   293 0000132A 488D3D(D9060000)    <1>     lea rdi, fcbName ;Goto name template to search for
   294 00001331 E83E000000          <1>     call .nameCompare
   295 00001336 5E                  <1>     pop rsi
   296 00001337 7424                <1>     je .searchEntryFound
   297                              <1> .nextEntry:
   298                              <1> ;Go to next entry
   299 00001339 4881C620000000      <1>     add rsi, fatDirEntry_size    ;Goto next entry
   300 00001340 FF05(85070000)      <1>     inc dword [dirEntry] ;And denote that in variable
   301 00001346 FFC9                <1>     dec ecx
   302 00001348 758D                <1>     jnz .searchMainLp
   303                              <1> .badExit:
   304 0000134A 31C0                <1>     xor eax, eax
   305 0000134C FFC0                <1>     inc eax ;Clear ZF
   306 0000134E F9                  <1>     stc
   307                              <1>     return
    13                              <2> %%_ret:
    14 0000134F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   308                              <1> .exclusiveDir:
   309                              <1> ;Used when going down a path, dir bit simply need be set
   310 00001350 F6C410              <1>     test ah, dirDirectory
   311 00001353 75D4                <1>     jnz .scanName
   312 00001355 EBE2                <1>     jmp short .nextEntry
   313                              <1> 
   314                              <1> .volFile:
   315 00001357 38C4                <1>     cmp ah, al  ;Is the file indeed a Volume ID?
   316 00001359 74CE                <1>     je .scanName       ;If so, scan the name agrees
   317 0000135B EBDC                <1>     jmp short .nextEntry    ;Else, goto next entry
   318                              <1> 
   319                              <1> .searchEntryFound:
   320                              <1> ;Here a good entry was found!
   321 0000135D 56                  <1>     push rsi
   322 0000135E 57                  <1>     push rdi
   323 0000135F 88C3                <1>     mov bl, al  ;Save temporarily the search attributes
   324 00001361 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   325 00001368 B904000000          <1>     mov ecx, 32/8
   326 0000136D F348A5              <1>     rep movsq   ;Copy the directory to SDA
   327 00001370 5F                  <1>     pop rdi
   328 00001371 5E                  <1>     pop rsi ;Point rsi to the directory entry in the buffer
   329 00001372 F8                  <1>     clc
   330                              <1>     return
    13                              <2> %%_ret:
    14 00001373 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   331                              <1> 
   332                              <1> .nameCompare:
   333                              <1> ;Input: rsi = source string
   334                              <1> ;       rdi = string template to compare against
   335                              <1> ;Output: ZF=ZE => Strings are ok
   336                              <1> ;        ZF=NZ => Strings not ok
   337                              <1> ;Accepts wildcards. Trashes al
   338 00001374 51                  <1>     push rcx
   339 00001375 31C9                <1>     xor ecx, ecx    ;11 chars to compare
   340                              <1> .ncLp:
   341 00001377 81F90B000000        <1>     cmp ecx, 11
   342 0000137D 740B                <1>     je .ncExit
   343 0000137F FFC1                <1>     inc ecx
   344 00001381 A6                  <1>     cmpsb   ;Compare the chars in the two strings and advance ptrs
   345 00001382 74F3                <1>     je .ncLp    ;If equal, keep going
   346 00001384 807FFF3F            <1>     cmp byte [rdi - 1], "?" ;Was the char in the template a wildcard?
   347 00001388 74ED                <1>     je .ncLp
   348                              <1> .ncExit:
   349 0000138A 59                  <1>     pop rcx
   350                              <1>     return
    13                              <2> %%_ret:
    14 0000138B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   351                              <1> adjustSearchAttr:
   352                              <1> ;Converts the byte to a system only if the bit is set
   353                              <1> ;Input: eax = User selected search mask
   354                              <1> ;Output: eax = Modified search mask
   355 0000138C 253F000000          <1>     and eax, 03Fh   ;Clear upper two bits of the search attributes
   356 00001391 A908000000          <1>     test eax, dirVolumeID   ;Is the volume id bit set?
   357                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001396 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001398 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   358 00001399 B808000000          <1>     mov eax, dirVolumeID
   359                              <1>     return
    13                              <2> %%_ret:
    14 0000139E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   360                              <1> 
   361                              <1> asciiToFCB:
   362                              <1> ;Converts a filename in the form FILENAME.EXT,0 to FILENAMEEXT
   363                              <1> ;Will uppercase any lowercase chars as this could be used with user buffers.
   364                              <1> ;Names such as SYS.COM get converted to "SYS     COM"
   365                              <1> ;Name is space padded.
   366                              <1> ;Input: rsi = ASCII string buffer
   367                              <1> ;       rdi = FCB name buffer
   368                              <1> ;Output: al = Char that terminated the source string 
   369 0000139F 53                  <1>     push rbx    
   370 000013A0 57                  <1>     push rdi
   371 000013A1 B90B000000          <1>     mov ecx, 11
   372 000013A6 B020                <1>     mov al, " "
   373 000013A8 F3AA                <1>     rep stosb   ;Fill the buffer with spaces (so we don't need to fill later)
   374 000013AA 5F                  <1>     pop rdi
   375 000013AB 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base pointer of this buffer
   376                              <1> .processName:
   377 000013AE AC                  <1>     lodsb   ;Get the char in al
   378 000013AF E8DD5F0000          <1>     call uppercaseChar  ;Just in ANY case, we will uppercase the cahar
   379 000013B4 84C0                <1>     test al, al
   380 000013B6 742D                <1>     jz .exit
   381 000013B8 3C20                <1>     cmp al, " " ;If space or a period, go to extension field. If null, exit
   382 000013BA 740E                <1>     je .extSpace
   383 000013BC 3C2E                <1>     cmp al, "."
   384 000013BE 7413                <1>     je .ext
   385                              <1>     ;Test if the char is valid
   386 000013C0 E84E610000          <1>     call checkCharValid ;ZF=ZE => Invalid char
   387 000013C5 741E                <1>     jz .exit    ;If the char invalid, consider it a terminator
   388 000013C7 AA                  <1>     stosb   ;Store the char
   389 000013C8 EBE4                <1>     jmp short .processName
   390                              <1> .extSpace:
   391                              <1> ;Now we scan for a period in the name
   392 000013CA AC                  <1>     lodsb   ;Get a char and increase rsi
   393 000013CB 84C0                <1>     test al, al
   394 000013CD 7416                <1>     jz .exit
   395 000013CF 3C2E                <1>     cmp al, "."     ;If al is not a period...
   396 000013D1 75F7                <1>     jne .extSpace   ; keep searching
   397                              <1> .ext:
   398 000013D3 488D7B08            <1>     lea rdi, qword [rbx + filename.fExt]    ;Put destination at the extension
   399                              <1> .processExt:
   400 000013D7 AC                  <1>     lodsb
   401 000013D8 84C0                <1>     test al, al
   402 000013DA 7409                <1>     jz .exit
   403 000013DC 3C20                <1>     cmp al, " "
   404 000013DE 7405                <1>     je .exit
   405 000013E0 AA                  <1>     stosb
   406 000013E1 EBF4                <1>     jmp short .processExt
   407                              <1> .exitBadChar:
   408 000013E3 30C0                <1>     xor al, al  ;Return a null terminator
   409                              <1> .exit:
   410 000013E5 5B                  <1>     pop rbx
   411                              <1>     return
    13                              <2> %%_ret:
    14 000013E6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> 
   413                              <1> FCBToAsciiz:
   414                              <1> ;Converts a filename in the form FILENAMEEXT to FILENAME.EXT,0
   415                              <1> ;Name is space padded too
   416                              <1> ;Input: rsi = FCB name buffer
   417                              <1> ;       rdi = ASCIIZ string buffer
   418 000013E7 B908000000          <1>     mov ecx, 8
   419 000013EC F3A4                <1>     rep movsb   ;Move the name over
   420                              <1> .scanNameSpace:
   421 000013EE 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space?
   422 000013F2 750D                <1>     jne .ext
   423 000013F4 48FFCF              <1>     dec rdi
   424 000013F7 FFC1                <1>     inc ecx
   425 000013F9 81F908000000        <1>     cmp ecx, 8
   426 000013FF 72ED                <1>     jb .scanNameSpace
   427                              <1> .ext:
   428 00001401 66813E2020          <1>     cmp word [rsi], "  "    ;Are the first two chars a space?
   429 00001406 7506                <1>     jne .validExt
   430 00001408 807E0220            <1>     cmp byte [rsi + 2], " " ;Is the final char a space?
   431 0000140C 7415                <1>     je .exit
   432                              <1> .validExt:
   433 0000140E B02E                <1>     mov al, "." ;We have a valid extension, store a period
   434 00001410 AA                  <1>     stosb
   435 00001411 B903000000          <1>     mov ecx, 3
   436 00001416 F3A4                <1>     rep movsb   ;Move the three extension chars over
   437                              <1> .scanExtSpace:
   438 00001418 807FFF20            <1>     cmp byte [rdi - 1], " " ;Is the previous char a space
   439 0000141C 7505                <1>     jne .exit
   440 0000141E 48FFCF              <1>     dec rdi
   441 00001421 EBF5                <1>     jmp short .scanExtSpace
   442                              <1> .exit:
   443 00001423 31C0                <1>     xor eax, eax
   444 00001425 AA                  <1>     stosb   ;Store a null at the end
   445                              <1>     return
    13                              <2> %%_ret:
    14 00001426 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   446                              <1> 
   447                              <1> setupFFBlock:
   448                              <1> ;Sets up the find first block for the search
   449                              <1> ;Uses workingDrv, fcbName, curDirCopy and rdi as the source of the FFBlock
   450 00001427 50                  <1>     push rax
   451 00001428 53                  <1>     push rbx
   452 00001429 56                  <1>     push rsi
   453 0000142A 57                  <1>     push rdi
   454 0000142B 4889FB              <1>     mov rbx, rdi ;Get current DTA address into rbx
   455 0000142E 8A05(FC060000)      <1>     mov al, byte [searchAttr]
   456 00001434 243F                <1>     and al, 3Fh ;Clear upper two bits
   457 00001436 88430C              <1>     mov byte [rbx + ffBlock.attrib], al 
   458 00001439 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]  ;Get the 0 based working drive number
   459 00001440 FEC0                <1>     inc al  ;Convert into 1 based number to agree with DOS
   460 00001442 8803                <1>     mov byte [rbx + ffBlock.driveNum], al
   461 00001444 488D35(D9060000)    <1>     lea rsi, fcbName
   462 0000144B 488D7B01            <1>     lea rdi, qword [rbx + ffBlock.template]
   463 0000144F 57                  <1>     push rdi
   464 00001450 48B820202020202020- <1>     mov rax, "        "
   464 00001459 20                  <1>
   465 0000145A 48AB                <1>     stosq
   466 0000145C 66AB                <1>     stosw
   467 0000145E AA                  <1>     stosb
   468 0000145F 5F                  <1>     pop rdi
   469 00001460 48A5                <1>     movsq   ;Move 8 chars
   470 00001462 66A5                <1>     movsw   ;Move 2 chars
   471 00001464 A4                  <1>     movsb   ;Move the final char
   472                              <1> 
   473 00001465 8B05(85070000)      <1>     mov eax, dword [dirEntry]
   474 0000146B 89430D              <1>     mov dword [rbx + ffBlock.dirOffset], eax
   475 0000146E 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
   476 00001474 894311              <1>     mov dword [rbx + ffBlock.parDirClus], eax
   477 00001477 8A05(65060000)      <1>     mov al, byte [curDirCopy + fatDirEntry.attribute]
   478 0000147D 884315              <1>     mov byte [rbx + ffBlock.attribFnd], al
   479 00001480 8B05(70060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.wrtTime] ;Get time/date together
   480 00001486 894316              <1>     mov dword [rbx + ffBlock.fileTime], eax
   481 00001489 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]
   482 0000148F 89431A              <1>     mov dword [rbx + ffBlock.fileSize], eax
   483 00001492 488D7B1E            <1>     lea rdi, qword [rbx + ffBlock.asciizName]   ;Goto the name field
   484 00001496 488D35(5A060000)    <1>     lea rsi, curDirCopy
   485 0000149D E845FFFFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
   486                              <1> 
   487 000014A2 5F                  <1>     pop rdi
   488 000014A3 5E                  <1>     pop rsi
   489 000014A4 5B                  <1>     pop rbx
   490 000014A5 58                  <1>     pop rax
   491                              <1>     return
    13                              <2> %%_ret:
    14 000014A6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   492                              <1> 
   493                              <1> getDrvLetterFromPath:   ;Int 2Fh, AX=121Ah
   494                              <1> ;Gets the drive letter for the path in al
   495                              <1> ;Input: rsi = Buffer to process
   496                              <1> ;Output: If al = 0, rsi NOT incremented by 2. Else, rsi incremented by 2 
   497                              <1> ;       ZF=ZE and al = 0 => Null path
   498                              <1> ;       ZF=NZ and al = 0 => Relative path, splice flag = 0 or Net path
   499                              <1> ;       ZF=NZ and al = -1 => Bad drive number
   500                              <1> ;       ZF=NZ and al = 1 based drive number => All oki, but may be relative
   501 000014A7 30C0                <1>     xor al, al
   502 000014A9 803E00              <1>     cmp byte [rsi], 00h ;Is this a null path?
   503                              <1>     retz    ;Return if a null path
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000014AC 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000014AE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   504 000014AF 807E013A            <1>     cmp byte [rsi + 1], ":" ;Path separator?
   505                              <1>     retne   ;If not equal, Relative path or network path
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000014B3 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000014B5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   506 000014B6 66AD                <1>     lodsw   ;Get first word, rsi += 2
   507                              <1>     ;Make char lower case if its not and then convert to offset from "a" - 1
   508 000014B8 0C20                <1>     or al, 20h  ;Set the bit for lowercase chars
   509 000014BA 2C60                <1>     sub al, 60h
   510                              <1>     retnz ;If the number is non-zero, then a potentially valid drive number
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000014BC 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000014BE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   511 000014BF B0FF                <1>     mov al, -1  ;Else not a valid drive number
   512                              <1>     return
    13                              <2> %%_ret:
    14 000014C1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   513                              <1> 
   514                              <1> getDirPath:
   515 000014C2 30C0                <1>     xor al, al   ;Set to Directory
   516 000014C4 EB02                <1>     jmp short getPath
   517                              <1> getFilePath:
   518 000014C6 B0FF                <1>     mov al, -1  ;Set to File
   519                              <1> getPath:
   520                              <1> ;Called with:
   521                              <1> ; rdi = SDA Buffer for filename
   522                              <1> ; rsi = Potentially unqualified filename
   523                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   524 000014C8 50                  <1>     push rax
   525 000014C9 57                  <1>     push rdi
   526 000014CA E877000000          <1>     call canonicaliseFileName   ;First canonicalise the pathspec presented
   527 000014CF 5F                  <1>     pop rdi
   528 000014D0 58                  <1>     pop rax
   529                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000014D1 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000014D3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   530                              <1>     ;Now our name is FQ, we can search the for it!
   531 000014D4 48813D(12070000)FF- <1>     cmp qword [workingCDS], -1  ;If there is no CDS associated with this path
   531 000014DC FFFFFF              <1>
   532 000014DF 0F849B010000        <1>     je getPathNoCanon.netFFnoCDS ;It must be a net no CDS search!
   533 000014E5 8805(69040000)      <1>     mov byte [fileDirFlag], al 
   534 000014EB B0FF                <1>     mov al, -1
   535 000014ED 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   536 000014F3 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   537 000014F9 C605(05070000)00    <1>     mov byte [parDirExist], 0   
   538 00001500 C605(04070000)00    <1>     mov byte [fileExist], 0     
   539 00001507 8A05(09070000)      <1>     mov al, byte [workingDrv]
   540 0000150D FEC0                <1>     inc al
   541 0000150F 488D7301            <1>     lea rsi, qword [rbx + 1]    ;Move the pointers past the machine name pathsep
   542 00001513 66813F5C5C          <1>     cmp word [rdi], "\\"        ;Did we resolve to remote path?
   543 00001518 7424                <1>     je .net
   544 0000151A 488B1D(1E060000)    <1>     mov rbx, qword [fname1Ptr]
   545 00001521 4881C302000000      <1>     add rbx, 2  ;Now our path is completely normalised so this always works!
   546 00001528 488D7301            <1>     lea rsi, qword [rbx + 1]
   547 0000152C FF35(12070000)      <1>     push qword [workingCDS] ;Save the original CDS to allow for subst to work
   548 00001532 E898010000          <1>     call pathWalk
   549 00001537 8F05(12070000)      <1>     pop qword [workingCDS]
   550                              <1>     return
    13                              <2> %%_ret:
    14 0000153D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> .net:
   552 0000153E 4889F7              <1>     mov rdi, rsi                ;Else, skip setting up vars for drive access
   553 00001541 E994010000          <1>     jmp pathWalk.netEp          ;Still do all drive access using CDS, but over redir
   554                              <1>     ;The reason why this works is that DOS doesn't need to keep track of the 
   555                              <1>     ; internal vars for accessing a net drive. All accesses still occur via the
   556                              <1>     ; redir, and the redir can update its vars as it needs. The DOS pointers
   557                              <1>     ; point as is necessary on the path (with machine name prefix), and in the SDA
   558                              <1>     ; so the redir can do it's job.
   559                              <1> 
   560                              <1> canonicaliseFileName:
   561                              <1> ;Always trying to build and qualify a full pathname
   562                              <1> ;Does getPath without hitting the disk
   563 00001546 B0FF                <1>     mov al, -1
   564 00001548 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   565 0000154E 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   566 00001554 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   567 0000155B FEC0                <1>     inc al  ;make al = 0
   568 0000155D 8805(2E060000)      <1>     mov byte [skipDisk], al  ;Store 0 to skip checking the file exists
   569 00001563 E839000000          <1>     call getPathNoCanon.epAlt
   570                              <1>     retc    ;Error return
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001568 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000156A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   571                              <1>     ;Check the last two chars to see if we have a null terminator.
   572                              <1>     ;If neither has a null terminator, add one
   573 0000156B 31C0                <1>     xor eax, eax
   574 0000156D 3807                <1>     cmp byte [rdi], al
   575                              <1>     retz                
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000156F 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001571 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   576 00001572 3847FF              <1>     cmp byte [rdi - 1], al 
   577                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001575 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001577 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   578 00001578 AA                  <1>     stosb
   579                              <1>     return
    13                              <2> %%_ret:
    14 00001579 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   580                              <1> 
   581                              <1> getDirPathNoCanon:
   582                              <1> ;FCB only
   583 0000157A 31C0                <1>     xor eax, eax
   584 0000157C 4889FE              <1>     mov rsi, rdi
   585 0000157F EB05                <1>     jmp short getPathNoCanon
   586                              <1> getFilePathNoCanon:
   587                              <1> ;Used when the path is constructed internally (as for FCB functions), and renameMain
   588                              <1> ;Input: rdi -> Buffer with qualified pathname for search
   589 00001581 B0FF                <1>     mov al, -1
   590 00001583 4889FE              <1>     mov rsi, rdi
   591                              <1> getPathNoCanon:
   592                              <1> ;Called with:
   593                              <1> ; rdi = SDA Buffer for filename
   594                              <1> ; rsi = Potentially unqualified filename
   595                              <1> ; al = 0 => Search for Dir only. al != 0 => Search for File (or dir)
   596 00001586 8805(69040000)      <1>     mov byte [fileDirFlag], al  
   597 0000158C B0FF                <1>     mov al, -1
   598 0000158E 8805(01070000)      <1>     mov byte [spliceFlag], al   ;Set splice for Full path by default
   599 00001594 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Save the SDA buffer we are using for this file
   600 0000159B 8805(2E060000)      <1>     mov byte [skipDisk], al     ;Store -1 to NOT skip checking the file on disk
   601                              <1> .epAlt:
   602 000015A1 C605(05070000)00    <1>     mov byte [parDirExist], 0  ;If parent dir exists, set to -1
   603 000015A8 C605(04070000)00    <1>     mov byte [fileExist], 0 ;If the file exists, set to -1
   604 000015AF F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Was it invoked via server? -1 = Server
   605 000015B6 7431                <1>     jz .notServer
   606 000015B8 E8EAFEFFFF          <1>     call getDrvLetterFromPath   ;rsi will point to the \ in "X:\"
   607 000015BD E8365D0000          <1>     call getCDS ;Get the cds for the drive letter on the path
   608 000015C2 FEC0                <1>     inc al  ;Turn back into a 1 based drive number
   609 000015C4 56                  <1>     push rsi
   610 000015C5 57                  <1>     push rdi
   611 000015C6 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   612 000015CD 50                  <1>     push rax
   613 000015CE E817610000          <1>     call dosCrit1Enter
   614 000015D3 E853590000          <1>     call getDiskDPB ;Force an initial update of the disk dpb. Get ptr in rbp
   615 000015D8 E817610000          <1>     call dosCrit1Exit
   616 000015DD 58                  <1>     pop rax
   617 000015DE 5F                  <1>     pop rdi
   618 000015DF 5E                  <1>     pop rsi
   619 000015E0 0F83B4000000        <1>     jnc .driveOk
   620                              <1> .serverExit:
   621 000015E6 B003                <1>     mov al, errPnf  ;If CF=CY, use this error code
   622                              <1>     return
    13                              <2> %%_ret:
    14 000015E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   623                              <1> .notServer:
   624                              <1>     ;Make Redir request to qualify the filename if NOT invoked by server call
   625                              <1>     ; and only in truename mode
   626 000015E9 F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;If set, we on disk hit mode
   627 000015F0 7515                <1>     jnz .skipRemoteQualify      ;So skip!
   628 000015F2 48C705(12070000)FF- <1>     mov qword [workingCDS], -1  ;Set workingCDS to unknown
   628 000015FA FFFFFF              <1>
   629 000015FD B823110000          <1>     mov eax, 1123h  ;Net Qualify Path name
   630 00001602 CD2F                <1>     int 2fh ;CF=CY if not resolved. CF=NC if resolved
   631                              <1>     retnc  ;Return if resolved
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001604 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001606 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   632                              <1> .skipRemoteQualify:
   633 00001607 E89BFEFFFF          <1>     call getDrvLetterFromPath ;Get the drive letter in al (or -1)
   634 0000160C 9C                  <1>     pushfq  ;Save the flag state on stack
   635 0000160D 50                  <1>     push rax    ;Save whether rsi is incremented by 2
   636 0000160E 668B06              <1>     mov ax, word [rsi]   ;Get the word pointed to by rsi
   637 00001611 E86F5D0000          <1>     call swapPathSeparator  ;Convert al if it is a path separator
   638 00001616 86E0                <1>     xchg ah, al ;Now swap al into ah to check if we on a network path (i.e. UNC)
   639 00001618 E8685D0000          <1>     call swapPathSeparator  ;Returns ZF=ZE if al = "/" or "\"
   640 0000161D 756B                <1>     jnz .notNet
   641 0000161F 38C4                <1>     cmp ah, al  ;If they are equal, we have a net path
   642 00001621 7567                <1>     jne .notNet
   643 00001623 58                  <1>     pop rax ;We are in a net situation, so rsi is pointing at "\\"
   644 00001624 9D                  <1>     popfq
   645 00001625 66AD                <1>     lodsw
   646 00001627 66B85C5C            <1>     mov ax, "\\"    ;Orient the path correctly
   647 0000162B 66AB                <1>     stosw   ;Tfr the two chars rsi, rdi + 2
   648                              <1> ;For Net paths, if skipDisk is clear, we only copy and qualify the path
   649                              <1> ;If skipDisk is set, proceed as before, except we then pass the path to net
   650                              <1> ; redirector Find First Without CDS
   651 0000162D 8A1D(2E060000)      <1>     mov bl, byte [skipDisk] ;Save skipDisk state
   652 00001633 C605(2E060000)00    <1>     mov byte [skipDisk], 0  ;Set to copy and qualify name first
   653 0000163A 53                  <1>     push rbx
   654                              <1> .moveNetName: ;This sets up the machine name portion of the UNC path
   655 0000163B AC                  <1>     lodsb   ;Get the third char into al and inc rsi
   656 0000163C E8505D0000          <1>     call uppercaseChar  ;Make char in al uppercase
   657 00001641 84C0                <1>     test al, al
   658 00001643 7435                <1>     jz .netEnd
   659 00001645 E83B5D0000          <1>     call swapPathSeparator  ;If path sep, swap it
   660 0000164A AA                  <1>     stosb
   661 0000164B 75EE                <1>     jnz .moveNetName  ;If not a path separating char in al, keep looking
   662                              <1>     ;Skip all following pathseps if there are any
   663                              <1> .moveNetSharePtr:
   664 0000164D AC                  <1>     lodsb
   665 0000164E E8325D0000          <1>     call swapPathSeparator
   666 00001653 74F8                <1>     jz .moveNetSharePtr
   667 00001655 C60700              <1>     mov byte [rdi], 0   ;Null terminate path to make ASCIIZ
   668 00001658 48FFCE              <1>     dec rsi ;More rsi back to the first char past the seps
   669 0000165B 84C0                <1>     test al, al ;Was this char null?
   670 0000165D 741B                <1>     jz .netEnd  ;Skip processing if so!
   671 0000165F 4889FB              <1>     mov rbx, rdi
   672 00001662 48FFCB              <1>     dec rbx ;rbx points at the pathsep before the space for the first char
   673 00001665 E870000000          <1>     call pathWalk.netEp     ;Now expand the pathspec portion
   674 0000166A 721C                <1>     jc .netExitBad
   675                              <1>     ;Now if we have a trailing backslash, throw it away
   676                              <1>     ;rdi points to the null char of the path
   677 0000166C 8A47FF              <1>     mov al, byte [rdi - 1]  ;Get the char before the nullsep
   678 0000166F E8115D0000          <1>     call swapPathSeparator  ;Is it a pathsep?
   679 00001674 7504                <1>     jnz .netEnd
   680 00001676 C647FF00            <1>     mov byte [rdi - 1], 0   ;Write a null if it is
   681                              <1> .netEnd:
   682 0000167A 5B                  <1>     pop rbx
   683 0000167B 84DB                <1>     test bl, bl ;If skip disk was zero, exit
   684                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000167D 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000167F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   685                              <1> .netFFnoCDS:
   686 00001680 B819110000          <1>     mov eax, 1119h  ;Find First Without CDS
   687 00001685 CD2F                <1>     int 2Fh
   688                              <1>     return
    13                              <2> %%_ret:
    14 00001687 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   689                              <1> .netExitBad:
   690 00001688 5B                  <1>     pop rbx
   691                              <1>     return
    13                              <2> %%_ret:
    14 00001689 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   692                              <1> .notNet:
   693                              <1> ;This is the normal case; paths can be relative, or absolute.
   694 0000168A 58                  <1>     pop rax ;Get the drive letter back
   695 0000168B 9D                  <1>     popfq   ;Get the flag state back
   696 0000168C 7504                <1>     jnz .notNull    ;If ZF=ZE, the path is a null path, errExit
   697                              <1> .pnfErr:
   698 0000168E B003                <1>     mov al, errPnf  ;Null path error
   699 00001690 F9                  <1>     stc
   700                              <1>     return
    13                              <2> %%_ret:
    14 00001691 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   701                              <1> .notNull:
   702 00001692 3CFF                <1>     cmp al, -1  ;Bad drive letter?
   703 00001694 7504                <1>     jne .driveOk    ;Jump if ok drive letter
   704 00001696 B00F                <1>     mov al, errBadDrv   ;Bad drive letter specified
   705 00001698 F9                  <1>     stc
   706                              <1>     return
    13                              <2> %%_ret:
    14 00001699 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   707                              <1> .driveOk:
   708 0000169A 84C0                <1>     test al, al
   709 0000169C 7417                <1>     jz .curPath ;If al = 0, the path is definitely relative to curr. drv.
   710                              <1>     ;al now has 1-based drive number, rsi has been incremented by 2.
   711 0000169E 803E00              <1>     cmp byte [rsi], 0   ;Is this pathspec "X",":",0?
   712 000016A1 74EB                <1>     je .pnfErr  ;Throw error if it is a malformed path
   713 000016A3 50                  <1>     push rax    ;Save the drive letter
   714 000016A4 AC                  <1>     lodsb   ;Move rsi to the third char, get char in al
   715 000016A5 48FFCE              <1>     dec rsi ;Move rsi back to point to the previous char
   716 000016A8 E8D85C0000          <1>     call swapPathSeparator  ;ZF=ZE if path separator
   717                              <1>     ;If al is a path separator, then this path is absolute.
   718 000016AD 58                  <1>     pop rax ;Get back the drive letter
   719 000016AE 7518                <1>     jnz .relMain ;If relative, rsi points to first char in path
   720                              <1> .absoPath:
   721                              <1>     ;Here the path is absolute. Now point rsi to first char past "\"
   722 000016B0 48FFC6              <1>     inc rsi
   723 000016B3 EB1A                <1>     jmp short .commonDir
   724                              <1> .curPath:
   725                              <1> ;This is only jumped to if we are relative the current drive
   726                              <1> ;rsi points to first char in path
   727                              <1> ;If this char is \ or /, then it is an absolute path.
   728 000016B5 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive (0-based number)
   729 000016BB FEC0                <1>     inc al  ;Turn it into a 1 based drive number
   730 000016BD 50                  <1>     push rax    ;Save the current drive number
   731 000016BE 8A06                <1>     mov al, byte [rsi]  ;Get the first char w/o moving rsi ...
   732 000016C0 E8C05C0000          <1>     call swapPathSeparator ;... to ensure rsi points at first char of string
   733 000016C5 58                  <1>     pop rax ;Get back the current drive number
   734 000016C6 74E8                <1>     jz .absoPath    ;If first char was pathsep, it is abs. path for curr. drv
   735                              <1> .relMain:
   736 000016C8 C605(01070000)00    <1>     mov byte [spliceFlag], 0    ;Set Splice flag to indicate Relative to CDS
   737                              <1> .commonDir:
   738                              <1> ;rsi points to the start of the string we will be appending
   739                              <1> ;Fall through now
   740                              <1> pathWalk:
   741                              <1> ;Input: rsi must point to source buffer for path to expand
   742                              <1> ;       rdi must point to a destination buffer
   743                              <1> ;       al must contain the drive 1 based number
   744 000016CF E8E9000000          <1>     call prepareDir    ;Prepare the start of the path
   745 000016D4 0F82D5000000        <1>     jc .badDriveExit 
   746                              <1> .netEp:
   747                              <1> ;For net path resolution (resolution ONLY) ptrs must point past "\\".
   748                              <1> ;For subst, resolution cannot go past backslash offset.
   749                              <1> ;For join, it is transparent.
   750 000016DA F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;Clear if not hitting disk!
   751 000016E1 7420                <1>     jz .notNet                  ;Skip this if not hitting disk!
   752                              <1> ;Start diskhit by checking the cds here if hitting the disk. 
   753                              <1> ;If it is a network cds we make findfirst req. 
   754 000016E3 57                  <1>     push rdi
   755 000016E4 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS
   756 000016EB 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   757 000016F1 5F                  <1>     pop rdi
   758 000016F2 740F                <1>     jz .notNet
   759 000016F4 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get current CDS as in DOS, undocumented
   760 000016FB B81B110000          <1>     mov eax, 111Bh  ;Find First with CDS!
   761 00001700 CD2F                <1>     int 2fh 
   762                              <1>     return
    13                              <2> %%_ret:
    14 00001702 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   763                              <1> .notNet:
   764 00001703 803E00              <1>     cmp byte [rsi], 0   ;If rsi at the end of the string, exit for ROOT dir
   765 00001706 7543                <1>     jnz .mainlp
   766                              <1>     ;Setup dummy dir data for Root directory
   767 00001708 31C0                <1>     xor eax, eax
   768 0000170A 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   769 00001711 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   770 00001718 C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory
   771                              <1>     ;Now we check if we are on a JOIN drive. If so, we swap back to the 
   772                              <1>     ; join host! Only when hitting the disk though.
   773 0000171F F605(2E060000)FF    <1>     test byte [skipDisk], -1
   774 00001726 0F8489000000        <1>     jz .exitGood
   775 0000172C 57                  <1>     push rdi
   776 0000172D 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]     ;Get the current CDS
   777 00001734 66F747430020        <1>     test word [rdi + cds.wFlags], cdsJoinDrive
   778 0000173A 5F                  <1>     pop rdi
   779 0000173B 7478                <1>     jz .exitGood    ;If not a join drive, exit (this never happens?)
   780 0000173D 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Use the join client CDS as source string!
   781 00001744 B0FF                <1>     mov al, -1  ;Set to search for a dir as only dir can be mntpoint
   782 00001746 E93BFEFFFF          <1>     jmp getPathNoCanon
   783                              <1> .mainlp:
   784                              <1>     ;rbx must remain constant in this portion,
   785                              <1>     ; and is used to signify the first writable byte in the path
   786 0000174B 53                  <1>     push rbx
   787 0000174C E83F010000          <1>     call copyPathspec  ;Now setup the filename in the FCB name field
   788 00001751 5B                  <1>     pop rbx
   789 00001752 7268                <1>     jc .exit    ;If this errors (bad chars in filename portion), exit bad 
   790 00001754 84C0                <1>     test al, al
   791 00001756 7507                <1>     jnz .notFile
   792 00001758 C605(05070000)FF    <1>     mov byte [parDirExist], -1  ;Set byte to -1 to indicate parent dir exists!
   793                              <1> .notFile:
   794 0000175F 53                  <1>     push rbx                ;The below messes up rbx
   795 00001760 E866040000          <1>     call checkDevPath       ;Silently intervene DEVs if in truename mode!
   796 00001765 5B                  <1>     pop rbx
   797 00001766 E80B020000          <1>     call searchForPathspec  ;Now search the directory
   798 0000176B 724F                <1>     jc .exit    ;If CF=CY, error exit. al has error code
   799 0000176D E880020000          <1>     call addPathspecToBuffer    ;Only entered if truename mode
   800 00001772 7248                <1>     jc .exit   ;If a bad path (somehow I dont see this happening often)
   801 00001774 84C0                <1>     test al, al ;Exit if this pathspec was a file
   802 00001776 743D                <1>     jz .exitGood
   803                              <1>     ;Here I have to take the cluster data from the found directory entry
   804                              <1>     ; and setup the search for the next pathspec portion
   805                              <1>     ;Copy necessary data from the current directory copy
   806 00001778 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are skipping disk activity, skip this too!
   807 0000177F 74CA                <1>     jz .mainlp
   808 00001781 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   809 00001788 C1E010              <1>     shl eax, 10h    ;Shift it high
   810 0000178B 668B05(74060000)    <1>     mov ax, word [curDirCopy + fatDirEntry.fstClusLo]
   811                              <1>     ;eax now has the cluster number of the search
   812 00001792 8905(7F070000)      <1>     mov dword [dirClustA], eax
   813 00001798 8905(7B070000)      <1>     mov dword [dirClustPar], eax
   814 0000179E 31C0                <1>     xor eax, eax    ;Start searching at the start of this dir
   815 000017A0 8905(85070000)      <1>     mov dword [dirEntry], eax
   816 000017A6 668905(83070000)    <1>     mov word [dirSect], ax
   817 000017AD EB9C                <1>     jmp short .mainlp  ;Else, it was a found directory name, keep looping
   818                              <1> .badDriveExit:
   819 000017AF B80F000000          <1>     mov eax, errBadDrv ;Bad drive letter found
   820                              <1>     return
    13                              <2> %%_ret:
    14 000017B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   821                              <1> .exitGood:
   822 000017B5 C605(04070000)FF    <1>     mov byte [fileExist], -1 ;If the file exists, set to -1
   823                              <1> .exit:
   824                              <1>     return
    13                              <2> %%_ret:
    14 000017BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   825                              <1> 
   826                              <1> prepareDir:
   827                              <1> ;Used to transfer the current directory if it is necessary.
   828                              <1> ;Always necessary if the user specified a subst drive. Else only if 
   829                              <1> ; a relative path is specified.
   830                              <1> ;Input: al = 1-based drive letter
   831                              <1> ;Output: rdi = Pointing at where to place chars from source string
   832                              <1> ;        rbx -> Pointing at the point before which chars cannot be placed
   833                              <1> ;   If CF=CY => Drive invalid or drive letter too great
   834 000017BD 56                  <1>     push rsi    ;Push ptr to source string
   835 000017BE E8275F0000          <1>     call dosCrit1Enter ;CDS/DPB cannot be touched whilst we read the pathstring
   836 000017C3 E8C05A0000          <1>     call getCDSNotJoin   ;Set internal variables, working CDS etc etc
   837 000017C8 7320                <1>     jnc .notJoin ;Very valid disk
   838 000017CA F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;Are we a join drive in truename?
   839 000017D1 7510                <1>     jnz .okJoin                 ;If not, proceed. If so, fail.    
   840 000017D3 F9                  <1>     stc
   841 000017D4 EB19                <1>     jmp short .critExit    ;If the drive number in al is too great or a join drive specified.
   842                              <1> .getDPB: 
   843 000017D6 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] 
   844 000017DD E849570000          <1>     call getDiskDPB  ;Update working DPB and drv before searching
   845                              <1>     return
    13                              <2> %%_ret:
    14 000017E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   846                              <1> .okJoin:
   847 000017E3 E8EEFFFFFF          <1>     call .getDPB
   848 000017E8 EB3A                <1>     jmp short .joinEp
   849                              <1> .notJoin:
   850 000017EA E8E7FFFFFF          <1>     call .getDPB
   851                              <1>     ;rbp = DPB ptr now
   852                              <1> .critExit:
   853 000017EF E8005F0000          <1>     call dosCrit1Exit
   854 000017F4 7253                <1>     jc .badDriveExit 
   855 000017F6 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr] ;Get the ptr to the filename buffer we will use
   856                              <1>     ;If this CDS is a subst drive, copy the current path to backslashOffset
   857                              <1>     ;If this CDS is a join drive... it can't be unless we truenamed our path!
   858                              <1>     ;If the path is to be spliced, then we copy the whole CDS current path
   859                              <1>     ;If the CDS is not subst drive, nor to be spliced, we copy first two chars.
   860                              <1>     ;Before we begin, we init rbx to point at the backslash offset of the path
   861 000017FD 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Now get the CDS ptr into rsi
   862 00001804 4889FB              <1>     mov rbx, rdi
   863 00001807 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   864 0000180B 4801C3              <1>     add rbx, rax    ;Move rbx to the backslash offset for this drive
   865                              <1>     ;Now check if we have a subst to handle
   866 0000180E 66F746430010        <1>     test word [rsi + cds.wFlags], cdsSubstDrive
   867 00001814 7535                <1>     jnz .prepDirSubst
   868 00001816 F605(01070000)FF    <1>     test byte [spliceFlag], -1
   869 0000181D 7409                <1>     jz .prepLoop ;If this flag is zero, we loop
   870                              <1>     ;Else we copy the first two chars only (X:)
   871 0000181F 66A5                <1>     movsw  
   872 00001821 B05C                <1>     mov al, "\"
   873 00001823 AA                  <1>     stosb   ;Store the path separator in internal buffer and increment rdi
   874                              <1> .joinEp:
   875 00001824 31C0                <1>     xor eax, eax    ;Get cluster 0
   876 00001826 EB1B                <1>     jmp short .prepDirExitSkip
   877                              <1> .prepLoop:
   878 00001828 AC                  <1>     lodsb
   879 00001829 84C0                <1>     test al, al ;If al was null, then we stop
   880 0000182B 7403                <1>     jz .prepDirExit
   881 0000182D AA                  <1>     stosb
   882 0000182E EBF8                <1>     jmp short .prepLoop
   883                              <1> .prepDirExit:
   884 00001830 807FFF5C            <1>     cmp byte [rdi - 1], "\" ;Was the previous char a pathsep?
   885 00001834 7403                <1>     je .prepDirExitSkipPathsep
   886 00001836 B05C                <1>     mov al, "\"
   887 00001838 AA                  <1>     stosb   ;Store the path separator and increment rdi
   888                              <1> .prepDirExitSkipPathsep:
   889 00001839 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the CDS ptr ONLY IF CDS Relative
   890 00001840 8B464D              <1>     mov eax, dword [rsi + cds.dStartCluster]    ;... and start at given cluster
   891                              <1> .prepDirExitSkip:
   892 00001843 E816000000          <1>     call prepSetupDirSearchVars
   893 00001848 F8                  <1>     clc ;Clear carry before exiting
   894                              <1> .badDriveExit:
   895 00001849 5E                  <1>     pop rsi
   896                              <1>     return
    13                              <2> %%_ret:
    14 0000184A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   897                              <1> .prepDirSubst:
   898 0000184B 51                  <1>     push rcx
   899 0000184C 0FB74E5D            <1>     movzx ecx, word [rsi + cds.wBackslashOffset]
   900                              <1> .prepDirCopy1:
   901 00001850 F3A4                <1>     rep movsb   ;Copy the string over
   902 00001852 59                  <1>     pop rcx
   903 00001853 F605(01070000)FF    <1>     test byte [spliceFlag], -1
   904 0000185A 75D4                <1>     jnz .prepDirExit    ;If not relative, exit as we put the "root dir" marker
   905 0000185C EBCA                <1>     jmp short .prepLoop ;Else, need to copy CDS now too as part of path
   906                              <1> prepSetupDirSearchVars:
   907                              <1> ;Input: eax = Starting Cluster of search on disk (0=Root dir)
   908                              <1> ;       rbp -> Working DPB
   909 0000185E 51                  <1>     push rcx
   910 0000185F 31C9                <1>     xor ecx, ecx
   911 00001861 66890D(83070000)    <1>     mov word [dirSect], cx  ;Always start searching at sector 0 of dir cluster
   912 00001868 890D(85070000)      <1>     mov dword [dirEntry], ecx ;Always start at entry 0 of the sector in cluster
   913 0000186E E8A7F1FFFF          <1>     call getFATtype ;Get type of fat
   914 00001873 81F902000000        <1>     cmp ecx, 2  ;2 = FAT32
   915 00001879 7507                <1>     jne .psdsvExit      ;FAT 12/16 jump and store 0 if at root
   916                              <1>     ;FAT 32 here
   917 0000187B 85C0                <1>     test eax, eax   ;Are we looking for root dir of FAT32 drive?
   918 0000187D 7503                <1>     jnz .psdsvExit  ;If not, store the cluster number unchanged
   919 0000187F 8B4517              <1>     mov eax, dword [rbp + dpb.dFirstUnitOfRootDir]  ;Else get cluster number
   920                              <1> .psdsvExit:
   921 00001882 8905(7F070000)      <1>     mov dword [dirClustA], eax  ;Store directory cluster (or 0 if \ on FAT12/16)
   922 00001888 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store parent cluster number
   923 0000188E 59                  <1>     pop rcx
   924                              <1>     return 
    13                              <2> %%_ret:
    14 0000188F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   925                              <1> 
   926                              <1> copyPathspec:
   927                              <1> ;1) Copies a path portion from the source buffer to the destination
   928                              <1> ;2) Advances rsi to the next null, \ or /
   929                              <1> ;3) Expands all * to ?'s
   930                              <1> ;4) Understands \. means "this directory" and can be ignored with rsi moving to
   931                              <1> ;    next path separator and rdi pointing to the previous pathsep
   932                              <1> ;5) Understands \.. means "parent directory" and rdi should be changed to rbx
   933                              <1> ;    with rsi moving to path separator
   934                              <1> ;6) Each name in destination is at most 12 chars long, to account for the dot
   935                              <1> ;
   936                              <1> ;INPUT:     rsi = First char of pathspec to qualify
   937                              <1> ;           rdi = Points to where to store it
   938                              <1> ;
   939                              <1> ;RETURN:    rsi = First char of next pathspec or past terminating null
   940                              <1> ;           rdi = First char of next space to store next pathspec
   941                              <1> ;           al = Last char stored (either \ or NULL)
   942                              <1> ;           CF=NC = OK path
   943                              <1> ;           CF=CY = PATH OR FILE NOT FOUND
   944                              <1> ;               IF A WILDCARD FOUND IN A SUBDIR NAME, RETURN PNF.
   945 00001890 57                  <1>     push rdi    ;Save the pointer into the user buffer
   946 00001891 C605(8D040000)FF    <1>     mov byte [fcbSpaceOk], -1    ;Set to be ok to have space in the name
   947 00001898 488D3D(D9060000)    <1>     lea rdi, fcbName
   948 0000189F 57                  <1>     push rdi
   949 000018A0 B903000000          <1>     mov ecx, 3
   950 000018A5 B820202020          <1>     mov eax, "    " ;Four spaces
   951 000018AA F3AB                <1>     rep stosd   ;Store 12 spaces
   952 000018AC 5F                  <1>     pop rdi ;Point rdi back to fcb name head
   953                              <1> 
   954 000018AD 488D1D(E4060000)    <1>     lea rbx, fcbName + 11   ;Use rbx as the end of fcb name marker address
   955 000018B4 AC                  <1>     lodsb   ;Get first char from user path in al
   956 000018B5 3C2E                <1>     cmp al, "."   ;Handle starting dot separately
   957 000018B7 746B                <1>     je .cpsDots
   958 000018B9 48FFCE              <1>     dec rsi ;Else move rsi to point back to starting char
   959                              <1> ;First char is not a dot, so now check if starts with E5h? 
   960                              <1> ;If so, store 05h in its place!
   961 000018BC 3CE5                <1>     cmp al, 0E5h
   962 000018BE 7506                <1>     jne .cpsMainLoop
   963 000018C0 48FFC6              <1>     inc rsi ;Push rsi to point to next char
   964 000018C3 B005                <1>     mov al, 05h
   965 000018C5 AA                  <1>     stosb   ;Store the char, rsi is pointing at next char
   966                              <1> .cpsMainLoop:
   967 000018C6 AC                  <1>     lodsb   ;Get the char in al and advance rsi
   968 000018C7 84C0                <1>     test al, al ;Is it the null char?
   969 000018C9 0F848A000000        <1>     jz .cpsStore  ;If so, terminate immediately
   970 000018CF E8B15A0000          <1>     call swapPathSeparator  ;And if it is a pathsep, skip any bunched pathseps
   971 000018D4 0F848D000000        <1>     jz .cpsSkipPathseps ; and then exit with the final converted pathsep in al
   972 000018DA 3C2E                <1>     cmp al, "." ;Filename extension separator
   973 000018DC 7420                <1>     je .cpsExtension
   974                              <1>     ;If we have space in the filename, we check to see if the next char is *
   975 000018DE 3C2A                <1>     cmp al, "*" ;Wildcard?
   976 000018E0 7430                <1>     je .cpsWildcard
   977 000018E2 3C3F                <1>     cmp al, "?" ;Good wildcard?
   978 000018E4 740C                <1>     je .store
   979 000018E6 E8A65A0000          <1>     call uppercaseChar  ;Uppercase the char if it needs to be...
   980 000018EB E8235C0000          <1>     call checkCharValid ; and check it is a valid char
   981 000018F0 7472                <1>     je .cpsExitError
   982                              <1> .store:
   983 000018F2 4839DF              <1>     cmp rdi, rbx
   984 000018F5 7442                <1>     je .cpsProcessName ;Skip any non-terminating chars
   985 000018F7 AA                  <1>     stosb   ;And store the converted char in al and inc rdi
   986 000018F8 EBCC                <1>     jmp short .cpsMainLoop
   987                              <1> .cpsInvalidChar:
   988 000018FA 30C0                <1>     xor al, al
   989 000018FC EB3B                <1>     jmp short .cpsProcessName
   990                              <1> .cpsExtension:
   991                              <1> ;rsi has been incremented past the extension field. Discard the . in al
   992 000018FE B903000000          <1>     mov ecx, 3 
   993 00001903 488D3D(E1060000)    <1>     lea rdi, qword [fcbName + filename.fExt]    ;Goto the extension field
   994 0000190A 57                  <1>     push rdi
   995 0000190B B020                <1>     mov al, " "
   996 0000190D F3AA                <1>     rep stosb
   997 0000190F 5F                  <1>     pop rdi
   998 00001910 EBB4                <1>     jmp short .cpsMainLoop
   999                              <1> .cpsWildcard:
  1000                              <1> ;Fill the entire FCB filespec with ?'s.
  1001                              <1> ;We lookahead to the first char past the final "*" to prevent multiple
  1002                              <1> ; *'s from crashing DOS :)
  1003 00001912 AC                  <1>     lodsb   ;Get char, inc rsi
  1004 00001913 3C2A                <1>     cmp al, "*"
  1005 00001915 74FB                <1>     je short .cpsWildcard
  1006 00001917 48FFCE              <1>     dec rsi ;Go back to the first non-star char
  1007 0000191A B03F                <1>     mov al, "?"
  1008                              <1> .cpsWildcardLp:
  1009 0000191C AA                  <1>     stosb
  1010 0000191D 4839DF              <1>     cmp rdi, rbx    ;We filled the FCB name field yet?
  1011 00001920 75FA                <1>     jne short .cpsWildcardLp
  1012 00001922 EBA2                <1>     jmp short .cpsMainLoop
  1013                              <1> 
  1014                              <1> .cpsDots:
  1015 00001924 AA                  <1>     stosb   ;Store the first dot
  1016 00001925 8A06                <1>     mov al, byte [rsi]
  1017 00001927 3C2E                <1>     cmp al, "."    ;Check now if we have a second dot
  1018 00001929 752E                <1>     jne .cpsStore
  1019 0000192B A4                  <1>     movsb   ;Now advance rsi and rdi by copying the second dot over directly
  1020 0000192C 8A06                <1>     mov al, byte [rsi]  ;Ensure that the .. is not followed by any chars
  1021 0000192E 84C0                <1>     test al, al
  1022 00001930 7407                <1>     jz .cpsProcessName
  1023 00001932 E84E5A0000          <1>     call swapPathSeparator  ;If the char following the .. is not null or pathsep, error
  1024 00001937 752B                <1>     jnz .cpsExitError
  1025                              <1> .cpsProcessName:
  1026                              <1> ;Store the final char in the 12 space in the FCB name field, if it valid
  1027 00001939 84C0                <1>     test al, al 
  1028 0000193B 741C                <1>     jz .cpsStore
  1029 0000193D E8435A0000          <1>     call swapPathSeparator
  1030 00001942 7415                <1>     jz .cpsStore
  1031                              <1> .cpsFindTerminator:
  1032 00001944 AC                  <1>     lodsb
  1033 00001945 84C0                <1>     test al, al 
  1034 00001947 7410                <1>     jz .cpsStore
  1035 00001949 E8375A0000          <1>     call swapPathSeparator
  1036 0000194E 7409                <1>     jz .cpsStore
  1037 00001950 E8BE5B0000          <1>     call checkCharValid ;If this is ZF=ZE => Terminator
  1038 00001955 75ED                <1>     jnz short .cpsFindTerminator   ;Ensure we skip any extra chars
  1039                              <1>     ;If we encounter a terminator, convert to 0
  1040 00001957 30C0                <1>     xor al, al
  1041                              <1> .cpsStore:
  1042 00001959 488D3D(E4060000)    <1>     lea rdi, fcbName+11
  1043 00001960 AA                  <1>     stosb   ;Store the terminator in this slot. 0 for End of Path, \ for subdir
  1044 00001961 5F                  <1>     pop rdi
  1045 00001962 F8                  <1>     clc
  1046                              <1>     return
    13                              <2> %%_ret:
    14 00001963 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1047                              <1> .cpsExitError:
  1048 00001964 5F                  <1>     pop rdi
  1049 00001965 F9                  <1>     stc
  1050                              <1>     return
    13                              <2> %%_ret:
    14 00001966 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1051                              <1> .cpsSkipPathseps:
  1052 00001967 AC                  <1>     lodsb
  1053 00001968 E8185A0000          <1>     call swapPathSeparator
  1054 0000196D 74F8                <1>     jz .cpsSkipPathseps
  1055 0000196F 48FFCE              <1>     dec rsi ;Go back to the first char in next section of the pathspec
  1056 00001972 B05C                <1>     mov al, "\" ;Make sure to store a pathsep char
  1057 00001974 EBE3                <1>     jmp short .cpsStore
  1058                              <1> 
  1059                              <1> searchForPathspec:
  1060                              <1>     ;Now search the current directory for this filename
  1061                              <1>     ;Find first using SDA ffBlock
  1062                              <1>     ;If al = 0, we have final file name or directory name
  1063                              <1>     ;If al = \, we have subdirectory. NO WILDCARDS ALLOWED IF PATHSEP
  1064                              <1>     ;Output: CF=CY => Error occured, al has error code (Fnf or Pnf)
  1065                              <1>     ;        CF=NC => Disk File in fcbName found with selected attributes
  1066                              <1>     ;                 FF block somewhat setup
  1067                              <1>     ;Preserves rax, rbx, rsi,  rdi
  1068 00001976 50                  <1>     push rax
  1069 00001977 53                  <1>     push rbx
  1070 00001978 56                  <1>     push rsi    ;Save the current position of the pointer in the user buffer
  1071 00001979 57                  <1>     push rdi    ;Save current position to store filename in internal buffer
  1072 0000197A 0FB61D(69040000)    <1>     movzx ebx, byte [fileDirFlag]   ;Save the old flag that was set on entry
  1073 00001981 53                  <1>     push rbx    ;and push it onto the stack
  1074                              <1> ;Evaluate whether we are searching for a file for a directory
  1075 00001982 84C0                <1>     test al, al
  1076 00001984 741D                <1>     jz .sfpPNfile
  1077                              <1>     ;Fall if subdir
  1078 00001986 488D3D(D9060000)    <1>     lea rdi, fcbName
  1079 0000198D B03F                <1>     mov al, "?" ;Search for wildcard
  1080 0000198F B90B000000          <1>     mov ecx, 11
  1081 00001994 F2AE                <1>     repne scasb
  1082 00001996 7452                <1>     je .sfpPnf  ;Path not found if a ? found in the name
  1083 00001998 B010                <1>     mov al, dirDirectory    ;We want a directory only search.
  1084 0000199A C605(69040000)00    <1>     mov byte [fileDirFlag], 0   ;Override setting to search exclusively for dir
  1085 000019A1 EB07                <1>     jmp short .sfpPNMain
  1086                              <1> .sfpPNfile:
  1087                              <1>     ;Here if we are searching for a file or directory as setup by search init
  1088 000019A3 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]    ;Get the search attributes
  1089                              <1> .sfpPNMain:
  1090 000019AA 803D(2E060000)00    <1>     cmp byte [skipDisk], 0  ;If we are just qualifying a path, skip the disk hit
  1091 000019B1 7418                <1>     je .sfpPNNoDisk
  1092 000019B3 E8DCF7FFFF          <1>     call searchDir
  1093 000019B8 7211                <1>     jc .sfpPNNoDisk
  1094 000019BA 803D(5A060000)05    <1>     cmp byte [curDirCopy], 05h 
  1095 000019C1 7507                <1>     jne .noAdjust
  1096                              <1>     ;Readjust when the start of a dir entry name is 05h
  1097 000019C3 C605(5A060000)E5    <1>     mov byte [curDirCopy], 0E5h
  1098                              <1> .noAdjust:
  1099 000019CA F8                  <1>     clc ;Ensure the carry flag is clear here!
  1100                              <1> .sfpPNNoDisk:
  1101 000019CB 5B                  <1>     pop rbx
  1102 000019CC 881D(69040000)      <1>     mov byte [fileDirFlag], bl  ;Return the original flag
  1103 000019D2 5F                  <1>     pop rdi ;rdi points to free space in internal filename buffer
  1104 000019D3 5E                  <1>     pop rsi
  1105 000019D4 5B                  <1>     pop rbx
  1106 000019D5 58                  <1>     pop rax ;Get back the original al value
  1107                              <1>     retnc   ;Return if file found. Else, report what was not found correctly!
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000019D6 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000019D8 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1108 000019D9 84C0                <1>     test al, al ;If we are on the last path comp, fail pnf!
  1109 000019DB F9                  <1>     stc         ;Dont forget to set CF again!!
  1110 000019DC B802000000          <1>     mov eax, errFnf
  1111                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000019E1 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000019E3 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1112 000019E4 B803000000          <1>     mov eax, errPnf ;Else it is path not found!
  1113                              <1>     return
    13                              <2> %%_ret:
    14 000019E9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1114                              <1> .sfpPnf:
  1115 000019EA B803000000          <1>     mov eax, errPnf
  1116                              <1> .sfpErrExit:
  1117 000019EF F9                  <1>     stc ;Set carry
  1118 000019F0 EBD9                <1>     jmp short .sfpPNNoDisk
  1119                              <1> 
  1120                              <1> addPathspecToBuffer:
  1121                              <1> ;Input: fcbName = Qualified pathname portion
  1122                              <1> ;Output: CF=NC -> al = Last char in name (either Null or \) 
  1123                              <1> ;        CF=CY -> Invalid path (i.e. tried to go too far backwards)
  1124                              <1> ;rdi is advanced to the NEXT space for the next level of the filename
  1125                              <1> ;rbx points to the "head of the path"
  1126                              <1> ;rsi points to the first char of the next portion if al is pathsep
  1127                              <1> ;Converts the special char if the filename starts with it!
  1128 000019F2 F605(2E060000)FF    <1>     test byte [skipDisk], -1
  1129                              <1>     retnz   ;Only add if in truename mode (also clears CF)
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000019F9 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000019FB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1130 000019FC 803D(D9060000)2E    <1>     cmp byte [fcbName], "."   ;Handle destination pointer for  
  1131 00001A03 746A                <1>     je .aptbDots
  1132                              <1>     ;Copy filename over to internal buffer
  1133                              <1> .aptbAddNull:
  1134 00001A05 56                  <1>     push rsi    ;Save source pointer position
  1135 00001A06 488D35(D9060000)    <1>     lea rsi, fcbName
  1136 00001A0D 803E05              <1>     cmp byte [rsi], 05h
  1137 00001A10 7503                <1>     jne .notSpecialChar
  1138 00001A12 C606E5              <1>     mov byte [rsi], 0E5h
  1139                              <1> .notSpecialChar:
  1140 00001A15 E8CDF9FFFF          <1>     call FCBToAsciiz    ;Convert the filename in FCB format to asciiz
  1141 00001A1A 48FFCF              <1>     dec rdi ;Go back to the in-situ null terminator char
  1142 00001A1D 5E                  <1>     pop rsi ;Get back src ptr which points to first char in next pathspec
  1143 00001A1E E8C6000000          <1>     call .aptbInterveneEnterJoin
  1144                              <1>     retc    ;Return bad if a disk error occured.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001A23 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001A25 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1145                              <1> .aptbHandleTerminator:
  1146 00001A26 8A05(E4060000)      <1>     mov al, byte [fcbName + 11] ;Get the actual terminator for this portion.
  1147 00001A2C 84C0                <1>     test al, al
  1148 00001A2E 741A                <1>     jz .aptbHandleNull
  1149 00001A30 E850590000          <1>     call swapPathSeparator
  1150 00001A35 0F85C7000000        <1>     jnz .aptbErrorExit
  1151                              <1> ;Handle path separator here directly
  1152 00001A3B 50                  <1>     push rax    ;Preserve the terminator char
  1153 00001A3C 8A47FF              <1>     mov al, byte [rdi - 1]
  1154 00001A3F E841590000          <1>     call swapPathSeparator  ;If the char before us is a pathsep, do nothing.
  1155 00001A44 58                  <1>     pop rax
  1156 00001A45 7426                <1>     jz .aptbExitOk 
  1157 00001A47 AA                  <1>     stosb   ;Now go past the pathsep we just placed
  1158 00001A48 EB23                <1>     jmp short .aptbExitOk
  1159                              <1> .aptbHandleNull:
  1160 00001A4A E85B000000          <1>     call .aptbAtHeadOfPath
  1161 00001A4F 7411                <1>     je .aptbHandleNullNoOverwritePrim
  1162 00001A51 50                  <1>     push rax
  1163 00001A52 8A47FF              <1>     mov al, byte [rdi - 1]  ;Is previous char a pathsep?
  1164 00001A55 E82B590000          <1>     call swapPathSeparator
  1165 00001A5A 58                  <1>     pop rax
  1166 00001A5B 750E                <1>     jnz .aptbHandleNullNoOverwrite
  1167 00001A5D 8847FF              <1>     mov byte [rdi - 1], al  ;Overwrite it!
  1168 00001A60 EB0B                <1>     jmp short .aptbExitOk
  1169                              <1> .aptbHandleNullNoOverwritePrim:
  1170 00001A62 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1171 00001A66 7403                <1>     je short .aptbHandleNullNoOverwrite
  1172                              <1>     ;This handles trailing slashes that are not right at the head of the path
  1173 00001A68 48FFCF              <1>     dec rdi
  1174                              <1> .aptbHandleNullNoOverwrite:
  1175 00001A6B 8807                <1>     mov byte [rdi], al  ;Write in a null
  1176                              <1> .aptbExitOk:
  1177 00001A6D F8                  <1>     clc
  1178                              <1>     return
    13                              <2> %%_ret:
    14 00001A6E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1179                              <1> .aptbDots:
  1180                              <1> ;For one dot, we pull the terminating null to rdi
  1181                              <1> ;For two dots, we search backwards for the previous "\"
  1182 00001A6F 803D(DA060000)2E    <1>     cmp byte [fcbName + 1], "." ;Was the second char also a dot?
  1183 00001A76 7409                <1>     je .aptbMoreDots
  1184 00001A78 C605(D9060000)20    <1>     mov byte [fcbName], " "
  1185 00001A7F EB84                <1>     jmp short .aptbAddNull
  1186                              <1> .aptbMoreDots:
  1187                              <1> ;Here we have two dots
  1188 00001A81 E824000000          <1>     call .aptbAtHeadOfPath  ;Are we at the start of the path?
  1189 00001A86 742B                <1>     je .aptbInterveneExitJoin ;If so, it must be join or fail
  1190                              <1> ;Else, we are able to decrement.
  1191 00001A88 4881EF02000000      <1>     sub rdi, 2  ;Go past the pathsep infront of us.
  1192                              <1> .aptbDotsLp:
  1193 00001A8F E816000000          <1>     call .aptbAtHeadOfPath  ;Are we safe to proceed?
  1194 00001A94 7490                <1>     je .aptbHandleTerminator
  1195 00001A96 48FFCF              <1>     dec rdi ;Decrement the pointer by one
  1196 00001A99 8A07                <1>     mov al, byte [rdi]  ;Get the char
  1197 00001A9B E8E5580000          <1>     call swapPathSeparator  ;Is this a valid pathsep?
  1198 00001AA0 75ED                <1>     jnz .aptbDotsLp ;If not, keep searching
  1199 00001AA2 48FFC7              <1>     inc rdi ;Now go just past the new pathsep
  1200 00001AA5 E97CFFFFFF          <1>     jmp .aptbHandleTerminator
  1201                              <1> .aptbAtHeadOfPath:
  1202                              <1> ;Returns ZF=ZE if at head of path.
  1203 00001AAA 57                  <1>     push rdi
  1204 00001AAB 48FFCF              <1>     dec rdi
  1205 00001AAE 4839FB              <1>     cmp rbx, rdi    ;Are we right at the start of the path?
  1206 00001AB1 5F                  <1>     pop rdi
  1207                              <1>     return
    13                              <2> %%_ret:
    14 00001AB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1208                              <1> .aptbInterveneExitJoin:
  1209                              <1> ;Here, if we are on a join CDS, go to the root of the original drive.
  1210 00001AB3 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1211 00001ABA 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsJoinDrive | cdsValidDrive
  1212 00001AC0 7540                <1>     jne .aptbErrorExit    ;If it is not, we error return (filenotfound)
  1213                              <1>     ;Now we change the drive letter and return
  1214 00001AC2 8A4500              <1>     mov al, byte [rbp]  ;Get the first char of the path 
  1215 00001AC5 8847FD              <1>     mov byte [rdi - 3], al  ;Replace the char in destination buffer
  1216 00001AC8 2C40                <1>     sub al, "@" ;Convert to a 1 based drive number
  1217 00001ACA E8B9570000          <1>     call getCDSNotJoin
  1218                              <1>     retc ;If this errors, something is really wrong. Propagate error.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001ACF 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001AD1 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1219 00001AD2 56                  <1>     push rsi
  1220 00001AD3 57                  <1>     push rdi
  1221 00001AD4 53                  <1>     push rbx
  1222 00001AD5 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1223 00001ADC E84A540000          <1>     call getDiskDPB 
  1224 00001AE1 5B                  <1>     pop rbx
  1225 00001AE2 5F                  <1>     pop rdi
  1226 00001AE3 5E                  <1>     pop rsi
  1227 00001AE4 E93DFFFFFF          <1>     jmp .aptbHandleTerminator
  1228                              <1> .aptbInterveneEnterJoin:
  1229                              <1> ;Handles join paths.
  1230 00001AE9 F605(9C000000)FF    <1>     test byte [numJoinDrv], -1  ;Test if we have any join drives
  1231                              <1>     retz    ;Return if not 
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001AF0 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001AF2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1232 00001AF3 56                  <1>     push rsi    ;rsi already points to the next pathspec
  1233 00001AF4 488B35(1E060000)    <1>     mov rsi, qword [fname1Ptr]
  1234 00001AFB E81B000000          <1>     call handleJoin ;Enters crit section, changes the CDS
  1235 00001B00 5E                  <1>     pop rsi
  1236                              <1>     return
    13                              <2> %%_ret:
    14 00001B01 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1237                              <1> .aptbErrorExit:
  1238 00001B02 B002                <1>     mov al, errFnf
  1239 00001B04 C605(0D040000)03    <1>     mov byte [errorAction], eActUsr
  1240 00001B0B C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
  1241 00001B12 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
  1242 00001B19 F9                  <1>     stc
  1243                              <1>     return
    13                              <2> %%_ret:
    14 00001B1A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1244                              <1> 
  1245                              <1> handleJoin:
  1246                              <1> ;Intervenes if the subdirectory we are entering is joined.
  1247                              <1> ;This path cannot be on a net redir drive, local redir is ok.
  1248                              <1> ;Input:
  1249                              <1> ; rsi = First char of potential JOIN'ed pathspec.
  1250                              <1> ; rbx = Ptr to the pathsep behind which we cannot traverse.
  1251                              <1> ; rax = 0
  1252                              <1> ;Output:
  1253                              <1> ;If no match, no effect.
  1254                              <1> ;If a matched path is found, working CDS, DPB and drv are set for the
  1255                              <1> ; join drive. rsi is advanced to the next path componant.
  1256                              <1> ;If CF=CY => Disk detection error
  1257 00001B1B 51                  <1>     push rcx
  1258 00001B1C 55                  <1>     push rbp
  1259 00001B1D 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]
  1260 00001B24 0FB74D43            <1>     movzx ecx, word [rbp + cds.wFlags]
  1261 00001B28 F7C100800000        <1>     test ecx, cdsRedirDrive     ;Cannot join over networks.
  1262 00001B2E 740C                <1>     jz .okToGo
  1263 00001B30 F7C180000000        <1>     test ecx, cdsRdirLocDrive   ;If not a local redir, exit (cannot be net).
  1264 00001B36 0F848C000000        <1>     jz .exitNoCrit
  1265                              <1> .okToGo:
  1266 00001B3C E8A95B0000          <1>     call dosCrit1Enter
  1267 00001B41 488B2D(65000000)    <1>     mov rbp, qword [cdsHeadPtr]
  1268 00001B48 31C9                <1>     xor ecx, ecx    ;Use as a CDS counter
  1269                              <1> .checkCDS:
  1270 00001B4A 66817D430060        <1>     cmp word [rbp + cds.wFlags], cdsValidDrive | cdsJoinDrive
  1271 00001B50 7560                <1>     jne .gotoNextCDS
  1272                              <1> .scanCDSName:
  1273                              <1> ;Get the length of the CDS path componant to check
  1274 00001B52 51                  <1>     push rcx
  1275 00001B53 57                  <1>     push rdi
  1276 00001B54 56                  <1>     push rsi        ;Have rsi point to the user path buffer
  1277 00001B55 4889EF              <1>     mov rdi, rbp    ;Have rdi point to the CDS path
  1278 00001B58 E884580000          <1>     call strlen     ;Get length of the path componant in ecx
  1279 00001B5D FFC9                <1>     dec ecx ;Dont wanna compare the terminator
  1280 00001B5F F3A6                <1>     repe cmpsb      ;Ensure strings are equal
  1281 00001B61 754C                <1>     jnz .notString
  1282                              <1>     ;Now ensure rsi is pointing at a pathsep/terminator char too.
  1283 00001B63 AC                  <1>     lodsb   ;Get this char and advance rsi to next path componant.
  1284 00001B64 E81C580000          <1>     call swapPathSeparator
  1285 00001B69 7407                <1>     jz .goodString
  1286 00001B6B 84C0                <1>     test al, al
  1287 00001B6D 7540                <1>     jnz .notString
  1288 00001B6F 48FFCE              <1>     dec rsi ;If this is a null char, point rsi back to it
  1289                              <1> .goodString:
  1290                              <1>     ;Here we know we have the right string.
  1291 00001B72 59                  <1>     pop rcx ;Trash original rsi
  1292 00001B73 5F                  <1>     pop rdi ;Get original rdi value (i.e. our internal built path).
  1293 00001B74 59                  <1>     pop rcx 
  1294                              <1>     ;Now store the path in the original CDS before intervening
  1295                              <1>     ; in the path
  1296 00001B75 48892D(12070000)    <1>     mov qword [workingCDS], rbp  ;Save the pointer here
  1297 00001B7C 56                  <1>     push rsi    ;Save ptr to the possible null char!
  1298 00001B7D 57                  <1>     push rdi
  1299 00001B7E 4889EF              <1>     mov rdi, rbp    ;Needs to be called with rdi = CDS ptr
  1300 00001B81 53                  <1>     push rbx    ;Preserve the head of the path
  1301 00001B82 E8A4530000          <1>     call getDiskDPB ;Rebuild DPB if needed. Sets working DPB and drive
  1302 00001B87 5B                  <1>     pop rbx
  1303 00001B88 5F                  <1>     pop rdi
  1304 00001B89 5E                  <1>     pop rsi
  1305 00001B8A 7237                <1>     jc .exit ;If return with CF=CY, this failed. Error exit
  1306 00001B8C 8A05(09070000)      <1>     mov al, byte [workingDrv]   ;Get 0 based number
  1307 00001B92 0441                <1>     add al, "A" ;Turn into the letter to store in CDS path
  1308 00001B94 807BFF3A            <1>     cmp byte [rbx - 1], ":"
  1309 00001B98 7403                <1>     je .notNet
  1310 00001B9A F9                  <1>     stc     ;Net drives should be explicitly mounted on a drive first!
  1311 00001B9B EB26                <1>     jmp short .exit
  1312                              <1> .notNet:
  1313                              <1> ; Join entry intervention occurs here.
  1314 00001B9D 8843FE              <1>     mov byte [rbx - 2], al
  1315 00001BA0 488D7B01            <1>     lea rdi, qword [rbx + 1]    ;Go to first byte past pathsep
  1316                              <1> .pullLp:
  1317 00001BA4 AC                  <1>     lodsb
  1318 00001BA5 AA                  <1>     stosb
  1319 00001BA6 84C0                <1>     test al, al
  1320 00001BA8 75FA                <1>     jnz .pullLp
  1321 00001BAA 48FFCF              <1>     dec rdi
  1322 00001BAD EB14                <1>     jmp short .exit
  1323                              <1> .notString:
  1324 00001BAF 5E                  <1>     pop rsi
  1325 00001BB0 5F                  <1>     pop rdi
  1326 00001BB1 59                  <1>     pop rcx
  1327                              <1> .gotoNextCDS:
  1328 00001BB2 4881C55F000000      <1>     add rbp, cds_size
  1329 00001BB9 FFC1                <1>     inc ecx 
  1330 00001BBB 3A0D(78000000)      <1>     cmp cl, byte [lastdrvNum]
  1331 00001BC1 7587                <1>     jnz .checkCDS
  1332                              <1> .exit:
  1333 00001BC3 E82C5B0000          <1>     call dosCrit1Exit
  1334                              <1> .exitNoCrit:
  1335 00001BC8 5D                  <1>     pop rbp
  1336 00001BC9 59                  <1>     pop rcx
  1337                              <1>     return
    13                              <2> %%_ret:
    14 00001BCA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1338                              <1> 
  1339                              <1> checkDevPath:
  1340                              <1> ;Only works in truename and in the root dir of a disk. If the search pattern
  1341                              <1> ; is a char device, replace the root pathsep with a UNIX pathsep.
  1342                              <1> ;Else if we are searching for the DEV folder in the root of a disk
  1343                              <1> ; and the next componant we are searching for is a char device, we 
  1344                              <1> ; only copy over the char device to the destination buffer with a UNIX
  1345                              <1> ; pathsep. Else, we do nothing. Clobbers rbx!
  1346                              <1> ;Input: rsi = Pointer to the next path spec
  1347                              <1> ;       rdi = Buffer where to add it
  1348                              <1> ;Output: If \DEV\devicename then copy /devicename to buffer.
  1349                              <1> ;        If devicename in the root dir, then replace pathsep
  1350 00001BCB F605(2E060000)FF    <1>     test byte [skipDisk], -1    ;If set, return!
  1351                              <1>     retnz             
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001BD2 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001BD4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1352                              <1> ;First check we are searching in the root dir!
  1353 00001BD5 66817FFE3A5C        <1>     cmp word [rdi - 2], ":\" 
  1354                              <1>     retne
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001BDB 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001BDD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1355                              <1> ;Now check to see if fcbname is DEV
  1356 00001BDE 50                  <1>     push rax
  1357 00001BDF 48B844455620202020- <1>     mov rax, "DEV     "
  1357 00001BE8 20                  <1>
  1358 00001BE9 483905(D9060000)    <1>     cmp qword [fcbName], rax    ;x64 cant handle cmp r\m64, imm64
  1359 00001BF0 58                  <1>     pop rax
  1360 00001BF1 7566                <1>     jne .checkDevice   ;Maybe this is a device if not DEV
  1361 00001BF3 813D(E1060000)2020- <1>     cmp dword [fcbName + 8], "   \"
  1361 00001BFB 205C                <1>
  1362 00001BFD 755A                <1>     jne .checkDevice    ;Was not \DEV\, check if it was \CON or something
  1363                              <1>     ;So here we are in the DEV dir. Check if \DEV or just DEV
  1364 00001BFF F605(01070000)FF    <1>     test byte [spliceFlag], -1
  1365                              <1>     retz    ;Exit if relative!
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00001C06 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00001C08 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1366                              <1>     ;Else, don't add DEV to the name, replace "\" with a "/", move rsi past it
  1367 00001C09 56                  <1>     push rsi    ;Save if not followed by dev!
  1368 00001C0A 57                  <1>     push rdi    ;If followed by dev, not a problem, we end the pathbuild!
  1369 00001C0B 488D3D(D9060000)    <1>     lea rdi, fcbName
  1370 00001C12 E888F7FFFF          <1>     call asciiToFCB    ;Advances rsi
  1371                              <1>     ;Returns in al the terminating char of the source string
  1372 00001C17 5F                  <1>     pop rdi
  1373 00001C18 5E                  <1>     pop rsi
  1374                              <1>     ;If al is a pathsep, fail 
  1375 00001C19 E867570000          <1>     call swapPathSeparator  ;Device names cannot be terminated with a "\" or "/"
  1376 00001C1E 7409                <1>     jz .repDev   ;Thus this is not a device, normal search!
  1377                              <1>     ;mov byte [fcbName + 11], 0 ;Store terminator in fcbName field
  1378 00001C20 53                  <1>     push rbx
  1379 00001C21 E845000000          <1>     call checkIfCharDevice
  1380 00001C26 5B                  <1>     pop rbx ;Don't need bh yet
  1381 00001C27 7322                <1>     jnc .pathSepExit    ;If this is a char dev, jump down
  1382                              <1> .repDev:
  1383                              <1> ;Componant after DEV was not a char dev, replace DEV back in the count!
  1384 00001C29 C705(D9060000)4445- <1>     mov dword [fcbName], "DEV "
  1384 00001C31 5620                <1>
  1385 00001C33 C705(DD060000)2020- <1>     mov dword [fcbName + 4], "    "
  1385 00001C3B 2020                <1>
  1386 00001C3D C705(E1060000)2020- <1>     mov dword [fcbName + 8], "   \" 
  1386 00001C45 205C                <1>
  1387 00001C47 B05C                <1>     mov al, "\" ;\DEV\ was a dir, report it was so!
  1388 00001C49 EB0C                <1>     jmp short .exit
  1389                              <1> .pathSepExit:
  1390                              <1> ;Here only if the device was determined to be a char device.
  1391 00001C4B 30C0                <1>     xor al, al
  1392 00001C4D 8805(E4060000)      <1>     mov byte [fcbName + 11], al ;Store null pathsep here!
  1393 00001C53 C647FF2F            <1>     mov byte [rdi - 1], "/" ;Store reverse pathsep here!
  1394                              <1> .exit:
  1395 00001C57 F8                  <1>     clc
  1396                              <1>     return
    13                              <2> %%_ret:
    14 00001C58 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1397                              <1> .checkDevice:
  1398 00001C59 E80D000000          <1>     call checkIfCharDevice  ;Check if what we already have is a chardev?
  1399 00001C5E 72F7                <1>     jc .exit                ;If not a device, silently return
  1400 00001C60 803D(E4060000)00    <1>     cmp byte [fcbName + 11], 0  ;If null, its a char dev in the root!
  1401 00001C67 74E2                <1>     je .pathSepExit
  1402 00001C69 EBEC                <1>     jmp short .exit         ;Else its gonna fail! Char dev as path comp... eek!
  1403                              <1> 
  1404                              <1> checkIfCharDevice:  ;Int 2Fh AX=1223h
  1405                              <1> ;Compares the first 8 chars of the FCB field to each device name in the
  1406                              <1> ; device driver chain. 
  1407                              <1> ;Output: CF=CY if not found
  1408                              <1> ;        CF=NC if found
  1409                              <1> ;           BH = Low byte of the device attribute word
  1410 00001C6B 50                  <1>     push rax
  1411 00001C6C 57                  <1>     push rdi
  1412 00001C6D 488B05(D9060000)    <1>     mov rax, qword [fcbName]    ;Get the 8 char name (space padded)
  1413 00001C74 488D3D(7A000000)    <1>     lea rdi, nulDevHdr    ;Get a ptr to the start driver header
  1414                              <1> .checkName:
  1415 00001C7B 668B5F08            <1>     mov bx, word [rdi + drvHdr.attrib]
  1416 00001C7F 86FB                <1>     xchg bh, bl ;Swap lo and hi bytes
  1417 00001C81 F6C380              <1>     test bl, 80h  ;Is the driver for disk drive?
  1418 00001C84 740C                <1>     jz .walkList ;Jump to skip ANY and ALL Disk Drives
  1419 00001C86 80CF20              <1>     or bh, 20h  ;RBIL says Bit 5 set and Bits 6-7 clear if Char dev
  1420 00001C89 80E73F              <1>     and bh, ~(80h|40h) ;Clear the upper two bits
  1421 00001C8C 483B471A            <1>     cmp rax, qword [rdi + drvHdr.drvNam]
  1422 00001C90 740D                <1>     je .exit    ;If equal, CF=NC is already cleared
  1423                              <1> .walkList:
  1424 00001C92 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto the next device
  1425 00001C95 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Is rdi at End of Chain?
  1426 00001C9C 75DD                <1>     jne .checkName  ;If no, rdi points to char device
  1427 00001C9E F9                  <1>     stc
  1428                              <1> .exit:
  1429 00001C9F 5F                  <1>     pop rdi
  1430 00001CA0 58                  <1>     pop rax
  1431                              <1>     return
    13                              <2> %%_ret:
    14 00001CA1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1432                              <1> 
  1433                              <1> buildCharDir:
  1434                              <1> ;Build a dummy directory entry for the char device in FCBName
  1435                              <1> ; Unless we are in disk skip mode (just evaluating the name)
  1436 00001CA2 50                  <1>     push rax
  1437 00001CA3 57                  <1>     push rdi
  1438 00001CA4 C605(E4060000)00    <1>     mov byte [fcbName+11], 0    ;Override and null terminate the fcbName field
  1439 00001CAB 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1440                              <1>     ;Zero the directory copy (32 bytes)
  1441 00001CB2 50                  <1>     push rax
  1442 00001CB3 51                  <1>     push rcx
  1443 00001CB4 57                  <1>     push rdi
  1444 00001CB5 31C0                <1>     xor eax, eax    ;Zero rax
  1445 00001CB7 B904000000          <1>     mov ecx, 4
  1446 00001CBC F348AB              <1>     rep stosq   ;Store 4 qwords of 0 to fill directory entry with zeros
  1447 00001CBF 5F                  <1>     pop rdi
  1448 00001CC0 59                  <1>     pop rcx
  1449 00001CC1 58                  <1>     pop rax
  1450 00001CC2 C705(85070000)FFFF- <1>     mov dword [dirEntry], -1    ;Indicate invalid offset into dir
  1450 00001CCA FFFF                <1>
  1451 00001CCC 488B05(D9060000)    <1>     mov rax, qword [fcbName]
  1452 00001CD3 488907              <1>     mov qword [rdi + fatDirEntry.name], rax  ;Store filename
  1453 00001CD6 B820202020          <1>     mov eax, "    "    ;Four spaces, overwrite the attribute field
  1454 00001CDB 894708              <1>     mov dword [rdi + fatDirEntry.name + filename.fExt], eax
  1455 00001CDE C6470B40            <1>     mov byte [rdi + fatDirEntry.attribute], dirCharDev ;Mimic DOS, set to 40h
  1456                              <1>     ;Get date and time and set the write time in the directory entry
  1457 00001CE2 E8CA120000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1458 00001CE7 E8B0130000          <1>     call getDirDTwords  ;Get date time words packed in eax
  1459 00001CEC 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax      ;Write as a packed dword
  1460 00001CEF 31C0                <1>     xor eax, eax
  1461 00001CF1 5F                  <1>     pop rdi
  1462 00001CF2 58                  <1>     pop rax
  1463                              <1>     return
    13                              <2> %%_ret:
    14 00001CF3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1464                              <1> 
  1465                              <1> checkFailingComp:
  1466                              <1> ;Returns if the failing part of the path was the LAST entry of the path,
  1467                              <1> ; i.e. the part we may be creating or checking for the existance of.
  1468                              <1> ;Returns: ZF=ZE => Last path componant
  1469                              <1> ;         ZF=NZ => Not last path componant
  1470 00001CF4 50                  <1>     push rax
  1471 00001CF5 8A05(E4060000)      <1>     mov al, byte [fcbName + 11]
  1472 00001CFB 84C0                <1>     test al, al
  1473 00001CFD 58                  <1>     pop rax
  1474                              <1>     return
    13                              <2> %%_ret:
    14 00001CFE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    37                                  %include "./src/Kernel/FAT/dirfun.asm"
     1                              <1> ;---------------------------------------------------:
     2                              <1> ;                   KERNEL FUNCTIONS                :
     3                              <1> ;---------------------------------------------------:
     4                              <1> makeDIR:           ;ah = 39h
     5                              <1> ;For make, the path must exist but the final componant must not exist.
     6                              <1> ;Input: rdx = Pointer to ASCIIZ string
     7 00001CFF 4889D7              <1>     mov rdi, rdx
     8 00001D02 E8DA560000          <1>     call strlen
     9 00001D07 81F940000000        <1>     cmp ecx, 64
    10 00001D0D 760E                <1>     jbe .okLength
    11                              <1> .badFile:
    12 00001D0F B002                <1>     mov al, errFnf
    13 00001D11 E91F5A0000          <1>     jmp extErrExit
    14                              <1> .badPath:
    15 00001D16 B003                <1>     mov al, errPnf
    16 00001D18 E9185A0000          <1>     jmp extErrExit
    17                              <1> .okLength:
    18 00001D1D 4889D6              <1>     mov rsi, rdx
    19 00001D20 E820570000          <1>     call checkPathspecOK
    20 00001D25 0F8226020000        <1>     jc .bad  ;Don't allow any malformed chars, exit Acc den
    21                              <1> .pathOk:
    22 00001D2B E8D0570000          <1>     call scanPathWC
    23 00001D30 72E4                <1>     jc .badPath ;Dont allow wildcards
    24                              <1>     ;Path is ok, now proceed
    25 00001D32 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive
    26 00001D39 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    27 00001D40 E881F7FFFF          <1>     call getFilePath ;Get a Directory path in buffer1, hitting the disk
    28                              <1>     ;If the path exists, exit error
    29 00001D45 0F83EA590000        <1>     jnc extErrExit
    30                              <1>     ;Handle resolved null paths here!!!
    31 00001D4B 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
    32 00001D51 30C0                <1>     xor al, al
    33 00001D53 3D003A5C00          <1>     cmp eax, 005C3A00h
    34 00001D58 74B5                <1>     je .badFile
    35                              <1>     ;-----------------------------
    36                              <1>     ;TEST THAT THE DRIVE IS VALID
    37                              <1>     ;This is clearly unnecessary
    38                              <1>     ;    Keep it for now...
    39                              <1>     ;-----------------------------
    40 00001D5A 57                  <1>     push rdi
    41 00001D5B 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    42 00001D62 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive ;Cannot make on invalid drive
    43 00001D68 5F                  <1>     pop rdi
    44 00001D69 0F84C6590000        <1>     jz extErrExit  ;Exit access denied
    45                              <1>     ;-------------------------------------------
    46                              <1>     ;Now check if the reason for the error was that the last pathcomp was 0
    47 00001D6F E880FFFFFF          <1>     call checkFailingComp
    48 00001D74 0F85BB590000        <1>     jnz extErrExit
    49                              <1>     ;So all is well, the new subdirectories name is in fcbName
    50                              <1>     ;The parent dir's directory entry is in the curDirCopy
    51 00001D7A E851540000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
    52                              <1>     ;returns in rdi the working cds ptr
    53 00001D7F 7312                <1>     jnc .notNet
    54 00001D81 B803110000          <1>     mov eax, 1103h
    55 00001D86 CD2F                <1>     int 2fh
    56 00001D88 0F82A7590000        <1>     jc extErrExit
    57 00001D8E E994590000          <1>     jmp extGoodExit
    58                              <1> .notNet:
    59 00001D93 E852590000          <1>     call dosCrit1Enter
    60                              <1>     ;Current dpb ptr is already set
    61                              <1>     ;Setup directory variables to now search for a free space in parent dir.
    62                              <1>     ;First we make a dummy dir in curDirCopy
    63 00001D98 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
    64 00001D9F 488D35(D9060000)    <1>     lea rsi, fcbName    ;Copy the dir name we searched for over
    65 00001DA6 488D3D(5A060000)    <1>     lea rdi, curDirCopy
    66 00001DAD 48A5                <1>     movsq   ;Copy the name over
    67 00001DAF A5                  <1>     movsd
    68 00001DB0 E8FC110000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
    69 00001DB5 E8E2120000          <1>     call getDirDTwords  ;Get current D/T words packed in eax
    70 00001DBA 8905(68060000)      <1>     mov dword [curDirCopy + fatDirEntry.crtTime], eax
    71 00001DC0 8905(70060000)      <1>     mov dword [curDirCopy + fatDirEntry.wrtTime], eax
    72 00001DC6 31C0                <1>     xor eax, eax
    73 00001DC8 8905(76060000)      <1>     mov dword [curDirCopy + fatDirEntry.fileSize], eax
    74 00001DCE C605(65060000)10    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory 
    75 00001DD5 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
    76                              <1> .searchForDirSpace:
    77 00001DDB 8905(7F070000)      <1>     mov dword [dirClustA], eax
    78 00001DE1 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
    79 00001DE3 668905(83070000)    <1>     mov word [dirSect], ax
    80 00001DEA 8905(85070000)      <1>     mov dword [dirEntry], eax
    81 00001DF0 E89D050000          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
    82 00001DF5 7328                <1>     jnc .dirEntryFnd
    83 00001DF7 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
    83 00001DFF 0000                <1>
    84 00001E01 0F844A010000        <1>     je .bad ;Set CF and exit
    85 00001E07 E875060000          <1>     call growDirectory  ;Increase directory size by 1 cluster, writes to buffer
    86 00001E0C 0F823F010000        <1>     jc .bad
    87 00001E12 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
    88 00001E17 0F8434010000        <1>     je .bad
    89                              <1>     ;Else eax = Newly allocated cluster
    90 00001E1D EBBC                <1>     jmp short .searchForDirSpace
    91                              <1> .dirEntryFnd:
    92                              <1> ;rdi points to current directory copy
    93                              <1> ;rsi now points to offset in the buffer to write the entry to
    94                              <1> ;Convert rsi into a byte offset into the buffer and save the sector number
    95 00001E1F 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
    96 00001E26 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA]
    97                              <1>      
    98 00001E2A 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save in temp sector variable
    99 00001E31 4881C320000000      <1>     add rbx, bufferHdr.dataarea ;Goto data area
   100 00001E38 4829DE              <1>     sub rsi, rbx    ;rsi now contains offset into buffer data area
   101 00001E3B 668935(4E070000)    <1>     mov word [entry], si    ;Word is enough to store byte offset into sector
   102                              <1> ;Must now request a cluster and sanitise it
   103 00001E42 E8BBECFFFF          <1>     call startNewChain  ;Get cluster number in eax
   104 00001E47 0F8209010000        <1>     jc .badExit
   105 00001E4D E86B060000          <1>     call sanitiseCluster    ;Sanitise this cluster, preserve eax, writes to buf
   106 00001E52 0F82FE000000        <1>     jc .badExit
   107                              <1>    ;Save the cluster in the dummy dir pointed to by rdi
   108 00001E58 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   109 00001E5F C1E810              <1>     shr eax, 10h    ;Get high word low
   110 00001E62 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   111 00001E69 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get the sector back
   112 00001E70 E88BEBFFFF          <1>     call getBufForDir
   113 00001E75 0F82DB000000        <1>     jc .badExit
   114 00001E7B 0FB705(4E070000)    <1>     movzx eax, word [entry] ;Get byte offset into sector back
   115 00001E82 488D35(5A060000)    <1>     lea rsi, curDirCopy    ;The dummy dir is the source now
   116 00001E89 488D7C0320          <1>     lea rdi, qword [rbx + bufferHdr.dataarea + rax] ;Point to dir entry directly
   117 00001E8E B904000000          <1>     mov ecx, 4
   118 00001E93 F348A5              <1>     rep movsq   ;Copy over the buffered directory
   119 00001E96 E800EAFFFF          <1>     call markBufferDirty ;We wrote to this buffer
   120                              <1>     ;Now need to read in data sector and make two entries . and ..
   121 00001E9B 57                  <1>     push rdi
   122 00001E9C 51                  <1>     push rcx
   123 00001E9D B90B000000          <1>     mov ecx, 11
   124 00001EA2 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   125 00001EA9 B020                <1>     mov al, " "
   126 00001EAB F3AA                <1>     rep stosb
   127 00001EAD 59                  <1>     pop rcx
   128 00001EAE 5F                  <1>     pop rdi
   129 00001EAF 48B82E000000000000- <1>     mov rax, "."
   129 00001EB8 00                  <1>
   130 00001EB9 8805(5A060000)      <1>     mov byte [curDirCopy], al
   131 00001EBF 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
   132 00001EC6 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
   133 00001ECD C605(65060000)30    <1>     mov byte [curDirCopy + fatDirEntry.attribute], dirDirectory | dirArchive 
   134 00001ED4 C1E210              <1>     shl edx, 10h
   135 00001ED7 09D0                <1>     or eax, edx ;Add upper bits to eax cluster number
   136 00001ED9 E8A7EBFFFF          <1>     call getStartSectorOfCluster    ;Get start sector in rax
   137 00001EDE E81DEBFFFF          <1>     call getBufForDir
   138 00001EE3 7271                <1>     jc .badExit
   139                              <1>     ;rbx has buffer pointer now
   140 00001EE5 488D35(5A060000)    <1>     lea rsi, curDirCopy
   141 00001EEC 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   142 00001EF0 B904000000          <1>     mov ecx, 4  ;4 qwords to copy
   143 00001EF5 F348A5              <1>     rep movsq
   144                              <1>     ;Now create .. entry
   145 00001EF8 C605(5B060000)2E    <1>     mov byte [curDirCopy + 1], "."  ;Store a second dot
   146 00001EFF 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get starting cluster of parent dir
   147 00001F05 E810EBFFFF          <1>     call getFATtype
   148 00001F0A 81F902000000        <1>     cmp ecx, 2
   149 00001F10 7207                <1>     jb .notFAT32
   150 00001F12 394517              <1>     cmp dword [rbp + dpb.dFirstUnitOfRootDir], eax  ;Is the parent root clust?
   151 00001F15 7502                <1>     jne .notFAT32
   152 00001F17 31C0                <1>     xor eax, eax    ;Store 0 if it is to keep algorithms happy
   153                              <1> .notFAT32:
   154 00001F19 668905(74060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusLo], ax
   155 00001F20 C1E810              <1>     shr eax, 10h
   156 00001F23 668905(6E060000)    <1>     mov word [curDirCopy + fatDirEntry.fstClusHi], ax
   157 00001F2A 488D35(5A060000)    <1>     lea rsi, curDirCopy
   158 00001F31 B904000000          <1>     mov ecx, 4
   159 00001F36 F348A5              <1>     rep movsq
   160 00001F39 E85DE9FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   161 00001F3E E8E3E7FFFF          <1>     call flushAllBuffersForDPB    ;Write the buffers to disk
   162 00001F43 7211                <1>     jc .badExit
   163                              <1> .okExit:
   164                              <1>     ;AND WE ARE DONE!
   165 00001F45 E8AA570000          <1>     call dosCrit1Exit
   166 00001F4A 31C0                <1>     xor eax, eax
   167 00001F4C E9D6570000          <1>     jmp extGoodExit
   168                              <1> .bad:
   169 00001F51 B805000000          <1>     mov eax, errAccDen
   170                              <1> .badExit:
   171 00001F56 E899570000          <1>     call dosCrit1Exit
   172 00001F5B E9D5570000          <1>     jmp extErrExit
   173                              <1> 
   174                              <1> removeDIR:         ;ah = 3Ah
   175 00001F60 4889D7              <1>     mov rdi, rdx
   176 00001F63 E879540000          <1>     call strlen
   177 00001F68 81F940000000        <1>     cmp ecx, 64
   178 00001F6E 7613                <1>     jbe .okLength
   179                              <1> .badPath:
   180 00001F70 B005                <1>     mov al, errAccDen
   181 00001F72 E9BE570000          <1>     jmp extErrExit
   182                              <1> .pnf:
   183 00001F77 E878570000          <1>     call dosCrit1Exit   ;Only jumped to in a critical section
   184 00001F7C B003                <1>     mov al, errPnf
   185 00001F7E E9B2570000          <1>     jmp extErrExit
   186                              <1> .okLength:
   187 00001F83 4889D6              <1>     mov rsi, rdx
   188 00001F86 E8BA540000          <1>     call checkPathspecOK
   189 00001F8B 72E3                <1>     jc .badPath  ;Don't allow any malformed chars
   190                              <1> .pathOk:
   191 00001F8D E86E550000          <1>     call scanPathWC
   192 00001F92 72DC                <1>     jc .badPath ;Dont allow wildcards
   193                              <1>     ;Path is ok, now proceed
   194 00001F94 E851570000          <1>     call dosCrit1Enter  ;Don't let another DOS task interrupt us!
   195 00001F99 C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   196 00001FA0 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   197 00001FA7 E816F5FFFF          <1>     call getDirPath     ;Get a Directory path in buffer1, hitting the disk
   198 00001FAC 72C9                <1>     jc .pnf             ;Path Doesn't exist
   199 00001FAE E81D520000          <1>     call testCDSNet ;Check if the working CDS is a NET CDS
   200 00001FB3 7312                <1>     jnc .notNet
   201 00001FB5 B801110000          <1>     mov eax, 1101h  ;RMDIR for net
   202 00001FBA CD2F                <1>     int 2fh
   203 00001FBC 0F8273570000        <1>     jc extErrExit
   204 00001FC2 E960570000          <1>     jmp extGoodExit
   205                              <1> .notNet:
   206 00001FC7 488D3D(1E050000)    <1>     lea rdi, buffer1
   207 00001FCE E80E540000          <1>     call strlen ;Get the length of the full qualified name in ecx
   208 00001FD3 66890D(4E070000)    <1>     mov word [pathLen], cx
   209 00001FDA 6681F90400          <1>     cmp cx, 4   ;Only way to get this after truename is if root dir (i.e. join)
   210 00001FDF 7614                <1>     jbe .cantDelCD
   211                              <1>     ;Now we scan all the CDS's to ensure this path is not the current dir anywhere
   212 00001FE1 31C0                <1>     xor eax, eax
   213                              <1> .scanLoop:
   214 00001FE3 E86B530000          <1>     call getCDSforDrive ;Gets a CDS string ptr in rsi
   215 00001FE8 721A                <1>     jc .notCurrent
   216 00001FEA E82A540000          <1>     call compareFileNames
   217 00001FEF 7404                <1>     jz .cantDelCD
   218 00001FF1 FFC0                <1>     inc eax
   219 00001FF3 EBEE                <1>     jmp short .scanLoop
   220                              <1> .cantDelCD:
   221 00001FF5 B810000000          <1>     mov eax, errDelCD   ;Cant delete whilst in current directory
   222 00001FFA E8F5560000          <1>     call dosCrit1Exit
   223 00001FFF E931570000          <1>     jmp extErrExit
   224                              <1> .notCurrent:
   225 00002004 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   226                              <1>     ;Now let use check that our directory is not the CDS currentdir
   227 0000200B 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   228 00002012 4889F7              <1>     mov rdi, rsi    ;rsi points to CDS
   229                              <1>     ;If the given path length is one more than the backslash offset
   230                              <1>     ; due to the terminating null, then the user is trying to delete the 
   231                              <1>     ; root dir. Fail this.
   232 00002015 0FB74F5D            <1>     movzx ecx, word [rdi + cds.wBackslashOffset]
   233 00002019 FFC1                <1>     inc ecx
   234 0000201B 663B0D(4E070000)    <1>     cmp cx, word [pathLen]
   235 00002022 0F8423010000        <1>     je .accessDenied
   236 00002028 E879030000          <1>     call getDiskDirectoryEntry  ;Setup tempSect and entries (byte offset)
   237                              <1>     ;for the entry in the sector we are hoping to delete
   238 0000202D 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   239 00002034 C1E010              <1>     shl eax, 10h
   240 00002037 0FB71D(74060000)    <1>     movzx ebx, word [curDirCopy + fatDirEntry.fstClusLo]
   241 0000203E 09D8                <1>     or eax, ebx
   242 00002040 8905(7B070000)      <1>     mov dword [dirClustPar], eax    ;Store the first cluster of subdir here
   243 00002046 E83AEAFFFF          <1>     call getStartSectorOfCluster  ;Check first sector of cluster is . and ..
   244 0000204B E8B0E9FFFF          <1>     call getBufForDir
   245 00002050 0F82FA000000        <1>     jc .exitBad
   246                              <1>     ;rbx points to buffer
   247 00002056 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   248 0000205A 48B82E202020202020- <1>     mov rax, ".       "
   248 00002063 20                  <1>
   249 00002064 483906              <1>     cmp qword [rsi], rax
   250 00002067 0F85DE000000        <1>     jne .accessDenied
   251 0000206D B42E                <1>     mov ah, "." ;Screw the partial stall
   252 0000206F 48394620            <1>     cmp qword [rsi + fatDirEntry_size], rax  ;Cmp next entry to ..
   253 00002073 0F85D2000000        <1>     jne .accessDenied
   254 00002079 4881C620000000      <1>     add rsi, fatDirEntry_size
   255 00002080 488D3D(5A060000)    <1>     lea rdi, curDirCopy
   256 00002087 B904000000          <1>     mov ecx, 4
   257 0000208C F348A5              <1>     rep movsq   ;Copy the .. entry into the curDirCopy to find parent later
   258                              <1> ;Now we gotta walk every sector of this directory to see if it is empty.
   259                              <1> ; If not, we cannot proceed. Do an inclusive search for *.*
   260 0000208F 488D3D(D9060000)    <1>     lea rdi, fcbName
   261 00002096 B03F                <1>     mov al, "?"
   262 00002098 B90B000000          <1>     mov ecx, 11
   263 0000209D F3AA                <1>     rep stosb   ;Store the pattern to search for
   264 0000209F 30C0                <1>     xor al, al  ;Store a terminating zero
   265 000020A1 AA                  <1>     stosb
   266 000020A2 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get searched directory starting cluster
   267 000020A8 50                  <1>     push rax    ;Save on stack temporarily
   268 000020A9 8905(7F070000)      <1>     mov dword [dirClustA], eax
   269 000020AF 31C0                <1>     xor eax, eax    ;Reset the search to the start of the directory
   270 000020B1 668905(83070000)    <1>     mov word [dirSect], ax
   271 000020B8 C705(85070000)0200- <1>     mov dword [dirEntry], 2 ;Start at the second directory entry (past . and ..)
   271 000020C0 0000                <1>
   272 000020C2 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Search for anything
   273 000020C9 58                  <1>     pop rax
   274 000020CA E8B6E9FFFF          <1>     call getStartSectorOfCluster
   275 000020CF E82CE9FFFF          <1>     call getBufForDir   
   276 000020D4 727A                <1>     jc .exitBad
   277 000020D6 E8E5F1FFFF          <1>     call prepSectorSearch    ;rbx has the buffer pointer for this dir sector
   278 000020DB 4881C640000000      <1>     add rsi, fatDirEntry_size*2 ;Start searching from the second entry in dir
   279 000020E2 81E902000000        <1>     sub ecx, 2  ;Two fewer entries to search for in this sector
   280 000020E8 C605(69040000)FF    <1>     mov byte [fileDirFlag], -1  ;Make sure we are searching for everythin
   281 000020EF E8F3F0FFFF          <1>     call searchDir.rmdirEP
   282 000020F4 7355                <1>     jnc .accessDenied   ;If a file is found, access denied, we can't delete this
   283                              <1>     ;Else, this is a empty dir, we can remove it
   284                              <1>     ;tempSect has the sector of the entry and entries points to the offset
   285 000020F6 488B05(46070000)    <1>     mov rax, qword [tempSect]
   286 000020FD E8FEE8FFFF          <1>     call getBufForDir
   287 00002102 724C                <1>     jc .exitBad
   288 00002104 E8B7F1FFFF          <1>     call prepSectorSearch
   289 00002109 0FB705(4E070000)    <1>     movzx eax, word [entry]
   290 00002110 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]
   291 00002114 4801C6              <1>     add rsi, rax    
   292 00002117 8A05(08070000)      <1>     mov al, byte [delChar]  ;Move the delchar in place
   293 0000211D 8806                <1>     mov byte [rsi], al  ;Store delchar there
   294 0000211F 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]
   295 00002123 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
   296 00002127 E86FE7FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   297 0000212C C1E210              <1>     shl edx, 10h
   298 0000212F 09D0                <1>     or eax, edx
   299                              <1>     ;Now remove the FAT chain
   300 00002131 E8A7EBFFFF          <1>     call unlinkFAT
   301 00002136 7218                <1>     jc .exitBad
   302 00002138 E8E9E5FFFF          <1>     call flushAllBuffersForDPB
   303 0000213D 7211                <1>     jc .exitBad
   304 0000213F E8B0550000          <1>     call dosCrit1Exit
   305 00002144 31C0                <1>     xor eax, eax
   306 00002146 E9DC550000          <1>     jmp extGoodExit
   307                              <1> .accessDenied:
   308 0000214B B805000000          <1>     mov eax, errAccDen
   309                              <1> .exitBad:
   310 00002150 F9                  <1>     stc
   311 00002151 E89E550000          <1>     call dosCrit1Exit
   312 00002156 E9DA550000          <1>     jmp extErrExit
   313                              <1> 
   314                              <1> setCurrentDIR:     ;ah = 3Bh, CHDIR
   315                              <1> ;Input: rdx = Pointer to ASCIIZ string
   316 0000215B 4889D7              <1>     mov rdi, rdx
   317 0000215E E87E520000          <1>     call strlen
   318 00002163 81F940000000        <1>     cmp ecx, 64
   319 00002169 7618                <1>     jbe .okLength
   320                              <1> .badPath:
   321 0000216B B003                <1>     mov al, errPnf
   322 0000216D E9C3550000          <1>     jmp extErrExit
   323                              <1> .badPathCrit:
   324 00002172 E87D550000          <1>     call dosCrit1Exit
   325 00002177 EBF2                <1>     jmp short .badPath
   326                              <1> .badCrit:
   327 00002179 E876550000          <1>     call dosCrit1Exit
   328 0000217E E9B2550000          <1>     jmp extErrExit
   329                              <1> .okLength:
   330 00002183 4889D6              <1>     mov rsi, rdx
   331 00002186 E8BA520000          <1>     call checkPathspecOK
   332 0000218B 7302                <1>     jnc .notBad     ;Don't allow any malformed chars or wildcards
   333 0000218D 74DC                <1>     jz .badPath     ;If wildcards found, exit error!
   334                              <1>     ;Malformed chars get caught later! Allow for "X:\",0" style paths
   335                              <1> .notBad:
   336 0000218F E88B530000          <1>     call checkPathNet   ;Never allow network paths
   337 00002194 74D5                <1>     jz .badPath ;Or Net paths
   338                              <1>     ;Path is ok, now proceed
   339 00002196 E84F550000          <1>     call dosCrit1Enter  ;ENTER DOS CRITICAL SECTION HERE!!
   340 0000219B C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   341 000021A2 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   342 000021A9 E814F3FFFF          <1>     call getDirPath ;Get a Directory path in buffer1, hitting the disk
   343 000021AE 72C9                <1>     jc .badCrit   ;Exit with error code in eax
   344                              <1>     ;Now we check to make sure the path provided is not past the maximum
   345                              <1>     ; length of a CDS path. This accounts for the possibility that a SUBST
   346                              <1>     ; moved the path past the end.
   347 000021B0 488D3D(1E050000)    <1>     lea rdi, buffer1
   348 000021B7 E825520000          <1>     call strlen ;Get the length of this path
   349 000021BC 81F943000000        <1>     cmp ecx, 67
   350 000021C2 77AE                <1>     ja .badPathCrit
   351                              <1>     ;The path must've been ok, so now copy the path into the CDS
   352                              <1>     ;The copy of the directory entry has the start cluster of this dir file
   353                              <1>     ;Copy the workingCDS to the tmpCDS
   354 000021C4 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   355 000021CB 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
   356 000021D1 0F85E6000000        <1>     jnz .net    ;This is done by the redirector for redirector drives
   357 000021D7 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Are we a join drive?
   358 000021DD 0F848D000000        <1>     jz .notJoin     ;Skip the join intervention if not.
   359                              <1>     ;!!!! JOIN INTERVENTION BELOW !!!!
   360 000021E3 4889FD              <1>     mov rbp, rdi    ;Save the ptr to the pathname here
   361 000021E6 E8E4000000          <1>     call .getFatCluster
   362 000021EB 89464D              <1>     mov dword [rsi + cds.dStartCluster], eax    ;Set cluster
   363                              <1>     ;ecx has the length of the path in the buffer
   364 000021EE 89C8                <1>     mov eax, ecx    ;Save the number of chars in the buffer
   365 000021F0 2D02000000          <1>     sub eax, 2      ;Remove the X: prefix
   366 000021F5 4889F7              <1>     mov rdi, rsi    ;Get the ptr to the cds to get it's length
   367 000021F8 E8E4510000          <1>     call strlen
   368 000021FD 01C8                <1>     add eax, ecx    ;Add the lengths of the two strings together
   369 000021FF 3D43000000          <1>     cmp eax, 67     ;If the sum is greater than the space for the string + null, error
   370 00002204 0F8768FFFFFF        <1>     ja .badPathCrit
   371 0000220A 51                  <1>     push rcx
   372 0000220B 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Copy the join-disabled CDS over to tmpCDS
   373 00002212 B95F000000          <1>     mov ecx, cds_size
   374 00002217 F3A4                <1>     rep movsb   
   375 00002219 59                  <1>     pop rcx
   376 0000221A FFC9                <1>     dec ecx ;Remove the trailing null from the count
   377 0000221C 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   378 00002223 57                  <1>     push rdi
   379 00002224 4801CF              <1>     add rdi, rcx    ;Move the destination ptr to the trailing null
   380 00002227 488D7502            <1>     lea rsi, qword [rbp + 2]    ;Skip the first two chars from path to copy
   381 0000222B F3A4                <1>     rep movsb   ;Copy the new part of the path back in
   382 0000222D 5F                  <1>     pop rdi
   383 0000222E 4889FE              <1>     mov rsi, rdi
   384 00002231 31C0                <1>     xor eax, eax
   385 00002233 31C9                <1>     xor ecx, ecx
   386 00002235 FFC9                <1>     dec ecx
   387 00002237 F2AE                <1>     repne scasb   ;Search for the terminating null
   388 00002239 4881EF02000000      <1>     sub rdi, 2
   389 00002240 8A07                <1>     mov al, byte [rdi]  ;Get the second to last char
   390 00002242 E83E510000          <1>     call swapPathSeparator
   391 00002247 7503                <1>     jnz .notSlash
   392 00002249 C60700              <1>     mov byte [rdi], 0   ;If it is a pathsep, put a null here
   393                              <1> .notSlash:
   394 0000224C 0FB606              <1>     movzx eax, byte [rsi]    ;Get the drive letter here
   395 0000224F 2C41                <1>     sub al, "A"     ;Turn into a 1 based drive number
   396 00002251 E8FD500000          <1>     call getCDSforDrive ;Set working CDS and move ptr in rsi 
   397 00002256 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Put tmpCDS in rdi
   398 0000225D 4887F7              <1>     xchg rsi, rdi   ;And swap the pointers
   399 00002260 C7474DFFFFFFFF      <1>     mov dword [rdi + cds.dStartCluster], -1 ;Finally, set the start cluster to welp.
   400                              <1>     ;mov word [rdi + cds.wBackslashOffset], 2    ;Make sure this is 2 if it changed...
   401                              <1>     ;Backslash offset must always be 2 on a join host
   402 00002267 B943000000          <1>     mov ecx, 67
   403 0000226C F3A4                <1>     rep movsb   ;Copy in the CDS path only, to keep all other fields ok.
   404 0000226E EB41                <1>     jmp short .exitGood
   405                              <1> .notJoin:
   406                              <1> ;rsi -> workingCDS
   407                              <1> ;Lets first copy the working CDS into tmpCDS
   408 00002270 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   409 00002277 B95F000000          <1>     mov ecx, cds_size
   410 0000227C F3A4                <1>     rep movsb         ;Copy the workingCDS into tmpCDS
   411 0000227E E84C000000          <1>     call .getFatCluster ;Now get the start cluster from the directory copy
   412 00002283 8905(C7060000)      <1>     mov dword [tmpCDS + cds.dStartCluster], eax ;Store this value in cds
   413 00002289 488D3D(7A060000)    <1>     lea rdi, tmpCDS
   414 00002290 488D35(1E050000)    <1>     lea rsi, buffer1    ;Now copy the FQ pathname into the CDS
   415 00002297 E854510000          <1>     call strcpy
   416 0000229C 488D35(7A060000)    <1>     lea rsi, tmpCDS     ;And copy back the tmpCDS into the CDS itself
   417 000022A3 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   418 000022AA B95F000000          <1>     mov ecx, cds_size
   419 000022AF F3A4                <1>     rep movsb
   420                              <1> .exitGood:
   421 000022B1 E83E540000          <1>     call dosCrit1Exit
   422 000022B6 31C0                <1>     xor eax, eax
   423 000022B8 E96A540000          <1>     jmp extGoodExit    ;Exit with a smile on our faces
   424                              <1> .net:
   425                              <1> ;SDA Vars are setup for this request
   426 000022BD B805110000          <1>     mov eax, 1105h
   427 000022C2 CD2F                <1>     int 2fh
   428 000022C4 0F826B540000        <1>     jc extErrExit
   429 000022CA E958540000          <1>     jmp extGoodExit
   430                              <1> .getFatCluster:
   431 000022CF 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
   432 000022D6 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
   433 000022DD C1E010              <1>     shl eax, 10h
   434 000022E0 09D0                <1>     or eax, edx ;Add low bits to eax
   435                              <1>     return
    13                              <2> %%_ret:
    14 000022E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   436                              <1> 
   437                              <1> getCurrentDIR:     ;ah = 47h
   438                              <1> ;Returns the path for a drive with no X:\.
   439                              <1> ;Input: rsi = Pointer to a 64 byte user memory area
   440                              <1> ;       dl = 1-based Drive Number (0 = Default) 
   441 000022E3 88D0                <1>     mov al, dl  ;Move drive number into al
   442 000022E5 E800540000          <1>     call dosCrit1Enter
   443 000022EA E8994F0000          <1>     call getCDSNotJoin ;Set drive variables if it is valid and NOT join
   444 000022EF 730F                <1>     jnc .okDrive    ;Cant get current dir of a join drive
   445                              <1> .badDrvExit:
   446 000022F1 E8FE530000          <1>     call dosCrit1Exit
   447 000022F6 B80F000000          <1>     mov eax, errBadDrv
   448 000022FB E935540000          <1>     jmp extErrExit
   449                              <1> .okDrive:
   450                              <1>     ;Now we update the DPB, to be accurate for swapped disks
   451 00002300 56                  <1>     push rsi    ;Save the callers buffer on the stack.
   452 00002301 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get the current Working CDS ptr in rsi
   453 00002308 56                  <1>     push rsi    ;Save desired workingCDS on pointer on the stack!
   454 00002309 C605(FC060000)10    <1>     mov byte [searchAttr], dirDirectory
   455 00002310 488D3D(1E050000)    <1>     lea rdi, buffer1
   456 00002317 E8A6F1FFFF          <1>     call getDirPath   ;Canonicalise the filename and check if directory exists!
   457 0000231C 5E                  <1>     pop rsi ;Get back the original workingCDS
   458 0000231D 5F                  <1>     pop rdi ;Get the callers buffer into rdi
   459 0000231E 72D1                <1>     jc .badDrvExit
   460                              <1>     ;Now buffer1 has the truenamed form of the directory entry. 
   461                              <1>     ;We don't copy that, instead copying the path directly from the cds entry.
   462                              <1>     ;since we confirmed it exists! This avoids join issues :D 
   463 00002320 0FB7465D            <1>     movzx eax, word [rsi + cds.wBackslashOffset]
   464 00002324 4801C6              <1>     add rsi, rax    ;Skip any prefixed chars (handle SUBST)
   465 00002327 803E5C              <1>     cmp byte [rsi],"\" ;Skip if pathsep (these pathseps are always proper)
   466 0000232A 7503                <1>     jne .dontSkipChar
   467 0000232C 48FFC6              <1>     inc rsi ;Skip leading pathseps on the path
   468                              <1> .dontSkipChar:
   469 0000232F AC                  <1>     lodsb   ;Get char
   470 00002330 84C0                <1>     test al, al
   471 00002332 7406                <1>     jz .notSpecialChar
   472 00002334 3C05                <1>     cmp al, 05h     ;Special char case?
   473 00002336 7502                <1>     jne .notSpecialChar
   474 00002338 B0E5                <1>     mov al, 0E5h    ;Replace with the correct "replacement" char
   475                              <1> .notSpecialChar:
   476 0000233A AA                  <1>     stosb
   477 0000233B 84C0                <1>     test al, al ;Did we store a terminator char?
   478 0000233D 75F0                <1>     jnz .dontSkipChar   ;If not, keep copying
   479 0000233F E8B0530000          <1>     call dosCrit1Exit
   480 00002344 B800010000          <1>     mov eax, 0100h  ;RBIL -> MS software may rely on this value
   481 00002349 E9D9530000          <1>     jmp extGoodExit ;Exit very satisfied with ourselves that it worked!
   482                              <1> 
   483                              <1> trueNameMultiplex:  ;Int 2Fh, AX=1221h
   484 0000234E 50                  <1>     push rax
   485 0000234F B800600000          <1>     mov eax, 6000h
   486 00002354 CD21                <1>     int 21h
   487 00002356 58                  <1>     pop rax
   488                              <1>     return
    13                              <2> %%_ret:
    14 00002357 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1>     
   490                              <1> trueName:          ;ah = 60h, get fully qualified name. 
   491                              <1>     ;Called with a path in rsi and 128 byte buffer in rdi
   492 00002358 E8E8500000          <1>     call checkPathspecOK    ;This preserves rsi
   493 0000235D 730C                <1>     jnc .pathspecOk ;If CF=NC this path is totally ok
   494 0000235F 740A                <1>     jz .pathspecOk  ;If the last part has wildcards, allow it too
   495                              <1> .badPath:
   496 00002361 B805000000          <1>     mov eax, errAccDen
   497 00002366 E9CA530000          <1>     jmp extErrExit
   498                              <1> .pathspecOk:
   499 0000236B 57                  <1>     push rdi    ;Save the destination
   500 0000236C 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   501 00002373 E8CEF1FFFF          <1>     call canonicaliseFileName
   502 00002378 5F                  <1>     pop rdi
   503 00002379 0F82B6530000        <1>     jc extErrExit
   504 0000237F 488D35(1E050000)    <1>     lea rsi, buffer1
   505 00002386 E865500000          <1>     call strcpy
   506 0000238B 31C0                <1>     xor eax, eax
   507 0000238D E995530000          <1>     jmp extGoodExit
   508                              <1> 
   509                              <1> ;-----------------------------------
   510                              <1> ;    General Directory Routines    :
   511                              <1> ;-----------------------------------
   512                              <1> 
   513                              <1> 
   514                              <1> findFreeDiskDirEntry:
   515                              <1> ;Find a space in the directory we are searching for a directory entry
   516                              <1> ;Accept first entry starting with a 0E5h or 00h
   517                              <1> ;We place delchar in the first byte of fcbName to indicate we are searching 
   518                              <1> ; for a empty dir entry and then call searchDir (but recall this must only
   519                              <1> ; be called for CDS's that are NOT net CDS's).
   520                              <1> ;Input: qword [workingDPB] = DPB of transacting device
   521                              <1> ;       Directory vars must be set up for the directory we are searching in
   522                              <1> ;Output: CF=CY => Error, eax has error code
   523                              <1> ;        CF=NC => Refer to getDiskDirectoryEntry
   524 00002392 8A05(08070000)      <1>     mov al, byte [delChar]
   525 00002398 8805(D9060000)      <1>     mov byte [fcbName], al
   526 0000239E E8F1EDFFFF          <1>     call searchDir  ;Return in rsi a pointer to the directory entry
   527                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000023A3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000023A5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   528                              <1> ;Free entry found, dir variables are set for the free entry. 
   529                              <1> ;Fall into the below to get a pointer to a disk buffer for this dir entry
   530                              <1> getDiskDirectoryEntry:
   531                              <1> ;Gets a ptr to a disk directory entry using the directory variables.
   532                              <1> ;Input: dword [dirClustA], word [dirSect], dword [dirEntry]
   533                              <1> ;Output: CF=NC => rsi = Pointer to the start of the disk directory
   534                              <1> ;        qword [tempSect] = Disk sector number of directory
   535                              <1> ;        word [entry] = 32 byte offset into sector
   536                              <1> ;        CF=CY => Error, exit 
   537 000023A6 53                  <1>     push rbx
   538 000023A7 8B05(7F070000)      <1>     mov eax, dword [dirClustA]  
   539                              <1>     ;Skip cluster manipulation if the cluster number is 0 because these are 
   540                              <1>     ; root directories of FAT12/16 drives. Instead add manual offset from dpb
   541 000023AD 0FB71D(83070000)    <1>     movzx ebx, word [dirSect]
   542 000023B4 85C0                <1>     test eax, eax
   543 000023B6 7407                <1>     jz .skipCluster
   544 000023B8 E8C8E6FFFF          <1>     call getStartSectorOfCluster    ;Get sector number in rax
   545 000023BD EB1B                <1>     jmp short .skipOldFat
   546                              <1> .skipCluster:
   547 000023BF 55                  <1>     push rbp
   548 000023C0 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   549 000023C7 0FB705(83070000)    <1>     movzx eax, word [dirSect]
   550 000023CE 8B5D17              <1>     mov ebx, dword [rbp + dpb.dFirstUnitOfRootDir]
   551                              <1>     ;If dirSect is greater than wNumberRootDirEntries, then ret fail
   552 000023D1 663B4509            <1>     cmp ax, word [rbp + dpb.wNumberRootDirEntries]
   553 000023D5 5D                  <1>     pop rbp
   554 000023D6 7202                <1>     jb .skipOldFat
   555 000023D8 F9                  <1>     stc
   556                              <1>     return
    13                              <2> %%_ret:
    14 000023D9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   557                              <1> .skipOldFat:
   558 000023DA 4801D8              <1>     add rax, rbx    ;Add sector offset to start sector of cluster
   559 000023DD 488905(46070000)    <1>     mov qword [tempSect], rax   ;Save this sector number
   560 000023E4 E817E6FFFF          <1>     call getBufForDir   ;Get buffer for dir in rbx
   561 000023E9 5B                  <1>     pop rbx
   562                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000023EA 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000023EC C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   563 000023ED 53                  <1>     push rbx
   564 000023EE 488B1D(3E070000)    <1>     mov rbx, qword [currBuff]
   565 000023F5 E8C6EEFFFF          <1>     call prepSectorSearch
   566                              <1>     ;Above function gets data buffer ptr in rsi
   567 000023FA 31D2                <1>     xor edx, edx
   568 000023FC 8B05(85070000)      <1>     mov eax, dword [dirEntry]   ;Get offset into dir file cluster
   569 00002402 C1E005              <1>     shl eax, 5  ;Multiply by 32 to get byte offset
   570                              <1>     ;Make the amount we add to rsi modulo size of bytes per sector
   571 00002405 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
   572 00002409 F7F3                <1>     div ebx ;Divide eax by ebx. Get remainer in dx
   573 0000240B 4801D6              <1>     add rsi, rdx    ;rsi now points to the entry
   574 0000240E 668915(4E070000)    <1>     mov word [entry], dx
   575 00002415 5B                  <1>     pop rbx
   576                              <1>     return
    13                              <2> %%_ret:
    14 00002416 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   577                              <1> 
   578                              <1> updateSFTDateTimeFields:    
   579                              <1> ;Updates the SFT time/date entries for disk files
   580                              <1> ;Called with:
   581                              <1> ;   [workingDPB] = DPB pointer for the disk device
   582                              <1> ;   [currentSFT] = Current SFT pointer
   583                              <1> ;   bx = attribute byte from the SFT
   584 00002417 66F7C3C000          <1>     test bx, blokFileNoFlush | devCharDev
   585                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000241C 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000241E C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   586 0000241F 66F7C30040          <1>     test bx, blokNoDTonClose
   587                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002424 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002426 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   588 00002427 50                  <1>     push rax
   589 00002428 53                  <1>     push rbx
   590 00002429 E8830B0000          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
   591                              <1>     ;Build date and time words
   592 0000242E E8690C0000          <1>     call getDirDTwords  ;Get date time words packed in eax
   593                              <1>     ;Update SFT fields
   594 00002433 66894713            <1>     mov word [rdi + sft.wTime], ax
   595 00002437 C1E810              <1>     shr eax, 16 ;Eject the time, get the date in eax
   596 0000243A 66894715            <1>     mov word [rdi + sft.wDate], ax
   597 0000243E 31C0                <1>     xor eax, eax
   598 00002440 FF15(2F010000)      <1>     call qword [updateDirShare]
   599 00002446 5B                  <1>     pop rbx
   600 00002447 58                  <1>     pop rax
   601                              <1>     return
    13                              <2> %%_ret:
    14 00002448 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   602                              <1> 
   603                              <1> getAndUpdateDirSectorForFile:
   604                              <1> ;Input: rdi -> SFT
   605                              <1> ;Output: CF=NC: rsi -> Updated dir entry in buffer
   606                              <1> ;               rdi -> SFT
   607 00002449 E84F2D0000          <1>     call setDPBfromSFT
   608                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000244E 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002450 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   609 00002451 488B4727            <1>     mov rax, qword [rdi + sft.qDirSect] ;Get the directory sector for this file
   610 00002455 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   611 0000245C C605(68040000)18    <1>     mov byte [Int24bitfld], critFailOK | critRetryOK
   612 00002463 E898E5FFFF          <1>     call getBufForDir  ;Returns buffer pointer in rbx for sector in rax
   613                              <1>     retc    ;If an error is to be returned from, we skip the rest of this
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002468 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000246A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   614 0000246B 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Reobtain the SFT ptr
   615 00002472 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]   ;Goto data area
   616 00002476 0FB65F2F            <1>     movzx ebx, byte [rdi + sft.bNumDirEnt] ;Get the directory entry into ebx
   617 0000247A C1E305              <1>     shl ebx, 5  ;Multiply by 32 (directory entry is 32 bytes in size)
   618 0000247D 4801DE              <1>     add rsi, rbx    ;Move rsi to point to the directory entry
   619                              <1>     return
    13                              <2> %%_ret:
    14 00002480 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   620                              <1> 
   621                              <1> growDirectory:
   622                              <1> ;Input: dword [dirClustPar] must have the first cluster number of the directory
   623                              <1> ;Output: CF=NC => All ok, directory grew by 1 sector
   624                              <1> ;                 eax = New Cluster number
   625                              <1> ;               TWO NON CF ERROR CASES.
   626                              <1> ;               If eax = -1 => disk full!
   627                              <1> ;               If eax = 0 => Trying to grow FAT12/16 root dir. Bad.
   628                              <1> ;        CF=CY => Something went wrong. Rip. 
   629 00002481 53                  <1>     push rbx
   630 00002482 51                  <1>     push rcx
   631 00002483 57                  <1>     push rdi
   632 00002484 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get first cluster for directory
   633 0000248A 85C0                <1>     test eax, eax
   634 0000248C 742B                <1>     jz .exit
   635 0000248E E81FE6FFFF          <1>     call getLastClusterInChain  ;Get last cluster in chain in eax
   636 00002493 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
   637 00002495 B901000000          <1>     mov ecx, 1  ;Allocate one more cluster
   638 0000249A E892E6FFFF          <1>     call allocateClusters   ;ebx has last cluster value
   639 0000249F 7218                <1>     jc .exit
   640 000024A1 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk full?
   641 000024A6 7411                <1>     je .exit
   642 000024A8 89D8                <1>     mov eax, ebx    ;Walk this next cluster value to get new cluster value
   643 000024AA E868E8FFFF          <1>     call readFAT
   644 000024AF 7208                <1>     jc .exit
   645 000024B1 E807000000          <1>     call sanitiseCluster    ;Preserves all regs, sanitises the cluster for use
   646 000024B6 7201                <1>     jc .exit
   647 000024B8 F8                  <1>     clc
   648                              <1> .exit:
   649 000024B9 5F                  <1>     pop rdi
   650 000024BA 59                  <1>     pop rcx
   651 000024BB 5B                  <1>     pop rbx
   652                              <1>     return   
    13                              <2> %%_ret:
    14 000024BC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   653                              <1> sanitiseCluster:
   654                              <1> ;Sanitises the cluster in eax to all zeros
   655                              <1> ;Does not move file pointers
   656                              <1> ;Currently, is only called to sanitise subdirectory clusters
   657                              <1> ;Input: eax = Cluster number
   658                              <1> ;       qword [workingDPB] = DPB of drive whose cluster we are sanitising
   659                              <1> ;Output: If CF=NC => eax = Sanitised Cluster number
   660                              <1> ;        If CF=CY => Error, exit
   661 000024BD 50                  <1>     push rax
   662 000024BE 53                  <1>     push rbx
   663 000024BF 51                  <1>     push rcx
   664 000024C0 52                  <1>     push rdx
   665 000024C1 56                  <1>     push rsi
   666 000024C2 55                  <1>     push rbp
   667 000024C3 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB]
   668 000024CA E8B6E5FFFF          <1>     call getStartSectorOfCluster    ;Needs DPB in rbp
   669 000024CF 0FB65504            <1>     movzx edx, byte [rbp + dpb.bMaxSectorInCluster] 
   670 000024D3 FFC2                <1>     inc edx ;Make it a count of sectors
   671                              <1> .getSectorInCluster:
   672 000024D5 E826E5FFFF          <1>     call getBufForDir  ;Get a generic data buffer in rbx
   673 000024DA 721E                <1>     jc .exitBad
   674 000024DC 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]
   675 000024E0 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector]
   676 000024E4 31C0                <1>     xor eax, eax
   677 000024E6 F3AA                <1>     rep stosb   ;Store one sectorful of zeros
   678 000024E8 E8AEE3FFFF          <1>     call markBufferDirty ;We wrote to this buffer
   679                              <1> 
   680 000024ED FFCA                <1>     dec edx     ;One less sector in the cluster to sanitise!
   681 000024EF 740A                <1>     jz .exit    ;Jump if we done
   682 000024F1 488B430A            <1>     mov rax, qword [rbx + bufferHdr.bufferLBA] ;Get current sector number
   683 000024F5 48FFC0              <1>     inc rax ;Goto next sector in cluster
   684 000024F8 EBDB                <1>     jmp short .getSectorInCluster
   685                              <1> .exitBad:
   686 000024FA F9                  <1>     stc
   687                              <1> .exit:
   688 000024FB 5D                  <1>     pop rbp
   689 000024FC 5E                  <1>     pop rsi
   690 000024FD 5A                  <1>     pop rdx
   691 000024FE 59                  <1>     pop rcx
   692 000024FF 5B                  <1>     pop rbx
   693 00002500 58                  <1>     pop rax
   694                              <1>     return
    13                              <2> %%_ret:
    14 00002501 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    38                                  %include "./src/Kernel/FileIO/devio.asm"
     1                              <1> ;This file contains the primitive dev io function, which will be called 
     2                              <1> ; from charFunc.asm, hdlFunc.asm and fcbFunc.asm as all three 
     3                              <1> ; make requests for device IO.
     4                              <1> 
     5                              <1> mainCharIO:
     6                              <1> ;This is the main IO clearing function for Char IO.
     7                              <1> ; Uses two tables, as per DOS 3.3 to store parts of the request header
     8                              <1> ; Uses only the secdReqPkt and the singleIObyt as the transfer buffer
     9                              <1> ;
    10                              <1> ;Input: rsi = SFT for the file the IO is being enacted on
    11                              <1> ;       ah = {0,..., 5}, a subfunction number
    12                              <1> ;       Function 0: Read Char (drvREAD)
    13                              <1> ;       Function 1: Non Destructive Read Char (drvNONDESTREAD)
    14                              <1> ;       Function 2: Write Char (drvWrite)
    15                              <1> ; In the case the below functions are called for Disk/Net files
    16                              <1> ;   this function will return with ZF=NZ, as if the device is ready (not busy).
    17                              <1> ;       Function 3: Output Status of Device (drvOUTSTATUS)
    18                              <1> ;       Function 4: Flush Input Buffers (drvFLUSHINBUF)
    19                              <1> ;       Function 5: Non Destructive Read Char, Busy Bit forcefully set.
    20                              <1> ;
    21                              <1> ; If and only if ah = 02h, al = Char to write to device
    22                              <1> ;
    23                              <1> ;
    24                              <1> ;Output:    If Read:                        AL = Char Read (ZF = NZ)
    25                              <1> ;           If ND Read or Output Status:    ZF = ZE => Device NOT ready (busy)
    26                              <1> ;                                           ZF = NZ => Device ready (not busy)
    27                              <1> ;                                               If ND read, AL = Next Char
    28                              <1> ; For Files/Net:
    29                              <1> ;           If ND Read, get char without advancing file pointer (sft.dCurntOff).
    30                              <1> ;           If Read, get char while advancing file pointer (sft.dCurntOff).
    31                              <1> ;           For Read and ND Read:
    32                              <1> ;               ZF = ZE when file pointer hits EOF. Else ZF = NZ.
    33                              <1> ;               Read returns ^Z on EOF.
    34                              <1> ;           If Write, char places at sft.dCurntOff and sft.dCurntOff advanced.
    35                              <1> ;   All other calls will return with ZF = NZ => Device ready (not busy)
    36                              <1> ;
    37                              <1> ;All registers preserved EXCEPT for ax and flags
    38                              <1> 
    39                              <1> ;Reference Request Header
    40                              <1> ;Common Section:
    41                              <1> ;    .hdrlen resb 1  ;Length of the request header
    42                              <1> ;    .unitnm resb 1  ;Unit number, meaningless for character devs
    43                              <1> ;    .cmdcde resb 1  ;Command code
    44                              <1> ;    .status resw 1  ;Status word
    45                              <1> ;    .devptr resq 1  ;Reserved. Unused
    46                              <1> ;Below used by calls 0,1,2,5
    47                              <1> ;    .medesc/.retbyt resb 1  ;ioReqPkt / ndInNoWaitPkt
    48                              <1> ;Below used by calls 0,2
    49                              <1> ;    .bufptr resq 1
    50                              <1> ;    .tfrlen resd 1
    51                              <1> ;Below never used, can reduce buffer size in SDA by 10h
    52                              <1> ;    .strtsc resq 1
    53                              <1> ;    .desptr resq 1
    54                              <1> 
    55                              <1>     ;Setup parts of the req ptr AS IF IT WERE FOR IO
    56 00002502 53                  <1>     push rbx    ; PRESERVE THE STATE OF RBX OR GOD HELP YOU ALL!!!!!
    57 00002503 488D1D(1C050000)    <1>     lea rbx, singleIObyt   ;Get lea of return byte pointer
    58 0000250A 48891D(A5040000)    <1>     mov qword [secdReqPkt + ioReqPkt.bufptr], rbx
    59 00002511 5B                  <1>     pop rbx
    60 00002512 C705(AD040000)0100- <1>     mov dword [secdReqPkt + ioReqPkt.tfrlen], 1 ;Request 1 byte if read/write
    60 0000251A 0000                <1>
    61 0000251C 668905(1C050000)    <1>     mov word [singleIObyt], ax  ;Save al for transfer and ah for preservation
    62 00002523 66F746050080        <1>     test word [rsi + sft.wDeviceInfo], devRedirDev
    63 00002529 0F85A1000000        <1>     jnz .notChar
    64 0000252F 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
    65 00002535 0F8495000000        <1>     jz .notChar
    66                              <1> ;Char devices only here
    67 0000253B E893510000          <1>     call dosPushRegs    ;Save context here
    68 00002540 488D1DD3DAFFFF      <1>     lea rbx, ioRqCmdErrTbl  ;Get the table pointer in rbx
    69 00002547 0FB6CC              <1>     movzx ecx, ah   ;Get the command code into ecx (zero xtnd rcx)
    70 0000254A C1E102              <1>     shl ecx, 2  ;Multiply by four since DWORD entries
    71 0000254D 8B0C0B              <1>     mov ecx, dword [rbx + rcx]  ;Get entry
    72 00002550 890D(97040000)      <1>     mov dword [secdReqPkt], ecx ;First three entries map to first three entries
    73                              <1>     ;Now set up cx for status word
    74 00002556 31C9                <1>     xor ecx, ecx
    75 00002558 80FC05              <1>     cmp ah, 05h ;Did the caller request command 5?
    76 0000255B 7506                <1>     jne .skipBsySet
    77 0000255D 81C900020000        <1>     or ecx, drvBsyStatus
    78                              <1> .skipBsySet:
    79 00002563 66870D(9A040000)    <1>     xchg cx, word [secdReqPkt + drvReqPkt.status] ;Swap error flags with status
    80                              <1>     ;cl has flags, ch has garbage (status is zeroed by xchg)
    81 0000256A 488D1D(97040000)    <1>     lea rbx, secdReqPkt
    82 00002571 E83F480000          <1>     call goDriverChar   ;GoDriver with an SFT in rsi
    83 00002576 668B3D(9A040000)    <1>     mov di, word [secdReqPkt + drvReqPkt.status]    ;Get status
    84 0000257D F7C700800000        <1>     test edi, drvErrStatus
    85 00002583 752D                <1>     jnz .error
    86                              <1> .ignoreRet:
    87 00002585 803D(99040000)05    <1>     cmp byte [secdReqPkt + drvReqPkt.cmdcde], drvNONDESTREAD
    88 0000258C 750C                <1>     jne .notNDRead
    89 0000258E 8A05(A4040000)      <1>     mov al, byte [secdReqPkt + ndInNoWaitPkt.retbyt]    ;Get request byte
    90 00002594 8805(1C050000)      <1>     mov byte [singleIObyt], al  ;Store it here to make algorithm streamlined
    91                              <1> .notNDRead:
    92 0000259A 8A25(9B040000)      <1>     mov ah, byte [secdReqPkt + drvReqPkt.status + 1]  ;Get hibyte of status word
    93 000025A0 F6D4                <1>     not ah
    94 000025A2 80E402              <1>     and ah, (drvBsyStatus >> 8) ;Set ZF=ZE if BSY set on for NDRead commands
    95 000025A5 E812510000          <1>     call dosPopRegs ;Get back the context
    96 000025AA 668B05(1C050000)    <1>     mov ax, word [singleIObyt]  ;Get back OG high byte and return char in al
    97                              <1>     return ;Return to caller
    13                              <2> %%_ret:
    14 000025B1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    98                              <1> .error:
    99                              <1>     ;cl has flags
   100 000025B2 88CC                <1>     mov ah, cl
   101 000025B4 E8E6410000          <1>     call charDevErr
   102 000025B9 3C01                <1>     cmp al, critRetry   ;Did the user request a retry
   103 000025BB 750A                <1>     jne .errorIgnore
   104                              <1>     ;Fallthrough => Retry
   105 000025BD E8FA500000          <1>     call dosPopRegs ;Pop context (return the regs as on entry)
   106 000025C2 E93BFFFFFF          <1>     jmp mainCharIO  ;Retry operation
   107                              <1> .errorIgnore:
   108                              <1>     ;Clear the busy bit in the status word
   109 000025C7 8025(9B040000)FD    <1>     and byte [secdReqPkt + drvReqPkt.status + 1], ~(drvBsyStatus >> 8)
   110 000025CE EBB5                <1>     jmp short .ignoreRet
   111                              <1> .notChar:
   112                              <1> ;rsi -> SFT to read/write to
   113 000025D0 84E4                <1>     test ah, ah ;If ah = 0, read 1 byte
   114 000025D2 7409                <1>     jz .makeDiskNetReadReq
   115 000025D4 FECC                <1>     dec ah
   116 000025D6 7422                <1>     jz .makeDiskNetNonDestReq
   117 000025D8 FECC                <1>     dec ah
   118 000025DA 742A                <1>     jz .makeDiskNetWriteReq
   119                              <1>     ;Else just return with ZF=NZ
   120                              <1>     return
    13                              <2> %%_ret:
    14 000025DC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   121                              <1> .makeDiskNetReadReq:
   122 000025DD E834000000          <1>     call .prepDiskNetIO
   123 000025E2 E860220000          <1>     call readBytes
   124 000025E7 85C9                <1>     test ecx, ecx   ;Set flags for how many bytes we read, ZF=ZE => No read
   125 000025E9 E858000000          <1>     call .cleanDiskNetIO
   126 000025EE 8A05(1C050000)      <1>     mov al, byte [singleIObyt]
   127                              <1>     retnz
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000025F4 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000025F6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   128 000025F7 B01A                <1>     mov al, EOF ;Else return an EOF
   129                              <1>     return
    13                              <2> %%_ret:
    14 000025F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   130                              <1> .makeDiskNetNonDestReq:
   131                              <1>     ;Save the SFT file pointer position and read a char
   132 000025FA FF761B              <1>     push qword [rsi + sft.dCurntOff]
   133 000025FD E8DBFFFFFF          <1>     call .makeDiskNetReadReq
   134 00002602 8F461B              <1>     pop  qword [rsi + sft.dCurntOff]
   135                              <1>     return
    13                              <2> %%_ret:
    14 00002605 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   136                              <1> .makeDiskNetWriteReq:
   137 00002606 E80B000000          <1>     call .prepDiskNetIO
   138 0000260B E893250000          <1>     call writeBytes
   139 00002610 E831000000          <1>     call .cleanDiskNetIO
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002615 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> .prepDiskNetIO:
   142                              <1> ;Set up the currentDTA to the internal buffer
   143                              <1> ;We use this here only so we can tweak it for this purpose
   144 00002616 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   145 0000261C E8B2500000          <1>     call dosPushRegs
   146 00002621 FF35(17040000)      <1>     push qword [currentDTA]
   147 00002627 488D0D(1C050000)    <1>     lea rcx, singleIObyt   ;Get the buffer ptr
   148 0000262E 48890D(17040000)    <1>     mov qword [currentDTA], rcx ;and use it as the current DTA
   149 00002635 488935(32070000)    <1>     mov qword [currentSFT], rsi ;Set this sft ptr as the current SFT
   150 0000263C 31C9                <1>     xor ecx, ecx
   151 0000263E FFC1                <1>     inc ecx ;IO 1 byte only
   152                              <1> .cleanDNIOReturn:
   153 00002640 FF25(EB040000)      <1>     jmp qword [altRet]
   154                              <1> .cleanDiskNetIO:
   155 00002646 8F05(EB040000)      <1>     pop qword [altRet]  ;Pop the ret addr here
   156 0000264C 8F05(17040000)      <1>     pop qword [currentDTA]
   157 00002652 E865500000          <1>     call dosPopRegs
   158 00002657 EBE7                <1>     jmp short .cleanDNIOReturn
   159                              <1> 
   160                              <1> openSFT:
   161                              <1> ;Signals an open to a file (e.g. when printer echo is to begin)
   162                              <1> ;Input: rdi = SFT pointer
   163 00002659 E875500000          <1>     call dosPushRegs
   164 0000265E B00D                <1>     mov al, drvOPEN
   165 00002660 EB07                <1>     jmp short openCloseCommon
   166                              <1> closeSFT:
   167                              <1> ;Signals a close to a file (e.g. when printer echo is to end)
   168 00002662 E86C500000          <1>     call dosPushRegs
   169 00002667 B00E                <1>     mov al, drvCLOSE
   170                              <1> openCloseCommon:
   171                              <1> ;Only signals an open/close to a block device if SHARE is loaded
   172 00002669 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;We a network device?
   173 0000266F 7569                <1>     jnz .exit    ;Exit if so
   174 00002671 F6470580            <1>     test byte [rdi + sft.wDeviceInfo], devCharDev
   175 00002675 488B7F07            <1>     mov rdi, qword [rdi + sft.qPtr] ;Get DPB or Device Driver header
   176 00002679 7512                <1>     jnz .charDev
   177                              <1>     ;Here a disk drive, rdi is a DPB ptr
   178 0000267B F605(D4030000)FF    <1>     test byte [shareFlag], -1    ;Is SHARE loaded?
   179 00002682 7456                <1>     jz .exit   ;Exit if share flag is zero (Share not loaded)
   180 00002684 8A6701              <1>     mov ah, byte [rdi + dpb.bUnitNumber]    ;Get to populate request header
   181 00002687 8A0F                <1>     mov cl, byte [rdi + dpb.bDriveNumber]   ;Get for error if an error occurs
   182 00002689 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   183                              <1> .charDev:
   184 0000268D 66F747080008        <1>     test word [rdi + drvHdr.attrib], devDrvHdlCTL   ;Can we open/close?
   185 00002693 7445                <1>     jz .exit    ;No, exit!
   186 00002695 4889FE              <1>     mov rsi, rdi    ;Save driver header in rsi for the request
   187 00002698 488D1D(C1040000)    <1>     lea rbx, primReqPkt ;Get the primary request header space in rbx
   188 0000269F 0FB7C0              <1>     movzx eax, ax   ;Zero extend (al = unit num if block, ah = cmdcde)
   189                              <1> .retryEP:
   190 000026A2 894301              <1>     mov dword [rbx + 1], eax    ;Store unitnm (if block), cmdcde and 0 status
   191 000026A5 C6030D              <1>     mov byte [rbx], openReqPkt_size ;Same length as closeReqPkt
   192 000026A8 50                  <1>     push rax    ;Save the dword
   193 000026A9 E80B470000          <1>     call goDriver
   194 000026AE 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + drvReqPkt.status] ;Get the status
   195 000026B5 F7C700800000        <1>     test edi, drvErrStatus
   196 000026BB 741C                <1>     jz .exitPop
   197                              <1>     ;Error here, check if char or block drive
   198 000026BD 66F746080080        <1>     test word [rsi + drvHdr.attrib], devDrvChar
   199 000026C3 7404                <1>     jz .blockError
   200                              <1>     ;Char error here
   201 000026C5 B486                <1>     mov ah, critCharDev | critData  ;Data on char dev error
   202 000026C7 EB04                <1>     jmp short .errorCmn
   203                              <1> .blockError:
   204 000026C9 88C8                <1>     mov al, cl  ;Move drive number into al
   205 000026CB B406                <1>     mov ah, critData    ;Data on block dev error
   206                              <1> .errorCmn:
   207                              <1> ;Permit only Abort, Retry or Ignore. Abort doesn't come through.
   208 000026CD E8CD400000          <1>     call charDevErr ;Call temperror handler (handler due to change, not ep)
   209 000026D2 B001                <1>     mov al, critRetry   ;al returns user response
   210 000026D4 7503                <1>     jne .exitPop    ;Ignore, proceed as if nothing happened
   211 000026D6 58                  <1>     pop rax ;Get back zero extended eax into eax to store
   212 000026D7 EBC9                <1>     jmp short .retryEP  ;Reset
   213                              <1> .exitPop:
   214 000026D9 58                  <1>     pop rax    
   215                              <1> .exit:
   216 000026DA E8DD4F0000          <1>     call dosPopRegs
   217                              <1>     return
    13                              <2> %%_ret:
    14 000026DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                                  %include "./src/Kernel/FileIO/charFunc.asm"
     1                              <1> ;-----------------------------------------------------------------------:
     2                              <1> ;                  DOS default char functions live here                 :
     3                              <1> ;                                                                       :
     4                              <1> ; All input Char functions wait for input. Only directConIO doesnt wait :
     5                              <1> ;                                                                       :
     6                              <1> ;Rules for the naming of the DOS functions                              :
     7                              <1> ;If the name is <name>     => Has NO break checking and no echo         :
     8                              <1> ;If the name is <name>_B   => Has Break checking and no echo            :
     9                              <1> ;If the name is <name>_E   => Has No Break checking AND Echo to STDOUT  :
    10                              <1> ;If the name is <name>_BE  => Has Break checking AND Echo to STDOUT     :
    11                              <1> ;                                                                       :
    12                              <1> ;-----------------------------------------------------------------------:
    13                              <1> 
    14                              <1> charIn_BE:     ;ah = 01h
    15                              <1> ;Return char that has been read and echoed in al
    16 000026E0 E882010000          <1>     call charIn_B
    17 000026E5 50                  <1>     push rax
    18 000026E6 E804000000          <1>     call charOut_B.in    ;Output it to screen
    19 000026EB 58                  <1>     pop rax
    20                              <1>     return
    13                              <2> %%_ret:
    14 000026EC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    21                              <1> 
    22                              <1> charOut_B:       ;ah = 02h
    23                              <1> ;Bspace is regular cursor left, does not insert a blank
    24 000026ED 88D0                <1>     mov al, dl
    25                              <1> .in:  ;Internal function Entry Point, with char in al, also Int 2Fh, AX=1205h
    26 000026EF 3C20                <1>     cmp al, asciiCaret
    27 000026F1 0F8287000000        <1>     jb .control
    28 000026F7 3C7F                <1>     cmp al, DEL ;DEL char?
    29 000026F9 7406                <1>     je .skipCurs
    30 000026FB FE05(CC020000)      <1>     inc byte [vConCursPos]  ;Increment Cursor pos
    31                              <1> .skipCurs:
    32 00002701 FE05(D2030000)      <1>     inc byte [vConErr]   ;Increment 2 char error checker
    33 00002707 8025(D2030000)03    <1>     and byte [vConErr], 3
    34 0000270E 56                  <1>     push rsi
    35 0000270F 7507                <1>     jnz .skipErrorCheck
    36 00002711 50                  <1>     push rax
    37 00002712 E89F020000          <1>     call vConCtrlCheck
    38 00002717 58                  <1>     pop rax
    39                              <1> .skipErrorCheck:
    40 00002718 E826020000          <1>     call outputOnStdout
    41 0000271D 5E                  <1>     pop rsi
    42 0000271E F605(CF030000)FF    <1>     test byte [printEcho], -1   ;Do we echo this char?
    43                              <1>     retz    ;If zero, no echo
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002725 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002727 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    44 00002728 53                  <1>     push rbx
    45 00002729 56                  <1>     push rsi
    46 0000272A BB01000000          <1>     mov ebx, 1  ;STDOUT handle 
    47 0000272F E84D030000          <1>     call getCharDevSFT  ;Get SFT handle in rsi or exit if CF=CY
    48 00002734 0F82D0000000        <1>     jc auxOutCmn.exit
    49                              <1>     ;Ensure we only echo if STDOUT is a char device!!
    50 0000273A 0FB75E05            <1>     movzx ebx, word [rsi + sft.wDeviceInfo]
    51 0000273E F7C300800000        <1>     test ebx, devRedirDev
    52 00002744 0F85C0000000        <1>     jnz auxOutCmn.exit  ;Exit if STDOUT is redir
    53 0000274A F7C380000000        <1>     test ebx, devCharDev
    54 00002750 0F84B4000000        <1>     jz auxOutCmn.exit
    55 00002756 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
    56 0000275B E821030000          <1>     call getCharDevSFT  ;Get printer sft in rsi
    57 00002760 0F82A4000000        <1>     jc auxOutCmn.exit   ;Exit if handle closed
    58 00002766 66F746050008        <1>     test word [rsi + sft.wDeviceInfo], charDevNetSpool  ;Network printer?
    59 0000276C 0F8493000000        <1>     jz auxOutCmn.diskFileEP
    60 00002772 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Stop echoing
    61 00002779 E98C000000          <1>     jmp auxOutCmn.netFileEP
    62                              <1> .control:
    63 0000277E 3C0D                <1>     cmp al, CR
    64 00002780 742A                <1>     je .newline
    65 00002782 3C08                <1>     cmp al, BSP
    66 00002784 7432                <1>     je .back
    67 00002786 3C09                <1>     cmp al, TAB
    68 00002788 0F8573FFFFFF        <1>     jne .skipCurs   ;Treat as normal
    69                              <1>     ;TAB key here
    70 0000278E 8A05(CC020000)      <1>     mov al, byte [vConCursPos]
    71 00002794 0CF8                <1>     or al, ~7
    72 00002796 F6D8                <1>     neg al
    73                              <1> .outputATab:   ;Called with al = Number of chars into the tabstop we are!
    74 00002798 51                  <1>     push rcx
    75 00002799 0FB6C8              <1>     movzx ecx, al
    76 0000279C 67E30B              <1>     jecxz .stopTab ;If this and was 0, skip printing spaces
    77                              <1> .tabloop:
    78 0000279F B020                <1>     mov al, SPC
    79 000027A1 E849FFFFFF          <1>     call charOut_B.in   ;Output the char
    80 000027A6 FEC9                <1>     dec cl
    81 000027A8 75F5                <1>     jnz .tabloop
    82                              <1> .stopTab:
    83 000027AA 59                  <1>     pop rcx
    84                              <1>     return ;Exit
    13                              <2> %%_ret:
    14 000027AB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    85                              <1> .newline:
    86 000027AC C605(CC020000)00    <1>     mov byte [vConCursPos], 0   ;Start of the line
    87 000027B3 E949FFFFFF          <1>     jmp .skipCurs   ;And echo 
    88                              <1> .back:
    89 000027B8 FE0D(CC020000)      <1>     dec byte [vConCursPos]
    90 000027BE E93EFFFFFF          <1>     jmp .skipCurs   ;And echo
    91                              <1> 
    92                              <1> auxIn_B:        ;ah = 03h
    93 000027C3 E8EE010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending regardless
    94 000027C8 BB03000000          <1>     mov ebx, 3
    95 000027CD E8AF020000          <1>     call getCharDevSFT
    96                              <1>     retc    ;Return if CF set (handle 3 is closed)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000027D2 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000027D4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    97                              <1> .auxloop:
    98 000027D5 B401                <1>     mov ah, 01h ;Do a non-destructive read of rsi (AUX SFT ptr)
    99 000027D7 E826FDFFFF          <1>     call mainCharIO
   100 000027DC 7408                <1>     jz .signalLoop
   101 000027DE 30E4                <1>     xor ah, ah  ;Read the char in
   102 000027E0 E81DFDFFFF          <1>     call mainCharIO
   103                              <1>     return
    13                              <2> %%_ret:
    14 000027E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   104                              <1> .signalLoop:
   105 000027E6 E8A8010000          <1>     call callInt28h
   106 000027EB EBE8                <1>     jmp short .auxloop
   107                              <1> 
   108                              <1> auxOut_B:       ;ah = 04h
   109 000027ED 53                  <1>     push rbx
   110 000027EE BB03000000          <1>     mov ebx, 3  ;STDAUX handle
   111 000027F3 EB06                <1>     jmp short auxOutCmn
   112                              <1> prnOut_B:       ;ah = 05h
   113 000027F5 53                  <1>     push rbx
   114 000027F6 BB04000000          <1>     mov ebx, 4  ;STDPRN handle
   115                              <1> auxOutCmn: ;Auxilliary output device common 
   116 000027FB 88D0                <1>     mov al, dl  ;Get the char into al
   117 000027FD 50                  <1>     push rax
   118 000027FE E8B3010000          <1>     call vConCtrlCheck  ;Check if STDIN has a ^C pending
   119 00002803 58                  <1>     pop rax
   120 00002804 56                  <1>     push rsi
   121                              <1> .diskFileEP:
   122 00002805 E866010000          <1>     call outputToHandle ;bx has handle, convert to sft ptr and output char!
   123                              <1> .netFileEP:
   124                              <1> .exit:
   125 0000280A 5E                  <1>     pop rsi
   126 0000280B 5B                  <1>     pop rbx
   127                              <1>     return
    13                              <2> %%_ret:
    14 0000280C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   128                              <1> 
   129                              <1> directConIO:    ;ah = 06h
   130 0000280D 88D0                <1>     mov al, dl  ;Move the char to print/subfunction into al
   131 0000280F 3CFF                <1>     cmp al, -1  ;Anything other than -1 means output the char
   132 00002811 0F852C010000        <1>     jne outputOnStdout  ;So output on stdout and return via output function
   133                              <1> ;Here is the read char direct function
   134 00002817 31DB                <1>     xor ebx, ebx    
   135 00002819 E863020000          <1>     call getCharDevSFT  ;Get the sft pointer in rsi
   136                              <1>     retc    ;Return error if ebx closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000281E 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002820 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   137 00002821 488B2D(7B040000)    <1>     mov rbp, qword [oldRSP] ;Get pointer to stack frame
   138 00002828 B401                <1>     mov ah, 01h ;ND read from rsi sft ptr
   139 0000282A E8D3FCFFFF          <1>     call mainCharIO
   140 0000282F E85F010000          <1>     call callInt28h ;This preserves flags so call here!
   141 00002834 7507                <1>     jnz .readChar
   142 00002836 804D5840            <1>     or byte [rbp + callerFrame.flags], 40h  ;Set Zero Flag
   143 0000283A 30C0                <1>     xor al, al  ;Set caller return code to 0
   144                              <1>     return
    13                              <2> %%_ret:
    14 0000283C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   145                              <1> .readChar:
   146 0000283D 806558BF            <1>     and byte [rbp + callerFrame.flags], ~40h    ;Clear Zero Flag
   147                              <1>     ;Fallthrough here to get the char at STDIN
   148                              <1> charIn:         ;ah = 07h
   149                              <1> ;Return char in al from STDIN without waiting
   150 00002841 31DB                <1>     xor ebx, ebx
   151 00002843 E839020000          <1>     call getCharDevSFT
   152                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002848 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000284A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   153 0000284B B401                <1>     mov ah, 01  ;ND read for char
   154 0000284D E8B0FCFFFF          <1>     call mainCharIO
   155 00002852 750B                <1>     jnz .getChar
   156 00002854 B484                <1>     mov ah, 84h ;Multitasking keyboard loop
   157 00002856 CD2A                <1>     int 2Ah
   158 00002858 E836010000          <1>     call callInt28h
   159 0000285D EBE2                <1>     jmp short charIn    ;Loop again awaiting the char
   160                              <1> .getChar:
   161                              <1>     ;Get the char in al and exit
   162 0000285F 30E4                <1>     xor ah, ah
   163 00002861 E89CFCFFFF          <1>     call mainCharIO
   164                              <1>     return
    13                              <2> %%_ret:
    14 00002866 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> charIn_B:       ;ah = 08h
   166                              <1> ;Return char in al from STDIN
   167 00002867 56                  <1>     push rsi
   168                              <1> .readAgain:
   169 00002868 E849010000          <1>     call vConCtrlCheck  ;Check if the char at STDIN is ctrl and handle it
   170                              <1>     ;Also sets rsi to point to the device SFT for 
   171 0000286D 7543                <1>     jnz .pullChar
   172 0000286F 803D(E0190000)00    <1>     cmp byte [lookahead], 00    ;0 => Lookahead
   173 00002876 7507                <1>     jne .skiplookahead
   174 00002878 B405                <1>     mov ah, 05h ;Fake the lookahead for device in rsi
   175 0000287A E883FCFFFF          <1>     call mainCharIO
   176                              <1> .skiplookahead:
   177 0000287F B484                <1>     mov ah, 84h
   178 00002881 CD2A                <1>     int 2ah ;Multitasking keyboard loop
   179 00002883 66813D(151A0000)FF- <1>     cmp word [keybTicks], -1    ;We reached -1 yet?
   179 0000288B FF                  <1>
   180 0000288C 751B                <1>     jne .skipClockRead
   181 0000288E E8404E0000          <1>     call dosPushRegs
   182 00002893 F8                  <1>     clc ;Clear CF, write primary header to backup
   183 00002894 E884000000          <1>     call swapPrimaryHeader
   184 00002899 E813070000          <1>     call readDateTimeRecord
   185 0000289E F9                  <1>     stc ;Set CF, write backup to primary header
   186 0000289F E879000000          <1>     call swapPrimaryHeader
   187 000028A4 E8134E0000          <1>     call dosPopRegs
   188                              <1> .skipClockRead:
   189 000028A9 66FF05(151A0000)    <1>     inc word [keybTicks]
   190 000028B0 EBB6                <1>     jmp short .readAgain
   191                              <1> .pullChar:
   192 000028B2 30E4                <1>     xor ah, ah
   193 000028B4 E849FCFFFF          <1>     call mainCharIO ;Pull char from device buffer
   194 000028B9 5E                  <1>     pop rsi
   195 000028BA 3C00                <1>     cmp al, NUL ;Is this the null char?
   196 000028BC 7507                <1>     jne .exit
   197                              <1>     ;We are mid extended ascii, prevent printer toggling
   198 000028BE C605(141A0000)01    <1>     mov byte [inExtASCII], 1    ;Set to be in the Extended ASCII
   199                              <1> .exit:
   200                              <1>     return
    13                              <2> %%_ret:
    14 000028C5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> 
   202                              <1> printString_B:      ;ah = 09h
   203 000028C6 4889D6              <1>     mov rsi, rdx    ;Set up for scasb
   204                              <1> .ps0:
   205 000028C9 AC                  <1>     lodsb   ;Get char in al and inc rsi
   206 000028CA 3C24                <1>     cmp al, "$" ;End of string char?
   207                              <1>     rete    ;Return if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000028CC 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000028CE C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   208 000028CF E81BFEFFFF          <1>     call charOut_B.in
   209 000028D4 EBF3                <1>     jmp short .ps0
   210                              <1> 
   211                              <1> checkStdinStatus:  ;ah = 0Bh
   212                              <1> ;Returns the status of the driver controlling vCon
   213 000028D6 E8DB000000          <1>     call vConCtrlCheck  ;Get status (handling special case chars)
   214 000028DB B000                <1>     mov al, 00  ;Set return code to 0 without affecting flags
   215                              <1>     retz    ;If BSY set (no chars available), return with al=00
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000028DD 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000028DF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   216 000028E0 FEC8                <1>     dec al  ;Set al to -1 if char available
   217                              <1>     return  ;Exit
    13                              <2> %%_ret:
    14 000028E2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   218                              <1> clearbuffDoFunc:   ;ah = 0Ch
   219                              <1> ;Clears any buffers and issues a console read command (the command in al)
   220                              <1> ;If al neq 01, 06 (dl neq -1), 07, 08, 0A, then set al = 0 and return
   221 000028E3 50                  <1>     push rax
   222 000028E4 52                  <1>     push rdx
   223 000028E5 31DB                <1>     xor ebx, ebx    ;Handle 0, STDIN
   224 000028E7 E895010000          <1>     call getCharDevSFT  ;Get sft ptr for device
   225 000028EC 7207                <1>     jc .skipFlush   ;If the handle is closed, attempt a read regardless
   226 000028EE B404                <1>     mov ah, 04h ;Flush input buffers
   227 000028F0 E80DFCFFFF          <1>     call mainCharIO ;Remember sft ptr in rsi
   228                              <1> .skipFlush:
   229 000028F5 5A                  <1>     pop rdx
   230 000028F6 58                  <1>     pop rax
   231 000028F7 88C4                <1>     mov ah, al  ;Move function number into ah
   232 000028F9 3C06                <1>     cmp al, 06h ;Special case (check if dl == FFh)
   233 000028FB 7507                <1>     jne .others
   234 000028FD 80FAFF              <1>     cmp dl, 0FFh ;Is the char invalid?
   235 00002900 7412                <1>     jz .bad ;Yes, exit
   236 00002902 EB13                <1>     jmp short .callFunction ;Else, call function in ah
   237                              <1> .others:
   238 00002904 3C01                <1>     cmp al, 01h
   239 00002906 740F                <1>     je .callFunction
   240 00002908 3C07                <1>     cmp al, 07h
   241 0000290A 740B                <1>     je .callFunction
   242 0000290C 3C08                <1>     cmp al, 08h
   243 0000290E 7407                <1>     je .callFunction
   244 00002910 3C0A                <1>     cmp al, 0Ah
   245 00002912 7403                <1>     je .callFunction
   246                              <1> .bad:
   247 00002914 30C0                <1>     xor al, al
   248                              <1>     return
    13                              <2> %%_ret:
    14 00002916 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   249                              <1> .callFunction:
   250 00002917 FA                  <1>     cli ;Prepare to swap stack pointer
   251                              <1>     ;The below address avoids "properly" reentering DOS
   252                              <1>     ;We simply reuse the function dispatch aspect. 
   253                              <1>     ;this means we dont trash the caller's register frame 
   254 00002918 E9CE4C0000          <1>     jmp functionDispatch.charFun0CEP    ;Go to the entry point
   255                              <1> ;------------------------
   256                              <1> ;  Primitive functions  :
   257                              <1> ;------------------------
   258                              <1> swapPrimaryHeader:
   259                              <1> ;Will swap the primary header to the backup or vice-versa, depending on CF. 
   260                              <1> ; CF = NC, write to backup, CF=CY, read from backup
   261 0000291D 56                  <1>     push rsi
   262 0000291E 57                  <1>     push rdi
   263 0000291F 51                  <1>     push rcx
   264 00002920 48B92A000000000000- <1>     mov rcx, ioReqPkt_size
   264 00002929 00                  <1>
   265 0000292A 488D35(C1040000)    <1>     lea rsi, primReqPkt
   266 00002931 488D3D(EA190000)    <1>     lea rdi, bkupReqHdr
   267 00002938 7303                <1>     jnc .read
   268 0000293A 4887F7              <1>     xchg rsi, rdi   ;If carry flag set, swap pointers
   269                              <1> .read:
   270 0000293D F3A4                <1>     rep movsb   ;Swap
   271 0000293F 59                  <1>     pop rcx
   272 00002940 5F                  <1>     pop rdi
   273 00002941 5E                  <1>     pop rsi
   274                              <1>     return
    13                              <2> %%_ret:
    14 00002942 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   275                              <1> outputOnStdout:
   276                              <1> ;Input: al = Char to output
   277                              <1> ;Output: CF=CY, all good
   278 00002943 53                  <1>     push rbx
   279 00002944 BB01000000          <1>     mov ebx, 1  ;STDOUT handle
   280 00002949 E833010000          <1>     call getCharDevSFT  ;Get pointer in rsi
   281 0000294E 7217                <1>     jc .exit
   282 00002950 66F746058000        <1>     test word [rsi + sft.wDeviceInfo], devCharDev
   283 00002956 7411                <1>     jz .notCharDevOrFast  ;If disk or redir device, skip fast check
   284 00002958 488B5E07            <1>     mov rbx, qword [rsi + sft.qPtr] ;Get driver pointer in rbx
   285 0000295C 66F743081000        <1>     test word [rbx + drvHdr.attrib], devDrvFastOut  ;Can we use Int 29?
   286 00002962 7405                <1>     jz .notCharDevOrFast
   287 00002964 CD29                <1>     int 29h ;Fast output
   288                              <1> .exitOk:
   289 00002966 F8                  <1>     clc
   290                              <1> .exit:
   291 00002967 5B                  <1>     pop rbx
   292                              <1>     return
    13                              <2> %%_ret:
    14 00002968 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   293                              <1> .notCharDevOrFast:
   294 00002969 E80A000000          <1>     call outputOnSFT
   295 0000296E 5B                  <1>     pop rbx
   296                              <1>     return
    13                              <2> %%_ret:
    14 0000296F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   297                              <1> 
   298                              <1> outputToHandle:
   299                              <1> ;Char to output must be in al
   300 00002970 E80C010000          <1>     call getCharDevSFT  ;Get SFT pointer in rsi and fall into output on SFT
   301                              <1>     retc    ;Return if carry flag set (bx has invalid pointer)
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002975 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002977 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   302                              <1> outputOnSFT:
   303                              <1> ;Output char in al to SFT in rsi
   304                              <1> ;Waits until device is not busy to send char.
   305                              <1> ;Calls int 28h if device busy
   306 00002978 50                  <1>     push rax
   307 00002979 B403                <1>     mov ah, 03h ;Get output Status (ready to recieve?)
   308 0000297B E882FBFFFF          <1>     call mainCharIO
   309 00002980 58                  <1>     pop rax
   310 00002981 7409                <1>     jz .signalLoop  ;If device not ready, signal waiting 
   311 00002983 B402                <1>     mov ah, 02h ;Output char in al
   312 00002985 E878FBFFFF          <1>     call mainCharIO
   313 0000298A F8                  <1>     clc
   314                              <1>     return
    13                              <2> %%_ret:
    14 0000298B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   315                              <1> .signalLoop:
   316 0000298C E802000000          <1>     call callInt28h
   317 00002991 EBE5                <1>     jmp short outputOnSFT
   318                              <1> 
   319                              <1> callInt28h:
   320                              <1> ;Preserve full state, including "safetocallint28" flag and flags
   321 00002993 9C                  <1>     pushfq
   322 00002994 F605(95040000)FF    <1>     test byte [int28Flag], -1
   323 0000299B 7417                <1>     jz .exit    ;If zero, not safe
   324 0000299D F605(07040000)FF    <1>     test byte [critErrFlag], -1 ;Are we in a critical error situation?
   325 000029A4 750E                <1>     jnz .exit
   326                              <1> ;Preserve stack alignment!!! Push Qword including and after int28Flag 
   327 000029A6 FF35(95040000)      <1>     push qword [int28Flag] 
   328 000029AC CD28                <1>     int 28h
   329 000029AE 8F05(95040000)      <1>     pop qword [int28Flag]    ;Return original value
   330                              <1> .exit:
   331 000029B4 9D                  <1>     popfq
   332                              <1>     return
    13                              <2> %%_ret:
    14 000029B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   333                              <1> 
   334                              <1> 
   335                              <1> vConCtrlCheck:
   336                              <1> ;Checks if the char at the vConsole needs special processing and enacts
   337                              <1> ; the processing. 
   338                              <1> ;Note, unless it is a special processing char, it only CHECKS the char.
   339                              <1> ; The char then needs to be pulled out of the buffer if it is not special.
   340                              <1> ;
   341                              <1> ;^C will terminate application (either directly on hardware console or vCon)
   342                              <1> ;^S will pause screen processing until another key is processed by vCon input
   343                              <1> ;^P will toggle the printer echo feature of the vConsole
   344                              <1> ;
   345                              <1> ;This is usually STDIN (Handle 0), but can be any file handle 
   346                              <1> ; in ASCII mode when called using 21h/3Fh (Handle Read)
   347                              <1> ;
   348                              <1> ;Output: 
   349                              <1> ;   CF=CY : Error
   350                              <1> ;   CF=NC : ...
   351                              <1> ;   ZF=NZ, AL = Char that was typed, NOT pulled from buffer (i.e not ctrl char)
   352                              <1> ;   ZF=ZY, No char to read, device busy (nothing buffered)
   353 000029B6 E829010000          <1>     call checkBreak ;Check if there is a ^C on CON
   354 000029BB 53                  <1>     push rbx
   355 000029BC 31DB                <1>     xor ebx, ebx    ;Get STDIN handle in rsi
   356 000029BE E8BE000000          <1>     call getCharDevSFT
   357 000029C3 5B                  <1>     pop rbx
   358                              <1>     retc    ;Return if CF=CY
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000029C4 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000029C6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   359 000029C7 B401                <1>     mov ah, 01  ;Non destructively read CON
   360 000029C9 E834FBFFFF          <1>     call mainCharIO
   361 000029CE 74C3                <1>     jz callInt28h   ;If ZF=ZE, BUSY set, no char in al, return thru Int 28h
   362                              <1>     ;Check if we have a ^C, ^S or a ^P to process as needed
   363 000029D0 3C13                <1>     cmp al, DC3 ;^S ?
   364 000029D2 750C                <1>     jne .checkPrintOrExit    ;Nope, check ^P or ^C?
   365 000029D4 30E4                <1>     xor ah, ah  ;Pull ^S out of the device buffer
   366 000029D6 E827FBFFFF          <1>     call mainCharIO
   367 000029DB E963000000          <1>     jmp .waitNextChar  ;Pause processing until char pressed again!
   368                              <1> .checkPrintOrExit:
   369 000029E0 3C10                <1>     cmp al, DLE ;Do we have ^P?
   370 000029E2 7468                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   371 000029E4 3C03                <1>     cmp al, ETX ;Do we have ^C?
   372 000029E6 7464                <1>     je .readCharNoWait    ;Yes, pull it from the buffer
   373                              <1> ;We dont have ^S, ^P or ^C, no need for extra processing. Return with ZF=NZ!
   374                              <1>     return 
    13                              <2> %%_ret:
    14 000029E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   375                              <1> .printToggle:
   376 000029E9 F615(CF030000)      <1>     not byte [printEcho]    ;Compliment the flag.
   377 000029EF 53                  <1>     push rbx
   378 000029F0 BB04000000          <1>     mov ebx, 4  ;PRN handle
   379 000029F5 E887000000          <1>     call getCharDevSFT  ;Get device SFT in rsi here
   380 000029FA 5B                  <1>     pop rbx
   381                              <1>     retc    ;If CF=CY, exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000029FB 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000029FD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   382 000029FE 57                  <1>     push rdi
   383 000029FF 4889F7              <1>     mov rdi, rsi    ;Move SFT pointer into rdi
   384 00002A02 66F747050008        <1>     test word [rdi + sft.wDeviceInfo], charDevNetSpool  ;Check if net spooler
   385 00002A08 741D                <1>     jz .notNet
   386 00002A0A 50                  <1>     push rax
   387 00002A0B B826110000          <1>     mov eax, 1126h  ;Network redirector! Toggle Remote Printer Echo!
   388 00002A10 CD2F                <1>     int 2Fh
   389 00002A12 58                  <1>     pop rax
   390 00002A13 7312                <1>     jnc .notNet  ;If returned not Carry, all ok, now echo char as needed 
   391                              <1>     ;If something went wrong, turn off echo
   392 00002A15 C605(CF030000)00    <1>     mov byte [printEcho], 0 ;Turn off local echo byte
   393 00002A1C 50                  <1>     push rax
   394 00002A1D B824110000          <1>     mov eax, 1124h  ;Net redir! Turn off Remote Printer!
   395 00002A22 CD2F                <1>     int 2Fh
   396 00002A24 58                  <1>     pop rax
   397 00002A25 EB15                <1>     jmp short .printExit    ;Skip the following for local printers
   398                              <1> .notNet:
   399                              <1> ;Here depending on whether the print Echo flag is on, we transmit either 
   400                              <1> ; 0Dh or 0Eh
   401 00002A27 803D(CF030000)00    <1>     cmp byte [printEcho], 00
   402 00002A2E 7507                <1>     jnz .echoOn
   403 00002A30 E82DFCFFFF          <1>     call closeSFT   ;Reduce open count for SFT in rdi
   404 00002A35 EB05                <1>     jmp short .printExit
   405                              <1> .echoOn:
   406 00002A37 E81DFCFFFF          <1>     call openSFT    ;Increase open count for SFT in rdi
   407                              <1> .printExit:
   408 00002A3C 5F                  <1>     pop rdi
   409                              <1>     return
    13                              <2> %%_ret:
    14 00002A3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   410                              <1> .sigNextChar:   ;Signal Int 28h before waiting for the next char
   411 00002A3E E850FFFFFF          <1>     call callInt28h
   412                              <1> .waitNextChar:   ;Here get next char
   413 00002A43 B401                <1>     mov ah, 01h ;ND read
   414 00002A45 E8B8FAFFFF          <1>     call mainCharIO
   415 00002A4A 74F2                <1>     jz .sigNextChar    ;IF device busy, Int 28h and keep waiting
   416                              <1> .readCharNoWait:    ;Pull the non ^S control char from the buffer
   417 00002A4C 53                  <1>     push rbx
   418 00002A4D 31DB                <1>     xor ebx, ebx
   419 00002A4F E82D000000          <1>     call getCharDevSFT
   420 00002A54 5B                  <1>     pop rbx
   421                              <1>     retc    ;Return if STDIN closed
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002A55 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002A57 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   422 00002A58 30E4                <1>     xor ah, ah  ;Pull char out of buffer
   423 00002A5A E8A3FAFFFF          <1>     call mainCharIO
   424 00002A5F 3C10                <1>     cmp al, DLE ;Was char ^P, printer echo?
   425 00002A61 7514                <1>     jnz .checkBreak2
   426 00002A63 803D(141A0000)00    <1>     cmp byte [noPrintTog], 00   ;Should we toggle?
   427 00002A6A 0F8479FFFFFF        <1>     jz .printToggle ;If 0, toggle!
   428 00002A70 C605(141A0000)00    <1>     mov byte [noPrintTog], 00   ;Else, end extended char read!
   429                              <1> .checkBreak2:
   430 00002A77 3C03                <1>     cmp al, ETX
   431                              <1>     retne   ;Return if not equal, al has char and ZF=NZ
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002A79 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002A7B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   432 00002A7C E9C13E0000          <1>     jmp ctrlBreakHdlr   ;If it is ^C, error exit!
   433                              <1> 
   434                              <1> 
   435                              <1> getCharDevSFT:
   436                              <1> ;Gets the appropriate SFT pointer in rsi for the device in bx
   437                              <1> ;Input: bx = zero extended handle number
   438                              <1> ;Output: CF=NC => rsi = SFT pointer for device
   439                              <1> ;        CF=CY => al = Error code, abort operation
   440 00002A81 F605(94040000)FF    <1>     test byte [vConDrvSwp], -1  ;Has this device been swapped?
   441 00002A88 750B                <1>     jnz .swap ;If any bits are set, assume swapped (thus working SFT set)
   442                              <1> .getSFT:
   443 00002A8A 57                  <1>     push rdi
   444 00002A8B E88F260000          <1>     call derefSFTPtr   ;Get device ptr in rdi (or error in al)
   445 00002A90 4889FE              <1>     mov rsi, rdi
   446 00002A93 5F                  <1>     pop rdi
   447                              <1>     return  ;Return with CF set
    13                              <2> %%_ret:
    14 00002A94 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   448                              <1> .swap:
   449                              <1> ;workingSFT is only set for CON calls
   450 00002A95 81FB01000000        <1>     cmp ebx, 1  ;bx is zero extended anyway
   451 00002A9B 77ED                <1>     ja .getSFT  ;vConAlt is only for bx=0 (STDIN)
   452 00002A9D 488B35(22070000)    <1>     mov rsi, qword [vConAltSFTPtr]  ;Get the alternate CON device SFT pointer
   453 00002AA4 F8                  <1>     clc
   454                              <1>     return
    13                              <2> %%_ret:
    14 00002AA5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   455                              <1> 
   456                              <1> ;------------------------
   457                              <1> ;   Utility functions   :
   458                              <1> ;------------------------
   459                              <1> printCaretASCII:
   460                              <1> ;Input: al = Char to print with a caret
   461                              <1> ;Output: On STDOUT, print char with caret IF valid caret char
   462                              <1> ;First check if the char should be careted, and then print normally if so
   463 00002AA6 3C20                <1>     cmp al, asciiCaret  ;Is this char to be printed normally?
   464 00002AA8 0F8341FCFFFF        <1>     jae charOut_B.in
   465 00002AAE 3C09                <1>     cmp al, TAB
   466 00002AB0 0F8439FCFFFF        <1>     je charOut_B.in
   467 00002AB6 3C15                <1>     cmp al, NAK
   468 00002AB8 0F8431FCFFFF        <1>     je charOut_B.in
   469 00002ABE 3C14                <1>     cmp al, DC4
   470 00002AC0 0F8429FCFFFF        <1>     je charOut_B.in
   471 00002AC6 50                  <1>     push rax
   472 00002AC7 B05E                <1>     mov al, "^" ;Get caret in place
   473 00002AC9 E821FCFFFF          <1>     call charOut_B.in
   474 00002ACE 58                  <1>     pop rax
   475 00002ACF 0440                <1>     add al, "@" ;Turn into an ASCII Char
   476 00002AD1 E919FCFFFF          <1>     jmp charOut_B.in  ;Now print the char in al and return
   477                              <1> printCRLF:
   478 00002AD6 B00D                <1>     mov al, CR
   479 00002AD8 E812FCFFFF          <1>     call charOut_B.in
   480 00002ADD B00A                <1>     mov al, LF
   481 00002ADF E90BFCFFFF          <1>     jmp charOut_B.in
   482                              <1> 
   483                              <1> checkBreak:
   484                              <1> ;Reads bytes from CON if there are any bytes to read and 
   485                              <1> ; if it is a ^C or CTRL+BREAK, then exit via Int 23h
   486 00002AE4 803D(08040000)01    <1>     cmp byte [inDOS], 1
   487                              <1>     retne    ;Return if not inDOS only once
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002AEB 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002AED C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   488                              <1> ;Returns in al the keystroke that is available IF one is available
   489                              <1> ; or al=0 if no keystroke available
   490 00002AEE 53                  <1>     push rbx
   491 00002AEF 56                  <1>     push rsi
   492 00002AF0 488B35(53000000)    <1>     mov rsi, qword [vConPtr] ;Get pointer to Console device driver
   493                              <1>     ;Place command code and a zero status word at the same time
   494 00002AF7 C705(ED040000)0500- <1>     mov dword [critReqPkt + ndInNoWaitPkt.cmdcde], drvNONDESTREAD
   494 00002AFF 0000                <1>
   495                              <1>     ;Place the packet size in the hdrlen field
   496 00002B01 C605(EB040000)0E    <1>     mov byte [critReqPkt + ndInNoWaitPkt.hdrlen], ndInNoWaitPkt_size
   497 00002B08 488D1D(EB040000)    <1>     lea rbx, critReqPkt
   498 00002B0F E8A5420000          <1>     call goDriver   ;Called with rsi and rbx with appropriate pointers
   499                              <1>     ;Check if the busy bit is set (No keystroke available)
   500 00002B14 66F705(EE040000)00- <1>     test word [critReqPkt + ndInNoWaitPkt.status], drvBsyStatus
   500 00002B1C 02                  <1>
   501 00002B1D 7405                <1>     jz .charFound
   502                              <1> .exit:
   503 00002B1F 30C0                <1>     xor al, al
   504 00002B21 5E                  <1>     pop rsi
   505 00002B22 5B                  <1>     pop rbx
   506                              <1>     return
    13                              <2> %%_ret:
    14 00002B23 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   507                              <1> .charFound:
   508                              <1> ;Keystroke available, proceed
   509 00002B24 8A05(F8040000)      <1>     mov al, byte [critReqPkt + ndInNoWaitPkt.retbyt]    ;Get char
   510 00002B2A 3C03                <1>     cmp al, ETX ;BREAK/^C =ASCII 03h
   511 00002B2C 75F1                <1>     jne .exit   ;If not equal exit
   512                              <1> ;Now we pull the char out of the buffer
   513 00002B2E C705(ED040000)0400- <1>     mov dword [critReqPkt + ioReqPkt.cmdcde], drvREAD ;Read command
   513 00002B36 0000                <1>
   514 00002B38 C605(EB040000)2A    <1>     mov byte [critReqPkt + ioReqPkt.hdrlen], ioReqPkt_size  ;Place packet size
   515                              <1>     ;Place pointers and number of chars
   516 00002B3F C705(01050000)0100- <1>     mov dword [critReqPkt + ioReqPkt.tfrlen], 1 ;One char to be read
   516 00002B47 0000                <1>
   517                              <1>     ;Use media byte space as the char buffer (to avoid issues & save a byte)
   518 00002B49 488D05(F8040000)    <1>     lea rax, qword [critReqPkt + ioReqPkt.medesc]
   519 00002B50 488905(F9040000)    <1>     mov qword [critReqPkt + ioReqPkt.bufptr], rax
   520 00002B57 E85D420000          <1>     call goDriver   ;RSI and RBX as before
   521 00002B5C E9E13D0000          <1>     jmp ctrlBreakHdlr   ;Read the char and jump to ^C handler
   522                              <1> 
   523                              <1> vConSwapDriver:
   524                              <1> ;Sets up the vCon to use the alternative SFT pointer
   525 00002B61 57                  <1>     push rdi
   526 00002B62 C605(94040000)01    <1>     mov byte [vConDrvSwp], 1    ;Set to use alternative driver
   527 00002B69 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Get current SFT pointer
   528 00002B70 48893D(22070000)    <1>     mov qword [vConAltSFTPtr], rdi ;Save the SFT ptr in var
   529 00002B77 5F                  <1>     pop rdi
   530                              <1>     return
    13                              <2> %%_ret:
    14 00002B78 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> 
   532                              <1> vConRetDriver:
   533                              <1> ;Returns the original driver (sets flag down)
   534 00002B79 C605(94040000)00    <1>     mov byte [vConDrvSwp], 0
   535                              <1>     return
    13                              <2> %%_ret:
    14 00002B80 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   536                              <1> 
   537                              <1> ;--------------------------------------------------
   538                              <1> ;      Main Keyboard Buffered Input Function      :
   539                              <1> ;--------------------------------------------------
   540                              <1> buffCharInput_BE:  ;ah = 0Ah
   541                              <1> ;Buffer pointer in rdx
   542                              <1> ; byte [rdx + 0], buffer length
   543                              <1> ; byte [rdx + 1], number of chars in buffer
   544                              <1> ; byte [rdx + 2], buffer start
   545                              <1> ; If [rdx+2 + [rdx + 1]] == CR => Enable Function Edit keys
   546                              <1> ;Register use
   547                              <1> ; dh = Char offset in internal buffer
   548                              <1> ; dl = Buffer length
   549                              <1> ; bh = Char offset in user buffer
   550                              <1> ; bl = Number of chars already in the buffer
   551                              <1> ; rdi = Internal buffer
   552                              <1> ; rsi = User buffer
   553 00002B81 4889D6              <1>     mov rsi, rdx
   554 00002B84 66AD                <1>     lodsw   ;Get buffer metadata in ax
   555 00002B86 84C0                <1>     test al, al
   556                              <1>     retz    ;If buffer length zero, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002B88 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002B8A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   557 00002B8B 0FB6DC              <1>     movzx ebx, ah   ;Move buffer number of chars in buffer into ebx
   558 00002B8E 38D8                <1>     cmp al, bl  ;Compare the buffer length to the number of chars in the buffer
   559 00002B90 7606                <1>     jbe .avoidcheck
   560 00002B92 803C1E0D            <1>     cmp byte [rsi + rbx], CR     ;zero extended through rbx
   561 00002B96 7402                <1>     je .functionKeyOk
   562                              <1> .avoidcheck:
   563 00002B98 30DB                <1>     xor bl, bl  ;Reset number of chars in buffer to 0
   564                              <1> .functionKeyOk:
   565 00002B9A 0FB6D0              <1>     movzx edx, al  ;Move the buffer length to dl to use as buffer counter
   566 00002B9D FECA                <1>     dec dl  ;One less char to make space for terminating 0Dh
   567                              <1> .breakEP:
   568 00002B9F 8A05(CC020000)      <1>     mov al, byte [vConCursPos]  ;Set the current buffer cnt to curs. pos.
   569 00002BA5 8805(CD020000)      <1>     mov byte [vConCurCnt], al
   570 00002BAB 56                  <1>     push rsi    ;Push user buffer address
   571 00002BAC 488D3D(CE020000)    <1>     lea rdi, vConBuffer
   572 00002BB3 C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Set insert mode off by default
   573 00002BBA 30F6                <1>     xor dh, dh  ;Ensure these are 0 when coming back from break!
   574 00002BBC 30FF                <1>     xor bh, bh  ;They should be... earmark
   575 00002BBE E8A4FCFFFF          <1>     call charIn_B   ;Get a char in AL from 21/08h
   576 00002BC3 3C0A                <1>     cmp al, LF
   577 00002BC5 7505                <1>     jne .checkControlChars
   578                              <1> .mainLoop:
   579 00002BC7 E89BFCFFFF          <1>     call charIn_B
   580                              <1> .checkControlChars:
   581 00002BCC 3C06                <1>     cmp al, ACK
   582 00002BCE 74F7                <1>     je .mainLoop   ;Get another char
   583 00002BD0 3A0564D4FFFF        <1>     cmp al, byte [extESC]   ;Is it our ESC key?
   584 00002BD6 0F842E010000        <1>     je .escape
   585 00002BDC 3C7F                <1>     cmp al, DEL
   586 00002BDE 0F848F000000        <1>     je .delete
   587 00002BE4 3C08                <1>     cmp al, BSP
   588 00002BE6 0F8487000000        <1>     je .delete
   589 00002BEC 3C17                <1>     cmp al, ETB
   590                              <1>     ;Add space for patched jump instructions
   591 00002BEE 9090909090          <1>     db 5 dup (90h)  ;NOP
   592 00002BF3 3C15                <1>     cmp al, NAK
   593 00002BF5 9090909090          <1>     db 5 dup (90h)
   594 00002BFA 3C0D                <1>     cmp al, CR
   595 00002BFC 7452                <1>     je .carriageReturn
   596 00002BFE 3C0A                <1>     cmp al, LF
   597 00002C00 7467                <1>     je .lineFeed
   598 00002C02 3A0533D4FFFF        <1>     cmp al, byte [extBreak] ;Is this our Break key?
   599 00002C08 7429                <1>     je .break
   600                              <1> .checkIfCanInsert:
   601 00002C0A 38D6                <1>     cmp dh, dl
   602 00002C0C 731C                <1>     jae .bufOflw
   603 00002C0E AA                  <1>     stosb   ;Store the byte and increment rdi!
   604 00002C0F FEC6                <1>     inc dh  ;Inc the count of bytes in the buffer
   605 00002C11 E890FEFFFF          <1>     call printCaretASCII    ;Print the char with a caret if needed or as is!
   606 00002C16 803D(03070000)00    <1>     cmp byte [vConInsert], 00h  ;Are we in insert mode? 0 = No, 1 = Yes
   607 00002C1D 75A8                <1>     jne .mainLoop
   608                              <1>     ;IF not in insert mode, we fall here
   609                              <1>     ;Here we follow the chars in the user buffer so we can overwrite 
   610                              <1>     ; or insert chars if needed.
   611 00002C1F 38DF                <1>     cmp bh, bl  ;IS the number of chars in the buffer equal to the number placed
   612 00002C21 73A4                <1>     jae .mainLoop  ;If geq dont follow in user buffer
   613 00002C23 48FFC6              <1>     inc rsi ;Otherwise, goto the next char in the user buffer
   614 00002C26 FEC7                <1>     inc bh  ;Incrememnt the counter of the char in user buffer we now point at
   615 00002C28 EB9D                <1>     jmp short .mainLoop
   616                              <1> .bufOflw:
   617                              <1> ;Buffer overflow
   618 00002C2A B007                <1>     mov al, BEL ;Sound the bell
   619 00002C2C E8BEFAFFFF          <1>     call charOut_B.in   ;Call this with char in al
   620 00002C31 EB94                <1>     jmp short .mainLoop
   621                              <1> .break:
   622                              <1> ;Break, Place a "\", and do a CRLF
   623 00002C33 B05C                <1>     mov al, "\"
   624 00002C35 E8B5FAFFFF          <1>     call charOut_B.in
   625 00002C3A 5E                  <1>     pop rsi ;Realign stack
   626                              <1> .breakAlt:  ;Enter with stack aligned, print tab aligned CRLF
   627 00002C3B E896FEFFFF          <1>     call printCRLF
   628                              <1>     ;Align to next tabstop
   629 00002C40 8A05(CD020000)      <1>     mov al, byte [vConCurCnt]  ;Get without rounding!!
   630 00002C46 E84DFBFFFF          <1>     call charOut_B.outputATab
   631 00002C4B E94FFFFFFF          <1>     jmp .breakEP
   632                              <1> .carriageReturn:
   633 00002C50 AA                  <1>     stosb
   634 00002C51 E899FAFFFF          <1>     call charOut_B.in
   635 00002C56 5F                  <1>     pop rdi ;User buffer address was pushed 
   636 00002C57 8877FF              <1>     mov byte [rdi - 1], dh  ;Save count of chars stored
   637 00002C5A FEC6                <1>     inc dh  ;Inc count of chars by one (add the terminating CR)
   638                              <1> .carriageReturnAlt: ;EP without affecting buffer counts
   639 00002C5C 488D35(CE020000)    <1>     lea rsi, vConBuffer
   640 00002C63 0FB6CE              <1>     movzx ecx, dh   ;Move chars between buffers now
   641 00002C66 F3A4                <1>     rep movsb  ;If the inc dh cause an overflow, dont copy! 
   642                              <1>     return
    13                              <2> %%_ret:
    14 00002C68 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   643                              <1> .lineFeed:
   644 00002C69 E868FEFFFF          <1>     call printCRLF
   645 00002C6E E954FFFFFF          <1>     jmp .mainLoop
   646                              <1> .delete:
   647 00002C73 E805000000          <1>     call .removeChar
   648 00002C78 E94AFFFFFF          <1>     jmp .mainLoop
   649                              <1> .removeChar:
   650 00002C7D 84F6                <1>     test dh, dh ;Is char count 0?
   651 00002C7F 741C                <1>     jz .normalChar   ;If so, skip going back!
   652 00002C81 E86A000000          <1>     call .vConErase
   653 00002C86 8A07                <1>     mov al, byte [rdi]  ;Get the byte that was just erased
   654 00002C88 3C20                <1>     cmp al, SPC
   655 00002C8A 7311                <1>     jae .normalChar
   656 00002C8C 3C09                <1>     cmp al, TAB
   657 00002C8E 7422                <1>     je .eraTab
   658 00002C90 3C15                <1>     cmp al, NAK
   659 00002C92 7409                <1>     je .normalChar
   660 00002C94 3C14                <1>     cmp al, DC4
   661 00002C96 7405                <1>     je .normalChar
   662 00002C98 E858000000          <1>     call .vConEraseNoDec    ;Else, was not a normal char. Remove caret prefix
   663                              <1> .normalChar:
   664 00002C9D 803D(03070000)00    <1>     cmp byte [vConInsert], 00   ;We in insert mode?
   665                              <1>     retne ;Yes, return
    53                              <2> cret ne
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002CA4 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002CA6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   666 00002CA7 84FF                <1>     test bh, bh ;Beginning of user buffer?
   667                              <1>     retz    ;Yes, return
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002CA9 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002CAB C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   668 00002CAC 48FFCE              <1>     dec rsi ;Else, go back a space in the user buffer
   669 00002CAF FECF                <1>     dec bh
   670                              <1>     return
    13                              <2> %%_ret:
    14 00002CB1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   671                              <1> .eraTab:
   672                              <1> ;Remember, the tab char is placed in the buffer but the vCon has 
   673                              <1> ; up to a tab stop worth of space chars printed
   674 00002CB2 57                  <1>     push rdi
   675 00002CB3 48FFCF              <1>     dec rdi
   676 00002CB6 FD                  <1>     std ;Go backwards
   677 00002CB7 0FB6CE              <1>     movzx ecx, dh    ;Use as counter
   678 00002CBA B020                <1>     mov al, SPC
   679 00002CBC 53                  <1>     push rbx
   680 00002CBD BB07000000          <1>     mov ebx, 7
   681 00002CC2 67E30D              <1>     jecxz .onTabstop
   682                              <1> .scanString:
   683 00002CC5 AE                  <1>     scasb   ;Is rdi pointing to a space or ctrl char? (also dec scasb)
   684 00002CC6 7608                <1>     jbe .notChar    ;No, skip handling
   685 00002CC8 807F0109            <1>     cmp byte [rdi + 1], TAB ;Was the char a tab?
   686 00002CCC 740A                <1>     je .tabChar
   687 00002CCE FECB                <1>     dec bl
   688                              <1> .notChar:
   689 00002CD0 E2F3                <1>     loop .scanString
   690                              <1> .onTabstop:
   691 00002CD2 2A1D(CD020000)      <1>     sub bl, [vConCurCnt]    ;Subtract the current count in internal from bl
   692                              <1> .tabChar:
   693 00002CD8 28F3                <1>     sub bl, dh  ;Same on tabstop
   694 00002CDA 00D9                <1>     add cl, bl
   695 00002CDC 80E107              <1>     and cl, 7
   696 00002CDF 5B                  <1>     pop rbx
   697 00002CE0 5F                  <1>     pop rdi
   698 00002CE1 FC                  <1>     cld
   699 00002CE2 74B9                <1>     jz .normalChar
   700                              <1>     ;Now erase all the spaces placed on the vCon
   701                              <1> .vConDelTab:
   702 00002CE4 E80C000000          <1>     call .vConEraseNoDec
   703 00002CE9 E2F9                <1>     loop .vConDelTab
   704 00002CEB E9ADFFFFFF          <1>     jmp .normalChar
   705                              <1> .vConErase:
   706                              <1> ;Erase the char on the vCon
   707                              <1> ;Return through the output function
   708 00002CF0 48FFCF              <1>     dec rdi ;Go back a space in the 
   709 00002CF3 FECE                <1>     dec dh  ;Decrement char count in the buffer
   710                              <1> .vConEraseNoDec:
   711 00002CF5 B008                <1>     mov al, BSP ;Move cursor back
   712 00002CF7 E8F3F9FFFF          <1>     call charOut_B.in
   713 00002CFC B020                <1>     mov al, SPC ;Replace with a space
   714 00002CFE E8ECF9FFFF          <1>     call charOut_B.in
   715 00002D03 B008                <1>     mov al, BSP ;Move cursor back again
   716 00002D05 E9E5F9FFFF          <1>     jmp charOut_B.in    ;Return to caller through charOut_B return
   717                              <1> .escape:
   718                              <1> ;ESCAPE, meaning null here. This technique allows a user to install
   719                              <1> ; a custom handler to handle the extended ascii keys if they wish, 
   720                              <1> ; including the function keys.
   721 00002D0A FF2522D3FFFF        <1>     jmp [extKeyFunc]    ;Jmp to user customisable extended key handler here
   722                              <1> .f2:
   723 00002D10 E846000000          <1>     call .fCommon2
   724 00002D15 EB0C                <1>     jmp short .fCommon
   725                              <1> .f3:
   726 00002D17 0FB6CB              <1>     movzx ecx, bl  ;Get chars in user buffer
   727 00002D1A 28F9                <1>     sub cl, bh  ;Sub our current position
   728 00002D1C EB05                <1>     jmp short .fCommon
   729                              <1> .f1:
   730 00002D1E B901000000          <1>     mov ecx, 1  ;Get one char
   731                              <1> .fCommon:
   732 00002D23 C605(03070000)00    <1>     mov byte [vConInsert], 0    ;Turn off insert if on
   733 00002D2A 38D6                <1>     cmp dh, dl  ;Are we already at the end of internal buffer?
   734 00002D2C 0F8495FEFFFF        <1>     je .mainLoop
   735 00002D32 38DF                <1>     cmp bh, bl  ;Are we already at the end of user stored string?
   736 00002D34 0F848DFEFFFF        <1>     je .mainLoop
   737                              <1>     ;Else, copy byte by byte, and retain char in al
   738 00002D3A AC                  <1>     lodsb
   739 00002D3B AA                  <1>     stosb
   740 00002D3C E865FDFFFF          <1>     call printCaretASCII    ;Print caret if necessary, else print normal
   741 00002D41 FEC7                <1>     inc bh
   742 00002D43 FEC6                <1>     inc dh
   743 00002D45 E2DC                <1>     loop .fCommon   ;Keep loading until end of string or buffers
   744 00002D47 E97BFEFFFF          <1>     jmp .mainLoop
   745                              <1> .f4:
   746 00002D4C E80A000000          <1>     call .fCommon2
   747 00002D51 4801CE              <1>     add rsi, rcx
   748 00002D54 00CF                <1>     add bh, cl
   749 00002D56 E96CFEFFFF          <1>     jmp .mainLoop
   750                              <1> .fCommon2:
   751 00002D5B E807FBFFFF          <1>     call charIn_B   ;Get a char in al
   752 00002D60 3A05D4D2FFFF        <1>     cmp al, byte [extESC]   ;IS this the escape char?
   753 00002D66 750B                <1>     jne .fnotEscape
   754                              <1>     ;Get another char if they typed escape and force it in the buffer
   755                              <1>     ; Do not return to caller
   756 00002D68 E8FAFAFFFF          <1>     call charIn_B
   757                              <1> .fforceExit:
   758 00002D6D 59                  <1>     pop rcx ;Get original return address from stack
   759 00002D6E E954FEFFFF          <1>     jmp .mainLoop
   760                              <1> .fnotEscape:
   761 00002D73 0FB6CB              <1>     movzx ecx, bl   ;Zero extend to rcx
   762 00002D76 28F9                <1>     sub cl, bh
   763 00002D78 74F3                <1>     jz .fforceExit
   764 00002D7A FFC9                <1>     dec ecx
   765 00002D7C 74EF                <1>     jz .fforceExit
   766 00002D7E 57                  <1>     push rdi
   767 00002D7F 4889F7              <1>     mov rdi, rsi
   768 00002D82 48FFC7              <1>     inc rdi
   769 00002D85 F2AE                <1>     repne scasb ;Search for the char to start printing from
   770 00002D87 5F                  <1>     pop rdi
   771 00002D88 75E3                <1>     jne .fforceExit ;If char not found, return
   772 00002D8A F6D1                <1>     not cl
   773 00002D8C 00D9                <1>     add cl, bl
   774 00002D8E 28F9                <1>     sub cl, bh
   775                              <1>     return
    13                              <2> %%_ret:
    14 00002D90 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   776                              <1> .f5:
   777 00002D91 B040                <1>     mov al, "@"
   778 00002D93 E857F9FFFF          <1>     call charOut_B.in   ;Print the char
   779 00002D98 5F                  <1>     pop rdi ;Get old rsi into rdi and push it anew
   780 00002D99 57                  <1>     push rdi
   781 00002D9A E8BDFEFFFF          <1>     call .carriageReturnAlt ;Enter with og user buffer ptr in rdi
   782 00002D9F 5E                  <1>     pop rsi ;Pop the old user buffer back into rsi
   783 00002DA0 88F3                <1>     mov bl, dh
   784 00002DA2 E994FEFFFF          <1>     jmp .breakAlt
   785                              <1> .f6:
   786                              <1> ;If the user wants to insert a EOF, they can use F6
   787 00002DA7 B01A                <1>     mov al, EOF
   788 00002DA9 E95CFEFFFF          <1>     jmp .checkIfCanInsert
   789                              <1> .f7:
   790                              <1> ;If the user wants to insert a readl ESC char, they can use F7
   791 00002DAE 8A0586D2FFFF        <1>     mov al, byte [extESC]
   792 00002DB4 E951FEFFFF          <1>     jmp .checkIfCanInsert
   793                              <1> .toggleIns:
   794 00002DB9 F615(03070000)      <1>     not byte [vConInsert]   ;Toggle
   795                              <1>     return
    13                              <2> %%_ret:
    14 00002DBF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   796                              <1> .eDel:
   797 00002DC0 38DF                <1>     cmp bh, bl
   798 00002DC2 0F84FFFDFFFF        <1>     je .mainLoop
   799 00002DC8 FEC7                <1>     inc bh
   800 00002DCA 48FFC6              <1>     inc rsi
   801 00002DCD E9F5FDFFFF          <1>     jmp .mainLoop
   802                              <1> 
   803                              <1> editKeys:
   804                              <1> ;Our Default Extended keys handler
   805 00002DD2 E890FAFFFF          <1>     call charIn_B   ;Get the next char in al
   806 00002DD7 B90B000000          <1>     mov ecx, extKeyTbl_len  ;Get number of entries in table
   807 00002DDC 57                  <1>     push rdi    ;Preserve rdi
   808 00002DDD 488D3D58D2FFFF      <1>     lea rdi, extKeyTbl
   809 00002DE4 57                  <1>     push rdi
   810                              <1>     ;Each entry is 3 bytes. 1st byte is char, 2nd word is
   811                              <1>     ; offset of function from extKeyTbl
   812                              <1> .lp:
   813 00002DE5 AE                  <1>     scasb   ;Compare byte 1 to al, inc rdi to point to word offset
   814 00002DE6 740D                <1>     je .charFound
   815 00002DE8 FFC9                <1>     dec ecx ;If this goes to zero, reenter count.
   816 00002DEA 7414                <1>     jz .notInTable
   817 00002DEC 4881C702000000      <1>     add rdi, 2  ;Skip next two bytes
   818 00002DF3 EBF0                <1>     jmp short .lp
   819                              <1> .charFound:
   820 00002DF5 59                  <1>     pop rcx ;Pop back the effective address of the table
   821 00002DF6 480FB73F            <1>     movzx rdi, word [rdi]   ;Get high word into rdi zero extended
   822 00002DFA 4801F9              <1>     add rcx, rdi    ;Add offset from table to table address to get jump addr
   823 00002DFD 5F                  <1>     pop rdi
   824 00002DFE FFE1                <1>     jmp rcx
   825                              <1> .notInTable:
   826 00002E00 59                  <1>     pop rcx ;Realign stack
   827 00002E01 59                  <1>     pop rcx
   828 00002E02 E9C0FDFFFF          <1>     jmp buffCharInput_BE.mainLoop
    40                                  %include "./src/Kernel/FileIO/dtFunc.asm"
     1                              <1> ;Major kernel date time functions and subroutines
     2                              <1> 
     3                              <1> getDate:           ;ah = 2Ah
     4 00002E07 E8A5010000          <1>     call readDateTimeRecord ;Update date if necessary
     5 00002E0C E853440000          <1>     call getUserRegs
     6 00002E11 668B15(8E040000)    <1>     mov dx, word [dayOfMonth]   ;Read as a word to get monthOfYear in dh
     7                              <1> ;    mov dh, byte [monthOfYear]
     8 00002E18 0FB60D(90040000)    <1>     movzx ecx, byte [years]
     9 00002E1F 81C1BC070000        <1>     add ecx, 1980   ;Turn into the year from offset since 1980
    10 00002E25 8A05(93040000)      <1>     mov al, byte [dayOfWeek]
    11 00002E2B 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    12 00002E2F 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    13                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002E33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    14                              <1> setDate:           ;ah = 2Bh
    15                              <1> ;	CX = year (1980-2099)
    16                              <1> ;   DH = month (1-12)
    17                              <1> ;	DL = day (1-31)
    18 00002E34 B0FF                <1>     mov al, -1      ;Default to fail
    19 00002E36 6681E9BC07          <1>     sub cx, 1980    ;Turn into years since 1980
    20                              <1>     retc            ;Return with -1 if cx is below 1980. Avoids going into below.
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00002E3B 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00002E3D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    21 00002E3E E873000000          <1>     call writeDate  ;Sets ax to 0 or -1, cx needs to be offset since 1980
    22                              <1>     return
    13                              <2> %%_ret:
    14 00002E43 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> getTime:           ;ah = 2Ch
    24 00002E44 E868010000          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
    25 00002E49 E816440000          <1>     call getUserRegs
    26 00002E4E 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
    27 00002E55 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
    28 00002E5C 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    29 00002E60 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
    30                              <1>     return  ;al is returned as error code
    13                              <2> %%_ret:
    14 00002E64 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    31                              <1> setTime:           ;ah = 2Dh
    32                              <1> ;   CH = hour (0-23)
    33                              <1> ;	CL = minutes (0-59)
    34                              <1> ;	DH = seconds (0-59)
    35                              <1> ;	DL = hundredths (0-99)
    36 00002E65 80FD17              <1>     cmp ch, 23
    37 00002E68 7749                <1>     ja .exitBad
    38 00002E6A 80F93B              <1>     cmp cl, 59
    39 00002E6D 7744                <1>     ja .exitBad
    40 00002E6F 80FE3B              <1>     cmp dh, 59
    41 00002E72 773F                <1>     ja .exitBad
    42 00002E74 80FA63              <1>     cmp dl, 99
    43 00002E77 773A                <1>     ja .exitBad
    44                              <1> ;Now we read date (updating internal count if necessary)
    45 00002E79 E833010000          <1>     call readDateTimeRecord
    46 00002E7E 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
    47 00002E85 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
    48 00002E8C 668903              <1>     mov word [rbx + clkStruc.dateWord], ax  ;Write CLOCK Record
    49 00002E8F 66894B02            <1>     mov word [rbx + clkStruc.minutes], cx
    50 00002E93 66895304            <1>     mov word [rbx + clkStruc.hseconds], dx
    51 00002E97 B906000000          <1>     mov ecx, 6
    52 00002E9C 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
    53 00002E9F E852420000          <1>     call primReqWriteSetup   ;rbx now points to request header
    54 00002EA4 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
    55 00002EAB E8093F0000          <1>     call goDriver
    56 00002EB0 30C0                <1>     xor al, al
    57                              <1>     return
    13                              <2> %%_ret:
    14 00002EB2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    58                              <1> .exitBad:
    59 00002EB3 B0FF                <1>     mov al, -1
    60                              <1>     return
    13                              <2> %%_ret:
    14 00002EB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    61                              <1> ;------------------------
    62                              <1> ;   Utility functions   :
    63                              <1> ;------------------------
    64                              <1> writeDate:
    65                              <1> ;Input: cx = 00-120 (1980-2099)
    66                              <1> ;       dl = Day    (01-31)
    67                              <1> ;       dh = Month  (01-12)
    68 00002EB6 6681F97800          <1>     cmp cx, 120
    69 00002EBB 0F83ED000000        <1>     jae .exitBad
    70 00002EC1 84F6                <1>     test dh, dh
    71 00002EC3 0F84E5000000        <1>     jz .exitBad
    72 00002EC9 80FE0C              <1>     cmp dh, 12
    73 00002ECC 0F87DC000000        <1>     ja .exitBad
    74 00002ED2 84D2                <1>     test dl, dl
    75 00002ED4 0F84D4000000        <1>     jz .exitBad
    76 00002EDA 80FA1F              <1>     cmp dl, 31
    77 00002EDD 0F87CB000000        <1>     ja .exitBad
    78 00002EE3 668915(8E040000)    <1>     mov word [dayOfMonth], dx   ;Write as a word
    79                              <1>     ;mov byte [monthOfYear], dh
    80 00002EEA 880D(90040000)      <1>     mov byte [years], cl    ;Save the years count
    81 00002EF0 E884010000          <1>     call setDaysInFeb   ;Set days in february this year
    82 00002EF5 80FE02              <1>     cmp dh, 2   ;Are we in Feb?
    83 00002EF8 750C                <1>     jne .notFeb
    84 00002EFA 3A155ED1FFFF        <1>     cmp dl, byte [monthsTbl + 1] ;Compare if we are a bad date?
    85 00002F00 0F87A8000000        <1>     ja .exitBad ;If 29-28 (for example), error!
    86                              <1> .notFeb:
    87 00002F06 88CD                <1>     mov ch, cl ;Get years count in ch
    88 00002F08 C0E902              <1>     shr cl, 2   ;Get the number of years to the current 4 year bunch
    89 00002F0B 80E503              <1>     and ch, 3   ;Get the offset into the current 4 year bunch
    90 00002F0E 0FB6C1              <1>     movzx eax, cl ;Zero extend to eax
    91 00002F11 BBB5050000          <1>     mov ebx, 366+3*365  ;Move number of days in 4 year bunch to ebx
    92 00002F16 F7E3                <1>     mul ebx ;Multiply number of years in 4 year bunch with days in 4 year bunch
    93                              <1>     ;eax has the number of days from 01/01/1980 to 01/01/start of 4 year bunch
    94 00002F18 0FB6CD              <1>     movzx ecx, ch ;Zero extend ch to ecx
    95 00002F1B 67E311              <1>     jecxz .addDay    ;Skip adding years
    96 00002F1E 056E010000          <1>     add eax, 366    ;First add for a leap year
    97                              <1> .addYears:
    98 00002F23 FFC9                <1>     dec ecx
    99 00002F25 67E307              <1>     jecxz .addDay    ;Jump if in year after leap year
   100 00002F28 056D010000          <1>     add eax, 365    ;Add the days in the normal years
   101 00002F2D EBF4                <1>     jmp short .addYears
   102                              <1> .addDay:
   103 00002F2F 89C2                <1>     mov edx, eax    ;Save this number in edx
   104                              <1>     ;Now to add day offset
   105 00002F31 0FB60D(8F040000)    <1>     movzx ecx, byte [monthOfYear]
   106 00002F38 488D351ED1FFFF      <1>     lea rsi, monthsTbl
   107                              <1> .addDaysInMonth:
   108 00002F3F FFC9                <1>     dec ecx ;Turn ecx to a 0 based count and decrement
   109 00002F41 67E308              <1>     jecxz .addMonthOffset
   110 00002F44 AC                  <1>     lodsb   ;Get the number of days in the month in al
   111 00002F45 0FB6C0              <1>     movzx eax, al
   112 00002F48 01C2                <1>     add edx, eax
   113 00002F4A EBF3                <1>     jmp short .addDaysInMonth
   114                              <1> .addMonthOffset:
   115 00002F4C 0FB60D(8E040000)    <1>     movzx ecx, byte [dayOfMonth]
   116 00002F53 FFC9                <1>     dec ecx
   117 00002F55 01CA                <1>     add edx, ecx    ;Add month offset
   118                              <1>     ;edx has the number of days since 01/01/1980
   119 00002F57 668915(91040000)    <1>     mov word [daysOffset], dx   ;Store!
   120                              <1> ;Now read and then write CLOCKrecrd
   121 00002F5E 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   122 00002F65 B906000000          <1>     mov ecx, 6
   123 00002F6A 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   124 00002F6D E88F410000          <1>     call primReqReadSetup   ;rbx now points to request header
   125 00002F72 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   126 00002F79 E83B3E0000          <1>     call goDriver
   127                              <1> ;Now we change daycount and write it back
   128 00002F7E 0FB705(91040000)    <1>     movzx eax, word [daysOffset]    ;Get day offset into eax
   129 00002F85 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   130 00002F8C 668903              <1>     mov word [rbx + clkStruc.dateWord], ax
   131 00002F8F B906000000          <1>     mov ecx, 6
   132 00002F94 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   133 00002F97 E85A410000          <1>     call primReqWriteSetup   ;rbx now points to request header
   134 00002F9C 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   135 00002FA3 E8113E0000          <1>     call goDriver
   136 00002FA8 E8AE000000          <1>     call setDayofWeek
   137                              <1>     return
    13                              <2> %%_ret:
    14 00002FAD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   138                              <1> .exitBad:
   139 00002FAE B0FF                <1>     mov al, -1
   140                              <1>     return
    13                              <2> %%_ret:
    14 00002FB0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   141                              <1> 
   142                              <1> readDateTimeRecord:
   143                              <1> ;Will read the clock using the primary request header
   144                              <1> ;Preserves all regs except eax and flags
   145 00002FB1 53                  <1>     push rbx
   146 00002FB2 51                  <1>     push rcx
   147 00002FB3 52                  <1>     push rdx
   148 00002FB4 56                  <1>     push rsi
   149 00002FB5 55                  <1>     push rbp
   150                              <1> 
   151 00002FB6 66C705(151A0000)00- <1>     mov word [keybTicks], 0 ;Reset ticks as we are gonna read time now
   151 00002FBE 00                  <1>
   152 00002FBF 488D1D(16050000)    <1>     lea rbx, CLOCKrecrd ;Read into clock record
   153 00002FC6 B906000000          <1>     mov ecx, 6      ;Number of bytes to xfr
   154 00002FCB 4831ED              <1>     xor rbp, rbp    ;Tell it we are a chardev
   155                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   156                              <1> ; rbx = Data storage buffer ptr
   157                              <1> ; ecx = Number of sectors to transfer | Number of bytes to xfr, if char dev
   158                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   159 00002FCE E82E410000          <1>     call primReqReadSetup   ;rbx now points to request header
   160 00002FD3 488B35(4B000000)    <1>     mov rsi, qword [clockPtr]   ;Get clock driver pointer
   161 00002FDA E8DA3D0000          <1>     call goDriver
   162 00002FDF 0FB705(16050000)    <1>     movzx eax, word [CLOCKrecrd + clkStruc.dateWord]
   163                              <1> ;Here we have:  ax = Days since 1/1/1980
   164                              <1> ;Updates the internal date fields
   165                              <1> ;Internal time fields are in the clock record
   166                              <1> ;So now we check if the number of days since 1980 are the same.
   167                              <1> ;If so, we can skip updating.
   168 00002FE6 663B05(91040000)    <1>     cmp ax, word [daysOffset]
   169 00002FED 7466                <1>     je .exit    ;Return if equal
   170 00002FEF 3D36AB0000          <1>     cmp eax, 365*120 + 25 + 5  ;Number of days until max date, 31/12/2099
   171 00002FF4 735F                <1>     jnb .exit  ;If it is equal or above (implying we are past max date), exit
   172 00002FF6 668905(91040000)    <1>     mov word [daysOffset], ax   ;Save this new offset
   173                              <1>     ;Now want to update years, month and day fields
   174                              <1>     ;ax has the number of days since 01/01/1980
   175                              <1>     ;Get days in a 4 year period
   176 00002FFD BBB5050000          <1>     mov ebx, 365*4 + 1
   177 00003002 31D2                <1>     xor edx, edx
   178 00003004 89D1                <1>     mov ecx, edx  ;Zero ecx
   179 00003006 F7F3                <1>     div ebx ;Divide # of days since 01/01/1980 into 4 year bunches
   180                              <1>     ;eax has # of 4 year bunches elapsed since 01/01/1980
   181                              <1>     ;edx has offset into current 4 year bunch
   182 00003008 BB6E010000          <1>     mov ebx, 366    ;Number of days in a leap year
   183 0000300D 39DA                <1>     cmp edx, ebx    ;Are we in the first year of this bunch? (The leap year)
   184 0000300F 7210                <1>     jb .foundBunch
   185 00003011 29DA                <1>     sub edx, ebx    ;Subtract edx to hone in on the year we are in
   186 00003013 FFC1                <1>     inc ecx
   187 00003015 FFCB                <1>     dec ebx ;Number of days in a normal year
   188                              <1> .findBunch:
   189 00003017 39DA                <1>     cmp edx, ebx
   190 00003019 7206                <1>     jb .foundBunch
   191 0000301B 29DA                <1>     sub edx, ebx
   192 0000301D FFC1                <1>     inc ecx
   193 0000301F EBF6                <1>     jmp short .findBunch
   194                              <1> .foundBunch:
   195                              <1>     ;If ecx = 0, february has 29 days!
   196                              <1>     ;eax has number of four year bunches elapsed since 1980
   197 00003021 C1E002              <1>     shl eax, 2  ;Multiply by 4 to get # of years to start of four year bunch
   198 00003024 01C1                <1>     add ecx, eax    ;Add # of years offset in 4 year bunch
   199                              <1>     ;ecx now has the number of years since 1980
   200 00003026 E84E000000          <1>     call setDaysInFeb   ;Return in rax the # of days in feb
   201                              <1> ;edx has number of days into the year we are in
   202                              <1> ;eax has number of days in Feb for this year
   203 0000302B 488D352BD0FFFF      <1>     lea rsi, monthsTbl
   204 00003032 31C9                <1>     xor ecx, ecx    ;Use as month counter
   205                              <1> .monthSearch:
   206 00003034 FFC1                <1>     inc ecx ;Start from 1
   207 00003036 AC                  <1>     lodsb   ;Get value in al and inc rsi
   208 00003037 0FB6C0              <1>     movzx eax, al   ;Zero extend number of days in month
   209 0000303A 39C2                <1>     cmp edx, eax
   210 0000303C 7204                <1>     jb .monthFound
   211 0000303E 29C2                <1>     sub edx, eax  ;Reduce the number of days by the number of days in the month
   212 00003040 EBF2                <1>     jmp short .monthSearch
   213                              <1> .monthFound:
   214                              <1>     ;cl has the month (01h-0Ch)
   215                              <1>     ;dl has the day of the month - 1
   216 00003042 FFC2                <1>     inc edx
   217 00003044 880D(8F040000)      <1>     mov byte [monthOfYear], cl
   218 0000304A 8815(8E040000)      <1>     mov byte [dayOfMonth], dl
   219 00003050 E806000000          <1>     call setDayofWeek
   220                              <1> .exit:
   221 00003055 5D                  <1>     pop rbp
   222 00003056 5E                  <1>     pop rsi
   223 00003057 5A                  <1>     pop rdx
   224 00003058 59                  <1>     pop rcx
   225 00003059 5B                  <1>     pop rbx
   226                              <1>     return  ;Return with ZF is date set, or same day
    13                              <2> %%_ret:
    14 0000305A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   227                              <1> 
   228                              <1> setDayofWeek:
   229                              <1> ;Sets in the variable the day of the week. 0 = Sunday, 6 = Saturday
   230 0000305B 0FB705(91040000)    <1>     movzx eax, word [daysOffset]   ;Get the offset of days since 1/1/1980
   231 00003062 0502000000          <1>     add eax, 2   ;1/1/1980 was on a Tuesday so shift up by two
   232                              <1> ;Take Modulo 7. 7 is non base 2 number so divide instead of anding
   233 00003067 31D2                <1>     xor edx, edx
   234 00003069 B907000000          <1>     mov ecx, 7   
   235 0000306E F7F1                <1>     div ecx  ;Get remainder in dl
   236 00003070 8815(93040000)      <1>     mov byte [dayOfWeek], dl
   237                              <1> ;Set ZF to indicate all ok
   238 00003076 31C0                <1>     xor eax, eax
   239                              <1>     return
    13                              <2> %%_ret:
    14 00003078 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   240                              <1> 
   241                              <1> setDaysInFeb:   ;Int 2Fh AX = 121Bh, Set days in february
   242                              <1> ;Every fourth year has an extra day in feb (!! 2100 exception!!)
   243                              <1> ;Input: cl = Year - 1980
   244                              <1> ;Output: al = Number of days in February
   245 00003079 880D(90040000)      <1>     mov byte [years], cl    ;Save this figure
   246 0000307F F6C103              <1>     test cl, 3   ;Every fourth year, the year is 0
   247 00003082 51                  <1>     push rcx
   248 00003083 57                  <1>     push rdi
   249 00003084 B81C000000          <1>     mov eax, 28  ;Usual days in february
   250 00003089 B91D000000          <1>     mov ecx, 29  ;Leap year days in february
   251 0000308E 0F44C1              <1>     cmovz eax, ecx  ;If this is the case move 29 into eax
   252 00003091 488D3DC6CFFFFF      <1>     lea rdi, qword [monthsTbl + 1]  ;Get second entry in table (Feb is month 2)
   253 00003098 AA                  <1>     stosb   ;Store the word in rdi
   254 00003099 5F                  <1>     pop rdi
   255 0000309A 59                  <1>     pop rcx
   256                              <1>     return
    13                              <2> %%_ret:
    14 0000309B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   257                              <1> 
   258                              <1> getDirDTwords:
   259                              <1> ;Returns the Directory format DT words in eax from the data in the SDA.
   260                              <1> ; High word of eax = Date
   261                              <1> ; Low word of eax = Time
   262                              <1> ; Thus: eax[0:4] = Seconds/2, a value in [0,...,29]
   263                              <1> ;       eax[5:10] = Minutes, a value in [0,...,59] 
   264                              <1> ;       eax[11:15] = Hours, a value in [0,...,23]
   265                              <1> 
   266                              <1> ;       eax[16:20] = Day of the month, a value in [0,...,31]
   267                              <1> ;       eax[21:24] = Month of the year, a value in [0,...,12]
   268                              <1> ;       eax[25:31] = Number of years since 1980, a value in [0,...,127]
   269                              <1> ;Preserves all registers except eax
   270 0000309C 53                  <1>     push rbx
   271 0000309D 0FB61D(1B050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.seconds]
   272 000030A4 D1EB                <1>     shr ebx, 1  ;Divide the number by 2
   273 000030A6 89D8                <1>     mov eax, ebx
   274 000030A8 0FB61D(18050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.minutes] 
   275 000030AF C1E305              <1>     shl ebx, 5
   276 000030B2 09D8                <1>     or eax, ebx
   277 000030B4 0FB61D(19050000)    <1>     movzx ebx, byte [CLOCKrecrd + clkStruc.hours]
   278 000030BB C1E30B              <1>     shl ebx, 11
   279 000030BE 09D8                <1>     or eax, ebx
   280 000030C0 0FB61D(8E040000)    <1>     movzx ebx, byte [dayOfMonth]
   281 000030C7 C1E310              <1>     shl ebx, 16
   282 000030CA 09D8                <1>     or eax, ebx
   283 000030CC 0FB61D(8F040000)    <1>     movzx ebx, byte [monthOfYear]
   284 000030D3 C1E315              <1>     shl ebx, 21
   285 000030D6 09D8                <1>     or eax, ebx
   286 000030D8 0FB61D(90040000)    <1>     movzx ebx, byte [years]
   287 000030DF C1E319              <1>     shl ebx, 25
   288 000030E2 09D8                <1>     or eax, ebx
   289 000030E4 5B                  <1>     pop rbx
   290                              <1>     return
    13                              <2> %%_ret:
    14 000030E5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   291                              <1> getDateAndTimeOld:  ;Int 2Fh AX=120Dh
   292                              <1> ;Returns edx = time
   293                              <1> ;        eax = date
   294                              <1> ; Formally ax and dx but we clear the upper words
   295 000030E6 E8C6FEFFFF          <1>     call readDateTimeRecord
   296 000030EB E8ACFFFFFF          <1>     call getDirDTwords  ;Get date dword
   297 000030F0 31D2                <1>     xor edx, edx
   298 000030F2 6689C2              <1>     mov dx, ax  ;Save time
   299 000030F5 C1E810              <1>     shr eax, 10h    ;Get date into rax
   300                              <1>     return
    13                              <2> %%_ret:
    14 000030F8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    41                                  %include "./src/Kernel/FileIO/fcbFunc.asm"
     1                              <1> ;FCB functions.
     2                              <1> ;FCBs may only be generally used for particular uses. This is planned
     3                              <1> ; to be extended later.
     4                              <1> 
     5                              <1> ;The following functions ARE currently supported:
     6                              <1> ;   deleteFileFCB       (to allow for easy wildcard deletion)
     7                              <1> ;   renameFileFCB       (to allow for easy wildcard renaming)
     8                              <1> ;   parseFilename       (I mean, this function is useful anyway)
     9                              <1> ;   getFileSizeFCB      (sets the randRecrd field rounded up for file size)
    10                              <1> ;   findFirstFileFCB    (allows easy access to the file directory data)
    11                              <1> ;   findNextFileFCB     (ditto the above)
    12                              <1> 
    13                              <1> ;The following functions are NOT currently generally supported:
    14                              <1> ;   openFCB -> Except for creating a volume label.
    15                              <1> ;   closeFCB
    16                              <1> ;   createFCB -> Except for creating a volume label.
    17                              <1> ;   randomReadFCB
    18                              <1> ;   randomWriteFCB
    19                              <1> ;   randBlockReadFCB
    20                              <1> ;   randBlockWriteFCB
    21                              <1> ;   sequentialReadFCB
    22                              <1> ;   sequentialWriteFCB
    23                              <1> ;An attempt to run these functions will result in returning al = -1 and 
    24                              <1> ; an extended error code of 05 - Access Denied
    25                              <1> 
    26                              <1> findFirstFileFCB:  ;ah = 11h
    27                              <1> ;Input: rdx -> FCB
    28 000030F9 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    29 00003100 4889D6              <1>     mov rsi, rdx
    30 00003103 803EFF              <1>     cmp byte [rsi], -1
    31 00003106 7507                <1>     jne .notExt1
    32 00003108 4881C607000000      <1>     add rsi, exFcb.driveNum
    33                              <1> .notExt1:
    34 0000310F 0FB606              <1>     movzx eax, byte [rsi]
    35 00003112 50                  <1>     push rax    ;Push on stack the drive number
    36 00003113 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Use buffer 1 to build path in
    37 0000311A E839030000          <1>     call fcbInitRoutine ;Build path and canonicaliseFilename
    38 0000311F 7306                <1>     jnc .fcbOk
    39 00003121 5B                  <1>     pop rbx ;Just pop into next reg to preserve error code
    40 00003122 E9EE450000          <1>     jmp fcbErrExit
    41                              <1> .fcbOk:
    42 00003127 488D3D(1E050000)    <1>     lea rdi, buffer1
    43 0000312E E84EE4FFFF          <1>     call getFilePathNoCanon ;Now hit disk for this file
    44 00003133 7306                <1>     jnc .fileFound
    45 00003135 5B                  <1>     pop rbx
    46 00003136 E9DA450000          <1>     jmp fcbErrExit
    47                              <1> .fileFound:
    48                              <1> ;Now we build an FFBlock internally
    49 0000313B 488D3D(2F060000)    <1>     lea rdi, dosffblock
    50 00003142 57                  <1>     push rdi
    51 00003143 E8DFE2FFFF          <1>     call setupFFBlock
    52 00003148 5E                  <1>     pop rsi
    53                              <1> ;Now we use the provided FCB to store the created FFblock, to be used by us only
    54 00003149 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB]
    55 00003150 F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    56 00003157 7407                <1>     jz .notExt2
    57 00003159 4881C707000000      <1>     add rdi, exFcb.driveNum ;Go to the drive number 
    58                              <1> .notExt2:
    59 00003160 5B                  <1>     pop rbx ;Get back the drive number in bl
    60 00003161 85DB                <1>     test ebx, ebx
    61 00003163 7509                <1>     jnz .notCurrentDrive
    62 00003165 0FB61D(31040000)    <1>     movzx ebx, byte [currentDrv]
    63 0000316C FFC3                <1>     inc ebx ;Turn into a 1 based drive number
    64                              <1> .notCurrentDrive:
    65 0000316E AC                  <1>     lodsb   ;Get search drive from FFBlock in al
    66 0000316F 48FFC7              <1>     inc rdi ;Go past the given drive number in the FCB
    67 00003172 B905000000          <1>     mov ecx, 5 ;Copy the 20 bytes in ffBlock after ffBlock.driveNum
    68 00003177 F3A5                <1>     rep movsd
    69 00003179 89D8                <1>     mov eax, ebx
    70 0000317B AA                  <1>     stosb   ;Store the find first search drive number at the end of the FCB
    71 0000317C 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Now copy current directory to DTA 
    72 00003183 488D35(5A060000)    <1>     lea rsi, curDirCopy ;Point rsi to the current directory copy
    73 0000318A F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
    74 00003191 7412                <1>     jz .notExt3
    75 00003193 B8FFFFFFFF          <1>     mov eax, -1
    76 00003198 AA                  <1>     stosb   ;Store at first byte of DTA the extfcb signature
    77 00003199 FFC0                <1>     inc eax ;Make it zero
    78 0000319B AB                  <1>     stosd
    79 0000319C AA                  <1>     stosb   ;Store 5 bytes of zero
    80 0000319D 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]
    81 000031A4 AA                  <1>     stosb   ;Store the search attributes
    82                              <1> .notExt3:
    83 000031A5 89D8                <1>     mov eax, ebx    ;Get specified drive number in eax
    84 000031A7 AA                  <1>     stosb
    85 000031A8 B904000000          <1>     mov ecx, fatDirEntry_size/8
    86 000031AD F348A5              <1>     rep movsq   ;Copy the directory entry for the file over
    87 000031B0 E95D450000          <1>     jmp fcbGoodExit
    88                              <1>     
    89                              <1> findNextFileFCB:   ;ah = 12h
    90 000031B5 488915(1A070000)    <1>     mov qword [workingFCB], rdx ;Store FCB ptr in variable
    91 000031BC C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB for now
    92 000031C3 C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Set dir search attr to normal for now too
    93 000031CA 4889D6              <1>     mov rsi, rdx
    94                              <1> 
    95 000031CD 803EFF              <1>     cmp byte [rsi], -1
    96 000031D0 7514                <1>     jne .notExt
    97 000031D2 FE0D(FB060000)      <1>     dec byte [extFCBFlag]   ;Make it -1 to set it
    98 000031D8 4881C606000000      <1>     add rsi, exFcb.attribute
    99 000031DF AC                  <1>     lodsb   ;Get search attr in al
   100 000031E0 8805(FC060000)      <1>     mov byte [searchAttr], al
   101                              <1> .notExt:
   102                              <1>     ;rsi points to drive letter
   103 000031E6 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Set rdi to point to the dosffblock
   104 000031ED 31C0                <1>     xor eax, eax
   105 000031EF AC                  <1>     lodsb   ;Get the FCB drive letter
   106 000031F0 50                  <1>     push rax    ;Push drive letter on the stack
   107 000031F1 8A4614              <1>     mov al, byte [rsi + 20] ;Get the byte I left at the end of the ffblock copy
   108 000031F4 AA                  <1>     stosb   ;Store this as the search drive in the ffblock
   109 000031F5 B905000000          <1>     mov ecx, 5
   110 000031FA F3A5                <1>     rep movsd   ;Copy 20 bytes now to the ffblock
   111 000031FC FF35(17040000)      <1>     push qword [currentDTA] ;Save original currentDTA
   112 00003202 488D3D(2F060000)    <1>     lea rdi, dosffblock
   113 00003209 57                  <1>     push rdi    ;Set SDA ffblock as currentDTA
   114 0000320A 8F05(17040000)      <1>     pop qword [currentDTA]
   115 00003210 E8E5DDFFFF          <1>     call findNextMain
   116 00003215 8F05(17040000)      <1>     pop qword [currentDTA]  ;Get back original current DTA
   117 0000321B 0F831AFFFFFF        <1>     jnc findFirstFileFCB.fileFound  ;Go build a new FFBlock for the found file
   118 00003221 488B3D(1A070000)    <1>     mov rdi, qword [workingFCB] ;If no more files or error, get working FCB ptr
   119 00003228 F607FF              <1>     test byte [rdi], -1
   120 0000322B 7407                <1>     jz .notExt2
   121 0000322D 4881C707000000      <1>     add rdi, exFcb.driveNum
   122                              <1> .notExt2:
   123 00003234 5B                  <1>     pop rbx ;Get the drive letter back into bl
   124 00003235 881F                <1>     mov byte [rdi], bl
   125 00003237 E9D9440000          <1>     jmp fcbErrExit  ;And exit bad
   126                              <1> 
   127                              <1> deleteFileFCB:     ;ah = 13h
   128 0000323C 488D3D(1E050000)    <1>     lea rdi, buffer1
   129 00003243 57                  <1>     push rdi
   130 00003244 E80F020000          <1>     call fcbInitRoutine ;Build path and find file to delete
   131 00003249 5F                  <1>     pop rdi ;Point rdi to the canonised path
   132 0000324A 0F82C5440000        <1>     jc fcbErrExit
   133 00003250 E82CE3FFFF          <1>     call getFilePathNoCanon ;Get the file
   134 00003255 0F82BA440000        <1>     jc fcbErrExit
   135 0000325B E80F100000          <1>     call outerDeleteMain
   136 00003260 0F82AF440000        <1>     jc fcbErrExit
   137 00003266 E9A7440000          <1>     jmp fcbGoodExit
   138                              <1> 
   139                              <1> renameFileFCB:     ;ah = 17h
   140                              <1> ;Input: rdx -> User FCB
   141 0000326B 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   142                              <1>     ;First we get the drive letter 
   143 00003272 4889D6              <1>     mov rsi, rdx
   144 00003275 803EFF              <1>     cmp byte [rsi], -1
   145 00003278 7507                <1>     jne .notExt
   146 0000327A 4881C607000000      <1>     add rsi, exFcb.driveNum
   147                              <1> .notExt:
   148 00003281 31C0                <1>     xor eax, eax
   149 00003283 AC                  <1>     lodsb
   150 00003284 50                  <1>     push rax    ;Push the drive letter on the stack for now
   151 00003285 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Store the canonicalised filename here 
   152 0000328C E8C7010000          <1>     call fcbInitRoutine ;Store the first filename in its place
   153 00003291 723D                <1>     jc .badPop
   154 00003293 FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move ptr to source name to other pos temporarily
   155 00003299 8F05(26060000)      <1>     pop qword [fname2Ptr]   ;Will be xchg'd later
   156 0000329F 58                  <1>     pop rax ;Get drive letter back
   157 000032A0 488D3D(9E050000)    <1>     lea rdi, buffer2
   158 000032A7 E880010000          <1>     call fcbInitName2
   159 000032AC 7223                <1>     jc short .bad
   160 000032AE 488B05(26060000)    <1>     mov rax, qword [fname2Ptr]  ;Get the old source ptr in rax
   161 000032B5 488705(1E060000)    <1>     xchg qword [fname1Ptr], rax ;Swap ptr positions 
   162 000032BC 488905(26060000)    <1>     mov qword [fname2Ptr], rax  ;Now place destination pattern in correct place
   163 000032C3 E8CB0B0000          <1>     call renameMain
   164 000032C8 0F8344440000        <1>     jnc fcbGoodExit
   165 000032CE EB01                <1>     jmp short .bad
   166                              <1> .badPop:
   167 000032D0 5B                  <1>     pop rbx ;Pop drive number off stack
   168                              <1> .bad:
   169 000032D1 E93F440000          <1>     jmp fcbErrExit
   170                              <1> 
   171                              <1> getFileSizeFCB:    ;ah = 23h
   172                              <1> ;This function which can be used to test existance of file without opening it 
   173                              <1> ;Input: rdx -> FCB
   174 000032D6 488915(1A070000)    <1>     mov qword [workingFCB], rdx
   175 000032DD 488D3D(1E050000)    <1>     lea rdi, buffer1
   176 000032E4 57                  <1>     push rdi
   177 000032E5 E86E010000          <1>     call fcbInitRoutine
   178 000032EA 5F                  <1>     pop rdi
   179 000032EB 0F8224440000        <1>     jc fcbErrExit
   180 000032F1 E88BE2FFFF          <1>     call getFilePathNoCanon
   181 000032F6 0F8219440000        <1>     jc fcbErrExit
   182 000032FC 8B05(76060000)      <1>     mov eax, dword [curDirCopy + fatDirEntry.fileSize]  ;Get filesize in eax
   183                              <1>     ;Now we gotta set up FCB randRecrd Field
   184 00003302 488B35(1A070000)    <1>     mov rsi, qword [workingFCB]
   185 00003309 803EFF              <1>     cmp byte [rsi], -1
   186 0000330C 7507                <1>     jne .notExtended
   187 0000330E 4881C607000000      <1>     add rsi, exFcb.driveNum ;Go to drive number field
   188                              <1> .notExtended:
   189                              <1> ;rsi points to the drive number now
   190 00003315 0FB75E0E            <1>     movzx ebx, word [rsi + fcb.recordSize]  ;Get the record size
   191 00003319 F7F3                <1>     div ebx ;Divide filesize (in bytes) into # of records
   192 0000331B 85D2                <1>     test edx, edx
   193 0000331D 7402                <1>     jz .noRemainder
   194 0000331F FFC0                <1>     inc eax ;Increment number of records by 1 if there is a remainder in edx
   195                              <1> .noRemainder:
   196 00003321 894621              <1>     mov dword [rsi + fcb.randRecrd], eax    ;Now write # of records to fcb
   197 00003324 E9E9430000          <1>     jmp fcbGoodExit
   198                              <1> 
   199                              <1> setDTA:            ;ah = 1Ah, Always can be used
   200                              <1> ;Called with:
   201                              <1> ;   rdx = Pointer to the new default DTA
   202 00003329 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   203 00003330 488B5318            <1>     mov rdx, qword [rbx + callerFrame.rdx]
   204 00003334 488915(17040000)    <1>     mov qword [currentDTA], rdx
   205 0000333B C3                  <1>     ret
   206                              <1> 
   207                              <1> getDTA:            ;ah = 2Fh, Always can be used
   208 0000333C 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   209 00003343 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get current DTA
   210 0000334A 48895A08            <1>     mov qword [rdx + callerFrame.rbx], rbx
   211                              <1>     return
    13                              <2> %%_ret:
    14 0000334E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   212                              <1>     
   213                              <1> parseFilenameFCB:  ;ah = 29h, Always can be used
   214                              <1> ;Input:
   215                              <1> ;rsi points to a command line to parse
   216                              <1> ;rdi points to a future unopened FCB
   217                              <1> ;al = parsing control bits. 
   218                              <1> ; al[0] = If set, leading filename separators are scanned off
   219                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   220                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   221                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   222                              <1> ;Output: al = 0 => No wildcard chars (DOS calls these global filename chars)
   223                              <1> ;        al = 1 => Wildcards found
   224                              <1> ;        al = -1 => Drive specifier invalid
   225                              <1> ;rsi -> to the first char past the parsed filename
   226                              <1> ;rdi -> First byte of the FCB 
   227                              <1> 
   228 0000334F E8A4010000          <1>     call parseNameToFCB
   229 00003354 56                  <1>     push rsi    ;rsi points now past the filename that was parsed
   230 00003355 E80A3F0000          <1>     call getUserRegs
   231 0000335A 8F4620              <1>     pop qword [rsi + callerFrame.rsi]
   232                              <1>     return  ;al now contains dl, the signature, special unique return type
    13                              <2> %%_ret:
    14 0000335D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   233                              <1> 
   234                              <1> createFileFCB:     ;ah = 16h
   235                              <1> openFileFCB:       ;ah = 0Fh
   236                              <1> ;rdx -> Extended FCB
   237                              <1> ;   MUST BE EXTENDED. 
   238                              <1> ;   MUST HAVE ATTRIBUTE OF 08h, VOLID, else will fail
   239                              <1> ; Using FCB's, one can only create a volume label on a volume.
   240                              <1> ;
   241                              <1> ;Deleting a volume label can be done using delete file (fcb)
   242                              <1> ;Renaming a volume label can be done using rename file (fcb)
   243                              <1> ;Creating a volume label can be done using create file (fcb and hdl)
   244                              <1> ;
   245                              <1> ; In all cases, we recommend the use of fcb's ONLY. Hdl funcs are not 
   246                              <1> ; suggested for use with the vol crud because, do we really need the hdl? No!
   247                              <1> ;
   248 0000335E 488915(1A070000)    <1>     mov qword [workingFCB], rdx     ;Save the FCB ptr
   249 00003365 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   250 00003368 755F                <1>     jne .exitErr
   251 0000336A 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   252 0000336E 7559                <1>     jne .exitErr
   253                              <1>     ;Here we proceed with creating a volume label
   254 00003370 488D3D(1E050000)    <1>     lea rdi, buffer1
   255 00003377 57                  <1>     push rdi
   256 00003378 E8DB000000          <1>     call fcbInitRoutine     ;Build path to volid
   257 0000337D 5E                  <1>     pop rsi                 ;Point rsi to the canonised path
   258 0000337E 0F8291430000        <1>     jc fcbErrExit
   259 00003384 4889F7              <1>     mov rdi, rsi            ;Pass argument to rdi. rsi, rdi preserved
   260 00003387 E8B9400000          <1>     call checkPathspecOK    ;If the path has wildcards, fail!
   261 0000338C 723B                <1>     jc .exitErr
   262 0000338E E8EEE1FFFF          <1>     call getFilePathNoCanon ;Get the file if it exists! Sets DPB too.
   263 00003393 8B05(1E050000)      <1>     mov eax, dword [buffer1]    ;Get the first four chars for comparison
   264 00003399 30C0                <1>     xor al, al
   265 0000339B 3D003A5C00          <1>     cmp eax, 005C3A00h  ;Do null path check!
   266 000033A0 7427                <1>     je .exitErr
   267 000033A2 488D1D(100D0000)    <1>     lea rbx, scratchSFT     ;Set the working SFT to the scratch in the SDA
   268 000033A9 48891D(32070000)    <1>     mov qword [currentSFT], rbx
   269 000033B0 0FB605(FC060000)    <1>     movzx eax, byte [searchAttr]   ;Get the file attribute in al
   270 000033B7 E89D100000          <1>     call createMain
   271 000033BC 720B                <1>     jc .exitErr
   272                              <1>     ;We close the sda sft since we dont have an explicit FCB close fn.
   273                              <1>     ;Necessary to close the associated share record when sharing.
   274 000033BE E8B7130000          <1>     call closeMain
   275 000033C3 0F8349430000        <1>     jnc fcbGoodExit     ;We require no back copying so exit!
   276                              <1> .exitErr:
   277 000033C9 B805000000          <1>     mov eax, errAccDen
   278 000033CE E942430000          <1>     jmp fcbErrExit
   279                              <1> 
   280                              <1> closeFileFCB:      ;ah = 10h
   281                              <1> ;This is a minimal function stub which is necessary to "pseudo"-close
   282                              <1> ; opens/creates of volume labels via the open/createFCB function.
   283                              <1> ; Though those functions close by themselves, I won't document that
   284                              <1> ; for future compatibility. Thus, if this function encounters a 
   285                              <1> ; open/create volume label FCB, it returns OK. Else it fails.
   286 000033D3 488915(1A070000)    <1>     mov qword [workingFCB], rdx     ;Save the FCB ptr
   287 000033DA 803AFF              <1>     cmp byte [rdx + exFcb.extSig], -1
   288 000033DD 75EA                <1>     jne openFileFCB.exitErr
   289 000033DF 807A0608            <1>     cmp byte [rdx + exFcb.attribute], dirVolumeID
   290 000033E3 75E4                <1>     jne openFileFCB.exitErr
   291 000033E5 E928430000          <1>     jmp fcbGoodExit
   292                              <1> 
   293                              <1> ;=================================================================
   294                              <1> ;=================================================================
   295                              <1> ;These functions are marked as reserved for future expansion.
   296                              <1> ;=================================================================
   297                              <1> ;=================================================================
   298                              <1> sequentialReadFCB: ;ah = 14h
   299                              <1> sequentialWriteFCB:;ah = 15h
   300                              <1> randomReadFCB:     ;ah = 21h
   301                              <1> randomWriteFCB:    ;ah = 22h
   302                              <1> setRelRecordFCB:   ;ah = 24h
   303                              <1> randBlockReadFCB:  ;ah = 27h
   304                              <1> randBlockWriteFCB: ;ah = 28h
   305 000033EA B805000000          <1>     mov eax, errAccDen
   306 000033EF E921430000          <1>     jmp fcbErrExit
   307                              <1> 
   308                              <1> 
   309                              <1> ;--------------------------------
   310                              <1> ;  Common FCB related Routines  :
   311                              <1> ;--------------------------------
   312                              <1> fcbCheckDriveType:
   313                              <1> ;Sets volIncmpFCB if the volume is not FAT12 or 16. This prevents us 
   314                              <1> ; from doing file io to files on such volumes (unless they are volume lbls)
   315                              <1> ;Input: qword [workingDPB] = DPB for transacting volume. 
   316                              <1> ;       qword [workingCDS] = CDS for transacting volume.
   317                              <1> ;       curDirCopy = Current Directory for found file (for char dev)
   318                              <1> ;If a net CDS, automatic fail (for now).
   319 000033F4 C605(F9060000)FF    <1>     mov byte [volIncmpFCB], -1  ;Assume incompatible volume unless otherwise
   320 000033FB 51                  <1>     push rcx
   321 000033FC 57                  <1>     push rdi
   322 000033FD 55                  <1>     push rbp
   323 000033FE 9C                  <1>     pushfq
   324 000033FF F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   325 00003406 7518                <1>     jnz .okToGo ;If the file is a char dev, its always ok for FileIO
   326 00003408 E8C33D0000          <1>     call testCDSNet ;If CF=CY => Net CDS (with and without CDS)
   327 0000340D 7218                <1>     jc .exit
   328                              <1>     ;rdi has cds ptr now
   329 0000340F 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get dpb ptr in rbp
   330 00003413 E802D6FFFF          <1>     call getFATtype
   331 00003418 81F901000000        <1>     cmp ecx, 1  ;0 = FAT12, 1 = FAT16
   332 0000341E 7707                <1>     ja .exit
   333                              <1> .okToGo:
   334 00003420 C605(F9060000)00    <1>     mov byte [volIncmpFCB], 0   ;Clear this to permit usage
   335                              <1> .exit:
   336 00003427 9D                  <1>     popfq
   337 00003428 5D                  <1>     pop rbp
   338 00003429 5F                  <1>     pop rdi
   339 0000342A 59                  <1>     pop rcx
   340                              <1>     return
    13                              <2> %%_ret:
    14 0000342B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> fcbInitName2:
   342                              <1> ;Must be called after fcbInitRoutine has been run once
   343                              <1> ;Input: rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   344                              <1> ;       rdx -> UserFCB
   345                              <1> ;       eax[0] = Drive number (0 based)
   346 0000342C 55                  <1>     push rbp
   347 0000342D 4889E5              <1>     mov rbp, rsp
   348 00003430 4881EC0F000000      <1>     sub rsp, 15
   349 00003437 57                  <1>     push rdi
   350 00003438 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   351 0000343C 4889D6              <1>     mov rsi, rdx
   352 0000343F F605(FB060000)FF    <1>     test byte [extFCBFlag], -1
   353 00003446 7407                <1>     jz .notExtended
   354 00003448 4881C607000000      <1>     add rsi, exFcb.driveNum
   355                              <1> .notExtended:
   356                              <1> ;rsi points to the drive letter of the common fcb portion of the renameFcb
   357 0000344F 4881C611000000      <1>     add rsi, renameFcb.newName  ;rsi goes to the second filename
   358 00003456 EB36                <1>     jmp short fcbInitRoutine.rename2EP
   359                              <1> fcbInitRoutine:
   360                              <1> ;Checks if the FCB is extended or normal, and fills the initial variables
   361                              <1> ;Input: rdx -> User FCB
   362                              <1> ;       rdi -> Buffer to use to build the X:FILENAME.EXT,0 pathspec
   363 00003458 55                  <1>     push rbp
   364 00003459 4889E5              <1>     mov rbp, rsp
   365 0000345C 4881EC0F000000      <1>     sub rsp, 15    ;Make 16 char space on stack
   366                              <1>     ;This space is used to store X:FILENAME.EXT,0
   367 00003463 57                  <1>     push rdi    ;Save the internal destination pathname buffer 
   368 00003464 488D7DF1            <1>     lea rdi, qword [rbp - 15]
   369 00003468 C605(FB060000)00    <1>     mov byte [extFCBFlag], 0    ;Assume normal FCB initially
   370 0000346F C605(FC060000)00    <1>     mov byte [searchAttr], 0    ;Default search attributes
   371 00003476 E86A000000          <1>     call isFCBExtended  ;Sets rsi to point to the drive letter (if extended)
   372 0000347B 7410                <1>     jz .notExtended
   373 0000347D C605(FB060000)FF    <1>     mov byte [extFCBFlag], -1
   374 00003484 8A4206              <1>     mov al, byte [rdx + exFcb.attribute]    ;Get the search attribute
   375 00003487 8805(FC060000)      <1>     mov byte [searchAttr], al
   376                              <1> .notExtended:
   377 0000348D AC                  <1>     lodsb  ;rsi points to the normal fcb part, advance to filename
   378                              <1> .rename2EP:
   379                              <1> ;Call notjoin to prevent choosing a CDS that is a join cds for a FCB operation
   380 0000348E E8F53D0000          <1>     call getCDSNotJoin ;Get the CDS (preserves rdi)
   381 00003493 723F                <1>     jc .badDisk
   382 00003495 E842000000          <1>     call storeZeroBasedDriveNumber  ;Store X: on stack space, add two to rdi
   383 0000349A 488D1DBBCFFFFF      <1>     lea rbx, asciiCharProperties
   384 000034A1 B90B000000          <1>     mov ecx, 11 ;11 chars in a filename
   385 000034A6 56                  <1>     push rsi    ;rsi -> fcb.filename
   386                              <1> .nameCharCheck:
   387 000034A7 AC                  <1>     lodsb   ;Get the char in al
   388 000034A8 D7                  <1>     xlatb   ;Get the char signature in al
   389 000034A9 A808                <1>     test al, badFCBChar  ;Make sure it is a valid FCB filename char
   390 000034AB 7427                <1>     jz .badDisk
   391 000034AD FFC9                <1>     dec ecx
   392 000034AF 75F6                <1>     jnz .nameCharCheck
   393 000034B1 5E                  <1>     pop rsi ;Point back to the start of the name field in the FCB
   394 000034B2 4889FB              <1>     mov rbx, rdi    ;Save ptr to first char past X: (or X:\)
   395 000034B5 E82DDFFFFF          <1>     call FCBToAsciiz
   396 000034BA 5F                  <1>     pop rdi ;Get back the ptr the SDA buffer to store the full pathname into
   397 000034BB 803B00              <1>     cmp byte [rbx], 0   ;Is our path X:,0 (or X:\,0)?
   398 000034BE 7414                <1>     je .badDisk
   399 000034C0 488D75F1            <1>     lea rsi, qword [rbp - 15]   ;Point rsi to the stack string
   400 000034C4 55                  <1>     push rbp
   401 000034C5 E87CE0FFFF          <1>     call canonicaliseFileName   ;Canonicalise filename (add curr dir if X:)
   402 000034CA 5D                  <1>     pop rbp
   403 000034CB 7207                <1>     jc .badDisk
   404 000034CD E822FFFFFF          <1>     call fcbCheckDriveType  ;Set the volume compatibility bit for operation
   405 000034D2 EB03                <1>     jmp short .jiggleStack  ;Skip the error
   406                              <1> .badDisk:
   407 000034D4 B003                <1>     mov al, errPnf  ;DOS does this... so will I
   408 000034D6 F9                  <1>     stc
   409                              <1> .jiggleStack:
   410 000034D7 4889EC              <1>     mov rsp, rbp
   411 000034DA 5D                  <1>     pop rbp
   412                              <1> .exit:
   413                              <1>     return
    13                              <2> %%_ret:
    14 000034DB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   414                              <1> 
   415                              <1> storeZeroBasedDriveNumber:
   416                              <1> ;Input: al => 0 based drive letter
   417                              <1> ;       rdi -> Points to buffer to store the X: in
   418 000034DC FEC0                <1>     inc al
   419                              <1> storeOneBasedDriveNumber:
   420                              <1> ;Input: al => 1 based drive letter
   421                              <1> ;       rdi -> Points to buffer to store the X: in
   422 000034DE 0440                <1>     add al, "@"
   423 000034E0 B43A                <1>     mov ah, ":"
   424 000034E2 66AB                <1>     stosw
   425                              <1>     return
    13                              <2> %%_ret:
    14 000034E4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   426                              <1> 
   427                              <1> isFCBExtended:
   428                              <1> ;Input: rdx = FCB ptr
   429                              <1> ;Output: rsi -> Drive letter of FCB
   430                              <1> ;        rdx -> FCB first byte
   431                              <1> ;ZF=NZ => Extended FCB, ZF=ZY => Normal FCB
   432 000034E5 4889D6              <1>     mov rsi, rdx
   433 000034E8 803EFF              <1>     cmp byte [rsi], -1
   434 000034EB 7507                <1>     jne .notExtended
   435 000034ED 4881C607000000      <1>     add rsi, exFcb.driveNum
   436                              <1> .notExtended:
   437 000034F4 4839F2              <1>     cmp rdx, rsi
   438                              <1>     return
    13                              <2> %%_ret:
    14 000034F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> 
   440                              <1> parseNameToFCB:
   441                              <1> ;rsi points to a command line to parse
   442                              <1> ;rdi points to a future unopened FCB
   443                              <1> ;al = parsing control bits. 
   444                              <1> ; al[0] = If set, leading filename separators are scanned off
   445                              <1> ; al[1] = If set, we set the drive ID byte if a drive letter was found
   446                              <1> ; al[2] = If set, will copy the filename to the FCB filename field
   447                              <1> ; al[3] = If set, will copy the extension to the FCB extension field
   448                              <1> ;
   449                              <1> ;Separators include : . ; , = + TAB SPACE
   450                              <1> ;Terminators include separators and , < > | / " [ ] and all ctrl chars
   451 000034F8 C605(8D040000)00    <1>     mov byte [fcbSpaceOk], 0    ;Don't allow spaces in filename
   452 000034FF 31D2                <1>     xor edx, edx    ;Use dl to keep drive name/state of operation
   453 00003501 A802                <1>     test al, 2  ;Set drive letter
   454 00003503 7402                <1>     jz .skipDriveLetter
   455 00003505 8817                <1>     mov byte [rdi + fcb.driveNum], dl   ;Clear this for usage
   456                              <1> .skipDriveLetter:
   457 00003507 48FFC7              <1>     inc rdi ;Go past the drive letter field in the FCB
   458 0000350A B908000000          <1>     mov ecx, 8  ;Copy Filename
   459 0000350F A804                <1>     test al, 4  ;Do we copy the filename to the fcb field?
   460 00003511 93                  <1>     xchg eax, ebx
   461 00003512 B020                <1>     mov al, " " ;Clear the field
   462 00003514 7405                <1>     jz .clearFilenameField
   463 00003516 4801CF              <1>     add rdi, rcx    ;Move to the extension field of the fcb
   464 00003519 31C9                <1>     xor ecx, ecx
   465                              <1> .clearFilenameField:
   466 0000351B F3AA                <1>     rep stosb
   467 0000351D B903000000          <1>     mov ecx, 3
   468 00003522 F6C308              <1>     test bl, 8  ;Skip clearing extension field?
   469 00003525 7405                <1>     jz .clearExtensionField
   470 00003527 4801CF              <1>     add rdi, rcx
   471 0000352A 31C9                <1>     xor ecx, ecx
   472                              <1> .clearExtensionField:
   473 0000352C F3AA                <1>     rep stosb
   474 0000352E 91                  <1>     xchg eax, ecx
   475 0000352F AB                  <1>     stosd   ;Initialise curBlock and recordSize like DOS does in parseFilename
   476 00003530 4881EF10000000      <1>     sub rdi, 10h    ;Go back to head of FCB
   477 00003537 F6C301              <1>     test bl, 1  ;Skip scanning preceeding spaces
   478 0000353A 740F                <1>     jz .dontScanOffTerm
   479 0000353C E89F000000          <1>     call skipSeparators ;Skip leading separators
   480 00003541 E8723E0000          <1>     call isCharTerminator   ;If first char is terminator, go past and keep skipping
   481 00003546 7508                <1>     jnz .skipIfNotTerminator
   482 00003548 48FFC6              <1>     inc rsi
   483                              <1> .dontScanOffTerm:
   484 0000354B E890000000          <1>     call skipSeparators  ;Skip separators
   485                              <1> .skipIfNotTerminator:
   486 00003550 E83B3E0000          <1>     call uppercaseCharAtPtr 
   487 00003555 741E                <1>     jz .skipSettingDriveLetter  ;Skip if first char not a possible drive letter
   488 00003557 803E3A              <1>     cmp byte [rsi], ":" ;Is the next char a drive separator?
   489 0000355A 7519                <1>     jne .skipSettingDriveLetter
   490 0000355C 48FFC6              <1>     inc rsi ;Goto next char
   491 0000355F 2C40                <1>     sub al, "@" ;Convert into a 1 based drive number
   492 00003561 7609                <1>     jbe .invalidDriveLetter ;If less than 0 or 0, fail
   493 00003563 50                  <1>     push rax    ;Save the 1 based drive letter
   494 00003564 E81F3D0000          <1>     call getCDSNotJoin   ;Verifies if this drive letter is valid
   495 00003569 58                  <1>     pop rax
   496 0000356A 7302                <1>     jnc .validDriveLetter
   497                              <1> .invalidDriveLetter:
   498 0000356C B2FF                <1>     mov dl, -1
   499                              <1> .validDriveLetter:
   500 0000356E AA                  <1>     stosb
   501 0000356F 48FFC6              <1>     inc rsi ;Align pointers...
   502 00003572 48FFCF              <1>     dec rdi 
   503                              <1> .skipSettingDriveLetter:
   504 00003575 48FFCE              <1>     dec rsi
   505 00003578 48FFC7              <1>     inc rdi
   506                              <1> getFCBFilename:
   507                              <1> ;Input: rsi points to first char of filename
   508                              <1> ;       rdi points to storage buffer for filename
   509                              <1> ;       dl contains the signature if drive invalid
   510                              <1> ;Output:
   511                              <1> ;       Fields filled
   512                              <1> ;       al = Return signature
   513 0000357B B908000000          <1>     mov ecx, 8
   514 00003580 E815000000          <1>     call getFCBNameField
   515 00003585 803E2E              <1>     cmp byte [rsi], "." ;Name sep?
   516 00003588 750D                <1>     jne .noExt
   517 0000358A B903000000          <1>     mov ecx, 3
   518 0000358F 48FFC6              <1>     inc rsi ;Skip this char
   519 00003592 E814000000          <1>     call forceFCBNameField
   520                              <1> .noExt:
   521 00003597 88D0                <1>     mov al, dl  ;Store the return signature
   522                              <1>     return
    13                              <2> %%_ret:
    14 00003599 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   523                              <1> 
   524                              <1> getFCBNameField:
   525                              <1> ;Checks if the field is appropriate before copying it
   526 0000359A E8F13D0000          <1>     call uppercaseCharAtPtr
   527 0000359F 7507                <1>     jnz .okName  ;If ZF not set, we can proceed!
   528 000035A1 4801CF              <1>     add rdi, rcx    ;Advance rdi by ecx chars
   529 000035A4 48FFCE              <1>     dec rsi ;Point to previous char
   530                              <1>     return
    13                              <2> %%_ret:
    14 000035A7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   531                              <1> .okName:
   532 000035A8 48FFCE              <1>     dec rsi ;Go back now a char
   533                              <1> forceFCBNameField:
   534                              <1> ;Forcefully copies the name from rsi to rdi
   535 000035AB E8E03D0000          <1>     call uppercaseCharAtPtr
   536 000035B0 7226                <1>     jc .terminatingSpace
   537 000035B2 750D                <1>     jnz .notSep
   538 000035B4 F605(8D040000)FF    <1>     test byte [fcbSpaceOk], -1
   539 000035BB 741B                <1>     jz .terminatingSpace
   540 000035BD 3C20                <1>     cmp al, " "
   541 000035BF 7517                <1>     jne .terminatingSpace
   542                              <1> .notSep:
   543 000035C1 67E3E7              <1>     jecxz forceFCBNameField    ;For the last char, now immediately loop around
   544 000035C4 FFC9                <1>     dec ecx
   545 000035C6 3C2A                <1>     cmp al, "*" ;Big wildcard?
   546 000035C8 7504                <1>     jne .notBigWildcard
   547 000035CA B03F                <1>     mov al, "?"
   548 000035CC F3AA                <1>     rep stosb
   549                              <1> .notBigWildcard:
   550 000035CE AA                  <1>     stosb   ;Stores the uppercased char
   551 000035CF 3C3F                <1>     cmp al, "?"
   552 000035D1 75D8                <1>     jne forceFCBNameField
   553 000035D3 80CA01              <1>     or dl, 1    ;Set dl to 1 to indicate wildcard char
   554 000035D6 EBD3                <1>     jmp short forceFCBNameField
   555                              <1> .terminatingSpace:
   556 000035D8 B020                <1>     mov al, " "
   557 000035DA F3AA                <1>     rep stosb   ;Store remaining chars worth in spaces
   558 000035DC 48FFCE              <1>     dec rsi     ;Point back to terminating char
   559                              <1>     return
    13                              <2> %%_ret:
    14 000035DF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   560                              <1> 
   561                              <1> skipSeparators:
   562                              <1> ;Input: rsi -> String 
   563                              <1> ;Output: rsi -> First non separator type char
   564 000035E0 AC                  <1>     lodsb
   565 000035E1 E8E13D0000          <1>     call isCharSeparator
   566 000035E6 74F8                <1>     jz skipSeparators
   567 000035E8 48FFCE              <1>     dec rsi
   568                              <1>     return
    13                              <2> %%_ret:
    14 000035EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                                  %include "./src/Kernel/FileIO/hdlFunc.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;    File Handle Kernel routines    :
     3                              <1> ;-----------------------------------:
     4                              <1> 
     5                              <1> createFileHdl:     ;ah = 3Ch, handle function
     6                              <1> ;Input: cx = File attributes (same as search attributes for find first)
     7                              <1> ;       rdx = Ptr to ASCIZ filename to create
     8                              <1> ;Output: CF=CY => ax = File handle
     9                              <1> ;        CF=NC => al = Error code
    10 000035EC 51                  <1>     push rcx    ;Save file attributes on stack
    11 000035ED 488D0D650E0000      <1>     lea rcx, createMain
    12 000035F4 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with directory
    13 000035FB EB1D                <1>     jmp short openFileHdl.openCommon
    14                              <1> openFileHdl:       ;ah = 3Dh, handle function
    15                              <1> ;Input: al = Open mode, to open file with
    16                              <1> ;       rdx = Ptr to ASCIZ filename to open if it exists
    17                              <1> ;If called from 5D00h, cl = File attributes too
    18                              <1> ;Output: CF=CY => ax = File handle
    19                              <1> ;        CF=NC => al = Error code
    20 000035FD BB16000000          <1>     mov ebx, dirInclusive
    21 00003602 F605(02070000)FF    <1>     test byte [dosInvoke], -1
    22 00003609 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
    23 0000360C 880D(FC060000)      <1>     mov byte [searchAttr], cl
    24 00003612 488D0D150D0000      <1>     lea rcx, openMain  
    25 00003619 50                  <1>     push rax    ;Save open mode on stack
    26                              <1> .openCommon:
    27 0000361A 4889D6              <1>     mov rsi, rdx
    28 0000361D E8233E0000          <1>     call checkPathspecOK
    29 00003622 730B                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
    30                              <1> .badPath: ;We cant have wildcards when creating or opening a file!
    31 00003624 58                  <1>     pop rax
    32 00003625 B805000000          <1>     mov eax, errAccDen
    33 0000362A E906410000          <1>     jmp extErrExit
    34                              <1> .pathOk:
    35 0000362F E8B6400000          <1>     call dosCrit1Enter
    36 00003634 E8EA190000          <1>     call findFreeSFT    ;Get free SFT in rdi or error exit
    37 00003639 E8B6400000          <1>     call dosCrit1Exit
    38 0000363E 0F82D3000000        <1>     jc .exitBad
    39                              <1>     ;Now save variables
    40 00003644 E810190000          <1>     call setCurrentSFT
    41 00003649 66891D(3A070000)    <1>     mov word [currentNdx], bx   ;Save a word, SFTNdx are bytes though
    42 00003650 E8971A0000          <1>     call findFreeJFTEntry    ;Get a ptr to a free JFT entry in rdi
    43 00003655 0F82BC000000        <1>     jc .exitBad
    44 0000365B 66891D(3C070000)    <1>     mov word [currentHdl], bx   ;Save handle number in var
    45 00003662 48893D(2A070000)    <1>     mov qword [curHdlPtr], rdi  ;Save ptr to this entry
    46 00003669 0FB71D(3A070000)    <1>     movzx ebx, word [currentNdx]    ;Get the current ndx 
    47 00003670 881F                <1>     mov byte [rdi], bl  ;And open the file
    48                              <1>     ;If the rest of open/create fails, be prepared to close this entry
    49 00003672 4889D6              <1>     mov rsi, rdx    ;Ptr to ASCIIZ path string    
    50 00003675 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
    51 0000367C 51                  <1>     push rcx    ;Save the procedure to call on stack
    52 0000367D E844DEFFFF          <1>     call getFilePath    ;Check path existance, updates DPB
    53 00003682 5B                  <1>     pop rbx     ;Get the procedure address back from stack
    54 00003683 488D05A40C0000      <1>     lea rax, openMain   ;Get EA for open procedure
    55 0000368A 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    56 00003691 7334                <1>     jnc .proceedCall
    57                              <1> ;If CF=NC => Full path exists. For Open, Good. For Create, Good. 
    58                              <1> ;                              For Create New, Bad but handled later.
    59                              <1> ;If CF=CY => Path doesnt all exist:
    60                              <1> ;      If parDirExists = -1 => For Open, Bad.  For both Creates, Good. 
    61                              <1> ;Now we check if we are creating or opening.
    62 00003693 4839C3              <1>     cmp rbx, rax    ;Are we trying to open a non-existant file?
    63 00003696 7419                <1>     je .badFile ;Jmp to error if opening file that doesnt exist
    64 00003698 F605(05070000)FF    <1>     test byte [parDirExist], -1 ;If creating, check if parent path was found
    65 0000369F 741B                <1>     jz .badPathspec ;If not then exit bad path
    66                              <1>     ;Now check the path is not X:\<NUL>
    67 000036A1 8B0D(1E050000)      <1>     mov ecx, dword [buffer1]    ;Get the first four chars for comparison
    68 000036A7 30C9                <1>     xor cl, cl
    69 000036A9 81F9003A5C00        <1>     cmp ecx, 005C3A00h  ;If this is a null path, set file not found!
    70 000036AF 7516                <1>     jnz .proceedCall    ;Else, proceed.
    71                              <1> .badFile:   ;If trying to open a file that doesnt exit, error so!
    72 000036B1 58                  <1>     pop rax
    73 000036B2 B802000000          <1>     mov eax, errFnf 
    74 000036B7 E95F000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    75                              <1> .badPathspec:   ;If the parent path doesnt exist, error thus.
    76 000036BC 58                  <1>     pop rax
    77 000036BD B803000000          <1>     mov eax, errPnf
    78 000036C2 E954000000          <1>     jmp .exitBad2   ;Need to deallocate the SFT before returning
    79                              <1> .proceedCall:
    80                              <1> ;If the pathspec exists, recall that for create, we truncate.
    81 000036C7 31C9                <1>     xor ecx, ecx    ;Use ecx to carry device info word
    82 000036C9 4839C3              <1>     cmp rbx, rax    ;Are we opening or creating? (rax=opening)
    83 000036CC 58                  <1>     pop rax         ;Pop off openmode or attribute from the stack
    84 000036CD 750B                <1>     jne .callProc   ;Jump if we are creating
    85                              <1>     ;al means openmode here
    86 000036CF A880                <1>     test al, 80h    ;No Inherit bit set?
    87 000036D1 7407                <1>     jz .callProc
    88 000036D3 247F                <1>     and al, 7Fh     ;Clear this bit
    89 000036D5 B900100000          <1>     mov ecx, devNoInherit
    90                              <1> .callProc:
    91 000036DA 66C746020000        <1>     mov word [rsi + sft.wOpenMode], 0   ;Clear open mode bits
    92 000036E0 66C7464D0000        <1>     mov word [rsi + sft.wShareRec], 0   ;Clear Share record pointer details
    93 000036E6 51                  <1>     push rcx    ;Save the device word 
    94 000036E7 FFD3                <1>     call rbx    ;Enter with open mode in 
    95 000036E9 59                  <1>     pop rcx
    96 000036EA 488B35(32070000)    <1>     mov rsi, qword [currentSFT] ;Get current SFT pointer in rsi
    97 000036F1 7228                <1>     jc .exitBad2
    98 000036F3 66C7060100          <1>     mov word [rsi + sft.wNumHandles], 1 ;One handle will refer to this boyo
    99 000036F8 66094E05            <1>     or word [rsi + sft.wDeviceInfo], cx ;Add the inheritance bit to dev info
   100 000036FC 0FB705(3C070000)    <1>     movzx eax, word [currentHdl]
   101 00003703 FF15(1F010000)      <1>     call qword [closeDupFileShare]  ;Close Duplicate Handles if opened file! 
   102 00003709 66C705(3A070000)FF- <1>     mov word [currentNdx], -1       ;Now reset the index back to -1
   102 00003711 FF                  <1>
   103 00003712 E910400000          <1>     jmp extGoodExit ;Save ax and return OK
   104                              <1> .exitBad:
   105 00003717 FB                  <1>     sti ;To prevent new net open/create reqs from crapping out a failed request
   106 00003718 5B                  <1>     pop rbx ;Pop the word from the stack
   107 00003719 EB16                <1>     jmp short .exitBadCommon
   108                              <1> .exitBad2:
   109                              <1>     ;Now we deallocate the SFT entry in the JFT and SFT block
   110 0000371B 488B35(2A070000)    <1>     mov rsi, qword [curHdlPtr]
   111 00003722 C606FF              <1>     mov byte [rsi], -1  ;Re-free the entry in the JFT
   112 00003725 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
   113 0000372C 66C7060000          <1>     mov word [rsi], 0   ;Re-free the SFT 
   114                              <1> .exitBadCommon:
   115 00003731 66C705(3A070000)FF- <1>     mov word [currentNdx], -1
   115 00003739 FF                  <1>
   116 0000373A E9F63F0000          <1>     jmp extErrExit ;Propagate the error code that is in ax
   117                              <1> 
   118                              <1> closeFileHdl:      ;ah = 3Eh, handle function
   119                              <1> ;Input: bx = file handle to close
   120 0000373F E8BF190000          <1>     call getSFTPtr  ;Get a pointer to the SFT in rdi
   121 00003744 0F82EB3F0000        <1>     jc extErrExit   ;If CF is set, al has error code, exit!
   122 0000374A E80A180000          <1>     call setCurrentSFT  ;Set this as the current SFT
   123 0000374F 66813F0100          <1>     cmp word [rdi + sft.wNumHandles], 1 ;If this is last reference to sft
   124 00003754 740A                <1>     je .killHdl ;always kill the handle!
   125                              <1>     ;Else if network file opened as FCB, avoid nuking JFT!
   126 00003756 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]  ;Get the share mode bits
   127 0000375A 24F0                <1>     and al, 0F0h    ;And wipe out the other bits
   128 0000375C 3C70                <1>     cmp al, netFCBShare
   129 0000375E 7408                <1>     je .notNetFCB
   130                              <1> .killHdl:
   131 00003760 E852190000          <1>     call getJFTPtr  ;Remember, bx has handle number
   132 00003765 C607FF              <1>     mov byte [rdi], -1  ;Now free the JFT entry
   133                              <1> .notNetFCB:
   134 00003768 E80D100000          <1>     call closeMain  ;Call close main!
   135 0000376D 0F82C23F0000        <1>     jc extErrExit   ;If an error, exit through error exit
   136 00003773 B8003E0000          <1>     mov eax, 3E00h    ;Return value
   137 00003778 E9AA3F0000          <1>     jmp extGoodExit
   138                              <1> 
   139                              <1> readFileHdl:       ;ah = 3Fh, handle function
   140 0000377D 488D35C3100000      <1>     lea rsi, readBytes
   141                              <1> .common:
   142 00003784 E87A190000          <1>     call getSFTPtr  ;Get SFT ptr in rdi (if file is r/w-able from machine)
   143 00003789 0F82A63F0000        <1>     jc extErrExit   ;Error code in al and exit
   144 0000378F E8C5170000          <1>     call setCurrentSFT  ;Set the current SFT (from rdi)
   145 00003794 09C9                <1>     or ecx, ecx ;Clear upper bits of RCX if they are NOT clear just in case
   146 00003796 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current Disk Transfer Area
   147 0000379C 488915(17040000)    <1>     mov qword [currentDTA], rdx ;Set the user buffer as the currentDTA
   148 000037A3 FFD6                <1>     call rsi    ;Get back in ecx the bytes transferred!
   149 000037A5 8F05(17040000)      <1>     pop qword [currentDTA]
   150 000037AB 0F82843F0000        <1>     jc extErrExit   ;Error code in al and exit
   151 000037B1 89C8                <1>     mov eax, ecx    ;Get actual number of bytes tfrd in eax 
   152 000037B3 E9663F0000          <1>     jmp extGoodExit2    ;and exit!
   153                              <1> 
   154                              <1> writeFileHdl:      ;ah = 40h, handle function
   155 000037B8 488D35E4130000      <1>     lea rsi, writeBytes
   156 000037BF E9C0FFFFFF          <1>     jmp readFileHdl.common
   157                              <1> 
   158                              <1> deleteFileHdl:     ;ah = 41h, handle function, delete from specified dir
   159                              <1> ;Here don't allow malformed chars unless it is a network CDS
   160                              <1> ;Allows deleting volume labels.
   161 000037C4 BB16000000          <1>     mov ebx, dirInclusive    ;Search all files, dirs handled later
   162 000037C9 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   163 000037D0 0F44CB              <1>     cmovz ecx, ebx  ;If not server invoke, store this value instead
   164 000037D3 880D(FC060000)      <1>     mov byte [searchAttr], cl
   165 000037D9 4889D6              <1>     mov rsi, rdx
   166 000037DC E8643C0000          <1>     call checkPathspecOK
   167 000037E1 7315                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   168 000037E3 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   169                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   170 000037E5 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   171 000037EC 750A                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   172                              <1> .badPath:
   173 000037EE B805000000          <1>     mov eax, errAccDen
   174 000037F3 E93D3F0000          <1>     jmp extErrExit
   175                              <1> .pathOk:
   176 000037F8 488D3D(1E050000)    <1>     lea rdi, buffer1
   177 000037FF 52                  <1>     push rdx
   178 00003800 E8C1DCFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   179 00003805 5A                  <1>     pop rdx
   180 00003806 0F82293F0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   181                              <1>     ;In the case of a wildcard, recall this will return the first file
   182 0000380C 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   183 00003813 0F851C3F0000        <1>     jnz extErrExit
   184 00003819 E8510A0000          <1>     call outerDeleteMain
   185 0000381E 0F82113F0000        <1>     jc extErrExit
   186 00003824 E9FE3E0000          <1>     jmp extGoodExit
   187                              <1> 
   188                              <1> lseekHdl:          ;ah = 42h, handle function, LSEEK
   189                              <1> ;Input: ecx=0, edx=Position to seek to
   190                              <1> ;ecx may be non-zero for 64-bit IFS but currently DOS does not natively
   191                              <1> ; support them. INT 2Fh filesystems may have a tough time if they wish to
   192                              <1> ; use a 64 bit file pointer... They can try though!
   193                              <1> ;Output: If CF=NC: edx=0, eax=New position of file handle
   194                              <1> ;           Again, if network file, edx = Upper bytes of file hdl!
   195 00003829 E8D5180000          <1>     call getSFTPtr
   196 0000382E 0F82013F0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   197 00003834 3C03                <1>     cmp al, 3
   198 00003836 720A                <1>     jb .validFunction
   199 00003838 B801000000          <1>     mov eax, errInvFnc       ;Error code and exit
   200 0000383D E9F33E0000          <1>     jmp extErrExit
   201                              <1> .validFunction:
   202 00003842 3C01                <1>     cmp al, 1
   203 00003844 771A                <1>     ja .seekend
   204 00003846 7203                <1>     jb .seekset
   205                              <1> ;Here we are at seekcur, seek from current (signed)
   206 00003848 03571B              <1>     add edx, dword [rdi + sft.dCurntOff]    ;Get offset from current
   207                              <1> .seekset:
   208                              <1> ;Seek from the start (unsigned)
   209 0000384B 89571B              <1>     mov dword [rdi + sft.dCurntOff], edx ;Store the new offset
   210 0000384E 31D2                <1>     xor edx, edx    ;All FAT files have 0 upper 32 bits! Set to 0!
   211                              <1>     ;We return the file position in eax anyway!
   212                              <1> .seekExit:
   213 00003850 E80F3A0000          <1>     call getUserRegs    ;Get user regs in rsi
   214 00003855 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   215 00003858 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]  ;Return current offset if all ok!
   216 0000385B E9BE3E0000          <1>     jmp extGoodExit2    ;Return OK in eax 
   217                              <1> .seekend:
   218                              <1> ;Here we are at seekend, seek from end (signed)
   219 00003860 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   220 00003866 7505                <1>     jnz .netCheck
   221                              <1> .proceedDisk:
   222 00003868 035717              <1>     add edx, dword [rdi + sft.dFileSize]    ;Add to file size
   223 0000386B EBDE                <1>     jmp short .seekset
   224                              <1> .netCheck:
   225 0000386D 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile  ;Is this a FCB opened file?
   226 00003873 75F3                <1>     jnz .proceedDisk
   227 00003875 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]   ;Get the open mode
   228                              <1>     ;Check it's share mode
   229 00003879 25F0000000          <1>     and eax, 0F0h    ;Isolate share bits
   230 0000387E 3D40000000          <1>     cmp eax, denyNoneShare  ;Don't deny? Proceed
   231 00003883 7407                <1>     je .netSeek
   232 00003885 3D30000000          <1>     cmp eax, denyReadShare
   233 0000388A 75DC                <1>     jne .proceedDisk
   234                              <1> .netSeek:
   235 0000388C B821110000          <1>     mov eax, 1121h  ;Make net seek from end request
   236 00003891 CD2F                <1>     int 2Fh
   237 00003893 73BB                <1>     jnc .seekExit ;If the request returns with CF clear, there was no error
   238 00003895 E99B3E0000          <1>     jmp extErrExit
   239                              <1> 
   240                              <1> 
   241                              <1> changeFileModeHdl: ;ah = 43h, handle function, CHMOD
   242 0000389A 3C01                <1>     cmp al, 1
   243 0000389C 761F                <1>     jbe .subFuncOk
   244 0000389E B801000000          <1>     mov eax, errInvFnc
   245                              <1> .chmodError:
   246                              <1> ;Call with ax = errorcode
   247 000038A3 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   248 000038AA C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   249 000038B1 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
   250 000038B8 E9783E0000          <1>     jmp extErrExit
   251                              <1> .subFuncOk:
   252 000038BD 4889D6              <1>     mov rsi, rdx
   253 000038C0 89C3                <1>     mov ebx, eax    ;Store function code in bl
   254 000038C2 53                  <1>     push rbx
   255 000038C3 51                  <1>     push rcx
   256 000038C4 E87C3B0000          <1>     call checkPathspecOK
   257 000038C9 7309                <1>     jnc .pathOk ;Path ok save for potentially having wildcards
   258                              <1> .badPath:
   259 000038CB 59                  <1>     pop rcx
   260 000038CC 5B                  <1>     pop rbx
   261 000038CD B805000000          <1>     mov eax, errAccDen
   262 000038D2 EBCF                <1>     jmp short .chmodError
   263                              <1> .pathOk:
   264 000038D4 E8463C0000          <1>     call checkPathNet 
   265 000038D9 74F0                <1>     jz .badPath ;Or Net paths
   266 000038DB E8203C0000          <1>     call scanPathWC
   267 000038E0 72E9                <1>     jc .badPath ;Dont allow wildcards
   268 000038E2 488D3D(1E050000)    <1>     lea rdi, buffer1
   269 000038E9 52                  <1>     push rdx
   270 000038EA C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive    ;Inclusive search
   271 000038F1 E8D0DBFFFF          <1>     call getFilePath    ;Get the path for the file to delete
   272 000038F6 5A                  <1>     pop rdx
   273 000038F7 59                  <1>     pop rcx
   274 000038F8 5B                  <1>     pop rbx
   275 000038F9 0F82363E0000        <1>     jc extErrExit   ;If the file or path was not found or error, bye bye
   276                              <1>     ;In the case of a wildcard, recall this will return the first file
   277 000038FF 803D(04070000)FF    <1>     cmp byte [fileExist], -1
   278 00003906 759B                <1>     jnz .chmodError
   279                              <1> 
   280 00003908 E8C3380000          <1>     call testCDSNet
   281 0000390D 730C                <1>     jnc .notNet
   282 0000390F 750A                <1>     jnz .notNet ;This type of net ok
   283 00003911 B805000000          <1>     mov eax, errAccDen
   284 00003916 E91A3E0000          <1>     jmp extErrExit
   285                              <1> .notNet:
   286 0000391B 84DB                <1>     test bl, bl
   287 0000391D 7526                <1>     jnz .setAttribs
   288                              <1>     ;Get attribs here
   289 0000391F 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   290 00003925 7412                <1>     jz .getDiskAttribs
   291 00003927 B80F110000          <1>     mov eax, 110Fh  ;Get attributes and size in edi
   292 0000392C CD2F                <1>     int 2Fh
   293 0000392E 0F82013E0000        <1>     jc extErrExit
   294 00003934 E9EE3D0000          <1>     jmp extGoodExit
   295                              <1> .getDiskAttribs:
   296 00003939 0FB605(65060000)    <1>     movzx eax, byte [curDirCopy + fatDirEntry.attribute]   ;Get disk attributes
   297 00003940 E9E23D0000          <1>     jmp extGoodExit
   298                              <1> 
   299                              <1> .setAttribs:
   300                              <1>     ;Set attribs here
   301 00003945 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   302 0000394B 7417                <1>     jz .setDiskAttribs
   303 0000394D 0FB7C9              <1>     movzx ecx, cx
   304 00003950 51                  <1>     push rcx    ;Push attributes on stack in zero extended qword
   305 00003951 B80E110000          <1>     mov eax, 110Eh
   306 00003956 CD2F                <1>     int 2Fh
   307 00003958 59                  <1>     pop rcx
   308 00003959 0F82D63D0000        <1>     jc extErrExit
   309 0000395F E9C33D0000          <1>     jmp extGoodExit
   310                              <1> .setDiskAttribs:
   311 00003964 E8AE080000          <1>     call checkExclusiveOwnFile
   312 00003969 730A                <1>     jnc .okToSet
   313 0000396B B820000000          <1>     mov eax, errShrVio
   314 00003970 E9C03D0000          <1>     jmp extErrExit
   315                              <1> .okToSet:
   316 00003975 E8703D0000          <1>     call dosCrit1Enter
   317 0000397A E827EAFFFF          <1>     call getDiskDirectoryEntry  ;Get ptr to entry in rsi
   318 0000397F 722D                <1>     jc .setErrorNoFlush
   319 00003981 F6C118              <1>     test cl, volLabelFile | directoryFile
   320 00003984 740A                <1>     jz .set
   321 00003986 B805000000          <1>     mov eax, errAccDen
   322 0000398B E91E000000          <1>     jmp .setErrorNoFlush
   323                              <1> .set:
   324 00003990 8A6E0B              <1>     mov ch, byte [rsi + fatDirEntry.attribute]  ;Get attribs
   325 00003993 80E518              <1>     and ch, (volLabelFile | directoryFile)    ;Keep these two bits
   326 00003996 08E9                <1>     or cl, ch
   327 00003998 884E0B              <1>     mov byte [rsi + fatDirEntry.attribute], cl  ;Set new bits
   328 0000399B E886CDFFFF          <1>     call flushAllBuffersForDPB
   329 000039A0 720C                <1>     jc .setError
   330 000039A2 E84D3D0000          <1>     call dosCrit1Exit
   331 000039A7 31C0                <1>     xor eax, eax
   332 000039A9 E9793D0000          <1>     jmp extGoodExit
   333                              <1> .setError:
   334                              <1> 
   335                              <1> .setErrorNoFlush:
   336 000039AE E8413D0000          <1>     call dosCrit1Exit
   337 000039B3 E97D3D0000          <1>     jmp extErrExit
   338                              <1> 
   339                              <1> duplicateHandle:   ;ah = 45h, handle function
   340                              <1> ;Input: bx = Handle to duplicate
   341                              <1> ;Output: If ok then ax = New handle
   342 000039B8 0FB7C3              <1>     movzx eax, bx    ;Move handle to ax
   343 000039BB E82C170000          <1>     call findFreeJFTEntry    ;First find a free space in the JFT in rdi
   344                              <1> .duplicateCommon:
   345 000039C0 0F826F3D0000        <1>     jc extErrExit   ;Exit if no space
   346 000039C6 4889FE              <1>     mov rsi, rdi    ;Save the free space in rsi
   347 000039C9 93                  <1>     xchg eax, ebx
   348 000039CA E834170000          <1>     call getSFTPtr    ;Get the pointer to the SFT in rdi
   349 000039CF 0F82603D0000        <1>     jc extErrExit
   350 000039D5 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Increase the number of handles in SFT
   351 000039D8 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   352 000039DE 7505                <1>     jnz .netFile
   353 000039E0 E8010A0000          <1>     call openDriverMux
   354                              <1> .netFile:
   355 000039E5 E8CD160000          <1>     call getJFTPtr
   356 000039EA 8A1F                <1>     mov bl, byte [rdi]
   357 000039EC 881E                <1>     mov byte [rsi], bl
   358 000039EE E9343D0000          <1>     jmp extGoodExit     ;Return handle in ax the entry in the JFT 
   359                              <1> 
   360                              <1> forceDuplicateHdl: ;ah = 46h, handle function
   361                              <1> ;Input: bx = Handle to duplicate
   362                              <1> ;       cx = Handle to close and replace with a duplicate of bx
   363                              <1>     ;First we close cx if it exists
   364 000039F3 0FB7C9              <1>     movzx ecx, cx
   365 000039F6 53                  <1>     push rbx
   366 000039F7 51                  <1>     push rcx
   367 000039F8 89CB                <1>     mov ebx, ecx
   368 000039FA E840FDFFFF          <1>     call closeFileHdl   ;Close handle 
   369 000039FF 5B                  <1>     pop rbx
   370 00003A00 58                  <1>     pop rax
   371 00003A01 E8B1160000          <1>     call getJFTPtr  ;Get a pointer to bx in rdi, destination for copy
   372 00003A06 EBB8                <1>     jmp short duplicateHandle.duplicateCommon
   373                              <1> 
   374                              <1> findFirstFileHdl:  ;ah = 4Eh, handle function, Find First Matching File
   375                              <1> ;Input: cx = Search Attributes, cl only used
   376                              <1> ;       rdx = Ptr to path to file to look for
   377                              <1> ;       al = Document as needing to be 0 for now
   378                              <1> ;Return:
   379                              <1> ;Data in the DTA or error through AX with CF=CY
   380                              <1> ;CAVEATS!
   381                              <1> ;DTA:attribFnd = 40h => Char dev
   382                              <1> ;DTA:driveNum = Bit 7 set => Network redir drive
   383 00003A08 880D(FC060000)      <1>     mov byte [searchAttr], cl
   384 00003A0E 4889D6              <1>     mov rsi, rdx
   385 00003A11 E82F3A0000          <1>     call checkPathspecOK
   386 00003A16 730C                <1>     jnc .pathspecOk ;Path ok save for potentially having wildcards
   387 00003A18 740A                <1>     jz .pathspecOk  ;If ZF=ZE, then we had wildcards in last part which is ok
   388                              <1> .badPath:
   389 00003A1A B805000000          <1>     mov eax, errAccDen  ;Gets xlat to errNoFil
   390 00003A1F E9113D0000          <1>     jmp extErrExit
   391                              <1> .pathspecOk:
   392 00003A24 FF35(17040000)      <1>     push qword [currentDTA]
   393 00003A2A 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   394 00003A31 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   395 00003A38 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Build the full path here
   396 00003A3F E882DAFFFF          <1>     call getFilePath
   397                              <1> .findfileExit:
   398 00003A44 8F05(17040000)      <1>     pop qword [currentDTA]
   399 00003A4A 0F82E53C0000        <1>     jc extErrExit
   400 00003A50 488D3D(2F060000)    <1>     lea rdi, dosffblock
   401 00003A57 57                  <1>     push rdi
   402 00003A58 E8CAD9FFFF          <1>     call setupFFBlock
   403 00003A5D 5E                  <1>     pop rsi ;Copy the internal ffblock block to the user's DTA
   404 00003A5E 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
   405 00003A65 B92B000000          <1>     mov ecx, ffBlock_size
   406 00003A6A F3A4                <1>     rep movsb   ;Copy the whole block. 
   407                              <1> ;Ensure ffblock's non-reserved fields are filled from dir entry before returning
   408 00003A6C 31C0                <1>     xor eax, eax    ;Return value
   409 00003A6E E9B43C0000          <1>     jmp extGoodExit ;Exit well
   410                              <1> 
   411                              <1> findNextFileHdl:   ;ah = 4Fh, handle function, Find Next Matching File
   412                              <1> ;Input: DTA has the find first block from the previous search
   413 00003A73 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
   414 00003A7A 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Copy the ffblock from the current DTA into my copy
   415 00003A81 B92B000000          <1>     mov ecx, ffBlock_size
   416 00003A86 F3A4                <1>     rep movsb
   417 00003A88 FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
   418 00003A8E 488D3D(2F060000)    <1>     lea rdi, dosffblock ;Use the dosFFblock as the DTA
   419 00003A95 48893D(17040000)    <1>     mov qword [currentDTA], rdi
   420 00003A9C E859D5FFFF          <1>     call findNextMain
   421 00003AA1 EBA1                <1>     jmp short findFirstFileHdl.findfileExit
   422                              <1> 
   423                              <1> renameFile:        ;ah = 56h
   424                              <1> ;Input: rdx -> Filespec to rename
   425                              <1> ;       rdi -> New filespec
   426                              <1> ;Wildcards are permissiable in the last path componant IFF server invoke!
   427 00003AA3 4889D6              <1>     mov rsi, rdx
   428 00003AA6 BB16000000          <1>     mov ebx, dirInclusive
   429 00003AAB F605(02070000)FF    <1>     test byte [dosInvoke], -1
   430 00003AB2 0F44CB              <1>     cmovz ecx, ebx  ;If not server, store this value instead
   431 00003AB5 880D(FC060000)      <1>     mov byte [searchAttr], cl
   432                              <1>     ;Step 0, verify both paths provided are valid
   433 00003ABB E855000000          <1>     call .renamePathCheck   ;Preserves rsi and rdi, check rsi path
   434 00003AC0 7249                <1>     jc .accDenError
   435 00003AC2 56                  <1>     push rsi
   436 00003AC3 4889FE              <1>     mov rsi, rdi    ;Now check rdi path
   437 00003AC6 E84A000000          <1>     call .renamePathCheck
   438 00003ACB 5E                  <1>     pop rsi
   439 00003ACC 723D                <1>     jc .accDenError
   440                              <1>     ;Now we canonicalise the filenames to make life easy
   441 00003ACE 56                  <1>     push rsi
   442 00003ACF 4889FE              <1>     mov rsi, rdi
   443 00003AD2 488D3D(9E050000)    <1>     lea rdi, buffer2
   444 00003AD9 E868DAFFFF          <1>     call canonicaliseFileName   ;Now canonicalise rdi path
   445 00003ADE 5E                  <1>     pop rsi
   446 00003ADF 722A                <1>     jc .accDenError
   447                              <1>     ;Now test if first file exists.
   448 00003AE1 FF35(1E060000)      <1>     push qword [fname1Ptr]  ;Move the pointer to its var position
   449 00003AE7 8F05(26060000)      <1>     pop qword [fname2Ptr]
   450 00003AED 488D3D(1E050000)    <1>     lea rdi, buffer1
   451 00003AF4 E84DDAFFFF          <1>     call canonicaliseFileName ;rdi = Buffer to use, rsi = filename
   452 00003AF9 7210                <1>     jc .accDenError 
   453 00003AFB E893030000          <1>     call renameMain ;Both pathnames made good and copied internally, lets go!!
   454 00003B00 0F822F3C0000        <1>     jc extErrExit
   455 00003B06 E91C3C0000          <1>     jmp extGoodExit
   456                              <1> .accDenError:
   457 00003B0B B805000000          <1>     mov eax, errAccDen
   458 00003B10 E9203C0000          <1>     jmp extErrExit
   459                              <1> .renamePathCheck:
   460                              <1> ;Checks if the pathspec in rsi is OK
   461 00003B15 56                  <1>     push rsi
   462 00003B16 57                  <1>     push rdi
   463 00003B17 E829390000          <1>     call checkPathspecOK
   464 00003B1C 5F                  <1>     pop rdi
   465 00003B1D 5E                  <1>     pop rsi
   466 00003B1E 730D                <1>     jnc .pathOk     ;Path ok 
   467 00003B20 7509                <1>     jnz .badPath    ;If ZF=NZ, then the path was bad
   468                              <1>     ;Here the path has wildcards in the last portion. Check for netInvoke
   469 00003B22 F605(02070000)FF    <1>     test byte [dosInvoke], -1
   470 00003B29 7502                <1>     jnz .pathOk ;If this is -1, server invoke, wildcards are OK
   471                              <1> .badPath:
   472 00003B2B F9                  <1>     stc
   473                              <1>     return
    13                              <2> %%_ret:
    14 00003B2C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   474                              <1> .pathOk:
   475 00003B2D F8                  <1>     clc
   476                              <1>     return
    13                              <2> %%_ret:
    14 00003B2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   477                              <1> 
   478                              <1> getSetFileDateTime: ;ah = 57h
   479 00003B2F 3C01                <1>     cmp al, 1
   480 00003B31 760A                <1>     jbe .oksubfun
   481 00003B33 B801000000          <1>     mov eax, errInvFnc
   482 00003B38 E9F83B0000          <1>     jmp extErrExit
   483                              <1> .oksubfun:
   484 00003B3D E8C1150000          <1>     call getSFTPtr  ;Preserves al unless error returned
   485 00003B42 0F82ED3B0000        <1>     jc extErrExit ;al (eax) has error code for bad file handle
   486 00003B48 3C01                <1>     cmp al, 1
   487 00003B4A 7426                <1>     je .setTimeDate
   488                              <1>     ;Here we get the Time/Date
   489 00003B4C E8993B0000          <1>     call dosCrit1Enter
   490 00003B51 0FB74F13            <1>     movzx ecx, word [rdi + sft.wTime]
   491 00003B55 0FB75715            <1>     movzx edx, word [rdi + sft.wDate]
   492 00003B59 E8963B0000          <1>     call dosCrit1Exit
   493 00003B5E E801370000          <1>     call getUserRegs
   494 00003B63 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   495 00003B67 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   496 00003B6B 31C0                <1>     xor eax, eax
   497 00003B6D E9B53B0000          <1>     jmp extGoodExit
   498                              <1> .setTimeDate:
   499                              <1>     ;Here we set the Time/Date
   500 00003B72 E8733B0000          <1>     call dosCrit1Enter
   501 00003B77 66894F13            <1>     mov word [rdi + sft.wTime], cx
   502 00003B7B 66895715            <1>     mov word [rdi + sft.wDate], dx
   503 00003B7F 31C0                <1>     xor eax, eax
   504 00003B81 FF15(2F010000)      <1>     call qword [updateDirShare]
   505                              <1>     ;Clear the flag to indicate that the dir needs to be updated and dont 
   506                              <1>     ; further change the file time since we have manually overridden it 
   507                              <1>     ; with the time specified
   508 00003B87 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush  ;Clear flag to sync
   509 00003B8D 66814F050040        <1>     or word [rdi + sft.wDeviceInfo], blokNoDTonClose    ;Force it to this time
   510 00003B93 E85C3B0000          <1>     call dosCrit1Exit
   511 00003B98 31C0                <1>     xor eax, eax
   512 00003B9A E9883B0000          <1>     jmp extGoodExit
   513                              <1> 
   514                              <1> createUniqueFile:  ;ah = 5Ah, attempts to make a file with a unique filename
   515                              <1> ;Uses the clock to do it's bidding
   516                              <1> ;cx = file attribute 
   517                              <1> ;rdx -> ASCIZ path ending with a '\' + 13 zero bytes to receive the generated 
   518                              <1> ;       filename
   519 00003B9F 66F7C1D8FF          <1>     test cx, ~(archiveFile | systemFile | hiddenFile | readOnlyFile)
   520 00003BA4 740A                <1>     jz .validAttribs
   521 00003BA6 B805000000          <1>     mov eax, errAccDen
   522 00003BAB E9853B0000          <1>     jmp extErrExit
   523                              <1> .validAttribs:
   524 00003BB0 4C0FB7C1            <1>     movzx r8, cx ;Save attributes in r8
   525 00003BB4 4989D1              <1>     mov r9, rdx  ;Save pointer to the path in r9
   526 00003BB7 B933000000          <1>     mov ecx, 64-13  ;First null must be at furthest, this many chars from rdx
   527 00003BBC 31C0                <1>     xor eax, eax
   528 00003BBE 4889D7              <1>     mov rdi, rdx
   529 00003BC1 F2AE                <1>     repne scasb
   530 00003BC3 85C9                <1>     test ecx, ecx
   531 00003BC5 750A                <1>     jnz .nullFnd
   532                              <1>     ;Bad path
   533 00003BC7 B803000000          <1>     mov eax, errPnf
   534 00003BCC E9643B0000          <1>     jmp extErrExit
   535                              <1> .nullFnd:
   536 00003BD1 48FFCF              <1>     dec rdi
   537 00003BD4 0FB647FF            <1>     movzx eax, byte [rdi - 1]
   538 00003BD8 E8A8370000          <1>     call swapPathSeparator
   539 00003BDD 7403                <1>     jz .pathsepFnd
   540                              <1>     ;If no pathsep found, force one at rdi
   541 00003BDF B05C                <1>     mov al, "\"
   542 00003BE1 AA                  <1>     stosb
   543                              <1> .pathsepFnd:
   544 00003BE2 4889FD              <1>     mov rbp, rdi    ;Save in rbx the position of the start of the filename
   545                              <1> .fileCreateLoop:
   546 00003BE5 55                  <1>     push rbp
   547 00003BE6 E868000000          <1>     call .uniqueTimeGet ;Get time in CX:DX
   548 00003BEB 5D                  <1>     pop rbp
   549 00003BEC 0FB7C1              <1>     movzx eax, cx
   550 00003BEF 0FB7D2              <1>     movzx edx, dx
   551 00003BF2 C1E010              <1>     shl eax, 10h
   552 00003BF5 09D0                <1>     or eax, edx  ;Add the bits of dx too
   553 00003BF7 E831000000          <1>     call .writeNybbles
   554 00003BFC 31C0                <1>     xor eax, eax
   555 00003BFE AA                  <1>     stosb   ;Store terminating null
   556 00003BFF 4489C1              <1>     mov ecx, r8d    ;Get the saved attribute back
   557 00003C02 4C89CA              <1>     mov rdx, r9     ;Get the pointer to the path
   558 00003C05 55                  <1>     push rbp
   559 00003C06 E85C000000          <1>     call createNewFile
   560 00003C0B 5D                  <1>     pop rbp
   561 00003C0C 0F83153B0000        <1>     jnc extGoodExit ;If the create succeeded, exit directly!
   562 00003C12 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] ;Get pre translated error code
   563 00003C19 3D05000000          <1>     cmp eax, errAccDen
   564 00003C1E 74C5                <1>     je .fileCreateLoop
   565 00003C20 3D50000000          <1>     cmp eax, errFilExist
   566 00003C25 74BE                <1>     je .fileCreateLoop
   567 00003C27 F9                  <1>     stc
   568 00003C28 E9083B0000          <1>     jmp extErrExit  ;Exit with the error from the ExCde
   569                              <1> .writeNybbles:
   570                              <1> ;Write the nybbles of eax at rdi
   571 00003C2D B908000000          <1>     mov ecx, 8  ;8 nybbles per dword
   572                              <1> .wnLp:
   573 00003C32 C1C004              <1>     rol eax, 4  ;Roll eax left by 4
   574 00003C35 50                  <1>     push rax
   575 00003C36 250F000000          <1>     and eax, 0Fh    ;Save low nybble only
   576 00003C3B 0530000000          <1>     add eax, '0'    ;Convert to ascii digit
   577 00003C40 3D39000000          <1>     cmp eax, '9'
   578 00003C45 7605                <1>     jbe .notExtDigit
   579 00003C47 0508000000          <1>     add eax, 'A' - '9' ;Convert to a letter
   580                              <1> .notExtDigit:
   581 00003C4C AA                  <1>     stosb   ;Store the digit
   582 00003C4D 58                  <1>     pop rax
   583 00003C4E FFC9                <1>     dec ecx
   584 00003C50 75E0                <1>     jnz .wnLp
   585                              <1>     return
    13                              <2> %%_ret:
    14 00003C52 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   586                              <1> 
   587                              <1> .uniqueTimeGet:
   588 00003C53 E859F3FFFF          <1>     call readDateTimeRecord ;Update date if necessary, time in CLOCKrecrd
   589 00003C58 668B0D(18050000)    <1>     mov cx, word [CLOCKrecrd + clkStruc.minutes]
   590 00003C5F 668B15(1A050000)    <1>     mov dx, word [CLOCKrecrd + clkStruc.hseconds]
   591                              <1>     return
    13                              <2> %%_ret:
    14 00003C66 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   592                              <1> 
   593                              <1> createNewFile:     ;ah = 5Bh
   594 00003C67 51                  <1>     push rcx    ;Save file attributes on stack
   595 00003C68 488D0DD5070000      <1>     lea rcx, createNewMain
   596 00003C6F C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive ;Inclusive with dir (handled later)
   597 00003C76 E99FF9FFFF          <1>     jmp openFileHdl.openCommon
   598                              <1> 
   599                              <1> lockUnlockFile:    ;ah = 5Ch
   600                              <1> ;ah = 5Ch
   601                              <1> ;al = subfunction
   602                              <1> ;       00h lock region of file
   603                              <1> ;       01h unlock region of file
   604                              <1> ;ebx = file handle
   605                              <1> ;ecx = start offset of region within file
   606                              <1> ;edi = length of region in bytes
   607 00003C7B 3C01                <1>     cmp al, 1
   608 00003C7D 7757                <1>     ja .badFunction
   609 00003C7F 57                  <1>     push rdi
   610 00003C80 E89A140000          <1>     call derefSFTPtr
   611 00003C85 730B                <1>     jnc .validHdl
   612 00003C87 58                  <1>     pop rax ;Discard the qword on the stack
   613 00003C88 B806000000          <1>     mov eax, errBadHdl
   614 00003C8D E9A33A0000          <1>     jmp extErrExit
   615                              <1> .validHdl:
   616 00003C92 84C0                <1>     test al, al ;Check if al = 0
   617 00003C94 58                  <1>     pop rax ;Get the length of the file region in bytes in eax
   618 00003C95 7424                <1>     jz .lockFileRegion
   619 00003C97 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   620 00003C9D 740B                <1>     jz .unlockShare ;Jump if a local file only
   621 00003C9F 50                  <1>     push rax
   622 00003CA0 B80B110000          <1>     mov eax, 110Bh     ;Unlock Net file region
   623 00003CA5 CD2F                <1>     int 2Fh
   624 00003CA7 5B                  <1>     pop rbx
   625 00003CA8 EB06                <1>     jmp short .exitSelect
   626                              <1> .unlockShare:
   627 00003CAA FF15(F7000000)      <1>     call qword [unlockFileShare]    ;Call share hook
   628                              <1> .exitSelect:
   629 00003CB0 0F827F3A0000        <1>     jc extErrExit
   630 00003CB6 E96C3A0000          <1>     jmp extGoodExit
   631                              <1> .lockFileRegion:
   632 00003CBB 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   633 00003CC1 740B                <1>     jz .lockShare   ;Jump if a local file only
   634 00003CC3 50                  <1>     push rax
   635 00003CC4 B80A110000          <1>     mov eax, 110Ah  ;Lock net file region
   636 00003CC9 CD2F                <1>     int 2Fh
   637 00003CCB 5B                  <1>     pop rbx
   638 00003CCC EBE2                <1>     jmp short .exitSelect
   639                              <1> .lockShare:
   640 00003CCE FF15(EF000000)      <1>     call qword [lockFileShare]  ;Call share hook
   641 00003CD4 EBDA                <1>     jmp short .exitSelect
   642                              <1> .badFunction:
   643 00003CD6 B801000000          <1>     mov eax, errInvFnc
   644 00003CDB 668905(0B040000)    <1>     mov word [errorExCde], ax
   645 00003CE2 E94E3A0000          <1>     jmp extErrExit
   646                              <1> 
   647                              <1> setHandleCount:    ;ah = 67h
   648                              <1> ;Input: bx = Size of new file handle table for process
   649                              <1> ;Output: CF=NC -> Ok to make more handles
   650                              <1> ;        CF=CY -> ax = Error code
   651                              <1> ;Five cases to consider:
   652                              <1> ;       1) Allocating a new block of memory, copying PSP JFT to it, inc hdl cnt
   653                              <1> ;       2) Freeing a block and returning to the PSP JFT, dec hdl cnt x
   654                              <1> ;       3) Extending an external block, inc hdl cnt. If realloc fails, goto 5)
   655                              <1> ;       4) Reducing an external block, dec hdl cnt, no realloc.
   656                              <1> ;   Special case below, cannot be enacted directly by caller.
   657                              <1> ;       5) Freeing an external block for a bigger external block, inc hdl cnt
   658 00003CE7 0FB7DB              <1>     movzx ebx, bx   ;Zero extend to use ebx/rbx
   659 00003CEA 488B2D(1F040000)    <1>     mov rbp, qword [currentPSP] ;Get a ptr to the currentPSP
   660 00003CF1 663B5D4E            <1>     cmp bx, word [rbp + psp.jftSize]    ;Requesting more handles than we have?
   661 00003CF5 7765                <1>     ja short .moreHdlsReq
   662 00003CF7 6681FB1400          <1>     cmp bx, dfltJFTsize ;Requesting more than the default JFT amount?
   663 00003CFC 771A                <1>     ja short .reduceExternal
   664                              <1>     ;Here if 20 handles or less requested
   665 00003CFE 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;If this is 20 or less, exit
   666 00003D04 7728                <1>     ja short .reduceFree  ;Copying back to the JFT
   667 00003D06 7406                <1>     je short .exitGood    ;Else we are already in the PSP
   668 00003D08 66C7454E1400        <1>     mov word [rbp + psp.jftSize], dfltJFTsize   ;Else, replace with dflt
   669                              <1> .exitGood:
   670 00003D0E E9143A0000          <1>     jmp extGoodExit
   671                              <1> .exitBad:
   672 00003D13 E91D3A0000          <1>     jmp extErrExit
   673                              <1> .reduceExternal:
   674                              <1> ;We try to reallocate the block to be more appropriate for the new maxhdls.
   675                              <1> ;If it fails, no big deal since we manually prevent the user from using more
   676                              <1> ; files. If we then grow this block again, realloc will try to grow it again
   677                              <1> ; and failing that, it will free it and then allocate a new block.
   678 00003D18 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   679 00003D1C E8E9000000          <1>     call .checkOpenHandles
   680 00003D21 72F0                <1>     jc short .exitBad
   681                              <1>     ;Recall ebx has the numebr of handles here
   682 00003D23 E890000000          <1>     call .reallocBlock  ;Try realloc size to be more ok. If it fails, no biggie
   683 00003D28 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Store new handle cnt
   684 00003D2C EBE0                <1>     jmp short .exitGood
   685                              <1> .reduceFree:
   686                              <1> ;Entered once we know that we have an external block
   687                              <1> ;Now we close all handles above JFT size
   688 00003D2E 488D7D2A            <1>     lea rdi, qword [rbp + psp.externalJFTPtr]   ;Get destination
   689 00003D32 488B37              <1>     mov rsi, qword [rdi]    ;Get source 
   690 00003D35 E8D0000000          <1>     call .checkOpenHandles
   691 00003D3A 72D7                <1>     jc short .exitBad
   692 00003D3C BB14000000          <1>     mov ebx, dfltJFTsize
   693 00003D41 89D9                <1>     mov ecx, ebx    ;Move count of handles into ecx
   694                              <1> ;No open handles in range to be freed, now we copy the first 20 handles over
   695 00003D43 E8B9000000          <1>     call .copyBlock
   696                              <1>     ;Now we can free the old block
   697 00003D48 4989F0              <1>     mov r8, rsi
   698 00003D4B 53                  <1>     push rbx
   699 00003D4C E8EF1A0000          <1>     call freeMemory
   700 00003D51 5B                  <1>     pop rbx
   701 00003D52 72BF                <1>     jc short .exitBad
   702 00003D54 66895D4E            <1>     mov word [rbp + psp.jftSize], bx   ;Now we have dflt number of hdls
   703 00003D58 31C0                <1>     xor eax, eax
   704                              <1> .exitGood2:
   705 00003D5A EBB2                <1>     jmp short .exitGood
   706                              <1> .moreHdlsReq:
   707 00003D5C 81FBFFFF0000        <1>     cmp ebx, 0FFFFh ;HARD LIMIT ON NUMBER OF HANDLES IS (WORD)-1
   708 00003D62 7507                <1>     jne short .okToExpand
   709 00003D64 B801000000          <1>     mov eax, errInvFnc
   710                              <1> .exitBad2:
   711 00003D69 EBA8                <1>     jmp short .exitBad
   712                              <1> .okToExpand:
   713                              <1> ;Need to check if we are external and reallocating. 
   714                              <1> ;   If we are, can we realloc or do we need to free and save?
   715 00003D6B 66817D4E1400        <1>     cmp word [rbp + psp.jftSize], dfltJFTsize   ;Are we in JFT?
   716 00003D71 762E                <1>     jbe short .moreFromJFT
   717 00003D73 488B752A            <1>     mov rsi, qword [rbp + psp.externalJFTPtr]   ;Get xtrnal pointer
   718 00003D77 E83C000000          <1>     call .reallocBlock
   719 00003D7C 7390                <1>     jnc short .exitGood
   720 00003D7E E84D000000          <1>     call .getBlock  ;rsi is preserved across the call
   721 00003D83 728E                <1>     jc short .exitBad
   722 00003D85 4989F0              <1>     mov r8, rsi ;Free the source block
   723 00003D88 53                  <1>     push rbx
   724 00003D89 57                  <1>     push rdi    ;Save the new pointer here
   725 00003D8A 55                  <1>     push rbp
   726 00003D8B E8B01A0000          <1>     call freeMemory
   727 00003D90 5D                  <1>     pop rbp
   728 00003D91 5F                  <1>     pop rdi
   729 00003D92 5B                  <1>     pop rbx
   730 00003D93 7317                <1>     jnc short .freeOk ;Free'd the original block
   731 00003D95 50                  <1>     push rax    ;Save error code on stack
   732 00003D96 4989F8              <1>     mov r8, rdi ;Free the new block
   733 00003D99 E8A21A0000          <1>     call freeMemory
   734 00003D9E 58                  <1>     pop rax
   735 00003D9F EBC8                <1>     jmp short .exitBad2
   736                              <1> .moreFromJFT:
   737 00003DA1 488D752A            <1>     lea rsi, qword [rbp + psp.jobFileTbl]   ;Get the ptr to the current JFT
   738 00003DA5 E826000000          <1>     call .getBlock
   739 00003DAA 72BD                <1>     jc short .exitBad2
   740                              <1> .freeOk:
   741 00003DAC 66895D4E            <1>     mov word [rbp + psp.jftSize], bx    ;Set the new count
   742 00003DB0 48897D2A            <1>     mov qword [rbp + psp.externalJFTPtr], rdi
   743 00003DB4 31C0                <1>     xor eax, eax
   744 00003DB6 EBA2                <1>     jmp short .exitGood2
   745                              <1> .reallocBlock:
   746                              <1> ;Input:
   747                              <1> ;   rsi -> Source block to reallocate
   748                              <1> ;   ebx = Number of handles
   749                              <1> ;   rbp -> Current PSP
   750                              <1> ;Output: CF=NC => rsi -> Source block reallocated in size
   751                              <1> ;                 ebx = Number of handles
   752                              <1> ;        CF=CY => Error, EAX has error code
   753 00003DB8 56                  <1>     push rsi ;Save external pointer on stack
   754 00003DB9 53                  <1>     push rbx    ;Save number of handles on stack
   755 00003DBA 55                  <1>     push rbp
   756 00003DBB 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   757 00003DC1 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   758 00003DC4 4989F0              <1>     mov r8, rsi
   759 00003DC7 E87C1B0000          <1>     call reallocMemory
   760 00003DCC 5D                  <1>     pop rbp
   761 00003DCD 5B                  <1>     pop rbx
   762 00003DCE 5E                  <1>     pop rsi ;Get external pointer back in rsi
   763                              <1>     return
    13                              <2> %%_ret:
    14 00003DCF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   764                              <1> .getBlock:
   765                              <1> ;rsi -> Source block for copy 
   766                              <1> ;ebx = Number of new handles
   767                              <1> ;Output: rsi and ebx as before
   768                              <1> ;        rdi -> New block
   769                              <1> ;IF CF=CY, bad exit
   770 00003DD0 53                  <1>     push rbx    ;bx has the number of handles we want
   771 00003DD1 56                  <1>     push rsi
   772 00003DD2 55                  <1>     push rbp
   773 00003DD3 81C311000000        <1>     add ebx, 11h    ;Round up into next paragraph
   774 00003DD9 C1EB04              <1>     shr ebx, 4      ;Get number of paragraphs
   775 00003DDC 89D9                <1>     mov ecx, ebx
   776 00003DDE C1E104              <1>     shl ecx, 4  ;Get bytes being allocated
   777 00003DE1 51                  <1>     push rcx    ;Save the actual number of bytes in the alloc
   778 00003DE2 E855180000          <1>     call allocateMemory ;Allocate memory 
   779 00003DE7 59                  <1>     pop rcx ;Get back actual number of bytes allocated
   780 00003DE8 5D                  <1>     pop rbp ;Get the PSP pointer back
   781 00003DE9 5E                  <1>     pop rsi ;Get the source pointer back
   782 00003DEA 5B                  <1>     pop rbx ;Get the number of handles to allocate back
   783                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003DEB 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003DED C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   784 00003DEE 4889C7              <1>     mov rdi, rax    ;Move the ptr of the new block to rdi
   785 00003DF1 57                  <1>     push rdi
   786 00003DF2 31C0                <1>     xor eax, eax
   787 00003DF4 FFC8                <1>     dec eax
   788 00003DF6 F3AA                <1>     rep stosb   ;Setup the new memory block with all -1's
   789 00003DF8 5F                  <1>     pop rdi
   790 00003DF9 89D9                <1>     mov ecx, ebx    ;Get the new number of handles to copy over
   791 00003DFB E801000000          <1>     call .copyBlock ;Copy all the handles over
   792                              <1>     return
    13                              <2> %%_ret:
    14 00003E00 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   793                              <1> .copyBlock:
   794                              <1> ;Input: rsi -> Source block
   795                              <1> ;       rdi -> Destination block
   796                              <1> ;       ecx = Number of handles to copy
   797 00003E01 56                  <1>     push rsi
   798 00003E02 57                  <1>     push rdi
   799 00003E03 51                  <1>     push rcx
   800 00003E04 F3A4                <1>     rep movsb
   801 00003E06 59                  <1>     pop rcx
   802 00003E07 5F                  <1>     pop rdi
   803 00003E08 5E                  <1>     pop rsi
   804                              <1>     return
    13                              <2> %%_ret:
    14 00003E09 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   805                              <1> .checkOpenHandles:
   806                              <1> ;Checks for open handles in the range that is to be freed.
   807                              <1> ;If any found, error exit
   808                              <1> ;Input: rsi -> Where to start searching
   809 00003E0A 56                  <1>     push rsi
   810 00003E0B 0FB74D4E            <1>     movzx ecx, word [rbp + psp.jftSize] 
   811                              <1> .cohLoop:
   812 00003E0F 803EFF              <1>     cmp byte [rsi], -1
   813 00003E12 7509                <1>     jne .checkOpenHandlesBadExit
   814 00003E14 48FFC6              <1>     inc rsi
   815 00003E17 FFC9                <1>     dec ecx
   816 00003E19 75F4                <1>     jnz .cohLoop
   817 00003E1B 5E                  <1>     pop rsi
   818                              <1>     return
    13                              <2> %%_ret:
    14 00003E1C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   819                              <1> .checkOpenHandlesBadExit:
   820 00003E1D B804000000          <1>     mov eax, errNhl
   821 00003E22 F9                  <1>     stc
   822 00003E23 5E                  <1>     pop rsi
   823                              <1>     return
    13                              <2> %%_ret:
    14 00003E24 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   824                              <1> 
   825                              <1> commitFile:        ;ah = 68h, flushes buffers for handle to disk 
   826                              <1>     ;Input: bx = File to flush
   827 00003E25 E8D9120000          <1>     call getSFTPtr  ;Get sft pointer in rdi
   828 00003E2A 0F8205390000        <1>     jc extErrExit
   829 00003E30 E824110000          <1>     call setCurrentSFT  ;Set as current SFT to ensure it is committed
   830                              <1>     ;Now we check if the device is a char, disk or net file and commit
   831 00003E35 E811000000          <1>     call commitMain
   832 00003E3A 0F82F5380000        <1>     jc extErrExit   ;If an error occured, exit with error code in al
   833                              <1> .exitOk:
   834 00003E40 30C0                <1>     xor al, al
   835 00003E42 E81D340000          <1>     call getUserRegs
   836 00003E47 8026FE              <1>     and byte [rsi + callerFrame], ~1    ;Clear CF
   837                              <1>     return
    13                              <2> %%_ret:
    14 00003E4A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   838                              <1> 
   839                              <1> ;-----------------------------------:
   840                              <1> ;       Main File IO Routines       :
   841                              <1> ;-----------------------------------:
   842                              <1> commitMain:
   843                              <1> ;Commits the current SFT 
   844 00003E4B E811110000          <1>     call getCurrentSFT  ;Gets currentSFT into rdi
   845 00003E50 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
   846 00003E54 F7C3C0000000        <1>     test ebx, devCharDev | blokFileNoFlush
   847                              <1>     retnz   ;Return if nothing has been written or a char dev
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00003E5A 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00003E5C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   848 00003E5D F7C300800000        <1>     test ebx, devRedirDev
   849 00003E63 7408                <1>     jz .notNet
   850                              <1>     ;Commit file net redir call and exit
   851 00003E65 B807110000          <1>     mov eax, 1107h
   852 00003E6A CD2F                <1>     int 2Fh
   853                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003E6C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   854                              <1> .notNet:
   855 00003E6D E878380000          <1>     call dosCrit1Enter  ;Enter to own the disk
   856 00003E72 E873380000          <1>     call dosCrit1Enter  ;Enter for the flush file
   857 00003E77 E89BE5FFFF          <1>     call updateSFTDateTimeFields    ;Update the SFT Time fields
   858 00003E7C B8FFFFFFFF          <1>     mov eax, -1         ;Set a "large" count for open handles
   859 00003E81 E827090000          <1>     call flushFile      ;Now file gets flushed and exit critical section
   860 00003E86 9C                  <1>     pushfq
   861 00003E87 E8CDE7FFFF          <1>     call openSFT        ;Now, reopen the file in the driver 
   862 00003E8C 9D                  <1>     popfq
   863 00003E8D E862380000          <1>     call dosCrit1Exit   ;Release the disk
   864                              <1>     return  ;Propagate CF and AL if needed due to error
    13                              <2> %%_ret:
    14 00003E92 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   865                              <1>     
   866                              <1> renameMain:
   867                              <1> ;Wildcards in the source filename match anything.
   868                              <1> ;Wildcards in the destination filename indicate that we retain the
   869                              <1> ; char in the source filename.
   870                              <1> ;All * wildcards are expanded to ? at this point
   871                              <1> ;
   872                              <1> ;Input:
   873                              <1> ; filenamePtr1 -> Source path + filename pattern
   874                              <1> ; filenamePtr2 -> New path + filename pattern
   875                              <1> ; workingCDS -> CDS for drive we are considering (set by first pathspec)
   876                              <1> ; searchAttr = Set to search attributes (inclusive or by request if netinvoke)
   877 00003E93 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   878 00003E9A E831330000          <1>     call testCDSNet ;CF=NC => Not net
   879 00003E9F 7308                <1>     jnc .notNet
   880 00003EA1 B811110000          <1>     mov eax, 1111h
   881 00003EA6 CD2F                <1>     int 2Fh
   882                              <1>     return
    13                              <2> %%_ret:
    14 00003EA8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   883                              <1> .notNet:
   884                              <1> ;First check if both drives are on the same disk.
   885 00003EA9 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Errors in the disk subsystem
   886 00003EB0 8A05(1E050000)      <1>     mov al, byte [buffer1]  ;Canonicalised pathspecs are uppercased
   887 00003EB6 8A25(9E050000)      <1>     mov ah, byte [buffer2]  ; so can directly compare pathspecs
   888 00003EBC 38E0                <1>     cmp al, ah
   889 00003EBE 7407                <1>     je .sameDrive   ;Drives have to be the same if local file rename
   890 00003EC0 B811000000          <1>     mov eax, errDevUnk
   891 00003EC5 F9                  <1>     stc
   892                              <1>     return
    13                              <2> %%_ret:
    14 00003EC6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   893                              <1> .sameDrive:
   894 00003EC7 E81E380000          <1>     call dosCrit1Enter
   895                              <1> ;Check if either pathsepc is simply X:\,0
   896                              <1> ; If they are, return fail as we cannot rename the root dir
   897 00003ECC 8B05(1E050000)      <1>     mov eax, dword [buffer1]
   898 00003ED2 30C0                <1>     xor al, al
   899 00003ED4 3D003A5C00          <1>     cmp eax, 005C3A00h  ;0,:\,0, are we root?
   900 00003ED9 0F842D030000        <1>     je .renAccDen
   901 00003EDF 8B05(9E050000)      <1>     mov eax, dword [buffer2]
   902 00003EE5 30C0                <1>     xor al, al
   903 00003EE7 3D003A5C00          <1>     cmp eax, 005C3A00h
   904 00003EEC 0F841A030000        <1>     je .renAccDen  ;If this is the root, exit access denied
   905                              <1> ;Find the filename portion in both buffers.
   906 00003EF2 488D3D(1E050000)    <1>     lea rdi, buffer1
   907 00003EF9 E888020000          <1>     call .findNameInPath
   908 00003EFE 48893D(1E060000)    <1>     mov qword [fname1Ptr], rdi  ;Repurpose these vars to hold ptr to filename
   909 00003F05 488D3D(9E050000)    <1>     lea rdi, buffer2
   910 00003F0C E875020000          <1>     call .findNameInPath
   911 00003F11 48893D(26060000)    <1>     mov qword [fname2Ptr], rdi
   912                              <1> ;Move the destination filename for wc expansion to wcd fcb name field
   913 00003F18 488D35(E5060000)    <1>     lea rsi, wcdFcbName
   914 00003F1F 4887F7              <1>     xchg rsi, rdi
   915 00003F22 E878D4FFFF          <1>     call asciiToFCB     ;Copy the ASCIIZ filename to the FCB field
   916                              <1> ;Find First the source file with given attributes!
   917 00003F27 488D3D(1E050000)    <1>     lea rdi, buffer1
   918 00003F2E FF35(1E060000)      <1>     push qword [fname1Ptr]
   919 00003F34 E848D6FFFF          <1>     call getFilePathNoCanon ;We are searching for the file
   920 00003F39 8F05(1E060000)      <1>     pop qword [fname1Ptr]
   921 00003F3F 0F82CC020000        <1>     jc .renErrExit  ;If there is no file or an error, fail it!
   922                              <1> ;Build the rename FFBlock
   923 00003F45 488D3D(92070000)    <1>     lea rdi, renameFFBlk
   924 00003F4C E8D6D4FFFF          <1>     call setupFFBlock
   925                              <1> .renFindNext:
   926                              <1> ;Copy the dir to rename dir and make the ren ffblock
   927 00003F51 488D35(5A060000)    <1>     lea rsi, curDirCopy
   928 00003F58 488D3D(BD070000)    <1>     lea rdi, renameDir
   929 00003F5F B904000000          <1>     mov ecx, fatDirEntry_size/8
   930 00003F64 F348A5              <1>     rep movsq
   931                              <1> ;Copy the found filename to the filename portion of the source path.
   932 00003F67 488B3D(1E060000)    <1>     mov rdi, qword [fname1Ptr]
   933 00003F6E 488D35(5A060000)    <1>     lea rsi, qword [curDirCopy + fatDirEntry.name]
   934 00003F75 E86DD4FFFF          <1>     call FCBToAsciiz    ;Copy the found filename over
   935                              <1> ;Check the file is not a char dev or a CDS directory
   936 00003F7A F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
   937 00003F81 0F8585020000        <1>     jnz .renAccDen ;Cant rename a char file!
   938 00003F87 F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
   939 00003F8E 7412                <1>     jz .srcNotDir
   940 00003F90 488D3D(1E050000)    <1>     lea rdi, buffer1  ;Check this path isn't a CDS
   941 00003F97 E8AC010000          <1>     call .checkPathCDS
   942 00003F9C 0F826F020000        <1>     jc .renErrExit  ;Bubble the error code up if there is an error!
   943                              <1> .srcNotDir:
   944                              <1> ;Finally, make sure this found file can be renamed (i.e. has no locks)
   945 00003FA2 FF35(1E060000)      <1>     push qword [fname1Ptr]
   946 00003FA8 488D35(1E050000)    <1>     lea rsi, buffer1
   947 00003FAF 488935(1E060000)    <1>     mov qword [fname1Ptr], rsi
   948 00003FB6 E85C020000          <1>     call checkExclusiveOwnFile   ;Now do this, saving ptrs
   949 00003FBB 8F05(1E060000)      <1>     pop qword [fname1Ptr]
   950 00003FC1 0F823B020000        <1>     jc .renShareErr   ;Propagate the share error code
   951                              <1> ;Build a destination filename now. fcbName is already setup with the source
   952                              <1> ; filename.
   953 00003FC7 488D35(E5060000)    <1>     lea rsi, wcdFcbName
   954 00003FCE 488D3D(D9060000)    <1>     lea rdi, fcbName
   955 00003FD5 E850010000          <1>     call .buildFilename
   956 00003FDA 488B35(26060000)    <1>     mov rsi, qword [fname2Ptr]  ;Now we store the filename to the pathspec
   957 00003FE1 4887F7              <1>     xchg rsi, rdi
   958 00003FE4 E8FED3FFFF          <1>     call FCBToAsciiz    ;Make the FCB name to ASCIIZ
   959                              <1> ;Ensure the two filenames are NOT the same
   960 00003FE9 488D35(1E050000)    <1>     lea rsi, buffer1
   961 00003FF0 488D3D(9E050000)    <1>     lea rdi, buffer2
   962 00003FF7 E81D340000          <1>     call compareFileNames
   963 00003FFC 0F840A020000        <1>     jz .renAccDen   ;If the names are equal, Access Denied!
   964                              <1> ;Copy this FCB name to the rename directory copy
   965 00004002 488D3D(BD070000)    <1>     lea rdi, qword [renameDir + fatDirEntry.name]
   966 00004009 488D35(D9060000)    <1>     lea rsi, fcbName
   967 00004010 B90B000000          <1>     mov ecx, 11
   968 00004015 F3A4                <1>     rep movsb
   969                              <1> ;Check the parent directory of the destination exists. For this, we
   970                              <1> ; replace the pathsep before the filename with a null and do a dir search.
   971 00004017 488B3D(26060000)    <1>     mov rdi, qword [fname2Ptr]
   972 0000401E 48FFCF              <1>     dec rdi ;Point to the pathsep char
   973 00004021 807FFF3A            <1>     cmp byte [rdi - 1], ":" ;If we are in the root directory, skip check!
   974 00004025 7426                <1>     je .skipParCheck
   975 00004027 C60700              <1>     mov byte [rdi], 0   ;Place null terminator here
   976 0000402A 57                  <1>     push rdi            ;Save ptr to the null terminator on stack
   977 0000402B FF35(1E060000)      <1>     push qword [fname1Ptr]
   978 00004031 488D3D(9E050000)    <1>     lea rdi, buffer2
   979 00004038 E83DD5FFFF          <1>     call getDirPathNoCanon  ;Search for the parent directory!
   980 0000403D 8F05(1E060000)      <1>     pop qword [fname1Ptr]
   981 00004043 5F                  <1>     pop rdi             ;Get ptr to terminator to replace back
   982 00004044 C6075C              <1>     mov byte [rdi], "\" ;Now replace the null terminator with the pathsep
   983 00004047 0F82C4010000        <1>     jc .renErrExit  ;If the parent doesnt exist, exit, bubbling error code
   984                              <1> .skipParCheck:
   985                              <1> ;Check the destination file doesnt exist at all. Do inclusive search!
   986 0000404D 0FB615(FC060000)    <1>     movzx edx, byte [searchAttr]
   987 00004054 52                  <1>     push rdx
   988 00004055 C605(FC060000)16    <1>     mov byte [searchAttr], dirInclusive
   989 0000405C FF35(1E060000)      <1>     push qword [fname1Ptr]
   990 00004062 488D3D(9E050000)    <1>     lea rdi, buffer2    ;Now check that this file doesnt exist!
   991 00004069 E813D5FFFF          <1>     call getFilePathNoCanon
   992 0000406E 8F05(1E060000)      <1>     pop qword [fname1Ptr]
   993 00004074 5A                  <1>     pop rdx
   994 00004075 8815(FC060000)      <1>     mov byte [searchAttr], dl
   995 0000407B 0F838B010000        <1>     jnc .renAccDen  ;If no file found, error!
   996 00004081 3C02                <1>     cmp al, errFnf  ;If not file not found, error!
   997 00004083 0F8588010000        <1>     jne .renErrExit ;Else, the file specified not found. Proceed
   998                              <1> ;Destination file not found in any form, proceed finding directory space!
   999                              <1> ;CurDirCopy and dir search vars point to the parent directory of the file
  1000                              <1> ; we were searching for. Root dir has this entry set to 0. If the file is
  1001                              <1> ; a dir, we take the parent cluster.
  1002 00004089 E812010000          <1>     call .searchForDirSpace ;Returns rsi -> space for dir entry if CF=NC
  1003 0000408E 0F8278010000        <1>     jc .renAccDen
  1004 00004094 488D3D(BD070000)    <1>     lea rdi, renameDir  ;Get ptr to the src of the new dir entry
  1005 0000409B 4887F7              <1>     xchg rsi, rdi
  1006 0000409E B904000000          <1>     mov ecx, fatDirEntry_size/8
  1007 000040A3 F348A5              <1>     rep movsq
  1008 000040A6 E8F0C7FFFF          <1>     call markBufferDirty    ;Written to a disk buffer, mark it dirty!
  1009                              <1> ;Now we delete the old directory entry
  1010 000040AB 488D3D(1E050000)    <1>     lea rdi, buffer1    ;Search for this file again to get curdir
  1011 000040B2 E8CAD4FFFF          <1>     call getFilePathNoCanon
  1012                              <1> ;If this fails, proceed as normal since all it will do is delete
  1013                              <1> ; the new directory entry, preserving the old.
  1014 000040B7 E8EAE2FFFF          <1>     call getDiskDirectoryEntry  ;Vars were setup in getFilePathNoCanon call
  1015                              <1> ;rsi points to the file entry
  1016 000040BC 8A05(08070000)      <1>     mov al, byte [delChar]
  1017 000040C2 8806                <1>     mov byte [rsi], al      ;Delete the file!
  1018 000040C4 E8D2C7FFFF          <1>     call markBufferDirty    ;Set this buffer as having been written to now
  1019 000040C9 E858C6FFFF          <1>     call flushAllBuffersForDPB  ;Now flush all buffers
  1020                              <1> ;Check source template in ren ffblock and wc fcbname. If EITHER has a wildcard
  1021                              <1> ; then we goto find next.
  1022 000040CE 488D3D(93070000)    <1>     lea rdi, qword [renameFFBlk + ffBlock.template]
  1023 000040D5 E846000000          <1>     call .searchForWC
  1024 000040DA 7414                <1>     jz .wcFnd
  1025 000040DC 488D3D(E5060000)    <1>     lea rdi, wcdFcbName
  1026 000040E3 E838000000          <1>     call .searchForWC
  1027 000040E8 7406                <1>     jz .wcFnd
  1028                              <1> .renExit:   ;Normal Exit!
  1029 000040EA E805360000          <1>     call dosCrit1Exit
  1030                              <1>     return
    13                              <2> %%_ret:
    14 000040EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1031                              <1> .wcFnd:
  1032                              <1> ;Here if we need to do WC magic.
  1033                              <1> ;Do a find next. If it fails, we return. If it succeeds, we then
  1034                              <1> ; copy the cur dir and start as if we have just set up the find first block.
  1035                              <1> ;Since we initially setup the find first block, we don't need the source 
  1036                              <1> ; pathspec pattern in the pathspec anymore and can just use the ptr to the 
  1037                              <1> ; name portion of the pathspec to copy the found filename over to.
  1038                              <1> ;Since we start searching from the deleted dir entry which might've been 
  1039                              <1> ; overwritten, we might lose a rename if the wc pattern is sufficiently 
  1040                              <1> ; generic. This isn't a problem as this is the defined behaviour.
  1041                              <1> ;
  1042                              <1> ;Beware, WC calls may take a long timeslice in multitasking environments.
  1043                              <1> ;Consider adding a mechanism for multitasking (Can't exit crit1 unless
  1044                              <1> ; we can guarantee the only multitasker is one that swaps the SDA on each 
  1045                              <1> ; task swap, i.e. us). A proper multitasker which uses protection rings
  1046                              <1> ; and swaps the sda on each task swap, can then patch these spaces.
  1047 000040F0 9090909090          <1>     db 5 dup (90h)  ;Space for exit crit1
  1048 000040F5 FF35(17040000)      <1>     push qword [currentDTA]
  1049 000040FB 488D3D(92070000)    <1>     lea rdi, renameFFBlk
  1050 00004102 48893D(17040000)    <1>     mov qword [currentDTA], rdi
  1051 00004109 E8ECCEFFFF          <1>     call findNextMain   ;Updates the find first block
  1052 0000410E 8F05(17040000)      <1>     pop qword [currentDTA]
  1053 00004114 9090909090          <1>     db 5 dup (90h)  ;Space for enter crit1
  1054 00004119 72CF                <1>     jc .renExit     ;If find next errors, exit here (and exit crit1)
  1055 0000411B E931FEFFFF          <1>     jmp .renFindNext  
  1056                              <1> 
  1057                              <1> ;---------------------
  1058                              <1> ;Rename routines
  1059                              <1> ;---------------------
  1060                              <1> .searchForWC:
  1061                              <1> ;Searches for a wildcard in the FCB name.
  1062                              <1> ;Input: rdi -> FCB name to check
  1063                              <1> ;Output: ZF=ZE if WC present. ZF=NZ otherwise.
  1064 00004120 B03F                <1>     mov al, "?"
  1065 00004122 B90B000000          <1>     mov ecx, 11
  1066 00004127 F2AE                <1>     repne scasb
  1067                              <1>     return
    13                              <2> %%_ret:
    14 00004129 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1068                              <1> 
  1069                              <1> .buildFilename:
  1070                              <1> ;Preserves all registers. Builds a name in the destination buffer.
  1071                              <1> ;This buffer MUST be initialised with the original filename before
  1072                              <1> ; we run this in the event that the source buffer has any wildcards
  1073                              <1> ;Input: rsi -> Buffer to source chars from
  1074                              <1> ;       rdi -> Buffer to store chars in
  1075                              <1> ;   If a wildcard is encountered in the source, we goto next char
  1076 0000412A 50                  <1>     push rax
  1077 0000412B 51                  <1>     push rcx
  1078 0000412C 56                  <1>     push rsi
  1079 0000412D 57                  <1>     push rdi
  1080 0000412E B90B000000          <1>     mov ecx, 11 ;11 chars in an fcb name
  1081                              <1> .bflp:
  1082 00004133 AC                  <1>     lodsb   ;Get a char from the source
  1083 00004134 3C3F                <1>     cmp al, "?"
  1084 00004136 7404                <1>     je .bfNextChar
  1085 00004138 AA                  <1>     stosb   ;Store the char and advance the storage pointer
  1086 00004139 48FFCF              <1>     dec rdi ;Go back
  1087                              <1> .bfNextChar:
  1088 0000413C 48FFC7              <1>     inc rdi ;Go to next space
  1089 0000413F FFC9                <1>     dec ecx
  1090 00004141 75F0                <1>     jnz .bflp
  1091 00004143 5F                  <1>     pop rdi
  1092 00004144 5E                  <1>     pop rsi
  1093 00004145 59                  <1>     pop rcx
  1094 00004146 58                  <1>     pop rax
  1095                              <1>     return
    13                              <2> %%_ret:
    14 00004147 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1096                              <1> 
  1097                              <1> .checkPathCDS:
  1098                              <1> ;Checks a path in rdi is not in the CDS of any drive.
  1099                              <1> ;Trashes everything.
  1100                              <1> ;Input: rdi -> Path to check isnt the CDS for any drives
  1101                              <1> ;Output:    CF=NC: Path not CDS
  1102                              <1> ;           CF=CY: Path found in CDS of some drive
  1103 00004148 57                  <1>     push rdi
  1104 00004149 E893320000          <1>     call strlen ;Get asciiz length in ecx
  1105 0000414E 5B                  <1>     pop rbx
  1106 0000414F FFC9                <1>     dec ecx ;Get one less char to check, we check the last one manually
  1107 00004151 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr]
  1108 00004158 0FB615(78000000)    <1>     movzx edx, byte [lastdrvNum]
  1109                              <1> .cpcdsDirCheck:
  1110 0000415F 4889DF              <1>     mov rdi, rbx
  1111 00004162 51                  <1>     push rcx    ;Save the char count to check!
  1112 00004163 56                  <1>     push rsi    ;Save rsi pointing to the start of the CDS
  1113 00004164 F3A6                <1>     repe cmpsb  ;Compare while they are equal
  1114 00004166 AC                  <1>     lodsb   ;Get the last char to check in al
  1115 00004167 5E                  <1>     pop rsi ;Put rsi back to the start of the string
  1116 00004168 59                  <1>     pop rcx
  1117 00004169 750F                <1>     jne .cpcdsNeqDir
  1118                              <1>     ;Instead of failing, if not join, simply reset that CDS entry to root.
  1119 0000416B 3C5C                <1>     cmp al, "\" ;Check the last char manually for pathend
  1120 0000416D 7404                <1>     je .cpcdsFound
  1121 0000416F 84C0                <1>     test al, al
  1122 00004171 7507                <1>     jne .cpcdsNeqDir ;Proceed as normal if not null
  1123                              <1> .cpcdsFound:
  1124                              <1>     ;Here we are trying to change a current directory. Fail it!
  1125                              <1>     ;This is (DOS 5.0+/Windows)-like behaviour but its sensible and what
  1126                              <1>     ; we initially had programmed in (with access denied error instead).
  1127 00004173 B810000000          <1>     mov eax, errDelCD   ;This is a more descriptive error.
  1128 00004178 F9                  <1>     stc
  1129                              <1>     return    
    13                              <2> %%_ret:
    14 00004179 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1130                              <1> .cpcdsNeqDir:
  1131 0000417A 4881C65F000000      <1>     add rsi, cds_size   ;Goto next CDS
  1132 00004181 FFCA                <1>     dec edx
  1133 00004183 75DA                <1>     jnz .cpcdsDirCheck
  1134                              <1>     return
    13                              <2> %%_ret:
    14 00004185 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1135                              <1> 
  1136                              <1> .findNameInPath:
  1137                              <1> ;Finds the name portion of the pathspec. Preserves all registers except rdi.
  1138                              <1> ;Input: rdi -> Filename to find the first char of the filename portion of
  1139                              <1> ;Output: rdi -> First char of the filename in path
  1140 00004186 50                  <1>     push rax
  1141 00004187 51                  <1>     push rcx
  1142 00004188 E854320000          <1>     call strlen ;Get in ecx the 
  1143 0000418D 4801CF              <1>     add rdi, rcx    ;Point rdi past the terminating null
  1144 00004190 FD                  <1>     std ;Go backwards now, to find the path sep
  1145 00004191 B05C                <1>     mov al, "\"
  1146 00004193 F2AE                <1>     repne scasb   ;Now rsi points one before
  1147 00004195 FC                  <1>     cld ;Go normal ways now
  1148 00004196 4881C702000000      <1>     add rdi, 2  ;Goto first char of pathname
  1149 0000419D 59                  <1>     pop rcx
  1150 0000419E 58                  <1>     pop rax
  1151                              <1>     return
    13                              <2> %%_ret:
    14 0000419F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1152                              <1> 
  1153                              <1> .searchForDirSpace:
  1154                              <1> ;Searches for directory space based on the data in the current dir copy.
  1155                              <1> ; If the file is a dir then start searching in the parent cluster 
  1156 000041A0 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]
  1157 000041A6 F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
  1158 000041AD 7517                <1>     jnz .sfdsDirSkip 
  1159                              <1> ;Now check, if the parent dir of the is null. IF it is, the clust
  1160                              <1> ; wouldn't've been setup as we dont "search" for the root in the same
  1161                              <1> ; way (though if we search for A:\, we DO setup the cluster info. Ew.)
  1162 000041AF 85C0                <1>     test eax, eax
  1163 000041B1 7413                <1>     jz .sfdsDirSkip
  1164 000041B3 0FB715(6E060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusHi]
  1165 000041BA 0FB705(74060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusLo]
  1166 000041C1 C1E210              <1>     shl edx, 10h
  1167 000041C4 09D0                <1>     or eax, edx     ;Get first cluster of dir file in eax 
  1168                              <1> .sfdsDirSkip:
  1169 000041C6 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1170 000041CC 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1171 000041CE 668905(83070000)    <1>     mov word [dirSect], ax
  1172 000041D5 8905(85070000)      <1>     mov dword [dirEntry], eax
  1173 000041DB E8B2E1FFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1174 000041E0 731C                <1>     jnc .dirEntryFnd
  1175 000041E2 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1175 000041EA 0000                <1>
  1176 000041EC 7412                <1>     je .searchBad ;Set CF and exit
  1177 000041EE E88EE2FFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1178 000041F3 720B                <1>     jc .searchBad
  1179 000041F5 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1180 000041FA 7404                <1>     je .searchBad
  1181                              <1>     ;Else eax = Newly allocated cluster
  1182 000041FC EBA2                <1>     jmp short .searchForDirSpace
  1183                              <1> .dirEntryFnd:
  1184 000041FE F8                  <1>     clc
  1185                              <1>     return
    13                              <2> %%_ret:
    14 000041FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1186                              <1> .searchBad:
  1187 00004200 F9                  <1>     stc
  1188                              <1>     return
    13                              <2> %%_ret:
    14 00004201 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1189                              <1> 
  1190                              <1> ;Error Exits
  1191                              <1> .renShareErr:
  1192 00004202 B820000000          <1>     mov eax, errShrVio  ;Share issue so return failed with share
  1193 00004207 E905000000          <1>     jmp .renErrExit
  1194                              <1> .renAccDen:
  1195 0000420C B805000000          <1>     mov eax, errAccDen
  1196                              <1> .renErrExit:
  1197 00004211 F9                  <1>     stc
  1198 00004212 E9D3FEFFFF          <1>     jmp .renExit
  1199                              <1> 
  1200                              <1> checkExclusiveOwnFile:
  1201                              <1> ;We check that the program carrying out this action owns the file exclusively. 
  1202                              <1> ; This function will fail IF there are handles open, and thus makes it an 
  1203                              <1> ; ideal candidate for checking in RENAME, for both filenames, DELETE and 
  1204                              <1> ; SETFILEATTRIBS if we have any open files. If we do, then we should get 
  1205                              <1> ; a Share error and thus it would prevent us from proceeding.
  1206                              <1> ;
  1207                              <1> ;If SHARE not loaded, ALL handles should be closed manually before 
  1208                              <1> ; Rename or Delete.
  1209                              <1> ;Input: SDA fname1Ptr -> Filename we want to consider
  1210                              <1> ;       currDirCopy = Directory entry for the file
  1211                              <1> ;Output: Clobbers rcx, rdx.
  1212 00004217 50                  <1>     push rax
  1213 00004218 53                  <1>     push rbx
  1214 00004219 56                  <1>     push rsi
  1215 0000421A 57                  <1>     push rdi
  1216                              <1> 
  1217                              <1>     ;The below in DOS is passed in by the caller, here we preserve the 
  1218                              <1>     ; caller's regs and proceed to set the ptrs ourselves.
  1219 0000421B 488D1D(5A060000)    <1>     lea rbx, curDirCopy
  1220 00004222 488D731A            <1>     lea rsi, qword [rbx + fatDirEntry.fstClusLo]
  1221                              <1>     ;At this point, the filename is fully normalised due to the 
  1222                              <1>     ; way we do path parsing. Thus, we can proceed safely.
  1223                              <1> 
  1224                              <1>     ;The following closes most recent shared handles referencing it
  1225                              <1>     ;Only if sharePSP, shareMachineNumber are equal and openMode not Compat
  1226                              <1>     ; mode and if there is precisely 1  
  1227 00004226 FF15(27010000)      <1>     call qword [closeNewHdlShare]    
  1228                              <1>     ;The close of the handle will only happen if there is 1 file referring to it
  1229 0000422C 488D3D(100D0000)    <1>     lea rdi, scratchSFT
  1230 00004233 48893D(32070000)    <1>     mov qword [currentSFT], rdi
  1231 0000423A B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1232 0000423F C605(07070000)00    <1>     mov byte [openCreate], 0    ;Make sure we are just opening the file
  1233                              <1>     ;This is to avoid needing to put the file attributes on the stack
  1234 00004246 57                  <1>     push rdi    ;Save the scratch SFT ptr
  1235 00004247 E8CA020000          <1>     call buildSFTEntry  ;This will never fail. If it does, shareFile will catch
  1236 0000424C 5F                  <1>     pop rdi
  1237 0000424D 66C7070100          <1>     mov word [rdi + sft.wNumHandles], 1   ;One "reference"
  1238 00004252 66C747021000        <1>     mov word [rdi + sft.wOpenMode], denyRWShare ;Prevent everything temporarily
  1239 00004258 E8273D0000          <1>     call shareFile  ;Puts an sft handle in rdi
  1240 0000425D 720B                <1>     jc .exit
  1241 0000425F 66C7070000          <1>     mov word [rdi + sft.wNumHandles], 0 ;Now free it and close it
  1242 00004264 E8AF3C0000          <1>     call closeShareCallWrapper 
  1243 00004269 F8                  <1>     clc
  1244                              <1> .exit:
  1245 0000426A 5F                  <1>     pop rdi
  1246 0000426B 5E                  <1>     pop rsi
  1247 0000426C 5B                  <1>     pop rbx
  1248 0000426D 58                  <1>     pop rax
  1249                              <1>     ;mov rbp, qword [workingDPB] ;This seems always set so no need for it.
  1250                              <1>     return
    13                              <2> %%_ret:
    14 0000426E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1251                              <1> 
  1252                              <1> outerDeleteMain:
  1253                              <1> ;Internal current dir must be populated with dir entry
  1254                              <1> ; and internal DOS directory variables now point to this entry.
  1255                              <1> ;Checks if the file is a char device or read only.
  1256                              <1> ;Input: curDirCopy must has dir for the file to be deleted
  1257                              <1> ;       disk vars must be populated (i.e. getFilePath mustve been run)
  1258                              <1> ;Returns: CF=CY => Error (including no files if wildcard) in eax
  1259                              <1> ;         CF=NC => File deleted
  1260 0000426F 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
  1261 00004276 E8552F0000          <1>     call testCDSNet ;CF=NC => Not net
  1262 0000427B 7308                <1>     jnc .notNet
  1263 0000427D B813110000          <1>     mov eax, 1113h  ;Allows wildcards, and will delete all which match
  1264 00004282 CD2F                <1>     int 2Fh
  1265                              <1>     return
    13                              <2> %%_ret:
    14 00004284 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1266                              <1> .notNet:
  1267 00004285 B805000000          <1>     mov eax, errAccDen  
  1268 0000428A F605(65060000)51    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev | dirDirectory | dirReadOnly
  1269 00004291 7549                <1>     jnz .exitBad  ;Can't delete char dev, dir or ro file
  1270 00004293 E846000000          <1>     call deleteMain
  1271 00004298 7242                <1>     jc .exitBad
  1272                              <1>     ;Check if the name has a wildcard in it, if so, keep searching
  1273 0000429A B03F                <1>     mov al, "?"
  1274 0000429C 488D3D(D9060000)    <1>     lea rdi, fcbName    ;This is the search pattern we used to find the file
  1275 000042A3 B90B000000          <1>     mov ecx, 11
  1276 000042A8 F2AE                <1>     repne scasb   ;Scan for the wildcard char
  1277 000042AA 7402                <1>     je .serverWCloop   ;This is not possible if entered via 21/41h
  1278 000042AC F8                  <1>     clc
  1279                              <1>     return  ;Return ok!
    13                              <2> %%_ret:
    14 000042AD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1280                              <1> .serverWCloop:
  1281 000042AE FF35(17040000)      <1>     push qword [currentDTA] ;Save the current DTA address
  1282 000042B4 488D3D(2F060000)    <1>     lea rdi, dosffblock
  1283 000042BB 57                  <1>     push rdi    ;Push this address onto the stack
  1284 000042BC E866D1FFFF          <1>     call setupFFBlock   ;Setup FFblock internally
  1285 000042C1 8F05(17040000)      <1>     pop qword [currentDTA] ;And use the dosFFblock as the DTA
  1286 000042C7 E82ECDFFFF          <1>     call findNextMain   ;rdi gets reloaded with DTA in this call
  1287 000042CC 8F05(17040000)      <1>     pop qword [currentDTA]
  1288                              <1>     retc    ;Return with no more files error now
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000042D2 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000042D4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1289 000042D5 E804000000          <1>     call deleteMain ;Whilst it keeps finding files that match, keep deleting
  1290 000042DA 73D2                <1>     jnc .serverWCloop     
  1291                              <1> ;Stop as soon as an error occurs
  1292                              <1> .exitBad:
  1293 000042DC F9                  <1>     stc
  1294                              <1>     return
    13                              <2> %%_ret:
    14 000042DD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1295                              <1> 
  1296                              <1> deleteMain:
  1297                              <1> ;Now unlink FAT chain and then clear directory entry
  1298                              <1> ;Get the start cluster of this file
  1299                              <1> ;Input:
  1300                              <1> ; The file must have NOT be read-only.
  1301                              <1> ; If the CDS is NOT a net cds then the following must hold:
  1302                              <1> ;     - curDirCopy must be filled with the file directory information
  1303                              <1> ;     - workingDPB must be disk dpb and dir variables must be set
  1304                              <1> ;Output: CF=NC => Success, 
  1305                              <1> ; If not net CDS:
  1306                              <1> ;   rsi keeps pointing to directory entry.
  1307                              <1> ;   al = First char of the file that was deleted.
  1308                              <1> ;        CF=CY => Error
  1309                              <1> ;The dir buffer must be marked as referenced once we are done with it
  1310 000042DE E834FFFFFF          <1>     call checkExclusiveOwnFile   ;Also cannot delete if open handle
  1311                              <1>     retc    ;Return immediately if CF=CY and propagate error code
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000042E3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000042E5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1312 000042E6 55                  <1>     push rbp
  1313 000042E7 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Get the working DPB for the disk of this file
  1314 000042EE 52                  <1>     push rdx
  1315 000042EF 0FB715(74060000)    <1>     movzx edx, word [curDirCopy + fatDirEntry.fstClusLo]
  1316 000042F6 0FB705(6E060000)    <1>     movzx eax, word [curDirCopy + fatDirEntry.fstClusHi]
  1317 000042FD C1E010              <1>     shl eax, 10h
  1318 00004300 09D0                <1>     or eax, edx ;Add low bits to eax
  1319 00004302 5A                  <1>     pop rdx
  1320 00004303 85C0                <1>     test eax, eax   ;Cluster value of 0 means no allocation
  1321 00004305 7407                <1>     jz .skipUnlink  ;If there is no FAT allocation for file, skip "dealloc"
  1322 00004307 E8D1C9FFFF          <1>     call unlinkFAT  ;Unlink the FAT entry
  1323 0000430C 721D                <1>     jc .exitBad
  1324                              <1> .skipUnlink:
  1325                              <1>     ;Now replace the first char of the directory to 0E5h
  1326                              <1>     ;Get the disk directory in a buffer to manipulate the entry
  1327 0000430E E893E0FFFF          <1>     call getDiskDirectoryEntry
  1328 00004313 7216                <1>     jc .exitBad
  1329 00004315 8A05(08070000)      <1>     mov al, byte [delChar]
  1330 0000431B 8606                <1>     xchg byte [rsi], al    ;Mark entry as free, get char in al
  1331 0000431D E879C5FFFF          <1>     call markBufferDirty
  1332                              <1>     ;CF must be clear
  1333 00004322 E8FFC3FFFF          <1>     call flushAllBuffersForDPB
  1334 00004327 5D                  <1>     pop rbp
  1335                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004328 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000432A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1336                              <1> .exitBad:
  1337 0000432B 5D                  <1>     pop rbp
  1338 0000432C F9                  <1>     stc
  1339                              <1>     return
    13                              <2> %%_ret:
    14 0000432D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1340                              <1> 
  1341                              <1> openMain:
  1342                              <1> ;Input: ax (formally al) = Open mode
  1343                              <1> ;       [currentSFT] = SFT we are building
  1344                              <1> ;       [workingCDS] = CDS of drive to access
  1345                              <1> ;       [workingDPB] = DPB of drive to access
  1346                              <1> ;Ouput: CF=CY => Error, eax has error code
  1347 0000432E E8D4000000          <1>     call setOpenMode
  1348                              <1>     retc    ;Error Exit 
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004333 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004335 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  1349 00004336 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1350 0000433D 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1351 00004344 30E4                <1>     xor ah, ah  ;al has the access mode
  1352 00004346 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1353 0000434D 750A                <1>     jne .notNet
  1354                              <1> .redirOpen:
  1355 0000434F 50                  <1>     push rax    ;Push open mode onto stack
  1356 00004350 B816110000          <1>     mov eax, 1116h  ;Open remote file on "\\" pathspec drives
  1357 00004355 CD2F                <1>     int 2Fh
  1358 00004357 58                  <1>     pop rax
  1359                              <1>     return
    13                              <2> %%_ret:
    14 00004358 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1360                              <1> .notNet:
  1361 00004359 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive
  1362 0000435F 75EE                <1>     jnz .redirOpen  ;If redir drive, go via the redir interface
  1363 00004361 E884330000          <1>     call dosCrit1Enter
  1364                              <1> ;Ensure our disk attributes permit opening
  1365 00004366 8A15(65060000)      <1>     mov dl, byte [curDirCopy + fatDirEntry.attribute]   ;Get the disk attrib
  1366 0000436C F6C208              <1>     test dl, dirVolumeID    ;Is the found file a volume label?
  1367 0000436F 752C                <1>     jnz .accDenExit
  1368 00004371 F6C201              <1>     test dl, dirReadOnly    ;Is the found file marked as RO in the file system?
  1369 00004374 7439                <1>     jz short .openFile      ;If not, proceed.
  1370                              <1> ;Else, we check if we are permitted to open this file.
  1371 00004376 0FB74E02            <1>     movzx ecx, word [rsi + sft.wOpenMode]   ;Get the user-set open mode
  1372 0000437A F7C100800000        <1>     test ecx, FCBopenedFile  ;We consider FCBs here for future net use 
  1373 00004380 7522                <1>     jnz .fcbOpen    ;If FCB open, intervene appropriately
  1374 00004382 89CA                <1>     mov edx, ecx
  1375 00004384 81E270000000        <1>     and edx, 070h   ;Isolate the share bits only
  1376 0000438A 81FA70000000        <1>     cmp edx, netFCBShare ;Is this a net server FCB open?
  1377 00004390 7412                <1>     je .fcbOpen     ;If it is net fcb, similarly force to ro as before
  1378 00004392 81E10F000000        <1>     and ecx, 0Fh    ;Else, isolate the bottom nybble
  1379 00004398 80F900              <1>     cmp cl, ReadAccess  ;Are we asking for more than read?
  1380 0000439B 7412                <1>     je .openFile    ;If no, proceed, eax has openmode. Else, access denied!
  1381                              <1> .accDenExit:
  1382 0000439D B805000000          <1>     mov eax, errAccDen
  1383 000043A2 EB27                <1>     jmp short .errorExit
  1384                              <1> .fcbOpen:
  1385 000043A4 6681E1F0FF          <1>     and cx, 0FFF0h  ;Set to read access open only. Preserve share/property bits
  1386 000043A9 66894E02            <1>     mov word [rsi + sft.wOpenMode], cx
  1387 000043AD 89C8                <1>     mov eax, ecx    ;Move the modified open mode into eax for buildSFT
  1388                              <1> .openFile:
  1389 000043AF C605(07070000)00    <1>     mov byte [openCreate], 0   ;Opening file, set to 0
  1390 000043B6 C605(08070000)E5    <1>     mov byte [delChar], 0E5h
  1391 000043BD E854010000          <1>     call buildSFTEntry  ;ax must have the open mode
  1392 000043C2 7207                <1>     jc .errorExit
  1393 000043C4 E8BB3B0000          <1>     call shareFile      ;Puts an SFT handle in rdi
  1394 000043C9 7306                <1>     jnc .fileSharedOk   ;If the file open doesnt violate share, jump!
  1395                              <1> .errorExit:
  1396 000043CB E824330000          <1>     call dosCrit1Exit   ;Else we error out with error code in al
  1397                              <1>     return
    13                              <2> %%_ret:
    14 000043D0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1398                              <1> .fileSharedOk:
  1399 000043D1 B803000000          <1>     mov eax, 3  ;Update date/time and everything in the share dir sync call
  1400 000043D6 E8860B0000          <1>     call getCurrentSFT  ;Get SFT ptr in rdi
  1401 000043DB FF15(2F010000)      <1>     call qword [updateDirShare] ;Now call the dir sync, this default sets CF 
  1402 000043E1 E80E330000          <1>     call dosCrit1Exit
  1403                              <1> openDriverMux:  ;Int 2Fh, AX=120Ch, jumped to by Create
  1404 000043E6 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1405 000043ED E867E2FFFF          <1>     call openSFT
  1406 000043F2 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  1407 000043F8 7501                <1>     jnz .netOpen
  1408                              <1>     return
    13                              <2> %%_ret:
    14 000043FA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1409                              <1> .netOpen:
  1410 000043FB 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1411 00004402 48894745            <1>     mov qword [rdi + sft.qPSPOwner], rax
  1412                              <1>     return
    13                              <2> %%_ret:
    14 00004406 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1413                              <1> 
  1414                              <1> setOpenMode:
  1415                              <1> ;Input: al = Open mode for the file open
  1416 00004407 8805(FD060000)      <1>     mov byte [fileOpenMd], al
  1417 0000440D 53                  <1>     push rbx
  1418                              <1> ;Check we are not opening a directory. This is to prevent disk io with a dir
  1419 0000440E F605(65060000)10    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile
  1420 00004415 7525                <1>     jnz .somBad    ;Directories are not allowed to be opened
  1421 00004417 88C3                <1>     mov bl, al
  1422 00004419 80E3F0              <1>     and bl, 0F0h    ;Isolate upper nybble. Test share mode.
  1423 0000441C 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1    
  1424 00004423 7505                <1>     jnz .s1 ;Skip this check if not server invoke
  1425 00004425 80FB70              <1>     cmp bl, netFCBShare ;Test share mode for netFCB
  1426 00004428 7405                <1>     je .s2
  1427                              <1> .s1:
  1428 0000442A 80FB40              <1>     cmp bl, denyNoneShare
  1429 0000442D 770D                <1>     ja .somBad
  1430                              <1> .s2:
  1431 0000442F 88C3                <1>     mov bl, al  ;Isolate lower nybble. Access mode.
  1432 00004431 80E30F              <1>     and bl, 0Fh
  1433 00004434 80FB02              <1>     cmp bl, RWAccess
  1434 00004437 7703                <1>     ja .somBad
  1435 00004439 5B                  <1>     pop rbx
  1436 0000443A F8                  <1>     clc
  1437                              <1>     return
    13                              <2> %%_ret:
    14 0000443B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1438                              <1> .somBad:
  1439 0000443C 5B                  <1>     pop rbx
  1440 0000443D B80C000000          <1>     mov eax, errAccCde
  1441 00004442 F9                  <1>     stc
  1442                              <1>     return
    13                              <2> %%_ret:
    14 00004443 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1443                              <1> 
  1444                              <1> createNewMain:
  1445                              <1> ;Input: ax (formally al) = File attributes
  1446                              <1> ;       [currentSFT] = SFT we are building
  1447                              <1> ;       [workingCDS] = CDS of drive to access
  1448                              <1> ;       [workingDPB] = DPB of drive to access
  1449 00004444 0FB6C0              <1>     movzx eax, al
  1450 00004447 B401                <1>     mov ah, 1    ;Tell redir to create new file
  1451 00004449 F605(04070000)FF    <1>     test byte [fileExist], -1
  1452 00004450 740A                <1>     jz createMain.createNewEP    ;Create only if the file doesnt exist!
  1453 00004452 B850000000          <1>     mov eax, errFilExist    ;Else, return a file exists error!
  1454 00004457 F9                  <1>     stc
  1455                              <1>     return
    13                              <2> %%_ret:
    14 00004458 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1456                              <1> createMain:
  1457                              <1> ;Input: ax (formally al) = File attributes
  1458                              <1> ;       [currentSFT] = SFT we are building
  1459                              <1> ;       [workingCDS] = CDS of drive to access
  1460                              <1> ;       [workingDPB] = DPB of drive to access
  1461 00004459 0FB6C0              <1>     movzx eax, al
  1462                              <1> .createNewEP:
  1463 0000445C A880                <1>     test al, 80h    ; Is this invalid bit set?
  1464 0000445E 750C                <1>     jnz .invalidAttrib
  1465 00004460 A808                <1>     test al, volLabelFile    ;Is this a volume label?
  1466 00004462 7402                <1>     jz .notVol
  1467 00004464 B008                <1>     mov al, volLabelFile ;If the vol bit is set, set the whole thing to volume only
  1468                              <1>     ;Set archive bit for new vol labels for incremental archivers to update
  1469                              <1> .notVol:
  1470 00004466 0C20                <1>     or al, archiveFile   ;Set archive bit
  1471 00004468 A850                <1>     test al, directoryFile | charFile   ;Invalid bits?
  1472 0000446A 7407                <1>     jz .validAttr   ;Creating directory with this function is forbidden also
  1473                              <1> .invalidAttrib:
  1474 0000446C B805000000          <1>     mov eax, errAccDen
  1475 00004471 F9                  <1>     stc
  1476                              <1>     return
    13                              <2> %%_ret:
    14 00004472 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1477                              <1> .validAttr:
  1478                              <1> ;Check we are not creating a directory.
  1479 00004473 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1480 0000447A 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
  1481 00004481 4881FEFFFFFFFF      <1>     cmp rsi, -1
  1482 00004488 750A                <1>     jne .diskFile
  1483 0000448A 50                  <1>     push rax    ;Save the new attributes
  1484 0000448B B818110000          <1>     mov eax, 1118h  ;Create file w/o CDS
  1485 00004490 CD2F                <1>     int 2Fh
  1486 00004492 5B                  <1>     pop rbx
  1487                              <1>     return
    13                              <2> %%_ret:
    14 00004493 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1488                              <1> .diskFile:
  1489 00004494 66F746430080        <1>     test word [rsi + cds.wFlags], cdsRedirDrive ;We a redir drv?
  1490 0000449A 740A                <1>     jz .hardFile
  1491 0000449C 50                  <1>     push rax    ;Save the new attributes
  1492 0000449D B817110000          <1>     mov eax, 1117h  ;Create file with CDS
  1493 000044A2 CD2F                <1>     int 2Fh
  1494 000044A4 5B                  <1>     pop rbx
  1495                              <1>     return
    13                              <2> %%_ret:
    14 000044A5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1496                              <1> .hardFile:
  1497 000044A6 66814F020200        <1>     or word [rdi + sft.wOpenMode], RWAccess ;Set R/W access when creating file
  1498 000044AC C605(07070000)FF    <1>     mov byte [openCreate], -1   ;Creating file, set to FFh
  1499 000044B3 C605(08070000)E5    <1>     mov byte [delChar], 0E5h
  1500 000044BA E82B320000          <1>     call dosCrit1Enter  ;Writing the SFT entry, must be in critical section
  1501 000044BF 57                  <1>     push rdi    ;Save the sft handle
  1502 000044C0 50                  <1>     push rax    ;Save the file attributes on stack
  1503 000044C1 B802000000          <1>     mov eax, RWAccess | CompatShare ;Set open mode
  1504 000044C6 E84B000000          <1>     call buildSFTEntry
  1505 000044CB 5B                  <1>     pop rbx ;Pop the file attribute off
  1506 000044CC 5F                  <1>     pop rdi
  1507 000044CD 7241                <1>     jc .errorExit
  1508 000044CF E8B03A0000          <1>     call shareFile  ;Puts an sft handle in rdi, preserves rbx
  1509 000044D4 723A                <1>     jc .errorExit
  1510 000044D6 F6C308              <1>     test bl, volLabelFile    ;Was the attribute a volume label?
  1511 000044D9 7420                <1>     jz .notVolLabel    ;If not vol label, skip.
  1512                              <1> ; Treat volume label creation case here. Rebuild DPB.
  1513 000044DB 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]    ;Get the CDS ptr for getDiskDPB
  1514 000044E2 8A07                <1>     mov al, byte [rdi]     ;Get the drive letter
  1515 000044E4 2C41                <1>     sub al, "A"            ;Convert to a 0 based number
  1516 000044E6 8805(E1190000)      <1>     mov byte [rebuildDrv], al  ;Set the volid rebuild var
  1517 000044EC E8F9310000          <1>     call dosCrit1Enter
  1518 000044F1 E8352A0000          <1>     call getDiskDPB        ;Rebuild DPB and clear var
  1519 000044F6 E8F9310000          <1>     call dosCrit1Exit
  1520                              <1> .notVolLabel:
  1521 000044FB B802000000          <1>     mov eax, 2  ;Needed for the SHARE call
  1522 00004500 FF15(2F010000)      <1>     call qword [updateDirShare]
  1523 00004506 E8E9310000          <1>     call dosCrit1Exit
  1524 0000450B E9D6FEFFFF          <1>     jmp openDriverMux
  1525                              <1> .errorExit:
  1526 00004510 E8DF310000          <1>     call dosCrit1Exit
  1527                              <1>     return
    13                              <2> %%_ret:
    14 00004515 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1528                              <1> buildSFTEntry:
  1529                              <1> ;Called in a critical section.
  1530                              <1> ;Input: al = Open mode
  1531                              <1> ;       STACK: File attributes if creating a file
  1532                              <1> ;       [currentSFT] = SFT we are building
  1533                              <1> ;       [workingCDS] = CDS of drive to access
  1534                              <1> ;       [workingDPB] = DPB of drive to access
  1535                              <1> ;     SDA curDirCopy = Copy of dir for file if found or parent dir if not.
  1536                              <1> ;
  1537                              <1> ;Output: If CF=NC: - CurrentSFT filled in except for wNumHandles and bFileAttrib
  1538                              <1> ;                  - wDeviceInfo is set except for inherit bit
  1539                              <1> ;        If CF=CY: - Return fail
  1540                              <1> ;
  1541                              <1> ;
  1542                              <1> ;Check if file exists. If it does, build SFT and truncate if not char dev. 
  1543                              <1> ;   If not, create disk entry.
  1544                              <1> ;Check if the device was a char device by checking curDirCopy.
  1545                              <1> ;If disk, get dpb. We check if the parent dir was found.
  1546                              <1> 
  1547                              <1> ;First set the open mode, time and date, ownerPSP and file pointer
  1548                              <1> ; to start of file fields of the SFT
  1549 00004516 55                  <1>     push rbp    ;file attribute is rbp + 10h
  1550 00004517 4889E5              <1>     mov rbp, rsp
  1551 0000451A 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1552                              <1> ;Set the open mode
  1553 00004521 66894602            <1>     mov word [rsi + sft.wOpenMode], ax
  1554                              <1> ;Get current time
  1555 00004525 E887EAFFFF          <1>     call readDateTimeRecord ;Update DOS internal Time/Date variables
  1556 0000452A E86DEBFFFF          <1>     call getDirDTwords  ;Get current D/T words packed in eax
  1557 0000452F 894613              <1>     mov dword [rsi + sft.wTime], eax    ;Store time and date together
  1558                              <1> ;Set current Owner
  1559 00004532 488B05(1F040000)    <1>     mov rax, qword [currentPSP]
  1560 00004539 48894645            <1>     mov qword [rsi + sft.qPSPOwner], rax ;Set who opened the file
  1561                              <1> ;Set file pointer to first byte
  1562 0000453D C7461B00000000      <1>     mov dword [rsi + sft.dCurntOff], 0  
  1563                              <1> ;Common fields set
  1564 00004544 F605(07070000)FF    <1>     test byte [openCreate], -1  ;Create = -1
  1565 0000454B 0F84CA010000        <1>     jz .openProc
  1566                              <1>     ;Here if Creating a file.
  1567                              <1>     ;First check if we are handling a volume label
  1568 00004551 48F7451008000000    <1>     test qword [rbp + 10h], volLabelFile  ;Are we creating a volume label?
  1569 00004559 7427                <1>     jz .notVolLbl   ;Bit not set? Jump!
  1570 0000455B 56                  <1>     push rsi
  1571 0000455C 57                  <1>     push rdi
  1572 0000455D 55                  <1>     push rbp
  1573 0000455E C605(5F040000)FF    <1>     mov byte [volIdFlag], -1    ;Set the volid search bit
  1574 00004565 E82ACCFFFF          <1>     call searchDir  ;Searches the root dir
  1575 0000456A C605(5F040000)00    <1>     mov byte [volIdFlag], 0     ;We are done searching for volid
  1576 00004571 5D                  <1>     pop rbp
  1577 00004572 5F                  <1>     pop rdi
  1578 00004573 5E                  <1>     pop rsi
  1579 00004574 0F83F8010000        <1>     jnc .bad ;If CF=NC, then we have found a vollbl, fail.
  1580 0000457A 3C12                <1>     cmp al, errNoFil
  1581 0000457C 0F85F0010000        <1>     jne .bad ;If not "no file found", error out
  1582                              <1> .notVolLbl:
  1583 00004582 F605(04070000)FF    <1>     test byte [fileExist], -1   ;-1 => File exists
  1584 00004589 0F84D7000000        <1>     jz .createFile
  1585 0000458F F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev ;Char dev?
  1586 00004596 0F8588010000        <1>     jnz .charDev    ;If its valid, just reopens it!
  1587 0000459C F605(65060000)11    <1>     test byte [curDirCopy + fatDirEntry.attribute], directoryFile | dirReadOnly
  1588 000045A3 0F85C9010000        <1>     jnz .bad    ;Cant recreate a dir or ro file!
  1589                              <1>     ;Here disk file exists, so recreating the file.
  1590 000045A9 55                  <1>     push rbp
  1591 000045AA FF35(32070000)      <1>     push qword [currentSFT]
  1592 000045B0 E829FDFFFF          <1>     call deleteMain ;Returns rsi pointing to the directory entry in a dsk buffer
  1593 000045B5 8F05(32070000)      <1>     pop qword [currentSFT]
  1594 000045BB 5D                  <1>     pop rbp
  1595 000045BC 0F82B0010000        <1>     jc .bad
  1596                              <1>     ;al has the char for the filename
  1597                              <1>     ;Sets vars for the sector/offset into the sector
  1598 000045C2 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1599 000045C9 8806                <1>     mov byte [rsi], al  ;Replace the first char of the filename back
  1600 000045CB 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1601                              <1>     ;al has file attributes.
  1602 000045CF 88460B              <1>     mov byte [rsi + fatDirEntry.attribute], al
  1603 000045D2 31C0                <1>     xor eax, eax
  1604                              <1>     ;Clear all the fields south of ntRes (20 bytes)
  1605 000045D4 4889460C            <1>     mov qword [rsi + fatDirEntry.ntRes], rax
  1606 000045D8 48894614            <1>     mov qword [rsi + fatDirEntry.fstClusHi], rax
  1607 000045DC 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax
  1608 000045DF 8B4713              <1>     mov eax, dword [rdi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1609 000045E2 89460E              <1>     mov dword [rsi + fatDirEntry.crtTime], eax
  1610 000045E5 894616              <1>     mov dword [rsi + fatDirEntry.wrtTime], eax
  1611 000045E8 57                  <1>     push rdi    ;Save SFT pointer
  1612 000045E9 488D3D(5A060000)    <1>     lea rdi, curDirCopy ;Copy this directory entry internally
  1613 000045F0 B920000000          <1>     mov ecx, fatDirEntry_size
  1614 000045F5 F3A4                <1>     rep movsb
  1615 000045F7 E89FC2FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1616 000045FC 5F                  <1>     pop rdi
  1617                              <1> .createCommon:  ;rdi must point to the current SFT 
  1618                              <1>     ;Now populate the remaining SFT fields 
  1619 000045FD 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1620 00004604 8A460B              <1>     mov al, byte [rsi + fatDirEntry.attribute]
  1621 00004607 884704              <1>     mov byte [rdi + sft.bFileAttrib], al
  1622 0000460A 488B05(46070000)    <1>     mov rax, qword [tempSect]   ;Get directory entry sector
  1623 00004611 48894727            <1>     mov qword [rdi + sft.qDirSect], rax
  1624 00004615 0FB705(4E070000)    <1>     movzx eax, word [entry]     ;Get 32 byte offset into sector for directory
  1625 0000461C C1E805              <1>     shr eax, 5   ;Divide by 32 to get directory entry number
  1626 0000461F 88472F              <1>     mov byte [rdi + sft.bNumDirEnt], al
  1627 00004622 8B461C              <1>     mov eax, dword [rsi + fatDirEntry.fileSize] ;Get the filesize
  1628 00004625 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  1629 00004628 0FB7461A            <1>     movzx eax, word [rsi + fatDirEntry.fstClusLo]   ;Get first cluster
  1630 0000462C 0FB75614            <1>     movzx edx, word [rsi + fatDirEntry.fstClusHi]
  1631 00004630 C1E210              <1>     shl edx, 10h
  1632 00004633 09D0                <1>     or eax, edx
  1633 00004635 89470F              <1>     mov dword [rdi + sft.dStartClust], eax
  1634                              <1> 
  1635 00004638 31C0                <1>     xor eax, eax
  1636                              <1>     ;Now set DeviceInfo to drive number and get the dpb for this disk file
  1637 0000463A 8A05(09070000)      <1>     mov al, byte [workingDrv]
  1638 00004640 0C40                <1>     or al, blokFileNoFlush  ;Dont flush until it is accessed
  1639 00004642 66894705            <1>     mov word [rdi + sft.wDeviceInfo], ax    ;AH already 0
  1640 00004646 488B05(0A070000)    <1>     mov rax, qword [workingDPB]
  1641 0000464D 48894707            <1>     mov qword [rdi + sft.qPtr], rax
  1642                              <1>     ;Last thing, copy the filename over
  1643                              <1>     ;Now save the name
  1644                              <1>     ;Copy from curDirCopy as we have a copy of the dir now
  1645 00004651 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]
  1646 00004655 488D35(5A060000)    <1>     lea rsi, curDirCopy
  1647 0000465C 48A5                <1>     movsq   ;Copy over the space padded name to the sft
  1648 0000465E 66A5                <1>     movsw
  1649 00004660 A4                  <1>     movsb
  1650                              <1>     ;SFT filled
  1651 00004661 E903010000          <1>     jmp .exit
  1652                              <1> .createFile:
  1653                              <1>     ;Create a dummy dir entry in the SDA to swap into the disk buffer
  1654                              <1>     ;rsi points to current sft entry
  1655 00004666 488D3D(5A060000)    <1>     lea rdi, curDirCopy
  1656                              <1>     ;Clear out the dir entry
  1657 0000466D 57                  <1>     push rdi
  1658 0000466E B904000000          <1>     mov ecx, 4
  1659 00004673 31C0                <1>     xor eax, eax
  1660 00004675 F348AB              <1>     rep stosq   ;Store 32 bytes of 0
  1661 00004678 5F                  <1>     pop rdi
  1662                              <1>     ;Copy the FCB name over    
  1663 00004679 56                  <1>     push rsi
  1664 0000467A 57                  <1>     push rdi
  1665 0000467B B90B000000          <1>     mov ecx, 11
  1666 00004680 488D35(D9060000)    <1>     lea rsi, fcbName
  1667 00004687 F3A4                <1>     rep movsb   ;Move over the FCB name
  1668 00004689 5F                  <1>     pop rdi
  1669 0000468A 5E                  <1>     pop rsi
  1670                              <1> 
  1671 0000468B 488B4510            <1>     mov rax, qword [rbp + 10h]  ;Skip ptr to old rbp and return address
  1672                              <1>     ;al has file attributes.
  1673 0000468F 88470B              <1>     mov byte [rdi + fatDirEntry.attribute], al
  1674 00004692 8B4613              <1>     mov eax, dword [rsi + sft.wTime]    ;Get the SFT time to set as crt and wrt
  1675 00004695 89470E              <1>     mov dword [rdi + fatDirEntry.crtTime], eax
  1676 00004698 894716              <1>     mov dword [rdi + fatDirEntry.wrtTime], eax
  1677 0000469B 8B05(7B070000)      <1>     mov eax, dword [dirClustPar]    ;Get the parent directory information
  1678                              <1> .searchForDirSpace:
  1679 000046A1 8905(7F070000)      <1>     mov dword [dirClustA], eax
  1680 000046A7 31C0                <1>     xor eax, eax    ;Reset the search to the start of the current directory
  1681 000046A9 668905(83070000)    <1>     mov word [dirSect], ax
  1682 000046B0 8905(85070000)      <1>     mov dword [dirEntry], eax
  1683 000046B6 57                  <1>     push rdi
  1684 000046B7 E8D6DCFFFF          <1>     call findFreeDiskDirEntry   ;rsi = ptr to a dir entry in a disk buffer
  1685 000046BC 5F                  <1>     pop rdi ;Preserve rdi = curDirCopy
  1686 000046BD 7328                <1>     jnc .dirEntryFnd
  1687 000046BF 813D(7B070000)0000- <1>     cmp dword [dirClustPar], 0  ;If the parent = 0 => Root Dir Fat12/16
  1687 000046C7 0000                <1>
  1688 000046C9 0F84A3000000        <1>     je .bad ;Set CF and exit
  1689 000046CF E8ADDDFFFF          <1>     call growDirectory  ;Increase directory size by 1 cluster
  1690 000046D4 0F828F000000        <1>     jc .exit
  1691 000046DA 3DFFFFFFFF          <1>     cmp eax, -1 ;Disk Full?
  1692 000046DF 0F848D000000        <1>     je .bad
  1693                              <1>     ;Else eax = Newly allocated cluster
  1694 000046E5 EBBA                <1>     jmp short .searchForDirSpace
  1695                              <1> .dirEntryFnd:
  1696 000046E7 4887FE              <1>     xchg rdi, rsi
  1697 000046EA B904000000          <1>     mov ecx, 4
  1698 000046EF F348A5              <1>     rep movsq   ;Copy over the buffered directory
  1699 000046F2 E8A4C1FFFF          <1>     call markBufferDirty ;We wrote to this buffer
  1700 000046F7 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1701 000046FE E9FAFEFFFF          <1>     jmp .createCommon
  1702                              <1> .open:
  1703                              <1> ;curdircopy has a copy of the disk file directory
  1704                              <1> ;Disk vars are set, compute sector and 32 byte entry numbers
  1705 00004703 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1706 0000470A 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;Need it for the following proc
  1707                              <1>     ;Now we can jump to common. qword [tempSect] and byte [entry] setup
  1708 00004711 E890DCFFFF          <1>     call getDiskDirectoryEntry  ;And setup vars! rsi points to disk buffer
  1709 00004716 E9E2FEFFFF          <1>     jmp .createCommon
  1710                              <1> .openProc:
  1711                              <1>     ;Here if Opening a file. 
  1712                              <1>     ;Dirs cannot be opened through open, only for renaming.
  1713                              <1>     ;This is taken care of by openMain.
  1714 0000471B F605(65060000)40    <1>     test byte [curDirCopy + fatDirEntry.attribute], dirCharDev
  1715 00004722 74DF                <1>     jz .open
  1716                              <1> .charDev:
  1717 00004724 488B05(5A060000)    <1>     mov rax, qword [curDirCopy + fatDirEntry.name]  ;Get the name
  1718 0000472B E8032E0000          <1>     call getCharDevDriverPtr    ;Get in rdi device header ptr
  1719 00004730 7307                <1>     jnc .notBadCharDevName
  1720 00004732 B805000000          <1>     mov eax, errAccDen
  1721 00004737 EB30                <1>     jmp short .exit ;CF already set
  1722                              <1> .notBadCharDevName:
  1723 00004739 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  1724 00004740 48897E07            <1>     mov qword [rsi + sft.qPtr], rdi ;Store the Device Driver Header pointer
  1725 00004744 0FB65F08            <1>     movzx ebx, byte [rdi + drvHdr.attrib]   ;Get the attribute word low byte
  1726 00004748 80E31F              <1>     and bl, 01Fh    ;Clear bits 5 6 and 7
  1727 0000474B 80CBC0              <1>     or bl, devCharDev | charDevNoEOF ;Set charDev & noEOF on read
  1728 0000474E 66895E05            <1>     mov word [rsi + sft.wDeviceInfo], bx    ;Store word save for inherit bit
  1729 00004752 C7461700000000      <1>     mov dword [rsi + sft.dFileSize], 0  ;No size
  1730 00004759 48894630            <1>     mov qword [rsi + sft.sFileName], rax
  1731 0000475D B820202020          <1>     mov eax, "    "
  1732 00004762 66894638            <1>     mov word [rsi + sft.sFileName + 8], ax
  1733 00004766 88463A              <1>     mov byte [rsi + sft.sFileName + 10], al
  1734                              <1> .exit:
  1735 00004769 E8FF090000          <1>     call writeThroughBuffersForHandle
  1736 0000476E 7207                <1>     jc .bad2
  1737 00004770 5D                  <1>     pop rbp
  1738                              <1>     return
    13                              <2> %%_ret:
    14 00004771 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1739                              <1> .bad:   ;Set Access Denied
  1740 00004772 B805000000          <1>     mov eax, errAccDen
  1741                              <1> .bad2:  ;Error propagating error code
  1742 00004777 F9                  <1>     stc
  1743 00004778 5D                  <1>     pop rbp
  1744                              <1>     return
    13                              <2> %%_ret:
    14 00004779 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1745                              <1> closeMain: ;Int 2Fh AX=1201h
  1746                              <1> ;Gets the directory entry for a file
  1747                              <1> ;Input: qword [currentSFT] = SFT to operate on (for FCB ops, use the SDA SFT)
  1748                              <1> ;If CF=CY on return: Error, return error with al = error code
  1749                              <1> ;Preserve all regs except eax and rdi
  1750                              <1> ; If CF=NC on return: eax = Unknown
  1751                              <1> ;                     rdi = current SFT ptr
  1752 0000477A 488B3D(32070000)    <1>     mov rdi, qword [currentSFT] ;Get the sft pointer
  1753 00004781 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  1754 00004785 F7C300800000        <1>     test ebx, devRedirDev ;Is this a network drive?
  1755 0000478B 7408                <1>     jz .physical
  1756                              <1>     ;Here we beep out the request to the network redirector (Int 2Fh AX=1106h)
  1757 0000478D B806110000          <1>     mov eax, 1106h  ;Make request
  1758 00004792 CD2F                <1>     int 2Fh ;Beep!
  1759                              <1>     return  ;Returns with CF set or clear as appropriate
    13                              <2> %%_ret:
    14 00004794 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1760                              <1> .physical:  
  1761                              <1> ; We make a request to the dev dir to close the device
  1762                              <1> ; If the device is disk, we then update the directory entry for the disk file
  1763 00004795 E8502F0000          <1>     call dosCrit1Enter  ;Enter critical section 1
  1764 0000479A E878DCFFFF          <1>     call updateSFTDateTimeFields
  1765 0000479F E8BA090000          <1>     call decrementOpenCount ;rdi = current SFT, returns (e)ax = old handle count
  1766 000047A4 50                  <1>     push rax
  1767 000047A5 53                  <1>     push rbx
  1768 000047A6 E86D370000          <1>     call closeShareCallWrapper  ;The SFT count has been decremented
  1769 000047AB 5B                  <1>     pop rbx
  1770 000047AC 58                  <1>     pop rax
  1771                              <1> flushFile:  ;Make this non-local to be jumped to by commit too!
  1772                              <1> ;Updates the Dir entry with info from SFT and flushes.
  1773                              <1> ;Closes the handle properly if only one reference to file remains.
  1774                              <1> ;Input: ax = Initial open handle count
  1775                              <1> ;       bx = attribute byte from the SFT
  1776                              <1> ;       rdi -> Current SFT
  1777 000047AD 50                  <1>     push rax    ;Save the handle count for later
  1778 000047AE 66F7C3C000          <1>     test bx, blokFileNoFlush | devCharDev
  1779 000047B3 7577                <1>     jnz .notDiskBitsSet
  1780 000047B5 E88FDCFFFF          <1>     call getAndUpdateDirSectorForFile   ;rsi -> Buffer dir entry
  1781 000047BA B805000000          <1>     mov eax, errAccDen
  1782 000047BF 726C                <1>     jc .accDenExit
  1783 000047C1 56                  <1>     push rsi    ; -> Buffer dir entry
  1784 000047C2 57                  <1>     push rdi    ; -> SFT ptr
  1785 000047C3 488D7F30            <1>     lea rdi, qword [rdi + sft.sFileName]    ;Ensure this is the right file
  1786 000047C7 E8A8CBFFFF          <1>     call findInBuffer.nameCompare
  1787 000047CC 5F                  <1>     pop rdi     ; -> SFT ptr
  1788 000047CD 5E                  <1>     pop rsi     ; -> Buffer dir entry
  1789 000047CE 7408                <1>     jz .dirEntryForUs
  1790                              <1> .badFileFound:
  1791 000047D0 B802000000          <1>     mov eax, errFnf ;Dir entry has changed, and now file not found on medium
  1792 000047D5 F9                  <1>     stc
  1793 000047D6 EB55                <1>     jmp short .accDenExit
  1794                              <1> .dirEntryForUs:
  1795 000047D8 0FB64E0B            <1>     movzx ecx, byte [rsi + fatDirEntry.attribute] ;Get dir file attrib
  1796 000047DC 0FB64704            <1>     movzx eax, byte [rdi + sft.bFileAttrib]   ;Get SFT file attrib
  1797 000047E0 F6D0                <1>     not al  ;Reverse the bits
  1798 000047E2 20C8                <1>     and al, cl  ;These should be equal
  1799 000047E4 2416                <1>     and al, dirInclusive ;And nothing outside of these should be set
  1800 000047E6 75E8                <1>     jnz .badFileFound
  1801                              <1>     
  1802 000047E8 804E0B20            <1>     or byte [rsi + fatDirEntry.attribute], dirArchive   ;File changed!
  1803 000047EC 8B4717              <1>     mov eax, dword [rdi + sft.dFileSize]    ;Get the file size
  1804 000047EF 89461C              <1>     mov dword [rsi + fatDirEntry.fileSize], eax ;And update field
  1805 000047F2 0FB74713            <1>     movzx eax, word [rdi + sft.wTime]   ;Get the last write time
  1806 000047F6 66894616            <1>     mov word [rsi + fatDirEntry.wrtTime], ax    ;And update field
  1807 000047FA 0FB74715            <1>     movzx eax, word [rdi + sft.wDate]   ;Get the last write time
  1808 000047FE 66894618            <1>     mov word [rsi + fatDirEntry.wrtDate], ax    ;And update field
  1809 00004802 66894612            <1>     mov word [rsi + fatDirEntry.lastAccDat], ax ;Partialy implemented
  1810 00004806 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Always update the start cluster
  1811 00004809 6689461A            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusLo], ax
  1812 0000480D C1E810              <1>     shr eax, 10h
  1813 00004810 66894614            <1>     mov word [rsi + fatDirEntry + fatDirEntry.fstClusHi], ax
  1814 00004814 E882C0FFFF          <1>     call markBufferDirty
  1815 00004819 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]
  1816 00004820 E813BFFFFF          <1>     call flushAllBuffersForDrive
  1817 00004825 B805000000          <1>     mov eax, errAccDen
  1818 0000482A 7201                <1>     jc .accDenExit
  1819                              <1> .notDiskBitsSet:
  1820 0000482C F8                  <1>     clc
  1821                              <1> .accDenExit:
  1822 0000482D 9C                  <1>     pushfq
  1823 0000482E E82FDEFFFF          <1>     call closeSFT   ;Called with rdi -> Current SFT
  1824 00004833 9D                  <1>     popfq
  1825 00004834 59                  <1>     pop rcx ;Get back the initial open handle count
  1826 00004835 0FB7C9              <1>     movzx ecx, cx   ;Force upper bits clear
  1827 00004838 9C                  <1>     pushfq
  1828 00004839 FFC9                <1>     dec ecx ;Decrement count
  1829 0000483B 7503                <1>     jnz .exit   ;If our initial count was not 1, skip resetting the count since
  1830 0000483D 66890F              <1>     mov word [rdi], cx ; decrementOpenCount didnt set it to -1
  1831                              <1> .exit:
  1832 00004840 9D                  <1>     popfq
  1833 00004841 E8AE2E0000          <1>     call dosCrit1Exit
  1834                              <1>     return
    13                              <2> %%_ret:
    14 00004846 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1835                              <1> 
  1836                              <1> readBytes:
  1837                              <1> ;Reads the bytes into the user buffer for the setup SFT (currentSFT)
  1838                              <1> ;Input: ecx = Number of bytes to read
  1839                              <1> ;Output: ecx = Number of bytes read
  1840                              <1> ;Number of bytes read 
  1841                              <1> ;If CF=CY, return with error code in ax
  1842 00004847 E815070000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  1843 0000484C 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  1844 00004850 240F                <1>     and al, 0Fh ;Eliminate except access mode
  1845 00004852 3C01                <1>     cmp al, WriteAccess
  1846 00004854 7509                <1>     jne .readable
  1847 00004856 B805000000          <1>     mov eax, errAccDen
  1848 0000485B 31C9                <1>     xor ecx, ecx    ;Zero chars tfrred
  1849 0000485D F9                  <1>     stc
  1850                              <1>     return
    13                              <2> %%_ret:
    14 0000485E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1851                              <1> .readable:
  1852 0000485F E843070000          <1>     call setupVarsForTransfer   ;Setup initial stuff only!
  1853 00004864 67E310              <1>     jecxz .exitOk  ;If ecx = 0 (number of bytes to transfer = 0), exit
  1854 00004867 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  1855 0000486D 740A                <1>     jz .notRedir
  1856 0000486F B808110000          <1>     mov eax, 1108h  ;Call Redir Read Bytes function
  1857 00004874 CD2F                <1>     int 2Fh ;Call redir (tfr buffer in DTA var, ecx has bytes to tfr)
  1858                              <1>     return 
    13                              <2> %%_ret:
    14 00004876 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1859                              <1> .exitOk:
  1860 00004877 F8                  <1>     clc
  1861                              <1>     return 
    13                              <2> %%_ret:
    14 00004878 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1862                              <1> .notRedir:
  1863 00004879 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  1864 0000487F 7510                <1>     jnz readCharDev
  1865 00004881 E8642E0000          <1>     call dosCrit1Enter
  1866 00004886 E89E010000          <1>     call readDiskFile   ;Called with rbp = Working DPB and rdi = CurrentSFT
  1867 0000488B E8642E0000          <1>     call dosCrit1Exit
  1868                              <1>     return 
    13                              <2> %%_ret:
    14 00004890 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1869                              <1> readCharDev:
  1870                              <1> ;rdi points to sft for char dev to read
  1871                              <1> ;ecx has the number of bytes to transfer
  1872                              <1> ;Vars have been set up and DTA has the transfer address
  1873                              <1> ;Returns in ecx, the actual bytes transferred
  1874                              <1> ;If CF=CY, return with error code in ax
  1875 00004891 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr  ;Error is with a char device operation
  1876 00004898 668B5F05            <1>     mov bx, word [rdi + sft.wDeviceInfo]    ;Get dev info
  1877 0000489C 488B3D(17040000)    <1>     mov rdi, qword [currentDTA] ;Get the DTA for this transfer in rdi
  1878 000048A3 F6C340              <1>     test bl, charDevNoEOF   ;Does our device NOT generate EOF's on reads?
  1879 000048A6 0F84CA020000        <1>     jz charReadExitOk    ;If it does, jump to exit as if EOF has been hit
  1880 000048AC F6C304              <1>     test bl, charDevNulDev  ;Is our device the NUL device?
  1881 000048AF 7407                <1>     jz .notNul
  1882                              <1>     ;If it is a new NUL device hdl, we can simply return!
  1883                              <1>     ;NUL never transfers bytes and now clears this bit to indicate EOF
  1884 000048B1 31C0                <1>     xor eax, eax    ;Set ZF so the next read causes EOF!
  1885 000048B3 E9BE020000          <1>     jmp charReadExitOk    ;Goto exit
  1886                              <1> .notNul:
  1887 000048B8 F6C320              <1>     test bl, charDevBinary
  1888 000048BB 0F857F000000        <1>     jnz .binary
  1889                              <1>     ;Here if the device is in ASCII mode
  1890 000048C1 F6C301              <1>     test bl, charDevConIn   ;Is this device STDIN?
  1891 000048C4 0F84D8000000        <1>     jz .generalASCII    ;If not, goto generalASCII, else fallthru
  1892                              <1> .consoleInput:
  1893                              <1>     ;Console input here
  1894 000048CA E892E2FFFF          <1>     call vConSwapDriver    ;Prepare CON Useage!
  1895                              <1>     ;Get current offset into buffer (if one exists)
  1896 000048CF 488B35(2B000000)    <1>     mov rsi, qword [vConHdlOff]
  1897 000048D6 4885F6              <1>     test rsi, rsi   ;Any chars in the buffer?
  1898 000048D9 753C                <1>     jnz .tfrBuf ;If so, we want to keep tfring those chars to user DTA
  1899 000048DB 803D(4E030000)80    <1>     cmp byte [vConInBuf], 80h ;Is this buffer full?
  1900 000048E2 7409                <1>     je .oldBuf  ;If so, we set up the buffer function to allow editing of buffer
  1901                              <1>     ;Else, reset the buffer
  1902 000048E4 66C705(4E030000)80- <1>     mov word [vConInBuf], 0FF80h ;Byte 0=>length of buf, byte 1 => chars in buf
  1902 000048EC FF                  <1>
  1903                              <1> .oldBuf:
  1904                              <1> ;Preserve the dta and number of chars to tfr
  1905 000048ED 51                  <1>     push rcx
  1906 000048EE 57                  <1>     push rdi
  1907 000048EF 488D15(4E030000)    <1>     lea rdx, vConInBuf
  1908 000048F6 E886E2FFFF          <1>     call buffCharInput_BE   ;Get con buffered input
  1909 000048FB 5F                  <1>     pop rdi
  1910 000048FC 59                  <1>     pop rcx
  1911 000048FD 488D35(50030000)    <1>     lea rsi, qword [vConInBuf + 2]  ;Get the address of the data area of buffer
  1912 00004904 803E1A              <1>     cmp byte [rsi], EOF
  1913 00004907 750E                <1>     jne .tfrBuf ;If not equal, start copying over the buffer to the user DTA
  1914 00004909 C6071A              <1>     mov byte [rdi], EOF ;Store EOF at start of user DTA
  1915 0000490C B00A                <1>     mov al, LF
  1916 0000490E E8DCDDFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1917 00004913 31F6                <1>     xor esi, esi    ;Set ZF = ZE
  1918 00004915 EB18                <1>     jmp short .exit
  1919                              <1> .tfrBuf:
  1920 00004917 AC                  <1>     lodsb   ;Get the char across from rsi to rdi with a copy in al
  1921 00004918 AA                  <1>     stosb
  1922 00004919 3C0D                <1>     cmp al, CR 
  1923 0000491B 7503                <1>     jne .noCRLF
  1924 0000491D C6060A              <1>     mov byte [rsi], LF  ;Store an LF in source to go one more time around
  1925                              <1> .noCRLF:
  1926 00004920 3C0A                <1>     cmp al, LF  ;Compare if al is LF
  1927 00004922 E0F3                <1>     loopne .tfrBuf  ;Copy the LF over if so and exit and dec ecx one more time
  1928 00004924 7509                <1>     jne .exit   ;If the reason for exiting loop was ecx = 0, skip the following
  1929                              <1>     ;This only applies if the reason for exiting the loop is al=LF
  1930 00004926 E8C4DDFFFF          <1>     call charOut_B.in   ;Echo CRLF
  1931 0000492B 31F6                <1>     xor esi, esi
  1932 0000492D 0C01                <1>     or al, 1    ;Set ZF = NZ
  1933                              <1> .exit:
  1934 0000492F E845E2FFFF          <1>     call vConRetDriver
  1935 00004934 488935(2B000000)    <1>     mov qword [vConHdlOff], rsi ;Store the offset (or 0 value)
  1936                              <1>     ;Only return with ZF=ZE if first char in buffer was EOF
  1937 0000493B E936020000          <1>     jmp charReadExitOk    ;Exit ok! ecx has # chars tfred
  1938                              <1> 
  1939                              <1> .binary:
  1940                              <1>     ;Setup registers for transfer
  1941 00004940 4889FB              <1>     mov rbx, rdi    ;Transfer the buffer pointer into rbx
  1942 00004943 4831ED              <1>     xor rbp, rbp    ;Indicate Char device to the function
  1943                              <1>     ;ecx has the number of bytes to transfer directly
  1944 00004946 E8B6270000          <1>     call primReqReadSetup   ;Setup req hdr for read and get hdr addr in rbx 
  1945 0000494B 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get the working device driver
  1946 00004952 E862240000          <1>     call goDriver   ;Make the request
  1947 00004957 4889FA              <1>     mov rdx, rdi    ;Save transfer buffer in rdx
  1948 0000495A 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status] ;Get status word in di
  1949 00004961 F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1950 00004967 7422                <1>     jz .binNoError
  1951                              <1>     ;ERROR HERE! Prepare for Int 24h (if SFT allows us to issue Int 24h)
  1952 00004969 B486                <1>     mov ah, critCharDev | critData ;Char device, data error signature
  1953 0000496B E82F1E0000          <1>     call charDevErr   ;ah = has part of the error 
  1954                              <1>     ;al now has the response
  1955 00004970 3C00                <1>     cmp al, critIgnore
  1956 00004972 7417                <1>     je .binNoError ;Simply proceed as normal
  1957 00004974 4889D7              <1>     mov rdi, rdx    ;Get back the buffer if it is a retry operation
  1958 00004977 3C03                <1>     cmp al, critFail
  1959 00004979 75C5                <1>     jne .binary ;If not fail, re-try the operation (ecx isn't touched)
  1960                              <1>     ;Fallthrough here for fail!
  1961                              <1> .failExit:
  1962 0000497B 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  1963 00004982 31C9                <1>     xor ecx, ecx
  1964 00004984 B805000000          <1>     mov eax, errAccDen
  1965 00004989 F9                  <1>     stc ;Set carry flag to get caught as a error by caller
  1966                              <1>     return
    13                              <2> %%_ret:
    14 0000498A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  1967                              <1> .binNoError:
  1968                              <1>     ;Get number of bytes transferred into 
  1969 0000498B 8B05(D7040000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]   ;Get bytes transferred
  1970 00004991 F7D8                <1>     neg eax ;make it into -eax
  1971 00004993 678D0C01            <1>     lea ecx, dword [ecx + eax]  ;ecx has bytes to transfer, -eax has bytes trfrd
  1972                              <1>     ;ecx now has bytes left to transfer
  1973 00004997 50                  <1>     push rax    ;Save value on stack
  1974 00004998 31C0                <1>     xor eax, eax ;Set ZF
  1975 0000499A FFC0                <1>     inc eax ;Clear ZF
  1976 0000499C 58                  <1>     pop rax ;Get back the original value
  1977 0000499D E9D4010000          <1>     jmp charReadExitOk    ;GoExit with ecx=Bytes left to read. ZF=NZ always
  1978                              <1> .generalASCII:
  1979                              <1>     ;ecx has bytes to transfer here
  1980                              <1>     ;Setup registers for transfer
  1981 000049A2 4889FB              <1>     mov rbx, rdi    ;Move the DTA address into rbx for readSetup
  1982 000049A5 51                  <1>     push rcx
  1983 000049A6 B901000000          <1>     mov ecx, 1  ;Get one char
  1984 000049AB 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  1985 000049AE E84E270000          <1>     call primReqReadSetup   ;Setup request
  1986 000049B3 59                  <1>     pop rcx
  1987                              <1>     ;rbx now has request header ptr
  1988 000049B4 488B35(0A070000)    <1>     mov rsi, qword [workingDD]  ;Get device driver header ptr in rsi
  1989                              <1> .asciiReadChar:
  1990 000049BB 4889FA              <1>     mov rdx, rdi    ;Save the current buffer pointer position in rdx
  1991 000049BE E821E1FFFF          <1>     call checkBreak ;Check we don't have a ^C pending on CON
  1992 000049C3 E8F1230000          <1>     call goDriver   ;If no ^C found (which exits DOS) Make request!
  1993 000049C8 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status] ;Get status word in di
  1994 000049CF F7C700800000        <1>     test edi, drvErrStatus  ;Did an error occur?
  1995 000049D5 7420                <1>     jz .asciiNoError
  1996 000049D7 B486                <1>     mov ah, critCharDev | critData
  1997 000049D9 E8C11D0000          <1>     call charDevErr    ;Call Int 24h, ecx preserved
  1998                              <1>     ;Now setup number of bytes to transfer to 1 if the user requests retry
  1999 000049DE C705(D7040000)0100- <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], 1
  1999 000049E6 0000                <1>
  2000 000049E8 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  2001 000049EB 3C03                <1>     cmp al, critFail
  2002 000049ED 748C                <1>     je .failExit
  2003 000049EF 3C01                <1>     cmp al, critRetry
  2004 000049F1 74C8                <1>     je .asciiReadChar
  2005                              <1>     ;Ignore here, pretend NULL CHAR was read
  2006 000049F3 30C0                <1>     xor al, al
  2007 000049F5 EB15                <1>     jmp short .asciiIgnoreEP
  2008                              <1> .asciiNoError:
  2009                              <1> ;Now process the char, add 1 to the transfer buffer (and rdi->BufferPtr)
  2010                              <1> ; and dec 1 from ecx (tfrCntr is dealt with later)
  2011                              <1> ;Preserve RBX, RSI
  2012                              <1> ;Check EXACTLY 1 char was transferred. Any other value => exit from request
  2013 000049F7 4889D7              <1>     mov rdi, rdx    ;Get the buffer position back into rdi
  2014 000049FA 813D(D7040000)0100- <1>     cmp dword [primReqPkt + ioReqPkt.tfrlen], 1
  2014 00004A02 0000                <1>
  2015 00004A04 0F856C010000        <1>     jne charReadExitOk    ;Exit request if more than 1 char was tranferred (ZF=NZ)
  2016 00004A0A 8A07                <1>     mov al, byte [rdi]  ;Get byte just input from driver in al
  2017                              <1> .asciiIgnoreEP:
  2018 00004A0C 48FF05(CF040000)    <1>     inc qword [primReqPkt + ioReqPkt.bufptr]   ;Goto next char position
  2019 00004A13 48FFC7              <1>     inc rdi ;Also advance register pointer
  2020 00004A16 3C1A                <1>     cmp al, EOF ;Was the char just read EOF?
  2021 00004A18 0F8458010000        <1>     je charReadExitOk   ;Exit if so!
  2022 00004A1E 3C0D                <1>     cmp al, CR  ;Was this char CR?
  2023 00004A20 E099                <1>     loopne .asciiReadChar   ;dec rcx, jnz .asciiReadChar
  2024                              <1>     ;Fallthrough also if al = CR (i.e ZF=ZE)
  2025 00004A22 FEC0                <1>     inc al  ;make ZF=NZ
  2026 00004A24 E94D010000          <1>     jmp charReadExitOk    ;Called with ecx = Number of bytes LEFT to transfer
  2027                              <1> 
  2028                              <1> readDiskFile:
  2029                              <1> ;rdi = Current SFT
  2030                              <1> ;rbp = WorkingDPB
  2031                              <1> ;ecx = Bytes to transfer
  2032 00004A29 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Error is with a disk device operation
  2033 00004A30 C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Read operation
  2034                              <1>     ;We have the following vars setup:
  2035                              <1>     ;tfrLen, tfrCntr, qPtr, workingDPB, workingDrv, currByteF/S, currSectF/C, 
  2036                              <1>     ;currClustF
  2037                              <1>     ;Now convert currSectC to disk sector by using currClustF
  2038                              <1>     ;Using currClustF as a counter, we walk the fat from startingCluster
  2039 00004A37 8B5717              <1>     mov edx, dword [rdi + sft.dFileSize]  ;Check that the file size isn't zero
  2040 00004A3A 85D2                <1>     test edx, edx
  2041 00004A3C 0F843F010000        <1>     jz readExitOk  ;Return with zero bytes transferred
  2042 00004A42 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2043 00004A48 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]  ;Get starting cluster
  2044 00004A4B 8905(54070000)      <1>     mov dword [currClustD], eax
  2045 00004A51 85C0                <1>     test eax, eax   ;If starting cluster is zero, exit no bytes read
  2046 00004A53 0F8428010000        <1>     jz readExitOk
  2047 00004A59 3DFFFFFFFF          <1>     cmp eax, -1 ;If left in an indeterminate state somehow, exit no bytes
  2048 00004A5E 0F841D010000        <1>     jz readExitOk   
  2049 00004A64 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the tfrlen if we are past the end of the file
  2050                              <1>     ;Check if we have opened a volume label (should never happen)
  2051 00004A6A F6470408            <1>     test byte [rdi + sft.bFileAttrib], volLabelFile    ;If we try read from vollbl
  2052 00004A6E 7407                <1>     jz .shareCheck
  2053 00004A70 B805000000          <1>     mov eax, errAccDen
  2054 00004A75 F9                  <1>     stc
  2055                              <1>     return
    13                              <2> %%_ret:
    14 00004A76 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2056                              <1> .shareCheck:
  2057                              <1> ;Entered with rdi -> SFT and ecx=number of bytes to read (to check if possible)
  2058 00004A77 E8A3340000          <1>     call retryShareIODelay
  2059 00004A7C 7308                <1>     jnc .shareOk
  2060 00004A7E E83C350000          <1>     call shareCheckReadLockViolation
  2061 00004A83 73F2                <1>     jnc .shareCheck ;IF the user selected retry, lets try again
  2062                              <1>     return  ;Otherwise, return with the share error code in eax and CF=CY
    13                              <2> %%_ret:
    14 00004A85 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2063                              <1> .shareOk:
  2064 00004A86 E84EBCFFFF          <1>     call markBuffersAsUnreferencedWrapper
  2065 00004A8B 31DB                <1>     xor ebx, ebx    ;Use ebx to contain the old cluster number
  2066 00004A8D 85D2                <1>     test edx, edx   ;Is the relative sector zero? (I.E start of file?)
  2067 00004A8F 7426                <1>     jz .skipWalk
  2068                              <1> .goToCurrentCluster:
  2069 00004A91 E881C2FFFF          <1>     call readFAT    ;Get in eax the next cluster
  2070 00004A96 0F82CB000000        <1>     jc .badExit   ;This can only return Fail
  2071 00004A9C 3DFFFFFFFF          <1>     cmp eax, -1 ;Are we gonna go past the end of the file?
  2072 00004AA1 0F84DA000000        <1>     je readExitOk ;Exit with no bytes transferred
  2073 00004AA7 8905(54070000)      <1>     mov dword [currClustD], eax    ;Save eax as current cluster
  2074 00004AAD FFCA                <1>     dec edx ;Decrement counter
  2075 00004AAF 75E0                <1>     jnz .goToCurrentCluster
  2076 00004AB1 8B05(54070000)      <1>     mov eax, dword [currClustD]    ;Get the current cluster in eax
  2077                              <1> .skipWalk:
  2078 00004AB7 E8C9BFFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2079                              <1>     ;Now we add the offset to this
  2080 00004ABC 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2081 00004AC3 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2082 00004AC6 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2083                              <1> ;Main
  2084                              <1> .mainRead:
  2085 00004ACD E8BB000000          <1>     call diskIOGetBuffer
  2086 00004AD2 0F828F000000        <1>     jc .badExit
  2087 00004AD8 488D7320            <1>     lea rsi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rsi
  2088 00004ADC 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2089 00004AE3 4801DE              <1>     add rsi, rbx    ;Shift rsi by that amount into the sector
  2090                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2091                              <1>     ; 1) Bytes left in sector size, 2) Bytes left in File, 
  2092                              <1>     ; 3) Bytes left to read from Request
  2093                              <1> 
  2094 00004AE6 8B4F17              <1>     mov ecx, dword [rdi + sft.dFileSize]
  2095 00004AE9 2B0D(67070000)      <1>     sub ecx, dword [currByteF]  ;Get bytes left to read in file in ecx
  2096 00004AEF 8B1D(77070000)      <1>     mov ebx, dword [tfrCntr]
  2097 00004AF5 39D9                <1>     cmp ecx, ebx    ;Is bytes left to read in file > bytes user has left?
  2098 00004AF7 0F47CB              <1>     cmova ecx, ebx  ;Move ebx into ecx if so
  2099 00004AFA 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]  ;Compare to sector size
  2100 00004AFE 662B1D(65070000)    <1>     sub bx, word [currByteS]    ;Remove the number of bytes into the sector we are
  2101 00004B05 39D9                <1>     cmp ecx, ebx  ;ecx > sector size?
  2102 00004B07 0F47CB              <1>     cmova ecx, ebx  ;Move it into ecx if so
  2103                              <1>     
  2104 00004B0A 57                  <1>     push rdi
  2105 00004B0B 488B3D(17040000)    <1>     mov rdi, qword [currentDTA]
  2106 00004B12 51                  <1>     push rcx
  2107 00004B13 F3A4                <1>     rep movsb
  2108 00004B15 59                  <1>     pop rcx
  2109 00004B16 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2110 00004B1C 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2111 00004B22 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;rdi has been shifted by ecx on entry amount
  2112 00004B29 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2113 00004B2F 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2114 00004B33 31D2                <1>     xor edx, edx    ;Zero rdx
  2115 00004B35 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2116 00004B37 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2117 00004B3E 5F                  <1>     pop rdi
  2118 00004B3F 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2119 00004B45 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2120 00004B47 7438                <1>     jz readExitOk ;Exit if so!
  2121 00004B49 E80AC1FFFF          <1>     call getNextSectorOfFile    ;Get the next sector of the file
  2122 00004B4E 7217                <1>     jc .badExit
  2123                              <1>     ;If ZF=ZE then currClustF has last cluster
  2124 00004B50 742F                <1>     jz readExitOk ;ecx has the number of bytes left to transfer. ZF=ZE => EOF
  2125                              <1>     ;Else repeat
  2126                              <1>     ;currSectD has been updated, we now set currByteS = 0
  2127 00004B52 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2127 00004B5A 00                  <1>
  2128 00004B5B 488B05(5D070000)    <1>     mov rax, qword [currSectD]  ;Get the next sector to read from
  2129 00004B62 E966FFFFFF          <1>     jmp .mainRead
  2130                              <1> .badExit:
  2131                              <1>     ;When a disk error occurs within the bit where vars have changed,
  2132                              <1>     ; we need to update the SFT before returning
  2133 00004B67 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]    ;Get the bytes left to transfer
  2134 00004B6D 30C0                <1>     xor al, al  ;Set ZF flag
  2135 00004B6F E80D000000          <1>     call readExitOk   ;We call this
  2136 00004B74 F9                  <1>     stc ;All calls which end up here return Fail!
  2137 00004B75 C3                  <1>     ret
  2138                              <1> charReadExitOk:
  2139                              <1> ;Input: ecx = Number of bytes left to transfer!
  2140                              <1> ;       ZF=ZE => Ensure we reach "EOF" on char device!
  2141                              <1> ;       ZF=NZ => preserve bit 6
  2142 00004B76 7509                <1>     jnz readExitOk
  2143 00004B78 E8E4030000          <1>     call getCurrentSFT  ;Get currentSFT in rdi
  2144 00004B7D 806705BF            <1>     and byte [rdi + sft.wDeviceInfo], ~charDevNoEOF
  2145                              <1> readExitOk: ;Disk xfrs always go here. Binary char too but by bouncing!
  2146                              <1> ;Input: ecx = Number of bytes left to transfer! 
  2147 00004B81 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Update bytes left to transfer
  2148 00004B87 E8DD030000          <1>     call updateCurrentSFT   ;Return with CF=NC and ecx=Bytes transferred
  2149                              <1>     return 
    13                              <2> %%_ret:
    14 00004B8C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2150                              <1> 
  2151                              <1> diskIOGetBuffer:
  2152                              <1> ;If appropriate, checks if the user has typed a ^C at the console.
  2153                              <1> ; Then reads the specified sector into a buffer and returns a ptr to 
  2154                              <1> ; the buffer.
  2155                              <1> ;Input: rax = Sector to get buffer for. 
  2156                              <1> ;Output:  If CF=NC: rbx -> bufHdrptr with buffer filled with sector data
  2157                              <1> ;         Else: Error
  2158 00004B8D F605(32040000)FF    <1>     test byte [breakFlag], -1   ;If break flag is set
  2159 00004B94 7407                <1>     jz .skipBreak
  2160 00004B96 50                  <1>     push rax
  2161 00004B97 E848DFFFFF          <1>     call checkBreak
  2162 00004B9C 58                  <1>     pop rax
  2163                              <1> .skipBreak:
  2164 00004B9D E863BEFFFF          <1>     call getBufForData
  2165                              <1>     return
    13                              <2> %%_ret:
    14 00004BA2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2166                              <1> 
  2167                              <1> writeBytes:
  2168                              <1> ;Writes the bytes from the user buffer
  2169                              <1> ;Input: ecx = Bytes to xfr
  2170                              <1> ;Returns number of bytes written in ecx if CF=NC
  2171 00004BA3 E8B9030000          <1>     call getCurrentSFT  ;Get current SFT in rdi
  2172 00004BA8 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
  2173 00004BAC 240F                <1>     and al, 0Fh ;Eliminate except access mode
  2174 00004BAE 3C00                <1>     cmp al, ReadAccess
  2175 00004BB0 7509                <1>     jne .writeable
  2176                              <1> .noWrite:
  2177 00004BB2 B805000000          <1>     mov eax, errAccDen
  2178 00004BB7 31C9                <1>     xor ecx, ecx
  2179 00004BB9 F9                  <1>     stc
  2180 00004BBA C3                  <1>     ret
  2181                              <1> .writeable:
  2182                              <1> ;FCB check file attributes since we can create an RO flag and write to it directly
  2183                              <1> ; but cannot open a read only file. This is redundant whilst we don't allow for 
  2184                              <1> ; FCB IO
  2185 00004BBB 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
  2186 00004BC1 7406                <1>     jz .skipAttribCheck
  2187 00004BC3 807F0401            <1>     cmp byte [rdi + sft.bFileAttrib], readOnlyFile
  2188 00004BC7 74E9                <1>     je .noWrite ;If the file is read only, RIP
  2189                              <1> .skipAttribCheck:
  2190 00004BC9 E8D9030000          <1>     call setupVarsForTransfer   ;Returns bytes to transfer in ecx
  2191 00004BCE 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
  2192 00004BD4 7408                <1>     jz .notRedir
  2193 00004BD6 B809110000          <1>     mov eax, 1109h  ;Write to redir
  2194 00004BDB CD2F                <1>     int 2Fh
  2195                              <1>     return
    13                              <2> %%_ret:
    14 00004BDD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2196                              <1> .notRedir:
  2197 00004BDE 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
  2198 00004BE4 7510                <1>     jnz writeCharDev
  2199 00004BE6 E8FF2A0000          <1>     call dosCrit1Enter
  2200 00004BEB E84E010000          <1>     call writeDiskFile
  2201 00004BF0 E8FF2A0000          <1>     call dosCrit1Exit
  2202                              <1>     return
    13                              <2> %%_ret:
    14 00004BF5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2203                              <1> writeCharDev:
  2204 00004BF6 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
  2205                              <1>     ;We are adding bytes to this file so no EOF when reading from it
  2206 00004BFD 66814F054000        <1>     or word [rdi + sft.wDeviceInfo], charDevNoEOF
  2207 00004C03 0FB75F05            <1>     movzx ebx, word [rdi + sft.wDeviceInfo]
  2208                              <1>     ;If ecx = 0, we exit
  2209 00004C07 31C0                <1>     xor eax, eax    ;If ecx = 0, set eax = 0 to indicate 0 bytes tfrred
  2210 00004C09 85C9                <1>     test ecx, ecx
  2211 00004C0B 0F8438030000        <1>     jz writeExitChar
  2212 00004C11 88D8                <1>     mov al, bl  ;Move the flags over
  2213 00004C13 488B1D(17040000)    <1>     mov rbx, qword [currentDTA] ;Get ptr to storage buffer in rbx
  2214 00004C1A 4889DF              <1>     mov rdi, rbx
  2215 00004C1D 31D2                <1>     xor edx, edx    ;Set edx to keep track of how many bytes have been xfrd
  2216 00004C1F A820                <1>     test al, charDevBinary
  2217 00004C21 744A                <1>     jz .asciiDev
  2218                              <1> ;Write binary transfer here
  2219                              <1> .binaryLp:
  2220 00004C23 31C0                <1>     xor eax, eax
  2221 00004C25 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2222 00004C28 E8C9240000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2223 00004C2D 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2224 00004C34 E87C210000          <1>     call goDriverChar
  2225 00004C39 4889FA              <1>     mov rdx, rdi    ;Save buffer ptr in rdx
  2226 00004C3C B487                <1>     mov ah, critCharDev | critData | critWrite
  2227 00004C3E 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status]  ;Get status word
  2228 00004C45 F7C700800000        <1>     test edi, drvErrStatus
  2229 00004C4B 7415                <1>     jz .binXfrOk
  2230 00004C4D E84D1B0000          <1>     call charDevErr ;Invoke Int 24h
  2231 00004C52 4889D3              <1>     mov rbx, rdx    ;Return the buffer ptr in rbx
  2232 00004C55 3C00                <1>     cmp al, critIgnore
  2233 00004C57 7409                <1>     je .binXfrOk
  2234 00004C59 3C01                <1>     cmp al, critRetry
  2235 00004C5B 74C6                <1>     je .binaryLp
  2236 00004C5D E9D5000000          <1>     jmp .exitFail
  2237                              <1> .binXfrOk:
  2238 00004C62 8B05(D7040000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]
  2239 00004C68 E9DC020000          <1>     jmp writeExitChar   ;Exit oki with # bytes xfrd in eax
  2240                              <1> .asciiDev:
  2241 00004C6D A802                <1>     test al, charDevConOut
  2242 00004C6F 0F859E000000        <1>     jnz .conDev
  2243 00004C75 A804                <1>     test al, charDevNulDev
  2244 00004C77 0F858F000000        <1>     jnz .nulDev
  2245                              <1>     ;Here we transfer for a generic character device in ascii mode
  2246 00004C7D 89D0                <1>     mov eax, edx    ;Move bytes transferred into eax
  2247 00004C7F 803B1A              <1>     cmp byte [rbx], EOF ;Is the string pointer at a EOF character?
  2248 00004C82 0F84C1020000        <1>     je writeExitChar
  2249 00004C88 51                  <1>     push rcx
  2250 00004C89 B901000000          <1>     mov ecx, 1  ;xfr 1 byte
  2251 00004C8E 4831ED              <1>     xor rbp, rbp    ;Indicate a char device
  2252 00004C91 E860240000          <1>     call primReqWriteSetup   ;Setup request, rbx points to buffer
  2253 00004C96 59                  <1>     pop rcx
  2254 00004C97 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2255 00004C9E 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr] ;Get the dev drv pointer in rsi
  2256                              <1> .asciiLp:
  2257 00004CA2 E83DDEFFFF          <1>     call checkBreak
  2258 00004CA7 E80D210000          <1>     call goDriver
  2259 00004CAC 57                  <1>     push rdi
  2260 00004CAD B487                <1>     mov ah, critCharDev | critData | critWrite
  2261 00004CAF 0FB73D(C4040000)    <1>     movzx edi, word [primReqPkt + ioReqPkt.status]  ;Get status word
  2262 00004CB6 F7C700800000        <1>     test edi, drvErrStatus
  2263 00004CBC 741D                <1>     jz .asciiNoError
  2264 00004CBE E8DC1A0000          <1>     call charDevErr ;Invoke Int 24h
  2265 00004CC3 5F                  <1>     pop rdi
  2266 00004CC4 C705(D7040000)0100- <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], 1 ;Set tfrlen to 1 byte
  2266 00004CCC 0000                <1>
  2267 00004CCE 3C01                <1>     cmp al, critRetry
  2268 00004CD0 74D0                <1>     je .asciiLp
  2269 00004CD2 3C00                <1>     cmp al, critIgnore
  2270 00004CD4 7412                <1>     je .ignoreEp
  2271 00004CD6 E95C000000          <1>     jmp .exitFail
  2272                              <1> .asciiNoError:
  2273 00004CDB 5F                  <1>     pop rdi
  2274 00004CDC 813D(D7040000)0000- <1>     cmp dword [primReqPkt + ioReqPkt.tfrlen], 0
  2274 00004CE4 0000                <1>
  2275 00004CE6 741D                <1>     je .bytesXfrdOk
  2276                              <1> .ignoreEp:
  2277 00004CE8 FFC2                <1>     inc edx ;One more char has been xfrd
  2278 00004CEA FF05(CF040000)      <1>     inc dword [primReqPkt + ioReqPkt.bufptr]    ;Increment buffer ptr
  2279 00004CF0 48FFC7              <1>     inc rdi ;And our copy... 
  2280 00004CF3 803F1A              <1>     cmp byte [rdi], EOF ;... to do this!
  2281 00004CF6 740D                <1>     je .bytesXfrdOk
  2282 00004CF8 66C705(C4040000)00- <1>     mov word [primReqPkt + ioReqPkt.status], 0
  2282 00004D00 00                  <1>
  2283 00004D01 FFC9                <1>     dec ecx
  2284 00004D03 759D                <1>     jnz .asciiLp
  2285                              <1> .bytesXfrdOk:
  2286 00004D05 89D0                <1>     mov eax, edx
  2287 00004D07 E93D020000          <1>     jmp writeExitChar
  2288                              <1> .nulDev:
  2289 00004D0C 89C8                <1>     mov eax, ecx    ;Move bytes to transfer into eax (as if it happened)
  2290 00004D0E E936020000          <1>     jmp writeExitChar
  2291                              <1> .conDev:
  2292 00004D13 E849DEFFFF          <1>     call vConSwapDriver
  2293 00004D18 4889DE              <1>     mov rsi, rbx    ;Move the buffer ptr into rsi
  2294 00004D1B 51                  <1>     push rcx
  2295                              <1> .conDevLp:
  2296 00004D1C AC                  <1>     lodsb
  2297 00004D1D 3C1A                <1>     cmp al, EOF
  2298 00004D1F 7409                <1>     je .conDevExit
  2299 00004D21 E8C9D9FFFF          <1>     call charOut_B.in   ;Use internal ep to tfr byte out to CON
  2300 00004D26 FFC9                <1>     dec ecx
  2301 00004D28 75F2                <1>     jnz .conDevLp
  2302                              <1> .conDevExit:
  2303 00004D2A 58                  <1>     pop rax ;Get initial ecx back into eax
  2304 00004D2B 29C8                <1>     sub eax, ecx
  2305 00004D2D E847DEFFFF          <1>     call vConRetDriver
  2306 00004D32 E912020000          <1>     jmp writeExitChar   ;Input: eax = bytes xfrd
  2307                              <1> .exitFail:
  2308 00004D37 B805000000          <1>     mov eax, errAccDen
  2309 00004D3C F9                  <1>     stc
  2310                              <1>     return
    13                              <2> %%_ret:
    14 00004D3D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2311                              <1> writeDiskFile:
  2312                              <1>     ;rdi has SFT ptr
  2313 00004D3E 8B0D(73070000)      <1>     mov ecx, dword [tfrLen] ;Get the transfer length 
  2314 00004D44 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk 
  2315 00004D4B C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Write operation
  2316 00004D52 66F747020800        <1>     test word [rdi + sft.wOpenMode], 08h    ;Bit 3 is a reserved field
  2317 00004D58 0F85A3010000        <1>     jnz .badExit
  2318 00004D5E 85C9                <1>     test ecx, ecx
  2319 00004D60 7505                <1>     jnz .nonZeroWrite
  2320 00004D62 B9FFFFFFFF          <1>     mov ecx, -1 ;If write cnt is 0, check for no locks
  2321                              <1> .nonZeroWrite:
  2322                              <1>     ;Now do share check here
  2323 00004D67 E8B3310000          <1>     call retryShareIODelay
  2324 00004D6C 7308                <1>     jnc .proceedWithWrite   ;No lock for rdi and ecx, all good!
  2325 00004D6E E843320000          <1>     call shareCheckWriteLockViolation
  2326 00004D73 73F2                <1>     jnc .nonZeroWrite   ;If returned retry, retry the request
  2327                              <1>     return  ;Else return with CF=CY
    13                              <2> %%_ret:
    14 00004D75 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2328                              <1> .proceedWithWrite:
  2329                              <1> ;Ensure that we update the directory entry after this write
  2330 00004D76 66816705BFBF        <1>     and word [rdi + sft.wDeviceInfo], ~(charDevNoEOF|blokNoDTonClose)
  2331                              <1> ;Ensure that all buffers are now unreferenced
  2332 00004D7C E858B9FFFF          <1>     call markBuffersAsUnreferencedWrapper
  2333 00004D81 8B470F              <1>     mov eax, dword [rdi + sft.dStartClust]    ;Get start cluster
  2334                              <1>     ;If the start cluster is 0, we create a new cluster chain
  2335 00004D84 85C0                <1>     test eax, eax
  2336 00004D86 7516                <1>     jnz .notStart
  2337 00004D88 E875BDFFFF          <1>     call startNewChain  ;Allocate a first cluster! 
  2338                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004D8D 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004D8F C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2339 00004D90 3DFFFFFFFF          <1>     cmp eax, -1         ;Disk full?
  2340 00004D95 0F8455010000        <1>     je .diskFullExit
  2341                              <1>     ;Now eax has the first cluster of chain
  2342 00004D9B 89470F              <1>     mov dword [rdi + sft.dStartClust], eax  ;Store the start cluster in the sft
  2343                              <1> .notStart:
  2344                              <1> ;eax has the start cluster of the file
  2345                              <1> ;Now we go to CurntOff
  2346 00004D9E 8905(54070000)      <1>     mov dword [currClustD], eax ;Store in var
  2347 00004DA4 8B15(50070000)      <1>     mov edx, dword [currClustF] ;Use edx as the counter reg
  2348 00004DAA 85D2                <1>     test edx, edx   ;If the fileptr is in the first cluster, already there
  2349 00004DAC 7442                <1>     jz .atCluster
  2350 00004DAE E87E000000          <1>     call .walkFAT   ;Walks the fat, gets the next cluster in eax
  2351                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004DB3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004DB5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2352 00004DB6 3DFFFFFFFF          <1>     cmp eax, -1     ;Not EOC, eax = the cluster we need to be at
  2353 00004DBB 7533                <1>     jne .atCluster
  2354 00004DBD 817D31FFFFFFFF      <1>     cmp dword [rbp + dpb.dFreeClustCnt], -1
  2355 00004DC4 7505                <1>     jne .haveFreeClustCnt
  2356 00004DC6 E812BEFFFF          <1>     call findFreeClusterData
  2357                              <1> .haveFreeClustCnt:
  2358 00004DCB 395531              <1>     cmp dword [rbp + dpb.dFreeClustCnt], edx
  2359 00004DCE 0F821C010000        <1>     jb .diskFullExit
  2360                              <1>     ;Here we know we have enough cluster to allocate to the file,
  2361                              <1>     ; so just roll with it. 
  2362 00004DD4 8B05(54070000)      <1>     mov eax, dword [currClustD] ;Get the current disk cluster 
  2363 00004DDA 89C3                <1>     mov ebx, eax    ;Setup last cluster value in ebx
  2364 00004DDC 89D1                <1>     mov ecx, edx    ;Allocate the remainder of clusters!
  2365 00004DDE E84EBDFFFF          <1>     call allocateClusters   ;ebx has last cluster value
  2366                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004DE3 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004DE5 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2367 00004DE6 89D8                <1>     mov eax, ebx    ;Move the start sector for the walk back
  2368 00004DE8 E844000000          <1>     call .walkFAT   ;Walks the fat, gets the next cluster in eax
  2369                              <1>     retc    
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004DED 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004DEF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2370                              <1> .atCluster:
  2371                              <1> ;Fall here with the sector number in eax
  2372 00004DF0 E890BCFFFF          <1>     call getStartSectorOfCluster    ;Get the start sector on the disk in rax
  2373                              <1>     ;Now we add the offset to this
  2374 00004DF5 0FB61D(5C070000)    <1>     movzx ebx, byte [currSectC] ;Get the sector offset into the cluster
  2375 00004DFC 4801D8              <1>     add rax, rbx    ;And finally get the absolute cluster on the disk
  2376 00004DFF 488905(5D070000)    <1>     mov qword [currSectD], rax  ;Save the current Sector on Disk in var
  2377 00004E06 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2378 00004E0C 85C9                <1>     test ecx, ecx   ;If this is not zero, goto write
  2379 00004E0E 753C                <1>     jnz .mainWrite  
  2380                              <1> ;Here we have a zero byte write, so either truncate or have an extend.
  2381                              <1> ;Zero byte writes do not sanitise! Filesize=Filepointer in this case
  2382                              <1> ;CurrentOffset < Filesize means truncate. Else, we extend.
  2383 00004E10 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2384 00004E13 3B4717              <1>     cmp eax, dword [rdi + sft.dFileSize]
  2385 00004E16 7311                <1>     jae .extend
  2386                              <1> ;Here we truncate!
  2387 00004E18 8B05(54070000)      <1>     mov eax, dword [currClustD] ;We must free the chain from currClustD
  2388 00004E1E E893BEFFFF          <1>     call truncateFAT    ;Truncate from current cluster setting it to EOC
  2389                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004E23 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004E25 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2390 00004E26 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2391                              <1> .extend:
  2392 00004E29 894717              <1>     mov dword [rdi + sft.dFileSize], eax    ;This is the new filesize now
  2393 00004E2C E9D7000000          <1>     jmp .noByteExit ;Exit ok!
  2394                              <1> .walkFAT:
  2395                              <1> ;Input: eax = Cluster to start walking from
  2396                              <1> ;Output: If eax = -1: currClustD is the cluster we just read
  2397                              <1> ;        Else: currClustD = eax is the cluster value we are at
  2398                              <1> ;       edx = Number of clusters left (0 or #toAllocate)
  2399                              <1> ;If CF=CY, hard error, fail!
  2400 00004E31 E8E1BEFFFF          <1>     call readFAT
  2401                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004E36 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004E38 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2402 00004E39 3DFFFFFFFF          <1>     cmp eax, -1 ;Is the next cluster an EOC?
  2403 00004E3E 740A                <1>     je .wFatExit    ;Return if so
  2404 00004E40 8905(54070000)      <1>     mov dword [currClustD], eax     ;Else, save eax as current cluster
  2405 00004E46 FFCA                <1>     dec edx                         ;Decrement counter
  2406 00004E48 75E7                <1>     jnz .walkFAT                    ;If we still have to walk, do it again!
  2407                              <1> .wFatExit:
  2408 00004E4A F8                  <1>     clc ;Dont remove, need this because of the compare above!!
  2409                              <1>     return
    13                              <2> %%_ret:
    14 00004E4B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2410                              <1> .mainWrite:
  2411                              <1> ;Must intervene here for direct writes (if the handle specifies no buffering)
  2412 00004E4C E83CFDFFFF          <1>     call diskIOGetBuffer
  2413 00004E51 0F82AA000000        <1>     jc .badExit
  2414 00004E57 488D7B20            <1>     lea rdi, qword [rbx + bufferHdr.dataarea]    ;Move buffer data ptr to rdi
  2415 00004E5B 0FB71D(65070000)    <1>     movzx ebx, word [currByteS] ;Get the byte offset into the current sector
  2416 00004E62 4801DF              <1>     add rdi, rbx    ;Shift rdi by that amount into the sector
  2417                              <1>     ;Now we read the smallest of the following from the sector buffer:
  2418                              <1>     ; 1) Sector size, 2) Bytes left to read from Request, 
  2419                              <1>     ; 3) Number of bytes left free in the sector
  2420 00004E65 31C0                <1>     xor eax, eax
  2421 00004E67 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector]
  2422 00004E6B 89D8                <1>     mov eax, ebx
  2423 00004E6D 662B05(65070000)    <1>     sub ax, word [currByteS]   ;Get # of bytes in sector we are in
  2424 00004E74 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]
  2425                              <1> 
  2426 00004E7A 39D9                <1>     cmp ecx, ebx    ;If tfrCntr - wBytesPerSector < 0
  2427 00004E7C 0F47CB              <1>     cmova ecx, ebx
  2428 00004E7F 39C1                <1>     cmp ecx, eax    ;If small - #bytesleft < 0 
  2429 00004E81 0F47C8              <1>     cmova ecx, eax
  2430                              <1> 
  2431 00004E84 56                  <1>     push rsi
  2432 00004E85 488B35(17040000)    <1>     mov rsi, qword [currentDTA]
  2433 00004E8C 51                  <1>     push rcx
  2434 00004E8D F3A4                <1>     rep movsb
  2435 00004E8F 59                  <1>     pop rcx
  2436 00004E90 E806BAFFFF          <1>     call markBufferDirty   ;Preserves all CPU state, this buffer is now dirty
  2437                              <1> 
  2438 00004E95 010D(67070000)      <1>     add dword [currByteF], ecx ;Move file pointer by ecx bytes
  2439 00004E9B 290D(77070000)      <1>     sub dword [tfrCntr], ecx   ;Subtract from the number of bytes left
  2440 00004EA1 488935(17040000)    <1>     mov qword [currentDTA], rsi ;rsi has been shifted by ecx on entry amount
  2441 00004EA8 5E                  <1>     pop rsi
  2442                              <1> 
  2443 00004EA9 8B05(73070000)      <1>     mov eax, dword [tfrLen] ;Get total length
  2444 00004EAF 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get number of bytes left to transfer in ecx
  2445 00004EB5 85C9                <1>     test ecx, ecx  ;Are we at the end yet?
  2446 00004EB7 745A                <1>     jz writeExit
  2447 00004EB9 66C705(65070000)00- <1>     mov word [currByteS], 0 ;We start reading now from the start of the sector
  2447 00004EC1 00                  <1>
  2448 00004EC2 E891BDFFFF          <1>     call getNextSectorOfFile    ;If ZF=ZE, then @ last sector of last cluster
  2449 00004EC7 7238                <1>     jc .badExit
  2450 00004EC9 7581                <1>     jnz .mainWrite   ;Else, rax = Next sector to write to
  2451                              <1>     ;Here we need to extend by a cluster since we are at the end of the 
  2452                              <1>     ; current allocation chain
  2453 00004ECB 8B1D(54070000)      <1>     mov ebx, dword [currClustD] ;Setup last cluster value in ebx
  2454 00004ED1 B901000000          <1>     mov ecx, 1  ;Append one more cluster to it!
  2455 00004ED6 E856BCFFFF          <1>     call allocateClusters
  2456 00004EDB 7224                <1>     jc .badExit
  2457 00004EDD 3DFFFFFFFF          <1>     cmp eax, -1 ;If we cannot allocate any more clusters, disk full!
  2458 00004EE2 740C                <1>     je .diskFullExit  ;End write in this case!
  2459                              <1> ;Else we just allocated a new cluster to the chain, so we have a sector to 
  2460                              <1> ; write to! 
  2461                              <1> ;The cluster state has not changed due to the allocate clusters call.
  2462 00004EE4 E86FBDFFFF          <1>     call getNextSectorOfFile    ;Now we walk to chain to the new cluster
  2463 00004EE9 7216                <1>     jc .badExit
  2464 00004EEB E95CFFFFFF          <1>     jmp .mainWrite    ;rax = Next sector to write to
  2465                              <1> .diskFullExit:
  2466 00004EF0 56                  <1>     push rsi
  2467 00004EF1 488B35(32070000)    <1>     mov rsi, qword [currentSFT]
  2468 00004EF8 66F746020020        <1>     test word [rsi + sft.wOpenMode], diskFullFail
  2469 00004EFE 5E                  <1>     pop rsi
  2470 00004EFF 7412                <1>     jz writeExit    ;If no trigger Int 24h, return success
  2471                              <1>     ;Here we future proof for triggering Int 24h.
  2472                              <1> .badExit:
  2473 00004F01 B805000000          <1>     mov eax, errAccDen
  2474 00004F06 F9                  <1>     stc
  2475                              <1>     return
    13                              <2> %%_ret:
    14 00004F07 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2476                              <1> .noByteExit:
  2477 00004F08 B802000000          <1>     mov eax, 2  ;Update all SFTs with the shrinking of the file!
  2478 00004F0D FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default so keep xor after
  2479                              <1> writeExit:
  2480                              <1> ;Advances the bytes on the file pointer
  2481                              <1> ;Return: ecx = Number of bytes transferred
  2482 00004F13 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2483 00004F1A E84A000000          <1>     call updateCurrentSFT   ;Updates CurntOff in the SFT
  2484 00004F1F 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2485 00004F25 7520                <1>     jnz .exit       ;These just exit as no filesize!
  2486 00004F27 85C9                <1>     test ecx, ecx   ;If no bytes transferred, dont flush, no size change!
  2487 00004F29 741C                <1>     jz .exit
  2488 00004F2B 66816705BFFF        <1>     and word [rdi + sft.wDeviceInfo], ~blokFileNoFlush ;File has been accessed
  2489                              <1> ;Now replace the filesize with the currentoffset if it is greater
  2490 00004F31 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]
  2491                              <1> ;--------------------------------------------
  2492 00004F34 394717              <1>     cmp dword [rdi + sft.dFileSize], eax    
  2493 00004F37 730E                <1>     jae .exit   ;This check should be removable, double check.
  2494                              <1> ;--------------------------------------------
  2495 00004F39 894717              <1>     mov dword [rdi + sft.dFileSize], eax
  2496 00004F3C B801000000          <1>     mov eax, 1  ;Update all SFTs with the growth of the file!
  2497 00004F41 FF15(2F010000)      <1>     call qword [updateDirShare] ;Remember, CF=CY by default!
  2498                              <1> .exit:
  2499 00004F47 F8                  <1>     clc
  2500                              <1>     return
    13                              <2> %%_ret:
    14 00004F48 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2501                              <1> writeExitChar:
  2502                              <1> ;Input: eax = Number of chars transferred
  2503 00004F49 8B0D(73070000)      <1>     mov ecx, dword [tfrLen]
  2504 00004F4F 29C1                <1>     sub ecx, eax    ;Get chars left to xfr
  2505 00004F51 890D(77070000)      <1>     mov dword [tfrCntr], ecx
  2506 00004F57 EBBA                <1>     jmp short writeExit
  2507                              <1> ;-----------------------------------:
  2508                              <1> ;        File Handle routines       :
  2509                              <1> ;-----------------------------------:
  2510                              <1> 
  2511                              <1> setCurrentSFT:
  2512                              <1> ;Set the pointer in rdi as current SFT 
  2513 00004F59 48893D(32070000)    <1>     mov qword [currentSFT], rdi
  2514                              <1>     return 
    13                              <2> %%_ret:
    14 00004F60 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2515                              <1> getCurrentSFT:
  2516                              <1> ;Get the current SFT pointer in rdi
  2517 00004F61 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2518                              <1>     return 
    13                              <2> %%_ret:
    14 00004F68 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2519                              <1> updateCurrentSFT:
  2520                              <1> ;Updates the Current SFT fields before returning from a file handle operation
  2521                              <1> ;Return: ecx = Actual bytes transferred and CF=NC
  2522 00004F69 57                  <1>     push rdi
  2523 00004F6A 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2524                              <1> ;Get in ecx the number of bytes we xferred
  2525 00004F71 8B0D(77070000)      <1>     mov ecx, dword [tfrCntr]   ;Get bytes left to transfer
  2526 00004F77 F7D9                <1>     neg ecx ;Multiply by -1
  2527 00004F79 030D(73070000)      <1>     add ecx, dword [tfrLen]     ;Add total bytes to transfer
  2528                              <1> ;ecx has bytes transferred
  2529 00004F7F 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Char dev?
  2530 00004F85 751D                <1>     jnz .exit
  2531                              <1> ;Down here for disk files only!
  2532 00004F87 50                  <1>     push rax
  2533 00004F88 8B05(54070000)      <1>     mov eax, dword [currClustD]
  2534 00004F8E 894723              <1>     mov dword [rdi + sft.dAbsClusr], eax
  2535 00004F91 8B05(50070000)      <1>     mov eax, dword [currClustF]
  2536 00004F97 89471F              <1>     mov dword [rdi + sft.dRelClust], eax
  2537 00004F9A 8B05(67070000)      <1>     mov eax, dword [currByteF]
  2538 00004FA0 89471B              <1>     mov dword [rdi + sft.dCurntOff], eax
  2539 00004FA3 58                  <1>     pop rax
  2540                              <1> .exit:
  2541 00004FA4 5F                  <1>     pop rdi
  2542 00004FA5 F8                  <1>     clc
  2543                              <1>     return 
    13                              <2> %%_ret:
    14 00004FA6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2544                              <1> 
  2545                              <1> setupVarsForTransfer:
  2546                              <1> ;Computes the actual bytes to be transferred and 
  2547                              <1> ; sets up internal variables for the transfer. 
  2548                              <1> ;Works for both reading and writing
  2549                              <1> ;Input: ecx = User desired Bytes to transfer
  2550                              <1> ;       rdi = SFT pointer for the file
  2551                              <1> ;Output: ecx = Actual Bytes that will be transferred 
  2552                              <1> ;Setup BOTH: tfrLen, tfrCntr, qPtr 
  2553                              <1> ;      DISK: workingDPB, workingDrv, currByteF/S, currSectF/C, currClustF
  2554                              <1> ;
  2555                              <1> ;Note: Does not account for a FULL disk. When writing,
  2556                              <1> ; if the disk will get full as a result of the write,
  2557                              <1> ; stop at the last byte before the transfer. If the 
  2558                              <1> ; file pointer is past the last free byte, write 0
  2559 00004FA7 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get qPtr in rsi
  2560 00004FAB 488935(0A070000)    <1>     mov qword [qPtr], rsi ;Save whatever pointer here (workingDD OR workingDPB)
  2561 00004FB2 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff]    ;Get current offset into file
  2562 00004FB5 8905(67070000)      <1>     mov dword [currByteF], eax  ;Save Current byte in the file
  2563 00004FBB 890D(73070000)      <1>     mov dword [tfrLen], ecx ;Save the number of bytes to transfer
  2564 00004FC1 890D(77070000)      <1>     mov dword [tfrCntr], ecx    ;Save the bytes left to transfer
  2565 00004FC7 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2566                              <1>     retnz   ;Redir and char devices leave here
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00004FCD 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00004FCF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2567                              <1> ;Disk files...
  2568 00004FD0 8B471B              <1>     mov eax, dword [rdi + sft.dCurntOff] ;Update cur. offset if it was changed
  2569 00004FD3 8905(67070000)      <1>     mov dword [currByteF], eax
  2570 00004FD9 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get DPB ptr in rbp
  2571                              <1>     ;DPB will get updated by reading the disk, no need to force it here
  2572 00004FDD 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2573 00004FE4 8A5D00              <1>     mov bl, byte [rbp + dpb.bDriveNumber]
  2574 00004FE7 881D(09070000)      <1>     mov byte [workingDrv], bl   ;Set working drive number
  2575 00004FED 8B05(67070000)      <1>     mov eax, dword [currByteF]  ;Get current byte in file
  2576 00004FF3 0FB75D02            <1>     movzx ebx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
  2577 00004FF7 31D2                <1>     xor edx, edx    ;Zero rdx
  2578 00004FF9 F7F3                <1>     div ebx ;Divide current byte in file by bytes per sector
  2579                              <1>     ;eax has 0 based file relative sector (cannot grow beyond 03FFFFFh)
  2580                              <1>     ;edx has the offset into that sector
  2581 00004FFB 8905(58070000)      <1>     mov dword [currSectF], eax
  2582 00005001 668915(65070000)    <1>     mov word [currByteS], dx ;CurrbyteS is a word!
  2583 00005008 89C2                <1>     mov edx, eax    ;Save file relative sector in edx
  2584 0000500A 224504              <1>     and al, byte [rbp + dpb.bMaxSectorInCluster]   ;Works with max 64k clusters
  2585 0000500D 8805(5C070000)      <1>     mov byte [currSectC], al    ;Save sector in cluster value in var
  2586 00005013 89C8                <1>     mov eax, ecx    ;Save bytes to tfr in eax
  2587 00005015 8A4D05              <1>     mov cl, byte [rbp + dpb.bSecPerClustShift]
  2588 00005018 D3EA                <1>     shr edx, cl ;Convert file relative sector to file relative cluster
  2589 0000501A 8915(50070000)      <1>     mov dword [currClustF], edx ;Save in var
  2590 00005020 89C1                <1>     mov ecx, eax    ;Return the bytes to tfr in ecx
  2591                              <1>     return 
    13                              <2> %%_ret:
    14 00005022 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2592                              <1> 
  2593                              <1> findFreeSFT:
  2594                              <1> ;Returns a pointer to a free SFT if CF=NC. Else, no free SFTs.
  2595                              <1> ;Modifies an SFT entry. Must be called in a critical section.
  2596                              <1> ;Output: CF=NC => rdi = Points to a free SFT entry, bx = SFTndx
  2597                              <1> ;        CF=CY => eax = errNhl, error exit
  2598 00005023 31DB                <1>     xor ebx, ebx
  2599                              <1> .mainLp:
  2600 00005025 53                  <1>     push rbx    ;Save the sft ndx
  2601 00005026 E857000000          <1>     call getSFTPtrfromSFTNdx    ;Get ptr to SFT in rdi
  2602 0000502B 5B                  <1>     pop rbx
  2603 0000502C 7307                <1>     jnc .sftExists
  2604 0000502E B804000000          <1>     mov eax, errNhl
  2605 00005033 F9                  <1>     stc
  2606                              <1>     return
    13                              <2> %%_ret:
    14 00005034 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2607                              <1> .sftExists:
  2608 00005035 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0
  2609 0000503A 7427                <1>     je .sftFound
  2610 0000503C 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1    ;Is SFT being alloc'd/free'd?
  2611 00005041 751C                <1>     jne .gotoNextNdx
  2612                              <1>     ;Here, check that if this sft is owned by the caller and repurpose it.
  2613 00005043 53                  <1>     push rbx
  2614 00005044 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2615 0000504B 48395F45            <1>     cmp qword [rdi + sft.qPSPOwner], rbx
  2616 0000504F 750B                <1>     jne .netGoToNextNdx
  2617 00005051 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2618 00005058 66395F43            <1>     cmp word [rdi + sft.wMachNum], bx
  2619                              <1> .netGoToNextNdx:
  2620 0000505C 5B                  <1>     pop rbx
  2621 0000505D 7404                <1>     je .sftFound
  2622                              <1> .gotoNextNdx:
  2623 0000505F FFC3                <1>     inc ebx
  2624 00005061 EBC2                <1>     jmp short .mainLp
  2625                              <1> .sftFound:
  2626 00005063 53                  <1>     push rbx
  2627 00005064 66C707FFFF          <1>     mov word [rdi + sft.wNumHandles], -1    ;Mark as repurposing!
  2628 00005069 488B1D(3B040000)    <1>     mov rbx, qword [serverPSP]
  2629 00005070 48895F45            <1>     mov qword [rdi + sft.qPSPOwner], rbx
  2630 00005074 0FB71D(43040000)    <1>     movzx ebx, word [machineNum]
  2631 0000507B 66895F43            <1>     mov word [rdi + sft.wMachNum], bx
  2632 0000507F 5B                  <1>     pop rbx
  2633 00005080 F8                  <1>     clc
  2634                              <1>     return
    13                              <2> %%_ret:
    14 00005081 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2635                              <1> getSFTPtrfromSFTNdx:    ;Int 2Fh AX=1216h
  2636                              <1> ;Return a pointer to the SFT entry in rdi
  2637                              <1> ;Input: rbx = Valid SFT ndx number (byte, zero extended)
  2638                              <1> ;Output: rdi = SFT pointer
  2639 00005082 488B3D(43000000)    <1>     mov rdi, qword [sftHeadPtr] ;Get head of SFT pointer
  2640                              <1> .walk:
  2641 00005089 663B5F08            <1>     cmp bx, word [rdi + sfth.wNumFiles]
  2642 0000508D 7212                <1>     jb .thisTable
  2643 0000508F 662B5F08            <1>     sub bx, word [rdi + sfth.wNumFiles] ;Subtract
  2644 00005093 488B3F              <1>     mov rdi, qword [rdi + sfth.qNextSFTPtr] ;Goto next table
  2645 00005096 4881FFFFFFFFFF      <1>     cmp rdi, -1
  2646 0000509D 75EA                <1>     jne .walk
  2647 0000509F F9                  <1>     stc
  2648                              <1>     return
    13                              <2> %%_ret:
    14 000050A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2649                              <1> .thisTable:
  2650 000050A1 50                  <1>     push rax
  2651 000050A2 52                  <1>     push rdx
  2652 000050A3 B84F000000          <1>     mov eax, sft_size
  2653 000050A8 F7E3                <1>     mul ebx
  2654 000050AA 4801C7              <1>     add rdi, rax    ;Shift rdi to go to SFT entry in current table
  2655 000050AD 5A                  <1>     pop rdx
  2656 000050AE 58                  <1>     pop rax
  2657 000050AF 4881C70A000000      <1>     add rdi, sfth_size  ;Go past the header
  2658                              <1>     return
    13                              <2> %%_ret:
    14 000050B6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2659                              <1> getJFTPtr:    ;Int 2Fh AX=1220h
  2660                              <1> ;Return a zero extended value in rdi for the SFT entry
  2661                              <1> ;Input: bx = JFT handle (we zero extend)
  2662                              <1> ;Output: CF=NC => rdi = Points to first SFT ndx or -1 => free space
  2663                              <1> ;        CF=CY => al = Error code, Fail
  2664 000050B7 0FB7DB              <1>     movzx ebx, bx   ;Ensure we zero extended
  2665 000050BA 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
  2666 000050C1 663B5F4E            <1>     cmp bx, word [rdi + psp.jftSize] ;jftSize is the size of the JFT array
  2667 000050C5 7204                <1>     jb .ok
  2668 000050C7 B006                <1>     mov al, errBadHdl
  2669 000050C9 F9                  <1>     stc
  2670                              <1>     return
    13                              <2> %%_ret:
    14 000050CA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2671                              <1> .ok:
  2672 000050CB 66817F4E1400        <1>     cmp word [rdi + psp.jftSize], dfltJFTsize   ;Are we in PSP JFT or external?
  2673 000050D1 7412                <1>     je .pspJftOk    ;If dfltJFTsize, its a good PSP JFT.
  2674 000050D3 720A                <1>     jb .pspJftBelow ;If < dfltJFTsize, in PSP and needs to be corrected
  2675 000050D5 488B7F2A            <1>     mov rdi, qword [rdi + psp.externalJFTPtr]   ;Get the ptr to the external JFT
  2676 000050D9 488D3C1F            <1>     lea rdi, qword [rdi + rbx]  ;Get pointer into JFT
  2677 000050DD EB0B                <1>     jmp short .pspOkExit
  2678                              <1> .pspJftBelow:
  2679 000050DF 66C7474E1400        <1>     mov word [rdi + psp.jftSize], dfltJFTsize  ;Reset to dfltJFTsize if needed!
  2680                              <1> .pspJftOk:
  2681 000050E5 488D7C1F2A          <1>     lea rdi, qword [rdi + psp.jobFileTbl + rbx] ;Use rbx as index in tbl
  2682                              <1> .pspOkExit:
  2683 000050EA F8                  <1>     clc
  2684                              <1>     return
    13                              <2> %%_ret:
    14 000050EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2685                              <1> findFreeJFTEntry:
  2686                              <1> ;Finds a free JFT entry in the currentPSP.
  2687                              <1> ;Output: CF=NC => rdi => Ptr to JFT entry, bx = File Handle
  2688                              <1> ;        CF=CY => al=errNhl
  2689 000050EC 31DB                <1>     xor ebx, ebx    ;Start searching from offset 0 in the JFT
  2690                              <1> .searchLp:
  2691 000050EE E8C4FFFFFF          <1>     call getJFTPtr
  2692 000050F3 720A                <1>     jc .badExit
  2693 000050F5 803FFF              <1>     cmp byte [rdi], -1
  2694                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000050F8 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000050FA C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2695 000050FB FFC3                <1>     inc ebx
  2696 000050FD EBEF                <1>     jmp short .searchLp
  2697                              <1> .badExit:
  2698 000050FF B004                <1>     mov al, errNhl
  2699 00005101 F9                  <1>     stc
  2700                              <1>     return
    13                              <2> %%_ret:
    14 00005102 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2701                              <1> getSFTPtr:
  2702                              <1> ;This gets the SFT pointer and checks it was opened by this machine
  2703                              <1> ;Input: bx = JFT handle
  2704                              <1> ;Output: CF=NC: rdi = SFT pointer
  2705                              <1> ;        CF=CY: Error, ax=Error code
  2706 00005103 E817000000          <1>     call derefSFTPtr
  2707                              <1>     retc    ;Return if carry
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00005108 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000510A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2708 0000510B 50                  <1>     push rax
  2709 0000510C 0FB705(43040000)    <1>     movzx eax, word [machineNum]
  2710 00005113 663B4743            <1>     cmp ax, word [rdi + sft.wMachNum]
  2711 00005117 58                  <1>     pop rax
  2712                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00005118 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000511A C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
  2713 0000511B B006                <1>     mov al, errBadHdl   ;Error code
  2714 0000511D F9                  <1>     stc         ;Reset CF
  2715                              <1>     return
    13                              <2> %%_ret:
    14 0000511E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2716                              <1> 
  2717                              <1> derefSFTPtr:
  2718                              <1> ;Walk the whole way from a handle to SFT pointer (for the current process)
  2719                              <1> ;Input: bx = File handle (gets zero extended)
  2720                              <1> ;Output: CF=NC: rdi = SFT pointer
  2721                              <1> ;        CF=CY: Error, ax=Error code
  2722 0000511F E893FFFFFF          <1>     call getJFTPtr    ;Get the ptr to the value in rdi
  2723 00005124 7205                <1>     jb .fail
  2724 00005126 803FFF              <1>     cmp byte [rdi], -1  ;Is this JFT entry unassigned?
  2725 00005129 7504                <1>     jne .ok
  2726                              <1> .fail:
  2727 0000512B B006                <1>     mov al, errBadHdl
  2728 0000512D F9                  <1>     stc
  2729                              <1>     return
    13                              <2> %%_ret:
    14 0000512E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2730                              <1> .ok:
  2731 0000512F 53                  <1>     push rbx    ;Preserve the JFT handle
  2732 00005130 0FB61F              <1>     movzx ebx, byte [rdi]  ;Get byte entry into rbx
  2733 00005133 E84AFFFFFF          <1>     call getSFTPtrfromSFTNdx    ;Get SFT pointer in rdi
  2734 00005138 5B                  <1>     pop rbx 
  2735                              <1>     return
    13                              <2> %%_ret:
    14 00005139 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2736                              <1> 
  2737                              <1> getSFTndxInheritable:
  2738                              <1> ;Given a SFTndx this function will verify if it is inheritable
  2739                              <1> ;Input: ebx = SFTndx (word)
  2740                              <1> ;Output: 
  2741                              <1> ;   ZF=ZE => Inheritable
  2742                              <1> ;   ZF=NZ => Not Inheritable or bad ndxNumber
  2743 0000513A 57                  <1>     push rdi
  2744 0000513B E842FFFFFF          <1>     call getSFTPtrfromSFTNdx    ;SFT pointer in rdi
  2745 00005140 7208                <1>     jc .badNdx
  2746 00005142 66F747050010        <1>     test word [rdi + sft.wDeviceInfo], devNoInherit
  2747 00005148 5F                  <1>     pop rdi
  2748                              <1>     return
    13                              <2> %%_ret:
    14 00005149 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2749                              <1> .badNdx:
  2750 0000514A 31FF                <1>     xor edi, edi
  2751 0000514C FFC7                <1>     inc edi ;Clear the ZF flag if it was set
  2752 0000514E F8                  <1>     clc
  2753 0000514F 5F                  <1>     pop rdi
  2754                              <1>     return
    13                              <2> %%_ret:
    14 00005150 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2755                              <1> 
  2756                              <1> incrementOpenCount:
  2757                              <1> ;Given a SFTndx, this function will increment it's open count
  2758                              <1> ;Output:
  2759                              <1> ;   CF=NC => sftndx ok, count incremented
  2760                              <1> ;   CF=CY => Bad ndx
  2761 00005151 57                  <1>     push rdi
  2762 00005152 E82BFFFFFF          <1>     call getSFTPtrfromSFTNdx
  2763 00005157 7203                <1>     jc .exit
  2764 00005159 66FF07              <1>     inc word [rdi + sft.wNumHandles]    ;Add one to open count
  2765                              <1> .exit:
  2766 0000515C 5F                  <1>     pop rdi
  2767                              <1>     return
    13                              <2> %%_ret:
    14 0000515D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2768                              <1> 
  2769                              <1> decrementOpenCount: ;Int 2Fh AX = 1208h
  2770                              <1> ;Input: rdi = SFT pointer
  2771                              <1> ;Output: ax = Original wNumHandles count (zero extended to eax)
  2772 0000515E 9C                  <1>     pushfq
  2773 0000515F 0FB707              <1>     movzx eax, word [rdi + sft.wNumHandles]
  2774 00005162 FFC8                <1>     dec eax     ;Decrement count
  2775 00005164 7502                <1>     jnz .exit                           ;If the count is not zero, exit
  2776 00005166 FFC8                <1>     dec eax    ;If it is zero, now we make it -1
  2777                              <1> .exit:
  2778 00005168 9D                  <1>     popfq
  2779 00005169 668707              <1>     xchg ax, word [rdi + sft.wNumHandles] ;RBIL says ax returns og num hdls
  2780                              <1>     return
    13                              <2> %%_ret:
    14 0000516C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2781                              <1> 
  2782                              <1> ;Buffer Wrapper
  2783                              <1> writeThroughBuffersForHandle:
  2784                              <1> ;Input: qword [currentSFT] = Current SFT pointer
  2785 0000516D 57                  <1>     push rdi
  2786 0000516E 55                  <1>     push rbp
  2787 0000516F 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
  2788 00005176 66F747058080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev | devCharDev
  2789 0000517C 751C                <1>     jnz .exit
  2790 0000517E FF35(0A070000)      <1>     push qword [workingDPB]
  2791 00005184 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Ensure the rigth DPB is in
  2792 00005188 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
  2793 0000518F E892B5FFFF          <1>     call flushAllBuffersForDPB
  2794 00005194 8F05(0A070000)      <1>     pop qword [workingDPB]
  2795                              <1> .exit:
  2796 0000519A 5D                  <1>     pop rbp
  2797 0000519B 5F                  <1>     pop rdi
  2798                              <1>     return
    13                              <2> %%_ret:
    14 0000519C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
  2799                              <1> 
  2800                              <1> setDPBfromSFT:
  2801                              <1> ;Sets and updates the DPB from an SFT ptr
  2802                              <1> ;Input: rdi -> sft
  2803                              <1> ;Output: CF=NC: workingDPB set
  2804                              <1> ;        CF=CY: Error fail, exit
  2805 0000519D 488B6F07            <1>     mov rbp, qword [rdi + sft.qPtr] ;Get the DPB ptr in rbp
  2806 000051A1 E9891D0000          <1>     jmp getDiskDPB.sftEp  ;Doing this will nullify CDS paths on disk swaps!
    43                                  %include "./src/Kernel/FileIO/ioctl.asm"
     1                              <1> ioctrl:            ;ah = 44h, handle function
     2                              <1> ;Possible subfunctions
     3                              <1> ;======================================================
     4                              <1> ;Handle Information Functions                         |
     5                              <1> ;al = 00h => Get Handle Information word in dx        x
     6                              <1> ;al = 01h => Set Handle Information word              x
     7                              <1> ;======================================================
     8                              <1> ;IO Control String Functions (optionally implemented) |
     9                              <1> ;al = 02h => Read from Char device                    x
    10                              <1> ;al = 03h => Write to Char device                     x
    11                              <1> ;al = 04h => Read from Block device                   x
    12                              <1> ;al = 05h => Write to Block device                    x
    13                              <1> ;======================================================
    14                              <1> ;IO Status Functions (optionally implemented)         |
    15                              <1> ;al = 06h => Get input status                         x
    16                              <1> ;al = 07h => Get output status                        x
    17                              <1> ;======================================================
    18                              <1> ;Device information (optionally implemented)          |  
    19                              <1> ;al = 08h => Is a block device removable?       
    20                              <1> ;al = 09h => Is a logical device local or remote?   
    21                              <1> ;al = 0Ah => Is a handle to a local or remote file?
    22                              <1> ;======================================================
    23                              <1> ;SHARE.EXE control                                    |
    24                              <1> ;al = 0Bh => Change sharing retry count               x  
    25                              <1> ;======================================================
    26                              <1> ;al = 0Ch => Generic IOCTL handle request (RESERVED) - Code page switching
    27                              <1> ;======================================================
    28                              <1> ;Generic IOCTL string (optionally implemented)
    29                              <1> ;al = 0Dh => Block device Generic IOCTL request    
    30                              <1> ;======================================================
    31                              <1> ;Disk Drive change drive (optionally implemented)
    32                              <1> ;al = 0Eh => Get logical device                 
    33                              <1> ;al = 0Fh => Set logical device  
    34                              <1> ;======================================================
    35 000051A6 3C0F                <1>     cmp al, 15
    36 000051A8 7747                <1>     ja .invalidFunction
    37 000051AA 84C0                <1>     test al, al
    38 000051AC 745B                <1>     jz .getDevWord
    39 000051AE 3C01                <1>     cmp al, 1
    40 000051B0 746E                <1>     je .setDevWord
    41 000051B2 2C02                <1>     sub al, 2
    42 000051B4 3C03                <1>     cmp al, 3
    43 000051B6 7673                <1>     jbe .ioctlStringFunctions
    44 000051B8 2C04                <1>     sub al, 4
    45 000051BA 3C01                <1>     cmp al, 1
    46 000051BC 0F8644010000        <1>     jbe .ioStatusFunctions
    47 000051C2 2C02                <1>     sub al, 2
    48 000051C4 3C02                <1>     cmp al, 2
    49 000051C6 0F86CD010000        <1>     jbe .devControl
    50 000051CC 2C03                <1>     sub al, 3
    51 000051CE 0F8498020000        <1>     jz .setSharingCount
    52 000051D4 FEC8                <1>     dec al
    53 000051D6 0F84AE020000        <1>     jz .genericCharDevIOCTL
    54 000051DC FEC8                <1>     dec al
    55 000051DE 0F84D4020000        <1>     jz .genericBlokDevIOCTL
    56 000051E4 FEC8                <1>     dec al
    57 000051E6 0F847B030000        <1>     jz .getDrvLogicalDevice
    58 000051EC E9D6030000          <1>     jmp .setDrvLogicalDevice
    59                              <1> .invalidFunction:
    60 000051F1 B801000000          <1>     mov eax, errInvFnc
    61                              <1> .ifExit:
    62 000051F6 E93A250000          <1>     jmp extErrExit
    63                              <1> .accessDeniedError:
    64 000051FB B805000000          <1>     mov eax, errAccDen
    65 00005200 EBF4                <1>     jmp short .ifExit
    66                              <1> .badHandle:
    67 00005202 B806000000          <1>     mov eax, errBadHdl
    68 00005207 EBED                <1>     jmp short .ifExit
    69                              <1> 
    70                              <1> ;...Functions...
    71                              <1> .getDevWord:
    72                              <1> ;Input: bx = File Handle
    73 00005209 E811FFFFFF          <1>     call derefSFTPtr
    74 0000520E 72F2                <1>     jc .badHandle
    75 00005210 668B5705            <1>     mov dx, word [rdi + sft.wDeviceInfo]
    76 00005214 30C0                <1>     xor al, al
    77 00005216 E849200000          <1>     call getUserRegs
    78 0000521B 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
    79                              <1>     return
    13                              <2> %%_ret:
    14 0000521F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> .setDevWord:
    81                              <1> ;Input: bx = File Handle
    82                              <1> ;       dl = Low byte of Device information word
    83 00005220 E8FAFEFFFF          <1>     call derefSFTPtr
    84 00005225 72DB                <1>     jc .badHandle 
    85 00005227 885705              <1>     mov byte [rdi + sft.wDeviceInfo], dl
    86                              <1>     return
    13                              <2> %%_ret:
    14 0000522A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    87                              <1> .ioctlStringFunctions:
    88                              <1> ;al = 0 -> ReadCharDev
    89                              <1> ;al = 1 -> WriteCharDev
    90                              <1> ;al = 2 -> ReadDiskDev
    91                              <1> ;al = 3 -> WriteDiskDev
    92                              <1> ;Input: bx = File handle/drive number
    93                              <1> ;       ecx = Bytes to transfer
    94                              <1> ;       rdx = Ptr to string to transfer
    95 0000522B 0FB6F3              <1>     movzx esi, bl
    96 0000522E 488D1D(C1040000)    <1>     lea rbx, primReqPkt
    97 00005235 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    98 0000523C C605(68040000)00    <1>     mov byte [Int24bitfld], 0
    99                              <1> ;Get in rdi the ptr to the SFT for the handle we are looking at
   100                              <1> ;Setup the common ioReqPkt fields and the read/write 
   101 00005243 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   102 00005246 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   103 00005249 4889530E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdx
   104 0000524D 51                  <1>     push rcx
   105 0000524E 52                  <1>     push rdx
   106 0000524F B903000000          <1>     mov ecx, drvIOCTLREAD
   107 00005254 BA0C000000          <1>     mov edx, drvIOCTLWRITE
   108 00005259 A801                <1>     test al, 1  ;If set, this is a write operation
   109 0000525B 0F45CA              <1>     cmovnz ecx, edx ;Move write command into ecx
   110 0000525E 7507                <1>     jnz .notWrite
   111 00005260 800D(68040000)01    <1>     or byte [Int24bitfld], critWrite
   112                              <1> .notWrite:
   113 00005267 5A                  <1>     pop rdx
   114 00005268 59                  <1>     pop rcx
   115 00005269 884B02              <1>     mov byte [rbx + ioReqPkt.cmdcde], cl
   116 0000526C 3C01                <1>     cmp al, 1
   117 0000526E 772F                <1>     ja .ioctlStringBlockDevice
   118                              <1>     ;Here we are for char devices only
   119 00005270 4887DE              <1>     xchg rbx, rsi    ;Save the driver ptr to rsi and the handle to ebx 
   120 00005273 E8A7FEFFFF          <1>     call derefSFTPtr    ;Get the sft ptr in rdi
   121 00005278 7288                <1>     jc .badHandle 
   122 0000527A C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   123 00005281 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev   ;Bit must be set
   124 00005287 0F8464FFFFFF        <1>     jz .invalidFunction
   125                              <1> 
   126 0000528D 488B5F07            <1>     mov rbx, qword [rdi + sft.qPtr] ;Get ptr to device driver
   127 00005291 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   128 00005298 4887DE              <1>     xchg rbx, rsi   ;Swap back
   129 0000529B 31C0                <1>     xor eax, eax
   130 0000529D EB38                <1>     jmp short .ioctlStringCommon
   131                              <1> .ioctlStringBlockDevice:
   132                              <1>     ;Here we are for block devices only
   133                              <1>     ;esi has the drive number
   134 0000529F C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   135 000052A6 89F0                <1>     mov eax, esi
   136 000052A8 53                  <1>     push rbx
   137 000052A9 E84A200000          <1>     call getCDS ;Returns in al the unit number of the drive
   138 000052AE 5B                  <1>     pop rbx
   139 000052AF 730A                <1>     jnc .okDrive
   140 000052B1 B80F000000          <1>     mov eax, errBadDrv
   141 000052B6 E97A240000          <1>     jmp extErrExit
   142                              <1> .okDrive:
   143 000052BB 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   144 000052C2 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]
   145 000052C6 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   146 000052C9 884301              <1>     mov byte [rbx + ioReqPkt.unitnm], al
   147 000052CC 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   148 000052D0 8A4623              <1>     mov al, byte [rsi + dpb.bMediaDescriptor]
   149 000052D3 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] 
   150                              <1> .ioctlStringCommon:
   151                              <1>     ;rsi -> Device Driver header
   152                              <1>     ;rbx -> Request Header
   153                              <1>     ;al = Media descriptor
   154 000052D7 88430D              <1>     mov byte [rbx + ioReqPkt.medesc], al
   155 000052DA 66F746080040        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTLRW
   156 000052E0 0F840BFFFFFF        <1>     jz .invalidFunction ;If not supported, invalid function error 
   157                              <1>     ;Make request now
   158 000052E6 51                  <1>     push rcx    ;Push xfrctr
   159 000052E7 52                  <1>     push rdx    ;Buffer Ptr
   160 000052E8 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   161 000052EE E8C61A0000          <1>     call goDriver
   162 000052F3 5A                  <1>     pop rdx
   163 000052F4 59                  <1>     pop rcx
   164                              <1> ;Check status, if bad, reuse ecx and rdx for tfrlen and bufptr and go again
   165 000052F5 66F743030080        <1>     test word [rbx + ioReqPkt.status], drvErrStatus
   166 000052FB 0F8426240000        <1>     jz extGoodExit
   167 00005301 E91B030000          <1>     jmp failIOCTLCall
   168                              <1> 
   169                              <1> .ioStatusFunctions:
   170                              <1> ;al = 0 -> Get input status 
   171                              <1> ;al = 1 -> Get output status
   172 00005306 E814FEFFFF          <1>     call derefSFTPtr
   173 0000530B 0F82F1FEFFFF        <1>     jc .badHandle 
   174 00005311 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   175 00005318 C6030D              <1>     mov byte [rbx + statusReqPkt.hdrlen], statusReqPkt_size
   176 0000531B C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   177 00005322 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;File cannot be redir!
   178 00005328 0F85C3FEFFFF        <1>     jnz .invalidFunction
   179 0000532E C605(68040000)00    <1>     mov byte [Int24bitfld], 0
   180 00005335 B906000000          <1>     mov ecx, drvINSTATUS
   181 0000533A BA0A000000          <1>     mov edx, drvOUTSTATUS
   182 0000533F 84C0                <1>     test al, al
   183 00005341 0F45CA              <1>     cmovnz ecx, edx
   184 00005344 884B02              <1>     mov byte [rbx + statusReqPkt.cmdcde], cl
   185 00005347 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   186 0000534D 7416                <1>     jz .ioStatDisk
   187 0000534F C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   188 00005356 800D(68040000)80    <1>     or byte [Int24bitfld], critCharDev
   189 0000535D 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr]
   190 00005361 30C0                <1>     xor al, al
   191 00005363 EB15                <1>     jmp short .ioStatCommon
   192                              <1> .ioStatDisk:
   193 00005365 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   194 0000536C 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get DPB ptr
   195 00005370 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   196 00005373 884301              <1>     mov byte [rbx + statusReqPkt.unitnm], al
   197 00005376 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr]
   198                              <1> .ioStatCommon:
   199 0000537A E83A1A0000          <1>     call goDriver
   200 0000537F 66F743030080        <1>     test word [rbx + statusReqPkt.status], drvErrStatus
   201 00005385 0F8596020000        <1>     jnz failIOCTLCall
   202 0000538B 66F743030002        <1>     test word [rbx + statusReqPkt.status], drvBsyStatus
   203 00005391 7403                <1>     jz .notBusyExit
   204 00005393 B0FF                <1>     mov al, -1  ;Device Busy/EOF
   205                              <1>     return 
    13                              <2> %%_ret:
    14 00005395 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   206                              <1> .notBusyExit:
   207                              <1> ;Device ready/NotEOF
   208 00005396 31C0                <1>     xor eax, eax
   209                              <1>     return
    13                              <2> %%_ret:
    14 00005398 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   210                              <1> 
   211                              <1> .devControl:
   212                              <1> ;al = 0 -> Is media removable?
   213                              <1> ;al = 1 -> Is device local or remote?
   214                              <1> ;al = 2 -> Is handle local or remote?
   215 00005399 84C0                <1>     test al, al
   216 0000539B 746D                <1>     jz .remTest
   217 0000539D A801                <1>     test al, 1
   218 0000539F 751B                <1>     jnz .deviceTest
   219                              <1> ;Handle Local or Remote
   220 000053A1 E879FDFFFF          <1>     call derefSFTPtr    ;Get ptr in rdi
   221 000053A6 0F8256FEFFFF        <1>     jc .badHandle 
   222 000053AC 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo]
   223                              <1> .devControlExit:
   224 000053B0 E8AF1E0000          <1>     call getUserRegs
   225 000053B5 66895618            <1>     mov word [rsi + callerFrame.rdx], dx
   226 000053B9 31C0                <1>     xor eax, eax
   227                              <1>     return 
    13                              <2> %%_ret:
    14 000053BB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   228                              <1> .deviceTest:
   229                              <1> ;Drive Local or Remote
   230                              <1> ;For more compat, get the driver attrib word if local with bit 12 clear
   231                              <1> ;Else, just get the CDS word and swap subst and net
   232 000053BC 88D8                <1>     mov al, bl
   233 000053BE E8351F0000          <1>     call getCDS
   234 000053C3 730A                <1>     jnc .devTestOkDrive
   235 000053C5 B80F000000          <1>     mov eax, errBadDrv
   236 000053CA E966230000          <1>     jmp extErrExit
   237                              <1> .devTestOkDrive:
   238 000053CF 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   239 000053D6 668B5743            <1>     mov dx, word [rdi + cds.wFlags]
   240 000053DA 66F7C20080          <1>     test dx, cdsRedirDrive   ;Check the remote bit
   241 000053DF 7513                <1>     jnz .remoteDrive
   242 000053E1 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   243 000053E5 488B7F1B            <1>     mov rdi, qword [rdi + dpb.qDriverHeaderPtr]
   244 000053E9 668B5708            <1>     mov dx, word [rdi + drvHdr.attrib]
   245 000053ED 6681E2FFCF          <1>     and dx, ~3000h  ;Clear bits 12 and 13
   246 000053F2 EBBC                <1>     jmp short .devControlExit
   247                              <1> .remoteDrive:
   248 000053F4 6689D3              <1>     mov bx, dx
   249 000053F7 6681CA0010          <1>     or dx, 1000h    ;Set bit 12 for remote (its at subst)
   250 000053FC 6681E30010          <1>     and bx, cdsSubstDrive   ;Isolate the subst bit
   251 00005401 74AD                <1>     jz short .devControlExit    ;Jump to exit if no subst bit
   252 00005403 6681CA0080          <1>     or dx, 8000h    ;Else, set bit 15 for subst in returning word!
   253 00005408 EBA6                <1>     jmp short .devControlExit   ;Store it
   254                              <1> 
   255                              <1> .remTest:
   256                              <1> ;Drive letter in bl
   257 0000540A 88D8                <1>     mov al, bl
   258 0000540C E8E71E0000          <1>     call getCDS
   259 00005411 730A                <1>     jnc .remTestOkDrive
   260                              <1> .remTestBadDrv:
   261 00005413 B80F000000          <1>     mov eax, errBadDrv
   262 00005418 E918230000          <1>     jmp extErrExit
   263                              <1> .remTestOkDrive:
   264 0000541D 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get the CDS
   265 00005424 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   266 0000542A 75E7                <1>     jnz .remTestBadDrv
   267 0000542C 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   268 00005433 488B7745            <1>     mov rsi, qword [rdi + cds.qDPBPtr]
   269 00005437 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]    ;Get the unit number
   270 0000543A 488B761B            <1>     mov rsi, qword [rsi + dpb.qDriverHeaderPtr] ;Get driver ptr in rsi
   271 0000543E 66F746080008        <1>     test word [rsi + drvHdr.attrib], devDrvHdlCTL
   272 00005444 0F84A7FDFFFF        <1>     jz .invalidFunction
   273 0000544A C6030D              <1>     mov byte [rbx + remMediaReqPkt.hdrlen], remMediaReqPkt_size
   274 0000544D C643020F            <1>     mov byte [rbx + remMediaReqPkt.cmdcde], drvREMMEDCHECK
   275 00005451 66C743030000        <1>     mov word [rbx + remMediaReqPkt.status], 0
   276 00005457 884301              <1>     mov byte [rbx + remMediaReqPkt.unitnm], al
   277 0000545A E85A190000          <1>     call goDriver
   278 0000545F 0FB74303            <1>     movzx eax, word [rbx + remMediaReqPkt.status]   ;Get the status
   279 00005463 2500020000          <1>     and eax, drvBsyStatus   ;Clear all but bit 9
   280 00005468 C1E809              <1>     shr eax, 9  ;Move the busy bit to al[0]
   281                              <1>     return
    13                              <2> %%_ret:
    14 0000546B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   282                              <1> 
   283                              <1> .setSharingCount:
   284                              <1> ;Input: cx = Share Count
   285                              <1> ;       dx = Share Retry
   286 0000546C 66890D(1F000000)    <1>     mov word [shareCount], cx
   287 00005473 6685D2              <1>     test dx, dx
   288 00005476 0F8475FDFFFF        <1>     jz .invalidFunction
   289 0000547C 668915(21000000)    <1>     mov word [shareDelay], dx
   290 00005483 31C0                <1>     xor eax, eax
   291 00005485 E99D220000          <1>     jmp extGoodExit
   292                              <1> 
   293                              <1> .genericCharDevIOCTL:
   294 0000548A E874FCFFFF          <1>     call getSFTPtr  ;Get in rdi the SFT ptr
   295 0000548F 7311                <1>     jnc .okHandle
   296                              <1> .ioctrlBadHandle:
   297 00005491 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   298 00005498 B806000000          <1>     mov eax, errBadHdl
   299 0000549D E993220000          <1>     jmp extErrExit
   300                              <1> .okHandle:
   301 000054A2 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev
   302 000054A8 75E7                <1>     jnz .ioctrlBadHandle
   303 000054AA 66F747058000        <1>     test word [rdi + sft.wDeviceInfo], devCharDev
   304 000054B0 74DF                <1>     jz .ioctrlBadHandle
   305 000054B2 488B7707            <1>     mov rsi, qword [rdi + sft.qPtr] ;Get the driver ptr in rsi
   306 000054B6 EB49                <1>     jmp short .ioctlReqMake
   307                              <1> .genericBlokDevIOCTL:
   308 000054B8 88D8                <1>     mov al, bl  ;Move the drive number from bl to al
   309 000054BA 51                  <1>     push rcx
   310 000054BB 52                  <1>     push rdx
   311 000054BC E8371E0000          <1>     call getCDS ;Sets the current CDS
   312 000054C1 5A                  <1>     pop rdx
   313 000054C2 59                  <1>     pop rcx
   314 000054C3 7217                <1>     jc .badDrv
   315                              <1>     ;Check the CDS not net, subst or join
   316 000054C5 488B35(12070000)    <1>     mov rsi, qword [workingCDS]
   317 000054CC 0FB74643            <1>     movzx eax, word [rsi + cds.wFlags]
   318 000054D0 66A90040            <1>     test ax, cdsValidDrive  ;If not valid, fail
   319 000054D4 7406                <1>     jz .badDrv
   320 000054D6 66A980B0            <1>     test ax, cdsRedirDrive|cdsJoinDrive|cdsSubstDrive|cdsRdirLocDrive
   321 000054DA 7411                <1>     jz .goodDrive
   322                              <1> .badDrv:
   323 000054DC C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
   324 000054E3 B80F000000          <1>     mov eax, errBadDrv  ;Error code if error
   325 000054E8 E948220000          <1>     jmp extErrExit
   326                              <1> .goodDrive:
   327                              <1>     ;CDS is good,now get the DPB
   328 000054ED 488B7645            <1>     mov rsi, qword [rsi + cds.qDPBPtr]  ;DPB ptr in rsi
   329 000054F1 488B7E1B            <1>     mov rdi, qword [rsi + dpb.qDriverHeaderPtr] ;Driver ptr in rdi
   330 000054F5 8A4601              <1>     mov al, byte [rsi + dpb.bUnitNumber]
   331 000054F8 8805(C2040000)      <1>     mov byte [primReqPkt + ioctlReqPkt.unitnm], al
   332 000054FE 4889FE              <1>     mov rsi, rdi   ;Get the driver ptr in rsi 
   333                              <1> .ioctlReqMake:
   334                              <1> ;rsi must point to the driver header here
   335 00005501 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   336 00005507 7511                <1>     jnz .supportsIOCTL
   337                              <1> .badFunction:
   338 00005509 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   339 00005510 B801000000          <1>     mov eax, errInvFnc
   340 00005515 E91B220000          <1>     jmp extErrExit
   341                              <1> .supportsIOCTL:
   342                              <1>     ;Setup the request header
   343 0000551A 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   344 00005521 C60327              <1>     mov byte [rbx + ioctlReqPkt.hdrlen], ioctlReqPkt_size
   345 00005524 C6430213            <1>     mov byte [rbx + ioctlReqPkt.cmdcde], drvIOCTL
   346 00005528 66C743030000        <1>     mov word [rbx + ioctlReqPkt.status], 0
   347 0000552E 66894B0D            <1>     mov word [rbx + ioctlReqPkt.majfun], cx ;Store maj and min together
   348 00005532 4889531F            <1>     mov qword [rbx + ioctlReqPkt.ctlptr], rdx
   349 00005536 4889F7              <1>     mov rdi, rsi    ;Save the driver header ptr in rdi
   350 00005539 E8261D0000          <1>     call getUserRegs
   351 0000553E 488B4620            <1>     mov rax, qword [rsi + callerFrame.rsi]
   352 00005542 4889430F            <1>     mov qword [rbx + ioctlReqPkt.rsival], rax
   353 00005546 488B4628            <1>     mov rax, qword [rsi + callerFrame.rdi]
   354 0000554A 48894317            <1>     mov qword [rbx + ioctlReqPkt.rdival], rax
   355 0000554E 4889FE              <1>     mov rsi, rdi
   356 00005551 E863180000          <1>     call goDriver
   357 00005556 66F743030080        <1>     test word [rbx + ioctlReqPkt.status], drvErrStatus
   358 0000555C 0F84C5210000        <1>     jz extGoodExit
   359 00005562 E9BA000000          <1>     jmp failIOCTLCall
   360                              <1> 
   361                              <1> .getDrvLogicalDevice:
   362 00005567 88D8                <1>     mov al, bl
   363 00005569 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   364 00005570 C6430217            <1>     mov byte [rbx + getDevReqPkt.cmdcde], drvGETDRVMAP
   365 00005574 C6030D              <1>     mov byte [rbx + getDevReqPkt.hdrlen], getDevReqPkt_size
   366 00005577 66C743030000        <1>     mov word [rbx + getDevReqPkt.status], 0
   367 0000557D 53                  <1>     push rbx
   368 0000557E E8751D0000          <1>     call getCDS
   369 00005583 8805(09070000)      <1>     mov byte [workingDrv], al
   370 00005589 5B                  <1>     pop rbx
   371 0000558A 0F8283FEFFFF        <1>     jc .remTestBadDrv
   372 00005590 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   373 00005597 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   374 0000559B 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   375 0000559F 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   376 000055A2 884301              <1>     mov byte [rbx + getDevReqPkt.unitnm], al
   377                              <1> 
   378 000055A5 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   379 000055AB 0F8440FCFFFF        <1>     jz .invalidFunction
   380 000055B1 E803180000          <1>     call goDriver
   381 000055B6 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   382 000055BC 7405                <1>     jz .getDrvOk
   383 000055BE E95E000000          <1>     jmp failIOCTLCall
   384                              <1> .getDrvOk:
   385 000055C3 8A4301              <1>     mov al, byte [rbx + getDevReqPkt.unitnm]    ;Get the byte
   386                              <1>     return
    13                              <2> %%_ret:
    14 000055C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .setDrvLogicalDevice:
   388 000055C7 88D8                <1>     mov al, bl
   389 000055C9 488D1D(C1040000)    <1>     lea rbx, primReqPkt
   390 000055D0 C6430218            <1>     mov byte [rbx + setDevReqPkt.cmdcde], drvSETDRVMAP
   391 000055D4 C6030D              <1>     mov byte [rbx + setDevReqPkt.hdrlen], setDevReqPkt_size
   392 000055D7 66C743030000        <1>     mov word [rbx + setDevReqPkt.status], 0
   393 000055DD 53                  <1>     push rbx
   394 000055DE E8151D0000          <1>     call getCDS
   395 000055E3 8805(09070000)      <1>     mov byte [workingDrv], al
   396 000055E9 5B                  <1>     pop rbx
   397 000055EA 0F8223FEFFFF        <1>     jc .remTestBadDrv
   398 000055F0 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
   399 000055F7 488B7F45            <1>     mov rdi, qword [rdi + cds.qDPBPtr]
   400 000055FB 488B771B            <1>     mov rsi, qword [rdi + dpb.qDriverHeaderPtr]
   401 000055FF 8A4701              <1>     mov al, byte [rdi + dpb.bUnitNumber]
   402 00005602 884301              <1>     mov byte [rbx + setDevReqPkt.unitnm], al
   403 00005605 66F746084000        <1>     test word [rsi + drvHdr.attrib], devDrvIOCTL
   404 0000560B 0F84E0FBFFFF        <1>     jz .invalidFunction
   405 00005611 E8A3170000          <1>     call goDriver
   406 00005616 30C0                <1>     xor al, al
   407 00005618 66F743030080        <1>     test word [rbx + getDevReqPkt.status], drvErrStatus
   408                              <1>     retz    ;Return if OK, else fail
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000561E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00005620 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   409                              <1> failIOCTLCall:
   410                              <1> ;Called to fail IOCTL calls that don't trigger Int 24h
   411                              <1> ;rbx -> Driver request packet
   412 00005621 0FB77B03            <1>     movzx edi, word [rbx + ioctlReqPkt.status]
   413 00005625 81E7FF000000        <1>     and edi, 0FFh   ;Save the low byte only
   414 0000562B E843110000          <1>     call xlatHardError
   415 00005630 0FB705(0B040000)    <1>     movzx eax, word [errorExCde] 
   416 00005637 E9F9200000          <1>     jmp extErrExit
   417                              <1> 
    44                                  %include "./src/Kernel/MemExec/memFunc.asm"
     1                              <1> ;Memory related functions
     2                              <1> 
     3                              <1> ;-----------------------------------:
     4                              <1> ;  Memory related Kernel routines   :
     5                              <1> ;-----------------------------------:
     6                              <1> ;NOTE: 
     7                              <1> ;   If less than 6 paragraphs requested for alloc, allocate 6 paragraphs.
     8                              <1> ;   If between 0 and 6 paras requested for realloc, realloc to 6.
     9                              <1> ;       If 0 requested for realloc, free.
    10                              <1> allocateMemory:    ;ah = 48h
    11                              <1> ;Input: ebx = Number of paragraphs requested
    12                              <1> ;Output:    CF=NC: rax = Ptr to allocated memory block
    13                              <1> ;           CF=CY: ax = Error code, ebx = Largest block available
    14 0000563C E8A9200000          <1>     call dosCrit1Enter
    15 00005641 B806000000          <1>     mov eax, 6
    16 00005646 39C3                <1>     cmp ebx, eax
    17 00005648 0F42D8              <1>     cmovb ebx, eax
    18 0000564B 31D2                <1>     xor edx, edx
    19                              <1>     ;Clear the pointers
    20 0000564D 488915(45040000)    <1>     mov qword [firstMCB], rdx
    21 00005654 488915(4D040000)    <1>     mov qword [bestMCB], rdx
    22 0000565B 488915(55040000)    <1>     mov qword [lastMCB], rdx
    23 00005662 31ED                <1>     xor ebp, ebp    
    24 00005664 FFCD                <1>     dec ebp     ;Use ebp as the size counter for Best Fit MCB
    25 00005666 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get start of chain
    26                              <1> .walk:
    27 0000566D 4889F7              <1>     mov rdi, rsi    ;Use rdi as pointer to the old block, walk with rsi
    28 00005670 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    29 00005673 7409                <1>     je .walk1
    30 00005675 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    31 00005678 0F85E5040000        <1>     jne badMCBChain
    32                              <1> .walk1:
    33                              <1>     ;Here if valid but not the last block
    34 0000567E 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    35 00005686 0F8582000000        <1>     jne .walk2
    36                              <1>     ;Here we consolidate adjacent free blocks if there are any
    37                              <1>     ;rdi points to rsi too, walk forwards with rsi, anchor with rdi. 
    38                              <1>     ;End consolidation at first non free block or at last block in chain
    39 0000568C 803F5A              <1>     cmp byte [rdi + mcb.marker], mcbMarkEnd ;If we at the end
    40 0000568F 744A                <1>     je .det0    ;Determine if this block is useful
    41 00005691 31C9                <1>     xor ecx, ecx
    42 00005693 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    43 00005696 4881C610000000      <1>     add rsi, mcb.program
    44                              <1> .cons0:
    45 0000569D 48C1E104            <1>     shl rcx, 4
    46 000056A1 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    47 000056A4 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
    48 000056A7 7409                <1>     je .cons1
    49 000056A9 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    50 000056AC 0F85B1040000        <1>     jne badMCBChain 
    51                              <1> .cons1:
    52 000056B2 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
    53 000056BA 751F                <1>     jne .det0   ;No more free blocks, now determine if rdi useful
    54                              <1>     ;Here rsi, points to a free block, add it to rdi
    55 000056BC 31C9                <1>     xor ecx, ecx
    56 000056BE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    57 000056C1 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Absorb old mcb into allocation space
    58 000056C7 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add total block size + old mcb
    59 000056CA 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the old marker
    60 000056CC 31D2                <1>     xor edx, edx
    61 000056CE 488916              <1>     mov qword [rsi], rdx    ;Clean up absorbed MCB
    62 000056D1 48895608            <1>     mov qword [rsi + 8], rdx
    63 000056D5 3C5A                <1>     cmp al, mcbMarkEnd
    64 000056D7 75C4                <1>     jne .cons0    ;If not Z, goto next block and check if free and ok to add!
    65                              <1>     ;Here we deal with if the block was the last one 
    66 000056D9 8807                <1>     mov byte [rdi + mcb.marker], al ;rdi now becomes the last block!
    67                              <1> .det0:  ;Now determine if pointer in rdi is useful
    68 000056DB 4889FE              <1>     mov rsi, rdi ;First return rsi back to rdi
    69                              <1> ;ebx must be less than the arena size for the arena to be useful!
    70 000056DE 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize in ecx
    71 000056E1 39D9                <1>     cmp ecx, ebx
    72 000056E3 7229                <1>     jb .walk2   ;If ebx > blocksize, skip it
    73 000056E5 488935(55040000)    <1>     mov qword [lastMCB], rsi    ;Store as lastMCB 
    74 000056EC 488B05(45040000)    <1>     mov rax, qword [firstMCB]   ;Get firstMCB
    75 000056F3 4885C0              <1>     test rax, rax   ;Is it zero? If so, place rsi there
    76 000056F6 7507                <1>     jnz .det1   ;If not, must have a value, skip replacing the value
    77 000056F8 488935(45040000)    <1>     mov qword [firstMCB], rsi
    78                              <1> .det1:
    79                              <1>     ;Now test for best fit.
    80 000056FF 29D9                <1>     sub ecx, ebx    ;Block - ebx
    81 00005701 39CD                <1>     cmp ebp, ecx    ;Check if ebp > ecx
    82 00005703 7209                <1>     jb .walk2
    83 00005705 89CD                <1>     mov ebp, ecx  ;IF ebp > ecx, then replace ebp with ecx and save mcb ptr
    84 00005707 488935(4D040000)    <1>     mov qword [bestMCB], rsi
    85                              <1> .walk2:
    86 0000570E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
    87 00005711 7418                <1>     je .allocate    ;Dont walk any more if rsi is at the end
    88 00005713 31C9                <1>     xor ecx, ecx
    89 00005715 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
    90 00005718 48C1E104            <1>     shl rcx, 4
    91 0000571C 4881C610000000      <1>     add rsi, mcb.program
    92 00005723 4801CE              <1>     add rsi, rcx    ;Goto next mcb block
    93 00005726 E942FFFFFF          <1>     jmp .walk
    94                              <1> .allocate:
    95                              <1>     ;Allocation fails IF the pointer is the null pointer
    96 0000572B 803D(D3030000)02    <1>     cmp byte [allocStrat], 2   ;Get allocation strategy
    97 00005732 723A                <1>     jb .bfCommon    ;If 0 or 1, go to bf common
    98                              <1>     ;Fall thru if last fit
    99 00005734 488B35(55040000)    <1>     mov rsi, qword [lastMCB]
   100 0000573B 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   101 0000573E 0F84A8000000        <1>     jz .allocFail
   102 00005744 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get marker
   103 00005746 C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn ;This is no longer the end if it was
   104 00005749 31C9                <1>     xor ecx, ecx
   105 0000574B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   106 0000574E 29D9                <1>     sub ecx, ebx
   107 00005750 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB too
   108 00005756 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;This is the size of the allocation
   109 00005759 48C1E104            <1>     shl rcx, 4
   110 0000575D 4881C610000000      <1>     add rsi, mcb.program
   111 00005764 4801CE              <1>     add rsi, rcx    ;Go to the new MCB we are creating
   112 00005767 8806                <1>     mov byte [rsi + mcb.marker], al ;Store marker
   113 00005769 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx
   114 0000576C EB56                <1>     jmp short .bfPerfectFit
   115                              <1> .bfCommon:
   116 0000576E 488B35(45040000)    <1>     mov rsi, qword [firstMCB]
   117 00005775 803D(D3030000)01    <1>     cmp byte [allocStrat], 1    ;Check if best fit
   118 0000577C 480F4435(4D040000)  <1>     cmove rsi, qword [bestMCB]  ;Replace if alloc strat is best fit
   119 00005784 4885F6              <1>     test rsi, rsi   ;Check if null pointer
   120 00005787 7463                <1>     jz .allocFail
   121                              <1>     ;Now check if we need to make a "spill over" free MCB
   122 00005789 31C9                <1>     xor ecx, ecx
   123 0000578B 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]  ;Get current whole block size
   124 0000578E 29D9                <1>     sub ecx, ebx    ;Take away the allocation
   125 00005790 7432                <1>     jz short .bfPerfectFit
   126                              <1>     ;Make the spill over MCB 
   127 00005792 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Make space for new MCB for new block
   128 00005798 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx    ;Save new allocation in curr MCB
   129 0000579B 8A06                <1>     mov al, byte [rsi + mcb.marker]
   130 0000579D C6064D              <1>     mov byte [rsi + mcb.marker], mcbMarkCtn
   131 000057A0 4889F7              <1>     mov rdi, rsi    ;Save pointer in rdi
   132 000057A3 4881C710000000      <1>     add rdi, mcb.program
   133 000057AA 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero upper dword
   134 000057B0 48C1E304            <1>     shl rbx, 4
   135 000057B4 4801DF              <1>     add rdi, rbx
   136 000057B7 8807                <1>     mov byte [rdi + mcb.marker], al ;Store old marker in new block
   137 000057B9 48C7470100000000    <1>     mov qword [rdi + mcb.owner], mcbOwnerFree
   138 000057C1 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx
   139                              <1> .bfPerfectFit:
   140                              <1>     ;Now set the current PSP as the owner of this new MCB
   141 000057C4 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   142 000057CB 48895601            <1>     mov qword [rsi + mcb.owner], rdx    ;Set owner to calling application
   143 000057CF 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   144 000057D6 488D4610            <1>     lea rax, qword [rsi + mcb.program]  ;Point return ptr to program area
   145 000057DA 488902              <1>     mov qword [rdx + callerFrame.rax], rax  ;Save new block pointer in rax
   146 000057DD 806258FE            <1>     and byte [rdx + callerFrame.flags], 0FEh    ;Clear carry
   147 000057E1 E850030000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   148 000057E6 E8091F0000          <1>     call dosCrit1Exit
   149                              <1>     return
    13                              <2> %%_ret:
    14 000057EB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   150                              <1> .allocFail:
   151                              <1>     ;Walk the MCB chain to determine the biggest block size
   152 000057EC 488B35(33000000)    <1>     mov rsi, [mcbChainPtr]
   153 000057F3 31DB                <1>     xor ebx, ebx    ;Block size container, get biggest free space size
   154                              <1> .af0:
   155 000057F5 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   156 000057F8 7409                <1>     je .af1
   157 000057FA 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   158 000057FD 0F8560030000        <1>     jne badMCBChain
   159                              <1> .af1:
   160 00005803 31C9                <1>     xor ecx, ecx
   161 00005805 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get blocksize
   162 00005808 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   163 00005810 7505                <1>     jne .af2
   164 00005812 39D9                <1>     cmp ecx, ebx
   165 00005814 0F47D9              <1>     cmova ebx, ecx
   166                              <1> .af2:
   167 00005817 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   168 0000581A 7410                <1>     je .afExit
   169 0000581C 48C1E104            <1>     shl rcx, 4
   170 00005820 4881C610000000      <1>     add rsi, mcb.program
   171 00005827 4801CE              <1>     add rsi, rcx
   172 0000582A EBD7                <1>     jmp short .af1
   173                              <1> .afExit:
   174 0000582C B808000000          <1>     mov eax, errNoMem
   175 00005831 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   176 00005838 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save block size
   177 0000583B E931030000          <1>     jmp mcbErrHdlr
   178                              <1> freeMemory:        ;ah = 49h
   179                              <1> ;Input: r8 = address of the block to be returned (MCB + 1 para)
   180                              <1> ;Output: CF=CY => al = error code, CH=NC, nothing
   181                              <1> ;Always skip the first block as this is the anchor for DOS
   182 00005840 E8A51E0000          <1>     call dosCrit1Enter
   183 00005845 4981E810000000      <1>     sub r8, mcb.program ;Point r8 to the MCB for the returned block
   184 0000584C 31C9                <1>     xor ecx, ecx
   185 0000584E 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get MCB chain ptr to start walking
   186 00005855 4889F7              <1>     mov rdi, rsi
   187 00005858 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   188 0000585B 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   189 0000585F 4881C610000000      <1>     add rsi, mcb.program
   190 00005866 4801CE              <1>     add rsi, rcx    ;Go to next block
   191                              <1> .mainLoop:
   192 00005869 31C9                <1>     xor ecx, ecx
   193 0000586B 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   194 0000586E 7409                <1>     je .valid
   195 00005870 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   196 00005873 0F85EA020000        <1>     jne badMCBChain
   197                              <1> .valid:
   198 00005879 4939F0              <1>     cmp r8, rsi
   199 0000587C 741C                <1>     je .blockFound
   200                              <1>     ;Not valid, check if last block in chain
   201 0000587E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   202 00005881 0F84A5000000        <1>     je .blockError
   203 00005887 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   204 0000588A 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   205 0000588E 4881C110000000      <1>     add rcx, mcb.program    ;Go past the arena mcb
   206 00005895 4801CE              <1>     add rsi, rcx    ;Go to next block
   207 00005898 EBCF                <1>     jmp short .mainLoop
   208                              <1> .blockFound:
   209                              <1>     ;If hole, error.
   210                              <1>     ;Else, set free, check if previous block is free, then check if next is free
   211 0000589A 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   212 000058A2 0F8484000000        <1>     je .blockError
   213 000058A8 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   214 000058B0 48817F0100000000    <1>     cmp qword [rdi + mcb.owner], mcbOwnerFree   ;Is the previous block free?
   215 000058B8 751E                <1>     jne .blockFoundCheckFollowing   ;No, check if block following is free
   216                              <1>     ;It is, let it absorb this space
   217 000058BA 31C9                <1>     xor ecx, ecx
   218 000058BC 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   219 000058BF 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   220 000058C5 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   221                              <1>     ;Replace block marker
   222 000058C8 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get free'd marker
   223 000058CA 8807                <1>     mov byte [rdi + mcb.marker], al ;Replace!
   224 000058CC 31C9                <1>     xor ecx, ecx
   225 000058CE 48890E              <1>     mov qword [rsi], rcx
   226 000058D1 48894E08            <1>     mov qword [rsi + 8], rcx
   227 000058D5 4889FE              <1>     mov rsi, rdi    ;Now point rsi to this block
   228                              <1> .blockFoundCheckFollowing:
   229                              <1>     ;First check if we are the last block in chain
   230 000058D8 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   231 000058DB 7439                <1>     je .blockFoundExit  ;If yes, exit!
   232 000058DD 4889F7              <1>     mov rdi, rsi    ;Now point rdi to current block
   233 000058E0 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   234 000058E3 48C1E104            <1>     shl rcx, 4  ;Turn to bytes
   235 000058E7 4881C110000000      <1>     add rcx, mcb.program
   236 000058EE 4801CE              <1>     add rsi, rcx    ;Go to next block
   237 000058F1 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   238 000058F9 751B                <1>     jne .blockFoundExit ;If not free, exit
   239                              <1>     ;If free, absorb into block pointed to by rdi
   240 000058FB 31C9                <1>     xor ecx, ecx
   241 000058FD 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   242 00005900 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add 1 for the mcb itself
   243 00005906 014F09              <1>     add dword [rdi + mcb.blockSize], ecx    ;Add to previous entry
   244                              <1>     ;Replace block marker
   245 00005909 8A06                <1>     mov al, byte [rsi + mcb.marker]
   246 0000590B 8807                <1>     mov byte [rdi + mcb.marker], al
   247 0000590D 31C9                <1>     xor ecx, ecx
   248 0000590F 48890E              <1>     mov qword [rsi], rcx
   249 00005912 48894E08            <1>     mov qword [rsi + 8], rcx
   250                              <1> .blockFoundExit:
   251 00005916 E81B020000          <1>     call verifyIntegrityOfMCBChain  ;Ensure MCB chain is still ok!
   252 0000591B E8D41D0000          <1>     call dosCrit1Exit
   253 00005920 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   254 00005927 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   255                              <1>     return
    13                              <2> %%_ret:
    14 0000592B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   256                              <1> .blockError:
   257 0000592C C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   258 00005933 B809000000          <1>     mov eax, errMemAddr
   259 00005938 E8F81D0000          <1>     call extErrExit ;Error thru the unified error handler
   260 0000593D E8F4010000          <1>     call verifyIntegrityOfMCBChain  ;Check MCB chain ok
   261 00005942 E8AD1D0000          <1>     call dosCrit1Exit
   262                              <1>     return
    13                              <2> %%_ret:
    14 00005947 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   263                              <1> reallocMemory:     ;ah = 4Ah
   264                              <1> ;Input: r8 = address of the block to be realloc'ed
   265                              <1> ;       ebx = How many paras this block should contain after realloc. 
   266                              <1> ;               If ebx = 0, jump to free memory
   267 00005948 E89D1D0000          <1>     call dosCrit1Enter
   268 0000594D 85DB                <1>     test ebx, ebx
   269 0000594F 0F84EBFEFFFF        <1>     jz freeMemory   ;If resize to 0, equivalent to free!
   270 00005955 B806000000          <1>     mov eax, 6
   271 0000595A 39C3                <1>     cmp ebx, eax    ;Are we trying to resize to less than 6?
   272 0000595C 0F42D8              <1>     cmovb ebx, eax
   273 0000595F 4981E810000000      <1>     sub r8, mcb.program ;Return pointer to MCB for arena
   274 00005966 4C89C6              <1>     mov rsi, r8     ;Get segment pointer in rsi
   275 00005969 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   276 0000596C 7409                <1>     je .ctn
   277 0000596E 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   278 00005971 0F856F010000        <1>     jne .badAddrGiven
   279                              <1> .ctn:
   280                              <1>     ;Provided block is valid and not a hole
   281                              <1>     ;Check if Growth or Shrink
   282 00005977 48817E0107000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerHole
   283 0000597F 74AB                <1>     je freeMemory.blockError
   284 00005981 4889F7              <1>     mov rdi, rsi    ;Point rdi to same block MCB
   285 00005984 31C9                <1>     xor ecx, ecx
   286 00005986 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   287 00005989 39CB                <1>     cmp ebx, ecx    ;If ebx is bigger than ecx, we have growth
   288 0000598B 0F8791000000        <1>     ja .growth
   289 00005991 0F841F010000        <1>     je .exit    ;If they are equal, do nothing!
   290                              <1> ;We can always shrink
   291 00005997 29D9                <1>     sub ecx, ebx    ;In ecx save num. paras in new block
   292 00005999 81E901000000        <1>     sub ecx, (mcb.program >> 4) ;Reserve space in new block for new MCB 
   293 0000599F 895E09              <1>     mov dword [rsi + mcb.blockSize], ebx ;Save new num paras in old MCB
   294 000059A2 81E3FFFFFFFF        <1>     and ebx, -1 ;Zero the upper bytes of qword
   295 000059A8 48C1E304            <1>     shl rbx, 4
   296 000059AC 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   297 000059B3 4801DE              <1>     add rsi, rbx    ;Move rsi to point to new mcb
   298 000059B6 8A07                <1>     mov al, byte [rdi + mcb.marker] ;Get old marker
   299 000059B8 C6074D              <1>     mov byte [rdi + mcb.marker], mcbMarkCtn
   300 000059BB 8806                <1>     mov byte [rsi + mcb.marker], al ;Place old marker in new mcb
   301 000059BD 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   302 000059C5 894E09              <1>     mov dword [rsi + mcb.blockSize], ecx    ;Save new arena size
   303 000059C8 3C5A                <1>     cmp al, mcbMarkEnd  ;If the new block is at the end, exit
   304 000059CA 0F84E6000000        <1>     je .exit
   305                              <1> ;Else, now see if the block following is also free and absorb it
   306 000059D0 4889F7              <1>     mov rdi, rsi    ;Point rdi to new mcb for new arena
   307 000059D3 48C1E104            <1>     shl rcx, 4  ;Convert new block size to bytes
   308 000059D7 4881C610000000      <1>     add rsi, mcb.program    ;Shift rsi to end of mcb
   309 000059DE 4801CE              <1>     add rsi, rcx    ;Goto next arena
   310 000059E1 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   311 000059E4 7409                <1>     je .shrinkAbsorb
   312 000059E6 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   313 000059E9 0F8574010000        <1>     jne badMCBChain
   314                              <1> .shrinkAbsorb:
   315 000059EF 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree  ;Is this free?
   316 000059F7 0F85B9000000        <1>     jne .exit
   317                              <1>     ;It is free, absorb it
   318 000059FD 8A06                <1>     mov al, byte [rsi + mcb.marker]
   319 000059FF 8807                <1>     mov byte [rdi + mcb.marker], al ;We absorb the marker too
   320 00005A01 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize] ;Get the absorb arena size
   321 00005A04 894F09              <1>     mov dword [rdi + mcb.blockSize], ecx ;Set it to the new arena size
   322 00005A07 4889F1              <1>     mov rcx, rsi    ;Now compute the space between the new mcb and the one
   323 00005A0A 4829F9              <1>     sub rcx, rdi    ;... being absorbed
   324 00005A0D 48C1E904            <1>     shr rcx, 4  ;Convert to paragraphs
   325 00005A11 014F09              <1>     add dword [rdi + mcb.blockSize], ecx
   326 00005A14 31C9                <1>     xor ecx, ecx
   327                              <1>     ;Clear absorbed MCB
   328 00005A16 48890E              <1>     mov qword [rsi], rcx
   329 00005A19 48894E08            <1>     mov qword [rsi + 8], rcx
   330 00005A1D E994000000          <1>     jmp .exit
   331                              <1> .growth:
   332                              <1> ;Check if we are the last block in chain. IF yes, not enuff mem err
   333 00005A22 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   334 00005A25 0F84A5000000        <1>     je .notEnuffMem
   335                              <1> ;Now check the following space is free. If not, not enuff mem err
   336 00005A2B 31C9                <1>     xor ecx, ecx
   337 00005A2D 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]
   338 00005A30 48C1E104            <1>     shl rcx, 4
   339 00005A34 4889F7              <1>     mov rdi, rsi    
   340 00005A37 4881C610000000      <1>     add rsi, mcb.program    ;Point to end of MCB
   341 00005A3E 4801CE              <1>     add rsi, rcx
   342 00005A41 803E4D              <1>     cmp byte [rsi + mcb.marker], mcbMarkCtn
   343 00005A44 7409                <1>     je .growthOK
   344 00005A46 803E5A              <1>     cmp byte [rsi + mcb.marker], mcbMarkEnd
   345 00005A49 0F8514010000        <1>     jne badMCBChain
   346                              <1> .growthOK:
   347                              <1>     ;rdi points to block we are growing
   348 00005A4F 48817E0100000000    <1>     cmp qword [rsi + mcb.owner], mcbOwnerFree
   349 00005A57 7577                <1>     jne .notEnuffMem    ;Not enough memory to grow if space owned
   350                              <1>     ;rsi must own all memory up to the next owned arena
   351 00005A59 8A06                <1>     mov al, byte [rsi + mcb.marker] ;Get the next block's marker
   352 00005A5B 31C9                <1>     xor ecx, ecx
   353 00005A5D 31D2                <1>     xor edx, edx
   354 00005A5F 8B4E09              <1>     mov ecx, dword [rsi + mcb.blockSize]    ;Get new block size 
   355 00005A62 81C101000000        <1>     add ecx, (mcb.program >> 4) ;Add the new block mcb size
   356 00005A68 8B5709              <1>     mov edx, dword [rdi + mcb.blockSize]    ;Get original block size
   357 00005A6B 01CA                <1>     add edx, ecx    ;Add two blocks together, save in rdx, preserve ecx
   358 00005A6D 39D3                <1>     cmp ebx, edx    ;If ebx > edx, fail
   359 00005A6F 0F47DA              <1>     cmova ebx, edx  ;Move max block size in ebx if ebx is bigger
   360 00005A72 775E                <1>     ja .notEnuffMem1
   361 00005A74 29DA                <1>     sub edx, ebx    ;Remove ebx amount from edx
   362 00005A76 81FA01000000        <1>     cmp edx, 1
   363 00005A7C 744E                <1>     je .notEnuffMem2
   364 00005A7E 31C9                <1>     xor ecx, ecx
   365 00005A80 48890E              <1>     mov qword [rsi], rcx        ;Clear old MCB
   366 00005A83 48894E08            <1>     mov qword [rsi + 8], rcx    ;Clear old MCB
   367 00005A87 895F09              <1>     mov dword [rdi + mcb.blockSize], ebx    ;Resize OG block
   368 00005A8A 4889FE              <1>     mov rsi, rdi    ;Point rsi back to original block
   369 00005A8D 4881C610000000      <1>     add rsi, mcb.program    ;Go to the program area
   370 00005A94 48C1E304            <1>     shl rbx, 4      ;Convert to bytes
   371 00005A98 4801DE              <1>     add rsi, rbx    ;Move rsi to next block header position
   372 00005A9B 48C1EB04            <1>     shr rbx, 4      ;Convert back to paragraphs
   373 00005A9F 8806                <1>     mov byte [rsi + mcb.marker], al ;This ensures if a new mcb is created,
   374                              <1>     ; it has the same marker as the old one, and if it was completely absorbed,
   375                              <1>     ; then the absorbing MCB has the marker of the absorbed MCB
   376 00005AA1 85D2                <1>     test edx, edx   ;If this is zero, then we skip the building of the new mcb
   377 00005AA3 7411                <1>     jz .exit
   378 00005AA5 81EA01000000        <1>     sub edx, (mcb.program >> 4) ;Make space for MCB header
   379 00005AAB 895609              <1>     mov dword [rsi + mcb.blockSize], edx
   380 00005AAE 48C7460100000000    <1>     mov qword [rsi + mcb.owner], mcbOwnerFree
   381                              <1> .exit:
   382 00005AB6 E87B000000          <1>     call verifyIntegrityOfMCBChain
   383 00005ABB E8341C0000          <1>     call dosCrit1Exit
   384 00005AC0 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   385 00005AC7 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   386                              <1>     return
    13                              <2> %%_ret:
    14 00005ACB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   387                              <1> .notEnuffMem2:
   388 00005ACC FFCB                <1>     dec ebx ;Max allocation must be 1 less than what it currently is
   389 00005ACE EB02                <1>     jmp short .notEnuffMem1
   390                              <1> .notEnuffMem:
   391 00005AD0 31DB                <1>     xor ebx, ebx    ;No space to grow
   392                              <1> .notEnuffMem1:      ;Here with max block size in rbx
   393 00005AD2 B808000000          <1>     mov eax, errNoMem   ;Not enough memory
   394 00005AD7 488B15(7B040000)    <1>     mov rdx, qword [oldRSP]
   395 00005ADE 895A08              <1>     mov dword [rdx + callerFrame.rbx], ebx  ;Save max realloc size for block
   396 00005AE1 E98B000000          <1>     jmp mcbErrHdlr
   397                              <1> .badAddrGiven:
   398 00005AE6 B809000000          <1>     mov eax, errMemAddr   ;Bad address given
   399 00005AEB E981000000          <1>     jmp mcbErrHdlr
   400                              <1> getsetMallocStrat: ;ah = 58h
   401 00005AF0 84C0                <1>     test al, al
   402 00005AF2 741F                <1>     jz .get
   403 00005AF4 3C02                <1>     cmp al, 2
   404 00005AF6 7337                <1>     jae .bad
   405                              <1> ;Set here
   406 00005AF8 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   407 00005AFF 668B4308            <1>     mov ax, word [rbx + callerFrame.rbx]    ;Loword in rbx has alloc strat
   408 00005B03 8805(D3030000)      <1>     mov byte [allocStrat], al   ;Only save low word
   409 00005B09 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   410 00005B0D E824000000          <1>     call verifyIntegrityOfMCBChain
   411                              <1>     return
    13                              <2> %%_ret:
    14 00005B12 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   412                              <1> .get:
   413 00005B13 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   414 00005B1A 31C0                <1>     xor eax, eax
   415 00005B1C 8A05(D3030000)      <1>     mov al, byte [allocStrat]
   416 00005B22 668903              <1>     mov word [rbx + callerFrame.rax], ax    ;Store word
   417 00005B25 806358FE            <1>     and byte [rbx + callerFrame.flags], 0FEh    ;Clear Carry flag
   418 00005B29 E808000000          <1>     call verifyIntegrityOfMCBChain
   419                              <1>     return
    13                              <2> %%_ret:
    14 00005B2E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   420                              <1> .bad:
   421 00005B2F B801000000          <1>     mov eax, errInvFnc
   422 00005B34 EB3B                <1>     jmp short mcbErrHdlr
   423                              <1> ;-----------------------------------:
   424                              <1> ;      Memory related routines      :
   425                              <1> ;-----------------------------------:
   426                              <1> verifyIntegrityOfMCBChain:
   427 00005B36 50                  <1>     push rax
   428 00005B37 53                  <1>     push rbx
   429 00005B38 488B1D(33000000)    <1>     mov rbx, qword [mcbChainPtr]    ;Get the head of the chain
   430                              <1> .ok:
   431 00005B3F 803B4D              <1>     cmp byte [rbx + mcb.marker], mcbMarkCtn
   432 00005B42 7408                <1>     je .ok1
   433 00005B44 803B5A              <1>     cmp byte [rbx + mcb.marker], mcbMarkEnd    ;End of the chain?
   434 00005B47 7518                <1>     jne .bmcbPrep    ;It was not M or Z, fail violently
   435                              <1> .exit:
   436 00005B49 5B                  <1>     pop rbx
   437 00005B4A 58                  <1>     pop rax
   438                              <1>     return ;We have reached the end of the chain, return all good!
    13                              <2> %%_ret:
    14 00005B4B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   439                              <1> .ok1:
   440 00005B4C 31C0                <1>     xor eax, eax
   441 00005B4E 8B4309              <1>     mov eax, dword [rbx + mcb.blockSize]    ;Add the block size
   442 00005B51 48C1E004            <1>     shl rax, 4  ;Convert from paragraphs to bytes
   443 00005B55 4881C310000000      <1>     add rbx, mcb.program    ;The block starts at the program
   444 00005B5C 4801C3              <1>     add rbx, rax
   445 00005B5F EBDE                <1>     jmp short .ok
   446                              <1> .bmcbPrep:
   447 00005B61 5B                  <1>     pop rbx ;Pop off the stack first!
   448 00005B62 58                  <1>     pop rax
   449                              <1> badMCBChain:
   450 00005B63 B007                <1>     mov al, errMCBbad   ;Yikes!
   451 00005B65 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   452 00005B6C E9C41B0000          <1>     jmp extErrExit
   453                              <1> mcbErrHdlr:
   454                              <1>     ;Jumped to with eax = error code
   455 00005B71 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;No drive
   456 00005B78 E8B9FFFFFF          <1>     call verifyIntegrityOfMCBChain  ;Replaces error code if mcb chain bad
   457 00005B7D E9B31B0000          <1>     jmp extErrExit  ;Else, error thru the unified error handler
    45                                  %include "./src/Kernel/MemExec/progMgmt.asm"
     1                              <1> ;EXEC and all default terminates are here
     2                              <1> 
     3                              <1> ;========================
     4                              <1> ;   Interrupt handlers
     5                              <1> ;========================
     6                              <1> terminateProcess:   ;Int 20h
     7 00005B82 31C0                <1>     xor eax, eax    ;Prepare for AH=00h call
     8 00005B84 E9D9190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=00h (which jumps to 21h/AX=4C00h)
     9                              <1> terminateRes:       ;Int 27h
    10                              <1> ;Input: edx = offset of last byte in program to remain resident plus 1
    11 00005B89 81C20F000000        <1>     add edx, 0Fh    ;Round up number of bytes to next paragraph
    12 00005B8F C1EA04              <1>     shr edx, 4      ;Divide by 16 to get number of paragraphs
    13 00005B92 B800310000          <1>     mov eax, 3100h  ;Setup a call to TSR 21h/AH=31h
    14 00005B97 E9C6190000          <1>     jmp functionDispatch    ;Dispatch 21h/AH=31h Terminate and Stay Resident
    15                              <1> ;========================
    16                              <1> ;    Int 21h functions
    17                              <1> ;========================
    18                              <1> createPSP:         ;ah = 55h, creates a PSP for a program
    19                              <1> ;Input:
    20                              <1> ;rdx = Pointer to new PSP in memory.
    21                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    22                              <1> ;   Officially document that this MUST be paragraph aligned.
    23                              <1> ;rsi = alloc size for new psp block
    24                              <1> ;
    25                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    26                              <1> ; Note, only the first 20 handles will be copied 
    27                              <1> ; from wherever the JFT is into the PSP JFT of the new task. 
    28                              <1> ; If any of these handles are non-inheritable or closed, then 
    29                              <1> ; they will be copied as -1 (if closed) or set to -1 during 
    30                              <1> ; the inheritence check.
    31                              <1> ;----------------!!!! HANDLE COPY CAVEAT !!!!----------------
    32 00005B9C C605(15050000)FF    <1>     mov byte [pspCopyFlg], -1   ;We are making a child process
    33 00005BA3 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    34 00005BAA 09F6                <1>     or esi, esi ;Zero upper dword of rsi
    35 00005BAC 56                  <1>     push rsi    ;esi is passed to us for PSP allocsize
    36 00005BAD EB0C                <1>     jmp short copyPSP.pspCommon
    37                              <1> copyPSP:      ;ah = 26h
    38                              <1> ;Input:
    39                              <1> ;rdx = Pointer to new PSP in memory.
    40                              <1> ;   Will be rounded up to next paragraph if not paragraph aligned.
    41                              <1> ;   Officially document that this MUST be paragraph aligned.
    42 00005BAF 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]
    43 00005BB6 418B5802            <1>     mov ebx, dword [r8 + psp.allocSize]    ;Get alloc size (zero upper dword)
    44 00005BBA 53                  <1>     push rbx    ;Save this value for PSP allocsize
    45                              <1> .pspCommon:
    46 00005BBB 4881C20F000000      <1>     add rdx, 0Fh    ;If we need to round up, this will do it
    47 00005BC2 48C1EA04            <1>     shr rdx, 4  ;Now eliminate the bottom nybble
    48 00005BC6 48C1E204            <1>     shl rdx, 4  ;And pull out a fresh zero with inc nybble 1 IF nybble 0 != 0
    49                              <1> ;r8 is current PSP, now copy psp to rdx
    50                              <1> ;Preserve rdx and r8 until the end
    51 00005BCA 4C89C6              <1>     mov rsi, r8
    52 00005BCD 4889D7              <1>     mov rdi, rdx
    53 00005BD0 B920000000          <1>     mov ecx, psp_size/8 ;psp must be 100h
    54 00005BD5 F348A5              <1>     rep movsq   ;Copy the psp over zoom zoom qword boom
    55 00005BD8 48C7422200000000    <1>     mov qword [rdx + psp.parentPtr], 0 ;Set the current parent to 0 by default
    56 00005BE0 F605(15050000)FF    <1>     test byte [pspCopyFlg], -1
    57 00005BE7 7450                <1>     jz .copy
    58                              <1>     ;Now reset the parent psp data
    59 00005BE9 48C74253FFFFFFFF    <1>     mov qword [rdx + psp.prevPSP], -1  ;Share pointer, leave as -1 for now
    60 00005BF1 4C894222            <1>     mov qword [rdx + psp.parentPtr], r8 ;Replace the parent with the currnt
    61                              <1>     ;Now reset the copied jobFileTable
    62 00005BF5 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]
    63 00005BF9 31C9                <1>     xor ecx, ecx
    64 00005BFB B914000000          <1>     mov ecx, dfltJFTsize  ;Store dfltJFTsize free handles in new child PSP
    65 00005C00 66894A4E            <1>     mov word [rdx + psp.jftSize], cx ;Set the size of JFT in new PSP to dflt 20
    66 00005C04 B0FF                <1>     mov al, -1
    67 00005C06 F3AA                <1>     rep stosb   ;Store 20 many -1's indicating 20 free handles
    68                              <1>     ;Here we now proceed to copy all inheritable hdls and nullify other hdls
    69                              <1>     ;lea rsi, qword [r8 + psp.jobFileTbl]    ;Source
    70 00005C08 31DB                <1>     xor ebx, ebx    ;Get the pointer to jft[0] of source JFT
    71 00005C0A E8A8F4FFFF          <1>     call getJFTPtr  ;Get JFT pointer to parent process JFT in rdi
    72 00005C0F 4889FE              <1>     mov rsi, rdi    ;Store it in rsi
    73 00005C12 488D7A2A            <1>     lea rdi, qword [rdx + psp.jobFileTbl]   ;Get the new processes' JFT ptr
    74 00005C16 0FB74A4E            <1>     movzx ecx, word [rdx + psp.jftSize]   ;Copy over first dfltJFTsize handles only
    75                              <1> .xfrJFT:
    76 00005C1A 67E31C              <1>     jecxz .copy
    77 00005C1D FFC9                <1>     dec ecx
    78 00005C1F AC                  <1>     lodsb   ;Get the SFTndx in al
    79 00005C20 0FB6D8              <1>     movzx ebx, al
    80 00005C23 53                  <1>     push rbx
    81 00005C24 E811F5FFFF          <1>     call getSFTndxInheritable ; ZF=ZE => Inheritable
    82 00005C29 58                  <1>     pop rax
    83 00005C2A 7508                <1>     jnz .badJFT
    84 00005C2C AA                  <1>     stosb   ;Else store the SFTndx at that position... 
    85 00005C2D E81FF5FFFF          <1>     call incrementOpenCount ;and increment the open count for the SFT
    86 00005C32 EBE6                <1>     jmp short .xfrJFT
    87                              <1> .badJFT:
    88 00005C34 48FFC7              <1>     inc rdi ;If not inheritable, skip this position and get the next SFTNdx
    89 00005C37 EBE1                <1>     jmp short .xfrJFT 
    90                              <1> .copy:
    91 00005C39 C605(15050000)00    <1>     mov byte [pspCopyFlg], 0    ;Reset flag
    92 00005C40 58                  <1>     pop rax ;Pop the allocsize back into rax
    93 00005C41 894202              <1>     mov dword [rdx + psp.allocSize], eax    ;Store allocsize
    94                              <1>     ;Now we copy the Interrupt addresses from the IDT to the PSP
    95 00005C44 488D7A0A            <1>     lea rdi, qword [rdx + psp.oldInt22h]
    96 00005C48 B022                <1>     mov al, 22h
    97 00005C4A E8E7150000          <1>     call muxGetIntVector    ;Get vector in rbx
    98 00005C4F 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
    99 00005C52 48AB                <1>     stosq   ;Move rdi to next entry and store
   100 00005C54 B023                <1>     mov al, 23h
   101 00005C56 E8DB150000          <1>     call muxGetIntVector    ;Get vector in rbx
   102 00005C5B 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   103 00005C5E 48AB                <1>     stosq   ;Move rdi to next entry and store
   104 00005C60 B024                <1>     mov al, 24h
   105 00005C62 E8CF150000          <1>     call muxGetIntVector    ;Get vector in rbx
   106 00005C67 4889D8              <1>     mov rax, rbx    ;Move vector number to rax
   107 00005C6A 48AB                <1>     stosq   ;Move rdi to next entry and store
   108                              <1>     ;Now we add the additional useful bits... just in case they are damaged
   109 00005C6C 66C702CD20          <1>     mov word [rdx + psp.return], 020CDh  ;Int 20h
   110 00005C71 66C74250CD21        <1>     mov word [rdx + psp.unixEntry], 021CDh  
   111 00005C77 C64252C3            <1>     mov byte [rdx + psp.unixEntry + 2], 0C3h ;Return
   112                              <1>     return
    13                              <2> %%_ret:
    14 00005C7B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   113                              <1> 
   114                              <1> terminateStayRes:  ;ah = 31h
   115                              <1> ;Input: al  = Error code
   116                              <1> ;       edx = Number of paragraphs to keep resident
   117 00005C7C C605(06070000)03    <1>     mov byte [exitType], 3  ;TSR exit signature!
   118                              <1>     ;Minimum number of paragraphs to shrink to is 6 (As per DOS 3.3 - c.f. RBIL)
   119 00005C83 81FA06000000        <1>     cmp edx, 6
   120 00005C89 7305                <1>     jae .aboveMinimum
   121 00005C8B BA06000000          <1>     mov edx, 6  ;Min number of paragraphs
   122                              <1> .aboveMinimum:
   123                              <1> ;Now we setup a call to Realloc 
   124                              <1> ;Setup regs with: 
   125                              <1> ;   r8 = address of the block to be realloc'ed
   126                              <1> ;   ebx = How many paras this block should contain after realloc.
   127 00005C90 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Get current PSP, one para before should be MCB
   128 00005C97 89D3                <1>     mov ebx, edx
   129 00005C99 50                  <1>     push rax    ;Preserve errorlevel across call
   130 00005C9A 53                  <1>     push rbx    ;Preserve new number of paragraphs across call
   131 00005C9B E8A8FCFFFF          <1>     call reallocMemory
   132 00005CA0 5B                  <1>     pop rbx
   133 00005CA1 58                  <1>     pop rax
   134 00005CA2 7226                <1>     jc terminateClean.altEP ;If an error, return w/o editing psp seg. size
   135 00005CA4 41895802            <1>     mov dword [r8 + psp.allocSize], ebx   ;Store the new number of paragraphs
   136                              <1>     ;al has the error code (errorlevel), exitType is set to 3
   137 00005CA8 EB20                <1>     jmp short terminateClean.altEP    ;Terminate as normal
   138                              <1> 
   139                              <1> simpleTerminate:   ;ah = 00h
   140 00005CAA 31C0                <1>     xor eax, eax    ;Just fall through as normal
   141                              <1> terminateClean:    ;ah = 4Ch, EXIT
   142                              <1> ;For now, adjust error level in var
   143 00005CAC 30E4                <1>     xor ah, ah  ;Eliminate the 4Ch
   144 00005CAE 8625(06070000)      <1>     xchg ah, byte [exitType]    ;Set type to zero
   145 00005CB4 F605(8C040000)FF    <1>     test byte [ctrlCExit], -1   ;Is ^C flag set?
   146 00005CBB 7413                <1>     jz .storeELvl   ;Jump if we are here due to normal exit
   147 00005CBD 8625(8C040000)      <1>     xchg ah, byte [ctrlCExit]   ;Zero the flag
   148 00005CC3 C605(06070000)01    <1>     mov byte [exitType], 1   ;Set the return type to 1 => Ctrl-C exit
   149                              <1> .altEP: ;EP for Abort and TSR. exitType must be set beforehand
   150 00005CCA 8A25(06070000)      <1>     mov ah, byte [exitType] ;Get the exitType
   151                              <1> .storeELvl:
   152 00005CD0 668905(2F040000)    <1>     mov word [errorLevel], ax   ;Store word
   153                              <1> ;rbx points to current PSP
   154                              <1> ;Use setIntVector. Takes in al the interrupt number and rdx = ptr to routine
   155 00005CD7 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   156 00005CDE 488B531A            <1>     mov rdx, qword [rbx + psp.oldInt24h]
   157 00005CE2 B024                <1>     mov al, 24h
   158 00005CE4 E8801C0000          <1>     call setIntVector
   159 00005CE9 488B5312            <1>     mov rdx, qword [rbx + psp.oldInt23h]
   160 00005CED B023                <1>     mov al, 23h
   161 00005CEF E8751C0000          <1>     call setIntVector
   162 00005CF4 488B530A            <1>     mov rdx, qword [rbx + psp.oldInt22h]
   163 00005CF8 B022                <1>     mov al, 22h
   164 00005CFA E86A1C0000          <1>     call setIntVector
   165                              <1> 
   166 00005CFF B482                <1>     mov ah, 82h ;Cancel all critical sections 0-7
   167 00005D01 CD2A                <1>     int 2Ah
   168 00005D03 C605(96040000)FF    <1>     mov byte [procExiting], -1  ;Critical errors now just return!
   169 00005D0A B822110000          <1>     mov eax, 1122h              ;Net redir, Process Termination Hook
   170 00005D0F 4C8B05(1F040000)    <1>     mov r8, qword [currentPSP]  ;Use r8 instead of DS
   171 00005D16 CD2F                <1>     int 2Fh
   172                              <1> 
   173 00005D18 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP] ;Get the current psp
   174 00005D1F 4889FA              <1>     mov rdx, rdi    ;Save in rdx
   175 00005D22 488B5F22            <1>     mov rbx, qword [rdi + psp.parentPtr]
   176 00005D26 4839FB              <1>     cmp rbx, rdi    ;Check if the application is it's own parent
   177 00005D29 0F848B000000        <1>     je .ownParent   ;No resource freeing if it is its own parent!
   178 00005D2F 803D(06070000)03    <1>     cmp byte [exitType], 3  ;TSR exit?
   179 00005D36 7471                <1>     je .freeOk   ;Skip resource freeing if so as TSR exit resizes memory alloc.
   180                              <1> 
   181                              <1> ;Now close file handles
   182                              <1> ;Close handles in reverse to preserve std handles for if an error again
   183                              <1> ; happens.
   184 00005D38 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   185 00005D3F 0FB75F4E            <1>     movzx ebx, word [rdi + psp.jftSize] ;Number of entries in current JFT
   186 00005D43 85DB                <1>     test ebx, ebx   ;If its zero, close nothing
   187 00005D45 741A                <1>     jz .hdlEnd
   188                              <1> .hdlLp:
   189 00005D47 FFCB                <1>     dec ebx
   190 00005D49 53                  <1>     push rbx
   191 00005D4A E8F0D9FFFF          <1>     call closeFileHdl
   192 00005D4F 5B                  <1>     pop rbx
   193 00005D50 85DB                <1>     test ebx, ebx   ;If we're not yet zero, keep closing
   194 00005D52 75F3                <1>     jnz .hdlLp
   195                              <1> ;Now close all network files.
   196 00005D54 B81D110000          <1>     mov eax, 111Dh  ;Signal termination of process! Kill all net files!
   197 00005D59 CD2F                <1>     int 2Fh
   198                              <1> ;Now free share resources for this process
   199 00005D5B FF15(DF000000)      <1>     call qword [closeTaskShare] ;Free all share resources for this process
   200                              <1> .hdlEnd:
   201                              <1> ;Now remove routines exported by this task from internal tables 
   202                              <1> ; (or pause exit until all programs referencing importing the routines
   203                              <1> ;  provided by this DLL have also terminated.)
   204 00005D61 FF15(B7000000)      <1>     call qword [unloadDLLHook]  
   205                              <1>     
   206                              <1> ;Now free MCB's owned by task
   207 00005D67 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get back the current psp
   208                              <1>     ;Now we must walk the MCB chain and find all paragraphs
   209                              <1>     ; with the currentPSP signature and free them.
   210 00005D6E 488B35(33000000)    <1>     mov rsi, qword [mcbChainPtr]    ;Get the anchor MCB
   211                              <1> .wlkMcb:  ;And walk the chain
   212                              <1> ;First verify the address in rsi is a valid mcb
   213 00005D75 8A0E                <1>     mov cl, byte [rsi + mcb.marker] ;Get the marker char into cl
   214 00005D77 80F94D              <1>     cmp cl, mcbMarkCtn
   215 00005D7A 7405                <1>     je .checkToFree
   216 00005D7C 80F95A              <1>     cmp cl, mcbMarkEnd
   217 00005D7F 7528                <1>     jne .freeOk  ;Something wrong so stop freeing
   218                              <1> .checkToFree:
   219 00005D81 48395E01            <1>     cmp qword [rsi + mcb.owner], rbx ;Is this valid block owned by current PSP?
   220 00005D85 750F                <1>     jne .noFree
   221 00005D87 4C8D4610            <1>     lea r8, qword [rsi + mcb.program] ;Move pointer to block in r8
   222 00005D8B 53                  <1>     push rbx
   223 00005D8C 51                  <1>     push rcx
   224 00005D8D 56                  <1>     push rsi
   225 00005D8E E8ADFAFFFF          <1>     call freeMemory ;Free this memory block
   226 00005D93 5E                  <1>     pop rsi
   227 00005D94 59                  <1>     pop rcx
   228 00005D95 5B                  <1>     pop rbx
   229                              <1>     ;If an error occured, the internal vars will be set.
   230                              <1> .noFree:
   231 00005D96 80F95A              <1>     cmp cl, mcbMarkEnd  ;Are we at the end of the MCB chain?
   232 00005D99 740E                <1>     je .freeOk          ;Skip if we are
   233 00005D9B 8B4609              <1>     mov eax, dword [rsi + mcb.blockSize]
   234 00005D9E 48C1E004            <1>     shl rax, 4  ;Multiply by 4 to get bytes from paragraphs
   235 00005DA2 488D740610          <1>     lea rsi, qword [rsi + mcb.program + rax]    ;Goto next mcb block
   236 00005DA7 EBCC                <1>     jmp short .wlkMcb
   237                              <1> .freeOk:
   238 00005DA9 FF15(A7000000)      <1>     call qword [terminateTask]  ;Registers task terminating, no retval
   239 00005DAF 488B4322            <1>     mov rax, qword [rbx + psp.parentPtr]    ;Get the parent PSP pointer
   240 00005DB3 488905(1F040000)    <1>     mov qword [currentPSP], rax ;and set it to be the current PSP
   241                              <1> .ownParent:
   242 00005DBA B0FF                <1>     mov al, -1  ;Flush all drive buffers
   243 00005DBC E829190000          <1>     call dosCrit1Enter
   244 00005DC1 E872A9FFFF          <1>     call flushAllBuffersForDrive
   245 00005DC6 E829190000          <1>     call dosCrit1Exit
   246 00005DCB FA                  <1>     cli
   247 00005DCC C605(96040000)00    <1>     mov byte [procExiting], 0    ;We have exited now!
   248 00005DD3 C605(08040000)00    <1>     mov byte [inDOS], 0     ;Exiting DOS now
   249 00005DDA C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Reset error drive
   250 00005DE1 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   251 00005DE8 488B6346            <1>     mov rsp, qword [rbx + psp.rspPtr]   ;Point rsp to the rsp on entry to DOS call
   252                              <1>     ;Dont touch the previous stack pointer thats left on the stack, only
   253                              <1>     ; the ret ptr and the flags
   254 00005DEC B022                <1>     mov al, 22h
   255 00005DEE E843140000          <1>     call muxGetIntVector    ;Get return vector in rbx
   256 00005DF3 48895C2448          <1>     mov qword [rsp + callerFrame.rip], rbx
   257 00005DF8 48C744245802020000  <1>     mov qword [rsp + callerFrame.flags], 0202h  ;Mimic safely DOS's ret flags
   258 00005E01 E8B6180000          <1>     call dosPopRegs  ;Pop the stack frame pointed to by rsp
   259 00005E06 48CF                <1>     iretq   ;rsp ends up on the stack of the last entry into DOS
    46                                  %include "./src/Kernel/MemExec/exec.asm"
     1                              <1> 
     2                              <1> 
     3                              <1> loadExecChild:     ;ah = 4Bh, EXEC
     4                              <1> ;Input: rdx = Ptr to the ASCIIZ string for the file to load. Must include ext.
     5                              <1> ;       rbx = Ptr to the parameter block used for loading
     6                              <1> ;       al = Subfunction:
     7                              <1> ;            00h = Load Program and transfer control to it
     8                              <1> ;            01h = Load Program but do not transfer ctrl to it
     9                              <1> ;            03h = Load overlay (no PSP) -> Blk copy file from filesystem 
    10                              <1> ;      Reserved for future expansion:
    11                              <1> ;            04h = Load in background execution mode (PE only)
    12                              <1> ;            If bit 7 of the subfunction byte is set, we load the corresponding
    13                              <1> ;               function but in 16-bit mode. 
    14                              <1> ;
    15                              <1> ;If the loaded file is not a PE it is assumed to be a COM/RFS file. 
    16                              <1> ; If not EXE, we read the filename extension. If it is RFS, we assign maximum 
    17                              <1> ; memory. If it is COM, we assign only 64Kb to the application.
    18                              <1> 
    19                              <1> ;If AL = 0 and 4 (if DOSMGR present):
    20                              <1> ;            Load Child Program and Xfr control to it
    21                              <1> ; rbx ------>   |-------------------------------|
    22                              <1> ;               |   Ptr to Environment Block    |
    23                              <1> ;               |                               |
    24                              <1> ;               | Can be 0 => Get pointer to    |
    25                              <1> ;               | parent Environment Block      |
    26                              <1> ;               |-------------------------------|
    27                              <1> ;               |   Ptr to Command Line to be   |
    28                              <1> ;               |   placed at PSP + 80h         |
    29                              <1> ;               |-------------------------------|
    30                              <1> ;               |   Ptr to first default FCB    |
    31                              <1> ;               |      to copy to PSP.fcb1      |
    32                              <1> ;               |                               |
    33                              <1> ;               | Should be used to parse the   |
    34                              <1> ;               |  first two command line args  |
    35                              <1> ;               |-------------------------------|
    36                              <1> ;               |   Ptr to second default FCB   |
    37                              <1> ;               |      to copy to PSP.fcb2      |
    38                              <1> ;               |-------------------------------|
    39                              <1> ;
    40                              <1> ;If AL = 1 :
    41                              <1> ;           Load Child Program BUT DO NOT Xfr control to it
    42                              <1> ; rbx ------>   |-------------------------------|
    43                              <1> ;               |         AS IN AL=00H          |
    44                              <1> ;               |-------------------------------|
    45                              <1> ;               |     Initial Value of RSP      |
    46                              <1> ;               |       on program launch       |
    47                              <1> ;               |                               |
    48                              <1> ;               |     This is returned to the   |
    49                              <1> ;               |         caller by DOS         |
    50                              <1> ;               |-------------------------------|
    51                              <1> ;               |     Initial Value of RIP      |
    52                              <1> ;               |       on program launch       |
    53                              <1> ;               |                               |
    54                              <1> ;               |     This is returned to the   |
    55                              <1> ;               |         caller by DOS         |
    56                              <1> ;               |-------------------------------|
    57                              <1> ;
    58                              <1> ;                      !!Important Note!!
    59                              <1> ;   The block pointed to by rbx must reserve the space for 
    60                              <1> ;        those last two qwords on a AL=1 call to EXEC.
    61                              <1> ;
    62                              <1> ;If AL = 3 :
    63                              <1> ;                      Load program overlay
    64                              <1> ; rbx ------>   |-------------------------------|
    65                              <1> ;               |  Pointer to the byte in the   |
    66                              <1> ;               |  prog space to start writing  |
    67                              <1> ;               |        the overlay at.        |
    68                              <1> ;               |-------------------------------|
    69                              <1> ;               | QWORD value used as the base  |
    70                              <1> ;               |   address for relocation      |
    71                              <1> ;               |   computations. In most cases |
    72                              <1> ;               |   should be the same as the   |
    73                              <1> ;               |   load pointer. The desired   |
    74                              <1> ;               |   load address is subtracted  |
    75                              <1> ;               |   from this value to generate |
    76                              <1> ;               |   a valid relocation factor,  |
    77                              <1> ;               |   much like for normal load   |
    78                              <1> ;               |   but here we are controlling |
    79                              <1> ;               |    precisely the factor by    |
    80                              <1> ;               |     which we relocate the     |
    81                              <1> ;               |           symbols.            |
    82                              <1> ;               |  (Called a Relocation Factor) |
    83                              <1> ;               |     Only FOR EXE Overlays.    |
    84                              <1> ;               |    For COM, 0 is sufficient.  |
    85                              <1> ;               |-------------------------------|
    86                              <1> ; For AL = 3: Both pointers must be aligned to section alignment.
    87                              <1> ;   If this is not the case, DOS will round UP both pointers to the 
    88                              <1> ;   section alignment for the file being loaded. 
    89                              <1> ; The overlay will be loaded so that the first byte at the start of the memory
    90                              <1> ; block is the first byte of the first section of the executable. No header
    91                              <1> ; information will be retained. Thus, (for now) overlays cannot be used to export 
    92                              <1> ; functions or import functions from DLLs. Furthermore, it is HIGHLY recommended
    93                              <1> ; that you compile any .EXE overlays to have a section alignment of 1 byte.
    94                              <1> ;
    95                              <1> ; All three will setup both COM and EXE files for whatever purpose. 
    96                              <1> ;           AL = 3 DOES NOT BUILD THE PROGRAM A PSP.
    97                              <1> ;
    98                              <1> ;Start by setting up a stack frame of local vars to keep track of vars in call
    99 00005E08 55                  <1>     push rbp
   100 00005E09 4889E5              <1>     mov rbp, rsp
   101 00005E0C 4881EC80000000      <1>     sub rsp, execFrame_size   ;Make the space pointing at rbp
   102                              <1>     ;Clear up the pointers on the stack frame
   103 00005E13 31C9                <1>     xor ecx, ecx
   104 00005E15 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   105 00005E19 48894DD0            <1>     mov qword [rbp - execFrame.pEnvBase], rcx
   106 00005E1D 48894DC0            <1>     mov qword [rbp - execFrame.pProgBase], rcx
   107 00005E21 48894DC8            <1>     mov qword [rbp - execFrame.pPSPBase], rcx
   108 00005E25 48894D98            <1>     mov qword [rbp - execFrame.pProgEP], rcx
   109                              <1> 
   110 00005E29 B403                <1>     mov ah, execOverlay
   111 00005E2B F605(9E000000)FF    <1>     test byte [dosMgrPresent], -1 ;If bits set, change max to execBkgrnd
   112 00005E32 7402                <1>     jz short .noMulti
   113 00005E34 B404                <1>     mov ah, execBkgrnd
   114                              <1> .noMulti:
   115 00005E36 38E0                <1>     cmp al, ah
   116 00005E38 7615                <1>     jbe .validSubfunction
   117                              <1> .badSubFunction:
   118 00005E3A B801000000          <1>     mov eax, errInvFnc
   119 00005E3F C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   120                              <1> .badExit:
   121 00005E46 4889EC              <1>     mov rsp, rbp
   122 00005E49 5D                  <1>     pop rbp
   123 00005E4A E9E6180000          <1>     jmp extErrExit
   124                              <1> 
   125                              <1> .validSubfunction:
   126 00005E4F 3C02                <1>     cmp al, execInvld
   127 00005E51 74E7                <1>     je .badSubFunction
   128                              <1>     ;Save registers for each function call
   129 00005E53 48895DE0            <1>     mov qword [rbp - execFrame.pParam], rbx
   130 00005E57 488955D8            <1>     mov qword [rbp - execFrame.pProgname], rdx
   131 00005E5B 0FB6C0              <1>     movzx eax, al
   132 00005E5E 488945F8            <1>     mov qword [rbp - execFrame.bSubFunc], rax   ;clear alignment and progHdl
   133 00005E62 4889D7              <1>     mov rdi, rdx
   134 00005E65 E877150000          <1>     call strlen ;Get string length in cx
   135 00005E6A 66894DE8            <1>     mov word [rbp - execFrame.wNameLen], cx   ;Get the string length  
   136                              <1> ;Now open the file we wanna launch
   137 00005E6E 31C0                <1>     xor eax, eax    ;al = 0 => Normal program attributes to search for
   138 00005E70 55                  <1>     push rbp    ;Preserve local frame ptr
   139 00005E71 B923000000          <1>     mov ecx, 23h    ;Tell server to open for exec. No writing or sharing!
   140 00005E76 E882D7FFFF          <1>     call openFileHdl
   141 00005E7B 5D                  <1>     pop rbp
   142 00005E7C 72C8                <1>     jc .badExit ;Exit preserving error code in al
   143                              <1>     ;Now ax has the file handle
   144 00005E7E 668945F0            <1>     mov word [rbp - execFrame.wProgHdl], ax
   145 00005E82 0FB7D8              <1>     movzx ebx, ax   ;Move file handle into bx
   146 00005E85 E895F2FFFF          <1>     call derefSFTPtr    ;And deref it into rdi
   147 00005E8A 0FB75705            <1>     movzx edx, word [rdi + sft.wDeviceInfo] ;Get device word
   148 00005E8E F7C280000000        <1>     test edx, devCharDev
   149 00005E94 7407                <1>     jz .validDiskFile    ;We cannot have a char device
   150 00005E96 B002                <1>     mov al, errFnf
   151 00005E98 E922060000          <1>     jmp .cleanAndFail
   152                              <1> .validDiskFile:
   153 00005E9D 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   154 00005EA5 0F8489000000        <1>     je .loadProgram ;If overlay, skip making an environment block
   155                              <1> ;If we get an instruction to copy parent env, we do that. If the 
   156                              <1> ; parent ptr is a special NULL value, then we leave the NULL value
   157                              <1> ; in place in the execFrame envPtr var. Else, we use the parent
   158                              <1> ; env pointer as the source of our copy.
   159 00005EAB 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam] ;Get params ptr in rdi
   160 00005EAF 488B07              <1>     mov rax, qword [rdi + execProg.pEnv]
   161 00005EB2 4885C0              <1>     test rax, rax   ;Is this 0? (i.e. copy parent env)
   162 00005EB5 7510                <1>     jnz short .copyEnvironmentBlock
   163 00005EB7 488B35(1F040000)    <1>     mov rsi, qword [currentPSP] ;Get current PSP address in rsi
   164 00005EBE 488B463E            <1>     mov rax, qword [rsi + psp.envPtr]   ;Get ptr to env src from parent env
   165 00005EC2 4885C0              <1>     test rax, rax   ;Was parent ptr 0? If so, skip allocing new env.
   166 00005EC5 746D                <1>     jz short .loadProgram ;This is used by the boot process!!
   167                              <1> .copyEnvironmentBlock:
   168 00005EC7 4889C7              <1>     mov rdi, rax    ;Point rdi to the source of the environment
   169                              <1> ;Get the length of the environment
   170 00005ECA B9FF7F0000          <1>     mov ecx, 7fffh  ;32kb limit for env size
   171 00005ECF 31C0                <1>     xor eax, eax
   172 00005ED1 4889FB              <1>     mov rbx, rdi    ;Use rbx as the base ptr of the scan
   173                              <1> .envVerifyLp:
   174 00005ED4 F2AE                <1>     repne scasb   ;Scan for a terminating word of nulls
   175 00005ED6 7531                <1>     jnz short .invalidEnvironmentError
   176 00005ED8 67E32E              <1>     jecxz .invalidEnvironmentError  ;Error if no space for a second null
   177 00005EDB FFC9                <1>     dec ecx
   178 00005EDD AE                  <1>     scasb   ;Check if we have a second byte of 00 (i.e. end of environment)
   179 00005EDE 75F4                <1>     jnz short .envVerifyLp
   180                              <1> 
   181 00005EE0 4829DF              <1>     sub rdi, rbx ;Get offset into block, gives a result less than 7FFFh
   182 00005EE3 57                  <1>     push rdi     ;Save the length of the environment block
   183 00005EE4 81C711000000        <1>     add edi, 11h    ;Add 11 to round up when converting to paragraphs
   184 00005EEA 0FB75DE8            <1>     movzx ebx, word [rbp - execFrame.wNameLen]  ;Get name length
   185 00005EEE 01DF                <1>     add edi, ebx    ;edi has number of bytes to allocate for environment blk
   186 00005EF0 89FB                <1>     mov ebx, edi
   187 00005EF2 C1EB04              <1>     shr ebx, 4  ;Turn bytes needed into paragrapsh
   188 00005EF5 55                  <1>     push rbp
   189 00005EF6 E841F7FFFF          <1>     call allocateMemory
   190 00005EFB 5D                  <1>     pop rbp
   191 00005EFC 59                  <1>     pop rcx ;Pop the length of the environment block into rcx
   192 00005EFD 7314                <1>     jnc short .copyEnvironment
   193                              <1>     ;Fall thru if not enuff memory
   194                              <1> .insufficientMemory:
   195 00005EFF B808000000          <1>     mov eax, errNoMem
   196 00005F04 E9B6050000          <1>     jmp .cleanAndFail
   197                              <1> .invalidEnvironmentError:   ;DO NOT MOVE THIS TO USE JECXZ ABOVE
   198 00005F09 B80A000000          <1>     mov eax, errBadEnv
   199 00005F0E E9AC050000          <1>     jmp .cleanAndFail
   200                              <1> 
   201                              <1> .copyEnvironment:
   202                              <1>     ;rax has the ptr to allocated memory block
   203                              <1>     ;rcx has the number of chars to copy from the source env block
   204 00005F13 4889C7              <1>     mov rdi, rax    ;This is the destination of the copy
   205 00005F16 488945D0            <1>     mov qword [rbp - execFrame.pEnvBase], rax   ;Save the env block in frame
   206 00005F1A 488B75E0            <1>     mov rsi, qword [rbp - execFrame.pParam]
   207 00005F1E 488B36              <1>     mov rsi, qword [rsi + execProg.pEnv]    ;Get in rsi the src of the env
   208 00005F21 F3A4                <1>     rep movsb   ;Copy from rsi to rdi
   209 00005F23 B801000000          <1>     mov eax, 1  ;One additional string and a second null char!
   210 00005F28 66AB                <1>     stosw       ;Away you go!
   211 00005F2A 488B75D8            <1>     mov rsi, qword [rbp - execFrame.pProgname]  ;Get ASCIIZ string for filespec
   212 00005F2E 0FB74DE8            <1>     movzx ecx, word [rbp - execFrame.wNameLen]
   213 00005F32 F3A4                <1>     rep movsb   ;Move the bytes to rdi
   214                              <1> ;Done with the environment... more or less
   215                              <1> .loadProgram:
   216 00005F34 B940000000          <1>     mov ecx, imageDosHdr_size   ;Read the DOS header for the exe file
   217 00005F39 488D15(1E050000)    <1>     lea rdx, exeHdrSpace    ;Read into the SDA area
   218 00005F40 E896050000          <1>     call .readDataFromHdl
   219 00005F45 0F826F050000        <1>     jc .badFmtErr
   220 00005F4B 85C0                <1>     test eax, eax   ;Were zero bytes read?
   221 00005F4D 0F8467050000        <1>     jz .badFmtErr
   222 00005F53 3D40000000          <1>     cmp eax, imageDosHdr_size
   223 00005F58 0F826F030000        <1>     jb .loadCom
   224                              <1> 
   225 00005F5E 66813A4D5A          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature
   226 00005F63 740B                <1>     je .proceedEXE
   227 00005F65 66813A5A4D          <1>     cmp word [rdx + imageDosHdr.e_magic], dosMagicSignature2
   228 00005F6A 0F855D030000        <1>     jne .loadCom    ;If not equal to ZM or MZ, must be a COM file
   229                              <1> .proceedEXE:
   230                              <1>     ;Now we need to read e_lfanew
   231 00005F70 52                  <1>     push rdx    ;Save exeHdrSpace addr on stack
   232 00005F71 8B523C              <1>     mov edx, dword [rdx + imageDosHdr.e_lfanew]
   233 00005F74 8955B0              <1>     mov dword [rbp - execFrame.dCOFFhdr], edx   ;Save this for later
   234 00005F77 31C9                <1>     xor ecx, ecx    ;Officially, need to set ecx to 0
   235 00005F79 30C0                <1>     xor al, al  ;Set file pointer from start of file
   236 00005F7B 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle
   237 00005F7F E8A5D8FFFF          <1>     call lseekHdl   ;Move to that position in the file
   238 00005F84 5A                  <1>     pop rdx ;Get exeHdrSpace address back
   239 00005F85 B918000000          <1>     mov ecx, imageFileHeader_size
   240 00005F8A E84C050000          <1>     call .readDataFromHdl       ;Now read the COFF header
   241 00005F8F 85C0                <1>     test eax, eax   ;Were zero bytes read?
   242 00005F91 0F8423050000        <1>     jz .badFmtErr
   243 00005F97 3D18000000          <1>     cmp eax, imageFileHeader_size
   244 00005F9C 0F8218050000        <1>     jb .badFmtErr
   245                              <1>     ;So now rdx points to the imageFileHeader
   246 00005FA2 813A50450000        <1>     cmp dword [rdx + imageFileHeader.dPESignature], imagePESignature
   247 00005FA8 0F850C050000        <1>     jne .badFmtErr
   248 00005FAE 66817A046486        <1>     cmp word [rdx + imageFileHeader.wMachineType], imageFileMachineAMD64
   249 00005FB4 0F8500050000        <1>     jne .badFmtErr
   250                              <1>     ;Check the binary is executable
   251 00005FBA 0FB74216            <1>     movzx eax, word [rdx + imageFileHeader.wCharacteristics]
   252 00005FBE 66A90200            <1>     test ax, imageFileExecutable
   253 00005FC2 0F84F2040000        <1>     jz .badFmtErr
   254 00005FC8 668945A0            <1>     mov word [rbp - execFrame.wCOFFChars], ax   ;Save this for later!
   255                              <1> 
   256 00005FCC 66817A147000        <1>     cmp word [rdx + imageFileHeader.wSizeOfOptionalHdr], imageFileOptionalHeader_size
   257 00005FD2 0F82E2040000        <1>     jb .badFmtErr   ;We need the full optional header (as normal)
   258                              <1>     ;Now save the number of sections in the the file
   259 00005FD8 0FB74206            <1>     movzx eax, word [rdx + imageFileHeader.wNumberOfSections]
   260 00005FDC 85C0                <1>     test eax, eax   ;If this is 0, what?
   261 00005FDE 0F84D6040000        <1>     jz .badFmtErr
   262 00005FE4 66894598            <1>     mov word [rbp - execFrame.wNumSeg], ax  ;Save this value for later!
   263                              <1>     ;Now load Optional header, file ptr points to it so all good!
   264 00005FE8 B970000000          <1>     mov ecx, imageFileOptionalHeader_size
   265                              <1>     ;rdx points to exeHdrSpace
   266 00005FED E8E9040000          <1>     call .readDataFromHdl
   267 00005FF2 85C0                <1>     test eax, eax   ;Were zero bytes read?
   268 00005FF4 0F84C0040000        <1>     jz .badFmtErr
   269 00005FFA 3D70000000          <1>     cmp eax, imageFileOptionalHeader_size
   270 00005FFF 0F82B5040000        <1>     jb .badFmtErr
   271                              <1>     ;Now File Ptr points to data dirs, not an issue
   272 00006005 81459070000000      <1>     add dword [rbp - execFrame.dFilePtr], imageFileOptionalHeader_size
   273                              <1>     ;We load the program in, one section at a time, reading section headers in
   274                              <1>     ; one at a time to the section header internal buffer.
   275 0000600C 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   276 00006014 7463                <1>     je .exeOvlySkipAlloc    ;DONT allocate memory if loading an overlay
   277 00006016 8B1D(56050000)      <1>     mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfImage]
   278 0000601C 488B05(6E050000)    <1>     mov rax, qword [exeHdrSpace + imageFileOptionalHeader.qSizeOfStackCommit]
   279 00006023 4885C0              <1>     test rax, rax
   280 00006026 750A                <1>     jnz .notDefaultStackAlloc
   281 00006028 48B800000400000000- <1>     mov rax, 40000h ;256Kb stack default
   281 00006031 00                  <1>
   282                              <1> .notDefaultStackAlloc:
   283 00006032 01C3                <1>     add ebx, eax    ;Add stack allocation
   284 00006034 81C300010000        <1>     add ebx, psp_size   ;Add space for the PSP to the allocation too
   285                              <1>     ;Add also one section alignment as it is likely that our arena won't be 
   286                              <1>     ; section aligned and so we will need to align before reading, to 
   287                              <1>     ; guaranee that we will have space for the EXE header to be read in later.
   288 0000603A 031D(3E050000)      <1>     add ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   289 00006040 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Save the program size
   290 00006043 81C311000000        <1>     add ebx, 11h
   291 00006049 C1EB04              <1>     shr ebx, 4  ;Turn into paragraphs
   292 0000604C 55                  <1>     push rbp
   293 0000604D E8EAF5FFFF          <1>     call allocateMemory ;Get in rax, ptr to memory block
   294 00006052 5D                  <1>     pop rbp
   295 00006053 0F82A6FEFFFF        <1>     jc .insufficientMemory  ;Unless not enough, sorry buddy!
   296 00006059 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax  ;Save ptr here, psp will go here
   297 0000605D 480500010000        <1>     add rax, psp_size
   298 00006063 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax  ;First byte of exe hdr goes here
   299                              <1>     ;Finally, just check that we have some code to execute. 
   300                              <1>     ;Empty code sections are NOT allowed if executing. Only for overlays
   301 00006067 813D(22050000)0000- <1>     cmp dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfCode], 0
   301 0000606F 0000                <1>
   302 00006071 0F8443040000        <1>     je .badFmtErr   ;If no bytes, exit error
   303 00006077 EB0B                <1>     jmp short .exeProceed1
   304                              <1> .exeOvlySkipAlloc:
   305 00006079 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   306 0000607D 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]    ;Get the load addr
   307 00006080 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   308                              <1> .exeProceed1:
   309                              <1> ;===========================================================================
   310                              <1>     ;The below blocks are being kept because they can be turned on later
   311                              <1>     ; to change this exe loader to force section alignment of the 
   312                              <1>     ; base load address. It appears there is no need to enforce that the 
   313                              <1>     ; base load address be section aligned, but individual sections need
   314                              <1>     ; to adhere to the section alignment requirements thereafter. 
   315                              <1>     ;Finally, the pProgBase gets rescaled so that the first byte of the 
   316                              <1>     ; first section gets places at the load address and not at some
   317                              <1>     ; offset from it (as is usually the case, offset 1000h).
   318                              <1> ;===========================================================================
   319                              <1>     ;=======================================================================
   320                              <1>     ;Now we align the progBase to full header size aligned to the next page
   321                              <1>     ;mov ebx, dword [exeHdrSpace + imageFileOptionalHeader.dSizeOfHeaders]
   322                              <1>     ;add rax, rbx    ;Add this offset where the header should go in future
   323                              <1>     ;=======================================================================
   324                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   325                              <1>     ;It appears that the load address does NOT need to be aligned at all xD
   326                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   327                              <1>     ;Now we section pad. Once aligned, that is the program base address!
   328                              <1>     ;push rax
   329                              <1>     ;mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   330                              <1>     ;dec ecx ;Turn into a mask
   331                              <1>     ;and rax, rcx    ;Compute ptr modulo mask
   332                              <1>     ;inc ecx
   333                              <1>     ;sub rcx, rax
   334                              <1>     ;pop rdi
   335                              <1>     ;xor eax, eax
   336                              <1>     ;rep stosb
   337                              <1>     ;mov qword [rbp - execFrame.pProgBase], rdi
   338                              <1>     ;ooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo
   339                              <1> 
   340                              <1>     ;So now copy one section at a time, read section header in
   341                              <1>     ;File pointer points to the directory table, so skip that
   342 00006084 8B15(8A050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   343                              <1>     ;Load however many directories we have into place
   344                              <1>     ;Each directory is 8 bytes, so multiply edx by 8
   345 0000608A C1E203              <1>     shl edx, 3  ;edx has number of bytes to move file pointer forwards by
   346 0000608D 31C9                <1>     xor ecx, ecx
   347 0000608F 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   348 00006093 B001                <1>     mov al, 1   ;Move handle forwards from current position
   349 00006095 E88FD7FFFF          <1>     call lseekHdl   ;Move the handle forwards by that many bytes
   350                              <1>     ;eax has pointer location after adjustment
   351 0000609A 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;We have moved to section table
   352                              <1>     ;File now points to start of Section headers. Read first header in.
   353                              <1>     ;USE ECX AS COUNTER FOR HEADERS LEFT TO PROCESS
   354 0000609D 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Move prog base in rdi
   355 000060A1 0FB74D98            <1>     movzx ecx, word [rbp - execFrame.wNumSeg]   ;Get number of segments in ecx
   356 000060A5 31F6                <1>     xor esi, esi    ;Use as an indicator for the first data segment. 
   357 000060A7 488975A8            <1>     mov qword [rbp - execFrame.bSegCount], rsi  ;Clear the segment counter
   358                              <1> .loadLp:
   359 000060AB 51                  <1>     push rcx    ;Save # of segments left on stack
   360 000060AC 57                  <1>     push rdi    ;Save the current buffer ptr here
   361 000060AD B928000000          <1>     mov ecx, imageSectionHdr_size
   362 000060B2 488D15(9E050000)    <1>     lea rdx, sectHdr    ;Read section headers here
   363 000060B9 E81D040000          <1>     call .readDataFromHdl
   364 000060BE 5F                  <1>     pop rdi
   365 000060BF 59                  <1>     pop rcx
   366 000060C0 85C0                <1>     test eax, eax
   367 000060C2 0F84F2030000        <1>     jz .badFmtErr
   368 000060C8 3D28000000          <1>     cmp eax, imageSectionHdr_size
   369 000060CD 0F85E7030000        <1>     jne .badFmtErr
   370                              <1>     ;File ptr moved forwards to next section header
   371 000060D3 81459028000000      <1>     add dword [rbp - execFrame.dFilePtr], imageSectionHdr_size
   372                              <1>     ;Section header read, now we load section into memory
   373                              <1>     ;Move file ptr to data location
   374 000060DA 8B15(B2050000)      <1>     mov edx, dword [sectHdr + imageSectionHdr.dPointerToRawData] ;Data File ptr
   375 000060E0 85D2                <1>     test edx, edx
   376 000060E2 744B                <1>     jz short .skipRawPtrMove
   377 000060E4 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get the handle
   378 000060E8 31C0                <1>     xor eax, eax    ;Seek from start of file
   379 000060EA 51                  <1>     push rcx
   380 000060EB 57                  <1>     push rdi
   381 000060EC E838D7FFFF          <1>     call lseekHdl
   382 000060F1 5F                  <1>     pop rdi
   383 000060F2 59                  <1>     pop rcx
   384                              <1>     ;Is this a overlay load?
   385 000060F3 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   386 000060FB 7532                <1>     jne short .skipRawPtrMove
   387                              <1>     ;Here we rescale to put the first byte at pLoadLoc and use the 
   388                              <1>     ; rescale value against RelocFct to compute the qRelocVal for later
   389                              <1>     ;Is this is the first segment with data being read into memory?
   390 000060FD 48FF45A8            <1>     inc qword [rbp - execFrame.bSegCount]
   391 00006101 48817DA801000000    <1>     cmp qword [rbp - execFrame.bSegCount], 1 
   392 00006109 7524                <1>     jne short .skipRawPtrMove   ;If not, skip
   393                              <1>     ;Now rebase the program to point the first byte of the first
   394                              <1>     ; section at the ProgBase.
   395 0000610B 51                  <1>     push rcx
   396 0000610C 57                  <1>     push rdi
   397 0000610D 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Get the load address
   398 00006111 8B0D(AA050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualAddress]
   399 00006117 4829CF              <1>     sub rdi, rcx    ;Rebase by offset of the first section
   400 0000611A 48897DC0            <1>     mov qword [rbp - execFrame.pProgBase], rdi 
   401 0000611E 488B7DE0            <1>     mov rdi, qword [rbp - execFrame.pParam]
   402 00006122 488B7F08            <1>     mov rdi, qword [rdi + loadOvly.qRelocFct]   ;Get the reload factor
   403 00006126 4829CF              <1>     sub rdi, rcx    ;Now rescale the relocation factor by the same amount
   404 00006129 48897D88            <1>     mov qword [rbp - execFrame.qRelocVal], rdi  ;Now store this value for later
   405 0000612D 5F                  <1>     pop rdi
   406 0000612E 59                  <1>     pop rcx
   407                              <1> .skipRawPtrMove:
   408 0000612F 51                  <1>     push rcx
   409 00006130 31FF                <1>     xor edi, edi
   410 00006132 8B3D(AA050000)      <1>     mov edi, dword [sectHdr + imageSectionHdr.dVirtualAddress]  ;Get where it should go in memory, offset from image base
   411 00006138 48037DC0            <1>     add rdi, qword [rbp - execFrame.pProgBase]  ;Turn into offset from progbase
   412                              <1>     ;If a section has a virtual address outside of the allocation arena
   413                              <1>     ; refuse to load it IF it contains no BSS, Data or Code and skip to the 
   414                              <1>     ; next section.
   415 0000613C 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   416 00006140 4885D2              <1>     test rdx, rdx   ;If this is 0 (as in the case of overlay)...
   417 00006143 7432                <1>     jz short .okToLoad  ;skip this as it is assumed there is enough space!
   418 00006145 4881EA10000000      <1>     sub rdx, mcb_size   ;Go back a unit of mcb
   419 0000614C 31C9                <1>     xor ecx, ecx
   420 0000614E 8B4A09              <1>     mov ecx, dword [rdx + mcb.blockSize]
   421 00006151 48C1E104            <1>     shl rcx, 4  ;Convert to bytes (multiply by 16)
   422 00006155 4881C210000000      <1>     add rdx, mcb_size   ;Go to the first byte of the mcb
   423 0000615C 4801CA              <1>     add rdx, rcx    ;Now rdx points to the first byte outside the arena
   424 0000615F 4839FA              <1>     cmp rdx, rdi    ;If rdx > rdi, we are ok
   425 00006162 7713                <1>     ja short .okToLoad
   426                              <1>     ;Now check if this is a useless section. If so, we don't load it at all
   427                              <1> 
   428                              <1>     ;V-0000000000-EARMARK FOR REMOVAL-0000000000-V
   429 00006164 F705(C2050000)E000- <1>     test dword [sectHdr + imageSectionHdr.dCharacteristics], imgScnCntBSS | imgScnCntCode | imgScnCntData
   429 0000616C 0000                <1>
   430 0000616E 0F8546030000        <1>     jnz .badFmtErr  ;If any of these bits set, error out
   431                              <1>     ;^-0000000000-EARMARK FOR REMOVAL-0000000000-^
   432                              <1> 
   433                              <1>     ;Else, just skip this section, goto next section
   434 00006174 59                  <1>     pop rcx
   435 00006175 EB3F                <1>     jmp short .gotoNextSection
   436                              <1> .okToLoad:
   437 00006177 8B0D(A6050000)      <1>     mov ecx, dword [sectHdr + imageSectionHdr.dVirtualSize]   ;Get # of bytes to read
   438 0000617D 4889FA              <1>     mov rdx, rdi    ;Get ptr to buffer in rdx
   439 00006180 57                  <1>     push rdi    ;Save section in memory locally
   440 00006181 E855030000          <1>     call .readDataFromHdl
   441 00006186 5F                  <1>     pop rdi
   442 00006187 59                  <1>     pop rcx     ; Matches push after skipRawPtrMove
   443 00006188 0F822C030000        <1>     jc .badFmtErr
   444                              <1>     ;Don't check for a zero section read as empty sections may be present!
   445 0000618E 3B05(A6050000)      <1>     cmp eax, dword [sectHdr + imageSectionHdr.dVirtualSize]
   446 00006194 0F8520030000        <1>     jne .badFmtErr
   447                              <1>     ;Data read ok, now fill in any zeros needed
   448 0000619A 4801C7              <1>     add rdi, rax    ;Move rdi forwards by that amount at least
   449                              <1> 
   450 0000619D 51                  <1>     push rcx
   451                              <1>     ;Here do section padding
   452 0000619E 4889F8              <1>     mov rax, rdi    ;Get the current address
   453 000061A1 8B0D(3E050000)      <1>     mov ecx, dword [exeHdrSpace + imageFileOptionalHeader.dSectionAlignment]
   454 000061A7 FFC9                <1>     dec ecx ;Turn into a mask
   455 000061A9 4821C8              <1>     and rax, rcx    ;Compute ptr modulo mask
   456 000061AC FFC1                <1>     inc ecx
   457 000061AE 4829C1              <1>     sub rcx, rax
   458 000061B1 31C0                <1>     xor eax, eax
   459 000061B3 F3AA                <1>     rep stosb
   460 000061B5 59                  <1>     pop rcx
   461                              <1> .gotoNextSection:
   462 000061B6 FFC9                <1>     dec ecx ;Decrement our section counter
   463 000061B8 7419                <1>     jz short .doExeFixups
   464                              <1>     ;Read next section header in here
   465 000061BA 51                  <1>     push rcx
   466 000061BB 57                  <1>     push rdi
   467 000061BC 30C0                <1>     xor al, al  ;Move rel start of file
   468 000061BE 8B5590              <1>     mov edx, dword [rbp - execFrame.dFilePtr]
   469 000061C1 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl] ;Get the file handle
   470 000061C5 31C9                <1>     xor ecx, ecx
   471 000061C7 E85DD6FFFF          <1>     call lseekHdl
   472 000061CC 5F                  <1>     pop rdi
   473 000061CD 59                  <1>     pop rcx
   474 000061CE E9D8FEFFFF          <1>     jmp .loadLp
   475                              <1> .doExeFixups:
   476                              <1> ;Here we fixup addresses if needed
   477                              <1> ;If the program is loaded at its desired location never need to relocate.
   478                              <1> ;Else we need to have a .reloc section to see if we need to do relocations. 
   479                              <1> ;   If the program has had it's .reloc section stripped by the linker
   480                              <1> ;       or has no .reloc directory, we fail
   481                              <1> ;   Else, we read the .reloc directory in. It most likely will have no 
   482                              <1> ;       relocations anyway.
   483                              <1> 
   484                              <1> ;If program base = desired load, skip relocs
   485 000061D3 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]
   486 000061D7 483B15(36050000)    <1>     cmp rdx, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   487 000061DE 0F84CA000000        <1>     je .exeComplete
   488                              <1> ;If program has had relocs stripped, fail
   489 000061E4 0FB745A0            <1>     movzx eax, word [rbp - execFrame.wCOFFChars]
   490 000061E8 66A90100            <1>     test ax, imageFileRelocsStripped
   491 000061EC 0F85C8020000        <1>     jnz .badFmtErr
   492                              <1> ;If program has no .reloc section, fail
   493 000061F2 8B15(8A050000)      <1>     mov edx, dword [exeHdrSpace + imageFileOptionalHeader.dNumberOfRvaAndSizes]
   494 000061F8 81FA06000000        <1>     cmp edx, 6  ;Does .reloc exist (6th directory entry)
   495 000061FE 0F82B6020000        <1>     jb .badFmtErr ;Need relocs but no .reloc directory exists
   496                              <1> ;Now we get the reloc section
   497 00006204 8B55B0              <1>     mov edx, dword [rbp - execFrame.dCOFFhdr]
   498 00006207 81C2B0000000        <1>     add edx, imageFileHeader_size + imageFileOptionalHeader_size + 5*8
   499                              <1>     ;eax now points to position in file of directory entry for reloc
   500 0000620D 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]  ;Get handle in bx
   501 00006211 31C0                <1>     xor eax, eax
   502 00006213 E811D6FFFF          <1>     call lseekHdl   ;Move handle there in file
   503 00006218 894590              <1>     mov dword [rbp - execFrame.dFilePtr], eax   ;Save table offset here
   504 0000621B B908000000          <1>     mov ecx, imageDataDirectory_size
   505                              <1>     ;Read 8 bytes into sectHdr space
   506 00006220 488D15(9E050000)    <1>     lea rdx, sectHdr
   507 00006227 E8AF020000          <1>     call .readDataFromHdl   ;Read this directory entry in
   508 0000622C 85C0                <1>     test eax, eax
   509 0000622E 0F8486020000        <1>     jz .badFmtErr
   510 00006234 39C8                <1>     cmp eax, ecx
   511 00006236 0F857E020000        <1>     jne .badFmtErr
   512                              <1>     ;Now we have the offset in memory if the file was loaded at imageBase
   513 0000623C 8B35(9E050000)      <1>     mov esi, dword [sectHdr + imageDataDirectory.virtualAddress]
   514 00006242 85F6                <1>     test esi, esi   ;If there are no relocations, skip this...
   515 00006244 7468                <1>     jz .exeComplete   ;... including if overlay
   516 00006246 480375C0            <1>     add rsi, qword [rbp - execFrame.pProgBase]
   517                              <1>     ;Now rsi points to where in memory the relocation data table is
   518                              <1>     ;Now compute the relocation factor =
   519                              <1>     ;   Difference from the load address and prefered
   520 0000624A 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   521 0000624E 482B05(36050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase] 
   522 00006255 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   523 0000625D 750F                <1>     jne short .notOverlayReloc
   524                              <1>     ;For overlays, we use the relocation factor as the base of computation.
   525                              <1>     ;Thus now the relocation factor becomes the ProgBase.
   526                              <1>     ;This should be the same as ProgBase anyway for overlays.
   527 0000625F 488B4588            <1>     mov rax, qword [rbp - execFrame.qRelocVal]   ;Get the overlay reloc factor
   528 00006263 482B05(36050000)    <1>     sub rax, qword [exeHdrSpace + imageFileOptionalHeader.qImageBase]
   529                              <1>     ;Store this as the overlay program base
   530 0000626A 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   531                              <1> .notOverlayReloc:
   532 0000626E 4889C3              <1>     mov rbx, rax    ;Save this relocation factor in rbx
   533                              <1>     ;rsi points to relocation data table in memory
   534 00006271 8B0D(A2050000)      <1>     mov ecx, dword [sectHdr + imageDataDirectory.size]  ;Get number of words
   535 00006277 85C9                <1>     test ecx, ecx    ;If no relocations, skip
   536 00006279 7433                <1>     jz .exeComplete
   537                              <1>     ;rsi points to the first base relocation block. The relocations begin
   538                              <1>     ; after the first block
   539                              <1>     ;ecx has the number of base relocation blocks to process.
   540                              <1> .nextBlock:
   541 0000627B 51                  <1>     push rcx    ;Reuse rcx as a counter for the current page
   542 0000627C 8B06                <1>     mov eax, dword [rsi + baseRelocBlock.pageRVA]   ;Get the page rva
   543 0000627E 488B7DC0            <1>     mov rdi, qword [rbp - execFrame.pProgBase]  ;Point to start of program
   544 00006282 4801C7              <1>     add rdi, rax    ;Add this page offset to rdi to goto correct page for reloc
   545 00006285 8B4E04              <1>     mov ecx, dword [rsi + baseRelocBlock.size]  ;Get number of bytes in block
   546 00006288 67E31E              <1>     jecxz .blockDone    
   547 0000628B 81E908000000        <1>     sub ecx, 8
   548 00006291 4881C608000000      <1>     add rsi, 8  ;Go to the start of the directory data
   549 00006298 D1E9                <1>     shr ecx, 1  ;Get number of directories = # of relocs to do
   550                              <1> .blockNotDone:
   551 0000629A 66AD                <1>     lodsw   ;Get the next page offset word
   552 0000629C 25FF0F0000          <1>     and eax, 00000FFFh  ;Save bottom 12 bits
   553                              <1>     ;rdi points to base, rax give offset into 4Kb page
   554 000062A1 48011C07            <1>     add qword [rdi + rax], rbx    ;Relocation factor was saved in rbx
   555 000062A5 FFC9                <1>     dec ecx
   556 000062A7 75F1                <1>     jnz .blockNotDone
   557                              <1> .blockDone:
   558 000062A9 59                  <1>     pop rcx
   559 000062AA FFC9                <1>     dec ecx
   560 000062AC 75CD                <1>     jnz .nextBlock
   561                              <1> .exeComplete:
   562 000062AE 8B05(2E050000)      <1>     mov eax, dword [exeHdrSpace + imageFileOptionalHeader.dAddressOfEntryPoint]
   563                              <1>     ;Now get EP relative to the (rescaled) load address.
   564 000062B4 480345C0            <1>     add rax, qword [rbp - execFrame.pProgBase]
   565 000062B8 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   566 000062BC FF15(AF000000)      <1>     call qword [registerDLL]    ;Now we register the DLL and any import/exports
   567 000062C2 0F82F2010000        <1>     jc .badFmtErr   ;If this errors out for some reason, quit loading EXE
   568 000062C8 E9CC000000          <1>     jmp .buildChildPSP
   569                              <1> .loadCom:
   570                              <1>     ;File is open here, so just read the file into memory. 
   571                              <1>     ;The file cannot exceed 64Kb in size.
   572                              <1>     ;Allocate 64Kb of memory, or as much as we can
   573 000062CD 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   574 000062D5 745C                <1>     je .comOverlay
   575 000062D7 BBF0FF0000          <1>     mov ebx, 0FFF0h ;64Kb - 16 bytes, give me FFF0h bytes
   576 000062DC 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx
   577 000062DF C1EB04              <1>     shr ebx, 4      ;Convert to paragraphs
   578 000062E2 55                  <1>     push rbp
   579 000062E3 E854F3FFFF          <1>     call allocateMemory
   580 000062E8 5D                  <1>     pop rbp
   581 000062E9 7355                <1>     jnc .comallocOk
   582 000062EB 3C08                <1>     cmp al, errNoMem
   583 000062ED 0F85CC010000        <1>     jne .cleanAndFail   ;Propagate the proper error if not a lack of memory
   584                              <1>     ;rbx should have the amount available in paragraphs
   585 000062F3 09DB                <1>     or ebx, ebx ;Clear the upper dword
   586 000062F5 48C1E304            <1>     shl rbx, 4
   587                              <1>     ;We check if this value is psp_size more than filesize
   588 000062F9 53                  <1>     push rbx    ;Save new minimum size
   589 000062FA B802000000          <1>     mov eax, 2    ;Reposition to end of file
   590 000062FF 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   591 00006303 31D2                <1>     xor edx, edx    ;Go to end of file
   592 00006305 E81FD5FFFF          <1>     call lseekHdl
   593                              <1>     ;eax has file size
   594 0000630A 5B                  <1>     pop rbx ;Get back max alloc size
   595 0000630B 89DA                <1>     mov edx, ebx    ;Save in max alloc in edx temporarily
   596 0000630D 29C2                <1>     sub edx, eax
   597 0000630F 81FA00010000        <1>     cmp edx, psp_size   ;If filesize - memory space is < psp_size...
   598 00006315 0F82E4FBFFFF        <1>     jb .insufficientMemory   ;Fail
   599 0000631B 895DB8              <1>     mov dword [rbp - execFrame.dProgSize], ebx  ;Store progsize
   600 0000631E C1EB04              <1>     shr ebx, 4  ;Convert to paragraphs
   601 00006321 55                  <1>     push rbp
   602 00006322 E815F3FFFF          <1>     call allocateMemory
   603 00006327 5D                  <1>     pop rbp
   604 00006328 0F8291010000        <1>     jc .cleanAndFail
   605 0000632E E90D000000          <1>     jmp .comallocOk
   606                              <1> .comOverlay:
   607                              <1>     ;Here we simply read the file into the buffer provided
   608 00006333 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam]
   609 00006337 488B03              <1>     mov rax, qword [rbx + loadOvly.pLoadLoc]
   610 0000633A 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   611 0000633E EB0A                <1>     jmp short .comRead
   612                              <1> .comallocOk:
   613                              <1>     ;rax should point to the first byte
   614 00006340 488945C8            <1>     mov qword [rbp - execFrame.pPSPBase], rax
   615 00006344 480500010000        <1>     add rax, psp_size
   616                              <1> .comRead:
   617 0000634A 488945C0            <1>     mov qword [rbp - execFrame.pProgBase], rax
   618                              <1> 
   619 0000634E B802000000          <1>     mov eax, 2    ;Reposition to end of file
   620 00006353 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   621 00006357 31D2                <1>     xor edx, edx    ;Go to end of file
   622 00006359 E8CBD4FFFF          <1>     call lseekHdl
   623                              <1>     ;eax has filesize now
   624 0000635E 50                  <1>     push rax    ;Save filesize
   625 0000635F 31C0                <1>     xor eax, eax    ;Reposition to start of file
   626 00006361 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   627 00006365 31D2                <1>     xor edx, edx    ;Go to start of file
   628 00006367 E8BDD4FFFF          <1>     call lseekHdl
   629 0000636C 59                  <1>     pop rcx ;Get the filesize in rcx (# of bytes to read)
   630 0000636D 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   631 00006375 7411                <1>     je .comOverlay2
   632                              <1>     ;Now we check if the space we have available is sufficient to load
   633                              <1>     ; the program. Skipped if an overlay being loaded
   634                              <1>     ;ecx = # File size
   635 00006377 8B55B8              <1>     mov edx, dword [rbp - execFrame.dProgSize]  ;Get the alloc space size
   636 0000637A 81EA00010000        <1>     sub edx, psp_size
   637 00006380 39CA                <1>     cmp edx, ecx    ;Do we have space for the PSP and program?
   638 00006382 0F8277FBFFFF        <1>     jb .insufficientMemory
   639                              <1> .comOverlay2:
   640 00006388 488B55C0            <1>     mov rdx, qword [rbp - execFrame.pProgBase]  ;Buffer to read into
   641 0000638C E84A010000          <1>     call .readDataFromHdl   ;Read from the file handle
   642 00006391 488B45C0            <1>     mov rax, qword [rbp - execFrame.pProgBase]
   643 00006395 48894598            <1>     mov qword [rbp - execFrame.pProgEP], rax
   644                              <1> .buildChildPSP:
   645                              <1>     ;We can close handle now
   646 00006399 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   647 0000639D 55                  <1>     push rbp
   648 0000639E E89CD3FFFF          <1>     call closeFileHdl   ;Close the file
   649 000063A3 5D                  <1>     pop rbp
   650                              <1> 
   651                              <1>     ;Only build a PSP if not in overlay mode. If in overlay mode skip
   652 000063A4 48817DF803000000    <1>     cmp qword [rbp - execFrame.bSubFunc], execOverlay
   653 000063AC 0F84E5000000        <1>     je .overlayExit
   654                              <1>     ;Now build the PSP
   655 000063B2 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]
   656 000063B5 488B55C8            <1>     mov rdx, qword [rbp - execFrame.pPSPBase]
   657 000063B9 52                  <1>     push rdx
   658 000063BA 55                  <1>     push rbp
   659 000063BB E8DCF7FFFF          <1>     call createPSP
   660 000063C0 5D                  <1>     pop rbp
   661 000063C1 5A                  <1>     pop rdx
   662                              <1> 
   663                              <1> ;Now copy the environment block ptr over. 
   664                              <1> ;Stores the null ptr that is our pointer (special init case)
   665 000063C2 488B5DD0            <1>     mov rbx, qword [rbp - execFrame.pEnvBase]
   666                              <1> ;    test rbx, rbx
   667                              <1> ;    jz short .skipEnvCopy
   668 000063C6 48895A3E            <1>     mov qword [rdx + psp.envPtr], rbx
   669                              <1> ;.skipEnvCopy:
   670                              <1>     ;Now set Current PSP to our PSP and set current DTA to command line
   671 000063CA 488915(1F040000)    <1>     mov qword [currentPSP], rdx
   672 000063D1 E814130000          <1>     call dosCrit1Enter
   673 000063D6 E827010000          <1>     call .setPSPArenaOwner  ;Set the new PSP as the owner of the arenas 
   674                              <1> 
   675 000063DB 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta] ;Point to default dta...
   676 000063E2 48893D(17040000)    <1>     mov qword [currentDTA], rdi ;and set it!
   677                              <1> 
   678                              <1>     ;Now We need to copy over the command line and fcbs to the PSP
   679                              <1>     ; and set FS to point to the PSP
   680 000063E9 488B5DE0            <1>     mov rbx, qword [rbp - execFrame.pParam] ;Get the paramter block ptr in rbx
   681                              <1> 
   682 000063ED 488D7A5C            <1>     lea rdi, qword [rdx + psp.fcb1]
   683 000063F1 B925000000          <1>     mov ecx, fcb_size
   684 000063F6 488B7310            <1>     mov rsi, qword [rbx + execProg.pfcb1]
   685 000063FA 8A06                <1>     mov al, byte [rsi + fcb.driveNum]   ;Get FCB1's drive number in al
   686 000063FC F3A4                <1>     rep movsb   ;Copy fcb 1 over
   687 000063FE 488D7A6C            <1>     lea rdi, qword [rdx + psp.fcb2]
   688 00006402 B925000000          <1>     mov ecx, fcb_size
   689 00006407 488B7318            <1>     mov rsi, qword [rbx + execProg.pfcb2]
   690 0000640B 8A26                <1>     mov ah, byte [rsi + fcb.driveNum]   ;Get FCB2's drive number in ah
   691 0000640D F3A4                <1>     rep movsb   ;Copy fcb 2 over
   692 0000640F 488B7308            <1>     mov rsi, qword [rbx + execProg.pCmdLine]
   693 00006413 488DBA80000000      <1>     lea rdi, qword [rdx + psp.dta]
   694 0000641A B980000000          <1>     mov ecx, 80h
   695 0000641F F3A4                <1>     rep movsb   ;Copy the command line over (terminated by 0Dh)
   696                              <1> 
   697 00006421 89C3                <1>     mov ebx, eax  ;Save the fcb drive numbers in bx
   698 00006423 4889D7              <1>     mov rdi, rdx  ;Point RDI to PSP
   699                              <1> 
   700                              <1>     ;Check FCB drive numbers are valid. Return FFh if not
   701 00006426 88D8                <1>     mov al, bl
   702 00006428 30DB                <1>     xor bl, bl
   703 0000642A E8590E0000          <1>     call getCDSNotJoin
   704 0000642F 7302                <1>     jnc .drive1Ok
   705 00006431 B3FF                <1>     mov bl, -1
   706                              <1> .drive1Ok:
   707 00006433 88F8                <1>     mov al, bh
   708 00006435 30FF                <1>     xor bh, bh
   709 00006437 E84C0E0000          <1>     call getCDSNotJoin
   710 0000643C 7302                <1>     jnc .drive2Ok
   711 0000643E B7FF                <1>     mov bh, -1
   712                              <1> .drive2Ok:
   713                              <1>     ;bx has validity flags for the two fcb drives, undocumented!!
   714                              <1>     ;rdi has pointer to psp
   715 00006440 8B75B8              <1>     mov esi, dword [rbp - execFrame.dProgSize]  ;Get program size
   716                              <1>     ;Add psp base (rdi) to prog size to get the last byte of the allocation
   717 00006443 488D743EF8          <1>     lea rsi, qword [rsi + rdi - 8]    ;Get new rsp in rsi (last qword of alloc)
   718 00006448 48B8F8FFFFFFFFFFFF- <1>     mov rax, ~7     ;Clear the bottom 3 bits
   718 00006451 FF                  <1>
   719 00006452 4821C6              <1>     and rsi, rax    ;To align downwards
   720                              <1>     ;We align stack to qword. x64 ABI requires paragraph alignment.
   721                              <1>     ;That is the job of the runtime to handle.
   722                              <1> ;Registers carrying data at this point:
   723                              <1> ;bx = FCB drive statuses
   724                              <1> ;rsi = Stack Base
   725                              <1> ;rbp = execFrame
   726 00006455 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   727 00006459 750B                <1>     jne short .noBg
   728                              <1>     ;Get termination mode in ecx before xfring control to dosmgr
   729 0000645B 56                  <1>     push rsi
   730 0000645C E8030E0000          <1>     call getUserRegs
   731 00006461 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]  ;Get termination mode
   732 00006465 5E                  <1>     pop rsi
   733                              <1> .noBg:
   734 00006466 FF15(9F000000)      <1>     call qword [launchTask]
   735 0000646C 7251                <1>     jc short .cleanAndFail
   736                              <1> ;Final step: Transfer control
   737 0000646E 807DF800            <1>     cmp byte [rbp - execFrame.bSubFunc], execLoadGo
   738 00006472 742C                <1>     je .xfrProgram
   739 00006474 807DF804            <1>     cmp byte [rbp - execFrame.bSubFunc], execBkgrnd
   740 00006478 741D                <1>     je .overlayExit ;Skip the below for background tasks
   741 0000647A 488B4598            <1>     mov rax, qword [rbp - execFrame.pProgEP]
   742 0000647E 488B55E0            <1>     mov rdx, qword [rbp - execFrame.pParam]
   743 00006482 48894228            <1>     mov qword [rdx + loadProg.initRIP], rax
   744 00006486 0FB7C3              <1>     movzx eax, bx   ;Return fcb drive status
   745 00006489 4881EE08000000      <1>     sub rsi, 8  ;Now go down one so that we can pop the AX value from the stack
   746 00006490 488906              <1>     mov qword [rsi], rax    ;Store the FCB status on the top of stack for AH=01h
   747 00006493 48897220            <1>     mov qword [rdx + loadProg.initRSP], rsi
   748                              <1> .overlayExit:
   749 00006497 4889EC              <1>     mov rsp, rbp    ;Reset the stack to its position
   750 0000649A 5D                  <1>     pop rbp ;Point rsp to the return address
   751 0000649B E987120000          <1>     jmp extGoodExit ;And return!
   752                              <1> .xfrProgram:
   753 000064A0 FA                  <1>     cli
   754 000064A1 4889F4              <1>     mov rsp, rsi    ;Set rsp to initRSP value
   755 000064A4 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Clear all inDosnessness
   756 000064AB FB                  <1>     sti
   757                              <1> 
   758 000064AC 57                  <1>     push rdi    ;Push &psp[0] onto the stack to allow for ret exit
   759 000064AD FF7598              <1>     push qword [rbp - execFrame.pProgEP]
   760 000064B0 4989F8              <1>     mov r8, rdi ;Move psp base into r8 and r9
   761 000064B3 4989F9              <1>     mov r9, rdi
   762 000064B6 0FB7C3              <1>     movzx eax, bx   ;ax must contain validity of the two FCB drives
   763                              <1>     return  ;Return to child task
    13                              <2> %%_ret:
    14 000064B9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   764                              <1> ;r8 is guaranteed to have a copy of the PSP.
   765                              <1> ;ax is guaranteed to have the validity signatures in AH and AL.
   766                              <1> ;Everything else is optional and potentially changable at a later stage
   767                              <1> 
   768                              <1> .badFmtErr:
   769 000064BA B80B000000          <1>     mov eax, errBadFmt  ;Fall thru with bad resource format error
   770                              <1> .cleanAndFail:
   771                              <1> ;Close the open file and any open resources and fail
   772 000064BF E82F000000          <1>     call .clearArenaOwner   ;Enters level 1 critical section
   773 000064C4 E82B120000          <1>     call dosCrit1Exit
   774 000064C9 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   775 000064CD 50                  <1>     push rax    ;Save error code
   776 000064CE 55                  <1>     push rbp
   777 000064CF E86BD2FFFF          <1>     call closeFileHdl
   778 000064D4 5D                  <1>     pop rbp
   779 000064D5 58                  <1>     pop rax
   780 000064D6 E96BF9FFFF          <1>     jmp .badExit
   781                              <1> 
   782                              <1> .readDataFromHdl:
   783                              <1> ;Input: ecx = Number of bytes to transfer
   784                              <1> ;       rdx = Ptr to the buffer to use
   785 000064DB 52                  <1>     push rdx
   786 000064DC E812000000          <1>     call .clearArenaOwner   ;Entering critical section!
   787 000064E1 0FB75DF0            <1>     movzx ebx, word [rbp - execFrame.wProgHdl]
   788 000064E5 55                  <1>     push rbp
   789 000064E6 E892D2FFFF          <1>     call readFileHdl
   790 000064EB 5D                  <1>     pop rbp
   791 000064EC E811000000          <1>     call .setPSPArenaOwner  ;Exiting critical section!
   792 000064F1 5A                  <1>     pop rdx
   793                              <1>     return
    13                              <2> %%_ret:
    14 000064F2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   794                              <1> .clearArenaOwner:
   795 000064F3 53                  <1>     push rbx
   796 000064F4 31DB                <1>     xor ebx, ebx    ;Make owner null, ok to trash flags here
   797 000064F6 E8EF110000          <1>     call dosCrit1Enter
   798 000064FB E816000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   799 00006500 5B                  <1>     pop rbx
   800                              <1>     return
    13                              <2> %%_ret:
    14 00006501 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   801                              <1> .setPSPArenaOwner:
   802                              <1> ;Sets the current PSP as the arena owner
   803 00006502 53                  <1>     push rbx
   804 00006503 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   805 0000650A E807000000          <1>     call .setProgOrEnvArenaOwnerToRBX
   806 0000650F E8E0110000          <1>     call dosCrit1Exit
   807 00006514 5B                  <1>     pop rbx
   808                              <1>     return
    13                              <2> %%_ret:
    14 00006515 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   809                              <1> .setProgOrEnvArenaOwnerToRBX:
   810                              <1> ;Input: rbx = Owner ID  (Start of PSP address)
   811 00006516 9C                  <1>     pushfq
   812 00006517 50                  <1>     push rax
   813                              <1>     ;Only one of the two below addresses may be non zero at any one time!
   814                              <1>     ;This is because they are set up at separate points in the routine!
   815 00006518 488B45C8            <1>     mov rax, qword [rbp - execFrame.pPSPBase]
   816 0000651C E80C000000          <1>     call .writeArenaHeaderOwner
   817 00006521 488B45D0            <1>     mov rax, qword [rbp - execFrame.pEnvBase]
   818 00006525 E803000000          <1>     call .writeArenaHeaderOwner
   819 0000652A 58                  <1>     pop rax
   820 0000652B 9D                  <1>     popfq
   821                              <1>     return
    13                              <2> %%_ret:
    14 0000652C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   822                              <1> .writeArenaHeaderOwner:
   823                              <1> ;Input: rax = Ptr to arena (NOT HEADER)
   824                              <1> ;       rbx = Owner ID
   825 0000652D 4885C0              <1>     test rax, rax   ;Don't write if arena header null
   826                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006530 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006532 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   827 00006533 482D10000000        <1>     sub rax, mcb.program    ;Go to start of arena header
   828 00006539 48895801            <1>     mov qword [rax + 1], rbx
   829                              <1>     return
    13                              <2> %%_ret:
    14 0000653D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    47                                  %include "./src/Kernel/Local/local.asm"
     1                              <1> ;Localisation based functions live here
     2                              <1> 
     3                              <1> getsetSwitchChar:  ;ah = 37h, allows changing default switch from / to anything
     4                              <1> ;al = 0 => Get the switch char
     5                              <1> ;al = 1 => Set the switch char to whats in DL
     6                              <1> ;COMPATIBILITY FUNCTIONS BELOW. C.F. Undocumented DOS Sec. Ed. p.686
     7                              <1> ;al = 2 => Get the status of the requirement for /DEV/ prefix on char devices
     8                              <1> ;       Always returns -1 => /DEV/ optional
     9                              <1> ;al = 3 => Set the requirement for /DEV/ prefix on char devices
    10                              <1> ;       Input value is ignored
    11 0000653E 3C01                <1>     cmp al, 01
    12 00006540 740B                <1>     je .setSC
    13 00006542 7210                <1>     jb .getSC
    14 00006544 3C03                <1>     cmp al, 03
    15 00006546 7214                <1>     jb .getDev
    16 00006548 741C                <1>     je .setDev
    17 0000654A B0FF                <1>     mov al, -1
    18                              <1>     return
    13                              <2> %%_ret:
    14 0000654C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    19                              <1> .setSC:
    20 0000654D 8815(D1030000)      <1>     mov byte [switchChar], dl
    21                              <1>     return
    13                              <2> %%_ret:
    14 00006553 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    22                              <1> .getSC:
    23 00006554 8A15(D1030000)      <1>     mov dl, byte [switchChar]   ;Get switchchar
    24 0000655A EB02                <1>     jmp short .getRet
    25                              <1> .getDev:
    26 0000655C B2FF                <1>     mov dl, -1
    27                              <1> .getRet:
    28 0000655E E8010D0000          <1>     call getUserRegs
    29 00006563 885618              <1>     mov byte [rsi + callerFrame.rdx], dl
    30                              <1> .setDev:    ;Don't set anything, just return immediately. No fanfare.
    31                              <1>     return
    13                              <2> %%_ret:
    14 00006566 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    32                              <1> 
    33                              <1> 
    34                              <1> getsetCountryInfo: ;ah = 38h, localisation info
    35                              <1> ;---------------------------------------------------------
    36                              <1> ;Common input registers
    37                              <1> ;al = Country code, 0 means current country info.
    38                              <1> ;bx = Country code if al = -1.
    39                              <1> ;Get country info:
    40                              <1> ;   rdx -> Buffer for the country table (not extended table)
    41                              <1> ;Set country info:
    42                              <1> ;   rdx = -1
    43                              <1> ;---------------------------------------------------------
    44                              <1> ;Return:
    45                              <1> ;Get country info:
    46                              <1> ;   CF=CY -> Error, ax = Error code
    47                              <1> ;   CF=NC -> OK, ax=bx=Country code, buffer @ rdx filled
    48                              <1> ;Set country info:
    49                              <1> ;   CF=CY -> Error, ax = Error code
    50                              <1> ;   CF=NC -> OK
    51                              <1> ;---------------------------------------------------------
    52 00006567 4889D7              <1>     mov rdi, rdx    ;Move the pointer/set indicator to rdi
    53 0000656A 0FB6D0              <1>     movzx edx, al   ;Move potential partial country code, zx to edx
    54 0000656D 3CFF                <1>     cmp al, -1      ;Does bx have the country code?
    55 0000656F 0F45DA              <1>     cmovne ebx, edx ;If not, move it there
    56 00006572 31ED                <1>     xor ebp, ebp    ;Get country table
    57 00006574 B901000000          <1>     mov ecx, 1      ;Set country table
    58 00006579 4881FFFFFFFFFF      <1>     cmp rdi, -1     ;Set or Get?
    59 00006580 7429                <1>     je .goToNlsFuncSet ;If set, immediately goto nls func
    60 00006582 85DB                <1>     test ebx, ebx   ;Else, in get, are we looking for current country?
    61 00006584 7527                <1>     jnz .goToNlsFunc    ;If not zero, goto nls func
    62                              <1>     ;Get current country info here, works w/o NLSFUNC
    63                              <1> .copyCountryTable:
    64 00006586 488D35739CFFFF      <1>     lea rsi, ctryTbl
    65 0000658D B926000000          <1>     mov ecx, countryStruc_size
    66 00006592 F3A4                <1>     rep movsb
    67 00006594 0FB71D619CFFFF      <1>     movzx ebx, word [extCtryTbl.countryCode]    ;Get current country code
    68                              <1> .exitWithCountryCode:
    69 0000659B E8C40C0000          <1>     call getUserRegs
    70 000065A0 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx    ;And store it in users bx
    71                              <1> .exitNoCountryCode: 
    72 000065A4 89D8                <1>     mov eax, ebx    ;Move country code into eax for return (undocumented)
    73 000065A6 E97C110000          <1>     jmp extGoodExit
    74                              <1> .goToNlsFuncSet:
    75 000065AB 89CD                <1>     mov ebp, ecx    ;Also set ebp to 1
    76                              <1> .goToNlsFunc:
    77 000065AD E812000000          <1>     call .nlsWrap   ;Access NLS functionality
    78 000065B2 0F827D110000        <1>     jc extErrExit   ;If CF=CY, exit error (error code in al)
    79 000065B8 85ED                <1>     test ebp, ebp   ;If set, exit, else get, we may need to copy data
    80 000065BA 75E8                <1>     jnz .exitNoCountryCode 
    81 000065BC 85DB                <1>     test ebx, ebx   ;If ebx = 0, we entered NLS and data copied for us.
    82 000065BE 75C6                <1>     jnz .copyCountryTable   ; If not, we gotta copy from our internal copy.
    83 000065C0 89D3                <1>     mov ebx, edx    ;Move the country code into ebx
    84 000065C2 EBD7                <1>     jmp short .exitWithCountryCode
    85                              <1> .nlsWrap:
    86                              <1> ;Subroutine to wrap NLS functions. Should do nothing if we are looking
    87                              <1> ; for the current country (to avoid hitting NLSFUNC and erroring if
    88                              <1> ; not installed).
    89                              <1> ;Input: ebp = 0 -> Get country info
    90                              <1> ;           = 1 -> Set DOS country info
    91                              <1> ;        bx = Country code (bx <> 0 here)
    92                              <1> ;       rdi -> User buffer
    93                              <1> ;       rsi -> DOS internal NLS structure
    94                              <1> ;Output: CF = CY -> Error, al has error code (-1 is generic error)
    95                              <1> ;        CF = NC -> OK
    96                              <1> ;        bx = 0 => Entered NLS and data copied to user buffer.
    97                              <1> ;           > 0 => User requested current country code. Data NOT copied.
    98                              <1> ;All other registers remain the unaffected.
    99 000065C4 663B1D319CFFFF      <1>     cmp bx, word [extCtryTbl.countryCode]   ;No NLS access if current ctry.
   100                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000065CB 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000065CD C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   101 000065CE 89DA                <1>     mov edx, ebx    ;Save the country code in edx
   102 000065D0 31DB                <1>     xor ebx, ebx    ;Set indicator that we are accessing NLS.
   103 000065D2 B800140000          <1>     mov eax, 1400h  ;Is NLS installed?
   104 000065D7 CD2F                <1>     int 2fh
   105 000065D9 3CFF                <1>     cmp al, -1      ;If al <> -1, error exit
   106 000065DB 751F                <1>     jne .errNotInstalled
   107 000065DD 488D35A59BFFFF      <1>     lea rsi, dosNLSPtr    ;Point rsi to the DOS codepage area
   108 000065E4 B804140000          <1>     mov eax, 1404h  ;Get Country Info, for country code in dx
   109 000065E9 B903140000          <1>     mov ecx, 1403h  ;Set DOS Country Info, to country code in dx
   110 000065EE 85ED                <1>     test ebp, ebp   ;What can I do you for amigo?
   111 000065F0 0F45C1              <1>     cmovnz eax, ecx ;Set codepage if this is non-zero
   112 000065F3 CD2F                <1>     int 2fh
   113 000065F5 84C0                <1>     test al, al ;If al = 0, all ok and return CF=NC!
   114                              <1>     retz  
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000065F7 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000065F9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   115                              <1> .exitErr:   ;Else return with the retuned error code
   116 000065FA F9                  <1>     stc     ;and CF set
   117                              <1>     return
    13                              <2> %%_ret:
    14 000065FB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   118                              <1> .errNotInstalled:
   119 000065FC B001                <1>     mov al, errInvFnc  ;Set invalid function signature
   120 000065FE EBFA                <1>     jmp short .exitErr
   121                              <1> 
   122                              <1> 
   123                              <1> getExtLocalInfo:    ;ah = 65h, Get Extended Country Info
   124                              <1> ;al = info ID
   125                              <1> ;   01h get general internationalization info
   126                              <1> ;   02h get pointer to uppercase table
   127                              <1> ;   04h get pointer to filename uppercase table
   128                              <1> ;   05h get pointer to filename terminator table
   129                              <1> ;   06h get pointer to collating sequence table
   130                              <1> ;bx = code page (FFFFh=global code page)
   131                              <1> ;dx = country ID (FFFFh=current country)
   132                              <1> ;rdi -> country information buffer
   133                              <1> ;ecx = size of buffer (>= 9), fail if less! NOTE THE CHANGE FROM 5 to 9!!!!
   134                              <1> ;Return:
   135                              <1> ;CF=CY if error
   136                              <1> ;ax = error code
   137                              <1> ;CF=NC if successful
   138                              <1> ;ecx = size of country information returned
   139                              <1> ;rdi -> country information filled in
   140                              <1> ;Undocumented: ax = default Codepage if nls or requested codepage if internal
   141 00006600 81F909000000        <1>     cmp ecx, 9  ;Is our buffer of minimum acceptable size?
   142 00006606 7250                <1>     jb .invFuncExit
   143 00006608 488D357A9BFFFF      <1>     lea rsi, dosNLSPtr
   144 0000660F 6681FAFFFF          <1>     cmp dx, -1
   145 00006614 660F4415E09BFFFF    <1>     cmove dx, word [extCtryTbl.countryCode] ;Get the current country code
   146 0000661C 6681FBFFFF          <1>     cmp bx, -1
   147 00006621 660F441DD59BFFFF    <1>     cmove bx, word [extCtryTbl.activeCP]    ;Get the current codepage
   148 00006629 663B15CC9BFFFF      <1>     cmp dx, word [extCtryTbl.countryCode]
   149 00006630 7569                <1>     jne .nlsReq
   150 00006632 663B1DC59BFFFF      <1>     cmp bx, word [extCtryTbl.activeCP]
   151 00006639 7560                <1>     jne .nlsReq
   152                              <1>     ;We access our local DOS nationalisation tables to 
   153                              <1>     ; avoid hitting NLS.
   154 0000663B 488D35939BFFFF      <1>     lea rsi, charTableArray
   155 00006642 0FB72D8A9BFFFF      <1>     movzx ebp, word [ctryFunctions]    ;Get max number of tables to parse
   156                              <1> .loopTableSearch:
   157 00006649 3A06                <1>     cmp al, byte [rsi]  ;Is the table ours?
   158 0000664B 7515                <1>     jne .tblFound
   159 0000664D 4881C609000000      <1>     add rsi, 9          ;Go to next table (skip one byte and one qword)
   160 00006654 FFCD                <1>     dec ebp
   161 00006656 75F1                <1>     jnz .loopTableSearch
   162                              <1>     ;Fallthrough to error if no match
   163                              <1> .invFuncExit:
   164 00006658 B801000000          <1>     mov eax, 1
   165 0000665D E9D3100000          <1>     jmp extErrExit
   166                              <1> .tblFound:
   167 00006662 A4                  <1>     movsb   ;Copy over the first byte, moving both pointers by 1
   168 00006663 3C01                <1>     cmp al, 1
   169 00006665 741B                <1>     je .getExtCtryTbl
   170                              <1>     ;Here we simply copy over a qword
   171 00006667 B908000000          <1>     mov ecx, 8  ;Copy 8 more bytes
   172 0000666C B809000000          <1>     mov eax, 9  ;Number of bytes to save as having had been written
   173                              <1> .copyTable:
   174                              <1> ;Come here with eax = full copy len, ebx = codepage value, ecx = bytes to xfr
   175 00006671 F3A4                <1>     rep movsb   ;Copy the rest of the bytes
   176 00006673 E8EC0B0000          <1>     call getUserRegs
   177 00006678 894610              <1>     mov dword [rsi + callerFrame.rcx], eax    ;Store in ecx # of bytes
   178                              <1>     ;Undocumented, if success, ax contains the requested codepage
   179                              <1>     ; value. This is undocumented and should not be relied upon.
   180 0000667B 89D8                <1>     mov eax, ebx    
   181 0000667D E9A5100000          <1>     jmp extGoodExit
   182                              <1> .getExtCtryTbl:
   183                              <1> ;ecx has length of caller buffer
   184 00006682 81E903000000        <1>     sub ecx, 3  ;Remove the byte from the count and the length we will store
   185 00006688 31C0                <1>     xor eax, eax    ;Clear eax
   186 0000668A 66AD                <1>     lodsw           ;Get word at rsi (full table len) and advance rsi by 2
   187 0000668C 39C8                <1>     cmp eax, ecx    ;Do we have more bytes in buffer than we need?
   188 0000668E 0F47C8              <1>     cmova ecx, eax  ;Set it to exactly the table length in that case
   189 00006691 89C8                <1>     mov eax, ecx    ;Copy the number of bytes back to eax too
   190 00006693 66AB                <1>     stosw           ;Store number of bytes we will copy and adv rdi by 2
   191 00006695 678D4103            <1>     lea eax, dword [ecx + 3] ;Add 3 to eax, for first 3 bytes copied
   192 00006699 EBD6                <1>     jmp short .copyTable
   193                              <1>     
   194                              <1> .nlsReq:    ;nlsReq moved here to reach the short jumps :)
   195                              <1> ;As before, now rsi -> DOSNLS structure
   196                              <1> ; and bpl has the function code (1,2,4,5,6)
   197 0000669B 0FB6E8              <1>     movzx ebp, al   ;Place the function code in ebp (low byte, zx the rest)
   198 0000669E B800140000          <1>     mov eax, 1400h  ;Install check!
   199 000066A3 CD2F                <1>     int 2fh
   200 000066A5 3CFF                <1>     cmp al, -1          ;If not installed, error exit
   201 000066A7 75AF                <1>     jne .invFuncExit    
   202 000066A9 B802140000          <1>     mov eax, 1402h      ;Get codepage info
   203 000066AE CD2F                <1>     int 2fh
   204 000066B0 84C0                <1>     test al, al         ;If the return code is 0, we are ok, else
   205 000066B2 0F857D100000        <1>     jne extErrExit      ; al has error code
   206                              <1>     ;Undocumented, if success, ax contains the default codepage
   207                              <1>     ; value. This is undocumented and should not be relied upon.
   208                              <1>     ;This value never changes, not even by NLSFUNC.
   209 000066B8 0FB705129BFFFF      <1>     movzx eax, word [defaultCP]
   210 000066BF E963100000          <1>     jmp extGoodExit
   211                              <1> 
   212                              <1> getsetGlobalCP:    ;ah = 66h, Get/Set Global Codepage
   213                              <1> ;If al = 01h -> Get Global Codepage
   214                              <1> ;Return:    ebx = Active (current) codepage
   215                              <1> ;           edx = System (default) codepage
   216                              <1> ;If al = 02h -> Set Global Codepage
   217                              <1> ;   bx = Active (current) codepage
   218                              <1> ;   dx = System (default) codepage. Not needed, so don't document.
   219 000066C4 3C01                <1>     cmp al, 1
   220 000066C6 7528                <1>     jne .setCodepage
   221                              <1> ;Here we get the codepage
   222 000066C8 E8970B0000          <1>     call getUserRegs
   223 000066CD 0FB71D2A9BFFFF      <1>     movzx ebx, word [extCtryTbl.activeCP]   ;Get the active codepage value
   224 000066D4 0FB715F69AFFFF      <1>     movzx edx, word [defaultCP] ;Get the default codepage
   225 000066DB 895E08              <1>     mov dword [rsi + callerFrame.rbx], ebx
   226 000066DE 895618              <1>     mov dword [rsi + callerFrame.rdx], edx
   227 000066E1 E941100000          <1>     jmp extGoodExit
   228                              <1> .exitBadFunc:
   229 000066E6 B801000000          <1>     mov eax, errInvFnc
   230 000066EB E945100000          <1>     jmp extErrExit
   231                              <1> .setCodepage:
   232 000066F0 3C02                <1>     cmp al, 2
   233 000066F2 75F2                <1>     jne .exitBadFunc
   234 000066F4 0FB715969AFFFF      <1>     movzx edx, word [defltCtry] ;Get the country ID
   235 000066FB B800140000          <1>     mov eax, 1400h
   236 00006700 CD2F                <1>     int 2Fh
   237 00006702 3CFF                <1>     cmp al, -1
   238 00006704 75E0                <1>     jne .exitBadFunc
   239 00006706 488D357C9AFFFF      <1>     lea rsi, dosNLSPtr  ;Get pointer to the DOS codepage in rsi
   240 0000670D B801140000          <1>     mov eax, 1401h      ;Set global codepage
   241 00006712 CD2F                <1>     int 2Fh
   242 00006714 84C0                <1>     test al, al
   243 00006716 0F840B100000        <1>     jz extGoodExit
   244 0000671C 3C41                <1>     cmp al, errNLSAcDen
   245 0000671E 0F8511100000        <1>     jne extErrExit
   246 00006724 6698                <1>     cbw     ;Zero extend al into ax (as we know al = 41h)
   247 00006726 668905(0B040000)    <1>     mov word [errorExCde], ax
   248 0000672D C605(0D040000)06    <1>     mov byte [errorAction], eActIgn
   249 00006734 C605(0A040000)04    <1>     mov byte [errorLocus], eLocChr
   250 0000673B C605(0E040000)05    <1>     mov byte [errorClass], eClsHrdFlt
   251 00006742 E9FB0F0000          <1>     jmp extErrExit.noXlat   ;Jump to error exit without translating the error
   252                              <1> 
   253                              <1> 
   254                              <1> caseMapFunc:
   255                              <1> ;Input: AL=Char to convert to uppercase (above 80h)
   256 00006747 3C80                <1>     cmp al, 80h
   257                              <1>     retb
    65                              <2> cret b
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006749 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000674B C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   258 0000674C 53                  <1>     push rbx
   259 0000674D 488D1DD49AFFFF      <1>     lea rbx, ucTbl
   260 00006754 2C80                <1>     sub al, 80h ;Turn into an offset into the table
   261 00006756 D7                  <1>     xlatb
   262 00006757 5B                  <1>     pop rbx
   263                              <1>     return
    13                              <2> %%_ret:
    14 00006758 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                                  %include "./src/Kernel/Error/harderr.asm"
     1                              <1> 
     2                              <1> diskIOError:
     3                              <1> ;Called in Binary Disk Read/Write if getting access to shared resource fails
     4                              <1> ;Input: rwFlag = 0 or 1 for read/write
     5                              <1> ;       eax = Status word
     6                              <1> ;       rdi -> buffer pointer
     7                              <1> ;       rbp -> DPB ptr
     8 00006759 3C0F                <1>     cmp al, drvBadDskChnge
     9 0000675B 7510                <1>     jne .doReq
    10 0000675D 50                  <1>     push rax    ;If a bad disk change, drop the volume label ptr here
    11 0000675E 488B05(E3040000)    <1>     mov rax, qword [primReqPkt + ioReqPkt.desptr]   ;Get volume label ptr
    12 00006765 488905(0F040000)    <1>     mov qword [errorVolLbl], rax    ;and save it!
    13                              <1>     ;Later versions will include a serial number after the lbl too
    14 0000676C 58                  <1>     pop rax
    15                              <1> .doReq:
    16 0000676D E849000000          <1>     call diskDevErr ;Preserves rdi on stack and rbp in tmpDPBPtr
    17                              <1>     return
    13                              <2> %%_ret:
    14 00006772 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    18                              <1> xlatHardError:
    19                              <1> ;Translates a hard error code to a generic DOS error
    20                              <1> ;Input: edi = Hard Error Code
    21                              <1> ;       ah = Bitfield
    22                              <1> ;       al = Failing drive number
    23 00006773 50                  <1>     push rax    ;Wanna preserve ax
    24 00006774 6681FF1000          <1>     cmp di, hardXlatTblL    ;If errorcode > 15, do not adjust!!
    25 00006779 0FB7C7              <1>     movzx eax, di  ;Clears 64 bits and moves error code into ax
    26 0000677C 730A                <1>     jae .skipXlat   ;Skip xlat if above 15, for IOCTL return errors
    27 0000677E 53                  <1>     push rbx
    28 0000677F 488D1DE398FFFF      <1>     lea rbx, hardXlatTbl
    29 00006786 D7                  <1>     xlatb    ;Get translated byte from the table in al
    30 00006787 5B                  <1>     pop rbx
    31                              <1> .skipXlat:
    32 00006788 668905(0B040000)    <1>     mov word [errorExCde], ax   ;Store this error code here
    33 0000678F 58                  <1>     pop rax
    34 00006790 56                  <1>     push rsi
    35 00006791 488D357D99FFFF      <1>     lea rsi, extErrTbl
    36 00006798 E8F10F0000          <1>     call setErrorVars
    37 0000679D 5E                  <1>     pop rsi
    38                              <1>     return
    13                              <2> %%_ret:
    14 0000679E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    39                              <1> 
    40                              <1> charDevErr:
    41                              <1> ;Hard character device errors come here
    42                              <1> ;Input:
    43                              <1> ; ah = Additional Int 24h flags. Top bit should be set!
    44                              <1> ;edi = error code in low byte
    45                              <1> ;rbp -> Not accessed but preserved
    46 0000679F 80CC38              <1>     or ah, critIgnorOK | critRetryOK | critFailOK   ;Set the always bits
    47 000067A2 8825(68040000)      <1>     mov byte [Int24bitfld], ah
    48 000067A8 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp
    49 000067AF 56                  <1>     push rsi
    50 000067B0 400FB6FF            <1>     movzx edi, dil    ;Zero extend the error code up
    51 000067B4 E87C000000          <1>     call hardErrorCommon
    52 000067B9 5E                  <1>     pop rsi
    53                              <1>     return
    13                              <2> %%_ret:
    14 000067BA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    54                              <1> diskDevErr:
    55                              <1> ;Called, NOT Jumped to. 
    56                              <1> ;Input: rdi = Disk Buffer pointer (or 0 to mean share)
    57                              <1> ;       eax = Status word (error code in al)
    58                              <1> ;       rbp = Disk DPB pointer
    59                              <1> ; [Int24hbitfld] = Specific bitflags (r/w AND potential extra ok responses)
    60                              <1> ;Output: al = Int 24h response (0-3)
    61                              <1> ; All other registers preserved
    62 000067BB B308                <1>     mov bl, dataBuffer  ;Set dflt flags for invoke
    63 000067BD 4885FF              <1>     test rdi, rdi       ;Is this a share invokation?
    64 000067C0 7403                <1>     je .skipbufferread  ;Jump if so, since share lock issues occur on data io
    65 000067C2 8A5F09              <1>     mov bl, byte [rdi + bufferHdr.bufferFlags]  ;Else get the buffer data type
    66                              <1> .skipbufferread:
    67 000067C5 57                  <1>     push rdi        ;Save the disk buffer pointer
    68 000067C6 0FB6F8              <1>     movzx edi, al   ;Store status code in dil, zero extend
    69 000067C9 81FF00000000        <1>     cmp edi, drvWPErr
    70 000067CF 7509                <1>     jne .notReset
    71                              <1>     ;Reset the error drive to report dpb drive if a write protect error!
    72 000067D1 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get drive number
    73 000067D4 8805(09040000)      <1>     mov byte [errorDrv], al ;Store this value
    74                              <1> .notReset:
    75 000067DA 8A25(68040000)      <1>     mov ah, byte [Int24bitfld]  ;Get the permissions in var
    76 000067E0 80CC18              <1>     or ah, critFailOK | critRetryOK ;Set the always bits
    77                              <1>     ;Test for correct buffer data type
    78 000067E3 F6C301              <1>     test bl, dosBuffer
    79 000067E6 7505                <1>     jnz .df0
    80 000067E8 80CC00              <1>     or ah, critDOS  ;Add DOS data type bit
    81 000067EB EB1E                <1>     jmp short .df3
    82                              <1> .df0:
    83 000067ED F6C302              <1>     test bl, fatBuffer
    84 000067F0 750C                <1>     jnz .df1
    85 000067F2 80CC02              <1>     or ah, critFAT  ;Add FAT data type bit
    86 000067F5 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Invalidate the count!
    87 000067FC EB0D                <1>     jmp short .df3
    88                              <1> .df1:
    89 000067FE F6C304              <1>     test bl, dirBuffer
    90 00006801 7505                <1>     jnz .df2
    91 00006803 80CC04              <1>     or ah, critDir  ;Add Directory data type bit
    92 00006806 EB03                <1>     jmp short .df3
    93                              <1> .df2:
    94 00006808 80CC06              <1>     or ah, critData ;Here it must be a data buffer
    95                              <1> .df3:
    96 0000680B 8025(00070000)01    <1>     and byte [rwFlag], 1    ;Save only the bottom bit
    97 00006812 0A25(00070000)      <1>     or ah, byte [rwFlag]    ;And set the low bit here
    98 00006818 0A25(68040000)      <1>     or ah, byte [Int24bitfld]
    99                              <1>     ;Continue down with failing disk buffer pointer on stack
   100 0000681E E802000000          <1>     call diskDevErrBitfield
   101 00006823 5F                  <1>     pop rdi ;Pop back the disk buffer pointer
   102                              <1>     return   
    13                              <2> %%_ret:
    14 00006824 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   103                              <1> diskDevErrBitfield:
   104                              <1> ;Called with Int24Bitfield constructed and in ah and error code in dil
   105                              <1> ;This is to avoid rebuilding the bitfield.
   106 00006825 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]   ;Get the drive number
   107 00006828 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save the DPB 
   108 0000682F 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;And get the driver ptr in rsi
   109 00006833 31ED                <1>     xor ebp, ebp    ;Finally, set ebp to 0 to simulate the segment
   110                              <1> hardErrorCommon:
   111                              <1> ;The common fields, with the vars set up. 
   112                              <1> ;Ensure we dont have a crazy error code.
   113                              <1> ;Entered with: ah = bitfield, al = Fail drive (0 based) if not char
   114                              <1> ; dil = Driver error code, rsi -> Driver header
   115                              <1> ;tmpDBPPtr = Fail DPB if not char, rwFlag set/clear
   116 00006835 E839FFFFFF          <1>     call xlatHardError
   117 0000683A 50                  <1>     push rax
   118 0000683B B80C000000          <1>     mov eax, errGF - drvErrShft
   119 00006840 39C7                <1>     cmp edi, eax    ; If the returned error code is above largest driver code
   120 00006842 0F47F8              <1>     cmova edi, eax  ; return the driver largest code
   121 00006845 58                  <1>     pop rax
   122                              <1> criticalDOSError:   ;Int 2Fh, AX=1206h, Invoke Critical Error Function 
   123                              <1> ;Will swap stacks and enter int 24h safely and handle passing the right data 
   124                              <1> ; to the critical error handler.
   125                              <1> ; Called with rsi set as required by Int 24h (caller decides), ax, di
   126                              <1> ; and with Int24Bitfield set
   127                              <1> ;               AH = Critical Error Bitfield
   128                              <1> ;               Bit 7 = 0 - Disk Error, Bit 7 = 1 - Char Device Error
   129                              <1> ;               Bit 6 - Reserved
   130                              <1> ;               Bit 5 = 0 - IGNORE not allowed, Bit 5 = 1 - IGNORE allowed
   131                              <1> ;               Bit 4 = 0 - RETRY not allowed, Bit 4 = 1 - RETRY allowed
   132                              <1> ;               Bit 3 = 0 - FAIL not allowed, Bit 3 = 1 - FAIL allowed
   133                              <1> ;               Bits [2-1] = Affected Disk Error
   134                              <1> ;                     0 0   DOS area
   135                              <1> ;                     0 1   FAT area
   136                              <1> ;                     1 0   Directory area
   137                              <1> ;                     1 1   Data area
   138                              <1> ;               Bit 0 = 0 - Read Operation, Bit 0 = 1 - Write Operation
   139                              <1> ;               AL  = Failing drive number if AH[7] = 0
   140                              <1> ;               DIL = Error code for errorMsg
   141                              <1> ;               RSI = EA of Device Header for which device the error occured
   142                              <1> ;Return:
   143                              <1> ;               AL = 0 - Ignore the Error       (Ignore)
   144                              <1> ;                  = 1 - Retry the Operation    (Retry)
   145                              <1> ;               XXX= 2 - Terminate the Program  (Abort)XXX
   146                              <1> ;                  = 3 - Fail the DOS call      (Fail)
   147                              <1> ; Return response from int 24h in al
   148                              <1> ; Caller must preserve rsp, rbx, rcx, rdx if they wish to return to DOS
   149                              <1> ; This function will terminate the program if an abort was requested!
   150                              <1> ; This function also destroys RBP
   151 00006846 803D(07040000)01    <1>     cmp byte [critErrFlag], 1
   152 0000684D 7204                <1>     jb .noIntError  ;If not 0, enter
   153 0000684F B003                <1>     mov al, critFail    ;Else, return Fail always
   154 00006851 EB65                <1>     jmp short .setFail
   155                              <1> .noIntError:
   156 00006853 488925(60040000)    <1>     mov qword [xInt24hRSP], rsp ;Save our critical error stack
   157 0000685A 66813D(3A070000)FF- <1>     cmp word  [currentNdx], -1  ;If this is -1, we are not opening a file
   157 00006862 FF                  <1>
   158 00006863 740C                <1>     je .notOpeningFile
   159 00006865 57                  <1>     push rdi
   160 00006866 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]  ;Get the pointer to the current handle entry
   161 0000686D C607FF              <1>     mov byte [rdi], -1          ;Free this handle
   162 00006870 5F                  <1>     pop rdi
   163                              <1> .notOpeningFile:
   164 00006871 FA                  <1>     cli                         
   165 00006872 FE05(07040000)      <1>     inc byte [critErrFlag]      ;Set flag for critical error
   166 00006878 FE0D(08040000)      <1>     dec byte [inDOS]            ;Exiting DOS
   167 0000687E 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]     ;Get the stack ptr after regs were pushed
   168 00006885 31ED                <1>     xor ebp, ebp                ;Always zeroed for DOS portability!
   169 00006887 CD24                <1>     int 24h                     ;Call crit. err. hdlr. Ints reset on
   170 00006889 488925(7B040000)    <1>     mov qword [oldRSP], rsp     ;Allows user to change reg vals on fail!
   171 00006890 488B25(60040000)    <1>     mov rsp, qword [xInt24hRSP] ;Ret to DOS stack for failing device
   172 00006897 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear critical error flag
   173 0000689E FE05(08040000)      <1>     inc byte [inDOS]            ;Reenter DOS
   174 000068A4 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]
   175 000068AB FB                  <1>     sti                         
   176                              <1>     ;Now we check that the response given was allowed, and translate if needed
   177 000068AC 3C00                <1>     cmp al, critIgnore
   178 000068AE 743F                <1>     je .checkIgnore
   179 000068B0 3C01                <1>     cmp al, critRetry
   180 000068B2 7446                <1>     je .checkRetry
   181 000068B4 3C03                <1>     cmp al, critFail
   182 000068B6 754D                <1>     jne .abort   ;Must be abort
   183                              <1> .setFail:   ;Here is for fail
   184 000068B8 B003                <1>     mov al, critFail    ;Reset al to contain fail (even if Int24 responded Fail)
   185 000068BA FE05(6A040000)      <1>     inc byte [Int24Fail]        ;Inc the fail counter!
   186 000068C0 F605(68040000)08    <1>     test byte [Int24bitfld], critFailOK
   187 000068C7 743C                <1>     jz .abort  ;If bit not set, fail not permitted, abort
   188                              <1> .exit:
   189 000068C9 C605(09040000)FF    <1>     mov byte [errorDrv], -1 ;Unknown drive (to be set)
   190 000068D0 803D(3A070000)FF    <1>     cmp byte [currentNdx], -1   ;Is there a file that needs handling?
   191                              <1>     rete    ;Only if this is not equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000068D7 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000068D9 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   192                              <1>     ;In that case, we set the jft entry to its initial value, whatever it was
   193 000068DA 50                  <1>     push rax
   194 000068DB 57                  <1>     push rdi
   195 000068DC 0FB705(3A070000)    <1>     movzx eax, word [currentNdx]
   196 000068E3 488B3D(2A070000)    <1>     mov rdi, qword [curHdlPtr]
   197 000068EA 8807                <1>     mov byte [rdi], al
   198 000068EC 5F                  <1>     pop rdi
   199 000068ED 58                  <1>     pop rax
   200                              <1>     return
    13                              <2> %%_ret:
    14 000068EE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   201                              <1> .checkIgnore:
   202 000068EF F605(68040000)20    <1>     test byte [Int24bitfld], critIgnorOK
   203 000068F6 75D1                <1>     jnz .exit
   204 000068F8 EBBE                <1>     jmp short .setFail  ;If ignore not permitted, return Fail
   205                              <1> .checkRetry:
   206 000068FA F605(68040000)10    <1>     test byte [Int24bitfld], critRetryOK
   207 00006901 75C6                <1>     jnz .exit   
   208 00006903 EBB3                <1>     jmp short .setFail  ;If retry not permitted, return Fail
   209                              <1> .abort:
   210                              <1> ;Prepare to abort. We abort from within!
   211 00006905 E86FC2FFFF          <1>     call vConRetDriver  ;Always reset the driver flag on abort
   212                              <1> ;If a network request requests abort, translate to fail
   213 0000690A 803D(02070000)FF    <1>     cmp byte [dosInvoke], -1
   214 00006911 74B6                <1>     je .exit
   215                              <1> ;If already terminating, dont start terminating again!
   216 00006913 F605(96040000)FF    <1>     test byte [procExiting], -1
   217 0000691A 75AD                <1>     jnz .exit
   218 0000691C 31C0                <1>     xor eax, eax    ;Default return code to 0. Abort flag will be set later
   219 0000691E C605(06070000)02    <1>     mov byte [exitType], 2      ;We are returning from Abort, ret type 2!
   220 00006925 8805(5F040000)      <1>     mov byte [volIdFlag], al     ;Clear special vol search byte if set
   221                              <1>     ;Before returning, we need to set the aborting psp.rspPtr back to 
   222                              <1>     ; the oldRSP as a syscall during Int 24h would change this value.
   223                              <1>     ;This only affects programs which are their own parents as when aborting
   224                              <1>     ; we swap to the parentPSP. This prevents a bug from arising as the 
   225                              <1>     ; stack ptr in psp.rspPtr may have changed since initially entering DOS
   226                              <1>     ; as the Int 24h handler may have made an Int 21h call, meaning if 
   227                              <1>     ; the Int 24h handler plays with the stack too much, the value in 
   228                              <1>     ; psp.rspPtr is no longer pointing at a "valid" stack frame (i.e. 
   229                              <1>     ; with valid SS:RSP). The only sane thing to do is to reset this 
   230                              <1>     ; pointer to the value it had on entry to the initial DOS call which
   231                              <1>     ; triggered the Int 24h (or the equivalent stack frame that was 
   232                              <1>     ; replaced by the Int 24h handler). If the task being aborted is not 
   233                              <1>     ; its own parent the following is a NOP. If it is its own parent, we
   234                              <1>     ; the following prevents a GP. Fault.
   235 0000692B 488B3D(1F040000)    <1>     mov rdi, qword [currentPSP]
   236 00006932 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   237 00006939 48895F46            <1>     mov qword [rdi + psp.rspPtr], rbx
   238 0000693D E988F3FFFF          <1>     jmp terminateClean.altEP
    49                                  %include "./src/Kernel/Error/ctrlc.asm"
     1                              <1> ctrlBreakHdlr:
     2 00006942 B003                <1>     mov al, 03h ;Always guarantee a ^C will be printed
     3 00006944 E85DC1FFFF          <1>     call printCaretASCII
     4 00006949 E888C1FFFF          <1>     call printCRLF
     5                              <1>     ;Reset the console back to 0
     6 0000694E E826C2FFFF          <1>     call vConRetDriver
     7                              <1> ;Handles a control break, juggles stacks and enters int 21h 
     8                              <1> .exceptEP:
     9                              <1> ;If return via RET/RET 8 with CF set, DOS will abort program with errorlevel 0
    10                              <1> ;Else (RET/RET 8 with CF clear or IRET with CF ignored)
    11                              <1> ;   interrupted DOS call is restarted
    12 00006953 FA                  <1> 	cli
    13 00006954 488B25(7B040000)    <1> 	mov rsp, qword [oldRSP]	;Get registers frame
    14 0000695B E85C0D0000          <1> 	call dosPopRegs ;Get user state back
    15 00006960 C605(08040000)00    <1>     mov byte [inDOS], 0 ;Make sure we "exit" DOS 
    16 00006967 C605(07040000)00    <1>     mov byte [critErrFlag], 0
    17 0000696E 488925(27040000)    <1>     mov qword [xInt23hRSP], rsp  ;Save user rsp. This is the og psp rsp.
    18 00006975 F8                  <1>     clc
    19 00006976 CD23                <1>     int 23h ;Call critical error handler
    20 00006978 FA                  <1>     cli ;Clear interrupts again
    21 00006979 488905(33040000)    <1>     mov qword [oldRAX], rax     ;Save eax (has DOS fn to do if not terminate)
    22 00006980 9C                  <1>     pushfq                      ;Get returned flags in rax
    23 00006981 58                  <1>     pop rax 
    24 00006982 483B25(27040000)    <1>     cmp rsp, qword [xInt23hRSP] ;Did the user return with ret/ret 8?
    25 00006989 750C                <1>     jne .checkCF                ;If yes, check the returned CF flag.
    26                              <1> .returnToDOS:                   ;Else, execute the DOS function in eax.
    27 0000698B 488B05(33040000)    <1>     mov rax, qword [oldRAX]     ;Get the function number to execute
    28 00006992 E9CB0B0000          <1>     jmp functionDispatch        ;Goto int 21h
    29                              <1> .checkCF:
    30 00006997 488B25(27040000)    <1>     mov rsp, qword [xInt23hRSP]  ;Reset the stack pointer to pre int 23h
    31 0000699E A801                <1>     test al, 1      ;Was CF=CY returned?
    32 000069A0 74E9                <1>     jz .returnToDOS ;If CF=NC, DOS function in eax
    33 000069A2 B8004C0000          <1>     mov eax, 4c00h  ;Else, exit with default error code (00h)
    34 000069A7 C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1  ;Signal CTRL+BREAK termination
    35 000069AE E9AF0B0000          <1>     jmp functionDispatch ;When jumping now, rsp will go back into psp.rsp!
    50                                  %include "./src/Kernel/Error/execpt.asm"
     1                              <1> ;CPU Exception handlers
     2                              <1> ;If a CPU exception occurs, and inDOS = 0, the default behaviour will be to 
     3                              <1> ; CTRL+C exit.
     4                              <1> ; If inDOS > 0, then we assume the error is within DOS and thus we halt the
     5                              <1> ; system.
     6                              <1> ; Also halt if the application is it's own parent.
     7                              <1> ;An application should hook these interupts if they wish to not 
     8                              <1> ; CTRL+C exit, and instead return to DOS.
     9                              <1> i0:
    10 000069B3 31C0                <1>     xor eax, eax
    11 000069B5 E9AB000000          <1>     jmp cpu_2args
    12                              <1> i1:
    13 000069BA B801000000          <1>     mov eax, 1
    14 000069BF E9A1000000          <1>     jmp cpu_2args
    15                              <1> i2:
    16 000069C4 B802000000          <1>     mov eax, 2
    17 000069C9 E997000000          <1>     jmp cpu_2args
    18                              <1> i3:
    19 000069CE B803000000          <1>     mov eax, 3
    20 000069D3 E98D000000          <1>     jmp cpu_2args
    21                              <1> i4:
    22 000069D8 B804000000          <1>     mov eax, 4
    23 000069DD E983000000          <1>     jmp cpu_2args
    24                              <1> i5:
    25 000069E2 B805000000          <1>     mov eax, 5
    26 000069E7 EB7C                <1>     jmp short cpu_2args
    27                              <1> i6:
    28 000069E9 B806000000          <1>     mov eax, 6
    29 000069EE EB75                <1>     jmp short cpu_2args
    30                              <1> i7:
    31 000069F0 B807000000          <1>     mov eax, 7
    32 000069F5 EB6E                <1>     jmp short cpu_2args
    33                              <1> i8:
    34 000069F7 B808000000          <1>     mov eax, 8
    35 000069FC EB60                <1>     jmp short cpu_3args
    36                              <1> i9:
    37 000069FE B809000000          <1>     mov eax, 9
    38 00006A03 EB60                <1>     jmp short cpu_2args
    39                              <1> i10:
    40 00006A05 B80A000000          <1>     mov eax, 0Ah
    41 00006A0A EB52                <1>     jmp short cpu_3args
    42                              <1> i11:
    43 00006A0C B80B000000          <1>     mov eax, 0Bh
    44 00006A11 EB4B                <1>     jmp short cpu_3args
    45                              <1> i12:
    46 00006A13 B80C000000          <1>     mov eax, 0Ch
    47 00006A18 EB44                <1>     jmp short cpu_3args
    48                              <1> i13:
    49 00006A1A B80D000000          <1>     mov eax, 0Dh
    50 00006A1F EB3D                <1>     jmp short cpu_3args
    51                              <1> i14:
    52 00006A21 B80E000000          <1>     mov eax, 0Eh
    53 00006A26 EB2F                <1>     jmp short cpu_4args
    54                              <1> i15:
    55 00006A28 B80F000000          <1>     mov eax, 0Fh
    56 00006A2D EB36                <1>     jmp short cpu_2args
    57                              <1> i16:
    58 00006A2F B810000000          <1>     mov eax, 10h
    59 00006A34 EB2F                <1>     jmp short cpu_2args
    60                              <1> i17:
    61 00006A36 B811000000          <1>     mov eax, 11h
    62 00006A3B EB21                <1>     jmp short cpu_3args
    63                              <1> i18:
    64 00006A3D B812000000          <1>     mov eax, 12h
    65 00006A42 EB21                <1>     jmp short cpu_2args
    66                              <1> i19:
    67 00006A44 B813000000          <1>     mov eax, 13h
    68 00006A49 EB1A                <1>     jmp short cpu_2args
    69                              <1> i20:
    70 00006A4B B814000000          <1>     mov eax, 14h
    71 00006A50 EB13                <1>     jmp short cpu_2args
    72                              <1> i21:
    73 00006A52 B815000000          <1>     mov eax, 15h
    74                              <1> cpu_4args:
    75 00006A57 B903000000          <1>     mov ecx, 3
    76 00006A5C EB0C                <1>     jmp short cpu_exception
    77                              <1> cpu_3args:
    78 00006A5E B902000000          <1>     mov ecx, 2
    79 00006A63 EB05                <1>     jmp short cpu_exception
    80                              <1> cpu_2args:
    81 00006A65 B901000000          <1>     mov ecx, 1
    82                              <1> cpu_exception:
    83                              <1> ;Enter with:
    84                              <1> ; eax = Exception number in binary
    85                              <1> ; ecx = Number of arguments to print and pop from stack - 1 
    86 00006A6A 488D3537020000      <1>     lea rsi, .fatalt0   ;Get the ptr
    87 00006A71 BB29000000          <1>     mov ebx, fatalt0L  ;Get the length
    88 00006A76 E8E5010000          <1>     call .writeExceptionMessage
    89                              <1> 
    90 00006A7B C605(91070000)00    <1>     mov byte [haltDOS], 0   ;Clear first as we are recycling this byte in SDA
    91 00006A82 803D(08040000)01    <1>     cmp byte [inDOS], 1     ;Are we in DOS? 
    92 00006A89 7327                <1>     jae .introStop          ;Crap out, cant guarantee DOS is stable anymore
    93 00006A8B 3D02000000          <1>     cmp eax, 2              ;NMI?
    94 00006A90 7420                <1>     je .introStop           ;Freeze the PC to stop it from hurting itself...
    95                              <1> 
    96 00006A92 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;If self-parent craps out... 
    97 00006A99 483B5B22            <1>     cmp rbx, qword [rbx + psp.parentPtr] ;Who do we call? COMSPEC?
    98 00006A9D 7413                <1>     je .introStop   ;Nah, for now, just hard stop like if DOS is bad.
    99                              <1> 
   100 00006A9F 488D352B020000      <1>     lea rsi, .fatal1
   101 00006AA6 BBC1000000          <1>     mov ebx, fatal1L
   102 00006AAB E8B0010000          <1>     call .writeExceptionMessage
   103 00006AB0 EB18                <1>     jmp short .introEnd
   104                              <1> .introStop:
   105 00006AB2 C605(91070000)FF    <1>     mov byte [haltDOS], -1  ;Set crap out byte...
   106 00006AB9 488D35D5020000      <1>     lea rsi, .fatalHalt     ;Get the ptr
   107 00006AC0 BB19000000          <1>     mov ebx, fatalHaltL     ;Get the length
   108 00006AC5 E896010000          <1>     call .writeExceptionMessage
   109                              <1> .introEnd:
   110 00006ACA 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   111 00006AD1 E858010000          <1>     call .printbyte ;Store the error code in the byte buffer
   112 00006AD6 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   113 00006ADD BB02000000          <1>     mov ebx, 2  ;Print the two nybbles
   114 00006AE2 E879010000          <1>     call .writeExceptionMessage
   115                              <1> 
   116 00006AE7 488D35A4020000      <1>     lea rsi, .fatal2
   117 00006AEE BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   118 00006AF3 E868010000          <1>     call .writeExceptionMessage
   119                              <1> 
   120 00006AF8 80F901              <1>     cmp cl, 1
   121 00006AFB 0F8793000000        <1>     ja .cpuextendederror    ;rax contains error code, or extra cr2 value
   122                              <1> .cpurollprint:
   123 00006B01 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   124 00006B08 488B1424            <1>     mov rdx, qword [rsp]    ;Get address
   125                              <1> ;Takes whats in rdx, rols left by one byte, prints al
   126 00006B0C B108                <1>     mov cl, 8    ;8 bytes
   127                              <1> .cpurollprint1:
   128 00006B0E 48C1C208            <1>     rol rdx, 8
   129 00006B12 88D0                <1>     mov al, dl
   130 00006B14 52                  <1>     push rdx
   131 00006B15 E814010000          <1>     call .printbyte
   132 00006B1A 5A                  <1>     pop rdx
   133 00006B1B FEC9                <1>     dec cl
   134 00006B1D 75EF                <1>     jnz .cpurollprint1
   135                              <1> 
   136 00006B1F BB10000000          <1>     mov ebx, 16 ;Print the 16 nybbles
   137 00006B24 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   138 00006B2B E830010000          <1>     call .writeExceptionMessage
   139                              <1> 
   140 00006B30 BB03000000          <1>     mov ebx, crlfL
   141 00006B35 488D3572020000      <1>     lea rsi, .crlf
   142 00006B3C E81F010000          <1>     call .writeExceptionMessage    
   143                              <1> 
   144 00006B41 F605(91070000)FF    <1>     test byte [haltDOS], -1
   145 00006B48 7534                <1>     jnz .fatalStop
   146 00006B4A E8FC000000          <1>     call .readInputChar
   147                              <1>     ;Set error code to General Failure
   148 00006B4F 66C705(0B040000)1F- <1>     mov word [errorExCde], errGF
   148 00006B57 00                  <1>
   149 00006B58 C605(0D040000)04    <1>     mov byte [errorAction], eActAbt
   150 00006B5F C605(0E040000)07    <1>     mov byte [errorClass], eClsAppFlt
   151 00006B66 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   152 00006B6D B8FF4C0000          <1>     mov eax, 4cFFh
   153 00006B72 C605(8C040000)FF    <1>     mov byte [ctrlCExit], -1
   154                              <1>     ;If a errGF error code and ctrlC exit and the extended error
   155                              <1>     ; setup as above, chances are it was a CPU error
   156 00006B79 E9E4090000          <1>     jmp functionDispatch    ;Call Int 21h politely, clean up resources
   157                              <1> .fatalStop:
   158                              <1> ;This is called if inDOS > 1 or NMI occured
   159                              <1> ;Freezes the machine
   160 00006B7E B800820000          <1>     mov eax, 8200h  ;Exit all critical sections
   161 00006B83 CD2A                <1>     int 2Ah
   162 00006B85 E8600B0000          <1>     call dosCrit1Enter  ;Get the lock to internal DOS structures
   163 00006B8A E86F0B0000          <1>     call dosCrit2Enter  ;Get the lock to drivers
   164 00006B8F FA                  <1>     cli                 ;Halt all interrupts
   165                              <1> .fatalLp:
   166 00006B90 F390                <1>     pause
   167 00006B92 EBFC                <1>     jmp short .fatalLp  ;Stay here forever, we cant guarantee anything anymore!
   168                              <1> .cpuextendederror:
   169 00006B94 5A                  <1>     pop rdx
   170 00006B95 48FFC9              <1>     dec rcx
   171 00006B98 51                  <1>     push rcx
   172 00006B99 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   173 00006BA0 B102                <1>     mov cl, 2    ;CAN CHANGE TO 4 BYTES IN THE FUTURE
   174 00006BA2 86D6                <1>     xchg dl, dh   
   175                              <1> .pr1:
   176 00006BA4 88D0                <1>     mov al, dl
   177 00006BA6 52                  <1>     push rdx
   178 00006BA7 E882000000          <1>     call .printbyte
   179 00006BAC 5A                  <1>     pop rdx
   180 00006BAD C1CA08              <1>     ror edx, 8    ;Print just dx for now
   181 00006BB0 FEC9                <1>     dec cl
   182 00006BB2 75F0                <1>     jnz .pr1
   183                              <1> 
   184 00006BB4 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   185 00006BBB BB04000000          <1>     mov ebx, 4  ;Print four nybbles
   186 00006BC0 E89B000000          <1>     call .writeExceptionMessage
   187                              <1> 
   188 00006BC5 488D35C6010000      <1>     lea rsi, .fatal2
   189 00006BCC BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   190 00006BD1 E88A000000          <1>     call .writeExceptionMessage
   191                              <1> 
   192 00006BD6 59                  <1>     pop rcx    ;Bring the comparison value back into rcx
   193 00006BD7 48FFC9              <1>     dec rcx
   194 00006BDA 0F8421FFFFFF        <1>     jz .cpurollprint
   195                              <1> 
   196 00006BE0 B108                <1>     mov cl, 8   ;16 nybbles
   197 00006BE2 0F20D2              <1>     mov rdx, cr2    ;Get page fault address
   198 00006BE5 488D3D(1E050000)    <1>     lea rdi, extErrByteBuf
   199                              <1> .pr2:
   200 00006BEC 48C1C208            <1>     rol rdx, 8    ;Print rdx
   201 00006BF0 88D0                <1>     mov al, dl
   202 00006BF2 52                  <1>     push rdx
   203 00006BF3 E836000000          <1>     call .printbyte
   204 00006BF8 5A                  <1>     pop rdx
   205 00006BF9 FEC9                <1>     dec cl
   206 00006BFB 75EF                <1>     jnz .pr2
   207                              <1> 
   208 00006BFD 488D35(1E050000)    <1>     lea rsi, extErrByteBuf
   209 00006C04 BB10000000          <1>     mov ebx, 16
   210 00006C09 E852000000          <1>     call .writeExceptionMessage
   211                              <1> 
   212 00006C0E 488D357D010000      <1>     lea rsi, .fatal2
   213 00006C15 BB03000000          <1>     mov ebx, fatal2L  ;Print the colon string
   214 00006C1A E841000000          <1>     call .writeExceptionMessage
   215                              <1> 
   216 00006C1F E9DDFEFFFF          <1>     jmp .cpurollprint
   217                              <1> 
   218                              <1> 
   219                              <1> .char:    ;Print a single character
   220 00006C24 488D1D6D000000      <1>     lea rbx, .ascii
   221 00006C2B D7                  <1>     xlatb    ;point al to entry in ascii table, using al as offset into table
   222 00006C2C AA                  <1>     stosb   ;Store the byte in the buffer and inc rdi
   223 00006C2D C3                  <1>     ret
   224                              <1> .printbyte:
   225 00006C2E 88C2                <1>     mov dl, al            ;save byte in dl
   226 00006C30 6625F000            <1>     and ax, 00F0h        ;Hi nybble
   227 00006C34 6681E20F00          <1>     and dx, 000Fh        ;Lo nybble
   228 00006C39 66C1E804            <1>     shr ax, 4            ;shift one hex place value pos right
   229 00006C3D E8E2FFFFFF          <1>     call .char
   230 00006C42 6689D0              <1>     mov ax, dx            ;mov lo nybble, to print
   231 00006C45 E8DAFFFFFF          <1>     call .char
   232 00006C4A C3                  <1>     ret        
   233                              <1> 
   234                              <1> 
   235                              <1> .readInputChar:
   236 00006C4B C605(ED040000)04    <1>     mov byte [critReqPkt + ioReqPkt.cmdcde], drvREAD    ;Wait for a char!
   237 00006C52 488D35(1C050000)    <1>     lea rsi, singleIObyt
   238 00006C59 BB01000000          <1>     mov ebx, 1  ;Read one char
   239 00006C5E EB07                <1>     jmp short .ioException
   240                              <1> .writeExceptionMessage:
   241                              <1> ;Called with ebx=Number of chars to print, rsi -> String to print
   242 00006C60 C605(ED040000)08    <1>     mov byte [critReqPkt + ioReqPkt.cmdcde], drvWRITE
   243                              <1> .ioException:
   244 00006C67 C605(EB040000)2A    <1>     mov byte [critReqPkt + ioReqPkt.hdrlen], ioReqPkt_size
   245 00006C6E 66C705(EE040000)00- <1>     mov word [critReqPkt + ioReqPkt.status], 0
   245 00006C76 00                  <1>
   246 00006C77 891D(01050000)      <1>     mov dword [critReqPkt + ioReqPkt.tfrlen], ebx
   247 00006C7D 488D1D(EB040000)    <1>     lea rbx, critReqPkt
   248 00006C84 488935(F9040000)    <1>     mov qword [critReqPkt + ioReqPkt.bufptr], rsi
   249 00006C8B 488B35(53000000)    <1>     mov rsi, qword [vConPtr]
   250 00006C92 E822010000          <1>     call goDriver
   251                              <1>     return
    13                              <2> %%_ret:
    14 00006C97 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   252                              <1> 
   253                              <1> 
   254                              <1> ;Error messages
   255 00006C98 303132333435363738- <1> .ascii:    db '0123456789ABCDEF'
   255 00006CA1 39414243444546      <1>
   256 00006CA8 0D0A0A202020202020- <1> .fatalt0:  db CR,LF,LF,"        SCP/DOS EXCEPTION DETECTED!",CR,LF,LF
   256 00006CB1 20205343502F444F53- <1>
   256 00006CBA 20455843455054494F- <1>
   256 00006CC3 4E2044455445435445- <1>
   256 00006CCC 44210D0A0A          <1>
   257                              <1> fatalt0L   equ $ - .fatalt0
   258                              <1> 
   259                              <1> .fatal1:   
   260 00006CD1 202020204120706F74- <1>     db "    A potentially fatal error has been detected",CR,LF
   260 00006CDA 656E7469616C6C7920- <1>
   260 00006CE3 666174616C20657272- <1>
   260 00006CEC 6F7220686173206265- <1>
   260 00006CF5 656E20646574656374- <1>
   260 00006CFE 65640D0A            <1>
   261 00006D02 20202020616E642074- <1>     db "    and the current application must be terminated.",CR,LF,LF
   261 00006D0B 68652063757272656E- <1>
   261 00006D14 74206170706C696361- <1>
   261 00006D1D 74696F6E206D757374- <1>
   261 00006D26 206265207465726D69- <1>
   261 00006D2F 6E617465642E0D0A0A  <1>
   262 00006D38 202020205072657373- <1>     db "    Press any key to continue or CTRL+ALT+DEL to restart the machine."
   262 00006D41 20616E79206B657920- <1>
   262 00006D4A 746F20636F6E74696E- <1>
   262 00006D53 7565206F7220435452- <1>
   262 00006D5C 4C2B414C542B44454C- <1>
   262 00006D65 20746F207265737461- <1>
   262 00006D6E 727420746865206D61- <1>
   262 00006D77 6368696E652E        <1>
   263 00006D7D 0D0A0A202020205359- <1>     db CR,LF, LF,"    SYSTEM ERROR: "   ;Print standard Error message here
   263 00006D86 5354454D204552524F- <1>
   263 00006D8F 523A20              <1>
   264                              <1> fatal1L equ $ - .fatal1
   265                              <1> 
   266 00006D92 203A20              <1> .fatal2:   db " : "
   267                              <1> fatal2L    equ $ - .fatal2
   268                              <1> 
   269                              <1> ;The below error is displayed is inDOS > 1 or NMI occured
   270 00006D95 202020205343502F44- <1> .fatalHalt: db "    SCP/DOS SYSTEM STOP: "
   270 00006D9E 4F532053595354454D- <1>
   270 00006DA7 2053544F503A20      <1>
   271                              <1> fatalHaltL equ $ - .fatalHalt
   272 00006DAE 0D0A0A              <1> .crlf:  db CR,LF,LF
   273                              <1> crlfL  equ $ - .crlf
    51                                  %include "./src/Kernel/Core/dosPrim.asm"
     1                              <1> ;Driver Primitives, functions for Disk IO and calling a device driver
     2                              <1> ; are placed here (Int 25h Int 26h and goDriver)
     3                              <1> 
     4                              <1> dosDefCritErrHdlr:
     5                              <1> ;The DOS default critical error handler always returns FAIL
     6 00006DB1 B003                <1>     mov al, critFail
     7 00006DB3 48CF                <1>     iretq
     8                              <1> goDriverChar:
     9                              <1> ;Shortcut for Char requests, make a driver request
    10                              <1> ; with rsi pointing to the SFT entry as qPtr is the driver pointer
    11 00006DB5 488B7607            <1>     mov rsi, qword [rsi + sft.qPtr]
    12                              <1> goDriver:   ;Executes the driver packet pointed to by rbx
    13                              <1> ;Input: rsi = Ptr to the driver to handle the call!
    14                              <1> ;       rbx = Ptr to the request header for the driver call!
    15 00006DB9 E840090000          <1>     call dosCrit2Enter
    16 00006DBE FF560A              <1>     call qword [rsi + drvHdr.strPtr]  ;Passing rbx through here
    17 00006DC1 FF5612              <1>     call qword [rsi + drvHdr.intPtr]
    18 00006DC4 E83F090000          <1>     call dosCrit2Exit
    19                              <1>     return
    13                              <2> %%_ret:
    14 00006DC9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> 
    21                              <1> ;The NUL driver lives here as it is implemented by the Kernel by default!
    22                              <1> nulStrat:
    23 00006DCA 66C743030001        <1>     mov word [rbx + drvReqPkt.status], drvDonStatus    ;Set done bit directly
    24                              <1> nulIntr:
    25                              <1>     return
    13                              <2> %%_ret:
    14 00006DD0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> 
    27                              <1> setupPhysicalDiskRequest:
    28                              <1> ;Ensure that al has valid disk number
    29                              <1> ;Prepares working vars with data (Drv, DPB and CDS)
    30                              <1> ;If CF=NC, rbp = DPB ptr.
    31                              <1> ;If CF=CY, exit error
    32 00006DD1 84C0                <1>     test al, al
    33 00006DD3 723F                <1>     jc .diskError
    34 00006DD5 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
    35 00006DDB 7337                <1>     jae .diskError
    36 00006DDD 50                  <1>     push rax
    37 00006DDE FEC0                <1>     inc al  ;Get 1 based number for drive for get CDS
    38 00006DE0 E813050000          <1>     call getCDS ;Gets Current CDS in Working CDS variable
    39 00006DE5 58                  <1>     pop rax
    40 00006DE6 7235                <1>     jc .error
    41 00006DE8 8805(09070000)      <1>     mov byte [workingDrv], al   ;Save al as the working drive number
    42 00006DEE 488B2D(12070000)    <1>     mov rbp, qword [workingCDS]  ;Get the current CDS pointer
    43 00006DF5 48F7454300800000    <1>     test qword [rbp + cds.wFlags], cdsRedirDrive   ;On a network?
    44 00006DFD 750A                <1>     jnz .netError
    45 00006DFF 488B6D45            <1>     mov rbp, qword [rbp + cds.qDPBPtr]  ;Get the DPB pointer for request
    46 00006E03 E8C0030000          <1>     call setWorkingDPB ;Save the DPB as the working DPB
    47                              <1>     return
    13                              <2> %%_ret:
    14 00006E08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    48                              <1> .netError:
    49 00006E09 66C705(0B040000)32- <1>     mov word [errorExCde], errNoNet ;Network request not supported
    49 00006E11 00                  <1>
    50 00006E12 EB09                <1>     jmp short .error
    51                              <1> .diskError:
    52 00006E14 66C705(0B040000)0F- <1>     mov word [errorExCde], errBadDrv
    52 00006E1C 00                  <1>
    53                              <1> .error: ;This error setting needs to remain as is to allow for Int 25/46
    54 00006E1D C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    55 00006E24 C605(0D040000)07    <1>     mov byte [errorAction], eActRetUsr
    56 00006E2B C605(0E040000)09    <1>     mov byte [errorClass], eClsBadFmt
    57 00006E32 F9                  <1>     stc
    58                              <1>     return
    13                              <2> %%_ret:
    14 00006E33 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    59                              <1> 
    60                              <1> setupAbsDiskEntry:
    61                              <1> ;Prepares to sets up the CDS and DPB for the request
    62 00006E34 FE05(08040000)      <1>     inc byte [inDOS]
    63 00006E3A FB                  <1>     sti ;Renable interrupts once inDOS and RSP are set
    64 00006E3B FC                  <1>     cld ;Set string ops in the right direction
    65 00006E3C E890FFFFFF          <1>     call setupPhysicalDiskRequest
    66                              <1>     retc    ;Error exit
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006E41 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006E43 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    67 00006E44 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;We prob. will invalidate
    68 00006E4B 56                  <1>     push rsi
    69 00006E4C 50                  <1>     push rax
    70 00006E4D 488D35(1E050000)    <1>     lea rsi, buffer1  ;Point to one of the pathspaces
    71 00006E54 8806                <1>     mov byte [rsi], al  ;Construct a path
    72 00006E56 800641              <1>     add byte [rsi], "A" ;Convert to ASCII char
    73 00006E59 66C746013A00        <1>     mov word [rsi + 1], ":" ;Path Colon and terminating zero
    74 00006E5F F8                  <1>     clc
    75                              <1> ;++++++++++++++++++++++++++++
    76                              <1> ;CRITICAL ENTRY, CHECK IF CAN DO DIRECT DISK IO!
    77                              <1> ;Entered with path in rsi (ah=03h)
    78 00006E60 B800030000          <1>     mov eax, 0300h  
    79 00006E65 CD2A                <1>     int 2Ah ;If ret with CF=CY, DO NOT PROCEED WITH ACCESS
    80                              <1> ;++++++++++++++++++++++++++++
    81 00006E67 58                  <1>     pop rax
    82 00006E68 5E                  <1>     pop rsi
    83                              <1> .exit:
    84 00006E69 729E                <1>     jc setupPhysicalDiskRequest.netError    ;Recycle error
    85                              <1>     return
    13                              <2> %%_ret:
    14 00006E6B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> absDiskWrite:       ;Int 26h
    88                              <1> ;al = Drive number
    89                              <1> ;rbx = Memory Buffer address to read from
    90                              <1> ;ecx = Number of sectors to write
    91                              <1> ;rdx = Start LBA to write to
    92 00006E6C FA                  <1>     cli
    93 00006E6D 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
    94 00006E74 488D25(D8190000)    <1>     lea rsp, DiskStakTop
    95 00006E7B 55                  <1>     push rbp
    96 00006E7C 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
    97 00006E7D E8B2FFFFFF          <1>     call setupAbsDiskEntry
    98 00006E82 7252                <1>     jc absDiskExit
    99 00006E84 E86D020000          <1>     call primReqWriteSetup
   100 00006E89 EB1D                <1>     jmp short absDiskReadWriteCommon
   101                              <1> absDiskRead:        ;Int 25h
   102                              <1> ;al = Drive number
   103                              <1> ;rbx = Memory Buffer address to write to
   104                              <1> ;ecx = Number of sectors to read
   105                              <1> ;rdx = Start LBA to read from
   106 00006E8B FA                  <1>     cli 
   107 00006E8C 488925(7B040000)    <1>     mov qword [oldRSP], rsp ;Save the stack pointer in the var space
   108 00006E93 488D25(D8190000)    <1>     lea rsp, DiskStakTop
   109 00006E9A 55                  <1>     push rbp    ;Save to use rbp as DPB pointer
   110 00006E9B 53                  <1>     push rbx    ;Save to use rbx as the driver pointer
   111 00006E9C E893FFFFFF          <1>     call setupAbsDiskEntry
   112 00006EA1 7233                <1>     jc absDiskExit
   113 00006EA3 E859020000          <1>     call primReqReadSetup   ;Setup request header and get reqhdr in rbx
   114                              <1> absDiskReadWriteCommon:
   115                              <1> ;Entered with the appropriate function number in ah
   116                              <1> ; and primary request header in rbx
   117 00006EA8 E859000000          <1>     call absDiskDriverCall
   118 00006EAD 7427                <1>     jz absDiskExit  ;Skip error code checking
   119 00006EAF 8A05(C4040000)      <1>     mov al, byte [primReqPkt + ioReqPkt.status] ;Get low byte into al
   120                              <1>     ;DOS uses the following pairs in a table
   121                              <1>     ;AH/AL= 80/02, 40/06, 02/0C, 10/04, 04/08, 03/00
   122 00006EB5 B480                <1>     mov ah, 80h ;Attachment failure
   123 00006EB7 3C0C                <1>     cmp al, 0Ch ;Gen error
   124 00006EB9 741A                <1>     je .absExit
   125 00006EBB B440                <1>     mov ah, 40h ;Seek error
   126 00006EBD 3C06                <1>     cmp al, 06h
   127 00006EBF 7414                <1>     je .absExit
   128 00006EC1 B408                <1>     mov ah, 08h ;Bad CRC
   129 00006EC3 3C04                <1>     cmp al, 04h
   130 00006EC5 740E                <1>     je .absExit
   131 00006EC7 B404                <1>     mov ah, 04h ;Sector not found
   132 00006EC9 3C08                <1>     cmp al, 08h
   133 00006ECB 7408                <1>     je .absExit
   134 00006ECD 30E4                <1>     xor ah, ah  ;Write Protect Violation
   135 00006ECF 84C0                <1>     test al, al
   136 00006ED1 7402                <1>     je .absExit
   137 00006ED3 B402                <1>     mov ah, 02h ;Other Error
   138                              <1> .absExit:
   139 00006ED5 F9                  <1>     stc
   140                              <1> absDiskExit:
   141 00006ED6 5B                  <1>     pop rbx
   142 00006ED7 5D                  <1>     pop rbp
   143 00006ED8 FA                  <1>     cli
   144 00006ED9 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]
   145 00006EE0 FB                  <1>     sti ;Reenable interrupts
   146 00006EE1 488D0D0D000000      <1>     lea rcx, absStackJuggle
   147 00006EE8 9C                  <1>     pushfq
   148 00006EE9 5A                  <1>     pop rdx ;Get the current flags
   149 00006EEA 48870C24            <1>     xchg qword [rsp], rcx   ;Get the old return address in rcx
   150 00006EEE 4887542410          <1>     xchg rdx, qword [rsp + 2*8]  ;Swap old flags with current flags
   151 00006EF3 48CF                <1>     iretq ;Return from interrupt (to align the stack as needed)
   152                              <1> absStackJuggle:
   153 00006EF5 FA                  <1>     cli
   154 00006EF6 52                  <1>     push rdx    ;Push the flags on the stack
   155 00006EF7 51                  <1>     push rcx    ;Push the return address on the stack
   156 00006EF8 9C                  <1>     pushfq
   157 00006EF9 31C9                <1>     xor ecx, ecx  ;Zero the registers without affecting the flags
   158 00006EFB 89CA                <1>     mov edx, ecx
   159 00006EFD FE0D(08040000)      <1>     dec byte [inDOS]    ;Only now do we leave DOS
   160 00006F03 9D                  <1>     popfq
   161 00006F04 FB                  <1>     sti
   162                              <1>     return
    13                              <2> %%_ret:
    14 00006F05 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   163                              <1> 
   164                              <1> absDiskDriverCall:
   165                              <1> ;Input: rbp = Transacting DPB, ecx = Number of sectors to transfer
   166                              <1> ;       rbx = Request header address
   167                              <1> ;Output: ZF=ZE => No error, ZF=NZ => Error 
   168                              <1> ;       eax = Status word from request
   169                              <1> ;       ecx = Number of sectors transferred
   170 00006F06 56                  <1>     push rsi
   171                              <1>     ;Get number of sectors to transfer in ecx (if not in ecx already)
   172 00006F07 8B0D(D7040000)      <1>     mov ecx, dword [primReqPkt + ioReqPkt.tfrlen]
   173                              <1>     ;Prepare for goDriver now
   174 00006F0D 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Point to device driver
   175 00006F11 E8A3FEFFFF          <1>     call goDriver   ;Make request
   176 00006F16 5E                  <1>     pop rsi
   177 00006F17 8B05(D7040000)      <1>     mov eax, dword [primReqPkt + ioReqPkt.tfrlen]   ;Get actual num tfrd
   178 00006F1D 29C1                <1>     sub ecx, eax    ;Get positive difference of the two 
   179 00006F1F 0FB705(C4040000)    <1>     movzx eax, word [primReqPkt + ioReqPkt.status]
   180 00006F26 66A90080            <1>     test ax, drvErrStatus   ;Is error bit set?
   181                              <1>     return
    13                              <2> %%_ret:
    14 00006F2A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   182                              <1> 
   183                              <1> getDiskDPB:
   184                              <1> ;Gets the disk DPB if the Disk is valid
   185                              <1> ;Otherwise will return a pointer to the drive DPB
   186                              <1> ;Called with rdi pointing to the CDS
   187                              <1> ;Output:
   188                              <1> ;   CF=NC => RBP=WorkingDPB=DPBptr, CF=CY => Error exit
   189 00006F2B 488B6F45            <1>     mov rbp, qword [rdi + cds.qDPBPtr]  ;Get current DPB pointer
   190                              <1> .sftEp:   ;Entry point if updating DPB for an SFT entry!
   191 00006F2F 57                  <1>     push rdi    ;Save the CDS/SFT ptr
   192 00006F30 0FB64500            <1>     movzx eax, byte [rbp + dpb.bDriveNumber]   ;Get 0 based drive number
   193 00006F34 8805(09070000)      <1>     mov [workingDrv], al    ;Save working drive number in working drive variable
   194 00006F3A E889020000          <1>     call setWorkingDPB
   195 00006F3F E848000000          <1>     call ensureDiskValid   ;Ensures the DPB is up to date and rebuilds if needed
   196 00006F44 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] ;If a driver didn't save rbp, get it back!
   197 00006F4B 723D                <1>     jc .exit
   198 00006F4D 753B                <1>     jnz .exit   ;If we jump, CF=NC!
   199                              <1>     ;Here re-init all CDS's that refer to the dpb if the disk was switched.
   200 00006F4F 51                  <1>     push rcx
   201 00006F50 0FB60D(78000000)    <1>     movzx ecx, byte [lastdrvNum]
   202 00006F57 488B3D(65000000)    <1>     mov rdi, qword [cdsHeadPtr] ;Get start of CDS array
   203                              <1> .checkCDS:
   204                              <1> ;Redir are skipped as they are not associated with a DPB
   205 00006F5E 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
   206 00006F64 7517                <1>     jnz .next
   207 00006F66 48396F45            <1>     cmp qword [rdi + cds.qDPBPtr], rbp  ;If the dpb ptr matches, reset
   208 00006F6A 7511                <1>     jne .next   ;Else, goto next
   209 00006F6C C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0     ;Reset start cluster!
   210 00006F73 C6470300            <1>     mov byte [rdi + cds.sCurrentPath + 3], 0    ;Reset the path too :)
   211 00006F77 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2
   212                              <1> .next:
   213 00006F7D 4881C75F000000      <1>     add rdi, cds_size
   214 00006F84 FFC9                <1>     dec ecx
   215 00006F86 75D6                <1>     jnz .checkCDS
   216 00006F88 59                  <1>     pop rcx
   217 00006F89 F8                  <1>     clc     ;Clear CF (rare but the cmp + add combo might set CF)
   218                              <1> .exit:
   219 00006F8A 5F                  <1>     pop rdi     ;Get back the CDS/SFT ptr
   220                              <1>     return
    13                              <2> %%_ret:
    14 00006F8B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   221                              <1> 
   222                              <1> ensureDiskValid:
   223                              <1> ;Do a media check, if need be to rebuild the DPB, do it!
   224                              <1> ;On entry: rbp = DPB (and working DPB = DPB)
   225                              <1> ;On exit: CF=NC => Passed, CF=CY => Fail
   226                              <1> ; IF CF=NC => ZF=ZE=> DPB Rebuilt, ZF=NZ => DPB not rebuilt
   227                              <1> ;   rbp preserved!
   228 00006F8C E8B9010000          <1>     call primReqMedCheckSetup    ;Prepare disk io packet for media check
   229                              <1> ;Return in rbx the req hdr address
   230 00006F91 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rdx to driverhdr
   231 00006F95 E81FFEFFFF          <1>     call goDriver   ;Request!
   232 00006F9A 0FB77B03            <1>     movzx edi, word [rbx + mediaCheckReqPkt.status]
   233 00006F9E F7C700800000        <1>     test edi, drvErrStatus
   234 00006FA4 0F85DB000000        <1>     jnz .diskDrvCritErr
   235 00006FAA 0FB605(09070000)    <1>     movzx eax, byte [workingDrv]   ;Get the drive number for test
   236 00006FB1 866524              <1>     xchg byte [rbp + dpb.bAccessFlag], ah   ;Clear access flag, get old flag
   237 00006FB4 3805(E1190000)      <1>     cmp byte [rebuildDrv], al   ;Do we need to rebuild this drive?
   238 00006FBA 750C                <1>     jne .notForce
   239                              <1> ;Here we are forced to rebuild the DPB. In principle, the medium has
   240                              <1> ; not changed but the volume label must be updated. 
   241                              <1> ;The driver can use this opportunity to synchronise its BPB with the 
   242                              <1> ; new label.
   243                              <1> ;We jump directly to skip buffer checking as the rebuilding of the BPB is not
   244                              <1> ; such that we invalidate the buffers.
   245 00006FBC C605(E1190000)FF    <1>     mov byte [rebuildDrv], -1   ;Reset this flag as we are doing our job.
   246 00006FC3 E959000000          <1>     jmp .resetDPB
   247                              <1> .notForce:
   248                              <1> ;Note dpb access flag is either 1 or 0.
   249                              <1> ;If either the check media byte or the dpb access flag is -1, rebuild bpb.
   250                              <1> ;Else assume here access flag is 0. If medret is neq 0, return. Else, 
   251                              <1> ; check buffers.
   252 00006FC8 0A630E              <1>     or ah, byte [rbx + mediaCheckReqPkt.medret] ;Carry flag always cleared!
   253 00006FCB 7823                <1>     js .mediaChanged      ;If either byte is -1, media changed
   254                              <1>     retnz                       ;If not zero, we return. Media not changed!
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00006FCD 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00006FCF C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   255                              <1> ;Here we check for any dirty buffers. If dirty buffer found, dont get new BPB.
   256 00006FD0 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   257                              <1> .findDirtyBuffer:
   258 00006FD7 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]              ;Is buffer for us?
   259 00006FDA 7508                <1>     jne .gotoNextBuffer ;If no, goto next buffer
   260 00006FDC F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is buffer dirty?
   261 00006FE0 7402                <1>     jz .gotoNextBuffer  ;If no, goto next buffer
   262 00006FE2 F8                  <1>     clc 
   263                              <1>     return
    13                              <2> %%_ret:
    14 00006FE3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   264                              <1> .gotoNextBuffer:
   265 00006FE4 488B3F              <1>     mov rdi, qword [rdi]    ;Get buffer link pointer
   266 00006FE7 4881FFFFFFFFFF      <1>     cmp rdi, -1
   267 00006FEE 75E7                <1>     jne .findDirtyBuffer        ;Now check the next buffer
   268                              <1> ;If we found no dirty buffers for this drive we assume the media has changed.
   269                              <1> ;Don't skip the below as it will put a "clean" buffer at the head
   270                              <1> ; of the chain for us.
   271                              <1> .mediaChanged:
   272                              <1> ;If we have changed media, check for dirty buffers. If we have any
   273                              <1> ; we must throw an error to tell the user to replace the media back.
   274                              <1> ;Now use the reference bit to keep track of which buffers we've gone through.
   275 00006FF0 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Reset number of free to unknown
   276 00006FF7 E8E596FFFF          <1>     call markBuffersAsUnreferenced  ;We're going to walk through so clear ref bit
   277                              <1> .dirtyLoop:
   278 00006FFC 804F0920            <1>     or byte [rdi + bufferHdr.bufferFlags], refBuffer    ;Set this buffer as referenced
   279 00007000 3A4708              <1>     cmp al, byte [rdi + bufferHdr.driveNumber]          ;Is this buffer for us?
   280 00007003 7515                <1>     jne .skipDirtyCheck
   281 00007005 F6470940            <1>     test byte [rdi + bufferHdr.bufferFlags], dirtyBuffer    ;Is this dirty?
   282 00007009 0F85A6000000        <1>     jnz .dirtyBufferError   ;Signal bad disk change if so!
   283                              <1> ;Set reference bit and drive to free
   284 0000700F 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], (refBuffer << 8) | freeBuffer 
   285 00007015 E8E196FFFF          <1>     call makeBufferMostRecentlyUsedGetNext  ;Move this up, get next buffer
   286                              <1> .skipDirtyCheck:
   287 0000701A E8EA96FFFF          <1>     call findUnreferencedBuffer ;Get the next unreferenced buffer
   288 0000701F 75DB                <1>     jnz .dirtyLoop  ;Now repeat for this buffer too
   289                              <1> .resetDPB:
   290                              <1> ;Start by checking if the MSD is ``IBM" style or normal
   291 00007021 488B7D1B            <1>     mov rdi, qword [rbp + dpb.qDriverHeaderPtr]
   292 00007025 66F747080020        <1>     test word [rdi + drvHdr.attrib], devDrvNotIBM
   293 0000702B 7512                <1>     jnz .dpbNotIbm
   294                              <1> ;Read the FAT into buffer
   295 0000702D B801000000          <1>     mov eax, 1              ;Read sector 1 into a buffer
   296 00007032 E8C499FFFF          <1>     call getBufForFat       ;Point rbx to the buffer
   297                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007037 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007039 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   298 0000703A 4889DF              <1>     mov rdi, rbx
   299 0000703D EB0F                <1>     jmp short .buildGetBPB              
   300                              <1> .dpbNotIbm:
   301                              <1> ;Get a buffer for the driver to use as scratch space
   302 0000703F 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   303 00007046 E85C97FFFF          <1>     call flushAndFreeBuffer
   304                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000704B 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 0000704D C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   305                              <1> .buildGetBPB:
   306 0000704E E823010000          <1>     call primReqGetBPBSetup  ;Prepare to get BPB, get request header in rbx
   307 00007053 488B751B            <1>     mov rsi, qword [rbp + dpb.qDriverHeaderPtr] ;Now point rsi to driverhdr
   308 00007057 E85DFDFFFF          <1>     call goDriver   ;Request!
   309 0000705C 0FB77B03            <1>     movzx edi, word [rbx + bpbBuildReqPkt.status]
   310 00007060 F7C700800000        <1>     test edi, drvErrStatus
   311 00007066 751D                <1>     jnz .diskDrvCritErr
   312                              <1>     ;Now rebuild the dpb fields for this drive
   313 00007068 488B7316            <1>     mov rsi, qword [rbx + bpbBuildReqPkt.bpbptr]    ;Get ptr to BPB
   314 0000706C 53                  <1>     push rbx
   315 0000706D E8180A0000          <1>     call createDPB  ;Modifies rbx and clears the free cluster count
   316 00007072 5B                  <1>     pop rbx
   317                              <1>     ;Adjust the buffer header information
   318 00007073 8B4513              <1>     mov eax, dword [rbp + dpb.dFATlength]
   319 00007076 894313              <1>     mov dword [rbx + bufferHdr.bufFATsize], eax
   320 00007079 8A4508              <1>     mov al, byte [rbp + dpb.bNumberOfFATs]
   321 0000707C 884312              <1>     mov byte [rbx + bufferHdr.bufFATcopy], al
   322 0000707F 30E4                <1>     xor ah, ah    ;Set ZF and clear CF
   323 00007081 886524              <1>     mov byte [rbp + dpb.bAccessFlag], ah ;DPB now ready to be used
   324                              <1>     return
    13                              <2> %%_ret:
    14 00007084 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   325                              <1> .diskDrvCritErr:
   326                              <1> ;Critical Errors fall through here
   327                              <1>     ;rbp has dpb ptr, di has status word, rsi points to the driver
   328 00007085 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Reset freecluster count
   329 0000708C 48892D(89070000)    <1>     mov qword [tmpDPBPtr], rbp  ;Save current DPB ptr here
   330                              <1>     ;mov ah, critRead | critFAT | critFailOK | critRetryOK
   331 00007093 B418                <1>     mov ah, critRead | critDOS | critFailOK | critRetryOK
   332 00007095 8825(68040000)      <1>     mov byte [Int24bitfld], ah  ;Save the permissions in var
   333 0000709B 400FB6FF            <1>     movzx edi, dil  ;Clear the upper bytes, save only error code
   334 0000709F E881F7FFFF          <1>     call diskDevErrBitfield ;Goto disk crit error, but with bitfield set
   335 000070A4 488B2D(89070000)    <1>     mov rbp, qword [tmpDPBPtr]
   336 000070AB 3C01                <1>     cmp al, critRetry
   337 000070AD 0F84D9FEFFFF        <1>     je ensureDiskValid
   338                              <1> .errorExitBad:
   339 000070B3 F9                  <1>     stc     ;Set error flag to indicate fail
   340                              <1>     return  ;And exit
    13                              <2> %%_ret:
    14 000070B4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   341                              <1> 
   342                              <1> .dirtyBufferError:
   343                              <1> ;We can only enter this error if we returned media changed.
   344                              <1> ;We will never enter here if we returned media unknown.
   345 000070B5 55                  <1>     push rbp
   346 000070B6 488B6D1B            <1>     mov rbp, qword [rbp + dpb.qDriverHeaderPtr] ;Get the ptr to the driver
   347 000070BA 66F745080008        <1>     test word [rbp + drvHdr.attrib], devDrvHdlCTL
   348 000070C0 5D                  <1>     pop rbp
   349 000070C1 74F0                <1>     jz .errorExitBad    ;Just return fail if bit not set
   350                              <1>     ;rbp points to the dpb still
   351 000070C3 57                  <1>     push rdi
   352 000070C4 488B3D(D0040000)    <1>     mov rdi, qword [primReqPkt + mediaCheckReqPkt.desptr]   ;Get the pointer into rdi
   353 000070CB 48893D(0F040000)    <1>     mov qword [errorVolLbl], rdi    ;Save the erroring volume label pointer
   354 000070D2 5F                  <1>     pop rdi ;Get back the buffer pointer
   355 000070D3 C605(68040000)18    <1>     mov byte [Int24bitfld], critRead | critDOS | critRetryOK | critFailOK
   356                              <1> ;Do not touch the read/write flag as this is set by the read/write operation.
   357                              <1> ;It is meaningless in the error here, but may affect the message
   358                              <1> ; that comes up on the handler (not a big deal). Since we report a bad
   359                              <1> ; media change here, it should be obvious not to include the read/write 
   360                              <1> ; string.
   361 000070DA B80F000000          <1>     mov eax, drvBadDskChnge ;Set the driver error code to bad disk change
   362 000070DF E8D7F6FFFF          <1>     call diskDevErr
   363 000070E4 3C03                <1>     cmp al, critFail    ;Did the user select fail?
   364 000070E6 0F85A0FEFFFF        <1>     jne ensureDiskValid  ;If not, try again!
   365 000070EC B822000000          <1>     mov eax, errIDC     ;Else, report an invalid disk swap error!
   366 000070F1 E9BDFFFFFF          <1>     jmp .errorExitBad    ;and exit with CF set (often gets xlat to accden)
   367                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   368                              <1> ;           Primitive Driver Requests
   369                              <1> ;+++++++++++++++++++++++++++++++++++++++++++++++++
   370                              <1> ;First are Disk requests, then Char device requests
   371                              <1> ;All Disk Driver Requests come with at least rbp pointing to DPB
   372                              <1> ;All Char Requests come with rsi pointing to the Char device driver
   373                              <1> 
   374                              <1> primReqWriteSetup:
   375 000070F6 50                  <1>     push rax
   376 000070F7 B408                <1>     mov ah, drvWRITE    ;Command code
   377 000070F9 0225(D0030000)      <1>     add ah, byte [verifyFlag]   ;Add verify if needed to be added
   378 000070FF EB03                <1>     jmp short primReqRWCommon
   379                              <1> primReqReadSetup:
   380 00007101 50                  <1>     push rax
   381 00007102 B404                <1>     mov ah, drvREAD
   382                              <1> primReqRWCommon:
   383                              <1> ;Sets up the IO request packet with:
   384                              <1> ; rbp = DPB ptr | NullPtr if a char dev
   385                              <1> ; rbx = Data storage buffer ptr
   386                              <1> ; ecx = Number of sectors to transfer
   387                              <1> ; rdx = Starting sector to read/write from/to | Undefined if a char dev
   388                              <1> ; ~~~~ Set by entry function ~~~~ 
   389                              <1> ; ah = Command code
   390                              <1> ; All regs preserved EXCEPT rbx.
   391                              <1> ; Return: rbx = Transfer Address
   392 00007104 48891D(CF040000)    <1>     mov qword [primReqPkt + ioReqPkt.bufptr], rbx   ;Buffer
   393 0000710B 890D(D7040000)      <1>     mov dword [primReqPkt + ioReqPkt.tfrlen], ecx   ;Number of sectors/bytes
   394 00007111 C605(C1040000)2A    <1>     mov byte [primReqPkt + ioReqPkt.hdrlen], ioReqPkt_size
   395 00007118 2500FF0000          <1>     and eax, 0000FF00h  ;Clear the upper word (status word) and al
   396 0000711D 8905(C2040000)      <1>     mov dword [primReqPkt + ioReqPkt.unitnm], eax   ;Clear unit number field
   397 00007123 4885ED              <1>     test rbp, rbp   ;If RBP is the null ptr, skip the Disk fields
   398 00007126 7419                <1>     jz primReqCommonExit    ;If char request, exit!
   399                              <1>     ;Disk operations only here!
   400 00007128 488915(DB040000)    <1>     mov qword [primReqPkt + ioReqPkt.strtsc], rdx   ;Start sector
   401 0000712F 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   402 00007132 8805(CE040000)      <1>     mov byte [primReqPkt + ioReqPkt.medesc], al ;Store medesc!
   403 00007138 8A4501              <1>     mov al, byte [rbp + dpb.bUnitNumber]    ;Get the unit number
   404 0000713B 8805(C2040000)      <1>     mov byte [primReqPkt + ioReqPkt.unitnm], al ;Store the unit number
   405                              <1> primReqCommonExit:
   406                              <1> ;Returns in rbx the primary request header as these functions
   407                              <1> ; setup the request in the primary request header space
   408 00007141 58                  <1>     pop rax
   409 00007142 488D1D(C1040000)    <1>     lea rbx, primReqPkt ;Put in rbx the primary request header
   410                              <1>     return
    13                              <2> %%_ret:
    14 00007149 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   411                              <1> 
   412                              <1> primReqMedCheckSetup:
   413                              <1> ;Prepare the diskIO packet for mediacheck
   414                              <1> ;rbp has DPB pointer for device to check media on
   415 0000714A 50                  <1>     push rax
   416 0000714B C605(C1040000)17    <1>     mov byte [primReqPkt + mediaCheckReqPkt.hdrlen], mediaCheckReqPkt_size
   417 00007152 C605(C3040000)01    <1>     mov byte [primReqPkt + mediaCheckReqPkt.cmdcde], drvMEDCHK
   418                              <1> .cmn:
   419 00007159 8A4523              <1>     mov al, byte [rbp + dpb.bMediaDescriptor]
   420 0000715C 8805(CE040000)      <1>     mov byte [primReqPkt + mediaCheckReqPkt.medesc], al
   421 00007162 8A4500              <1>     mov al, byte [rbp + dpb.bDriveNumber]
   422 00007165 8805(C2040000)      <1>     mov byte [primReqPkt + mediaCheckReqPkt.unitnm], al
   423 0000716B 66C705(C4040000)00- <1>     mov word [primReqPkt + mediaCheckReqPkt.status], 0
   423 00007173 00                  <1>
   424 00007174 EBCB                <1>     jmp short primReqCommonExit
   425                              <1> 
   426                              <1> primReqGetBPBSetup:
   427                              <1> ;rbp has DPB pointer for device
   428                              <1> ;rdi has sector buffer header pointer for transfer
   429 00007176 50                  <1>     push rax
   430 00007177 488D4720            <1>     lea rax, qword [rdi + bufferHdr.dataarea]   ;Get the data area
   431 0000717B 488905(CF040000)    <1>     mov qword [primReqPkt + bpbBuildReqPkt.bufptr], rax
   432 00007182 C605(C1040000)1E    <1>     mov byte [primReqPkt + bpbBuildReqPkt.hdrlen], bpbBuildReqPkt_size
   433 00007189 C605(C3040000)02    <1>     mov byte [primReqPkt + bpbBuildReqPkt.cmdcde], drvBUILDBPB
   434 00007190 EBC7                <1>     jmp short primReqMedCheckSetup.cmn
   435                              <1> 
   436                              <1> primReqOpenSetup:
   437                              <1> ;al = unit number if a disk device. Undefined otherwise
   438 00007192 50                  <1>     push rax
   439 00007193 B40D                <1>     mov ah, drvOPEN
   440 00007195 EB03                <1>     jmp short primReqOCcommon
   441                              <1> primReqCloseSetup:
   442                              <1> ;al = unit number if a disk device. Undefined otherwise
   443 00007197 50                  <1>     push rax
   444 00007198 B40E                <1>     mov ah, drvCLOSE
   445                              <1> primReqOCcommon:
   446 0000719A C605(C1040000)0D    <1>     mov byte [primReqPkt + openReqPkt.hdrlen], openReqPkt_size
   447 000071A1 98                  <1>     cwde   ;Sign extend (but top bit is zero so zero extend)
   448 000071A2 8905(C2040000)      <1>     mov dword [primReqPkt + openReqPkt.unitnm], eax
   449                              <1>     ;Cover unit number (if disk drive, cmdcde and status)
   450 000071A8 E994FFFFFF          <1>     jmp primReqCommonExit   ;Now simply exit
   451                              <1> 
   452                              <1> secdReqCharIOReq:
   453                              <1> ;Sets up the request packet to transfer 1 byte to/from the singleIOByt buffer.
   454                              <1> ;Input:
   455                              <1> ; ah =  Data Request code (Read/Write/Write with Verify)
   456                              <1> ; ecx = Length of buffer
   457                              <1> ; rdi = Buffer pointer
   458                              <1> ;Output: 
   459                              <1> ; rbx = Transfer Address 
   460 000071AD 488D1D(97040000)    <1>     lea rbx, secdReqPkt
   461 000071B4 C6032A              <1>     mov byte [rbx + ioReqPkt.hdrlen], ioReqPkt_size
   462 000071B7 886302              <1>     mov byte [rbx + ioReqPkt.cmdcde], ah
   463 000071BA 66C743030000        <1>     mov word [rbx + ioReqPkt.status], 0
   464 000071C0 48897B0E            <1>     mov qword [rbx + ioReqPkt.bufptr], rdi
   465 000071C4 894B16              <1>     mov dword [rbx + ioReqPkt.tfrlen], ecx
   466                              <1>     return
    13                              <2> %%_ret:
    14 000071C7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   467                              <1> ;If the device which will process this request is a disk device
   468                              <1> ; then we will be requesting 1 sector of data to a disk buffer.
   469                              <1> ;Then we will read the appropriate byte from that buffer to the 
   470                              <1> ; singleIOByt buffer.
   471                              <1> ;Such a request will require additional setup with the following fields:
   472                              <1> ; .unitnm, .medesc, .bufptr, .strtsc
    52                                  %include "./src/Kernel/Core/dosUtils.asm"
     1                              <1> ;DOS utility functions 
     2                              <1> 
     3                              <1> ;Basic Drive related Utilities
     4                              <1> ;Any function which takes args in rax (or any subpart of it), has that 
     5                              <1> ; argument provided on the stack when called from Int 2Fh interface (when 
     6                              <1> ; that gets set up)
     7                              <1> 
     8                              <1> setWorkingDPB:
     9                              <1> ;Gets dpb in rbp and saves to workingDPB
    10 000071C8 48892D(0A070000)    <1>     mov qword [workingDPB], rbp
    11                              <1>     return
    13                              <2> %%_ret:
    14 000071CF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    12                              <1> 
    13                              <1> testCDSNet:
    14                              <1> ;Checks if the workingCDS is a redirector drive
    15                              <1> ;Returns: CF=NC => Not net
    16                              <1> ;         CF=CY => Network redirector
    17                              <1> ;         ZF=ZE => Net without CDS (UNC paths only)
    18                              <1> ;         ZF=NZ => Net with CDS (disk paths ok)
    19                              <1> ;         rdi = workingCDS ptr
    20 000071D0 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]
    21 000071D7 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;Net without CDS
    22 000071DE 7409                <1>     je .net
    23 000071E0 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive
    24 000071E6 7501                <1>     jnz .net ;Net with CDS
    25                              <1>     return  ;CF=NC => Not net
    13                              <2> %%_ret:
    14 000071E8 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    26                              <1> .net:
    27 000071E9 F9                  <1>     stc ;Set Net bit
    28                              <1>     return
    13                              <2> %%_ret:
    14 000071EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    29                              <1> 
    30                              <1> getDiskData:
    31                              <1> ;This function returns:
    32                              <1> ;al = sectors per cluster
    33                              <1> ;ah = media ID byte
    34                              <1> ;ebx = total clusters
    35                              <1> ;cx = bytes per sector
    36                              <1> ;edx = number of available clusters
    37                              <1> ;
    38                              <1> ;If CF=CY on exit, al contains the error code
    39 000071EB E8E0FFFFFF          <1>     call testCDSNet ;Test if its a netCDS and puts CDS ptr in rdi
    40 000071F0 7308                <1>     jnc .physical
    41                              <1>     ;Beep a redir request out
    42 000071F2 B80C110000          <1>     mov eax, 110Ch 
    43 000071F7 CD2F                <1>     int 2Fh
    44                              <1>     return
    13                              <2> %%_ret:
    14 000071F9 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    45                              <1> .physical:
    46                              <1> ;Now we must lock the structures
    47 000071FA C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk
    48 00007201 E8E4040000          <1>     call dosCrit1Enter  ;Enter class 1 critical section
    49 00007206 E820FDFFFF          <1>     call getDiskDPB ;Get disk dpb pointer in rbp for CDS in rdi
    50 0000720B 7223                <1>     jc .exit
    51 0000720D E8CB99FFFF          <1>     call findFreeClusterData    ;Get Free Cluster data in DPB
    52 00007212 721C                <1>     jc .exit
    53 00007214 55                  <1>     push rbp
    54 00007215 E80C95FFFF          <1>     call flushAllBuffersForDPB  ;To ensure FAT32 FSInfo sectors synced
    55 0000721A 5D                  <1>     pop rbp
    56 0000721B 8A4504              <1>     mov al, byte [rbp + dpb.bMaxSectorInCluster]
    57 0000721E FEC0                <1>     inc al  ;Since bMaxSectorInCluster is one less than the number of sec/clus
    58 00007220 8A6523              <1>     mov ah, byte [rbp + dpb.bMediaDescriptor]
    59 00007223 8B5D0F              <1>     mov ebx, dword [rbp + dpb.dMaxClusterAddr] ;This is the max cluster address
    60 00007226 FFCB                <1>     dec ebx ;Get the number of clusters
    61 00007228 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Save the value in ecx
    62 0000722C 8B5531              <1>     mov edx, dword [rbp + dpb.dFreeClustCnt]    ;Get # free clusters
    63 0000722F F8                  <1>     clc
    64                              <1> .exit:
    65 00007230 E8BF040000          <1>     call dosCrit1Exit
    66                              <1>     return
    13                              <2> %%_ret:
    14 00007235 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    67                              <1> 
    68                              <1> muxGetIntVector:    ;Int 2Fh AX=1202h
    69                              <1> ;Input: al = Interrupt number
    70                              <1> ;Output: rbx = Interrupt Vector
    71 00007236 50                  <1>     push rax    ;Preserve rax
    72 00007237 FA                  <1>     cli ;Halt interrupts
    73 00007238 0F010D(171A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
    74 0000723F 0FB6C0              <1>     movzx eax, al
    75 00007242 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
    76 00007246 480305(191A0000)    <1>     add rax, qword [dosIdtPtr.base]    
    77 0000724D 31DB                <1>     xor ebx, ebx
    78 0000724F 8B5808              <1>     mov ebx, dword [rax + 8]    ;Get bits 63...32
    79 00007252 48C1E310            <1>     shl rbx, 10h    ;Push the high dword high
    80 00007256 668B5806            <1>     mov bx, word [rax + 6]      ;Get bits 31...16
    81 0000725A 48C1E310            <1>     shl rbx, 10h    ;Push word 2 into posiiton
    82 0000725E 668B18              <1>     mov bx, word [rax]          ;Get bits 15...0
    83 00007261 FB                  <1>     sti
    84 00007262 58                  <1>     pop rax
    85                              <1>     return
    13                              <2> %%_ret:
    14 00007263 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    86                              <1> 
    87                              <1> getUserRegs:   ;Int 2Fh AX=1218h
    88                              <1> ;Returns ptr to user regs in rsi
    89 00007264 488B35(7B040000)    <1>     mov rsi, qword [oldRSP]
    90                              <1>     return
    13                              <2> %%_ret:
    14 0000726B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    91                              <1> 
    92                              <1> walkDPBchain:
    93                              <1> ;Called with al = 0 based drive number
    94                              <1> ;Returns in rsi a pointer to the DPB or if CF=CY, invalid drive number
    95 0000726C 488B35(3B000000)    <1>     mov rsi, qword [dpbHeadPtr]  ;Get variable pointing to first DPB
    96                              <1> .walk:
    97 00007273 4881FEFFFFFFFF      <1>     cmp rsi, -1
    98 0000727A 740A                <1>     je .exitBad
    99 0000727C 3806                <1>     cmp byte [rsi + dpb.bDriveNumber], al
   100 0000727E 7407                <1>     je .exit    ;Drive found
   101 00007280 488B7625            <1>     mov rsi, qword [rsi + dpb.qNextDPBPtr]  ;Go to next drive 
   102 00007284 EBED                <1>     jmp short .walk
   103                              <1> .exitBad:
   104 00007286 F9                  <1>     stc
   105                              <1> .exit:
   106                              <1>     return
    13                              <2> %%_ret:
    14 00007287 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> getCDSNotJoin:   
   108                              <1> ;Gets a drive CDS, sets it as working and checks it is not a join drive
   109                              <1> ;Input: al = 1-based drive number
   110                              <1> ;Output: al = 0-based drive number
   111                              <1> ;   CF=NC => Drive can be set as Current Drive (i.e. Join)
   112                              <1> ;   CF=CY => 0-based drive number invalid OR CDS returned with Join flags
   113                              <1> ;            set.
   114 00007288 E86B000000          <1>     call getCDS ;Setup working CDS DOS variable for this drive
   115 0000728D 7212                <1>     jc .exit    ;Carry the CF flag if not Physical or if al was too large
   116 0000728F 56                  <1>     push rsi
   117 00007290 488B35(12070000)    <1>     mov rsi, qword [workingCDS] ;Get CDS
   118 00007297 66F746430020        <1>     test word [rsi + cds.wFlags], cdsJoinDrive  ;Check if Join
   119 0000729D 5E                  <1>     pop rsi
   120 0000729E 7401                <1>     jz .exit
   121 000072A0 F9                  <1>     stc
   122                              <1> .exit:
   123                              <1>     return
    13                              <2> %%_ret:
    14 000072A1 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   124                              <1> 
   125                              <1> buildNewCDS:   ;Int 2Fh AX=121Fh
   126                              <1> ;If used with SDA CDS allows for direct disk access without needing to 
   127                              <1> ; actually use the real CDS. This prevents troubles when findnext on a 
   128                              <1> ; drive occurs the real CDS itself may have completely changed, i.e. 
   129                              <1> ; become unavailable. The SDA CDS becomes like the protoCDS of DOS 2 
   130                              <1> ; that was just an appendix of the DPB. Otherwise, can be used to init
   131                              <1> ; a new CDS or even a new complete CDS array!
   132                              <1> ;Input: al = Drive Letter for drive
   133                              <1> ;       workingCDS = Set to the CDS array slot for the drive
   134                              <1> ;Output: rdi = newly filled in workingCDS
   135                              <1> ;CF=NC => CDS valid and has a DPB
   136                              <1> ;CF=CY => Either drive letter not ok OR No DPB for drive
   137 000072A2 50                  <1>     push rax
   138 000072A3 2C40                <1>     sub al, "A"-1
   139 000072A5 3805(77000000)      <1>     cmp byte [numPhysVol], al    ;al must be bigger than # of block drives
   140 000072AB 488B3D(12070000)    <1>     mov rdi, qword [workingCDS] ;Get CDS pointer
   141 000072B2 66C747430000        <1>     mov word [rdi + cds.wFlags], 0  ;Nullify CDS (mark as invalid)
   142 000072B8 58                  <1>     pop rax
   143 000072B9 723C                <1>     jb .exit    ;Exit with CF=CY
   144 000072BB 50                  <1>     push rax
   145 000072BC 0D003A5C00          <1>     or eax, 005C3A00h   ;Add path componants to eax, 5Ch=\, 3Ah=:
   146 000072C1 8907                <1>     mov dword [rdi + cds.sCurrentPath], eax  ;Since al has valid drive letter
   147 000072C3 58                  <1>     pop rax
   148 000072C4 66814F430040        <1>     or word [rdi + cds.wFlags], cdsValidDrive    ;Config bit set
   149 000072CA C7474D00000000      <1>     mov dword [rdi + cds.dStartCluster], 0  ;Root dir
   150 000072D1 48C7475100000000    <1>     mov qword [rdi + cds.qIFSPtr], 0    ;Optional redir signature field
   151 000072D9 C7475900000000      <1>     mov dword [rdi + cds.dNetStore], 0   ;Optional storage/signature dword
   152 000072E0 66C7475D0200        <1>     mov word [rdi + cds.wBackslashOffset], 2    ;Skip letter and :
   153                              <1>     ;Search for a DPB for the CDS if it is based on a physical device
   154 000072E6 50                  <1>     push rax
   155 000072E7 56                  <1>     push rsi
   156 000072E8 2C41                <1>     sub al, "A" ;Get 0 based drive letter
   157 000072EA E87DFFFFFF          <1>     call walkDPBchain
   158 000072EF 7204                <1>     jb .skipSettingDPB
   159 000072F1 48897745            <1>     mov qword [rdi + cds.qDPBPtr], rsi  ;Save DPB pointer for drive
   160                              <1> .skipSettingDPB:
   161 000072F5 5E                  <1>     pop rsi
   162 000072F6 58                  <1>     pop rax
   163                              <1> .exit:
   164                              <1>     return
    13                              <2> %%_ret:
    14 000072F7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   165                              <1> 
   166                              <1> getCDS:     ;Int 2Fh AX=1219h
   167                              <1> ;Gets the device DPB and saves it in the DOS variable
   168                              <1> ;This can be called to get CDS for network drives too!
   169                              <1> ;Input: al = 1 based drive number
   170                              <1> ;Sets workingCDS var with the CDS for the device. 
   171                              <1> ;Returns: al with 0-based drive number and CF=CY if things not oki
   172 000072F8 84C0                <1>     test al, al
   173 000072FA 7508                <1>     jnz .skip
   174 000072FC 8A05(31040000)      <1>     mov al, byte [currentDrv]   ;Get current drive
   175 00007302 FEC0                <1>     inc al
   176                              <1> .skip:
   177 00007304 FEC8                <1>     dec al  ;Convert to 0 based (0=A: ...)
   178 00007306 56                  <1>     push rsi
   179 00007307 C605(0A040000)02    <1>     mov byte [errorLocus], eLocDsk  ;Set the locus
   180 0000730E F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;If non-zero, invalid
   181 00007315 7423                <1>     jz .localCall
   182                              <1>     ;Invokation via 21/5D00
   183 00007317 50                  <1>     push rax
   184 00007318 57                  <1>     push rdi
   185 00007319 488D3D(7A060000)    <1>     lea rdi, tmpCDS ;Get the temporary CDS buffer
   186 00007320 48893D(12070000)    <1>     mov qword [workingCDS], rdi ;Make it current
   187 00007327 0441                <1>     add al, "A" ;Convert to a drive letter
   188 00007329 E874FFFFFF          <1>     call buildNewCDS    ;Build a new CDS
   189 0000732E 66F747430040        <1>     test word [rdi + cds.wFlags], cdsValidDrive  ;Is the CDS valid?
   190 00007334 5F                  <1>     pop rdi
   191 00007335 58                  <1>     pop rax
   192 00007336 7411                <1>     jz .exitBad    ;If the valid flag not set, fail!
   193 00007338 EB17                <1>     jmp short .exitOk   ;All oki
   194                              <1> .localCall:
   195 0000733A E814000000          <1>     call getCDSforDrive ;Get CDS pointer in RSI and in curCDSPtr
   196 0000733F 7208                <1>     jc .exitBad
   197 00007341 66F746430040        <1>     test word [rsi + cds.wFlags], cdsValidDrive
   198 00007347 7508                <1>     jnz .exitOk ;Exit with flag cleared
   199                              <1>     ;Else Return to unknown error locus
   200                              <1> .exitBad:
   201 00007349 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   202                              <1> .exitBad1:
   203 00007350 F9                  <1>     stc
   204                              <1> .exitOk:
   205 00007351 5E                  <1>     pop rsi
   206                              <1>     return
    13                              <2> %%_ret:
    14 00007352 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   207                              <1> 
   208                              <1> getCDSforDrive:     ;Int 2Fh AX=1217h
   209                              <1>     ;Gets the CDS for the current drive in al
   210                              <1>     ;Input: al = Drive number, 0 = A ...
   211                              <1>     ;Output: CF=NC => rsi = Pointer to CDS for drive in al (and workingCDS var)
   212                              <1>     ;        CF=CY => al not valid
   213 00007353 3A05(78000000)      <1>     cmp al, byte [lastdrvNum]
   214 00007359 7202                <1>     jb .ctn
   215 0000735B F9                  <1>     stc 
   216                              <1>     return
    13                              <2> %%_ret:
    14 0000735C C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   217                              <1> .ctn:
   218 0000735D 50                  <1>     push rax
   219 0000735E 52                  <1>     push rdx
   220 0000735F 0FB6C0              <1>     movzx eax, al
   221 00007362 48BE5F000000000000- <1>     mov rsi, cds_size
   221 0000736B 00                  <1>
   222 0000736C 31D2                <1>     xor edx, edx
   223 0000736E F7E6                <1>     mul esi ;Get the multiples of CDS's to skip in rax
   224 00007370 488B35(65000000)    <1>     mov rsi, qword [cdsHeadPtr] ;Get the first CDS ptr
   225 00007377 4801C6              <1>     add rsi, rax    ;Add the CDS array to the offset into it
   226 0000737A 488935(12070000)    <1>     mov qword [workingCDS], rsi  ;Save in data area
   227 00007381 5A                  <1>     pop rdx
   228 00007382 58                  <1>     pop rax
   229 00007383 F8                  <1>     clc
   230                              <1>     return
    13                              <2> %%_ret:
    14 00007384 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   231                              <1> 
   232                              <1> 
   233                              <1> swapPathSeparator:  ;Int 2Fh, AX=1204h, Normalise Path Separator
   234                              <1> ;Swap / to \ in a path. Leave all other chars alone.
   235                              <1> ;Input: AL = Char to normalise.
   236                              <1> ;Output: AL = Normalised Char (if / swap to \. Leave all other chars alone)
   237                              <1> ;If path separator, set ZF=ZE
   238 00007385 3C5C                <1>     cmp al, "\"
   239 00007387 7406                <1>     je .exit
   240 00007389 3C2F                <1>     cmp al, "/" ;Will set ZF=ZE if / (aka, path separator)
   241 0000738B 7502                <1>     jne .exit
   242 0000738D B05C                <1>     mov al, "\" ;Set char in al to normal path separator
   243                              <1> .exit:
   244                              <1>     return
    13                              <2> %%_ret:
    14 0000738F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   245                              <1> 
   246                              <1> uppercaseCharAtPtr:
   247                              <1> ;Get the char pointed to by rsi and then fall
   248 00007390 AC                  <1>     lodsb
   249                              <1> uppercaseChar:      ;Int 2Fh, AX=1213h, Uppercase Char
   250                              <1> ;Convert a lowercase char to uppercase
   251                              <1> ; Leave alone uppercase chars and invalid chars
   252                              <1> ;Input: al = Char to convert to uppercase
   253                              <1> ;Output: al = Processed char
   254 00007391 53                  <1>     push rbx
   255 00007392 3C61                <1>     cmp al, "a"
   256 00007394 7214                <1>     jb .exit
   257 00007396 3C7A                <1>     cmp al, "z"
   258 00007398 7702                <1>     ja .checkExt
   259 0000739A 2C20                <1>     sub al, "a" - "A"   ;If lc char, convert to uc, then check ext status
   260                              <1> .checkExt:
   261 0000739C 3C80                <1>     cmp al, 80h ;Extended ASCII first char
   262 0000739E 720A                <1>     jb .exit
   263 000073A0 2C80                <1>     sub al, 80h ;Turn into table offset
   264 000073A2 488D1D018FFFFF      <1>     lea rbx, fileUCTbl    ;Get ptr to ucFilenameTable
   265 000073A9 D7                  <1>     xlatb   ;Get converted extended byte into al
   266                              <1> .exit:
   267 000073AA 50                  <1>     push rax    ;Save al temporarily
   268 000073AB 488D1DAA90FFFF      <1>     lea rbx, asciiCharProperties
   269 000073B2 D7                  <1>     xlatb   ;Get the signature in al
   270 000073B3 A801                <1>     test al, badChar
   271 000073B5 58                  <1>     pop rax
   272 000073B6 5B                  <1>     pop rbx
   273                              <1>     return
    13                              <2> %%_ret:
    14 000073B7 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   274                              <1> 
   275                              <1> isCharTerminator:
   276                              <1> ;Input: al = Char to check properties of
   277                              <1> ;Output:    ZF=NZ => Char not name terminator
   278                              <1> ;           ZF=ZE => Char terminator
   279 000073B8 50                  <1>     push rax
   280 000073B9 53                  <1>     push rbx
   281 000073BA 488D1D9B90FFFF      <1>     lea rbx, asciiCharProperties
   282 000073C1 D7                  <1>     xlatb
   283 000073C2 A802                <1>     test al, termChar
   284 000073C4 5B                  <1>     pop rbx
   285 000073C5 58                  <1>     pop rax
   286                              <1>     return
    13                              <2> %%_ret:
    14 000073C6 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   287                              <1> 
   288                              <1> isCharSeparator:
   289                              <1> ;Input: al = Char to check properties of
   290                              <1> ;Output:    ZF=NZ => Char not separator
   291                              <1> ;           ZF=ZE => Char separator
   292 000073C7 50                  <1>     push rax
   293 000073C8 53                  <1>     push rbx
   294 000073C9 488D1D8C90FFFF      <1>     lea rbx, asciiCharProperties
   295 000073D0 D7                  <1>     xlatb
   296 000073D1 A804                <1>     test al, sepChar
   297 000073D3 5B                  <1>     pop rbx
   298 000073D4 58                  <1>     pop rax
   299                              <1>     return
    13                              <2> %%_ret:
    14 000073D5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   300                              <1> 
   301                              <1> strlen2:    ;Int 2Fh, AX=1212h
   302                              <1> ;Entry point for Multiplex
   303 000073D6 57                  <1>     push rdi
   304 000073D7 4889F7              <1>     mov rdi, rsi
   305 000073DA E802000000          <1>     call strlen
   306 000073DF 5F                  <1>     pop rdi
   307                              <1>     return
    13                              <2> %%_ret:
    14 000073E0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   308                              <1> strlen: 
   309                              <1> ;Gets the length of a ASCIIZ string
   310                              <1> ;Input: rdi = Source buffer
   311                              <1> ;Output: ecx = Length of string
   312 000073E1 50                  <1>     push rax
   313 000073E2 57                  <1>     push rdi
   314 000073E3 30C0                <1>     xor al, al
   315 000073E5 31C9                <1>     xor ecx, ecx    ;ONLY USE ECX!!!
   316 000073E7 FFC9                <1>     dec ecx ;rcx = -1
   317 000073E9 F2AE                <1>     repne scasb
   318 000073EB F7D1                <1>     not ecx
   319 000073ED 5F                  <1>     pop rdi
   320 000073EE 58                  <1>     pop rax
   321                              <1>     return
    13                              <2> %%_ret:
    14 000073EF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   322                              <1> 
   323                              <1> strcpy:
   324                              <1> ;Copies a null terminated string from rsi to rdi
   325 000073F0 AC                  <1>     lodsb
   326 000073F1 AA                  <1>     stosb
   327 000073F2 84C0                <1>     test al, al
   328                              <1>     retz
    41                              <2> cret z
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 000073F4 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 000073F6 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   329 000073F7 EBF7                <1>     jmp short strcpy
   330                              <1> 
   331                              <1> strcmp:
   332                              <1> ;Compares two ASCIIZ strings for equality.
   333                              <1> ;Input: rsi = First string
   334                              <1> ;       rdi = Second string
   335                              <1> ;       ecx = Number of bytes to compare
   336                              <1> ;Output: ZF=ZE => Equal
   337                              <1> ;        ZF=NZ => Not equal
   338 000073F9 56                  <1>     push rsi
   339 000073FA 57                  <1>     push rdi
   340 000073FB F3A6                <1>     repe cmpsb
   341 000073FD 5F                  <1>     pop rdi
   342 000073FE 5E                  <1>     pop rsi
   343                              <1>     return
    13                              <2> %%_ret:
    14 000073FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   344                              <1> 
   345                              <1> 
   346                              <1> normaliseFileName:  ;Int 2Fh, AX=1211h
   347                              <1> ;Converts lowercase to uppercase and / to "\"
   348                              <1> ;Input: rsi = Source buffer
   349                              <1> ;       rdi = Buffer to place normalised path
   350 00007400 50                  <1>     push rax
   351 00007401 56                  <1>     push rsi
   352 00007402 57                  <1>     push rdi
   353                              <1> .scan:
   354 00007403 AC                  <1>     lodsb
   355 00007404 84C0                <1>     test al, al
   356 00007406 740D                <1>     jz .exit
   357 00007408 E878FFFFFF          <1>     call swapPathSeparator  ;If it is a pathsep, swap it
   358 0000740D E87FFFFFFF          <1>     call uppercaseChar  ;Uppercase the char if it to be uppercased
   359 00007412 AA                  <1>     stosb
   360 00007413 EBEE                <1>     jmp short .scan
   361                              <1> .exit:
   362 00007415 5F                  <1>     pop rdi
   363 00007416 5E                  <1>     pop rsi
   364 00007417 58                  <1>     pop rax
   365                              <1>     return
    13                              <2> %%_ret:
    14 00007418 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   366                              <1> 
   367                              <1> compareFileNames:   ;Int 2Fh, AX=121Eh
   368                              <1> ;Compares two filenames char by char. Accepts invalid chars too.
   369                              <1> ;Input: rsi = One ASCIIZ pathname
   370                              <1> ;       rdi = Second ASCIIZ pathname
   371                              <1> ;Return:
   372                              <1>     ;ZF=ZE if equal, ZF=NZ if not
   373 00007419 50                  <1>     push rax
   374 0000741A 56                  <1>     push rsi
   375 0000741B 57                  <1>     push rdi
   376                              <1> .scan:
   377 0000741C AC                  <1>     lodsb
   378 0000741D E818000000          <1>     call .normaliseChar
   379 00007422 88C4                <1>     mov ah, al  ;Save normalised char in ah
   380 00007424 8A07                <1>     mov al, byte [rdi]  ;Get the char in path2
   381 00007426 48FFC7              <1>     inc rdi ;And goto next char
   382 00007429 E80C000000          <1>     call .normaliseChar
   383 0000742E 38E0                <1>     cmp al, ah  ;Are they equal?
   384 00007430 7504                <1>     jne .exit   ;If not equal, exit
   385 00007432 84C0                <1>     test al, al ;Here al=ah. If al == 0, exit!
   386 00007434 75E6                <1>     jnz .scan
   387                              <1> .exit:
   388 00007436 5F                  <1>     pop rdi
   389 00007437 5E                  <1>     pop rsi
   390 00007438 58                  <1>     pop rax
   391                              <1>     return
    13                              <2> %%_ret:
    14 00007439 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   392                              <1> .normaliseChar:
   393 0000743A E852FFFFFF          <1>     call uppercaseChar      ;Uppercase the char if uppercaseable
   394 0000743F E841FFFFFF          <1>     call swapPathSeparator  ;Swap if a pathsep char
   395                              <1>     return
    13                              <2> %%_ret:
    14 00007444 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   396                              <1> checkPathspecOK:
   397                              <1> ;Input:
   398                              <1> ;rsi -> points to a path to verify if it is ok.
   399                              <1> ;Output:
   400                              <1> ;CF=NC => The path is totally clean and ok to use.
   401                              <1> ;CF=CY => the path is malformed or longer than 64 chars.
   402                              <1> ; If CF=CY and ZF=ZE then wildcards were found in the last portion
   403                              <1> ; and depending on method of invokation and caller, may be permissable.
   404                              <1> ;We accept lc and uc characters in this check function.
   405 00007445 50                  <1>     push rax
   406 00007446 53                  <1>     push rbx    ;Use rbx as the return flag status
   407 00007447 56                  <1>     push rsi
   408 00007448 31DB                <1>     xor ebx, ebx    ;Clear the return status flags
   409                              <1>     ;Start by getting the length of the ASCIIZ string.
   410 0000744A 51                  <1>     push rcx
   411 0000744B 57                  <1>     push rdi
   412 0000744C 4889F7              <1>     mov rdi, rsi
   413 0000744F E88DFFFFFF          <1>     call strlen
   414 00007454 89C8                <1>     mov eax, ecx    ;Save the length in eax
   415 00007456 5F                  <1>     pop rdi
   416 00007457 59                  <1>     pop rcx
   417 00007458 3D40000000          <1>     cmp eax, 64    ;Check
   418 0000745D 0F8792000000        <1>     ja .badExit ;Above 64 only as the count includes the terminating null
   419 00007463 85C0                <1>     test eax, eax   ;If the path is empty, also error out!
   420 00007465 0F848A000000        <1>     jz .badExit
   421                              <1>     ;First we verify if our path is relative or canonical (absolute)
   422 0000746B 668B06              <1>     mov ax, word [rsi]  ;Get the first two chars
   423 0000746E 663D5C5C            <1>     cmp ax, "\\"    ;UNC network start
   424 00007472 7416                <1>     je .netName
   425 00007474 663D2F2F            <1>     cmp ax, "//"    ;Also acceptable UNC network start
   426 00007478 7410                <1>     je .netName
   427 0000747A 80FC3A              <1>     cmp ah, ":" ;Is this a full or CWD of drive letter relative disk path?
   428 0000747D 7419                <1>     je .diskPath    ;Need to check if the char preceeding is an ASCII drive char
   429                              <1>     ;Here if relative
   430 0000747F F605(02070000)FF    <1>     test byte [dosInvoke], -1
   431 00007486 756D                <1>     jnz .badExit    ;If this is -1, server invoke.
   432 00007488 EB3B                <1>     jmp short .okToScan
   433                              <1> .netName:
   434 0000748A 4881C602000000      <1>     add rsi, 2  ;Goto the first char after the UNC start symbol
   435 00007491 803E00              <1>     cmp byte [rsi], 0   ;If this is an empty path, error!
   436 00007494 745F                <1>     je .badExit
   437 00007496 EB2D                <1>     jmp short .okToScan
   438                              <1> .diskPath:
   439 00007498 4881C602000000      <1>     add rsi, 2  ;Go past the X:
   440 0000749F 803E00              <1>     cmp byte [rsi], 0   ;Cannot have an empty relative path!
   441 000074A2 7451                <1>     je .badExit
   442 000074A4 F605(02070000)FF    <1>     test byte [dosInvoke], -1    ;If this is minus 1, this is a server invoke
   443 000074AB 740F                <1>     jz .localAbsCheck
   444                              <1> .absMain:
   445 000074AD AC                  <1>     lodsb   ;Get the third byte. It MUST be a pathsep if server invokation.
   446 000074AE E8D2FEFFFF          <1>     call swapPathSeparator
   447 000074B3 7540                <1>     jnz .badExit    ;If ZF=NZ => Not a pathsep, bad path
   448 000074B5 803E00              <1>     cmp byte [rsi], 0   ;Is the char after the slash null?
   449 000074B8 743B                <1>     je .badExit ;Error if so!
   450 000074BA EB09                <1>     jmp short .okToScan
   451                              <1> .localAbsCheck:
   452 000074BC 8A06                <1>     mov al, byte [rsi]  ;Get the char we are pointing at
   453 000074BE E8C2FEFFFF          <1>     call swapPathSeparator  ;Is it a pathsep?
   454 000074C3 74E8                <1>     jz .absMain ;If it is, we do the absolute check
   455                              <1>     ;Else we are relative and begin wildcard search
   456                              <1> .okToScan:
   457 000074C5 AC                  <1>     lodsb   
   458 000074C6 84C0                <1>     test al, al ;End of path char?
   459 000074C8 7430                <1>     jz .exit
   460 000074CA E8B6FEFFFF          <1>     call swapPathSeparator
   461 000074CF 741C                <1>     jz .wcCheck ;If it was a pathsep, ensure no WC's have been detected
   462 000074D1 3C2A                <1>     cmp al, "*" ;Was al a big wildcard?
   463 000074D3 7411                <1>     je .wcFound
   464 000074D5 3C3F                <1>     cmp al, "?" ;Was al a small wildcard?
   465 000074D7 740D                <1>     je .wcFound ;If al was a wildcard, proceed as for wildcard
   466                              <1>     ;Else we check that the char in al is an acceptable char
   467 000074D9 3C2E                <1>     cmp al, "." ;Ensure that dots are allowed through this part check
   468 000074DB 74E8                <1>     je .okToScan
   469 000074DD E831000000          <1>     call checkCharValid
   470 000074E2 7411                <1>     jz .badExit ;If the char is invalid, exit immediately badly
   471 000074E4 EBDF                <1>     jmp short .okToScan
   472                              <1> .wcFound:
   473 000074E6 BB41000000          <1>     mov ebx, 41h    ;Set bit 6 and bit 0
   474 000074EB EBD8                <1>     jmp short .okToScan
   475                              <1> .wcCheck:
   476                              <1> ;This is to check we havent had any WC's upon hitting a pathsep
   477 000074ED F7C340000000        <1>     test ebx, 40h
   478 000074F3 74D0                <1>     jz .okToScan    ;Clearly al is not a WC, so goto next char now
   479                              <1>     ;Else fall through in error
   480                              <1> .badExit:
   481 000074F5 BB01000000          <1>     mov ebx, 1  ;Totally clear ZF and set CF
   482                              <1> .exit:
   483 000074FA 53                  <1>     push rbx    ;Set bit 0 for CF and bit 6 for ZF
   484 000074FB 9D                  <1>     popfq
   485 000074FC 5E                  <1>     pop rsi
   486 000074FD 5B                  <1>     pop rbx
   487 000074FE 58                  <1>     pop rax
   488                              <1>     return
    13                              <2> %%_ret:
    14 000074FF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   489                              <1> 
   490                              <1> scanPathWC:
   491                              <1> ;Scans a path for wildcards. Used in cases where wildcards cannot be permitted
   492                              <1> ; even in the final path componant.
   493                              <1> ;Input: rsi = Pointer to the ASCIIZ filename
   494                              <1> ;Output: CF=NC => No wildcards present
   495                              <1> ;        CF=CY => Wildcards found
   496 00007500 50                  <1>     push rax
   497 00007501 56                  <1>     push rsi
   498                              <1> .scan:
   499 00007502 AC                  <1>     lodsb
   500 00007503 84C0                <1>     test al, al
   501 00007505 7409                <1>     jz .exit
   502 00007507 3C3F                <1>     cmp al, "?"
   503 00007509 7404                <1>     je .wcFnd
   504 0000750B 3C2A                <1>     cmp al, "*"
   505 0000750D 75F3                <1>     jne .scan
   506                              <1> .wcFnd:
   507 0000750F F9                  <1>     stc
   508                              <1> .exit:
   509 00007510 5E                  <1>     pop rsi
   510 00007511 58                  <1>     pop rax
   511                              <1>     return
    13                              <2> %%_ret:
    14 00007512 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   512                              <1> 
   513                              <1> checkCharValid:
   514                              <1> ;If ZF=ZE => Invalid Char
   515                              <1> ;If ZF=NZ => Valid Char
   516 00007513 50                  <1>     push rax
   517 00007514 E878FEFFFF          <1>     call uppercaseChar  ;Sets ZF if invalid filename char
   518 00007519 58                  <1>     pop rax
   519                              <1>     return
    13                              <2> %%_ret:
    14 0000751A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   520                              <1> 
   521                              <1> 
   522                              <1> compareFarPointers: ;Int 2Fh, AX = 1214h
   523                              <1> ;Compare if two pointers are equal. A layover from the era of far pointers.
   524                              <1> ;Input: rsi = One pointer
   525                              <1> ;       rdi = Second pointer
   526                              <1> ;Output: ZF=ZE if equal
   527                              <1> ;        ZF=NZ if not
   528 0000751B 4839FE              <1>     cmp rsi, rdi
   529                              <1>     return
    13                              <2> %%_ret:
    14 0000751E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   530                              <1> 
   531                              <1> checkPathNet:
   532                              <1> ;Input: rsi = Start of path to check if it starts with two slashes
   533                              <1> ;Output: ZF=ZE => Path is a net path
   534                              <1> ;        ZF=NZ => Path is not a net path
   535 0000751F 50                  <1>     push rax
   536 00007520 0FB706              <1>     movzx eax, word [rsi]    ;Get the first two chars of the path
   537 00007523 E85DFEFFFF          <1>     call swapPathSeparator
   538 00007528 7507                <1>     jnz .exit
   539 0000752A 88E0                <1>     mov al, ah  ;Get the second char
   540 0000752C E854FEFFFF          <1>     call swapPathSeparator  ;ZF=ZE if net path
   541                              <1> .exit:
   542 00007531 58                  <1>     pop rax
   543                              <1>     return
    13                              <2> %%_ret:
    14 00007532 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   544                              <1> 
   545                              <1> getCharDevDriverPtr:
   546                              <1> ;Gets a pointer to the char device driver header with the 8 char name in rax
   547                              <1> ;Input: rax = Device Driver name (space padded)
   548                              <1> ;Output: rdi = Ptr to the header, -1 => Invalid filename and CF=CY
   549 00007533 488D3D(7A000000)    <1>     lea rdi, nulDevHdr  ;Point to the start of the chain
   550                              <1> .lp:
   551 0000753A 4839471A            <1>     cmp qword [rdi + drvHdr.drvNam], rax
   552                              <1>     rete    ;Exit if equal
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 0000753E 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007540 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   553 00007541 488B3F              <1>     mov rdi, qword [rdi + drvHdr.nxtPtr]    ;Goto next header
   554 00007544 4881FFFFFFFFFF      <1>     cmp rdi, -1 ;End of chain?
   555 0000754B 75ED                <1>     jne .lp ;If not loop
   556 0000754D F9                  <1>     stc ;Else bad exit
   557                              <1>     return
    13                              <2> %%_ret:
    14 0000754E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   558                              <1> 
   559                              <1> getDrvChain: ;Int 2Fh, AX=122Ch
   560                              <1> ;Pointer to the first non-null device driver in the chain.
   561                              <1> ;Returns the value in rax only
   562 0000754F 488D05(7A000000)    <1>     lea rax, nulDevHdr
   563 00007556 488B00              <1>     mov rax, qword [rax + drvHdr.nxtPtr]    ;Get the pointer at null driver
   564                              <1>     return
    13                              <2> %%_ret:
    14 00007559 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   565                              <1> 
   566                              <1> getExtErrCde:   ;Int 2Fh, AX=122Dh
   567                              <1> ;Gets the extended error code in ax and returns
   568 0000755A 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   569                              <1>     return
    13                              <2> %%_ret:
    14 00007561 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    53                                  %include "./src/Kernel/Core/dosMain.asm"
     1                              <1> ;-----------------------------------:
     2                              <1> ;        Main Kernel dispatch       :
     3                              <1> ;            and routines           :
     4                              <1> ;-----------------------------------:
     5                              <1> functionDispatch:   ;Int 21h Main function dispatcher
     6                              <1> ;ah = Function number, all other registers have various meanings
     7                              <1>  %if DEBUG
     8                              <1>     ;Entry function
     9                              <1>     debugEnterM
    10                              <1>     lea rbp, .l0000
    11                              <1>     call debPrintNullString
    12                              <1>     call debPrintFunctionName
    13                              <1>     jmp short .l0001
    14                              <1> .l0000 db 0Ah,0Dh,"Entering ",0
    15                              <1> .l0001:    
    16                              <1>     debugExitM
    17                              <1>     %endif
    18 00007562 FA                  <1>     cli ;Halt external interrupts
    19 00007563 FC                  <1>     cld ;Ensure all string ops occur in the right direction
    20 00007564 80FC69              <1>     cmp ah, kDispTblL/2    ;Number of functions
    21 00007567 0F834B010000        <1>     jae .fdExitBad  ;If equal or above, exit error
    22                              <1>     ;Cherry pick functions
    23 0000756D 80FC33              <1>     cmp ah, 33h ;CTRL+BREAK check
    24 00007570 7235                <1>     jb .fsbegin   ;If below skip these checks
    25 00007572 0F847C020000        <1>     je ctrlBreakCheck
    26 00007578 80FC64              <1>     cmp ah, 64h
    27 0000757B 0F84D8020000        <1>     je setDriverLookahead  ;Reserved, but avoids usual Int 21h spiel
    28 00007581 7724                <1>     ja .fsbegin   ;If above, do usual Int21 entry
    29 00007583 80FC51              <1>     cmp ah, 51h
    30 00007586 0F84BB020000        <1>     je getCurrProcessID    ;This and below are exactly the same
    31 0000758C 80FC62              <1>     cmp ah, 62h
    32 0000758F 0F84BB020000        <1>     je getPSPaddr          ;Calls the above function
    33 00007595 80FC50              <1>     cmp ah, 50h
    34 00007598 0F84A0020000        <1>     je setCurrProcessID
    35 0000759E 80FC61              <1>     cmp ah, 61h           ;New service, Process Services, reentrant
    36 000075A1 0F84BA020000        <1>     je systemServices
    37                              <1> .fsbegin:
    38 000075A7 E827010000          <1>     call dosPushRegs ;Push the usual prologue registers
    39 000075AC 48891D(83040000)    <1>     mov qword [oldRBX], rbx ;Need to do this as I might switch stacks later
    40 000075B3 66C705(43040000)00- <1>     mov word [machineNum], 0    ;Set the machine number for the request to us!
    40 000075BB 00                  <1>
    41 000075BC 488B05(7B040000)    <1>     mov rax, qword [oldRSP]
    42 000075C3 488905(6B040000)    <1>     mov qword [oldoldRSP], rax
    43 000075CA FE05(08040000)      <1>     inc byte [inDOS]    ;Increment in DOS flag
    44 000075D0 488925(7B040000)    <1>     mov qword [oldRSP], rsp
    45                              <1> ;Network related variable resetting
    46 000075D7 C605(02070000)00    <1>     mov byte [dosInvoke], 0 ;Invoked Locally
    47                              <1> ;Here, we want to save oldRSP in the callers PSP
    48 000075DE 488B05(1F040000)    <1>     mov rax, qword [currentPSP] ;Get current PSP address
    49 000075E5 48896046            <1>     mov qword [rax + psp.rspPtr], rsp    ;Save rsp on callers stack
    50 000075E9 58                  <1>     pop rax     ;Get old rax back
    51 000075EA 50                  <1>     push rax    ;and push it back onto the stack
    52                              <1> .charFun0CEP:
    53                              <1> .serverEP:
    54 000075EB 488D25(080D0000)    <1>     lea rsp, critStakTop
    55 000075F2 FB                  <1>     sti         ;Reenable interrupts
    56                              <1> 
    57 000075F3 31DB                <1>     xor ebx, ebx    ;Zero rbx for later and bl for now
    58 000075F5 881D(94040000)      <1>     mov byte [vConDrvSwp], bl   ;Clear the conDrvSwp (use default CON driver)
    59 000075FB C605(95040000)01    <1>     mov byte [int28Flag], 1 ;Make it ok to trigger Int 28h
    60 00007602 881D(6A040000)      <1>     mov byte [Int24Fail], bl    ;Clear the Int24 returned fail flag
    61 00007608 881D(8B040000)      <1>     mov byte [dirFlag], bl  ;Default to look for dir
    62                              <1> 
    63 0000760E 50                  <1>     push rax        ;Save rax to use temporarily as table base 
    64 0000760F 88E3                <1>     mov bl, ah      ;Move the function number bl (rbx = 0)
    65 00007611 D1E3                <1>     shl ebx, 1      ;Multiply the function number by 2 for offset into table
    66 00007613 488D05428FFFFF      <1>     lea rax, kDispTbl
    67 0000761A 4801C3              <1>     add rbx, rax    ;Add dispatch table offset into rbx
    68 0000761D 480FB71B            <1>     movzx rbx, word [rbx]    ;Get the address from the dispatch table
    69 00007621 4801C3              <1>     add rbx, rax    ;Add the table base (since it is the base addr for table)
    70 00007624 58                  <1>     pop rax
    71                              <1> 
    72 00007625 84E4                <1>     test ah, ah     ;Simple Terminate function?
    73 00007627 741C                <1>     jz .fddiskOp
    74 00007629 80FC59              <1>     cmp ah, 59h     ;Extended Error report?
    75 0000762C 7457                <1>     je .fdGoToFunction  ;Bypass code that clears the error report
    76 0000762E 80FC0C              <1>     cmp ah, 0Ch     ;Are we a char function?
    77 00007631 7712                <1>     ja .fddiskOp
    78                              <1> ;Char operations here
    79 00007633 F605(07040000)01    <1>     test byte [critErrFlag], 1  ;Are we in critical error?
    80 0000763A 7549                <1>     jnz .fdGoToFunction         ;If we are, stay on Critical Error Stack
    81 0000763C 488D25(98130000)    <1>     lea rsp, AuxStakTop        ;Otherwise, switch to IO stack
    82 00007643 EB40                <1>     jmp short .fdGoToFunction
    83                              <1> .fddiskOp:
    84                              <1>     ;Disk operations go here
    85                              <1>     ;Save rax on entry to a disk funciton
    86 00007645 488905(33040000)    <1>     mov qword [oldRAX], rax
    87                              <1>     ;Clear up error info
    88 0000764C C605(0A040000)01    <1>     mov byte [errorLocus], 1    ;Reset to generic, unknown locus
    89 00007653 C605(07040000)00    <1>     mov byte [critErrFlag], 0   ;Clear the Critical Error Flag
    90 0000765A C605(09040000)FF    <1>     mov byte [errorDrv], -1     ;Set the drive which caused the error to none
    91                              <1> 
    92 00007661 50                  <1>     push rax
    93 00007662 B482                <1>     mov ah, 82h ;Cancel all critical section!
    94 00007664 CD2A                <1>     int 2ah ;DOS critical section semphore handler (default, iretq)
    95 00007666 58                  <1>     pop rax
    96                              <1> 
    97 00007667 C605(95040000)00    <1>     mov byte [int28Flag], 0     ;Turn off the ability to trigger Int 28h
    98 0000766E 488D25(D8190000)    <1>     lea rsp, DiskStakTop        ;Swap the stack to the Disk Transfer Stack
    99 00007675 F605(32040000)FF    <1>     test byte [breakFlag], -1   ;Test if set
   100 0000767C 7407                <1>     jz .fdGoToFunction
   101                              <1> ; HANDLE CTRL+BREAK HERE!
   102 0000767E 50                  <1>     push rax
   103 0000767F E860B4FFFF          <1>     call checkBreak   ; Check for a ^C
   104 00007684 58                  <1>     pop rax
   105                              <1> .fdGoToFunction:
   106 00007685 48871D(83040000)    <1>     xchg rbx, qword [oldRBX]    ;Put the call addr in oldRBX and get oldRBX back
   107                              <1> %if DEBUG && REGS
   108                              <1>     ;Print stack if necessary function
   109                              <1>     debugEnterM
   110                              <1>     call debPrintDOSStack
   111                              <1>     debugExitM
   112                              <1> %endif
   113 0000768C FF15(83040000)      <1>     call qword [oldRBX]     ;Call the desired function, rax contains ret code
   114                              <1> %if DEBUG
   115                              <1>     ;Entry function
   116                              <1>     debugEnterM
   117                              <1>     lea rbp, .l0002
   118                              <1>     call debPrintNullString
   119                              <1>     jmp short .l0003
   120                              <1> .l0002 db "Exiting Int 21h",0Ah,0Dh,0
   121                              <1> .l0003:    
   122                              <1>     debugExitM
   123                              <1> %endif
   124                              <1> %if DEBUG && REGS
   125                              <1>     ;Exit function
   126                              <1>     debugEnterM
   127                              <1>     call debPrintDOSStack
   128                              <1>     debugExitM
   129                              <1> %endif
   130                              <1> .fdExit:
   131 00007692 FA                  <1>     cli     ;Redisable interrupts
   132 00007693 FE0D(08040000)      <1>     dec byte [inDOS]            ;Decrement the inDOS count
   133 00007699 488B25(7B040000)    <1>     mov rsp, qword [oldRSP]     ;Point rsp to old stack
   134 000076A0 880424              <1>     mov byte [rsp], al   ;Put the ret code into its pos on the register frame
   135 000076A3 488B05(6B040000)    <1>     mov rax, qword [oldoldRSP]
   136 000076AA 488905(7B040000)    <1>     mov qword [oldRSP], rax
   137 000076B1 E806000000          <1>     call dosPopRegs  ;Pop the frame
   138 000076B6 48CF                <1>     iretq
   139                              <1> .fdExitBad:
   140 000076B8 30C0                <1>     xor al, al
   141                              <1> defaultIretq:
   142 000076BA 48CF                <1>     iretq
   143                              <1> dosPopRegs:
   144 000076BC 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   145 000076C2 58                  <1>     pop rax
   146 000076C3 5B                  <1>     pop rbx
   147 000076C4 59                  <1>     pop rcx
   148 000076C5 5A                  <1>     pop rdx
   149 000076C6 5E                  <1>     pop rsi
   150 000076C7 5F                  <1>     pop rdi
   151 000076C8 5D                  <1>     pop rbp
   152 000076C9 4158                <1>     pop r8
   153 000076CB 4159                <1>     pop r9
   154 000076CD FF25(73040000)      <1>     jmp qword [dosReturn]
   155                              <1> dosPushRegs:
   156 000076D3 8F05(73040000)      <1>     pop qword [dosReturn]   ;Put return here resetting RSP
   157 000076D9 4151                <1>     push r9
   158 000076DB 4150                <1>     push r8
   159 000076DD 55                  <1>     push rbp
   160 000076DE 57                  <1>     push rdi
   161 000076DF 56                  <1>     push rsi
   162 000076E0 52                  <1>     push rdx
   163 000076E1 51                  <1>     push rcx
   164 000076E2 53                  <1>     push rbx
   165 000076E3 50                  <1>     push rax
   166 000076E4 FF25(73040000)      <1>     jmp qword [dosReturn]
   167                              <1> dosCrit1Enter:
   168                              <1>     return     ;Needs to be patched with 50h (PUSH RAX)
    13                              <2> %%_ret:
    14 000076EA C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   169 000076EB B801800000          <1>     mov eax, 8001h
   170 000076F0 CD2A                <1>     int 2ah
   171 000076F2 58                  <1>     pop rax
   172                              <1>     return
    13                              <2> %%_ret:
    14 000076F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> dosCrit1Exit:
   174                              <1>     return
    13                              <2> %%_ret:
    14 000076F4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   175 000076F5 B801810000          <1>     mov eax, 8101h
   176 000076FA CD2A                <1>     int 2ah
   177 000076FC 58                  <1>     pop rax
   178                              <1>     return
    13                              <2> %%_ret:
    14 000076FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   179                              <1> dosCrit2Enter:
   180                              <1>     return
    13                              <2> %%_ret:
    14 000076FE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   181 000076FF B802800000          <1>     mov eax, 8002h
   182 00007704 CD2A                <1>     int 2ah
   183 00007706 58                  <1>     pop rax
   184                              <1>     return
    13                              <2> %%_ret:
    14 00007707 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   185                              <1> dosCrit2Exit:
   186                              <1>     return
    13                              <2> %%_ret:
    14 00007708 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   187 00007709 B802810000          <1>     mov eax, 8102h
   188 0000770E CD2A                <1>     int 2ah
   189 00007710 58                  <1>     pop rax
   190                              <1>     return
    13                              <2> %%_ret:
    14 00007711 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   191                              <1> 
   192                              <1> ;FCB specific returns
   193                              <1> fcbGoodExit:
   194                              <1> ;Preserve the carry flag on entry to DOS
   195 00007712 30C0                <1>     xor al, al ;Set return code al = 0
   196                              <1>     return
    13                              <2> %%_ret:
    14 00007714 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   197                              <1> fcbErrExit:
   198                              <1> ;Preserve the carry flag on entry to DOS
   199                              <1> ;Input: eax = Extended error code to store in SDA 
   200 00007715 E836000000          <1>     call xLatError
   201 0000771A B0FF                <1>     mov al, -1  ;Set return code al = -1
   202 0000771C F9                  <1>     stc
   203                              <1>     return
    13                              <2> %%_ret:
    14 0000771D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   204                              <1> 
   205                              <1> ;Handle and General DOS Returns
   206                              <1> ;All good exits destroy AT LEAST ax 
   207                              <1> extGoodExit2:
   208                              <1> ;Good exit with an extended return code in eax
   209 0000771E E841FBFFFF          <1>     call getUserRegs
   210 00007723 8906                <1>     mov dword [rsi + callerFrame.rax], eax    ;Store eax
   211 00007725 EB08                <1>     jmp short extGoodExit.extGoodCommon
   212                              <1> extGoodExit:
   213                              <1> ;Good exit
   214                              <1> ;Return code in ax
   215 00007727 E838FBFFFF          <1>     call getUserRegs
   216 0000772C 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store ax
   217                              <1> .extGoodCommon:
   218 0000772F 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1    ;Clear error flag
   219 00007733 F8                  <1>     clc
   220                              <1>     return
    13                              <2> %%_ret:
    14 00007734 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   221                              <1> extErrExit:
   222                              <1> ;The extended error exit from DOS
   223                              <1> ;Jumped to with AL=Extended error code
   224                              <1> ;Can be called too.
   225                              <1> ;Input: al = Extended error code
   226                              <1> ;If relevant (i.e. when called or jumped to from deep in DOS)
   227                              <1> ;   Returns with: eax = xLat Error
   228                              <1> ;                 rsi = callerFrame
   229 00007735 0FB6C0              <1>     movzx eax, al   ;0 rax except for al with error code
   230 00007738 E813000000          <1>     call xLatError
   231 0000773D E891000000          <1>     call checkFail
   232                              <1> .noXlat:
   233 00007742 E81DFBFFFF          <1>     call getUserRegs
   234 00007747 668906              <1>     mov word [rsi + callerFrame.rax], ax
   235 0000774A 804E5801            <1>     or byte [rsi + callerFrame.flags], 1    ;Set error flag
   236 0000774E F9                  <1>     stc ;Set carry flag for if this function is called deep inside DOS
   237                              <1>     return
    13                              <2> %%_ret:
    14 0000774F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   238                              <1> xLatError:
   239                              <1> ;Translates the error code given in ax and sets error code in the var
   240                              <1> ; Input: ax = Extended Error Code
   241                              <1> ; Output: ax = Potentially translated Error Code
   242                              <1> ;         [errorExCde] = Original Error Code
   243                              <1> ;Preserves all registers except ax
   244                              <1> ;AH is always returned as 0
   245 00007750 53                  <1>     push rbx
   246 00007751 51                  <1>     push rcx
   247 00007752 56                  <1>     push rsi
   248 00007753 668905(0B040000)    <1>     mov word [errorExCde], ax
   249 0000775A 89C3                <1>     mov ebx, eax    ;Save error code to ebx
   250 0000775C 488D351689FFFF      <1>     lea rsi, errXlatTbl ;Get translation table pointer in rsi
   251                              <1> .readEntry:
   252 00007763 66AD                <1>     lodsw   ;Get the first word of the first table entry and rsi += 2
   253 00007765 3CFF                <1>     cmp al, -1
   254 00007767 741F                <1>     je .skipXlat
   255 00007769 3A05(34040000)      <1>     cmp al, byte [oldRAX + 1]   ;Cmp to DOS function number (that is in ah)
   256 0000776F 7408                <1>     je .found
   257                              <1>     ;Here, entry not found, goto next entry
   258 00007771 0FB6C4              <1>     movzx eax, ah   ;Zero extend ah to rax to get number of bytes to skip
   259 00007774 4801C6              <1>     add rsi, rax    ;Goto next entry
   260 00007777 EBEA                <1>     jmp short .readEntry
   261                              <1> .found:
   262                              <1>     ;Here the table entry is found, now we search for if the error needs xlatng
   263 00007779 0FB6CC              <1>     movzx ecx, ah   ;Get the number of bytes to check left into ecx
   264                              <1> .mainSearch:
   265 0000777C AC                  <1>     lodsb   ;Get one byte into al
   266 0000777D 38C3                <1>     cmp bl, al  ;Check against the error code
   267 0000777F 7407                <1>     je .skipXlat    ;If the error code is found, we can skip xlat
   268 00007781 FFC9                <1>     dec ecx ;Avoid loop for the zoomies
   269 00007783 75F7                <1>     jnz .mainSearch ;Whilst ecx is not zero, keep searching
   270                              <1>     ;Here only if ecx is zero, i.e present error code needs translating
   271 00007785 0FB6D8              <1>     movzx ebx, al ;Move the xLat error code into ebx
   272                              <1> .skipXlat:
   273 00007788 89D8                <1>     mov eax, ebx    ;Return the error code back to eax
   274 0000778A 5E                  <1>     pop rsi
   275 0000778B 59                  <1>     pop rcx
   276 0000778C 5B                  <1>     pop rbx
   277                              <1>     return
    13                              <2> %%_ret:
    14 0000778D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   278                              <1> setErrorVars:   ;Int 2Fh, AX=1222h
   279                              <1> ;Looks up the error code in the variable and sets the other error vars
   280                              <1> ;Called with the lookup table in rsi
   281                              <1> ;All regs preserved
   282 0000778E 50                  <1>     push rax
   283 0000778F 53                  <1>     push rbx
   284 00007790 51                  <1>     push rcx
   285 00007791 56                  <1>     push rsi
   286 00007792 0FB71D(0B040000)    <1>     movzx ebx, word [errorExCde]
   287 00007799 B908000000          <1>     mov ecx, 8  ;Use to shift eax efficiently
   288                              <1> .readEntry:
   289 0000779E AD                  <1>     lodsd   ;Read the dword table entry into eax
   290 0000779F 3DFFFFFFFF          <1>     cmp eax, -1  ;If the dword is -1, simply exit
   291 000077A4 7428                <1>     je .exit    
   292 000077A6 38D8                <1>     cmp al, bl  ;Compare the error codes
   293 000077A8 75F4                <1>     jne .readEntry ;Keep reading entries until we find the one we need
   294 000077AA D3E8                <1>     shr eax, cl
   295 000077AC 3CFF                <1>     cmp al, -1
   296 000077AE 7406                <1>     je .skipClass
   297 000077B0 8805(0E040000)      <1>     mov byte [errorClass], al
   298                              <1> .skipClass:
   299 000077B6 D3E8                <1>     shr eax, cl
   300 000077B8 3CFF                <1>     cmp al, -1
   301 000077BA 7406                <1>     je .skipAct
   302 000077BC 8805(0D040000)      <1>     mov byte [errorAction], al
   303                              <1> .skipAct:
   304 000077C2 D3E8                <1>     shr eax, cl
   305 000077C4 3CFF                <1>     cmp al, -1
   306 000077C6 7406                <1>     je .exit
   307 000077C8 8805(0A040000)      <1>     mov byte [errorLocus], al
   308                              <1> .exit:
   309 000077CE 5E                  <1>     pop rsi
   310 000077CF 59                  <1>     pop rcx
   311 000077D0 5B                  <1>     pop rbx
   312 000077D1 58                  <1>     pop rax
   313                              <1>     return
    13                              <2> %%_ret:
    14 000077D2 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   314                              <1> checkFail:
   315                              <1> ;Checks if the error was dealt with by the user with a Fail on a Int 24h
   316                              <1> ; and swaps the var error code if so
   317 000077D3 F605(6A040000)FF    <1>     test byte [Int24Fail], -1   ;If zero, skip!
   318 000077DA 7409                <1>     jz .skipFail
   319 000077DC 66C705(0B040000)53- <1>     mov word [errorExCde], errFI24  ;Set error to "Fail on Int 24h"
   319 000077E4 00                  <1>
   320                              <1> .skipFail:
   321 000077E5 56                  <1>     push rsi
   322 000077E6 488D352889FFFF      <1>     lea rsi, extErrTbl
   323 000077ED E89CFFFFFF          <1>     call setErrorVars
   324 000077F2 5E                  <1>     pop rsi
   325                              <1>     return
    13                              <2> %%_ret:
    14 000077F3 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   326                              <1> ;========================================:
   327                              <1> ;      Reentrant Kernel Functions        :
   328                              <1> ;========================================:
   329                              <1> ctrlBreakCheck:    ;ah = 33h
   330 000077F4 3C06                <1>     cmp al, 6
   331 000077F6 743C                <1>     je .trueVer
   332 000077F8 3C05                <1>     cmp al, 5
   333 000077FA 742E                <1>     je .getBtDrv    ;Peel off btdrv req.
   334 000077FC 84C0                <1>     test al, al
   335 000077FE 7508                <1>     jnz .cbcget     ;Get the state or other functions
   336 00007800 8A15(32040000)      <1>     mov dl, byte [breakFlag]    ;Get the state
   337 00007806 48CF                <1>     iretq
   338                              <1> .cbcget:
   339 00007808 3C02                <1>     cmp al, 02h
   340 0000780A 771A                <1>     ja .cbcBad
   341 0000780C 740D                <1>     jz .cbcxchg ;Function 2
   342 0000780E 52                  <1>     push rdx
   343 0000780F 80E201              <1>     and dl, 1   ;Get only the bottom bit
   344 00007812 8815(32040000)      <1>     mov byte [breakFlag], dl    ;Set the state
   345 00007818 5A                  <1>     pop rdx
   346 00007819 48CF                <1>     iretq
   347                              <1> .cbcxchg:
   348 0000781B 80E201              <1>     and dl, 1
   349 0000781E 8615(32040000)      <1>     xchg byte [breakFlag], dl
   350 00007824 48CF                <1>     iretq
   351                              <1> .cbcBad:
   352 00007826 B0FF                <1>     mov al, -1
   353 00007828 48CF                <1>     iretq
   354                              <1> .getBtDrv:
   355                              <1> ;Undocumented.
   356                              <1> ;Might be unreliable so dont document yet.
   357                              <1> ;Return 1 based boot drive in dl
   358 0000782A 8A15(10000000)      <1>     mov dl, byte [bootDrive]    ;Get the 0 based bootDrive number
   359 00007830 FEC2                <1>     inc dl  ;Return a 1 based drive number
   360 00007832 48CF                <1>     iretq
   361                              <1> .trueVer:
   362                              <1> ;Undocumented.
   363                              <1> ;bx returns true DOS number.
   364                              <1> ;dl has "revision" number in bits 0-2. 
   365                              <1> ;dh has various flags. All reserved for future use.
   366 00007834 66BB0063            <1>     mov bx, dosVerMac
   367 00007838 66BA0201            <1>     mov dx, (dosVerFlags << 8) | dosRev
   368 0000783C 48CF                <1>     iretq
   369                              <1> 
   370                              <1> setCurrProcessID:  ;ah = 50h, set current process ID (Set current PSP)
   371 0000783E 48891D(1F040000)    <1>     mov qword [currentPSP], rbx ;Set the pointer
   372 00007845 48CF                <1>     iretq
   373                              <1> 
   374                              <1> getCurrProcessID:  ;ah = 51h, get current process ID (Get current PSP)
   375 00007847 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   376 0000784E 48CF                <1>     iretq
   377                              <1> 
   378                              <1> getPSPaddr:        ;ah = 62h, gives PSP addr/Process ID
   379 00007850 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP]
   380 00007857 48CF                <1>     iretq
   381                              <1> 
   382                              <1> setDriverLookahead:;ah = 64h, set lookahead flag to al (-1 is on, 0 is off)
   383 00007859 8805(E0190000)      <1>     mov byte [lookahead], al    
   384 0000785F 48CF                <1>     iretq
   385                              <1> 
   386                              <1> systemServices: ;ah = 61h
   387                              <1> ;All pointers returned in rdx
   388                              <1> ;al = 0 -> Get Environment pointer in rdx
   389                              <1> ;al = 1 -> Get Command Line Arguments Pointer in rdx
   390                              <1> ;al = 2 -> Get ptr to ASCIIZ FQFN for program in rdx
   391                              <1> ;       al = 2 can fail. If CF=CY or rdx = 0, cannot use ptr.
   392                              <1> ;                        Else, rdx -> Filename
   393 00007861 3C01                <1>     cmp al, 1
   394 00007863 7453                <1>     je short .getCmdLineArgs
   395 00007865 3C02                <1>     cmp al, 2
   396 00007867 760C                <1>     jbe .getEnvPtr
   397 00007869 B801000000          <1>     mov eax, errInvFnc
   398                              <1> .exitBad:
   399 0000786E 804C241001          <1>     or byte [rsp + 2*8], 1  ;Set CF on
   400 00007873 48CF                <1>     iretq
   401                              <1> .getEnvPtr:
   402                              <1>     ;Gets the environment pointer in rdx
   403 00007875 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   404 0000787C 488B523E            <1>     mov rdx, qword [rdx + psp.envPtr]   ;Get the environement pointer
   405 00007880 7541                <1>     jne short .exitOk   ;If it is not equal to 2, exit (since it was 0)
   406                              <1> ;Here we search for the double 00 and then check if it is 0001 and
   407                              <1> ; pass the ptr to the word after.
   408 00007882 FA                  <1>     cli
   409 00007883 51                  <1>     push rcx
   410 00007884 31C9                <1>     xor ecx, ecx
   411 00007886 B9FF7F0000          <1>     mov ecx, 7FFFh  ;Max environment size
   412                              <1> .gep0:
   413 0000788B 66813A0000          <1>     cmp word [rdx], 0   ;Zero word?
   414 00007890 740D                <1>     je short .gep1
   415 00007892 48FFC2              <1>     inc rdx         ;Go to the next byte
   416 00007895 FFC9                <1>     dec ecx
   417 00007897 75F2                <1>     jnz short .gep0
   418                              <1> .gep00:
   419                              <1>     ;Failure here if we haven't hit the double null by the end of 32Kb
   420 00007899 59                  <1>     pop rcx
   421 0000789A FB                  <1>     sti
   422 0000789B 31D2                <1>     xor edx, edx    ;Turn it into null pointer
   423 0000789D EBCF                <1>     jmp short .exitBad
   424                              <1> .gep1:
   425 0000789F 4881C202000000      <1>     add rdx, 2  ;Skip the double null
   426 000078A6 66813A0100          <1>     cmp word [rdx], 1   ;Check if one more string in environment
   427 000078AB 75EC                <1>     jne .gep00
   428 000078AD 4881C202000000      <1>     add rdx, 2  ;Skip the 0001 word.
   429 000078B4 59                  <1>     pop rcx
   430 000078B5 FB                  <1>     sti
   431 000078B6 EB0B                <1>     jmp short .exitOk
   432                              <1> .getCmdLineArgs:
   433 000078B8 488B15(1F040000)    <1>     mov rdx, qword [currentPSP]
   434 000078BF 488D525C            <1>     lea rdx, qword [rdx + psp.cmdLineArgPtr]   ;Get the cmdargs pointer
   435                              <1> .exitOk:
   436 000078C3 80642410FE          <1>     and byte [rsp + 2*8], ~1    ;Clear CF
   437 000078C8 48CF                <1>     iretq
   438                              <1> 
   439                              <1> 
   440                              <1> ;========================================:
   441                              <1> ;            Kernel Functions            :
   442                              <1> ;========================================:
   443                              <1> diskReset:         ;ah = 0Dh
   444                              <1> ;Flush all dirty buffers to disk
   445 000078CA E81BFEFFFF          <1>     call dosCrit1Enter
   446 000078CF B0FF                <1>     mov al, -1  ;Mark all drives as flushable
   447 000078D1 E8628EFFFF          <1>     call flushAllBuffersForDrive  
   448                              <1>     ;Now we free all buffers and set their referenced bit
   449 000078D6 488B3D(5D000000)    <1>     mov rdi, qword [bufHeadPtr]
   450                              <1> .drBufferLp:
   451 000078DD 4881FFFFFFFFFF      <1>     cmp rdi, -1
   452 000078E4 740B                <1>     je .drExit
   453 000078E6 66C74708FF20        <1>     mov word [rdi + bufferHdr.driveNumber], freeBuffer | (refBuffer << 8)
   454 000078EC 488B3F              <1>     mov rdi, qword [rdi + bufferHdr.nextBufPtr]
   455 000078EF EBEC                <1>     jmp short .drBufferLp
   456                              <1> .drExit:
   457 000078F1 E8FEFDFFFF          <1>     call dosCrit1Exit
   458 000078F6 B820110000          <1>     mov eax, 1120h  ;Redirector flush all 
   459 000078FB CD2F                <1>     int 2fh
   460                              <1>     return
    13                              <2> %%_ret:
    14 000078FD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   461                              <1> 
   462                              <1> selectDisk:        ;ah = 0Eh
   463                              <1> ;Called with dl = drive number, 0 = A, 1 = B etc...
   464 000078FE 88D0                <1>     mov al, dl
   465 00007900 FEC0                <1>     inc al  ;Convert to 1-based number to avoid 0 meaning current drive
   466 00007902 E881F9FFFF          <1>     call getCDSNotJoin  ;Must make sure provided drive is valid
   467 00007907 7206                <1>     jc .skipSettingCurrent  ;Join and network drives cant be current drive!
   468 00007909 8805(31040000)      <1>     mov byte [currentDrv], al   ;Set drive as current
   469                              <1> .skipSettingCurrent:
   470 0000790F 0FB605(78000000)    <1>     movzx eax, byte [lastdrvNum]   ;Return lastdrive as "errorcode"
   471                              <1>     return
    13                              <2> %%_ret:
    14 00007916 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   472                              <1> 
   473                              <1> getCurrentDisk:    ;ah = 19h, get current default drive
   474 00007917 8A05(31040000)      <1>     mov al, byte [currentDrv]
   475                              <1>     return
    13                              <2> %%_ret:
    14 0000791D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   476                              <1> 
   477                              <1> FATinfoDefault:    ;ah = 1Bh
   478 0000791E 30D2                <1>     xor dl, dl
   479                              <1> FATinfoDevice:     ;ah = 1Ch
   480                              <1> ;Input: dl = 1 based drive number
   481                              <1> ;Output:
   482                              <1> ;al = sectors per cluster (allocation unit), or FFh if invalid drive
   483                              <1> ;cx = bytes per sector
   484                              <1> ;edx = total number of clusters
   485                              <1> ;rbx = Ptr to media ID byte
   486 00007920 88D0                <1>     mov al, dl  ;Move drive number into al
   487 00007922 E8D1F9FFFF          <1>     call getCDS    ;Get in workingCDS the cds pointer for drive in al
   488 00007927 7307                <1>     jnc .fidCDSFound
   489 00007929 B80F000000          <1>     mov eax, errBadDrv          ;Invalid drive error
   490 0000792E EB2E                <1>     jmp short .error 
   491                              <1> .fidCDSFound:
   492 00007930 E8B6F8FFFF          <1>     call getDiskData
   493 00007935 7227                <1>     jc .error
   494                              <1> ;Now we have that:
   495                              <1> ;al = sectors per cluster
   496                              <1> ;ah = media ID byte
   497                              <1> ;ebx = total clusters
   498                              <1> ;cx = bytes per sector
   499                              <1> ;edx = number of available clusters
   500 00007937 E828F9FFFF          <1>     call getUserRegs
   501 0000793C 8825(91070000)      <1>     mov byte [mediaByte], ah    ;Store media ID byte
   502 00007942 30E4                <1>     xor ah, ah
   503 00007944 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   504 00007947 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   505 0000794B 488D1D(91070000)    <1>     lea rbx, mediaByte
   506 00007952 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Store pointer to mediaByte
   507 00007956 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   508                              <1> .badExit:
   509 0000795A 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   510                              <1>     return
    13                              <2> %%_ret:
    14 0000795D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   511                              <1> .error:
   512 0000795E E8D2FDFFFF          <1>     call extErrExit ;Set rsi to point to callerFrame
   513 00007963 66B8FFFF            <1>     mov ax, -1
   514 00007967 EBF1                <1>     jmp short .badExit
   515                              <1> 
   516                              <1> setIntVector:      ;ah = 25h
   517                              <1> ;Called with:
   518                              <1> ;   rdx = Pointer to interrupt handler
   519                              <1> ;   al = Interrupt number
   520 00007969 FA                  <1>     cli ;Halt interrupts
   521 0000796A 0F010D(171A0000)    <1>     sidt [dosIdtPtr]    ;Get the current IDT base pointer
   522 00007971 0FB6C0              <1>     movzx eax, al
   523 00007974 48C1E004            <1>     shl rax, 4h     ;Multiply IDT entry number by 16 (Size of IDT entry)
   524 00007978 480305(191A0000)    <1>     add rax, qword [dosIdtPtr.base]    
   525 0000797F 668910              <1>     mov word [rax], dx  ;Get low word into offset 15...0
   526 00007982 48C1EA10            <1>     shr rdx, 10h    ;Bring next word low
   527 00007986 66895006            <1>     mov word [rax + 6], dx  ;Get low word into offset 31...16
   528 0000798A 48C1EA10            <1>     shr rdx, 10h    ;Bring last dword low
   529 0000798E 895008              <1>     mov dword [rax + 8], edx
   530 00007991 FB                  <1>     sti
   531                              <1>     return
    13                              <2> %%_ret:
    14 00007992 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   532                              <1> 
   533                              <1> setResetVerify:    ;ah = 2Eh, turns ALL writes to write + verify
   534 00007993 8805(D0030000)      <1>     mov byte [verifyFlag], al
   535 00007999 8025(D0030000)01    <1>     and byte [verifyFlag], 1       ;Only save the bottom bit
   536                              <1>     return
    13                              <2> %%_ret:
    14 000079A0 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   537                              <1> getDOSversion:     ;ah = 30h
   538 000079A1 E8BEF8FFFF          <1>     call getUserRegs
   539 000079A6 30E4                <1>     xor ah, ah ;Continue the mainline PC-DOS identification line
   540 000079A8 886609              <1>     mov byte [rsi + callerFrame.rbx + 1], ah    ;Clear bh 
   541 000079AB 668B054E86FFFF      <1>     mov ax, word [dosVersion] ;Major and minor version in al,ah resp.
   542 000079B2 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Save ax
   543                              <1>     return
    13                              <2> %%_ret:
    14 000079B5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   544                              <1> 
   545                              <1> setDOSversion:  ;Int 2Fh, AX=122Fh - Set DOS verstion to report
   546                              <1> ;Input: dx = Version number. Value of 0 means true value.
   547 000079B6 6685D2              <1>     test dx, dx
   548 000079B9 750A                <1>     jnz .newVal
   549 000079BB 66C7053C86FFFF0063  <1>     mov word [dosVersion], dosVerMac    ;Reset the value
   550                              <1>     return
    13                              <2> %%_ret:
    14 000079C4 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   551                              <1> .newVal:
   552 000079C5 6689153486FFFF      <1>     mov word [dosVersion], dx    ;Store dx in the value to report.
   553                              <1>     return
    13                              <2> %%_ret:
    14 000079CC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   554                              <1> 
   555                              <1> ;AH = 1Fh/32h - GET (current) DISK DPB
   556                              <1> getCurrentDPBptr:  ;ah = 1Fh, simply falls in Int 21h\ah=32h with dl=0
   557 000079CD 30D2                <1>     xor dl, dl
   558                              <1> getDeviceDPBptr:   ;ah = 32h
   559                              <1> ;On entry: dl = Drive number 1-based drive number (0=Default)
   560                              <1> ;On exit: rbx = DPB pointer
   561 000079CF 88D0                <1>     mov al, dl
   562 000079D1 E822F9FFFF          <1>     call getCDS
   563 000079D6 722C                <1>     jc .bad
   564 000079D8 488B3D(12070000)    <1>     mov rdi, qword [workingCDS]  ;Get pointer to current CDS in rdi
   565 000079DF 66F747430080        <1>     test word [rdi + cds.wFlags], cdsRedirDrive ;Is dev a redir drv?
   566 000079E5 751D                <1>     jnz .bad    ;Redirector Drives have no DPBs!
   567                              <1>     ;Here ONLY if accessing critical Disk data structures
   568 000079E7 E8FEFCFFFF          <1>     call dosCrit1Enter  ;Enter class 1 critical section
   569 000079EC E83AF5FFFF          <1>     call getDiskDPB   ;See if the Disk structures are still ok 
   570 000079F1 E8FEFCFFFF          <1>     call dosCrit1Exit   ;Exit class 1 critical section
   571 000079F6 720C                <1>     jc .bad
   572 000079F8 E867F8FFFF          <1>     call getUserRegs
   573 000079FD 48896E08            <1>     mov [rsi + callerFrame.rbx], rbp    ;RBP has DPB pointer
   574 00007A01 30C0                <1>     xor al, al
   575                              <1>     return
    13                              <2> %%_ret:
    14 00007A03 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   576                              <1> .bad:
   577 00007A04 B0FF                <1>     mov al, -1
   578                              <1>     return
    13                              <2> %%_ret:
    14 00007A06 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   579                              <1> 
   580                              <1> getInDOSflagPtr:   ;ah = 34h
   581 00007A07 488D15(08040000)    <1>     lea rdx, inDOS
   582 00007A0E E851F8FFFF          <1>     call getUserRegs
   583 00007A13 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx  ;save ptr in rbx
   584                              <1>     return
    13                              <2> %%_ret:
    14 00007A17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   585                              <1> 
   586                              <1> getIntVector:      ;ah = 35h
   587                              <1> ;Called with:
   588                              <1> ;   al = Interrupt Number
   589                              <1> ;Returns:
   590                              <1> ;   rbx = Pointer to interrupt handler
   591 00007A18 E819F8FFFF          <1>     call muxGetIntVector    ;Get int vector in rbx, all other regs preserved
   592 00007A1D E842F8FFFF          <1>     call getUserRegs
   593 00007A22 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Save pointer in rbx
   594                              <1>     return
    13                              <2> %%_ret:
    14 00007A26 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   595                              <1> 
   596                              <1> getDiskFreeSpace:  ;ah = 36h
   597                              <1> ;Input: Drive number in dl (0 = Current)
   598                              <1> ;Output:    ax = sectors per cluster
   599                              <1> ;           ebx = number of free clusters
   600                              <1> ;           cx = bytes per sector
   601                              <1> ;           edx = total clusters on drive
   602 00007A27 88D0                <1>     mov al, dl
   603 00007A29 E8CAF8FFFF          <1>     call getCDS ;Get CDS pointer in workingCDS var for given drive
   604 00007A2E 7310                <1>     jnc .gdfsCDSFound   ;Exit if unable to find/make a CDS for drive
   605                              <1> ;Else, we at an error.
   606                              <1> ;Simply return with CY set and error code in al with extended error info
   607 00007A30 B80F000000          <1>     mov eax, errBadDrv
   608 00007A35 E8FBFCFFFF          <1>     call extErrExit ;Call, don't jump, to allow us to set ax to -1
   609                              <1>     ;extErrExit sets rsi to caller regs
   610 00007A3A 66C706FFFF          <1>     mov word [rsi + callerFrame.rax], -1    ;Set ax=FFFFh
   611                              <1>     return
    13                              <2> %%_ret:
    14 00007A3F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   612                              <1> .gdfsCDSFound:
   613 00007A40 E8A6F7FFFF          <1>     call getDiskData
   614 00007A45 7219                <1>     jc .error
   615                              <1> ;Now we have that:
   616                              <1> ;al = sectors per cluster
   617                              <1> ;ah = media ID byte
   618                              <1> ;ebx = total clusters
   619                              <1> ;cx = bytes per sector
   620                              <1> ;edx = number of available clusters
   621 00007A47 E818F8FFFF          <1>     call getUserRegs
   622 00007A4C 30E4                <1>     xor ah, ah  ;Don't need media byte, zero extend
   623 00007A4E 895E18              <1>     mov dword [rsi + callerFrame.rdx], ebx  ;Store total clusters
   624 00007A51 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx    ;Store bytes per sector
   625 00007A55 895608              <1>     mov dword [rsi + callerFrame.rbx], edx  ;Store # of Free clusters
   626 00007A58 806658FE            <1>     and byte [rsi + callerFrame.flags], ~1  ;Clear CF
   627                              <1> .badExit:
   628 00007A5C 668906              <1>     mov word [rsi + callerFrame.rax], ax    ;Store sectors per cluster
   629                              <1>     return
    13                              <2> %%_ret:
    14 00007A5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   630                              <1> .error:
   631 00007A60 E8D0FCFFFF          <1>     call extErrExit ;Sets rsi to point to callerFrame
   632 00007A65 66B8FFFF            <1>     mov ax, -1
   633 00007A69 EBF1                <1>     jmp short .badExit
   634                              <1> 
   635                              <1> 
   636                              <1> getRetCodeChild:   ;ah = 4Dh, WAIT, get ret code of subprocess
   637 00007A6B 31C0                <1>     xor eax, eax
   638 00007A6D 668705(2F040000)    <1>     xchg ax, word [errorLevel]
   639 00007A74 E9AEFCFFFF          <1>     jmp extGoodExit
   640                              <1> 
   641                              <1> getSysVarsPtr:     ;ah = 52h
   642 00007A79 488D15(3B000000)    <1>     lea rdx, sysVarsPtr
   643 00007A80 E8DFF7FFFF          <1>     call getUserRegs
   644 00007A85 48895608            <1>     mov qword [rsi + callerFrame.rbx], rdx
   645                              <1>     return
    13                              <2> %%_ret:
    14 00007A89 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   646                              <1> 
   647                              <1> 
   648                              <1> ;AH = 53h - CREATE DPB
   649                              <1> createDPB:         ;generates a DPB from a given BPB
   650                              <1> ;Only translates the data that can be garnered from a BPB to the DPB
   651                              <1> ;This is done so that the other fields of the DPB can be recycled
   652                              <1> ;Input: rsi = ptr to the BPB
   653                              <1> ;       rbp = ptr to the DPB
   654                              <1> ;Leave accessed flag alone! A brand new DPB should have -1 as accessed flag!
   655                              <1> ;bMediaDescriptor
   656 00007A8A 8A460A              <1>     mov al, byte [rsi + bpb.media]
   657 00007A8D 884523              <1>     mov byte [rbp + dpb.bMediaDescriptor], al
   658                              <1> ;dNextFreeClst
   659 00007A90 C7452DFFFFFFFF      <1>     mov dword [rbp + dpb.dNextFreeClst], -1  ;Start is default (clust 2)
   660                              <1> ;dFreeClustCnt
   661 00007A97 C74531FFFFFFFF      <1>     mov dword [rbp + dpb.dFreeClustCnt], -1 ;Start with unknown
   662                              <1> ;wBytesPerSector
   663 00007A9E 0FB706              <1>     movzx eax, word [rsi + bpb.bytsPerSec]
   664 00007AA1 66894502            <1>     mov word [rbp + dpb.wBytesPerSector], ax
   665                              <1> ;bMaxSectorInCluster
   666 00007AA5 8A4602              <1>     mov al, byte [rsi + bpb.secPerClus]
   667 00007AA8 FEC8                <1>     dec al  ;Subtract one to get the max number of the last sector in a cluster
   668 00007AAA 884504              <1>     mov byte [rbp + dpb.bMaxSectorInCluster], al
   669                              <1> ;bSecPerClustShift
   670 00007AAD FEC0                <1>     inc al
   671 00007AAF 31C9                <1>     xor ecx, ecx
   672                              <1> .cd2:
   673 00007AB1 D0E8                <1>     shr al, 1
   674 00007AB3 7404                <1>     jz .cd3
   675 00007AB5 FFC1                <1>     inc ecx
   676 00007AB7 EBF8                <1>     jmp short .cd2
   677                              <1> .cd3:
   678 00007AB9 884D05              <1>     mov byte [rbp + dpb.bSecPerClustShift], cl
   679                              <1> ;wFAToffset, number of reserved sectors in partition
   680 00007ABC 668B4603            <1>     mov ax, word [rsi + bpb.revdSecCnt]
   681 00007AC0 66894506            <1>     mov word [rbp + dpb.wFAToffset], ax
   682                              <1> ;bNumberOfFATs
   683 00007AC4 8A4605              <1>     mov al, byte [rsi + bpb.numFATs]
   684 00007AC7 884508              <1>     mov byte [rbp + dpb.bNumberOfFATs], al
   685                              <1> ;wNumberRootDirEntries
   686                              <1> ;Gets the number of 32 byte entries in the root directory
   687                              <1> ;Only valid for FAT 12/16
   688 00007ACA 0FB74606            <1>     movzx eax, word [rsi + bpb.rootEntCnt] ;Must be 0 on FAT 32
   689 00007ACE 66894509            <1>     mov word [rbp + dpb.wNumberRootDirEntries], ax  ;0 for FAT32
   690                              <1> ;dFATlength, get the FAT length
   691 00007AD2 0FB7460B            <1>     movzx eax, word [rsi + bpb.FATsz16]
   692 00007AD6 8B5E19              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   693 00007AD9 85C0                <1>     test eax, eax   ;If FATsz16 = 0, then use FATsz32
   694 00007ADB 0F44C3              <1>     cmovz eax, ebx  ;Only move 32bit value if sz16 was 0
   695 00007ADE 894513              <1>     mov dword [rbp + dpb.dFATlength], eax
   696                              <1> ;Complex cases below...
   697                              <1> ;dClusterHeapOffset, start sector of the data area
   698 00007AE1 0FB7460B            <1>     movzx eax, word [rsi + bpb.FATsz16]
   699 00007AE5 8B5E19              <1>     mov ebx, dword [rsi + bpb32.FATsz32]
   700 00007AE8 85C0                <1>     test eax, eax
   701 00007AEA 0F44C3              <1>     cmovz eax, ebx
   702                              <1> ;eax = FATsz
   703 00007AED 0FB75E08            <1>     movzx ebx, word [rsi + bpb.totSec16]
   704 00007AF1 8B4E15              <1>     mov ecx, dword [rsi + bpb.totSec32]
   705 00007AF4 85DB                <1>     test ebx, ebx
   706 00007AF6 0F44D9              <1>     cmovz ebx, ecx 
   707                              <1> ;ebx = TotSec
   708 00007AF9 31D2                <1>     xor edx, edx    ;Use edx = NumFATs * FATsz temporarily
   709 00007AFB 0FB64E05            <1>     movzx ecx, byte [rsi + bpb.numFATs]
   710 00007AFF 67E306              <1>     jecxz .cd41
   711                              <1> .cd4:
   712 00007B02 01C2                <1>     add edx, eax
   713 00007B04 FFC9                <1>     dec ecx
   714 00007B06 75FA                <1>     jnz .cd4
   715                              <1> .cd41:
   716 00007B08 89D0                <1>     mov eax, edx    ;Store product in eax
   717 00007B0A 0FB75603            <1>     movzx edx, word [rsi + bpb.revdSecCnt]  ;Get reserved sectors in volume
   718 00007B0E 01D0                <1>     add eax, edx
   719                              <1>     ;Multiply by 32 and divide by bytes per sector to get number of sectors
   720 00007B10 0FB75509            <1>     movzx edx, word [rbp + dpb.wNumberRootDirEntries]
   721 00007B14 C1E205              <1>     shl edx, 5  ;Bytes in the root directory
   722 00007B17 0FB74D02            <1>     movzx ecx, word [rbp + dpb.wBytesPerSector] ;Get bytes per sector
   723 00007B1B 50                  <1>     push rax    ;Save the current accumulated number of sectors on stack
   724 00007B1C 89D0                <1>     mov eax, edx
   725 00007B1E 31D2                <1>     xor edx, edx
   726 00007B20 F7F1                <1>     div ecx
   727 00007B22 89C2                <1>     mov edx, eax
   728 00007B24 58                  <1>     pop rax
   729 00007B25 01D0                <1>     add eax, edx    ;This adds nothing if FAT32
   730                              <1>     ;eax = BPB_ResvdSecCnt + (BPB_NumFATs * FATSz) + RootDirSectors
   731                              <1>     ;aka eax = Start sector of the data area in volume
   732 00007B27 89450B              <1>     mov dword [rbp + dpb.dClusterHeapOffset], eax
   733                              <1> ;dClusterCount
   734 00007B2A 29C3                <1>     sub ebx, eax    ;ebx = Number of sectors in the data area
   735 00007B2C 89D8                <1>     mov eax, ebx    ;Move number of sectors in data area into eax
   736 00007B2E 31D2                <1>     xor edx, edx
   737 00007B30 BB01000000          <1>     mov ebx, 1
   738 00007B35 0FB64D05            <1>     movzx ecx, byte [rbp + dpb.bSecPerClustShift]
   739 00007B39 D3E3                <1>     shl ebx, cl ;Get sectors per cluster
   740 00007B3B F7F3                <1>     div ebx ;Data area sector / sectors per cluster = cluster count
   741 00007B3D FFC0                <1>     inc eax ;Maximum valid cluster address is cluster count + 1
   742 00007B3F 89450F              <1>     mov dword [rbp + dpb.dMaxClusterAddr], eax    ;eax = Max cluster address
   743                              <1> ;dFirstUnitOfRootDir
   744 00007B42 3DF5FF0000          <1>     cmp eax, fat16MaxClustCnt  ;If above, its FAT32
   745 00007B47 8B4621              <1>     mov eax, dword [rsi + bpb32.RootClus]   ;Just save this if FAT32
   746 00007B4A 7712                <1>     ja .cd5
   747                              <1>     ;Else, we need to find the first sector of the root directory
   748                              <1>     ;Add the number of reserved sectors to the number of FATs*FATsz
   749 00007B4C 0FB74506            <1>     movzx eax, word [rbp + dpb.wFAToffset]  ;Get reserved count
   750 00007B50 0FB64D08            <1>     movzx ecx, byte [rbp + dpb.bNumberOfFATs]
   751 00007B54 67E307              <1>     jecxz .cd5
   752                              <1> .cd51:
   753 00007B57 034513              <1>     add eax, dword [rbp + dpb.dFATlength]
   754 00007B5A FFC9                <1>     dec ecx
   755 00007B5C 75F9                <1>     jnz .cd51
   756                              <1> .cd5:
   757 00007B5E 894517              <1>     mov dword [rbp + dpb.dFirstUnitOfRootDir], eax
   758 00007B61 C64524FF            <1>     mov byte [rbp + dpb.bAccessFlag], -1    ;Denote not yet accessed
   759 00007B65 E85B93FFFF          <1>     call readFSInfoSector   ;If FAT32, updates free cluster data with FSinfo
   760                              <1> ;Exit epilogue
   761                              <1> .exit:
   762 00007B6A 488B1D(7B040000)    <1>     mov rbx, qword [oldRSP]
   763 00007B71 8A03                <1>     mov al, byte [rbx + callerFrame.rax]        ;Return original al value 
   764                              <1>     %if DEBUG && DPBINFO
   765                              <1>     ;Print DPB 
   766                              <1>     debugEnterM
   767                              <1>     push rbp
   768                              <1>     lea rbp, .l0000
   769                              <1>     call debPrintNullString
   770                              <1>     pop rbp
   771                              <1>     call debDPBBPBptr
   772                              <1>     ;call debMakeDebuggerRespond
   773                              <1>     jmp short .l0001
   774                              <1> .l0000 db "Constructed DPB from given device BPB",0Ah,0Dh,0
   775                              <1> .l0001:
   776                              <1>     debugExitM
   777                              <1>     %endif
   778                              <1>     return
    13                              <2> %%_ret:
    14 00007B73 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   779                              <1> 
   780                              <1> getVerifySetting:  ;ah = 54h
   781 00007B74 8A05(D0030000)      <1>     mov al, byte [verifyFlag]   ;al is the return value in this case
   782                              <1>     return
    13                              <2> %%_ret:
    14 00007B7A C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   783                              <1> 
   784                              <1> getExtendedError:  ;ah = 59h
   785 00007B7B E8E4F6FFFF          <1>     call getUserRegs
   786 00007B80 668B05(0B040000)    <1>     mov ax, word [errorExCde]
   787 00007B87 8A2D(0A040000)      <1>     mov ch, byte [errorLocus]
   788 00007B8D 8A3D(0E040000)      <1>     mov bh, byte [errorClass]
   789 00007B93 8A1D(0D040000)      <1>     mov bl, byte [errorAction]
   790 00007B99 488B3D(0F040000)    <1>     mov rdi, qword [errorVolLbl]
   791 00007BA0 668906              <1>     mov word [rsi + callerFrame.rax], ax
   792 00007BA3 66895E08            <1>     mov word [rsi + callerFrame.rbx], bx
   793 00007BA7 886E11              <1>     mov byte [rsi + callerFrame.rcx + 1], ch
   794 00007BAA 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi
   795                              <1> noOp:
   796                              <1>     return
    13                              <2> %%_ret:
    14 00007BAE C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   797                              <1> ;At some point we will implement the below function but that is
   798                              <1> ; a low priority as it is not a DOS 3.3 function. 
   799                              <1> ;getsetDiskSerial:  ;ah = 69h, get/set disk serial number
    54                                  %include "./src/Kernel/Net/server.asm"
     1                              <1> ;Network functions here
     2                              <1> 
     3                              <1> dosServer:  ;ah = 5Dh
     4                              <1> ;Dispatches the server function in al. Many of these are share hooks.
     5                              <1> ;Input: For all functions except al = 06h, 07h, 08h, 09h
     6                              <1> ;   rdx = Pointer to DPL
     7 00007BAF 3C07                <1>     cmp al, 07h
     8 00007BB1 7204                <1>     jb .skip
     9 00007BB3 3C09                <1>     cmp al, 09h
    10 00007BB5 7619                <1>     jbe .skip2
    11                              <1> .skip:
    12 00007BB7 4889D6              <1>     mov rsi, rdx
    13 00007BBA 488B5E48            <1>     mov rbx, qword [rsi + dpl.compID]   ;Low word only used
    14 00007BBE 66891D(43040000)    <1>     mov word [machineNum], bx
    15 00007BC5 488B5E50            <1>     mov rbx, qword [rsi + dpl.procID]
    16 00007BC9 48891D(3B040000)    <1>     mov qword [serverPSP], rbx
    17                              <1> .skip2:
    18 00007BD0 488D1DD7FFFFFF      <1>     lea rbx, noOp   ;Push the ok function return address
    19 00007BD7 53                  <1>     push rbx
    20 00007BD8 488B1D(E2190000)    <1>     mov rbx, qword [serverDispTblPtr]   ;Get the qword
    21 00007BDF 53                  <1>     push rbx    ;Push the table ptr on the stack
    22 00007BE0 50                  <1>     push rax    ;Push al onto stack as a qword
    23 00007BE1 E856010000          <1>     call serverFunctionSelect
    24 00007BE6 B801000000          <1>     mov eax, eLocUnk
    25 00007BEB 8805(0A040000)      <1>     mov byte [errorLocus], al
    26 00007BF1 E93FFBFFFF          <1>     jmp extErrExit
    27                              <1> 
    28                              <1> serverDispatch: ;AX=5D00h
    29                              <1> ;Input: rsi points to the DOS parameter list
    30 00007BF6 58                  <1>     pop rax ;Pop additional return ptr off the stack
    31 00007BF7 56                  <1>     push rsi    ;Put dpl ptr in rdi
    32 00007BF8 5F                  <1>     pop rdi
    33 00007BF9 E866F6FFFF          <1>     call getUserRegs
    34 00007BFE 4887FE              <1>     xchg rdi, rsi   ;Put ptr to caller frame in rdi and return dpl ptr into rsi
    35 00007C01 56                  <1>     push rsi
    36 00007C02 B906000000          <1>     mov ecx, 6
    37 00007C07 F348A5              <1>     rep movsq   ;Copy over first 6 registers from dpl to caller frame
    38 00007C0A 4881C708000000      <1>     add rdi, 8  ;Skip rbp on the caller stack
    39 00007C11 48A5                <1>     movsq   ;Transfer r8...
    40 00007C13 48A5                <1>     movsq   ;... and r9
    41 00007C15 5E                  <1>     pop rsi
    42 00007C16 488B06              <1>     mov rax, qword [rsi + callerFrame.rax]
    43 00007C19 488B5E08            <1>     mov rbx, qword [rsi + callerFrame.rbx]
    44 00007C1D 488B4E10            <1>     mov rcx, qword [rsi + callerFrame.rcx]
    45 00007C21 488B5618            <1>     mov rdx, qword [rsi + callerFrame.rdx]
    46 00007C25 488B7E28            <1>     mov rdi, qword [rsi + callerFrame.rdi]
    47 00007C29 4C8B4638            <1>     mov r8, qword [rsi + callerFrame.r8]
    48 00007C2D 4C8B4E40            <1>     mov r9, qword [rsi + callerFrame.r9]
    49 00007C31 488B7620            <1>     mov rsi, qword [rsi + callerFrame.rsi]
    50 00007C35 48891D(83040000)    <1>     mov qword [oldRBX], rbx
    51 00007C3C C605(02070000)FF    <1>     mov byte [dosInvoke], -1    ;Mark Server invoke
    52 00007C43 E9A3F9FFFF          <1>     jmp functionDispatch.serverEP   ;Enter the server EP
    53                              <1> 
    54                              <1> commitAllFilesForProcess:   ;AX=5D01h
    55                              <1> ;Will commit all the files for the current Process as indicated by the DPL
    56                              <1> ;A bad procID (otherwise known as a PSP) may otherwise crash the call.
    57                              <1> ;Thus we check the first two bytes of the current PSP to be CDh 20h
    58                              <1> ;If so, we proceed, otherwise, fail with AccDen
    59 00007C48 488B1D(1F040000)    <1>     mov rbx, qword [currentPSP] ;Get the current PSP (setup from DPL)
    60 00007C4F 66813BCD20          <1>     cmp word [rbx], 20CDh
    61 00007C54 740A                <1>     je .validTask
    62 00007C56 B805000000          <1>     mov eax, errAccDen
    63 00007C5B E9D5FAFFFF          <1>     jmp extErrExit
    64                              <1> .validTask:
    65 00007C60 31DB                <1>     xor ebx, ebx    ;Start from file 0
    66 00007C62 E883FAFFFF          <1>     call dosCrit1Enter
    67                              <1> .mainLoop:
    68                              <1>     ;Now loop through the JFT of the current task committing the files
    69 00007C67 53                  <1>     push rbx
    70 00007C68 E8B2D4FFFF          <1>     call derefSFTPtr    ;Get in rdi the pointer for this SFT entry
    71 00007C6D 7227                <1>     jc .exit
    72 00007C6F 66813F0000          <1>     cmp word [rdi + sft.wNumHandles], 0   ;Is this an unopened file?
    73 00007C74 741B                <1>     je .gotoNextFile
    74 00007C76 66813FFFFF          <1>     cmp word [rdi + sft.wNumHandles], -1  ;Is this in the process of something?
    75 00007C7B 7414                <1>     je .gotoNextFile
    76 00007C7D 66F747050080        <1>     test word [rdi + sft.wDeviceInfo], devRedirDev  ;Dont commit redirs
    77 00007C83 750C                <1>     jnz .gotoNextFile
    78 00007C85 48893D(32070000)    <1>     mov qword [currentSFT], rdi ;Set this as the current SFT
    79 00007C8C E8BAC1FFFF          <1>     call commitMain ;Will reenter critical section but thats ok
    80                              <1>     ;If it succeeded, great, cool also if not, keep going!
    81                              <1> .gotoNextFile:
    82 00007C91 5B                  <1>     pop rbx
    83 00007C92 FFC3                <1>     inc ebx
    84 00007C94 EBD1                <1>     jmp short .mainLoop
    85                              <1> .exit:
    86 00007C96 E859FAFFFF          <1>     call dosCrit1Exit
    87 00007C9B 5B                  <1>     pop rbx ;Align stack
    88 00007C9C E986FAFFFF          <1>     jmp extGoodExit
    89                              <1> 
    90                              <1> closeFilesByName:           ;AX=5D02h
    91 00007CA1 FF15(E7000000)      <1>     call qword [closeNameShare]
    92                              <1> .shareExit: ;Use this symbol if we need a decision to be made
    93                              <1> .shareExitBad:  ;Use this symbol if we want to exit Error
    94 00007CA7 0F8288FAFFFF        <1>     jc extErrExit
    95                              <1> .shareExitGood:
    96 00007CAD E975FAFFFF          <1>     jmp extGoodExit
    97                              <1> 
    98                              <1> closeFilesByComputer:       ;AX=5D03h
    99 00007CB2 FF15(D7000000)      <1>     call qword [closeCompShare]
   100 00007CB8 EBED                <1>     jmp short closeFilesByName.shareExit
   101                              <1> 
   102                              <1> closeFilesByProcess:        ;AX=5D04h
   103 00007CBA FF15(DF000000)      <1>     call qword [closeTaskShare]
   104 00007CC0 EBE5                <1>     jmp short closeFilesByName.shareExit
   105                              <1> 
   106                              <1> getOpenFileListEntry:       ;AX=5D05h
   107 00007CC2 FF15(07010000)      <1>     call qword [openFileListShare]  ;Must zero extend all results to 8 bytes
   108 00007CC8 72DD                <1>     jc closeFilesByName.shareExitBad
   109 00007CCA E895F5FFFF          <1>     call getUserRegs
   110 00007CCF 48895E08            <1>     mov qword [rsi + callerFrame.rbx], rbx  ;Network machine number (0-ext)
   111 00007CD3 48897E28            <1>     mov qword [rsi + callerFrame.rdi], rdi  ;Ptr to file name
   112                              <1> .shareExit:    ;rcx must be zero extended however to use this
   113 00007CD7 48894E10            <1>     mov qword [rsi + callerFrame.rcx], rcx  ;Lock count
   114                              <1> .shareExit2:
   115 00007CDB EBD0                <1>     jmp short closeFilesByName.shareExitGood
   116                              <1> 
   117                              <1> getSDAData:                 ;AX=5D06h
   118                              <1> ;Returns:
   119                              <1> ;   rsi -> nonreentrant data area (includes all three DOS stacks)
   120                              <1> ;   (critical error flag is first byte) (see #01687)
   121                              <1> ;   rcx = size in bytes of area which must be swapped while in DOS
   122                              <1> ;   rdx = size in bytes of area which must always be swapped
   123 00007CDD 488D3D(07040000)    <1>     lea rdi, sda
   124 00007CE4 48B9DB150000000000- <1>     mov rcx, sdaLen
   124 00007CED 00                  <1>
   125 00007CEE 48BA2C000000000000- <1>     mov rdx, sdaLen - sdaDOSLen ;Get the difference
   125 00007CF7 00                  <1>
   126 00007CF8 E867F5FFFF          <1>     call getUserRegs
   127 00007CFD 48897E20            <1>     mov qword [rsi + callerFrame.rsi], rdi
   128 00007D01 48895618            <1>     mov qword [rsi + callerFrame.rdx], rdx
   129 00007D05 EBD0                <1>     jmp short getOpenFileListEntry.shareExit   ;Stores rcx and returns ok
   130                              <1> 
   131                              <1> printerRedir:               ;AX=5D07/8/9h
   132 00007D07 50                  <1>     push rax
   133 00007D08 B825110000          <1>     mov eax, 1125h  ;Redir Printer Mode setup
   134 00007D0D CD2F                <1>     int 2Fh
   135 00007D0F 5B                  <1>     pop rbx
   136 00007D10 7295                <1>     jc short closeFilesByName.shareExitBad
   137 00007D12 EB99                <1>     jmp short  closeFilesByName.shareExitGood
   138                              <1> 
   139                              <1> setExtendedErrorInfo:       ;AX=5D0Ah
   140                              <1> ;Input:
   141                              <1> ;   rsi -> DPL
   142 00007D14 8B06                <1>     mov eax, dword [rsi + dpl.rax]  ;Get ax (extended error code)
   143 00007D16 668905(0B040000)    <1>     mov word [errorExCde], ax
   144 00007D1D 488B4628            <1>     mov rax, qword [rsi + dpl.rdi]  ;Set the volume label pointer var
   145 00007D21 488905(0F040000)    <1>     mov qword [errorVolLbl], rax
   146 00007D28 8B4608              <1>     mov eax, dword [rsi + dpl.rbx]  ;Get bx (error action and class)
   147 00007D2B 668905(0D040000)    <1>     mov word [errorAction], ax  ;Store action and class together
   148 00007D32 8B4610              <1>     mov eax, dword [rsi + dpl.rcx]  ;Get ch (error locus)
   149 00007D35 8825(0A040000)      <1>     mov byte [errorLocus], ah
   150                              <1>     return  ;Return to the function ptr on the stack (the return function)
    13                              <2> %%_ret:
    14 00007D3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   151                              <1> 
   152                              <1> serverFunctionSelect:
   153                              <1> ;First parameter is al ONLY, subfunction number (BP + 2*8)
   154                              <1> ;Second parameter is table address, (BP + 3*8)
   155 00007D3C 55                  <1>     push rbp
   156 00007D3D 4889E5              <1>     mov rbp, rsp
   157 00007D40 53                  <1>     push rbx
   158 00007D41 488B5D18            <1>     mov rbx, qword [rbp + 3*8]  ;Get table ptr
   159 00007D45 0FB61B              <1>     movzx ebx, byte [rbx]   ;Get the table length
   160 00007D48 3A5D10              <1>     cmp bl, byte [rbp + 2*8]    ;Is subfunction number less than bl?
   161 00007D4B 7621                <1>     jbe short .argumentTooBig
   162 00007D4D 0FB65D10            <1>     movzx ebx, byte [rbp + 2*8] ;Get subfunction into ebx
   163 00007D51 D1E3                <1>     shl ebx, 1  ;Convert to word offset
   164 00007D53 FFC3                <1>     inc ebx ;Go past the initial byte of the table
   165 00007D55 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   166 00007D59 0FB71B              <1>     movzx ebx, word [rbx]   ;Get the offset of the function from the tbl head
   167 00007D5C 48035D18            <1>     add rbx, qword [rbp + 3*8]  ;Add the table base address to the offset
   168 00007D60 48895D20            <1>     mov qword [rbp + 4*8], rbx  ;Store this address as the return address
   169 00007D64 5B                  <1>     pop rbx
   170 00007D65 5D                  <1>     pop rbp
   171 00007D66 4881C418000000      <1>     add rsp, 3*8    ;Go past old return and old subfunction value
   172                              <1>     return
    13                              <2> %%_ret:
    14 00007D6D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   173                              <1> .argumentTooBig:
   174 00007D6E 5B                  <1>     pop rbx
   175 00007D6F 5D                  <1>     pop rbp
   176 00007D70 C21800              <1>     ret 3*8 ;Clear stack of all argument bytes
   177                              <1> 
   178                              <1> netServices:   ;ah = 5Eh, do nothing
   179                              <1> ;Only two native functions, AL=0 and AL=1 (get/set machine name)
   180 00007D73 3C01                <1>     cmp al, 01
   181 00007D75 7214                <1>     jb .getName
   182 00007D77 7437                <1>     jz .setName
   183 00007D79 3C06                <1>     cmp al, 6
   184 00007D7B 724C                <1>     jb .netRedir
   185 00007D7D C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
   186 00007D84 B001                <1>     mov al, errInvFnc
   187                              <1> .badExit:
   188 00007D86 E9AAF9FFFF          <1>     jmp extErrExit
   189                              <1> .getName:
   190                              <1> ;Input: rdx -> 16 byte buffer to fill with machine name
   191                              <1> ;Output: CF=NC => Success.
   192                              <1> ;        CH = Name Validity (if 0, the name is invalid)
   193                              <1> ;        CL = NetBIOS number for the machine
   194                              <1> ;        rdx -> Blank padded Filled buffer with machine name
   195                              <1> ;        CF=CY => Failure
   196                              <1> ;        AX = Errorcode
   197 00007D8B 4889D7              <1>     mov rdi, rdx
   198 00007D8E 0FB70D(1D000000)    <1>     movzx ecx, word [validNetNam]
   199 00007D95 E8CAF4FFFF          <1>     call getUserRegs
   200 00007D9A 66894E10            <1>     mov word [rsi + callerFrame.rcx], cx
   201 00007D9E 488D35(D6030000)    <1>     lea rsi, machineName
   202                              <1> .nameCmn:
   203 00007DA5 31C0                <1>     xor eax, eax
   204 00007DA7 48A5                <1>     movsq
   205 00007DA9 A5                  <1>     movsd
   206 00007DAA 66A5                <1>     movsw
   207 00007DAC A4                  <1>     movsb
   208 00007DAD AA                  <1>     stosb   ;Store terminating null
   209 00007DAE EB24                <1>     jmp short .exitGood
   210                              <1> .setName:
   211                              <1> ;Input: rdx -> 16 byte buffer with new machine name
   212                              <1> ;       CH = 0 => Mark name as invalid
   213                              <1> ;         != 0 => Mark name as valid
   214                              <1> ;       CL = NetBIOS number for the name
   215 00007DB0 66890D(1D000000)    <1>     mov word [validNetNam], cx
   216 00007DB7 4889D6              <1>     mov rsi, rdx
   217 00007DBA FE05(D5030000)      <1>     inc byte [serverCnt]    ;Increment the name change flag
   218 00007DC0 488D3D(D6030000)    <1>     lea rdi, machineName
   219 00007DC7 EBDC                <1>     jmp short .nameCmn
   220                              <1> 
   221                              <1> .netRedir:
   222 00007DC9 50                  <1>     push rax
   223 00007DCA B81F110000          <1>     mov eax, 111Fh  ;Net Services over the Redirector
   224 00007DCF CD2F                <1>     int 2Fh
   225 00007DD1 5A                  <1>     pop rdx
   226 00007DD2 72B2                <1>     jc .badExit
   227                              <1> .exitGood:
   228 00007DD4 E94EF9FFFF          <1>     jmp extGoodExit
   229                              <1> 
   230                              <1> netRedir:;ah = 5Fh, redirector needs to be installed
   231                              <1> ;Exception: We pick off ah=07 (ENABLE DRIVE) and ah=08 (DISABLE DRIVE)
   232 00007DD9 80FC07              <1>     cmp ah, 07h
   233 00007DDC 7419                <1>     je .driveAction
   234 00007DDE 80FC08              <1>     cmp ah, 08h
   235 00007DE1 7414                <1>     je .driveAction
   236                              <1>     ;Else, use redirector to process request
   237 00007DE3 50                  <1>     push rax
   238 00007DE4 B81E110000          <1>     mov eax, 111eh  ;Do redirection redirector function
   239 00007DE9 CD2F                <1>     int 2Fh
   240 00007DEB 5B                  <1>     pop rbx
   241                              <1> .badExit:
   242 00007DEC 0F8243F9FFFF        <1>     jc extErrExit
   243                              <1> .goodExit:
   244 00007DF2 E930F9FFFF          <1>     jmp extGoodExit
   245                              <1> .driveAction:
   246                              <1> ;dl must have valid 0-based drive number
   247 00007DF7 86C2                <1>     xchg al, dl ;Get function number in dl and drive number in al
   248 00007DF9 E855F5FFFF          <1>     call getCDSforDrive
   249 00007DFE 72EC                <1>     jc short .badExit
   250                              <1>     ;rsi points to CDS
   251 00007E00 80EA07              <1>     sub dl, 7
   252 00007E03 7408                <1>     jz .enable
   253 00007E05 66816643FFBF        <1>     and word [rsi + cds.wFlags], ~cdsValidDrive ;Clear bit
   254 00007E0B EBE5                <1>     jmp short .goodExit
   255                              <1> .enable:
   256 00007E0D 66814E430040        <1>     or word [rsi + cds.wFlags], cdsValidDrive   ;Set bit
   257 00007E13 EBDD                <1>     jmp short .goodExit
    55                                  %include "./src/Kernel/Net/multiplx.asm"
     1                              <1> ;Default multiplexer and install check for other DOS multiplex functions.
     2                              <1> ;Mainly to handle the DOS multiplexer, i.e. ah=12h. Three other 
     3                              <1> ; cases also handled as outlined below.
     4                              <1> ;------------------------------------------------------------------------
     5                              <1> ;Handle ah = 10h,11h,14h install check requests only (al=0).
     6                              <1> ; If al <> 0, return error, set CF and al = 1.
     7                              <1> ; For reference:
     8                              <1> ; ah = 10h, (SHARE)
     9                              <1> ;           Return: al = 0, not installed, ok to install
    10                              <1> ;                   al = 1, not installed, not ok to install
    11                              <1> ;                   al = -1, installed.
    12                              <1> ; ah = 11h, (REDIR)
    13                              <1> ; ah = 14h, (NLS)
    14                              <1> ;Any other value of ah simply falls through the IRETQ
    15                              <1> ;------------------------------------------------------------------------
    16                              <1> ;If an argument needs to be in al for any function, it must be pushed on
    17                              <1> ; stack before the interrupt is called. This word is always read from the
    18                              <1> ; stack, but the stack is not rejiggled to remove it.
    19                              <1> 
    20                              <1> multiplexHdlr:          ;Int 2Fh, AH=12h, exposed internal functions
    21 00007E15 80FC10              <1>     cmp ah, 10h ;Are we share?
    22 00007E18 7411                <1>     je .installCheck
    23 00007E1A 80FC11              <1>     cmp ah, 11h ;Are we redir?
    24 00007E1D 740C                <1>     je .installCheck
    25 00007E1F 80FC12              <1>     cmp ah, 12h
    26 00007E22 741E                <1>     je .goMplx
    27 00007E24 80FC14              <1>     cmp ah, 14h ;Are we NLS?
    28 00007E27 7402                <1>     je .installCheck
    29 00007E29 48CF                <1>     iretq
    30                              <1> 
    31                              <1> .installCheck:
    32                              <1> ;Here if a share, redir or NLS request.
    33                              <1> ;All of these should be installed over us if installed.
    34                              <1> ;Thus we are not installed. Return not installed, if that is what the 
    35                              <1> ;request wants. (AL=0)
    36                              <1> ;If anything else requested, return error.
    37 00007E2B 84C0                <1>     test al, al
    38 00007E2D 7411                <1>     jz .exit
    39                              <1> .exitBad:
    40 00007E2F B801000000          <1>     mov eax, errInvFnc
    41 00007E34 C605(0A040000)01    <1>     mov byte [errorLocus], eLocUnk
    42 00007E3B 804C241001          <1>     or byte [rsp + 8h*2], 1 ;Set CF
    43                              <1> .exit:
    44 00007E40 48CF                <1>     iretq
    45                              <1> 
    46                              <1> .goMplx:
    47 00007E42 3C30                <1>     cmp al, mDispTblL / 2
    48 00007E44 73E9                <1>     jae .exitBad   ;If above or equal, exit
    49                              <1>     ;Rejiggle stack! 
    50                              <1> 
    51 00007E46 53                  <1>     push rbx    ;Storage for return from DOS ret addr
    52 00007E47 53                  <1>     push rbx    ;Storage for DOS function
    53 00007E48 53                  <1>     push rbx    ;Stores rbx value
    54 00007E49 488D1D2E000000      <1>     lea rbx, .retAddr
    55 00007E50 48895C2410          <1>     mov qword [rsp + 2*8], rbx    ;Store ret addr from DOS routine
    56                              <1> 
    57 00007E55 51                  <1>     push rcx
    58 00007E56 488D1DD187FFFF      <1>     lea rbx, qword mDispTbl   ;Get mplx displacement tbl
    59 00007E5D 53                  <1>     push rbx
    60 00007E5E 0FB6C8              <1>     movzx ecx, al   ;Get the subfunction number into ecx
    61 00007E61 D1E1                <1>     shl ecx, 1   ;multiply by 2
    62 00007E63 48FFC3              <1>     inc rbx         ;Go past the first byte (length count)
    63 00007E66 0FB71C0B            <1>     movzx ebx, word [rbx + rcx] ;Get the word at this address
    64 00007E6A 59                  <1>     pop rcx ;Get the EA of the displacement table in rcx
    65 00007E6B 4801CB              <1>     add rbx, rcx
    66 00007E6E 59                  <1>     pop rcx
    67 00007E6F 48895C2408          <1>     mov qword [rsp + 8], rbx
    68 00007E74 5B                  <1>     pop rbx
    69 00007E75 488B442428          <1>     mov rax, qword [rsp + 5*8]  ;Get the old stack pointer from the frame
    70 00007E7A 488B00              <1>     mov rax, qword [rax]        ;Get the argument we pushed on the stack
    71                              <1>     return  ;Now we have no alignement requirements :D 
    13                              <2> %%_ret:
    14 00007E7D C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    72                              <1> 
    73                              <1> .retAddr:
    74 00007E7E 53                  <1>     push rbx
    75 00007E7F 9C                  <1>     pushfq
    76 00007E80 5B                  <1>     pop rbx
    77 00007E81 48895C2418          <1>     mov qword [rsp + 3*8], rbx
    78 00007E86 5B                  <1>     pop rbx
    79 00007E87 48CF                <1>     iretq
    80                              <1> 
    81                              <1> multiplexTest:
    82 00007E89 B0FF                <1>     mov al, -1
    83 00007E8B C3                  <1>     ret
    84                              <1> 
    85                              <1> getDosDataSeg:  ;Int 2Fh, AX=1203h
    86                              <1> ;Return: r8 = Dos Data Segment Pointer
    87 00007E8C 4C8D05(00000000)    <1>     lea r8, dosDataArea
    88                              <1>     return
    13                              <2> %%_ret:
    14 00007E93 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    89                              <1> 
    90                              <1> mpxOpen:   ;Int 2Fh, AX=1226h, Open File
    91                              <1> ;Input: cl = open mode
    92                              <1> ;       rdx -> Ptr to filename to open
    93                              <1> ;Output: ax = Error code/handle with CF indicating failure/success
    94 00007E94 88C8                <1>     mov al, cl
    95 00007E96 E862B7FFFF          <1>     call openFileHdl
    96                              <1>     return
    13                              <2> %%_ret:
    14 00007E9B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    97                              <1> 
    98                              <1> mpxLseek:  ;Int 2Fh, AX=1228h, LSEEK
    99                              <1> ;Input:  
   100                              <1> ;   ebp = Low byte contains subfunction, in normal EP is provided by al
   101                              <1> ;   ebx = Handle to move (lower word only)
   102                              <1> ;   ecx = Number of bytes to move
   103                              <1> ;   edx = 0 (upper dword, reserved for now)
   104                              <1> ;Return:
   105                              <1> ;   eax = New pointer location
   106                              <1> ;   edx = 0
   107 00007E9C FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   108 00007EA2 488D05(211A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   109 00007EA9 488905(7B040000)    <1>     mov qword [oldRSP], rax
   110 00007EB0 89E8                <1>     mov eax, ebp
   111 00007EB2 E872B9FFFF          <1>     call lseekHdl   ;Sets the values of our registers by how it exits
   112 00007EB7 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   113                              <1>     return
    13                              <2> %%_ret:
    14 00007EBD C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   114                              <1> 
   115                              <1> mpxIOCTL:  ;Int 2Fh, AX=122Bh
   116                              <1> ;IO is done exactly as documented by DOS except al is passed in 
   117                              <1> ; low byte of bp.
   118 00007EBE FF35(7B040000)      <1>     push qword [oldRSP] ;Save the callers register stack on internal DOS stack
   119 00007EC4 488D05(211A0000)    <1>     lea rax, mplxRegStack   ;Swap so that function writes retvals here
   120 00007ECB 488905(7B040000)    <1>     mov qword [oldRSP], rax
   121 00007ED2 89E8                <1>     mov eax, ebp
   122 00007ED4 E8CDD2FFFF          <1>     call ioctrl   ;Sets the values of our registers by how it exits
   123 00007ED9 8F05(7B040000)      <1>     pop qword [oldRSP]  ;Get back OG sp
   124                              <1>     return  
    13                              <2> %%_ret:
    14 00007EDF C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   125                              <1> 
   126                              <1> mpxChecksum:
   127                              <1> ;Computes the checksum of a number of bytes in memory
   128                              <1> ;Input: edx = Start value for checksum
   129                              <1> ;       ecx = number of bytes to sum
   130                              <1> ;       rsi -> Ptr to byte array to perform sum on
   131 00007EE0 31C0                <1>     xor eax, eax
   132 00007EE2 67E307              <1>     jecxz .exit
   133                              <1> .lp:
   134 00007EE5 AC                  <1>     lodsb
   135 00007EE6 01C2                <1>     add edx, eax
   136 00007EE8 FFC9                <1>     dec ecx
   137 00007EEA 75F9                <1>     jnz .lp
   138                              <1> .exit:
   139                              <1>     return
    13                              <2> %%_ret:
    14 00007EEC C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   140                              <1> mpxSum: ;Could use in readDateTimeRecord (two places)
   141                              <1> ;Sums the values in a number of bytes in memory
   142                              <1> ;Input: rsi -> Byte array to sum values of
   143                              <1> ;       edx = Value limit (for the sum)
   144                              <1> ;       ecx = 0
   145 00007EED 31C0                <1>     xor eax, eax
   146                              <1> .lp:
   147 00007EEF AC                  <1>     lodsb
   148 00007EF0 39C2                <1>     cmp edx, eax
   149                              <1>     retc
    57                              <2> cret c
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007EF2 7301                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007EF4 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   150 00007EF5 29C2                <1>     sub edx, eax
   151 00007EF7 FFC1                <1>     inc ecx
   152 00007EF9 EBF4                <1>     jmp short .lp
    56                                  %include "./src/Kernel/Net/share.asm"
     1                              <1> ;Kernel functions to be used by SHARE on SHARE'd files.
     2                              <1> 
     3                              <1> ;Generic Share Hooks and Wrappers
     4                              <1> shareBadFunction:
     5 00007EFB B801000000          <1>     mov eax, errInvFnc
     6 00007F00 668905(0B040000)    <1>     mov word [errorExCde], ax
     7 00007F07 F9                  <1>     stc
     8                              <1>     return
    13                              <2> %%_ret:
    14 00007F08 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
     9                              <1> badDfltShareHook:
    10                              <1> ;Return CF=CY
    11 00007F09 E8EDFFFFFF          <1>     call shareBadFunction
    12                              <1>     return
    13                              <2> %%_ret:
    14 00007F0E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    13                              <1> goodDfltShareHook:
    14                              <1> ;Return CF=NC
    15 00007F0F F8                  <1>     clc
    16                              <1>     return
    13                              <2> %%_ret:
    14 00007F10 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    17                              <1> openShareCallWrapper:
    18 00007F11 FF15(C7000000)      <1>     call qword [openShare]
    19                              <1>     return
    13                              <2> %%_ret:
    14 00007F17 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    20                              <1> closeShareCallWrapper:
    21 00007F18 FF15(CF000000)      <1>     call qword [closeShare]
    22                              <1>     return
    13                              <2> %%_ret:
    14 00007F1E C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    23                              <1> 
    24                              <1> retryShareIODelay:
    25                              <1> ;Checks to see if the region of the file we are IOing with is locked.
    26                              <1> ;Called only in readDiskFile and writeDiskFile
    27                              <1> ;Input: rdi -> SFT for current file
    28                              <1> ;       ecx = Length of region from current position in file
    29                              <1> ;Output: If CF=NC, not locked
    30                              <1> ;        If CF=CY if ANY portion of the region is locked and EAX=errLokVio
    31 00007F1F 0FB71D(1F000000)    <1>     movzx ebx, word [shareCount]
    32                              <1> .mainLoop:      
    33 00007F26 53                  <1>     push rbx
    34 00007F27 FF15(FF000000)      <1>     call qword [checkFileLockShare]
    35 00007F2D 5B                  <1>     pop rbx
    36                              <1>     retnc   ;Return if CF=NC (i.e. region not locked [anymore])
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007F2E 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007F30 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    37 00007F31 E806000000          <1>     call shareRetryCountdown
    38 00007F36 FFCB                <1>     dec ebx
    39 00007F38 75EC                <1>     jnz .mainLoop
    40 00007F3A F9                  <1>     stc
    41                              <1>     return
    13                              <2> %%_ret:
    14 00007F3B C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    42                              <1> 
    43                              <1> shareRetryCountdown:
    44                              <1> ;Used in: OpenMain, retryShareIODelay, sharingLoop
    45                              <1> ;Does the retry wait IFF the request was not a server request.
    46 00007F3C F605(02070000)FF    <1>     test byte [dosInvoke], -1   ;Server call?
    47                              <1>     retnz   ;Exit by default if it is a server call
    45                              <2> cret nz
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007F43 7401                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007F45 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    48 00007F46 51                  <1>     push rcx
    49 00007F47 0FB70D(21000000)    <1>     movzx ecx, word [shareDelay]    ;This many multiples of counts to 65536 
    50 00007F4E 67E30D              <1>     jecxz .exit
    51                              <1> .loopBody:
    52 00007F51 51                  <1>     push rcx
    53 00007F52 31C9                <1>     xor ecx, ecx
    54                              <1> .mainLoop:
    55 00007F54 66FFC9              <1>     dec cx
    56 00007F57 75FB                <1>     jnz .mainLoop
    57 00007F59 59                  <1>     pop rcx
    58 00007F5A FFC9                <1>     dec ecx
    59 00007F5C 75F3                <1>     jnz .loopBody
    60                              <1> .exit:
    61 00007F5E 59                  <1>     pop rcx
    62                              <1>     return
    13                              <2> %%_ret:
    14 00007F5F C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    63                              <1> 
    64                              <1> shareCheckOpenViolation:
    65                              <1> ;Input: rdi -> Locally complete SFT we are opening
    66 00007F60 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
    67 00007F66 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
    68 00007F68 50                  <1>     push rax
    69 00007F69 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
    70 00007F6D 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
    71 00007F72 58                  <1>     pop rax
    72 00007F73 7508                <1>     jnz .notInCompatMode    ;Jump if not zero only!
    73                              <1> .fcbQuirk:
    74 00007F75 E872000000          <1>     call shareLockViolationCriticalError
    75                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007F7A 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007F7C C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
    76                              <1> .notInCompatMode:
    77 00007F7D B820000000          <1>     mov eax, errShrVio
    78 00007F82 F9                  <1>     stc ;Set the flag for error
    79                              <1>     return
    13                              <2> %%_ret:
    14 00007F83 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    80                              <1> 
    81                              <1> 
    82                              <1> 
    83                              <1> shareFile:
    84                              <1> ;Once the SFT has been made, here we allocate resources within share to
    85                              <1> ; share the file, if it is possible to do so!
    86                              <1> ; This is done by calling the open wrapper
    87                              <1> ;Output: rdi -> Current SFT!!
    88 00007F84 51                  <1>     push rcx
    89                              <1> .reloadCounter:
    90 00007F85 0FB70D(1F000000)    <1>     movzx ecx, word [shareCount] ;Try to allocate resources, this many times
    91                              <1> .keepLooping:
    92 00007F8C 488B3D(32070000)    <1>     mov rdi, qword [currentSFT]
    93 00007F93 31C0                <1>     xor eax, eax
    94 00007F95 66C7474D0000        <1>     mov word [rdi + sft.wShareRec], 0   ;Init to no record
    95 00007F9B 51                  <1>     push rcx
    96 00007F9C E870FFFFFF          <1>     call openShareCallWrapper
    97 00007FA1 59                  <1>     pop rcx
    98 00007FA2 7310                <1>     jnc .exit   ;If all good, exit! (a record has now been made by SHARE.EXE)
    99 00007FA4 E893FFFFFF          <1>     call shareRetryCountdown
   100 00007FA9 FFC9                <1>     dec ecx
   101 00007FAB 75DF                <1>     jnz .keepLooping
   102 00007FAD E842000000          <1>     call shareCriticalError
   103 00007FB2 73D1                <1>     jnc .reloadCounter  ;If user selected retry, we retry
   104                              <1> .exit:
   105 00007FB4 59                  <1>     pop rcx
   106                              <1>     return
    13                              <2> %%_ret:
    14 00007FB5 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   107                              <1> 
   108                              <1> shareCheckWriteLockViolation:
   109 00007FB6 C605(00070000)01    <1>     mov byte [rwFlag], 1    ;Called in write, might not be set so set it
   110 00007FBD EB07                <1>     jmp short shareCheckReadLockViolation.common
   111                              <1> shareCheckReadLockViolation:
   112 00007FBF C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Called in read, might not be set so set it
   113                              <1> .common:
   114                              <1> ;Input:
   115                              <1> ;rdi -> SFT for the file we are reading
   116 00007FC6 66F747020080        <1>     test word [rdi + sft.wOpenMode], FCBopenedFile
   117 00007FCC 750D                <1>     jnz .fcbQuirk   ;FCB?? opened files immediately will cause an error here
   118 00007FCE 50                  <1>     push rax
   119 00007FCF 0FB74702            <1>     movzx eax, word [rdi + sft.wOpenMode]
   120 00007FD3 25F0000000          <1>     and eax, 0F0h   ;Save second nybble only (sharing modes)
   121 00007FD8 58                  <1>     pop rax
   122 00007FD9 7508                <1>     jnz .notInCompatMode    ;Jump if not zero only!
   123                              <1> .fcbQuirk:
   124 00007FDB E80C000000          <1>     call shareLockViolationCriticalError
   125                              <1>     retnc
    61                              <2> cret nc
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00007FE0 7201                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00007FE2 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   126                              <1> .notInCompatMode:
   127 00007FE3 31C9                <1>     xor ecx, ecx    ;Number of bytes xferred
   128 00007FE5 B821000000          <1>     mov eax, errLokVio
   129 00007FEA F9                  <1>     stc ;Set the flag for error
   130                              <1>     return
    13                              <2> %%_ret:
    14 00007FEB C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
   131                              <1> 
   132                              <1> shareLockViolationCriticalError:
   133                              <1> ;This does NOT force rwFlag to 0 and signals a lock violation
   134 00007FEC 57                  <1>     push rdi
   135 00007FED B821000000          <1>     mov eax, errLokVio
   136 00007FF2 EB08                <1>     jmp short shareCriticalError.common
   137                              <1> shareCriticalError: ;Int 2Fh AX=120Ah
   138                              <1> ;Used for share Read requests
   139                              <1> ;Input: eax = Error code
   140 00007FF4 57                  <1>     push rdi
   141 00007FF5 C605(00070000)00    <1>     mov byte [rwFlag], 0    ;Default to read
   142                              <1> .common:
   143 00007FFC C605(68040000)18    <1>     mov byte [Int24bitfld], critRetryOK | critFailOK
   144 00008003 488B2D(0A070000)    <1>     mov rbp, qword [workingDPB] 
   145 0000800A 31FF                <1>     xor edi, edi   ;Indicate that this was due to share
   146 0000800C E8AAE7FFFF          <1>     call diskDevErr
   147 00008011 5F                  <1>     pop rdi
   148 00008012 3C01                <1>     cmp al, critRetry   ;If we returned retry, return plainly, else set CF
   149                              <1>     rete
    49                              <2> cret e
    19                              <3> %%_base:
    20                              <3> %assign baseVar %%_base-$$
    21                              <3> 
    22                              <3> 
    23                              <3> 
    24                              <3> 
    25                              <3> 
    26                              <3> 
    27                              <3> 
    28                              <3> 
    29                              <3> 
    30                              <3> 
    31                              <3> 
    32                              <3> 
    33                              <3> 
    34 00008014 7501                <3>  j%-1 short %%a
    35                              <3>  return
    13                              <4> %%_ret:
    14 00008016 C3                  <4>  ret
    15                              <4> %assign retOff %%_ret-$$
    36                              <3> %%a:
    37                              <3> 
   150 00008017 F9                  <1>     stc
   151                              <1>     return
    13                              <2> %%_ret:
    14 00008018 C3                  <2>  ret
    15                              <2> %assign retOff %%_ret-$$
    57                                  
    58                                  ;=========================END OF DOS MODULE==========================
    58          ------------------       info: assembly required 1+16+2 passes

